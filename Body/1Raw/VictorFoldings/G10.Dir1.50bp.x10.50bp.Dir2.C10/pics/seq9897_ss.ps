%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCAxxxxxxxxxxUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[60.70734787 255.24621582]
[51.62984848 252.66180420]
[46.43443298 266.73333740]
[41.23901749 280.80484009]
[36.04360199 294.87637329]
[30.84818649 308.94787598]
[34.15295410 325.01058960]
[21.71655846 335.70022583]
[6.33249712 330.02020264]
[3.82657361 313.81362915]
[16.77666664 303.75247192]
[21.97208214 289.68093872]
[27.16749763 275.60943604]
[32.36291504 261.53790283]
[37.55833054 247.46638489]
[27.42960358 242.75445557]
[17.65401459 237.34786987]
[8.27913284 231.27293396]
[-0.64942372 224.55918884]
[-9.08820724 217.23933411]
[-16.99615288 209.34898376]
[-24.33477974 200.92651367]
[-31.06837845 192.01292419]
[-37.16418076 182.65159607]
[-42.59252548 172.88806152]
[-47.32699585 162.76985168]
[-51.34455109 152.34620667]
[-54.62564850 141.66783142]
[-57.15431595 130.78668213]
[-58.91824722 119.75572968]
[-59.90886688 108.62864685]
[-60.12134552 97.45957184]
[-59.55465317 86.30286407]
[-58.21154785 75.21279907]
[-56.09856415 64.24336243]
[-53.22598267 53.44791412]
[-49.60778427 42.87899780]
[-45.26157761 32.58803940]
[-40.20850754 22.62511444]
[-34.47316360 13.03870773]
[-28.08345795 3.87546492]
[-21.07048225 -4.82002258]
[-13.46835899 -13.00544262]
[-5.31408548 -20.64096260]
[3.35266042 -27.68943024]
[12.48970509 -34.11654282]
[22.05258560 -39.89102554]
[31.99477005 -44.98478317]
[42.26787567 -49.37302399]
[52.82191086 -53.03439713]
[63.60552597 -55.95108414]
[74.56623840 -58.10889435]
[85.65071106 -59.49732590]
[96.80501556 -60.10961914]
[107.97486115 -59.94280243]
[119.10590363 -58.99768066]
[121.59102631 -73.79039001]
[124.07614136 -88.58309937]
[126.56126404 -103.37580109]
[129.04638672 -118.16851044]
[131.53149414 -132.96121216]
[117.31564331 -137.85603333]
[104.09940338 -145.02407837]
[92.24333191 -154.26980591]
[82.07086182 -165.34097290]
[73.85952759 -177.93556213]
[67.83331299 -191.70999146]
[64.15663910 -206.28846741]
[62.92980194 -221.27328491]
[64.18626404 -236.25564575]
[67.89175415 -250.82681274]
[73.94518280 -264.58929443]
[82.18141174 -277.16763306]
[92.37574005 -288.21865845]
[104.25006866 -297.44091797]
[117.48046112 -304.58282471]
[131.70596313 -309.44952393]
[146.53851318 -311.90826416]
[161.57345581 -311.89196777]
[176.40063477 -309.40103149]
[190.61555481 -304.50347900]
[203.83041382 -297.33288574]
[215.68470764 -288.08489990]
[225.85504150 -277.01174927]
[234.06394958 -264.41558838]
[240.08750916 -250.63999939]
[243.76136780 -236.06082153]
[244.98532104 -221.07577515]
[243.72596741 -206.09365845]
[240.01766968 -191.52319336]
[233.96159363 -177.76187134]
[225.72294617 -165.18513489]
[215.52648926 -154.13604736]
[203.65037537 -144.91607666]
[190.41860962 -137.77673340]
[176.19216919 -132.91276550]
[161.35914612 -130.45689392]
[146.32420349 -130.47610474]
[143.83909607 -115.68339539]
[141.35397339 -100.89068604]
[138.86885071 -86.09797668]
[136.38372803 -71.30526733]
[133.89862061 -56.51256561]
[160.21759033 -48.38847733]
[184.75509644 -35.87447357]
[206.78520203 -19.34076881]
[225.65618896 0.72350955]
[240.80976868 23.72477913]
[251.79762268 48.98257065]
[258.29473877 75.74965668]
[260.10882568 103.23416901]
[257.18627930 130.62300110]
[271.75900269 134.17776489]
[286.33169556 137.73252869]
[300.90438843 141.28727722]
[313.40063477 131.88630676]
[329.01330566 132.76878357]
[340.37057495 143.51802063]
[342.10989380 159.05857849]
[333.41003418 172.05265808]
[318.37878418 176.36486816]
[304.11340332 169.95910645]
[297.34963989 155.85998535]
[282.77694702 152.30522156]
[268.20422363 148.75045776]
[253.63153076 145.19569397]
[250.70217896 154.16781616]
[247.24934387 162.95179749]
[243.28504944 171.51708984]
[238.82302856 179.83398438]
[233.87881470 187.87355042]
[228.46955872 195.60789490]
[222.61405945 203.01014709]
[216.33265686 210.05458069]
[209.64717102 216.71673584]
[202.58081055 222.97348022]
[195.15814209 228.80305481]
[187.40493774 234.18522644]
[179.34811401 239.10131836]
[171.01568604 243.53422546]
[162.43656921 247.46855164]
[153.64057922 250.89064026]
[144.65827942 253.78860474]
[135.52084351 256.15237427]
[126.26002502 257.97375488]
[116.90799713 259.24639893]
[107.49723053 259.96591187]
[98.06043243 260.12976074]
[88.63036346 259.73736572]
[79.23979187 258.79016113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
