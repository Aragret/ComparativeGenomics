%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUxxxxxxxxxxUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.10661316 361.28021240]
[179.10661316 346.28021240]
[179.10661316 331.28021240]
[179.10661316 316.28021240]
[179.10661316 301.28021240]
[179.10661316 286.28021240]
[179.10661316 271.28021240]
[179.10661316 256.28021240]
[179.10661316 241.28022766]
[179.10661316 226.28022766]
[177.26329041 211.39392090]
[173.60458374 196.84695435]
[169.94587708 182.30000305]
[166.28718567 167.75305176]
[151.59584045 165.92544556]
[138.55764771 158.82069397]
[129.00166321 147.39898682]
[124.28179169 133.22863770]
[125.08498383 118.27072906]
[131.33151245 104.60777283]
[121.00061035 93.73246002]
[118.29909515 121.44290161]
[85.07446289 131.06362915]
[70.56584167 134.87149048]
[56.05721283 138.67935181]
[41.54858780 142.48721313]
[27.03996277 146.29507446]
[12.53133774 150.10292053]
[1.14740551 161.09004211]
[-13.12711239 156.83711243]
[-26.91247368 166.70625305]
[-40.21210098 156.19168091]
[-33.79014587 140.50109863]
[-16.93497086 142.32849121]
[-6.58879280 131.61373901]
[8.72347927 135.59429932]
[23.23210526 131.78643799]
[37.74073029 127.97858429]
[52.24935532 124.17072296]
[66.75798035 120.36286163]
[81.26660919 116.55500793]
[81.88243103 101.56764984]
[67.73511505 96.58232880]
[53.58779907 91.59700775]
[37.57608032 95.14057922]
[26.70246696 82.86472321]
[32.15280151 67.39779663]
[48.32024765 64.65084076]
[58.57312012 77.44969177]
[72.72043610 82.43501282]
[86.86775208 87.42033386]
[92.94441986 83.02441406]
[79.25375366 76.89532471]
[77.71627808 61.97432709]
[89.86945343 53.18226242]
[103.56022644 59.31110001]
[105.09775543 74.23257446]
[111.17442322 69.83665466]
[110.86643982 54.83981323]
[110.55846405 39.84297562]
[110.25048828 24.84613800]
[99.12964630 13.93904495]
[99.03095245 -1.27426851]
[109.49772644 -11.80907345]
[109.18975067 -26.80591202]
[108.88177490 -41.80274963]
[94.34461975 -45.94553375]
[81.67533112 -54.19055939]
[72.00044250 -65.80468750]
[66.18024445 -79.75519562]
[64.73226929 -94.80162048]
[67.78525543 -109.60603333]
[75.06774902 -122.85204315]
[85.93218231 -133.36181641]
[99.41250610 -140.20083618]
[114.31005859 -142.76098633]
[129.30015564 -140.81462097]
[143.04989624 -134.53479004]
[154.33665466 -124.47991943]
[162.15681458 -111.54405975]
[165.81503296 -96.87747192]
[164.98599243 -81.78428650]
[159.74343872 -67.60659790]
[150.55352783 -55.60505676]
[138.23342896 -46.84683990]
[123.87860870 -42.11072540]
[124.18659210 -27.11388969]
[124.49456787 -12.11705112]
[135.38502502 -2.02084208]
[135.91099548 13.18369675]
[125.24732208 24.53816032]
[125.55530548 39.53499985]
[125.86328125 54.53183746]
[126.17125702 69.52867126]
[131.87591553 83.40155792]
[142.20681763 94.27687073]
[159.34719849 88.29409027]
[177.29428101 90.44243622]
[192.40512085 100.21562958]
[201.64334106 115.56685638]
[216.50993347 113.57080078]
[231.37654114 111.57474518]
[246.24313354 109.57868195]
[261.10974121 107.58262634]
[275.97631836 105.58657074]
[290.82165527 103.43798828]
[305.64413452 101.13711548]
[320.46661377 98.83624268]
[335.28909302 96.53536987]
[350.01333618 88.13098907]
[362.16531372 99.95322418]
[354.16912842 114.90304565]
[337.58996582 111.35784912]
[322.76748657 113.65872192]
[307.94500732 115.95960236]
[293.12252808 118.26047516]
[286.95724487 122.41996765]
[277.97238159 120.45317078]
[263.10580444 122.44922638]
[248.23919678 124.44528198]
[233.37258911 126.44133759]
[218.50599670 128.43739319]
[203.63938904 130.43345642]
[201.61361694 140.87985229]
[196.88169861 150.41084290]
[189.78469849 158.33949280]
[180.83413696 164.09434509]
[184.49284363 178.64129639]
[188.15155029 193.18826294]
[191.81025696 207.73521423]
[197.27810669 193.76730347]
[208.18367004 183.46832275]
[222.44131470 178.80790710]
[237.32437134 180.67729187]
[249.98655701 188.71899414]
[258.00631714 201.39509583]
[259.84994507 216.28135681]
[255.16484070 230.53091431]
[244.84700012 241.41862488]
[230.86964417 246.86228943]
[215.90585327 245.82086182]
[202.81732178 238.49348450]
[194.10661316 226.28022766]
[194.10661316 241.28022766]
[194.10661316 256.28021240]
[194.10661316 271.28021240]
[194.10661316 286.28021240]
[194.10661316 301.28021240]
[194.10661316 316.28021240]
[194.10661316 331.28021240]
[194.10661316 346.28021240]
[194.10661316 361.28021240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 127]
[20 96]
[21 95]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[30 34]
[42 51]
[43 50]
[44 49]
[58 94]
[59 93]
[60 92]
[61 91]
[64 88]
[65 87]
[66 86]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
