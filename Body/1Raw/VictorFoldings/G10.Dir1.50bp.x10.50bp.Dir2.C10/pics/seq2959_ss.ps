%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAxxxxxxxxxxCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 282.07113647]
[92.50000000 267.07113647]
[92.50000000 252.07112122]
[92.50000000 237.07112122]
[92.50000000 222.07112122]
[92.50000000 207.07112122]
[92.50000000 192.07112122]
[92.50000000 177.07112122]
[92.50000000 162.07112122]
[92.50000000 147.07112122]
[85.21728516 145.31459045]
[78.29974365 142.43865967]
[71.91825867 138.51437378]
[66.23047638 133.63867188]
[61.37689209 127.93199158]
[47.99060440 134.70010376]
[34.60432053 141.46823120]
[21.21803665 148.23634338]
[7.83175087 155.00445557]
[-5.55453396 161.77256775]
[-18.94081879 168.54067993]
[-28.61836815 184.17158508]
[-46.06835938 182.59114075]
[-59.31094360 189.63627625]
[-70.45452881 202.41348267]
[-85.81724548 195.24246216]
[-83.17929840 178.49499512]
[-66.35607910 176.39369202]
[-53.11349106 169.34855652]
[-49.25715637 157.84046936]
[-38.22740936 151.87695312]
[-25.70893288 155.15440369]
[-12.32264900 148.38627625]
[1.06363606 141.61816406]
[14.44992065 134.85005188]
[27.83620644 128.08193970]
[41.22249222 121.31382751]
[54.60877609 114.54570770]
[53.47812653 89.62425232]
[65.09130859 67.54504395]
[86.26709747 54.35628891]
[111.20476532 53.67080688]
[116.98104095 39.82759094]
[122.75730896 25.98437119]
[128.38926697 12.08181572]
[133.87629700 -1.87857425]
[119.59141541 2.69767737]
[106.16757965 -3.99564290]
[101.22621918 -18.15837669]
[107.57282257 -31.74957275]
[121.60407257 -37.05277634]
[135.35368347 -31.05707359]
[141.01524353 -17.16500282]
[148.19775391 -30.33358574]
[155.38024902 -43.50216675]
[155.19563293 -59.32229614]
[168.08248901 -66.79075623]
[175.26499939 -79.95934296]
[182.44750977 -93.12792206]
[170.12001038 -101.69996643]
[158.79159546 -111.55461884]
[148.59507751 -122.57634735]
[139.65002441 -134.63591003]
[132.06129456 -147.59193420]
[125.91786194 -161.29249573]
[121.29176331 -175.57698059]
[118.23723602 -190.27789307]
[116.79009247 -205.22290039]
[116.96730042 -220.23675537]
[118.76677704 -235.14343262]
[122.16742706 -249.76817322]
[127.12937927 -263.93948364]
[133.59446716 -277.49124146]
[141.48687744 -290.26452637]
[150.71406555 -302.10961914]
[161.16787720 -312.88760376]
[172.72573853 -322.47213745]
[185.25212097 -330.75085449]
[198.60017395 -337.62664795]
[212.61340332 -343.01895142]
[227.12748718 -346.86450195]
[241.97227478 -349.11825562]
[256.97372437 -349.75375366]
[271.95593262 -348.76354980]
[286.74325562 -346.15927124]
[301.16232300 -341.97143555]
[315.04406738 -336.24914551]
[328.22573853 -329.05950928]
[340.55276489 -320.48681641]
[351.88064575 -310.63153076]
[362.07656860 -299.60925293]
[371.02099609 -287.54922485]
[378.60900879 -274.59280396]
[384.75170898 -260.89190674]
[389.37704468 -246.60716248]
[392.43078613 -231.90608215]
[393.87710571 -216.96099854]
[393.69909668 -201.94715881]
[391.89883423 -187.04057312]
[388.49737549 -172.41601562]
[383.53466797 -158.24497986]
[377.06884766 -144.69357300]
[369.17578125 -131.92070007]
[359.94793701 -120.07611084]
[349.49353027 -109.29868317]
[337.93518066 -99.71476746]
[325.40832520 -91.43674469]
[312.05990601 -84.56165314]
[298.04641724 -79.17011261]
[283.53210449 -75.32533264]
[268.68719482 -73.07238770]
[253.68571472 -72.43769836]
[238.70355225 -73.42869568]
[223.91636658 -76.03377533]
[209.49752808 -80.22238159]
[195.61608887 -85.94541168]
[188.43359375 -72.77683258]
[181.25108337 -59.60824966]
[181.94944763 -44.73002243]
[168.54884338 -36.31966019]
[161.36633301 -23.15107536]
[154.18382263 -9.98249340]
[147.83668518 3.60845733]
[142.34965515 17.56884766]
[142.83312988 24.99258614]
[136.60052490 31.76064491]
[130.82426453 45.60386276]
[125.04798889 59.44707870]
[132.14863586 64.80901337]
[138.12902832 71.39723206]
[142.78073120 78.98216248]
[145.94168091 87.29949951]
[147.50170898 96.05941010]
[147.40646362 104.95662689]
[145.65925598 113.68112946]
[142.32096863 121.92888641]
[137.50794983 129.41249084]
[131.38789368 135.87117004]
[124.17407227 141.07986450]
[116.11785889 144.85705566]
[107.50000000 147.07112122]
[107.50000000 162.07112122]
[107.50000000 177.07112122]
[107.50000000 192.07112122]
[107.50000000 207.07112122]
[107.50000000 222.07112122]
[107.50000000 237.07112122]
[107.50000000 252.07112122]
[107.50000000 267.07113647]
[107.50000000 282.07113647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[23 29]
[24 28]
[42 128]
[43 127]
[44 126]
[45 124]
[46 123]
[53 122]
[54 121]
[55 120]
[57 118]
[58 117]
[59 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
