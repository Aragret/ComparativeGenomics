%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGxxxxxxxxxxUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.22230530 131.02088928]
[67.26449585 136.51446533]
[53.30668640 142.00805664]
[39.34887314 147.50164795]
[25.39106369 152.99523926]
[11.48964214 158.62998962]
[-2.35396266 164.40533447]
[-16.19756889 170.18067932]
[-30.04117393 175.95602417]
[-43.88477707 181.73136902]
[-40.39472961 196.35380554]
[-39.29561615 211.34674072]
[-40.61590958 226.32182312]
[-44.32140732 240.89115906]
[-50.31613541 254.67735291]
[-58.44480896 267.32333374]
[-68.49687958 278.50152588]
[-80.21196747 287.92239380]
[-93.28663635 295.34191895]
[-107.38220978 300.56790161]
[-122.13359070 303.46499634]
[-137.15866089 303.95812988]
[-152.06826782 302.03457642]
[-166.47618103 297.74411011]
[-180.00923157 291.19790649]
[-192.31684875 282.56549072]
[-203.08026123 272.07049561]
[-212.02067566 259.98474121]
[-218.90649414 246.62129211]
[-223.55935669 232.32629395]
[-225.85876465 217.47001648]
[-225.74513245 202.43727112]
[-223.22142029 187.61746216]
[-218.35299683 173.39442444]
[-211.26596069 160.13659668]
[-202.14387512 148.18737793]
[-191.22305298 137.85627747]
[-178.78633118 129.41090393]
[-165.15588379 123.07000732]
[-150.68475342 118.99783325]
[-135.74778748 117.29986572]
[-120.73187256 118.02008057]
[-106.02597809 121.13982391]
[-92.01100922 126.57828522]
[-79.04999542 134.19459534]
[-67.47865295 143.79148865]
[-57.59670639 155.12034607]
[-49.66012192 167.88777161]
[-35.81651688 162.11242676]
[-21.97291183 156.33708191]
[-8.12930584 150.56173706]
[5.71429920 144.78639221]
[10.70594501 139.27612305]
[19.89747429 139.03742981]
[33.85528564 133.54383850]
[47.81309509 128.05024719]
[61.77090836 122.55666351]
[75.72871399 117.06307220]
[78.61638641 110.14126587]
[64.77287292 104.36571503]
[70.54864502 90.52228546]
[84.39173126 96.29766083]
[87.27940369 89.37586212]
[81.36406708 75.59149170]
[75.44873047 61.80712891]
[61.99621582 52.42832184]
[63.66165543 36.11396027]
[78.73178101 29.64686203]
[91.70374298 39.67982101]
[89.23309326 55.89178848]
[95.14842987 69.67615509]
[101.06377411 83.46052551]
[102.48114777 68.52764130]
[103.89852905 53.59475327]
[105.31591034 38.66186905]
[106.73329163 23.72898674]
[108.15067291 8.79610252]
[109.56805420 -6.13678217]
[104.97298431 -20.41562653]
[103.64488983 -35.35671616]
[105.64935303 -50.22218323]
[110.88738251 -64.27789307]
[119.10030365 -76.82971191]
[129.88250732 -87.25775146]
[142.70152283 -95.04702759]
[156.92427063 -99.81286621]
[171.84837341 -101.31990814]
[186.73680115 -99.49372101]
[200.85427856 -94.42449951]
[213.50360107 -86.36258698]
[224.06008911 -75.70611572]
[232.00242615 -62.98135757]
[236.93835449 -48.81673431]
[238.62413025 -33.91176224]
[236.97648621 -19.00252724]
[232.07679749 -4.82532549]
[224.16703796 7.91970158]
[213.63783264 18.60313797]
[201.00917053 26.69738007]
[186.91023254 31.80136490]
[175.96925354 42.06270218]
[165.02827454 52.32403946]
[154.08729553 62.58538055]
[143.14633179 72.84671783]
[132.20535278 83.10805511]
[121.26437378 93.36939240]
[135.78552246 89.60960388]
[145.13046265 76.56921387]
[161.15908813 75.88876343]
[171.57559204 88.09023285]
[168.38934326 103.81369781]
[154.04455566 110.99746704]
[139.54531860 104.13076019]
[125.02416229 107.89054871]
[139.76594543 105.11927032]
[154.74922180 104.41141510]
[169.68661499 105.78055573]
[184.29156494 109.20043182]
[198.28390503 114.60543060]
[211.39526367 121.89189148]
[223.37411499 130.92002869]
[233.99066162 141.51666260]
[243.04129028 153.47853088]
[250.35235596 166.57617188]
[255.78363037 180.55834961]
[259.23092651 195.15684509]
[260.62811279 210.09164429]
[259.94839478 225.07623291]
[257.20480347 239.82318115]
[252.44999695 254.04963684]
[245.77513123 267.48266602]
[237.30828857 279.86459351]
[227.21186829 290.95794678]
[215.67953491 300.54989624]
[202.93251038 308.45642090]
[189.21531677 314.52590942]
[174.79109192 318.64193726]
[159.93650818 320.72549438]
[144.93650818 320.73663330]
[130.07884216 318.67517090]
[115.64849854 314.58059692]
[101.92230225 308.53152466]
[89.16353607 300.64395142]
[77.61695862 291.06915283]
[67.50405121 279.99084473]
[59.01880646 267.62149048]
[52.32398605 254.19839478]
[47.54801559 239.97904968]
[44.78250885 225.23619080]
[44.08051682 210.25262451]
[45.45550156 195.31576538]
[48.88108826 180.71215820]
[54.29156876 166.72192383]
[61.58315659 153.61343384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[6 52]
[7 51]
[8 50]
[9 49]
[10 48]
[63 72]
[64 71]
[65 70]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
