%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.65594482 298.35601807]
[132.34388733 283.35925293]
[132.03182983 268.36248779]
[131.71977234 253.36573792]
[131.40771484 238.36898804]
[131.09565735 223.37223816]
[130.78361511 208.37548828]
[130.47155762 193.37872314]
[130.15950012 178.38197327]
[126.30233765 163.88638306]
[119.11982727 150.71780396]
[111.93731689 137.54920959]
[99.57112122 139.39871216]
[87.24812317 137.28045654]
[76.20933533 131.40776062]
[67.56645966 122.37204742]
[62.18989944 111.08329010]
[47.25559235 112.48559570]
[32.32128525 113.88789368]
[17.38697624 115.29019928]
[2.45266819 116.69250488]
[-12.48163986 118.09481049]
[-27.20627785 129.10229492]
[-42.86872864 121.24815369]
[-57.77062988 122.96084595]
[-72.67253113 124.67353821]
[-75.90103149 139.46730042]
[-83.76026154 152.40991211]
[-95.39771271 162.09745789]
[-109.55103302 167.47909546]
[-124.68499756 167.97106934]
[-139.15795898 163.52001953]
[-151.40002441 154.60874939]
[-160.08325195 142.20390320]
[-164.26574707 127.65105438]
[-163.49383545 112.52879333]
[-157.85124207 98.47746277]
[-147.95004272 87.02125549]
[-134.86422729 79.40283966]
[-120.01325226 76.44862366]
[-105.00804901 78.47904968]
[-91.47627258 85.27386475]
[-80.88573456 96.09603119]
[-74.38522339 109.77162933]
[-59.48332214 108.05894470]
[-44.58141708 106.34625244]
[-36.78267288 97.04641724]
[-24.33589745 95.53092194]
[-13.88394356 103.16049957]
[1.05036449 101.75819397]
[15.98467255 100.35588837]
[30.91897964 98.95359039]
[45.85328674 97.55128479]
[60.78759384 96.14897919]
[67.20401764 78.16272736]
[81.32435608 65.30614471]
[99.83169556 60.59930420]
[102.62401581 45.86149979]
[105.41634369 31.12369347]
[108.20866394 16.38588715]
[98.18489838 27.54491997]
[85.65483093 35.79097748]
[71.44082642 40.58286285]
[56.47576904 41.60608292]
[41.74181747 38.79348373]
[28.20598221 32.32965088]
[16.75662422 22.63882065]
[8.14517689 10.35700607]
[2.93681765 -3.70972753]
[1.47337484 -18.63816833]
[3.85089540 -33.44855118]
[9.91334057 -47.16885376]
[19.26282692 -58.89860535]
[31.28573990 -67.86797333]
[45.19300842 -73.48828888]
[60.07188034 -75.39068604]
[74.94584656 -73.45030975]
[88.83872223 -67.79450989]
[100.83869934 -58.79447174]
[110.15820312 -47.04088974]
[116.18560028 -33.30515289]
[118.52530670 -18.48874855]
[117.02265167 -3.55937123]
[126.04018402 -15.54620361]
[135.05770874 -27.53303719]
[144.07524109 -39.51987076]
[153.09277344 -51.50670242]
[149.38673401 -66.69878387]
[156.35932922 -80.69581604]
[170.71832275 -86.88882446]
[185.68382263 -82.35366821]
[194.18959045 -69.23170471]
[192.21945190 -53.71872711]
[180.70365906 -43.13948441]
[165.07960510 -42.48917007]
[156.06207275 -30.50233841]
[147.04454041 -18.51550674]
[138.02700806 -6.52867413]
[129.00949097 5.45815849]
[122.94647217 19.17821312]
[120.15414429 33.91601944]
[117.36182404 48.65382385]
[114.56949615 63.39162827]
[127.71546173 71.99471283]
[136.45483398 85.05047607]
[151.16279602 82.10498810]
[163.11425781 70.87580872]
[178.73446655 75.86989594]
[181.95469666 91.94976807]
[169.46224976 102.57382202]
[154.10827637 96.81295013]
[139.40031433 99.75843811]
[137.76448059 111.23773956]
[132.85803223 121.74378967]
[125.10590363 130.36669922]
[132.28840637 143.53529358]
[139.47091675 156.70387268]
[140.15370178 141.71942139]
[144.47378540 127.35498810]
[152.16976929 114.47975159]
[162.77600098 103.87277222]
[175.65068054 96.17586517]
[190.01481628 91.85475922]
[204.99922180 91.17092133]
[219.69721985 94.16571808]
[233.21945190 100.65795135]
[244.74771118 110.25478363]
[253.58444214 122.37551880]
[259.19494629 136.28674316]
[261.23971558 151.14672852]
[259.59506226 166.05628967]
[254.36048889 180.11328125]
[245.85270691 192.46713257]
[234.58653259 202.37034607]
[221.24366760 209.22366333]
[206.63146973 212.61241150]
[191.63410950 212.33154297]
[177.15902710 208.39805603]
[164.08212280 201.04995728]
[153.19465637 190.73187256]
[145.15625000 178.06991577]
[145.46830750 193.06666565]
[145.78036499 208.06343079]
[146.09242249 223.06018066]
[146.40447998 238.05693054]
[146.71653748 253.05368042]
[147.02857971 268.05044556]
[147.34063721 283.04718018]
[147.65269470 298.04394531]
[150.24369812 317.25167847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 117]
[11 116]
[12 115]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[24 46]
[25 45]
[26 44]
[57 103]
[58 102]
[59 101]
[60 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
