%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCxxxxxxxxxxUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.42109680 298.15444946]
[109.10903931 283.15768433]
[108.79698181 268.16094971]
[108.48493195 253.16418457]
[108.17287445 238.16743469]
[107.86081696 223.17066956]
[107.54875946 208.17391968]
[107.23670197 193.17716980]
[106.92464447 178.18041992]
[92.64918518 173.57484436]
[83.63166046 185.56167603]
[74.61412811 197.54852295]
[77.07421112 213.16015625]
[67.70722198 225.88946533]
[52.07043839 228.18435669]
[39.44087982 218.68330383]
[37.31144333 203.02313232]
[46.94548416 190.49473572]
[62.62729645 188.53099060]
[71.64482117 176.54415894]
[80.66235352 164.55732727]
[72.80493164 151.77996826]
[58.03887177 154.41882324]
[43.27281952 157.05769348]
[28.50676346 159.69656372]
[13.74070740 162.33541870]
[10.51912785 177.19105530]
[1.85366452 189.68017578]
[-10.93426323 197.89828491]
[-25.89459038 200.59217834]
[-40.74597168 197.35105896]
[-53.22368622 188.66917419]
[-61.42496872 175.87045288]
[-64.09918213 160.90660095]
[-60.83852768 146.05949402]
[-52.14023590 133.59320068]
[-39.33073425 125.40876770]
[-24.36337090 122.75424194]
[-9.52056599 126.03442383]
[2.93426251 134.74909973]
[11.10184288 147.56936646]
[25.86789894 144.93049622]
[40.63395309 142.29164124]
[55.40000916 139.65277100]
[70.16606140 137.01390076]
[61.54146957 109.34132385]
[71.08106232 87.22969818]
[59.18868256 78.08796692]
[47.29630280 68.94623566]
[32.45310593 73.46940613]
[17.79707527 68.37231445]
[8.96375465 55.61487961]
[9.34973621 40.10260773]
[18.80660057 27.80027580]
[33.69799423 23.43838692]
[48.29786682 28.69417381]
[56.99227524 41.54668045]
[56.43803787 57.05385208]
[68.33041382 66.19558716]
[80.22279358 75.33731842]
[126.35431671 70.47426605]
[140.21519470 125.35412598]
[149.48013306 113.55747986]
[158.74508667 101.76084137]
[168.01004028 89.96420288]
[177.27499390 78.16756439]
[179.71389771 62.53547287]
[193.66001892 57.30524826]
[202.92495728 45.50860977]
[192.59173584 33.58499908]
[184.75776672 19.89429855]
[179.71643066 4.95274448]
[177.65586853 -10.67664814]
[178.65194702 -26.40529442]
[182.66542053 -41.64121246]
[189.54354858 -55.81129837]
[199.02586365 -68.38288116]
[210.75399780 -78.88376617]
[224.28530884 -86.91993713]
[239.10954285 -92.19036102]
[254.66807556 -94.49828339]
[270.37496948 -93.75852966]
[285.63900757 -90.00067139]
[299.88601685 -83.36785889]
[308.65222168 -95.53969574]
[317.41842651 -107.71153259]
[326.18466187 -119.88336945]
[334.95086670 -132.05520630]
[336.05789185 -148.41694641]
[350.89828491 -155.39517212]
[364.20544434 -145.81127930]
[362.29016113 -129.52436829]
[347.12268066 -123.28900146]
[338.35647583 -111.11716461]
[329.59027100 -98.94532776]
[320.82406616 -86.77349091]
[312.05786133 -74.60165405]
[321.95965576 -64.33153534]
[329.90802002 -52.48048782]
[335.65527344 -39.41546631]
[339.02203369 -25.54126167]
[339.90258789 -11.28799343]
[338.26837158 2.90224600]
[334.16882324 16.58909798]
[327.72991943 29.34760284]
[319.15032959 40.78139496]
[308.69512939 50.53500748]
[296.68783569 58.30494690]
[283.50027466 63.84910965]
[269.54107666 66.99434662]
[255.24296570 67.64184570]
[241.04948425 65.77026367]
[227.40110779 61.43642426]
[214.72160339 54.77355957]
[205.45664978 66.57019806]
[203.68043518 81.35851288]
[189.07162476 87.43251038]
[179.80667114 99.22915649]
[170.54173279 111.02579498]
[161.27677917 122.82243347]
[152.01182556 134.61907959]
[154.95730591 149.32704163]
[168.05046082 156.64613342]
[184.43161011 155.87777710]
[193.05865479 169.82432556]
[185.05685425 184.13876343]
[168.65776062 184.09562683]
[160.73135376 169.73928833]
[147.63819885 162.42018127]
[141.20899963 166.28222656]
[149.19036865 178.98254395]
[157.17172241 191.68286133]
[165.15307617 204.38316345]
[175.94143677 214.80484009]
[169.83850098 228.50718689]
[154.87515259 227.45924377]
[150.74165344 213.04016113]
[143.27796936 200.02888489]
[135.81428528 187.01759338]
[128.35060120 174.00631714]
[121.92140198 177.86836243]
[122.23345947 192.86511230]
[122.54551697 207.86186218]
[122.85756683 222.85861206]
[123.16962433 237.85537720]
[123.48168182 252.85212708]
[123.79373932 267.84887695]
[124.10579681 282.84564209]
[124.41785431 297.84237671]
[127.00885010 317.05010986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 21]
[11 20]
[12 19]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[47 60]
[48 59]
[49 58]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[68 115]
[69 114]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
