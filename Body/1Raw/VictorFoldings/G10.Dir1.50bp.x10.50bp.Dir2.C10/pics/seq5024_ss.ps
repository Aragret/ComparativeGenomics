%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUxxxxxxxxxxAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.68579865 277.32507324]
[102.68579865 262.32507324]
[102.68579865 247.32508850]
[102.68579865 232.32508850]
[102.68579865 217.32508850]
[102.68579865 202.32508850]
[102.68579865 187.32508850]
[102.68579865 172.32508850]
[102.68579865 157.32508850]
[102.68579865 142.32508850]
[90.61603546 140.19798279]
[79.98040009 134.79975891]
[71.61376953 126.76677704]
[66.10985565 116.93186188]
[63.78073120 106.24068451]
[64.64357758 95.66209412]
[68.43461609 86.10061646]
[74.64772034 78.31910706]
[65.73156738 66.25667572]
[51.30656433 59.75822830]
[49.96339035 44.92430878]
[41.04724121 32.86187744]
[32.13108826 20.79944611]
[23.21493721 8.73701572]
[14.29878712 -3.32541609]
[5.38263607 -15.38784695]
[-10.87451935 -12.07066059]
[-27.66302109 -20.46245575]
[-36.72838974 -39.35430527]
[-51.59498978 -41.35036087]
[-66.46158600 -43.34641647]
[-81.32818604 -45.34247589]
[-96.19478607 -47.33853149]
[-111.06138611 -49.33458710]
[-118.66533661 -36.17220306]
[-130.73054504 -26.92561913]
[-145.41712952 -23.00487137]
[-160.48553467 -25.00784683]
[-173.63790894 -32.62910461]
[-182.86860657 -44.70646286]
[-186.77003479 -59.39820480]
[-184.74723816 -74.46395111]
[-177.10868835 -87.60628510]
[-165.01919556 -96.82109833]
[-150.32232666 -100.70319366]
[-135.25926208 -98.66057587]
[-122.12698364 -91.00474548]
[-112.92808533 -78.90314484]
[-109.06533051 -64.20118713]
[-94.19873047 -62.20513153]
[-79.33213043 -60.20907211]
[-64.46553040 -58.21301651]
[-49.59893417 -56.21696091]
[-34.73233414 -54.22090149]
[-28.93781090 -58.98257065]
[-43.60913849 -62.10540009]
[-50.31517410 -75.52289581]
[-44.00624084 -89.13161469]
[-29.43299103 -92.68414307]
[-17.56915092 -83.50540161]
[-17.34876251 -68.50590515]
[-11.55423737 -73.26757812]
[-10.63082409 -88.23912811]
[-9.70740986 -103.21067810]
[-8.78399658 -118.18222809]
[-15.65707111 -132.43254089]
[-7.15094328 -144.65936279]
[-6.22752953 -159.63090515]
[-20.37579727 -164.95236206]
[-32.32595062 -174.20899963]
[-41.01539230 -186.57771301]
[-45.67145538 -200.95867920]
[-45.88013458 -216.07318115]
[-41.62287140 -230.57720947]
[-33.27821732 -243.18110657]
[-21.58817482 -252.76412964]
[-7.59221315 -258.47415161]
[7.46515512 -259.80346680]
[22.24503899 -256.63388062]
[35.43322372 -249.24717712]
[45.85702133 -238.30021667]
[52.58955383 -224.76638794]
[55.03217316 -209.84912109]
[52.96768188 -194.87483215]
[46.57965469 -181.17503357]
[36.43610764 -169.96789551]
[23.43899727 -162.24996948]
[8.74402046 -158.70748901]
[7.82060671 -143.73594666]
[14.75972939 -130.55650330]
[6.18755341 -117.25881195]
[5.26413965 -102.28726196]
[4.34072638 -87.31571198]
[3.41731262 -72.34416199]
[24.88434029 -49.51382828]
[17.44506836 -24.30399895]
[26.36121941 -12.24156666]
[35.27737045 -0.17913547]
[44.19351959 11.88329601]
[53.10967255 23.94572830]
[62.02582169 36.00815964]
[75.81308746 41.64381790]
[77.79399872 57.34052277]
[86.71015167 69.40295410]
[111.06873322 65.34910583]
[133.73393250 79.65715027]
[141.75279236 107.43843842]
[156.65724182 109.12883759]
[162.90702820 95.35221100]
[173.10963440 84.18251801]
[186.26550293 76.71405029]
[201.08578491 73.67849731]
[216.11851501 75.37324524]
[229.89094543 81.63225555]
[241.05380249 91.84234619]
[248.51345825 105.00322723]
[251.53907776 119.82553101]
[249.83425903 134.85713196]
[243.56602478 148.62536621]
[233.34844971 159.78137207]
[220.18257141 167.23219299]
[205.35824585 170.24789429]
[190.32780457 168.53300476]
[176.56376648 162.25553894]
[165.41461182 152.03050232]
[157.97259521 138.85963440]
[154.96684265 124.03328705]
[140.06239319 122.34288788]
[134.46824646 127.33843231]
[146.73771667 135.96746826]
[159.00717163 144.59651184]
[173.88983154 146.46910095]
[185.39108276 156.09828186]
[189.85105896 170.41989136]
[185.85054016 184.87658691]
[174.66253662 194.86801147]
[159.84724426 197.21473694]
[146.11912537 191.17001343]
[137.84666443 178.65736389]
[137.66271973 163.65701294]
[130.47132874 150.49327087]
[123.27995300 137.32952881]
[117.68579865 142.32508850]
[117.68579865 157.32508850]
[117.68579865 172.32508850]
[117.68579865 187.32508850]
[117.68579865 202.32508850]
[117.68579865 217.32508850]
[117.68579865 232.32508850]
[117.68579865 247.32508850]
[117.68579865 262.32507324]
[117.68579865 277.32507324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 104]
[19 103]
[21 101]
[22 100]
[23 99]
[24 98]
[25 97]
[26 96]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[62 94]
[63 93]
[64 92]
[65 91]
[67 89]
[68 88]
[107 128]
[108 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
