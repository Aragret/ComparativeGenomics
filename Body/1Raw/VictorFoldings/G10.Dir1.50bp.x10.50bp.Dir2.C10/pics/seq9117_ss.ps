%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGxxxxxxxxxxCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.84035492 267.52221680]
[80.84035492 252.52221680]
[80.84035492 237.52221680]
[80.84035492 222.52221680]
[80.84035492 207.52221680]
[80.84035492 192.52221680]
[80.84035492 177.52221680]
[80.84035492 162.52221680]
[80.84035492 147.52221680]
[80.84035492 132.52221680]
[67.90229797 124.93231201]
[54.80914307 132.25141907]
[41.71598816 139.57052612]
[28.62283325 146.88963318]
[15.76443005 154.61372375]
[3.15330195 162.73526001]
[-9.45782566 170.85679626]
[-12.86921120 176.64212036]
[-17.94369125 179.37725830]
[-22.76681709 179.04115295]
[-35.70487213 186.63105774]
[-48.64292908 194.22097778]
[-61.58098602 201.81088257]
[-72.18341064 215.04057312]
[-87.83113098 208.51483154]
[-85.89214325 191.67213440]
[-69.17089081 188.87281799]
[-56.23283768 181.28291321]
[-43.29478073 173.69300842]
[-30.35672569 166.10310364]
[-17.57936859 158.24566650]
[-4.96824026 150.12413025]
[7.64288807 142.00259399]
[8.73460960 138.58563232]
[11.57311630 135.54513550]
[15.95464134 133.71357727]
[21.30372620 133.79647827]
[34.39688110 126.47737122]
[47.49003601 119.15826416]
[60.58319092 111.83915710]
[64.49593353 95.67887115]
[73.85342407 84.53910828]
[85.40367889 79.72158813]
[95.89624023 80.83957672]
[102.84855652 86.08394623]
[105.02539062 71.24274445]
[107.20222473 56.40153885]
[109.37906647 41.56033325]
[95.27323914 36.30633163]
[82.57308197 28.23733711]
[71.83241272 17.70809937]
[63.51901627 5.18059397]
[57.99425125 -8.79624557]
[55.49734497 -23.61058998]
[56.13504028 -38.61449051]
[59.87703323 -53.15221405]
[66.55741119 -66.58892059]
[75.88198090 -78.33836365]
[87.44125366 -87.88847351]
[100.72843170 -94.82369232]
[115.16158295 -98.84302521]
[130.10917664 -99.77312469]
[132.28601074 -114.61433411]
[134.46286011 -129.45553589]
[136.63969421 -144.29673767]
[138.81652832 -159.13795471]
[124.80979919 -164.69746399]
[112.46308136 -173.33779907]
[102.44222260 -184.59298706]
[95.28762817 -197.85603333]
[91.38514709 -212.41169739]
[90.94522095 -227.47500610]
[93.99158478 -242.23361206]
[100.35994720 -255.89160156]
[109.70687103 -267.71240234]
[121.52829742 -277.05856323]
[135.18669128 -283.42605591]
[149.94549561 -286.47146606]
[165.00877380 -286.03054810]
[179.56417847 -282.12713623]
[192.82676697 -274.97167969]
[204.08129883 -264.95010376]
[212.72084045 -252.60281372]
[218.27944946 -238.59573364]
[220.45736694 -223.68420410]
[219.13716125 -208.67242432]
[214.38999939 -194.36993408]
[206.47190857 -181.54804993]
[195.80989075 -170.89825439]
[182.97894287 -162.99487305]
[168.67102051 -158.26411438]
[153.65773010 -156.96112061]
[151.48089600 -142.11990356]
[149.30406189 -127.27870178]
[147.12722778 -112.43750000]
[144.95037842 -97.59629059]
[159.00126648 -92.41282654]
[171.67224121 -84.41799164]
[182.40814209 -73.95918274]
[190.73800659 -61.49182892]
[196.29570007 -47.55952835]
[198.83604431 -32.77037430]
[198.24559021 -17.77039337]
[194.54771423 -3.21534634]
[187.90171814 10.25795937]
[178.59590149 22.05952072]
[167.03512573 31.67197609]
[153.72315979 38.67329025]
[139.24075317 42.75527573]
[124.22026825 43.73716736]
[122.04343414 58.57837296]
[119.86660004 73.41957855]
[117.68975830 88.26078796]
[125.41384125 101.11918640]
[139.53865051 106.16794586]
[153.66345215 111.21669769]
[165.31970215 101.21533203]
[180.41795349 98.39779663]
[194.89683533 103.52198792]
[204.86161804 115.20953369]
[207.63182068 130.31654358]
[202.46226501 144.77929688]
[190.74354553 154.70739746]
[175.62792969 157.43022156]
[161.18144226 152.21536255]
[151.29013062 140.46557617]
[148.61470032 125.34150696]
[134.48989868 120.29274750]
[120.36508942 115.24398804]
[114.23390198 119.56354523]
[124.20908356 130.76603699]
[134.18426514 141.96853638]
[147.77856445 148.30848694]
[152.18019104 162.64814758]
[144.48408508 175.52331543]
[129.76968384 178.43638611]
[117.74846649 169.46473694]
[116.35430145 154.53013611]
[109.16291809 141.36640930]
[101.97153473 128.20266724]
[95.84035492 132.52221680]
[95.84035492 147.52221680]
[95.84035492 162.52221680]
[95.84035492 177.52221680]
[95.84035492 192.52221680]
[95.84035492 207.52221680]
[95.84035492 222.52221680]
[95.84035492 237.52221680]
[95.84035492 252.52221680]
[95.84035492 267.52221680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[13 38]
[14 37]
[15 33]
[16 32]
[17 31]
[20 30]
[21 29]
[22 28]
[23 27]
[45 113]
[46 112]
[47 111]
[48 110]
[62 96]
[63 95]
[64 94]
[65 93]
[66 92]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
