%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAxxxxxxxxxxCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.42734528 413.79589844]
[100.42734528 398.79589844]
[100.42734528 383.79589844]
[100.42734528 368.79589844]
[100.42734528 353.79589844]
[100.42734528 338.79589844]
[100.42734528 323.79589844]
[100.42734528 308.79589844]
[100.42734528 293.79589844]
[100.42734528 278.79589844]
[85.38687134 275.19885254]
[71.62954712 268.11648560]
[59.95033264 257.95333862]
[51.02520752 245.29217529]
[45.37206268 230.86042786]
[43.32064819 215.48854065]
[44.99333191 200.06207275]
[50.29781723 185.47076416]
[58.93223190 172.55715942]
[70.40228271 162.06797791]
[84.04956818 154.61093140]
[99.08937073 150.61955261]
[98.77731323 135.62280273]
[98.46525574 120.62604523]
[86.38526917 111.73369598]
[71.97305298 115.89157867]
[67.65534210 130.70242310]
[56.00072479 140.81050110]
[40.72814560 142.99038696]
[26.71102905 136.54647827]
[18.42218971 123.53498840]
[18.50656128 108.10785675]
[26.93722534 95.18781281]
[41.02398300 88.89760590]
[56.27180481 91.24440765]
[67.81516266 101.47936249]
[82.22737885 97.32147980]
[83.78496552 82.40256500]
[70.54237366 75.35742950]
[57.29979324 68.31229401]
[44.05720520 61.26715851]
[30.81462097 54.22202682]
[17.57203484 47.17689133]
[4.25687885 40.26988983]
[-9.12940598 33.50177765]
[-22.51568985 26.73366165]
[-35.90197372 19.96554756]
[-52.76527405 18.21467781]
[-55.75105286 1.52571571]
[-40.54084778 -5.96334362]
[-29.13386154 6.57926226]
[-15.74757576 13.34737682]
[-2.36129117 20.11549187]
[11.02499390 26.88360596]
[18.46141815 27.09627914]
[24.61717033 33.93430328]
[37.85975647 40.97943878]
[51.10234070 48.02457428]
[64.34492493 55.06970978]
[77.58750916 62.11484528]
[90.83010101 69.15998077]
[82.11474609 56.95167923]
[85.24986267 42.28297043]
[98.19432068 34.70398331]
[112.52056885 39.14905167]
[118.90143585 52.72419357]
[113.18295288 66.59094238]
[124.48195648 56.72521973]
[115.90961456 44.39728165]
[108.74549103 31.20112228]
[103.07657623 17.29693031]
[98.97166443 2.85349321]
[96.48059082 -11.95386219]
[95.63360596 -26.94538689]
[96.44097137 -41.93909454]
[98.89290619 -56.75298309]
[102.95963287 -71.20721436]
[108.59178925 -85.12634277]
[115.72101593 -98.34138489]
[124.26074982 -110.69193268]
[134.10734558 -122.02806091]
[145.14126587 -132.21215820]
[157.22856140 -141.12060547]
[170.22251892 -148.64524841]
[183.96539307 -154.69476318]
[198.29035950 -159.19569397]
[213.02354431 -162.09341431]
[227.98606873 -163.35273743]
[242.99632263 -162.95840454]
[257.87210083 -160.91517639]
[272.43280029 -157.24786377]
[286.50167847 -152.00097656]
[299.90795898 -145.23822021]
[312.48889160 -137.04168701]
[324.09176636 -127.51087189]
[334.57571411 -116.76147461]
[343.81350708 -104.92396545]
[351.69299316 -92.14206696]
[358.11849976 -78.57091522]
[363.01202393 -64.37526703]
[366.31420898 -49.72743988]
[367.98492432 -34.80524826]
[368.00393677 -19.78982735]
[366.37094116 -4.86345482]
[363.10583496 9.79267693]
[358.24819946 24.00065613]
[351.85705566 37.58801270]
[344.00991821 50.38980484]
[334.80209351 62.25063324]
[324.34536743 73.02651978]
[312.76663208 82.58664703]
[300.20645142 90.81497955]
[286.81732178 97.61161804]
[272.76174927 102.89406586]
[258.21038818 106.59819031]
[243.33982849 108.67903137]
[228.33062744 109.11133575]
[213.36495972 107.88985443]
[198.62449646 105.02940369]
[184.28819275 100.56471252]
[170.53005981 94.54998779]
[157.51710510 87.05822754]
[145.40731812 78.18038177]
[134.34767151 68.02422333]
[123.04867554 77.88994598]
[113.46201324 120.31398773]
[113.77407074 135.31074524]
[114.08612061 150.30749512]
[128.34065247 153.34738159]
[141.54859924 159.49253845]
[153.04342651 168.42913818]
[162.24583435 179.70256042]
[168.69302368 192.74053955]
[172.06198120 206.88220215]
[172.18557739 221.41156006]
[169.06092834 235.59376526]
[162.84934998 248.71231079]
[153.86802673 260.10519409]
[142.57383728 269.19827271]
[129.54005432 275.53430176]
[115.42734528 278.79589844]
[115.42734528 293.79589844]
[115.42734528 308.79589844]
[115.42734528 323.79589844]
[115.42734528 338.79589844]
[115.42734528 353.79589844]
[115.42734528 368.79589844]
[115.42734528 383.79589844]
[115.42734528 398.79589844]
[115.42734528 413.79589844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
[25 37]
[26 36]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 54]
[45 53]
[46 52]
[47 51]
[67 125]
[68 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
