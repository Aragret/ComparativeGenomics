%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUxxxxxxxxxxCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.19905281 323.53659058]
[14.71202087 337.49697876]
[9.22498894 351.45736694]
[3.73795772 365.41775513]
[-1.74907374 379.37814331]
[-7.23610544 393.33853149]
[-2.17187357 408.56134033]
[-11.03647900 421.93289185]
[-27.02975464 423.19567871]
[-37.88302994 411.38104248]
[-35.27059937 395.55212402]
[-21.19649506 387.85150146]
[-15.70946407 373.89111328]
[-10.22243214 359.93072510]
[-4.73540068 345.97033691]
[0.75163084 332.00994873]
[6.23866224 318.04956055]
[-9.36642647 310.65560913]
[-24.39264107 302.14666748]
[-38.76044846 292.56774902]
[-52.39379883 281.96957397]
[-65.22053528 270.40826416]
[-77.17276001 257.94497681]
[-88.18721771 244.64567566]
[-98.20559692 230.58078003]
[-107.17488861 215.82472229]
[-115.04759979 200.45561218]
[-121.78207397 184.55477905]
[-127.34265900 168.20642090]
[-131.69993591 151.49702454]
[-134.83081055 134.51507568]
[-136.71875000 117.35042572]
[-137.35372925 100.09394073]
[-152.34642029 99.62590027]
[-167.33912659 99.15785980]
[-182.33181763 98.68981934]
[-196.51916504 106.91484070]
[-210.59912109 98.50727844]
[-210.08741760 82.11611938]
[-195.51046753 74.60317230]
[-181.86376953 83.69712067]
[-166.87107849 84.16516113]
[-151.87838745 84.63320160]
[-136.88568115 85.10124969]
[-135.57197571 70.97166443]
[-133.41624451 56.94583511]
[-130.42617798 43.07390594]
[-126.61246490 29.40545082]
[-121.98875427 15.98932934]
[-116.57156372 2.87349772]
[-110.38025665 -9.89516354]
[-103.43696594 -22.27101517]
[-95.76651001 -34.20981979]
[-87.39629364 -45.66889954]
[-78.35625458 -56.60730362]
[-68.67869568 -66.98592377]
[-58.39820480 -76.76766968]
[-47.55153656 -85.91757202]
[-36.17745590 -94.40293121]
[-24.31662369 -102.19342041]
[-12.01143169 -109.26117706]
[0.69413608 -115.58094788]
[13.75466347 -121.13014984]
[27.12346840 -125.88893890]
[40.75276184 -129.84030151]
[54.59383392 -132.97012329]
[68.59719849 -135.26722717]
[82.71282196 -136.72337341]
[96.89022827 -137.33337402]
[111.07875061 -137.09504700]
[125.22766876 -136.00924683]
[139.28642273 -134.07984924]
[153.20474243 -131.31376648]
[166.93289185 -127.72085571]
[180.42179871 -123.31398773]
[193.62322998 -118.10889435]
[206.49002075 -112.12419891]
[218.97618103 -105.38127899]
[231.03706360 -97.90424347]
[242.62956238 -89.71981049]
[253.71224976 -80.85724640]
[264.24551392 -71.34822083]
[274.19168091 -61.22673035]
[283.51522827 -50.52894592]
[295.40759277 -59.67068100]
[307.29998779 -68.81241608]
[319.19235229 -77.95414734]
[331.08474731 -87.09588623]
[326.00537109 -101.34562683]
[325.58004761 -116.46760559]
[329.85043335 -130.98033142]
[338.39816284 -143.46197510]
[350.38580322 -152.68972778]
[364.63894653 -157.75955200]
[379.76123047 -158.17474365]
[394.27105713 -153.89463806]
[406.74697876 -145.33854675]
[415.96670532 -133.34471130]
[421.02697754 -119.08817291]
[421.43203735 -103.96563721]
[417.14221191 -89.45865631]
[408.57775879 -76.98847198]
[396.57775879 -67.77679443]
[382.31784058 -62.72608185]
[367.19500732 -62.33115387]
[352.69091797 -66.63070679]
[340.22647095 -75.20350647]
[328.33410645 -66.06176758]
[316.44171143 -56.92003632]
[304.54934692 -47.77830124]
[292.65695190 -38.63656616]
[300.86270142 -26.45541000]
[308.29937744 -13.79005146]
[314.93841553 -0.68898869]
[320.75448608 12.79761505]
[325.72528076 26.61811829]
[329.83175659 40.71960449]
[333.05819702 55.04807663]
[335.39227295 69.54866791]
[336.82501221 84.16586304]
[337.35092163 98.84368134]
[336.96804810 113.52593231]
[335.67779541 128.15638733]
[333.48510742 142.67903137]
[330.39843750 157.03826904]
[326.42953491 171.17909241]
[321.59365845 185.04736328]
[315.90927124 198.58999634]
[309.39816284 211.75512695]
[302.08526611 224.49234009]
[293.99859619 236.75286865]
[285.16906738 248.48977661]
[275.63055420 259.65811157]
[265.41952515 270.21508789]
[254.57511902 280.12033081]
[243.13883972 289.33587646]
[231.15446472 297.82644653]
[218.66789246 305.55953979]
[205.72695923 312.50555420]
[192.38117981 318.63787842]
[178.68167114 323.93301392]
[164.68089294 328.37072754]
[150.43244934 331.93399048]
[135.99089050 334.60916138]
[121.41152954 336.38601685]
[106.75017548 337.25775146]
[92.06298065 337.22100830]
[77.40618134 336.27593994]
[62.83588791 334.42617798]
[48.40789795 331.67877197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[33 44]
[34 43]
[35 42]
[36 41]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
