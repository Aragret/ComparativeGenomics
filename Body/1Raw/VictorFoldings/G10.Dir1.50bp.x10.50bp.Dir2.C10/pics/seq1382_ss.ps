%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.80891418 415.84988403]
[84.39468384 396.64144897]
[84.70265961 381.64462280]
[85.01064301 366.64779663]
[85.31861877 351.65093994]
[85.62659454 336.65411377]
[85.93457031 321.65725708]
[86.24255371 306.66043091]
[86.55052948 291.66360474]
[86.85850525 276.66674805]
[87.16648102 261.66992188]
[73.12506104 258.11975098]
[60.22518921 251.51847839]
[49.12067413 242.19692993]
[40.37517548 230.62384033]
[34.43359375 217.38238525]
[31.59943008 203.14073181]
[32.01929474 188.61834717]
[35.67531967 174.54965210]
[42.38589478 161.64686584]
[51.81469345 150.56396484]
[63.48750687 141.86355591]
[76.81611633 135.98823547]
[91.12792206 133.23817444]
[91.74375153 118.25082397]
[86.41329956 112.97481537]
[82.60552979 127.48346710]
[68.13681030 131.44024658]
[57.47570419 120.88843536]
[61.28320694 106.37971497]
[75.75238800 102.42279816]
[70.42193604 97.14678955]
[55.44169235 97.91645050]
[40.46145248 98.68611145]
[28.69001198 109.58624268]
[12.85083675 107.03672028]
[5.09438372 92.99332428]
[11.37074089 78.22894287]
[26.86522293 74.06954956]
[39.69179153 83.70587158]
[54.67203140 82.93621063]
[69.65227509 82.16654968]
[79.87097931 71.18574524]
[79.56300354 56.18891144]
[79.25502777 41.19207382]
[78.79309845 26.19918633]
[78.17727661 11.21183300]
[77.56144714 -3.77551985]
[71.99951172 -17.70623589]
[62.12380600 -28.99651718]
[52.24810028 -40.28679657]
[42.37239075 -51.57707596]
[32.49668503 -62.86735535]
[19.66394615 -64.51794434]
[11.67166328 -74.17686462]
[12.40474606 -86.28986359]
[2.76293159 -97.78053284]
[-12.82389736 -102.87786102]
[-15.93766117 -118.97868347]
[-3.37518501 -129.51985168]
[11.94033146 -123.65751648]
[14.25359821 -107.42234802]
[23.89541245 -95.93167877]
[40.66878891 -90.86232758]
[43.78696823 -72.74306488]
[53.66267395 -61.45278168]
[63.53837967 -50.16250229]
[73.41408539 -38.87222290]
[83.28979492 -27.58194160]
[90.77991486 -27.96677208]
[87.52601624 -42.60959244]
[84.27211761 -57.25241089]
[81.01821899 -71.89522552]
[71.88870239 -83.79698944]
[71.38999939 -98.78869629]
[79.70838928 -111.27086639]
[93.73689270 -116.58132935]
[108.23579407 -112.73660278]
[117.78966522 -101.17271423]
[118.83008575 -86.20883942]
[110.96839142 -73.43402100]
[109.23230743 -58.53482437]
[107.49623108 -43.63562775]
[105.76015472 -28.73643303]
[113.25027466 -29.12126160]
[121.91687775 -41.36421585]
[124.34383392 -50.23583984]
[130.88925171 -53.76709366]
[139.80538940 -65.82952118]
[138.85748291 -81.84455109]
[150.88337708 -92.46327972]
[166.65783691 -89.53993988]
[174.08004761 -75.31706238]
[167.45632935 -60.70522308]
[151.86782837 -56.91337204]
[142.95167542 -44.85094070]
[134.15983582 -32.69760895]
[125.49322510 -20.45465469]
[119.95710754 -12.66491413]
[113.20298004 -7.14389229]
[105.93584442 -4.00665140]
[98.84379578 -3.17484045]
[92.54880524 -4.39134550]
[93.16462708 10.59600830]
[93.78044891 25.58336067]
[97.21865845 32.17812729]
[94.25186157 40.88409424]
[94.55983734 55.88093185]
[94.86782074 70.87776947]
[121.42071533 94.86773682]
[136.13623047 97.77521515]
[150.85176086 100.68268585]
[165.56727600 103.59015656]
[180.28280640 106.49762726]
[189.37168884 105.08767700]
[195.26922607 109.61882019]
[209.92195129 112.82781982]
[224.57467651 116.03681183]
[241.34062195 113.51897430]
[248.40133667 128.93269348]
[235.54460144 139.98440552]
[221.36567688 130.68954468]
[206.71295166 127.48054504]
[192.06022644 124.27154541]
[177.37533569 121.21315002]
[162.65980530 118.30567932]
[147.94429016 115.39820862]
[133.22875977 112.49073792]
[118.51324463 109.58325958]
[106.73110199 118.86664581]
[106.11528015 133.85400391]
[121.07239532 138.14982605]
[134.56672668 145.88296509]
[145.82228088 156.60395813]
[154.19299316 169.69166565]
[159.19970703 184.38925171]
[160.55770874 199.84796143]
[158.19282532 215.17613220]
[152.24549866 229.49063110]
[143.06248474 241.96771240]
[131.17658997 251.89047241]
[117.27576447 258.68997192]
[102.16332245 261.97790527]
[101.85534668 276.97473145]
[101.54736328 291.97155762]
[101.23938751 306.96841431]
[100.93141174 321.96524048]
[100.62343597 336.96209717]
[100.31546021 351.95892334]
[100.00747681 366.95574951]
[99.69950104 381.95260620]
[99.39152527 396.94943237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[24 131]
[25 130]
[32 42]
[33 41]
[34 40]
[43 109]
[44 108]
[45 107]
[46 105]
[47 104]
[48 103]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[56 63]
[57 62]
[85 98]
[86 97]
[88 96]
[89 95]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
