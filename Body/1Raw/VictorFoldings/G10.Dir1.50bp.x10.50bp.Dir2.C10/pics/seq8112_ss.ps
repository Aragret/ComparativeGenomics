%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAxxxxxxxxxxUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.81962585 472.10635376]
[166.19564819 457.11932373]
[165.57167053 442.13232422]
[164.94769287 427.14529419]
[164.32371521 412.15826416]
[163.69973755 397.17126465]
[163.07575989 382.18423462]
[162.45178223 367.19723511]
[160.27493286 352.35601807]
[156.56877136 337.82107544]
[152.86260986 323.28616333]
[137.52914429 324.17834473]
[122.30957031 322.07635498]
[107.78316498 317.05841064]
[94.50317383 309.31372070]
[82.97573090 299.13534546]
[73.64059448 286.90917969]
[66.85434723 273.09930420]
[62.87678909 258.23025513]
[61.86097336 242.86732483]
[63.84735107 227.59484863]
[68.76213074 212.99409485]
[76.42003632 199.62110901]
[86.53128815 187.98559570]
[98.71256256 178.53137207]
[112.50152588 171.61955261]
[108.49378204 157.16485596]
[104.48604584 142.71017456]
[100.47830200 128.25547791]
[96.32041168 113.84326935]
[86.27939606 104.11344147]
[89.31140137 90.46431732]
[85.00381470 76.09613037]
[73.62939453 65.09917450]
[77.38587189 50.68605423]
[73.07828522 36.31786728]
[68.77069855 21.94968414]
[64.46311188 7.58150053]
[60.15552902 -6.78668356]
[55.84794617 -21.15486717]
[51.87469864 -6.69065952]
[43.49595261 5.75106812]
[31.58677483 14.87090969]
[17.39095497 19.71639252]
[2.39109659 19.78145981]
[-11.84622574 15.05931377]
[-23.83407402 6.04313421]
[-32.32044220 -6.32543564]
[-36.41902542 -20.75462914]
[-35.70176315 -35.73747253]
[-30.24357033 -49.70915985]
[-20.61449432 -61.21050644]
[-7.82019281 -69.04030609]
[6.80310726 -72.38083649]
[21.72815514 -70.88319397]
[35.39619064 -64.70381165]
[46.37973022 -54.48804092]
[53.53264999 -41.29998398]
[54.46827698 -56.27077484]
[55.40390396 -71.24156952]
[56.33953476 -86.21235657]
[49.47808838 -100.46827698]
[57.99419022 -112.68814850]
[58.92981720 -127.65893555]
[59.86544800 -142.62973022]
[49.68653870 -154.42073059]
[50.84866333 -169.58990479]
[62.15230560 -179.22128296]
[63.08793259 -194.19206238]
[64.02355957 -209.16285706]
[50.50522232 -216.17530823]
[41.01290131 -228.08395386]
[37.19120026 -242.82554626]
[39.70225143 -257.84600830]
[48.11099625 -270.54296875]
[60.96057510 -278.71661377]
[76.02471924 -280.95077515]
[90.69347382 -276.85839844]
[102.42538452 -267.14849854]
[109.18783569 -253.50337219]
[109.80918121 -238.28713989]
[104.18177795 -224.13609314]
[93.28060150 -213.50198364]
[78.99435425 -208.22723389]
[78.05872345 -193.25643921]
[77.12310028 -178.28564453]
[87.13960266 -167.32183838]
[86.40400696 -152.12599182]
[74.83623505 -141.69410706]
[73.90061188 -126.72331238]
[72.96498108 -111.75251770]
[79.89334869 -98.56741333]
[71.31032562 -85.27672577]
[70.37469482 -70.30593872]
[69.43907166 -55.33514786]
[68.50344086 -40.36435318]
[70.21613312 -25.46245193]
[74.52371216 -11.09426785]
[78.83129883 3.27391601]
[83.13888550 17.64209938]
[87.44647217 32.01028442]
[91.75405121 46.37846756]
[102.82037354 56.34771729]
[99.37200165 71.78855133]
[103.67958832 86.15673065]
[113.72060394 95.88655853]
[110.68859863 109.53568268]
[116.18471527 116.91433716]
[114.93299103 124.24774170]
[118.94073486 138.70243835]
[122.94847107 153.15711975]
[126.95621490 167.61180115]
[141.57597351 166.42340088]
[156.15960693 167.95506287]
[170.20552063 172.15258789]
[183.23092651 178.87008667]
[194.78839111 187.87509155]
[204.48120117 198.85659790]
[211.97703552 211.43576050]
[217.01930237 225.17903137]
[219.43597412 239.61303711]
[219.14538574 254.24095154]
[216.15908813 268.55950928]
[210.58131409 282.07641602]
[202.60534668 294.32717896]
[192.50691223 304.89120483]
[180.63452148 313.40603638]
[167.39755249 319.57998657]
[171.10371399 334.11492920]
[174.80987549 348.64987183]
[180.97883606 334.97711182]
[193.07682800 326.10928345]
[207.97232056 324.34176636]
[221.80967712 330.13208008]
[231.00712585 341.98141479]
[233.18392944 356.82263184]
[227.77664185 370.81408691]
[216.18492126 380.33416748]
[201.40924072 382.91864014]
[187.27426147 377.89846802]
[177.43879700 366.57324219]
[178.06277466 381.56027222]
[178.68675232 396.54727173]
[179.31072998 411.53430176]
[179.93470764 426.52133179]
[180.55868530 441.50833130]
[181.18266296 456.49536133]
[181.80664062 471.48236084]
[188.50662231 487.05627441]
[175.39610291 497.80569458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[11 128]
[26 112]
[27 111]
[28 110]
[29 109]
[30 107]
[32 105]
[33 104]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
[40 97]
[58 96]
[59 95]
[60 94]
[61 93]
[63 91]
[64 90]
[65 89]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
