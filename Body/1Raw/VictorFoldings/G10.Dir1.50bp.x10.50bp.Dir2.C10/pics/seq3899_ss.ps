%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUxxxxxxxxxxUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.52092743 529.82061768]
[85.52092743 514.82061768]
[85.52092743 499.82061768]
[85.52092743 484.82061768]
[85.52092743 469.82061768]
[85.52092743 454.82061768]
[85.52092743 439.82061768]
[85.52092743 424.82061768]
[85.52092743 409.82061768]
[85.52092743 394.82061768]
[71.17026520 392.10900879]
[57.56332016 386.79241943]
[45.16870499 379.05230713]
[34.41358948 369.15362549]
[25.66896057 357.43572998]
[19.23684502 344.30081177]
[15.33986473 330.20001221]
[14.11354256 315.61798096]
[15.60158157 301.05615234]
[19.75431442 287.01562500]
[26.43035698 273.97976685]
[35.40142059 262.39773560]
[46.36012268 252.66880798]
[58.93051529 245.12882996]
[72.68097687 240.03845215]
[87.13905334 237.57421875]
[78.97399139 228.59680176]
[79.14521790 216.06117249]
[88.10816956 206.73008728]
[88.72399139 191.74273682]
[89.33982086 176.75538635]
[89.95564270 161.76802063]
[90.57147217 146.78067017]
[73.53202820 139.70863342]
[60.44833755 126.70196533]
[53.27581024 109.70457458]
[53.08640671 91.25680542]
[59.90843582 74.11573029]
[72.72232056 60.84317780]
[89.61296082 53.42277145]
[88.68955231 38.45122147]
[87.76613617 23.47967148]
[86.84272003 8.50812149]
[85.91931152 -6.46342802]
[84.99589539 -21.43497849]
[72.07046509 -29.81587791]
[66.62207031 -44.03446960]
[70.54443359 -58.56303406]
[82.13098907 -67.88449860]
[81.20757294 -82.85604858]
[80.28415680 -97.82759857]
[72.58255768 -84.95571899]
[60.37590408 -76.23805237]
[45.70151901 -73.12960815]
[31.00859070 -76.14917755]
[18.74939919 -84.79280090]
[10.97002888 -97.61783600]
[8.96887684 -112.48374939]
[13.07993793 -126.90939331]
[22.61706734 -138.48709106]
[35.98849869 -145.28450012]
[50.96250916 -146.16712952]
[65.03990173 -140.98765564]
[75.87113190 -130.61054993]
[81.64788055 -116.77069092]
[84.70627594 -131.45558167]
[87.76467133 -146.14048767]
[90.82306671 -160.82537842]
[77.12519073 -167.09562683]
[65.16632843 -176.25712585]
[55.54632187 -187.85037231]
[48.74771881 -201.29383850]
[45.11152649 -215.91320801]
[44.82013702 -230.97517395]
[47.88816833 -245.72424316]
[54.16172791 -259.42059326]
[63.32613754 -271.37722778]
[74.92170715 -280.99444580]
[88.36682129 -287.78976440]
[102.98706818 -291.42242432]
[118.04910278 -291.71017456]
[132.79742432 -288.63854980]
[146.49226379 -282.36169434]
[158.44668579 -273.19436646]
[168.06106567 -261.59646606]
[174.85316467 -248.14971924]
[178.48226929 -233.52859497]
[178.76635742 -218.46649170]
[175.69117737 -203.71891785]
[169.41098022 -190.02558899]
[160.24078369 -178.07339478]
[148.64054871 -168.46182251]
[135.19213867 -161.67298889]
[120.57013702 -158.04742432]
[105.50796509 -157.76698303]
[102.44956970 -143.08209229]
[99.39117432 -128.39718628]
[96.33277893 -113.71229553]
[95.25570679 -98.75101471]
[96.17912292 -83.77946472]
[97.10253906 -68.80791473]
[109.74677277 -60.98094940]
[115.42478943 -47.04452133]
[111.76499176 -32.26415253]
[99.96744537 -22.35839081]
[100.89086151 -7.38684177]
[101.81427002 7.58470821]
[102.73768616 22.55625916]
[103.66110229 37.52780914]
[104.58451080 52.49935913]
[115.92655945 55.01473999]
[126.32469177 60.19623947]
[135.16265869 67.73676300]
[141.91665649 77.18941498]
[146.18640137 87.99396515]
[147.71885681 99.51007080]
[146.42317200 111.05521393]
[142.37615967 121.94515228]
[135.81767273 131.53448486]
[127.13638306 139.25488281]
[116.84683228 144.64877319]
[105.55882263 147.39649963]
[104.94299316 162.38385010]
[104.32717133 177.37120056]
[103.71134949 192.35856628]
[103.09552002 207.34591675]
[112.02560425 223.41714478]
[102.13589478 237.88220215]
[117.20728302 241.16911316]
[131.34956360 247.31758118]
[144.02529907 256.09201050]
[154.75318909 267.15698242]
[163.12629700 280.09027100]
[168.82754517 294.39874268]
[171.64163208 309.53723145]
[171.46327209 324.92941284]
[168.30104065 339.98956299]
[162.27703857 354.14501953]
[153.62211609 366.85781860]
[142.66712952 377.64523315]
[129.83018494 386.09805298]
[115.60073090 391.89617920]
[100.52092743 394.82061768]
[100.52092743 409.82061768]
[100.52092743 424.82061768]
[100.52092743 439.82061768]
[100.52092743 454.82061768]
[100.52092743 469.82061768]
[100.52092743 484.82061768]
[100.52092743 499.82061768]
[100.52092743 514.82061768]
[100.52092743 529.82061768]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 128]
[29 126]
[30 125]
[31 124]
[32 123]
[33 122]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[49 101]
[50 100]
[51 99]
[65 98]
[66 97]
[67 96]
[68 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
