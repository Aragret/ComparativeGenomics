%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCxxxxxxxxxxUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[194.64642334 325.75500488]
[194.03059387 310.76766968]
[193.41477966 295.78030396]
[192.79895020 280.79296875]
[192.18312073 265.80560303]
[191.56729126 250.81825256]
[190.95147705 235.83088684]
[190.33564758 220.84353638]
[184.63098145 206.97065735]
[174.52554321 195.88552856]
[164.42012024 184.80039978]
[157.54725647 181.95854187]
[154.22387695 173.38237000]
[144.34815979 162.09208679]
[134.47245789 150.80180359]
[124.59675598 139.51152039]
[114.72104645 128.22125244]
[95.53036499 131.51460266]
[78.01226044 123.01493835]
[68.72215271 105.90288544]
[53.74190903 105.13322449]
[38.76166916 104.36357117]
[23.76166916 104.36357117]
[8.78142738 105.13322449]
[-6.19881392 105.90288544]
[-14.66928101 109.48715973]
[-21.49390221 106.53135681]
[-36.48678589 106.99328613]
[-40.69878006 121.52305603]
[-49.19624710 134.03897095]
[-61.14669418 143.31486511]
[-75.37933350 148.44195557]
[-90.49980927 148.91795349]
[-105.02675629 144.69622803]
[-117.53697968 136.19036865]
[-126.80484772 124.23371124]
[-131.92240906 109.99763489]
[-132.38827515 94.87684631]
[-128.15681458 80.35273743]
[-119.64257812 67.84821320]
[-107.67971039 58.58835220]
[-93.44020844 53.48034286]
[-78.31911469 53.02460861]
[-63.79783630 57.26580048]
[-51.29902649 65.78840637]
[-42.04718399 77.75747681]
[-36.94871140 92.00039673]
[-21.95582771 91.53847504]
[-6.96847391 90.92264557]
[8.01176739 90.15298462]
[22.99200821 89.38332367]
[14.05691433 77.33492279]
[17.70200729 62.78454971]
[31.26197815 56.37150574]
[44.82172394 62.78503036]
[48.46630096 77.33553314]
[39.53133011 89.38332367]
[54.51156998 90.15298462]
[69.49181366 90.92264557]
[71.73259735 75.60109711]
[81.90908051 61.15391159]
[80.06575012 46.26760483]
[78.22242737 31.38129807]
[76.37910461 16.49498940]
[61.52267838 13.64160347]
[48.27610397 6.33520794]
[37.93714142 -4.70838976]
[31.51869965 -18.40724945]
[29.64958954 -33.41930008]
[32.51293182 -48.27380753]
[39.82820129 -61.51548767]
[50.87872314 -71.84704590]
[64.58187866 -78.25630951]
[79.59518433 -80.11535645]
[94.44776917 -77.24206543]
[107.68453979 -69.91792297]
[118.00869751 -58.86047745]
[124.40877533 -45.15303040]
[126.25775909 -30.13848877]
[123.37451172 -15.28782940]
[116.04150391 -2.05596733]
[104.97714996 8.26077366]
[91.26541138 14.65166569]
[93.10873413 29.53797340]
[94.95206451 44.42428207]
[96.79538727 59.31058884]
[103.96541595 61.51073837]
[114.94600677 51.29180527]
[118.30548096 65.91104126]
[125.47550964 68.11119080]
[135.35121155 56.82090759]
[145.22691345 45.53062820]
[151.10411072 29.62795448]
[168.01226807 30.87315750]
[171.49636841 47.46524429]
[156.51719666 55.40633392]
[146.64149475 66.69661713]
[136.76579285 77.98689270]
[138.70892334 93.95536041]
[134.57164001 108.08309937]
[126.01132965 118.34554291]
[135.88703918 129.63581848]
[145.76274109 140.92610168]
[155.63844299 152.21638489]
[165.51414490 163.50666809]
[175.50524902 174.69496155]
[185.61068726 185.78009033]
[195.71611023 196.86521912]
[202.97406006 188.49763489]
[215.47505188 184.01127625]
[231.01261902 185.99363708]
[245.72814941 188.90112305]
[260.44366455 191.80859375]
[275.15917969 194.71606445]
[289.87472534 197.62353516]
[301.16375732 186.97753906]
[316.55859375 185.03369141]
[330.13958740 192.53941345]
[336.68460083 206.60862732]
[333.67687988 221.83142090]
[322.27301025 232.35432434]
[306.85800171 234.13105774]
[293.35922241 226.47843933]
[286.96722412 212.33905029]
[272.25170898 209.43157959]
[257.53619385 206.52410889]
[242.82066345 203.61663818]
[228.10514832 200.70916748]
[222.40960693 205.58880615]
[233.92977905 215.19534302]
[245.44995117 224.80189514]
[256.97012329 234.40843201]
[270.93756104 239.87745667]
[278.27249146 252.96176147]
[275.65023804 267.73077393]
[264.25939941 277.49032593]
[249.26296997 277.81680298]
[237.45817566 268.56222534]
[234.19581604 253.92027283]
[226.47004700 241.06286621]
[218.74429321 228.20547485]
[211.01853943 215.34808350]
[205.32299805 220.22772217]
[205.93882751 235.21507263]
[206.55465698 250.20242310]
[207.17047119 265.18978882]
[207.78630066 280.17712402]
[208.40213013 295.16448975]
[209.01795959 310.15182495]
[209.63377380 325.13919067]
[216.32530212 340.71673584]
[203.20892334 351.45904541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 108]
[10 107]
[11 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[20 59]
[21 58]
[22 57]
[23 51]
[24 50]
[25 49]
[27 48]
[28 47]
[61 86]
[62 85]
[63 84]
[64 83]
[90 98]
[91 97]
[92 96]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
