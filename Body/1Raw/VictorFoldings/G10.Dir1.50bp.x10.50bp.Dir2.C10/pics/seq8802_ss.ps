%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUxxxxxxxxxxCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.29823303 450.32006836]
[102.29823303 435.32006836]
[102.29823303 420.32006836]
[102.29823303 405.32006836]
[102.29823303 390.32006836]
[102.29823303 375.32006836]
[102.29823303 360.32006836]
[102.29823303 345.32006836]
[102.29823303 330.32006836]
[102.29823303 315.32006836]
[86.25603485 310.95162964]
[72.05638123 302.27694702]
[60.82916641 289.97756958]
[53.47018814 275.02377319]
[50.56967926 258.59808350]
[52.36499023 242.00173950]
[58.72116089 226.55157471]
[69.14105225 213.47560120]
[82.80422211 203.81536865]
[98.63150024 198.34298706]
[97.69586945 183.37219238]
[96.76024628 168.40139771]
[95.82461548 153.43060303]
[94.88898468 138.45982361]
[77.29162598 133.68638611]
[63.08743286 120.97021484]
[55.78739929 102.46148682]
[40.80768585 101.68164062]
[25.82797241 100.90179443]
[10.84825706 100.12194824]
[5.21342564 114.17639923]
[-4.68145466 125.63807678]
[-17.76305962 133.26370239]
[-32.61239624 136.22613525]
[-47.61871719 134.20399475]
[-61.15425110 127.41665649]
[-71.75076294 116.60034180]
[-78.25882721 102.92832947]
[-79.97248840 87.88365936]
[-76.70587158 73.09826660]
[-68.81330872 60.17595291]
[-57.15092468 50.51844025]
[-42.98377228 45.17329788]
[-27.84859657 44.72033310]
[-13.38714790 49.20867538]
[-1.16809630 58.15146637]
[7.48312712 70.57865906]
[11.62810230 85.14223480]
[26.60781670 85.92208099]
[41.58753204 86.70192719]
[56.56724548 87.48177338]
[63.05541229 73.95758057]
[53.07268524 62.76181793]
[43.08995819 51.56605148]
[33.10723114 40.37028503]
[23.12450409 29.17452049]
[8.07042980 21.37636948]
[11.39644337 4.75186968]
[28.29198265 3.34578156]
[34.32027054 19.19179344]
[44.30299759 30.38755989]
[54.28572464 41.58332443]
[64.26844788 52.77909088]
[74.25117493 63.97485733]
[96.04894257 56.11097336]
[118.71757507 60.34339142]
[124.49384308 46.50017548]
[130.27011108 32.65695572]
[117.64421844 24.48221207]
[106.68102264 14.18424225]
[97.73296356 2.09408569]
[91.08766174 -11.39960957]
[86.95875549 -25.86307716]
[85.47896576 -40.83137894]
[86.69586182 -55.82334137]
[90.57032776 -70.35703278]
[96.97780609 -83.96527100]
[105.71233368 -96.21058655]
[116.49313354 -106.69935608]
[128.97363281 -115.09439850]
[142.75265503 -121.12586212]
[157.38723755 -124.59985352]
[172.40695190 -125.40469360]
[187.32899475 -123.51451874]
[201.67364502 -118.99008179]
[214.97981262 -111.97682953]
[226.81974792 -102.70021057]
[236.81285095 -91.45842743]
[244.63787842 -78.61285400]
[250.04328918 -64.57642365]
[252.85533142 -49.80035782]
[252.98359680 -34.75963211]
[250.42396545 -19.93775558]
[245.25871277 -5.81118441]
[237.65390015 7.16597033]
[227.85397339 18.57654572]
[216.17396545 28.05373955]
[202.98934937 35.29290009]
[188.72392273 40.06131363]
[173.83630371 42.20570374]
[158.80503845 41.65713120]
[144.11334229 38.43323135]
[138.33706665 52.27644730]
[132.56079102 66.11966705]
[141.57832336 78.10649872]
[156.48022461 76.39380646]
[171.38212585 74.68112183]
[181.01083374 62.14862061]
[196.69180298 60.17819977]
[209.12181091 69.93886566]
[210.92633057 85.63980103]
[201.03479004 97.96590424]
[185.31565857 99.60433197]
[173.09481812 89.58302307]
[158.19291687 91.29570770]
[143.29101562 93.00839996]
[143.20762634 101.04263306]
[141.66722107 108.81015778]
[138.76423645 116.05297852]
[134.63763428 122.53852844]
[129.46478271 128.06710815]
[123.45417023 132.47801208]
[116.83729553 135.65397644]
[109.85977936 137.52418518]
[110.79541016 152.49497986]
[111.73103333 167.46577454]
[112.66666412 182.43656921]
[113.60229492 197.40734863]
[126.85266876 199.82052612]
[139.21275330 205.14982605]
[150.05018616 213.11856079]
[158.81143188 223.31507874]
[165.05001831 235.21408081]
[168.44931030 248.20364380]
[168.83860779 261.61672974]
[166.20166016 274.76535034]
[160.67733765 286.97601318]
[152.55232239 297.62408447]
[142.24623108 306.16574097]
[130.28993225 312.16586304]
[117.29823303 315.32006836]
[117.29823303 330.32006836]
[117.29823303 345.32006836]
[117.29823303 360.32006836]
[117.29823303 375.32006836]
[117.29823303 390.32006836]
[117.29823303 405.32006836]
[117.29823303 420.32006836]
[117.29823303 435.32006836]
[117.29823303 450.32006836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[27 51]
[28 50]
[29 49]
[30 48]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[66 104]
[67 103]
[68 102]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
