%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUxxxxxxxxxxCUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 274.04748535]
[92.50000000 259.04748535]
[92.50000000 244.04748535]
[92.50000000 229.04748535]
[92.50000000 214.04748535]
[92.50000000 199.04748535]
[92.50000000 184.04748535]
[92.50000000 169.04748535]
[92.50000000 154.04748535]
[92.50000000 139.04748535]
[72.32668304 128.55070496]
[61.20555496 108.71473694]
[46.21286011 109.18277740]
[31.22016335 109.65082550]
[16.22746849 110.11886597]
[1.23477197 110.58690643]
[-13.75792408 111.05494690]
[-22.46384239 131.38085938]
[-44.38681030 142.36117554]
[-70.57927704 136.09790039]
[-83.96556091 142.86601257]
[-97.35184479 149.63412476]
[-110.73812866 156.40223694]
[-124.12441254 163.17036438]
[-132.64114380 177.18453979]
[-149.02784729 176.54545593]
[-156.42726135 161.91053772]
[-147.22752380 148.33494568]
[-130.89253235 149.78407288]
[-117.50624084 143.01596069]
[-104.11995697 136.24784851]
[-90.73367310 129.47973633]
[-77.34738922 122.71161652]
[-78.04853821 115.24446106]
[-92.98287201 116.64653015]
[-94.38471222 101.71218109]
[-79.45084381 100.31015015]
[-80.15199280 92.84300232]
[-94.56420898 88.68511200]
[-108.97642517 84.52722168]
[-123.38864136 80.36933899]
[-137.10087585 88.22747803]
[-152.33132935 84.00743103]
[-160.04405212 70.21289062]
[-155.66322327 55.02790070]
[-141.78790283 47.46145248]
[-126.65008545 52.00258255]
[-119.23075867 65.95712280]
[-104.81854248 70.11500549]
[-90.40632629 74.27289581]
[-75.99411011 78.43078613]
[-63.68939972 70.19994354]
[-49.87605667 67.11174774]
[-36.52274704 69.13257599]
[-25.37136078 75.53156281]
[-17.70980644 85.03752899]
[-14.22596645 96.06225586]
[0.76672977 95.59420776]
[15.75942612 95.12616730]
[30.75212288 94.65812683]
[45.74481964 94.19008636]
[60.73751450 93.72204590]
[67.05974579 77.73130035]
[79.54254150 65.90531158]
[95.85134888 60.45579529]
[112.93605042 62.40193939]
[127.60140991 71.37976837]
[139.86378479 62.74065399]
[134.08018494 50.06985855]
[130.62185669 36.58152390]
[129.59585571 22.69848633]
[131.03300476 8.85572052]
[134.88699341 -4.51329660]
[141.03581238 -16.99015617]
[149.28569031 -28.18461227]
[159.37715149 -37.74678421]
[170.99317932 -45.37810516]
[183.76918030 -50.84062195]
[197.30444336 -53.96443939]
[211.17471313 -54.65298462]
[224.94541931 -52.88600540]
[238.18537903 -48.72015381]
[250.48027039 -42.28717041]
[261.44558716 -33.78973770]
[270.73861694 -23.49506378]
[283.51596069 -31.35248947]
[296.29333496 -39.20991516]
[309.07067871 -47.06734085]
[321.84802246 -54.92476654]
[334.62539673 -62.78219223]
[347.40274048 -70.63961792]
[360.18011475 -78.49703979]
[372.95745850 -86.35446930]
[370.90432739 -101.44435120]
[375.17251587 -116.06291199]
[385.02255249 -127.67740631]
[398.74786377 -134.27555847]
[413.97045898 -134.71417236]
[428.05294800 -128.91729736]
[438.55541992 -117.88923645]
[443.65826416 -103.54068756]
[442.47738647 -88.35762024]
[435.21740723 -74.97059631]
[423.13613892 -65.69899750]
[408.32672119 -62.14917755]
[393.35498047 -64.93617249]
[380.81488037 -73.57711029]
[368.03753662 -65.71968842]
[355.26016235 -57.86225891]
[342.48281860 -50.00483322]
[329.70547485 -42.14740753]
[316.92810059 -34.28998184]
[304.15075684 -26.43255806]
[291.37338257 -18.57513237]
[278.59603882 -10.71770573]
[284.18811035 4.41803598]
[286.56234741 20.38346863]
[285.61596680 36.50197983]
[281.38690186 52.09003067]
[274.05239868 66.48612213]
[263.92150879 79.07889557]
[251.42210388 89.33306122]
[237.08277893 96.81217957]
[221.51052856 101.19723511]
[205.36500549 102.30022430]
[189.33064270 100.07221222]
[174.08758545 94.60555267]
[160.28285217 86.12998199]
[148.50289917 75.00302124]
[136.24052429 83.64213562]
[138.42588806 89.78205109]
[139.57888794 96.19647980]
[139.66856384 102.71308899]
[138.69248962 109.15681458]
[136.67687988 115.35453033]
[133.67591858 121.13972473]
[129.77020264 126.35697937]
[125.06468201 130.86611938]
[119.68576050 134.54600525]
[113.77796173 137.29776001]
[107.50000000 139.04748535]
[107.50000000 154.04748535]
[107.50000000 169.04748535]
[107.50000000 184.04748535]
[107.50000000 199.04748535]
[107.50000000 214.04748535]
[107.50000000 229.04748535]
[107.50000000 244.04748535]
[107.50000000 259.04748535]
[107.50000000 274.04748535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[38 51]
[39 50]
[40 49]
[41 48]
[67 130]
[68 129]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
