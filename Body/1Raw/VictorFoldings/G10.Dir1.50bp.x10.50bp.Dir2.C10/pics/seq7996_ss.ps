%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCxxxxxxxxxxCUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-38.48556519 281.93475342]
[-52.37849808 270.46786499]
[-65.32559204 257.94287109]
[-77.24647522 244.43750000]
[-88.06715393 230.03556824]
[-100.67827606 238.15711975]
[-113.28940582 246.27865601]
[-125.90053558 254.40020752]
[-138.51165771 262.52172852]
[-145.92478943 276.49871826]
[-160.81439209 276.88467407]
[-173.42552185 285.00619507]
[-186.03665161 293.12774658]
[-171.46534729 296.68820190]
[-162.45112610 308.67752075]
[-163.07752991 323.66442871]
[-173.06079102 334.85971069]
[-187.87840271 337.19180298]
[-200.81782532 329.60421753]
[-206.01737976 315.53424072]
[-201.12136841 301.35537720]
[-214.77761841 307.56076050]
[-228.43385315 313.76617432]
[-242.09008789 319.97158813]
[-255.74633789 326.17700195]
[-264.83868408 339.82476807]
[-281.18460083 338.50457764]
[-287.96881104 323.57452393]
[-278.21231079 310.39337158]
[-261.95175171 312.52075195]
[-248.29550171 306.31533813]
[-234.63926697 300.10995483]
[-220.98301697 293.90454102]
[-207.32678223 287.69912720]
[-194.15820312 280.51660156]
[-181.54707336 272.39508057]
[-168.93594360 264.27352905]
[-162.42485046 250.87745667]
[-146.63320923 249.91061401]
[-134.02207947 241.78907776]
[-121.41094971 233.66752625]
[-108.79981995 225.54598999]
[-96.18869019 217.42445374]
[-102.63490295 205.91317749]
[-108.40642548 194.04927063]
[-113.48406219 181.87222290]
[-117.85089111 169.42257690]
[-121.49237823 156.74177551]
[-124.39640045 143.87207031]
[-126.55329132 130.85627747]
[-127.95586395 117.73775482]
[-128.59945679 104.56017303]
[-128.48190308 91.36740112]
[-127.60363007 78.20337677]
[-125.96753693 65.11193085]
[-123.57907867 52.13663864]
[-120.44620514 39.32070923]
[-116.57934570 26.70681572]
[-111.99138641 14.33695412]
[-106.69758606 2.25230908]
[-100.71558380 -9.50688171]
[-94.06529999 -20.90146637]
[-86.76885986 -31.89350510]
[-78.85057068 -42.44639969]
[-70.33679199 -52.52501678]
[-61.25587463 -62.09579468]
[-51.63805008 -71.12686920]
[-41.51534271 -79.58817291]
[-30.92145348 -87.45153046]
[-19.89165688 -94.69076538]
[-8.46267796 -101.28176880]
[3.32743049 -107.20260620]
[15.43941402 -112.43354797]
[27.83294296 -116.95718384]
[40.46675491 -120.75846100]
[53.29878616 -123.82470703]
[66.28630829 -126.14572906]
[79.38608551 -127.71379089]
[92.55449677 -128.52366638]
[105.74769592 -128.57267761]
[118.92175293 -127.86064148]
[132.03282166 -126.38993835]
[145.03721619 -124.16545868]
[157.89167786 -121.19461823]
[170.55337524 -117.48729706]
[182.98016357 -113.05584717]
[195.13067627 -107.91502380]
[206.96444702 -102.08193970]
[218.44207764 -95.57601929]
[229.52534485 -88.41892242]
[240.17735291 -80.63447571]
[250.36264038 -72.24860382]
[260.04727173 -63.28922653]
[269.19903564 -53.78617096]
[277.78747559 -43.77107620]
[285.78393555 -33.27729416]
[293.16180420 -22.33976173]
[299.89657593 -10.99489403]
[305.96575928 0.71953398]
[311.34918213 12.76451969]
[316.02890015 25.09995842]
[319.98934937 37.68478012]
[323.21734619 50.47708130]
[325.70211792 63.43426895]
[327.43542480 76.51320648]
[328.41146851 89.67034149]
[328.62701416 102.86186981]
[328.08132935 116.04386902]
[326.77624512 129.17245483]
[324.71612549 142.20390320]
[339.35961914 145.45472717]
[354.00311279 148.70555115]
[369.15216064 144.14294434]
[379.90008545 154.45463562]
[394.54360962 157.70545959]
[409.18710327 160.95628357]
[424.65759277 155.51608276]
[436.92633057 166.39772034]
[433.37228394 182.40711975]
[417.65155029 187.07516479]
[405.93627930 175.59977722]
[391.29278564 172.34895325]
[376.64926147 169.09812927]
[362.54763794 173.89326477]
[350.75228882 163.34906006]
[336.10879517 160.09823608]
[321.46530151 156.84741211]
[316.30267334 174.10574341]
[309.79739380 190.90408325]
[301.98989868 207.13816833]
[292.92858887 222.70721436]
[282.66973877 237.51460266]
[271.27703857 251.46841431]
[258.82116699 264.48202515]
[245.37948608 276.47467041]
[231.03538513 287.37191772]
[215.87792969 297.10607910]
[200.00120544 305.61679077]
[183.50373840 312.85119629]
[166.48796082 318.76437378]
[149.05947876 323.31967163]
[131.32647705 326.48876953]
[113.39901733 328.25198364]
[95.38838959 328.59841919]
[77.40638733 327.52590942]
[59.56462860 325.04107666]
[41.97386169 321.15939331]
[24.74327278 315.90490723]
[7.97981596 309.31027222]
[-8.21245289 301.41641235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[11 37]
[12 36]
[13 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[110 127]
[111 126]
[112 125]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
