%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAxxxxxxxxxxCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.27489471 652.89398193]
[69.27489471 637.89398193]
[69.27489471 622.89398193]
[69.27489471 607.89398193]
[69.27489471 592.89398193]
[69.27489471 577.89398193]
[69.27489471 562.89398193]
[69.27489471 547.89398193]
[69.27489471 532.89398193]
[69.27489471 517.89398193]
[55.27487564 514.39727783]
[42.51638794 507.63549805]
[31.74873924 498.00054932]
[23.60555077 486.05328369]
[18.56747437 472.49081421]
[16.93382263 458.10580444]
[18.80479050 443.74017334]
[24.07532501 430.23580933]
[32.44100952 418.38522339]
[43.41564178 408.88504028]
[56.35950470 402.29504395]
[70.51662445 399.00524902]
[70.82868195 384.00848389]
[71.14073944 369.01174927]
[62.97725677 360.03036499]
[63.15369797 347.49291992]
[72.12277222 338.16503906]
[72.74674988 323.17800903]
[70.18472290 319.07781982]
[70.21604156 313.31326294]
[73.72131348 307.58432007]
[74.96818542 292.63623047]
[76.21505737 277.68814087]
[69.56249237 264.36175537]
[78.42015076 251.25251770]
[70.83278656 241.77943420]
[71.79090881 229.27740479]
[81.32434845 220.52711487]
[82.88192749 205.60821533]
[84.43950653 190.68930054]
[85.99709320 175.77038574]
[87.39939117 160.83607483]
[88.64627075 145.88798523]
[89.89314270 130.93991089]
[73.67617035 123.43856049]
[62.81159973 107.53465271]
[61.52085876 86.91963959]
[71.56851196 67.29011536]
[59.12907410 58.90797043]
[46.68963623 50.52582550]
[30.17555237 46.68897247]
[29.29090691 29.75812149]
[45.31520081 24.22112274]
[55.07177734 38.08638763]
[67.51121521 46.46852875]
[79.95066071 54.85067368]
[93.11923981 47.66816330]
[92.80718231 32.67140961]
[92.49512482 17.67465591]
[88.94036865 3.10195374]
[82.31186676 -10.35401154]
[75.68337250 -23.80997658]
[61.75854492 -32.47203445]
[62.56805038 -48.85119247]
[77.27914429 -56.09797287]
[90.75830841 -46.75751114]
[89.13933563 -30.43847656]
[95.76782990 -16.98250961]
[102.39633179 -3.52654481]
[103.70768738 -18.46911240]
[108.93021393 -32.53059387]
[117.69081116 -44.70647049]
[129.36364746 -54.12691879]
[143.11483765 -60.11896896]
[157.96203613 -62.25455856]
[172.84458923 -60.38112640]
[186.69931030 -54.63250351]
[198.53645325 -45.41936493]
[207.51040649 -33.39987564]
[212.98008728 -19.43267632]
[214.55474854 -4.51555681]
[212.12190247 10.28583717]
[205.85534668 23.91412735]
[196.20274353 35.39573669]
[183.85366821 43.91044617]
[169.69030762 48.84998322]
[154.72444153 49.86148071]
[140.02522278 46.87267685]
[126.64272308 40.09708405]
[115.53295898 30.01873589]
[107.49188232 17.36260033]
[107.80393982 32.35935593]
[108.11599731 47.35610962]
[121.20915222 54.67521286]
[134.14720154 47.08530426]
[147.08526611 39.49539566]
[160.02331543 31.90548897]
[172.96138000 24.31558037]
[180.58738708 9.79745674]
[196.98204041 9.41317081]
[205.27990723 23.55804253]
[196.94485474 37.68104172]
[180.55128479 37.25363541]
[167.61322021 44.84354401]
[154.67517090 52.43345261]
[141.73710632 60.02336121]
[128.79905701 67.61326599]
[139.08569336 88.86228180]
[136.37294006 110.80541229]
[123.12570953 126.59909058]
[104.84123230 132.18678284]
[103.59435272 147.13487244]
[102.34748077 162.08294678]
[104.76354980 170.96070862]
[100.91600037 177.32797241]
[99.35842133 192.24687195]
[97.80084229 207.16578674]
[96.24326324 222.08470154]
[104.14503479 238.68415833]
[93.36824036 252.49938965]
[99.93162537 266.89495850]
[91.16314697 278.93502808]
[89.91627502 293.88311768]
[88.66939545 308.83120728]
[87.73376465 323.80200195]
[87.10979462 338.78900146]
[96.03157043 354.86325073]
[86.13748932 369.32379150]
[85.82543182 384.32055664]
[85.51338196 399.31729126]
[100.53135681 403.62127686]
[113.92163849 411.64730835]
[124.78114319 422.84735107]
[132.37916565 436.45959473]
[136.20660400 451.56018066]
[136.01004028 467.12591553]
[131.80848694 482.10363770]
[123.89176941 495.48141479]
[112.80050659 506.35696411]
[99.28919983 513.99853516]
[84.27489471 517.89398193]
[84.27489471 532.89398193]
[84.27489471 547.89398193]
[84.27489471 562.89398193]
[84.27489471 577.89398193]
[84.27489471 592.89398193]
[84.27489471 607.89398193]
[84.27489471 622.89398193]
[84.27489471 637.89398193]
[84.27489471 652.89398193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[27 126]
[28 125]
[31 124]
[32 123]
[33 122]
[35 120]
[38 118]
[39 117]
[40 116]
[41 115]
[42 113]
[43 112]
[44 111]
[48 56]
[49 55]
[50 54]
[57 93]
[58 92]
[59 91]
[60 69]
[61 68]
[62 67]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
