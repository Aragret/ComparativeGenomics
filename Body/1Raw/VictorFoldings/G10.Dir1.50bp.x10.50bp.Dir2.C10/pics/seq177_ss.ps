%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAxxxxxxxxxxGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.26451111 311.58361816]
[155.95245361 296.58685303]
[155.64039612 281.59011841]
[155.32833862 266.59335327]
[155.01628113 251.59660339]
[154.70422363 236.59985352]
[154.39216614 221.60308838]
[154.08010864 206.60633850]
[153.76805115 191.60958862]
[148.86650085 177.43302917]
[139.84898376 165.44619751]
[130.83145142 153.45936584]
[121.81391907 141.47253418]
[112.79638672 129.48570251]
[103.77886200 117.49886322]
[96.22277832 119.78084564]
[87.55094910 118.59110260]
[79.40611267 113.47434998]
[74.61601257 129.15832520]
[58.57947922 132.58782959]
[47.79351807 120.23489380]
[53.35380173 104.80715179]
[69.54039001 102.17533875]
[72.17925262 87.40928650]
[64.99674225 74.24069977]
[57.81423187 61.07212067]
[50.63172531 47.90353775]
[43.44921494 34.73495483]
[36.26670837 21.56637383]
[19.01580620 16.16379738]
[11.94004536 0.11556259]
[-2.18475795 -4.93319368]
[-16.30956078 -9.98194981]
[-30.43436432 -15.03070641]
[-44.55916595 -20.07946205]
[-58.68397141 -25.12821960]
[-72.80876923 -30.17697525]
[-82.24230957 -18.33268738]
[-95.01187897 -10.19532299]
[-109.73234558 -6.64756155]
[-124.80693817 -8.07423878]
[-138.60047913 -14.32059860]
[-149.61674500 -24.70908356]
[-156.66076660 -38.11282730]
[-158.96849060 -53.07789230]
[-156.28955078 -67.98097992]
[-148.91456604 -81.20552063]
[-137.64352417 -91.31700134]
[-123.69900513 -97.21862030]
[-108.59361267 -98.27020264]
[-93.96586609 -94.35768127]
[-81.40247345 -85.90546417]
[-72.26622772 -73.83038330]
[-67.54814148 -59.44224930]
[-67.76001740 -44.30177689]
[-53.63521194 -39.25302124]
[-39.51041031 -34.20426559]
[-25.38560677 -29.15550995]
[-11.26080418 -24.10675240]
[2.86399841 -19.05799675]
[16.98880196 -14.00924015]
[20.46261787 -17.22667694]
[24.57134819 -19.57989502]
[29.10423660 -20.94818687]
[31.89656067 -35.68599319]
[17.97184372 -41.40326309]
[5.48323917 -49.80681229]
[-5.05785465 -60.55251694]
[-13.21978569 -73.20035553]
[-18.66832924 -87.23239899]
[-21.18036842 -102.07405090]
[-20.65303802 -117.11754608]
[-17.10793304 -131.74687195]
[-10.69022274 -145.36296082]
[-1.66270769 -157.40824890]
[9.60494137 -167.38946533]
[22.65131950 -174.89793396]
[36.94218826 -179.62614441]
[51.89234543 -181.38049316]
[66.88958740 -180.08914185]
[81.31978607 -175.80496216]
[94.59204102 -168.70339966]
[106.16286469 -159.07527161]
[115.55842590 -147.31480408]
[122.39398193 -133.90362549]
[126.38964081 -119.39087677]
[127.38175964 -104.37087250]
[125.32972717 -89.45866394]
[120.31756592 -75.26489258]
[112.55052185 -62.37078857]
[102.34664917 -51.30435562]
[90.12379456 -42.51875687]
[76.38247681 -36.37376022]
[61.68538666 -33.12099838]
[46.63436508 -32.89366913]
[43.84204102 -18.15586281]
[54.17327881 -3.48931599]
[49.43529129 14.38386440]
[56.61779785 27.55244637]
[63.80030823 40.72103119]
[70.98281860 53.88961029]
[78.16532135 67.05819702]
[85.34783173 80.22677612]
[113.90888977 83.92606354]
[115.76569366 108.48133850]
[124.78321838 120.46817017]
[133.80075073 132.45500183]
[142.81828308 144.44183350]
[151.83581543 156.42866516]
[160.85334778 168.41549683]
[159.64389038 153.46434021]
[161.31909180 138.55818176]
[165.81697083 124.24842072]
[172.97114563 111.06442261]
[182.51698303 99.49389648]
[194.10133362 89.96484375]
[207.29568481 82.82978058]
[221.61193848 78.35264587]
[236.52050781 76.69905090]
[251.46990967 77.93016815]
[265.90710449 82.00045776]
[279.29803467 88.75935364]
[291.14736938 97.95683289]
[301.01675415 109.25264740]
[308.54107666 122.22894287]
[313.44201660 136.40571594]
[315.53829956 151.25851440]
[314.75234985 166.23789978]
[311.11325073 180.78977966]
[304.75561523 194.37582397]
[295.91464233 206.49345398]
[284.91735840 216.69441223]
[272.17059326 224.60136414]
[258.14584351 229.92179871]
[243.36196899 232.45889282]
[228.36582947 232.11880493]
[213.71215820 228.91412354]
[199.94303894 222.96337891]
[187.56782532 214.48670959]
[177.04428101 203.79768372]
[168.76481628 191.29753113]
[169.07687378 206.29428101]
[169.38893127 221.29103088]
[169.70097351 236.28779602]
[170.01303101 251.28454590]
[170.32508850 266.28131104]
[170.63714600 281.27804565]
[170.94920349 296.27481079]
[171.26126099 311.27154541]
[173.85226440 330.47927856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[18 23]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[64 96]
[65 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
