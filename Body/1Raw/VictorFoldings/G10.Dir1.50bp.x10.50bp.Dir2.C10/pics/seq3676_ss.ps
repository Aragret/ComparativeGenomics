%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAxxxxxxxxxxGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.14978790 276.93597412]
[90.14978790 261.93597412]
[90.14978790 246.93595886]
[90.14978790 231.93595886]
[90.14978790 216.93595886]
[90.14978790 201.93595886]
[90.14978790 186.93595886]
[90.14978790 171.93595886]
[90.14978790 156.93595886]
[90.14978790 141.93595886]
[76.36740875 136.01600647]
[65.48858643 146.34320068]
[64.36128998 159.23440552]
[55.03328323 167.61338806]
[42.89867401 167.37127686]
[31.80735970 177.46992493]
[20.71604347 187.56857300]
[9.62472820 197.66723633]
[1.98359859 212.80160522]
[-14.67459965 209.64871216]
[-16.25636673 192.76870728]
[-0.47392112 186.57591248]
[10.61739445 176.47726440]
[21.70870972 166.37861633]
[32.80002594 156.27996826]
[37.18518448 139.31617737]
[55.16137695 135.46438599]
[66.04020691 125.13717651]
[59.78997421 96.84278870]
[73.06775665 72.60495758]
[97.76324463 63.56921005]
[99.94008636 48.72800446]
[102.11692047 33.88679886]
[104.29375458 19.04559326]
[106.47059631 4.20438766]
[96.07899475 -2.04441833]
[88.44697571 -11.42223740]
[84.46228027 -22.80089760]
[84.57567596 -34.82178879]
[88.75009155 -46.05808258]
[96.46786499 -55.18408585]
[106.79475403 -61.13164139]
[118.49304199 -63.21514130]
[121.59136200 -77.89167023]
[124.68968201 -92.56819153]
[127.78800201 -107.24472046]
[130.88632202 -121.92124176]
[133.98464966 -136.59776306]
[133.20480347 -151.57748413]
[128.59924316 -165.85295105]
[123.99367523 -180.12840271]
[119.38810730 -194.40386963]
[104.45339203 -192.57339478]
[89.44216156 -193.60269165]
[74.89706421 -197.45454407]
[61.34390259 -203.98970032]
[49.27261353 -212.97192383]
[39.11956406 -224.07652283]
[31.25177956 -236.90206909]
[25.95367813 -250.98490906]
[23.41678238 -265.81597900]
[23.73279953 -280.85916138]
[26.89030647 -295.57058716]
[32.77515793 -309.41851807]
[41.17462540 -321.90231323]
[51.78506851 -332.57073975]
[64.22293091 -341.03808594]
[78.03858185 -346.99829102]
[92.73261261 -350.23593140]
[107.77382660 -350.63388062]
[122.61849976 -348.17782593]
[136.72999573 -342.95654297]
[149.59822083 -335.15875244]
[160.75796509 -325.06634521]
[169.80583191 -313.04418945]
[176.41473389 -299.52682495]
[180.34576416 -285.00292969]
[181.45683289 -269.99752808]
[179.70776367 -255.05305481]
[175.16178894 -240.70974731]
[167.98323059 -227.48609924]
[158.43161011 -215.86013794]
[146.85218811 -206.25215149]
[133.66357422 -199.00942993]
[138.26913452 -184.73396301]
[142.87469482 -170.45851135]
[147.48027039 -156.18304443]
[150.98042297 -170.76896667]
[157.69119263 -184.18408203]
[167.26425171 -195.73210144]
[179.20268250 -204.81359863]
[192.88685608 -210.95718384]
[207.60644531 -213.84397888]
[222.59742737 -213.32415771]
[237.08171082 -209.42468262]
[250.30743408 -202.34794617]
[261.58813477 -192.46130371]
[270.33828735 -180.27792358]
[276.10366821 -166.43016052]
[278.58508301 -151.63684082]
[277.65365601 -136.66578674]
[273.35781860 -122.29408264]
[265.92047119 -109.26773071]
[255.72769165 -98.26284790]
[243.30854797 -89.85066223]
[229.30766296 -84.46781158]
[214.45175171 -82.39369202]
[199.51193237 -83.73596954]
[185.26365662 -88.42497253]
[172.44650269 -96.21730804]
[161.72575378 -106.70851898]
[153.65786743 -119.35404205]
[148.66117859 -133.49945068]
[145.56285095 -118.82292175]
[142.46453857 -104.14640045]
[139.36621094 -89.46987152]
[136.26788330 -74.79334259]
[133.16957092 -60.11682129]
[147.16502380 -48.71835327]
[153.52326965 -31.73527145]
[150.42581177 -13.78180408]
[138.63569641 0.21810208]
[121.31179810 6.38122463]
[119.13496399 21.22242928]
[116.95812988 36.06363678]
[114.78128815 50.90484238]
[112.60445404 65.74604797]
[119.07429504 68.40039062]
[124.98730469 72.27825165]
[130.11193848 77.26312256]
[134.24101257 83.19466400]
[137.19993591 89.87380219]
[138.85398865 97.06936646]
[139.11419678 104.52607727]
[137.94152832 111.97359467]
[135.34950256 119.13631439]
[131.40463257 125.74358368]
[126.22505188 131.53987122]
[119.97714996 136.29466248]
[112.87027740 139.81147766]
[105.14978790 141.93595886]
[105.14978790 156.93595886]
[105.14978790 171.93595886]
[105.14978790 186.93595886]
[105.14978790 201.93595886]
[105.14978790 216.93595886]
[105.14978790 231.93595886]
[105.14978790 246.93595886]
[105.14978790 261.93597412]
[105.14978790 276.93597412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[15 25]
[16 24]
[17 23]
[18 22]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[43 118]
[44 117]
[45 116]
[46 115]
[47 114]
[48 113]
[49 87]
[50 86]
[51 85]
[52 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
