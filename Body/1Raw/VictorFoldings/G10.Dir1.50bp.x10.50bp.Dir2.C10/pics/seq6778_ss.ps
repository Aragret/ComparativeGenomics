%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUxxxxxxxxxxCGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.00135040 255.05981445]
[106.00135040 240.05981445]
[106.00135040 225.05981445]
[106.00135040 210.05981445]
[106.00135040 195.05981445]
[106.00135040 180.05981445]
[106.00135040 165.05981445]
[106.00135040 150.05981445]
[106.00135040 135.05981445]
[106.00135040 120.05982208]
[93.06329346 112.46990967]
[79.97013855 119.78901672]
[84.21697998 134.24281311]
[85.14054871 149.27925110]
[82.69451904 164.14413452]
[77.00159454 178.09184265]
[68.34732056 190.42274475]
[57.16579056 200.51834106]
[44.01786804 207.87225342]
[29.56304741 212.11558533]
[14.52637577 213.03550720]
[-0.33791250 210.58589172]
[-14.28423214 204.88957214]
[-26.61304092 196.23231506]
[-36.70593262 185.04833984]
[-44.05664825 171.89863586]
[-48.29648209 157.44277954]
[-49.21276474 142.40589905]
[-46.75953674 127.54219818]
[-41.05985260 113.59725952]
[-32.39960098 101.27054596]
[-21.21318054 91.18036652]
[-8.06169605 83.83283997]
[6.39517927 79.59650421]
[21.43229485 78.68386841]
[36.29539490 81.14069366]
[50.23895264 86.84376526]
[62.56356430 95.50699615]
[72.65103149 106.69586182]
[85.74418640 99.37675476]
[95.49183655 87.97573853]
[100.68725586 73.90422058]
[105.88266754 59.83269882]
[111.07808685 45.76118088]
[116.27349854 31.68965912]
[121.46891785 17.61814117]
[126.66432953 3.54662132]
[131.85974121 -10.52489853]
[137.05516052 -24.59641838]
[123.48873138 -31.01900291]
[110.54302979 -38.61546707]
[98.31935883 -47.32636261]
[86.91340637 -57.08350372]
[76.41443634 -67.81053162]
[66.90460968 -79.42350006]
[58.45836639 -91.83149719]
[51.14180374 -104.93743896]
[45.01218796 -118.63873291]
[40.11749268 -132.82814026]
[36.49602509 -147.39463806]
[34.17612839 -162.22419739]
[33.17595673 -177.20074463]
[33.50334549 -192.20709229]
[35.15572739 -207.12577820]
[38.12017059 -221.84005737]
[42.37347031 -236.23474121]
[47.88234711 -250.19718933]
[54.60367584 -263.61810303]
[62.48485947 -276.39248657]
[71.46421051 -288.42031860]
[81.47145844 -299.60748291]
[92.42827606 -309.86642456]
[104.24890900 -319.11685181]
[116.84084320 -327.28634644]
[130.10552979 -334.31100464]
[143.93916321 -340.13580322]
[158.23345947 -344.71517944]
[172.87654114 -348.01330566]
[187.75381470 -350.00436401]
[202.74884033 -350.67276001]
[217.74426270 -350.01324463]
[232.62272644 -348.03100586]
[247.26776123 -344.74157715]
[261.56475830 -340.17065430]
[275.40185547 -334.35403442]
[288.67068481 -327.33728027]
[301.26748657 -319.17523193]
[313.09359741 -309.93182373]
[324.05648804 -299.67938232]
[334.07034302 -288.49813843]
[343.05682373 -276.47561646]
[350.94558716 -263.70593262]
[357.67486572 -250.28898621]
[363.19201660 -236.32980347]
[367.45385742 -221.93763733]
[370.42700195 -207.22512817]
[372.08822632 -192.30743408]
[372.42449951 -177.30128479]
[371.43322754 -162.32412720]
[369.12210083 -147.49319458]
[365.50927734 -132.92457581]
[360.62298584 -118.73225403]
[354.50149536 -105.02732849]
[347.19271851 -91.91706085]
[338.75381470 -79.50405121]
[329.25088501 -67.88545990]
[318.75827026 -57.15220642]
[307.35809326 -47.38830566]
[295.13958740 -38.67016983]
[282.19839478 -31.06603241]
[268.63577271 -24.63540840]
[254.55787659 -19.42862511]
[240.07489014 -15.48643494]
[225.30017090 -12.83969116]
[210.34934998 -11.50910759]
[195.33943176 -11.50509834]
[180.38789368 -12.82769585]
[165.61177063 -15.46654797]
[151.12667847 -19.40100098]
[145.93127441 -5.32948256]
[140.73585510 8.74203682]
[135.54043579 22.81355667]
[130.34501648 36.88507462]
[125.14960480 50.95659637]
[119.95419312 65.02811432]
[114.75877380 79.09963226]
[109.56335449 93.17115021]
[120.86901093 83.31304932]
[131.51667786 72.74768066]
[145.44494629 67.17958069]
[160.44166565 67.49310303]
[174.12504578 73.63844299]
[184.32185364 84.63957977]
[189.41259766 98.74929810]
[188.58879089 113.72666168]
[181.98123169 127.19292450]
[170.63937378 137.00935364]
[156.36454773 141.61686707]
[141.42390442 140.28370667]
[128.19273376 133.22355652]
[121.00135040 120.05982208]
[121.00135040 135.05981445]
[121.00135040 150.05981445]
[121.00135040 165.05981445]
[121.00135040 180.05981445]
[121.00135040 195.05981445]
[121.00135040 210.05981445]
[121.00135040 225.05981445]
[121.00135040 240.05981445]
[121.00135040 255.05981445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 40]
[12 39]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
