%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACxxxxxxxxxxACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.80185699 419.28189087]
[83.80185699 404.28189087]
[83.80185699 389.28189087]
[83.80185699 374.28189087]
[83.80185699 359.28189087]
[83.80185699 344.28189087]
[83.80185699 329.28189087]
[83.80185699 314.28189087]
[83.80185699 299.28189087]
[83.80185699 284.28189087]
[69.19760895 280.97769165]
[55.68838120 274.50317383]
[43.95308685 265.18020630]
[34.58227921 253.47383118]
[28.04843903 239.96911621]
[24.68215179 225.34197998]
[24.65537643 210.32528687]
[27.97267342 195.67213440]
[34.47080612 182.11814880]
[43.82678223 170.34448242]
[55.57388687 160.94361877]
[69.12498474 154.38952637]
[83.80185699 151.01382446]
[83.80185699 136.01382446]
[71.53948975 127.37470245]
[57.41468811 132.42346191]
[43.28988266 137.47221375]
[33.09454727 150.31695557]
[16.91493797 147.64257812]
[11.39525127 132.20025635]
[22.21366882 119.87573242]
[38.24112701 123.34741211]
[52.36593246 118.29866028]
[66.49073029 113.24990082]
[70.84391022 84.36775970]
[93.72045135 70.53057861]
[94.34442902 55.54356003]
[94.96839905 40.55654526]
[95.59237671 25.56953049]
[96.21635437 10.58251381]
[96.84033203 -4.40450287]
[81.95511627 -6.33314323]
[67.29463959 -9.55178928]
[52.97047043 -14.03594208]
[39.09163666 -19.75147629]
[25.76376343 -26.65489197]
[13.08828449 -34.69364929]
[1.16167068 -43.80656433]
[-9.92530727 -53.92428589]
[-20.08827019 -64.96981049]
[-29.24987030 -76.85906219]
[-37.34038162 -89.50157166]
[-44.29822922 -102.80110931]
[-50.07045364 -116.65646362]
[-54.61313248 -130.96217346]
[-57.89168930 -145.60937500]
[-59.88116837 -160.48658752]
[-60.56643295 -175.48057556]
[-59.94226456 -190.47723389]
[-58.01341248 -205.36242676]
[-54.79456329 -220.02285767]
[-50.31020737 -234.34696960]
[-44.59447861 -248.22572327]
[-37.69087601 -261.55349731]
[-29.65194321 -274.22885132]
[-20.53885841 -286.15533447]
[-10.42098236 -297.24218750]
[0.62468141 -307.40499878]
[12.51406765 -316.56643677]
[25.15668869 -324.65676880]
[38.45632553 -331.61441040]
[52.31175613 -337.38644409]
[66.61753845 -341.92892456]
[81.26477814 -345.20727539]
[96.14201355 -347.19653320]
[111.13601685 -347.88159180]
[126.13266754 -347.25723267]
[141.01783752 -345.32815552]
[155.67822266 -342.10910034]
[170.00225830 -337.62454224]
[183.88093567 -331.90863037]
[197.20861816 -325.00485229]
[209.88386536 -316.96572876]
[221.81022644 -307.85247803]
[232.89692688 -297.73443604]
[243.05957031 -286.68862915]
[252.22084045 -274.79913330]
[260.31100464 -262.15640259]
[267.26846313 -248.85665894]
[273.04031372 -235.00114441]
[277.58258057 -220.69529724]
[280.86071777 -206.04800415]
[282.84979248 -191.17074585]
[283.53463745 -176.17674255]
[282.91003418 -161.18009949]
[280.98077393 -146.29495239]
[277.76150513 -131.63461304]
[273.27676392 -117.31063843]
[267.56063843 -103.43204498]
[260.65667725 -90.10446167]
[252.61737061 -77.42932129]
[243.50395203 -65.50308990]
[233.38577271 -54.41653442]
[222.33982849 -44.25403595]
[210.45018005 -35.09293747]
[197.80732727 -27.00295830]
[184.50749207 -20.04567146]
[170.65190125 -14.27402687]
[156.34599304 -9.73195076]
[141.69866943 -6.45401192]
[126.82137299 -4.46515799]
[111.82735443 -3.78052521]
[111.20337677 11.20649052]
[110.57939911 26.19350624]
[109.95542145 41.18052292]
[109.33144379 56.16753769]
[108.70746613 71.15455627]
[116.87033081 74.32528687]
[123.92233276 79.79759979]
[129.21798706 87.19228363]
[132.23878479 95.95047760]
[132.64274597 105.37551117]
[130.30020142 114.68829346]
[125.31252289 123.09165955]
[118.01126099 129.83857727]
[108.93741608 134.29814148]
[98.80185699 136.01382446]
[98.80185699 151.01382446]
[113.47872925 154.38952637]
[127.02983093 160.94361877]
[138.77693176 170.34448242]
[148.13290405 182.11814880]
[154.63104248 195.67213440]
[157.94833374 210.32528687]
[157.92156982 225.34197998]
[154.55528259 239.96911621]
[148.02143860 253.47383118]
[138.65063477 265.18020630]
[126.91533661 274.50317383]
[113.40610504 280.97769165]
[98.80185699 284.28189087]
[98.80185699 299.28189087]
[98.80185699 314.28189087]
[98.80185699 329.28189087]
[98.80185699 344.28189087]
[98.80185699 359.28189087]
[98.80185699 374.28189087]
[98.80185699 389.28189087]
[98.80185699 404.28189087]
[98.80185699 419.28189087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 34]
[26 33]
[27 32]
[36 117]
[37 116]
[38 115]
[39 114]
[40 113]
[41 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
