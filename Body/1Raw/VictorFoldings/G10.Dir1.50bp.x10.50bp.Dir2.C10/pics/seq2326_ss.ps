%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUAxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.75473022 435.17993164]
[134.75473022 420.17993164]
[134.75473022 405.17993164]
[134.75473022 390.17993164]
[134.75473022 375.17993164]
[134.75473022 360.17993164]
[134.75473022 345.17993164]
[134.75473022 330.17993164]
[134.75473022 315.17993164]
[134.75473022 300.17993164]
[113.73861694 293.47970581]
[96.56709290 279.59439087]
[85.59232330 260.40298462]
[82.32603455 238.51274109]
[87.23123932 216.90519714]
[99.65677643 198.52992249]
[117.92362976 185.90196228]
[113.61604309 171.53378296]
[109.30845642 157.16560364]
[105.00087738 142.79740906]
[100.69329071 128.42922974]
[89.04907990 126.24459839]
[79.30554199 119.50489807]
[66.06295776 126.55003357]
[54.91936874 139.32722473]
[39.55665588 132.15621948]
[42.19459534 115.40875244]
[59.01781845 113.30744934]
[72.26040649 106.26231384]
[72.36439514 93.29366302]
[78.21613312 81.71981812]
[88.59856415 73.94795990]
[86.42173004 59.10675049]
[84.24488831 44.26554489]
[69.54712677 40.49044037]
[57.44705582 31.40026283]
[49.76983261 18.40511322]
[47.65853500 3.50108576]
[51.40405655 -11.03631115]
[60.40548325 -22.99957657]
[73.26625824 -30.58441544]
[71.08941650 -45.42562103]
[68.91258240 -60.26682663]
[66.73574829 -75.10803223]
[64.55890656 -89.94924164]
[62.38207245 -104.79044342]
[47.36973953 -104.38269806]
[32.41455841 -105.75341034]
[17.72646904 -108.88333893]
[3.51167536 -113.72853851]
[-10.03027153 -120.22100067]
[-22.70926285 -128.26957703]
[-34.34730530 -137.76127625]
[-44.78102112 -148.56283569]
[-53.86393738 -160.52265930]
[-61.46854019 -173.47280884]
[-67.48807526 -187.23149109]
[-71.83803558 -201.60557556]
[-74.45735931 -216.39324951]
[-75.30927277 -231.38693237]
[-74.38181305 -246.37614441]
[-71.68800354 -261.15042114]
[-67.26566315 -275.50241089]
[-61.17687225 -289.23059082]
[-53.50710678 -302.14224243]
[-44.36404037 -314.05615234]
[-33.87602615 -324.80499268]
[-22.19030190 -334.23791504]
[-9.47091198 -342.22250366]
[4.10357952 -348.64663696]
[18.34260941 -353.42016602]
[33.04628372 -356.47601318]
[48.00818253 -357.77136230]
[63.01826859 -357.28796387]
[77.86582184 -355.03265381]
[92.34240723 -351.03704834]
[106.24479675 -345.35723877]
[119.37781525 -338.07302856]
[131.55711365 -329.28659058]
[142.61167908 -319.12133789]
[152.38636780 -307.71990967]
[160.74392700 -295.24243164]
[167.56703186 -281.86404419]
[172.75990295 -267.77255249]
[176.24964905 -253.16575623]
[177.98727417 -238.24874878]
[177.94836426 -223.23092651]
[176.13349915 -208.32313538]
[172.56813049 -193.73461914]
[167.30232239 -179.67021179]
[160.41000366 -166.32734680]
[151.98791504 -153.89332581]
[142.15431213 -142.54270935]
[131.04721069 -132.43484497]
[118.82257080 -123.71163177]
[105.65199280 -116.49552917]
[91.72036743 -110.88783264]
[77.22327423 -106.96727753]
[79.40011597 -92.12607574]
[81.57695007 -77.28486633]
[83.75378418 -62.44366455]
[85.93062592 -47.60245895]
[88.10746002 -32.76125336]
[102.60468292 -29.18915176]
[114.66247559 -20.31475449]
[122.42497253 -7.46529722]
[124.68262482 7.41726255]
[121.06062317 22.06972885]
[112.08066559 34.25182343]
[99.08609772 42.08871078]
[101.26293182 56.92991638]
[103.43977356 71.77111816]
[119.10784912 78.93837738]
[127.76181030 93.83693695]
[126.22497559 110.99783325]
[115.06147003 124.12164307]
[119.36905670 138.48982239]
[123.67664337 152.85801697]
[127.98423004 167.22619629]
[132.29180908 181.59437561]
[141.36457825 180.79287720]
[150.45098877 181.36981201]
[159.34291077 183.31097412]
[167.83677673 186.57086182]
[175.73832703 191.07382202]
[182.86698914 196.71578979]
[189.06005859 203.36665344]
[194.17634583 210.87335205]
[198.09945679 219.06324768]
[200.74041748 227.74824524]
[202.03968811 236.72901917]
[201.96849060 245.79963684]
[200.52949524 254.75222778]
[197.75668335 263.38183594]
[193.71455383 271.49096680]
[188.49665833 278.89431763]
[182.22340393 285.42279053]
[175.03927612 290.92749023]
[167.10952759 295.28305054]
[158.61634827 298.39062500]
[149.75473022 300.17993164]
[149.75473022 315.17993164]
[149.75473022 330.17993164]
[149.75473022 345.17993164]
[149.75473022 360.17993164]
[149.75473022 375.17993164]
[149.75473022 390.17993164]
[149.75473022 405.17993164]
[149.75473022 420.17993164]
[149.75473022 435.17993164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[23 29]
[24 28]
[32 112]
[33 111]
[34 110]
[41 103]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
