%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUxxxxxxxxxxCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.87610626 411.56164551]
[114.87610626 396.56164551]
[114.87610626 381.56164551]
[114.87610626 366.56164551]
[114.87610626 351.56164551]
[114.87610626 336.56164551]
[114.87610626 321.56164551]
[114.87610626 306.56164551]
[114.87610626 291.56164551]
[114.87610626 276.56164551]
[95.91313171 270.83258057]
[79.90119171 259.13534546]
[68.65497589 242.77926636]
[63.45446396 223.60255432]
[64.89926910 203.76576233]
[72.83954620 185.50839233]
[86.39137268 170.89598083]
[104.03516388 161.58647156]
[101.24283600 146.84867859]
[98.45051575 132.11087036]
[90.71177673 132.11322021]
[82.90727234 130.21049500]
[75.51346588 126.37863922]
[69.01252747 120.71401215]
[63.86176682 113.43415070]
[49.09571075 116.07302094]
[34.32965469 118.71188354]
[19.56359863 121.35074615]
[14.41945934 135.82255554]
[2.71819592 145.77122498]
[-12.39261055 148.52061462]
[-26.84822845 143.33113098]
[-36.76016998 131.59873962]
[-39.46217346 116.47939301]
[-34.22740936 102.04010773]
[-22.46400833 92.16499329]
[-7.33626318 89.51039886]
[7.08653831 94.79039001]
[16.92473412 106.58469391]
[31.69079018 103.94582367]
[46.45684433 101.30696106]
[61.22290039 98.66809845]
[64.62587738 84.05920410]
[52.54589081 75.16685486]
[40.46590424 66.27450562]
[28.38591385 57.38215637]
[16.30592537 48.48980713]
[3.41746163 49.64796829]
[-6.47185802 41.93951035]
[-8.36830425 29.95156670]
[-20.26068306 20.80983162]
[-36.57991028 19.19278717]
[-43.09167862 4.14190960]
[-33.09723282 -8.85974979]
[-16.87800789 -6.43719721]
[-11.11894989 8.91745281]
[0.77343023 18.05918694]
[18.24410820 19.39160919]
[25.19827652 36.40981674]
[37.27826309 45.30216980]
[49.35825348 54.19451904]
[61.43824005 63.08686829]
[73.51822662 71.97921753]
[82.16728210 67.26946259]
[91.42472076 65.04449463]
[100.61541748 65.29472351]
[109.11082458 67.83599854]
[116.37195587 72.33290863]
[126.81176758 61.56210327]
[137.25158691 50.79129410]
[122.73062897 54.55187225]
[107.73534393 54.92810059]
[93.04408264 51.90045166]
[79.41938782 45.62608337]
[67.56846619 36.43066406]
[58.10645294 24.79149628]
[51.52447510 11.31271267]
[48.16418076 -3.30605626]
[48.19998169 -18.30601311]
[51.63002396 -32.90857315]
[58.27627182 -46.35578537]
[67.79373932 -57.94965363]
[79.68842316 -67.08839417]
[93.34291077 -73.29765320]
[108.04846191 -76.25513458]
[123.04177856 -75.80732727]
[137.54461670 -71.97747040]
[150.80418396 -64.96436310]
[162.13226318 -55.13203049]
[170.94082642 -42.99081421]
[176.77268982 -29.17091942]
[179.32511902 -14.38967896]
[178.46563721 0.58567762]
[174.23887634 14.97784233]
[166.86419678 28.03977966]
[156.72290039 39.09480667]
[167.83758545 27.83539200]
[182.21086121 31.74159813]
[196.62307739 27.58371162]
[211.03529358 23.42582321]
[225.44750977 19.26793671]
[239.85972595 15.11004829]
[245.01644897 0.47489458]
[257.80975342 -8.30640602]
[273.32031250 -7.85726357]
[285.58404541 1.64961720]
[289.88525391 16.55864716]
[284.57006836 31.13699913]
[271.68225098 39.77899933]
[256.17745972 39.16162491]
[244.01760864 29.52226448]
[229.60539246 33.68015289]
[215.19317627 37.83803940]
[200.78096008 41.99592590]
[186.36874390 46.15381622]
[176.28491211 57.11582947]
[160.88079834 53.50702286]
[148.02238464 61.23110962]
[137.58258057 72.00191498]
[127.14276123 82.77272797]
[130.79411316 109.23207855]
[113.18831635 129.31854248]
[115.98064423 144.05635071]
[118.77296448 158.79415894]
[129.49633789 159.14114380]
[139.97744751 161.41032410]
[149.87475586 165.52589417]
[158.86607361 171.35192871]
[166.65905762 178.69680786]
[173.00074768 187.31964111]
[177.68569946 196.93801880]
[180.56271362 207.23736572]
[181.53970337 217.88121033]
[180.58657837 228.52215576]
[177.73625183 238.81321716]
[173.08346558 248.41914368]
[166.78163147 257.02737427]
[159.03781128 264.35812378]
[150.10588074 270.17361450]
[140.27821350 274.28561401]
[129.87609863 276.56164551]
[129.87609863 291.56164551]
[129.87609863 306.56164551]
[129.87609863 321.56164551]
[129.87609863 336.56164551]
[129.87609863 351.56164551]
[129.87609863 366.56164551]
[129.87609863 381.56164551]
[129.87609863 396.56164551]
[129.87609863 411.56164551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 124]
[19 123]
[20 122]
[25 42]
[26 41]
[27 40]
[28 39]
[43 63]
[44 62]
[45 61]
[46 60]
[47 59]
[50 57]
[51 56]
[68 120]
[69 119]
[70 118]
[96 117]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
