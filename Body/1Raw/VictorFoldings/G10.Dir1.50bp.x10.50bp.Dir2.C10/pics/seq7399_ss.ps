%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUxxxxxxxxxxGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.48584747 292.89465332]
[108.48584747 277.89465332]
[108.48584747 262.89465332]
[108.48584747 247.89466858]
[108.48584747 232.89466858]
[108.48584747 217.89466858]
[108.48584747 202.89466858]
[108.48584747 187.89466858]
[108.48584747 172.89466858]
[108.48584747 157.89466858]
[101.82826996 154.44116211]
[94.92127228 167.75631714]
[88.01406860 181.07136536]
[74.69912720 174.16395569]
[81.60611725 160.84931946]
[88.51311493 147.53416443]
[81.85553741 144.08067322]
[69.59317017 152.71978760]
[57.33079910 161.35890198]
[45.06843185 169.99801636]
[32.80606461 178.63713074]
[23.34004784 192.70237732]
[7.20403242 187.49993896]
[7.73626137 170.55433655]
[24.16694832 166.37477112]
[36.42931747 157.73564148]
[48.69168472 149.09652710]
[60.95405197 140.45741272]
[73.21642303 131.81829834]
[64.70657349 112.17320251]
[67.62779999 93.20738220]
[78.82987213 80.44369507]
[70.83995819 67.74876404]
[62.85004425 55.05383682]
[54.86012650 42.35890579]
[49.11060333 38.88752365]
[46.42840576 33.78486633]
[46.81466293 28.96549797]
[39.35975266 15.94918823]
[29.85139275 4.34784651]
[18.55238914 -5.51787615]
[7.25338364 -15.38359928]
[-4.04562140 -25.24932289]
[-19.52977371 -28.49764824]
[-24.02786827 -42.69681549]
[-35.32687378 -52.56254196]
[-46.62587738 -62.42826462]
[-53.13011169 -64.10232544]
[-57.16467285 -68.21979523]
[-58.17867661 -72.94709015]
[-69.05750275 -83.27429962]
[-79.93632507 -93.60150146]
[-90.81515503 -103.92870331]
[-106.82563019 -104.95059204]
[-115.89053345 -118.18717194]
[-111.05605316 -133.48446655]
[-96.03078461 -139.10771179]
[-82.34082794 -130.74322510]
[-80.48794556 -114.80753326]
[-69.60912323 -104.48032379]
[-58.73029709 -94.15312195]
[-47.85147095 -83.82592010]
[-36.76015472 -73.72726440]
[-25.46115112 -63.86154556]
[-14.16214657 -53.99582291]
[0.51382512 -51.45315933]
[5.82010174 -36.54832840]
[17.11910629 -26.68260384]
[28.41811180 -16.81688118]
[39.71711731 -6.95115805]
[35.48153687 -21.34073257]
[36.32695007 -36.31689072]
[42.15505981 -50.13836288]
[52.28823853 -61.19814301]
[65.54830933 -68.21031952]
[80.39353180 -70.35958099]
[95.09786224 -67.39605713]
[107.95165253 -59.66429138]
[117.46039581 -48.06326294]
[122.51850891 -33.94181061]
[122.53791046 -18.94182205]
[117.51632690 -4.80733633]
[108.03762054 6.81824398]
[95.20386505 14.58322144]
[80.50724792 17.58476830]
[65.65651703 15.47389889]
[52.37606049 8.49427795]
[59.83097076 21.51058769]
[67.55505371 34.36898804]
[75.54497528 47.06391907]
[83.53488922 59.75885010]
[91.52480316 72.45378113]
[117.13751984 71.70858002]
[136.71011353 93.20439148]
[132.85426331 125.50219727]
[147.26646423 121.34431458]
[161.67868042 117.18642426]
[176.09089661 113.02854156]
[190.50311279 108.87065125]
[192.16468811 93.76080322]
[199.48646545 80.43938446]
[211.35189819 70.93781281]
[225.95161438 66.70501709]
[241.05928040 68.38646698]
[254.37104797 75.72575378]
[263.85699463 87.60368347]
[268.07058716 102.20896149]
[266.36926270 117.31438446]
[259.01248169 130.61650085]
[247.12208557 140.08680725]
[232.51127625 144.28117371]
[217.40809631 142.55999756]
[204.11567688 135.18571472]
[194.66101074 123.28286743]
[180.24879456 127.44075775]
[165.83657837 131.59864807]
[151.42436218 135.75653076]
[137.01214600 139.91441345]
[151.65345764 143.17510986]
[166.29475403 146.43580627]
[180.93606567 149.69650269]
[195.76481628 147.43643188]
[210.60820007 149.59837341]
[224.17619324 155.99443054]
[235.28964233 166.06874084]
[242.98266602 178.94573975]
[246.58670044 193.50633240]
[245.78851318 208.48509216]
[240.65750122 222.58021545]
[231.63955688 234.56674194]
[219.51841736 243.40292358]
[205.34753418 248.32084656]
[190.35845947 248.89309692]
[175.85385132 245.06993103]
[163.09429932 237.18362427]
[153.18870544 225.91955566]
[146.99795532 212.25666809]
[145.05999756 197.38587952]
[137.86862183 184.22213745]
[130.67723083 171.05841064]
[123.48584747 157.89466858]
[123.48584747 172.89466858]
[123.48584747 187.89466858]
[123.48584747 202.89466858]
[123.48584747 217.89466858]
[123.48584747 232.89466858]
[123.48584747 247.89466858]
[123.48584747 262.89465332]
[123.48584747 277.89465332]
[123.48584747 292.89465332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[32 92]
[33 91]
[34 90]
[35 89]
[38 88]
[39 87]
[40 70]
[41 69]
[42 68]
[43 67]
[45 65]
[46 64]
[47 63]
[50 62]
[51 61]
[52 60]
[53 59]
[95 118]
[96 117]
[97 116]
[98 115]
[99 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
