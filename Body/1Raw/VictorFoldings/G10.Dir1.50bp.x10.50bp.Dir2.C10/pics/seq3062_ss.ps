%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAxxxxxxxxxxCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[224.01927185 126.79608154]
[226.07704163 113.72884369]
[211.56842041 109.92098999]
[197.05979919 106.11312866]
[182.55117798 102.30526733]
[167.61515808 100.92124176]
[152.65388489 101.99831390]
[137.69259644 103.07538605]
[122.73131561 104.15245056]
[107.77003479 105.22952271]
[110.95098114 123.53031158]
[95.44720459 142.29731750]
[83.29387665 151.08915710]
[71.14054108 159.88099670]
[68.31294250 172.50669861]
[57.95779037 179.57366943]
[45.96409988 177.72607422]
[33.63281631 186.26652527]
[21.30153275 194.80699158]
[14.36194992 209.02503967]
[-0.50629711 209.91076660]
[-7.02005529 224.96076965]
[-23.33949661 226.57565308]
[-32.67657852 213.09416199]
[-25.42611313 198.38488770]
[-9.04675579 197.57948303]
[-2.98918891 183.97230530]
[12.76107407 182.47570801]
[25.09235764 173.93524170]
[37.42364120 165.39479065]
[44.01902390 149.16070557]
[62.34869766 147.72766113]
[74.50202942 138.93582153]
[86.65536499 130.14398193]
[86.19365692 122.65820312]
[71.22209167 123.58136749]
[70.29917908 108.60978699]
[85.27024841 107.68665314]
[84.80854034 100.20088196]
[71.66690826 92.96917725]
[58.52527618 85.73747253]
[45.38364410 78.50576782]
[32.24201202 71.27407074]
[19.02682877 64.17766571]
[5.73948812 57.21730804]
[-7.61998224 64.93275452]
[-23.02886772 64.17790222]
[-35.57024765 55.19361877]
[-41.24221420 40.84676361]
[-38.23486710 25.71535873]
[-27.50783348 14.62778378]
[-12.48407459 11.12204361]
[2.04238343 16.31680679]
[11.43620110 28.55444336]
[12.69984436 43.92996597]
[25.98718643 50.89032364]
[33.41752243 51.21012878]
[39.47371674 58.13243484]
[52.61534500 65.36413574]
[65.75698090 72.59584045]
[78.89861298 79.82754517]
[92.04023743 87.05924988]
[106.69296265 90.26824188]
[121.65424347 89.19116974]
[136.61552429 88.11410522]
[151.57681274 87.03703308]
[166.53808594 85.95996094]
[153.31765747 78.87334442]
[143.24780273 67.75588226]
[137.49992371 53.90084839]
[136.74267578 38.91997528]
[141.06413269 24.55595779]
[149.96159363 12.47973537]
[162.40002441 4.09610939]
[176.93251038 0.38033265]
[191.86849976 1.76465440]
[205.47050476 8.08803940]
[216.15625000 18.61489868]
[222.68269348 32.12066650]
[224.29058838 47.03423691]
[220.79292297 61.62075043]
[212.59655762 74.18338013]
[200.65496826 83.26074219]
[186.35902405 87.79664612]
[200.86766052 91.60449982]
[215.37628174 95.41236115]
[229.88490295 99.22022247]
[236.08480835 83.28090668]
[244.16664124 68.20945740]
[254.01148987 54.22705841]
[265.47460938 41.53887939]
[278.38745117 30.33106613]
[292.56027222 20.76799965]
[307.78479004 12.98989677]
[323.83734131 7.11074305]
[340.48211670 3.21662903]
[357.47467041 1.36448872]
[374.56542969 1.58126628]
[391.50344849 3.86352468]
[408.04006958 8.17749882]
[423.93246460 14.45959663]
[438.94741821 22.61733627]
[452.86456299 32.53070450]
[465.47967529 44.05392838]
[476.60769653 57.01761246]
[486.08541870 71.23123169]
[493.77386475 86.48593140]
[499.56036377 102.55759430]
[503.36022949 119.21015167]
[505.11785889 136.19900513]
[520.11706543 136.35299683]
[535.11627197 136.50700378]
[547.53637695 126.35220337]
[563.18859863 129.87196350]
[570.06579590 144.36622620]
[562.89245605 158.71621704]
[547.17126465 161.91386414]
[534.96228027 151.50621033]
[519.96307373 151.35220337]
[504.96383667 151.19821167]
[503.51428223 164.32855225]
[500.84164429 177.26602173]
[496.96939087 189.89697266]
[491.93136597 202.11039734]
[485.77178955 213.79898071]
[478.54464722 224.86000061]
[470.31338501 235.19624329]
[461.15017700 244.71682739]
[451.13546753 253.33805847]
[440.35717773 260.98413086]
[428.90994263 267.58779907]
[416.89422607 273.09097290]
[404.41555786 277.44522095]
[391.58352661 280.61218262]
[378.51083374 282.56393433]
[365.31231689 283.28326416]
[352.10385132 282.76370239]
[339.00155640 281.00976562]
[326.12045288 278.03674316]
[313.57379150 273.87066650]
[301.47180176 268.54800415]
[289.92077637 262.11544800]
[279.02230835 254.62940979]
[268.87216187 246.15556335]
[259.55953979 236.76828003]
[251.16636658 226.54994202]
[243.76641846 215.59025574]
[237.42477417 203.98542786]
[232.19726562 191.83737183]
[228.12986755 179.25274658]
[225.25843811 166.34207153]
[223.60826111 153.21875000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[12 34]
[13 33]
[14 32]
[17 30]
[18 29]
[19 28]
[21 26]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 56]
[45 55]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
