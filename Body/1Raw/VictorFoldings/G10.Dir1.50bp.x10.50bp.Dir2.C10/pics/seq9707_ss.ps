%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUAxxxxxxxxxxUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.52984619 297.93884277]
[125.21778870 282.94207764]
[124.90573120 267.94531250]
[124.59367371 252.94857788]
[124.28161621 237.95181274]
[123.96956635 222.95506287]
[123.65750885 207.95831299]
[123.34545135 192.96156311]
[123.03339386 177.96479797]
[119.78256989 163.32130432]
[113.71955872 149.60125732]
[107.65653992 135.88119507]
[92.64771271 135.94477844]
[78.86929321 129.99293518]
[68.62713623 119.02173615]
[63.63527679 104.86721802]
[48.67502975 103.77590942]
[33.71477890 102.68460083]
[18.75453186 101.59328461]
[15.44138813 116.25209808]
[9.98037243 130.25334167]
[2.49348640 143.28424072]
[-6.85201120 155.05366516]
[-17.84733772 165.29869080]
[-30.24685669 173.79042053]
[-43.77355194 180.33917236]
[-58.12524033 184.79862976]
[-72.98129272 187.06916809]
[-88.00981903 187.10006714]
[-102.87508392 184.89064026]
[-117.24498749 180.49023438]
[-130.79849243 173.99716187]
[-143.23283386 165.55648804]
[-154.27018738 155.35676575]
[-163.66401672 143.62586975]
[-171.20442200 130.62586975]
[-176.72296143 116.64720154]
[-180.09635925 102.00213623]
[-181.24923706 87.01786041]
[-180.15585327 72.02912903]
[-176.84062195 57.37078476]
[-171.37760925 43.37031555]
[-163.88887024 30.34048843]
[-154.54168701 18.57239532]
[-143.54490662 8.32894230]
[-131.14418030 -0.16103090]
[-117.61654663 -6.70785379]
[-103.26422882 -11.16526794]
[-88.40785217 -13.43369293]
[-73.37931824 -13.46245193]
[-58.51436615 -11.25090313]
[-44.14509201 -6.84845114]
[-30.59250450 -0.35344985]
[-18.15937614 8.08899975]
[-7.12346554 18.29029083]
[2.26867938 30.02252388]
[9.80723572 43.02359390]
[15.32378769 57.00305557]
[18.69509506 71.64859772]
[19.84584236 86.63304138]
[34.80609131 87.72434998]
[49.76633835 88.81565857]
[64.72658539 89.90696716]
[73.15963745 72.42111969]
[89.97444153 60.98913574]
[111.17065430 59.43674850]
[115.17839050 44.98205948]
[119.18613434 30.52737045]
[123.19387054 16.07268333]
[111.51661682 25.48765182]
[96.93863678 29.02071571]
[82.24666595 25.99649429]
[70.24920654 16.99309921]
[63.23970795 3.73161769]
[62.55809784 -11.25288773]
[68.33467102 -25.09598160]
[79.46517181 -35.15141678]
[93.82191467 -39.49700165]
[108.66044617 -37.30203247]
[121.14424896 -28.98609734]
[128.88691711 -16.13887405]
[130.40852356 -1.21770501]
[137.86343384 -14.23401451]
[145.31834412 -27.25032425]
[152.77325439 -40.26663208]
[160.22816467 -53.28294373]
[162.85337830 -70.03240967]
[179.67500305 -72.14649963]
[186.36315918 -56.56750870]
[173.24447632 -45.82803345]
[165.78956604 -32.81172180]
[158.33465576 -19.79541397]
[150.87974548 -6.77910423]
[143.42483521 6.23720551]
[137.64855957 20.08042336]
[133.64082336 34.53511047]
[129.63308716 48.98979950]
[125.62534332 63.44448853]
[136.28697205 73.99578094]
[150.69918823 69.83789062]
[165.11140442 65.68000031]
[179.52362061 61.52211761]
[184.68034363 46.88696289]
[197.47364807 38.10566330]
[212.98422241 38.55480576]
[225.24794006 48.06168365]
[229.54914856 62.97071457]
[224.23396301 77.54906464]
[211.34616089 86.19107056]
[195.84136963 85.57369232]
[183.68150330 75.93433380]
[169.26928711 80.09221649]
[154.85707092 84.25010681]
[140.44485474 88.40799713]
[140.97337341 98.62522888]
[139.02543640 108.40163422]
[134.84571838 117.16194153]
[128.80619812 124.42258453]
[121.37659454 129.81817627]
[127.43960571 143.53823853]
[133.50262451 157.25828552]
[135.49986267 142.39184570]
[141.71449280 128.73980713]
[151.61451721 117.47084808]
[164.35244751 109.54965210]
[178.83782959 105.65432739]
[193.83065796 106.11832428]
[208.04743958 110.90192413]
[220.27117920 119.59563446]
[229.45541382 131.45521545]
[234.81396484 145.46542358]
[235.88809204 160.42691040]
[232.58584595 175.05889893]
[225.18991089 188.10881042]
[214.33343506 198.45950317]
[200.94577026 205.22489929]
[186.17298889 207.82585144]
[171.27970886 206.03968811]
[157.54089355 200.01933289]
[146.13262939 190.28015137]
[138.03015137 177.65275574]
[138.34220886 192.64950562]
[138.65426636 207.64625549]
[138.96632385 222.64300537]
[139.27836609 237.63977051]
[139.59042358 252.63652039]
[139.90248108 267.63327026]
[140.21453857 282.63003540]
[140.52659607 297.62677002]
[143.11759949 316.83450317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[16 63]
[17 62]
[18 61]
[19 60]
[66 98]
[67 97]
[68 96]
[69 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
