%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.04618073 444.03402710]
[98.04618073 429.03402710]
[98.04618073 414.03402710]
[98.04618073 399.03402710]
[98.04618073 384.03402710]
[98.04618073 369.03402710]
[98.04618073 354.03402710]
[98.04618073 339.03402710]
[98.04618073 324.03402710]
[98.04618073 309.03402710]
[82.58750153 305.89038086]
[68.10229492 299.62905884]
[55.21217346 290.51632690]
[44.47077560 278.94085693]
[36.34003448 265.39715576]
[31.17028427 250.46441650]
[29.18517494 234.78178406]
[30.47199631 219.02104187]
[34.97784042 203.85769653]
[42.51177216 189.94216919]
[52.75292587 177.87184143]
[65.26416779 168.16537476]
[79.51074219 161.24047852]
[94.88315582 157.39591980]
[94.25917816 142.40890503]
[93.63520050 127.42189789]
[65.08414459 105.11145020]
[78.96434784 63.15715027]
[64.32084656 59.90632248]
[49.67734146 56.65549850]
[35.03384018 53.40467072]
[20.39034081 50.15384674]
[5.74683905 46.90301895]
[-8.89666271 43.65219498]
[-16.78208733 56.57886505]
[-28.43913460 66.24282074]
[-42.60333252 71.59577942]
[-57.73825455 72.05710602]
[-72.20217896 67.57675171]
[-84.42617035 58.64071274]
[-93.08425903 46.21829987]
[-97.23727417 31.65701103]
[-96.43473816 16.53634262]
[-90.76369476 2.49646926]
[-80.83930206 -8.93966579]
[-67.73809052 -16.53155708]
[-52.88116455 -19.45569229]
[-37.88010406 -17.39488602]
[-24.36211205 -10.57267475]
[-13.79351425 0.27091676]
[-7.32071543 13.95965672]
[-5.64583683 29.00869370]
[8.99766445 32.25951767]
[23.64116669 35.51034546]
[38.28466797 38.76116943]
[52.92816925 42.01199722]
[67.57167053 45.26282120]
[82.21517181 48.51364899]
[70.92282104 38.64031219]
[59.63046646 28.76697540]
[48.33811188 18.89363861]
[33.83825302 15.05254650]
[20.90145874 7.46048403]
[10.47718048 -3.32535887]
[3.33046246 -16.51339912]
[-0.01418979 -31.13575554]
[0.68869066 -46.11927795]
[5.38751888 -60.36431503]
[13.73744297 -72.82540131]
[25.12565422 -82.58802032]
[38.71636200 -88.93566895]
[53.51213074 -91.40249634]
[68.42708588 -89.80745697]
[82.36660004 -84.26761627]
[94.30764771 -75.18953705]
[103.37385559 -63.23948288]
[108.89985657 -49.29447174]
[110.48007965 -34.37794113]
[107.99855804 -19.58463097]
[101.63510895 -5.99666643]
[101.95726776 8.99987411]
[102.27943420 23.99641418]
[102.60160065 38.99295425]
[109.50859833 25.67779732]
[116.41559601 12.36264229]
[118.34178925 -4.48152924]
[135.06091309 -7.29354239]
[142.39134216 7.99374390]
[129.73074341 19.26963997]
[122.82375336 32.58479691]
[115.91675568 45.89995193]
[120.67092896 51.70062256]
[135.47212219 49.26650620]
[130.17929077 63.30196381]
[134.93347168 69.10263824]
[149.34568787 64.94474792]
[163.75790405 60.78686142]
[178.17012024 56.62897110]
[185.10676575 45.70483017]
[197.24525452 42.56224060]
[207.90539551 48.36473083]
[222.40098572 44.50756836]
[236.89657593 40.65040970]
[251.39218140 36.79325104]
[260.64938354 23.69043922]
[276.67306519 22.90242958]
[287.17123413 35.03371429]
[284.09057617 50.77820969]
[269.79434204 58.05808640]
[255.24934387 51.28884888]
[240.75373840 55.14600754]
[226.25814819 59.00316620]
[211.76254272 62.86032486]
[200.05868530 75.89947510]
[182.32800293 71.04119110]
[167.91578674 75.19907379]
[153.50357056 79.35696411]
[139.09135437 83.51485443]
[139.48056030 97.33647919]
[135.43998718 109.59326935]
[128.02120972 119.00921631]
[118.59116364 124.81377411]
[108.62221527 126.79792023]
[109.24619293 141.78492737]
[109.87017059 156.77195740]
[123.97460938 158.92442322]
[137.43055725 163.65551758]
[149.77110291 170.79934692]
[160.56834412 180.10638428]
[169.44821167 191.25210571]
[176.10348511 203.84829712]
[180.30436707 217.45663452]
[181.90641785 231.60392761]
[180.85560608 245.79850769]
[177.19000244 259.54736328]
[171.03848267 272.37332153]
[162.61619568 283.83145142]
[152.21699524 293.52468872]
[140.20324707 301.11746216]
[126.99314117 306.34729004]
[113.04618073 309.03402710]
[113.04618073 324.03402710]
[113.04618073 339.03402710]
[113.04618073 354.03402710]
[113.04618073 369.03402710]
[113.04618073 384.03402710]
[113.04618073 399.03402710]
[113.04618073 414.03402710]
[113.04618073 429.03402710]
[113.04618073 444.03402710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 125]
[25 124]
[26 123]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[83 91]
[84 90]
[85 89]
[95 118]
[96 117]
[97 116]
[98 115]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
