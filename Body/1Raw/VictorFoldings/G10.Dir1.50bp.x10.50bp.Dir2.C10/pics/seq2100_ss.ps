%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAxxxxxxxxxxGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.20139313 469.54260254]
[90.20139313 454.54260254]
[90.20139313 439.54260254]
[90.20139313 424.54260254]
[90.20139313 409.54260254]
[90.20139313 394.54260254]
[90.20139313 379.54260254]
[90.20139313 364.54260254]
[90.20139313 349.54260254]
[90.20139313 334.54260254]
[75.22532654 330.29510498]
[62.03335571 322.00372314]
[51.69234848 310.32937622]
[45.04129791 296.20693970]
[42.62327194 280.77044678]
[44.64107895 265.26196289]
[50.94026184 250.93162537]
[61.02091980 238.93693542]
[74.07734680 230.24922180]
[89.06244659 225.57502747]
[88.75038910 210.57827759]
[88.43833160 195.58151245]
[88.12627411 180.58476257]
[86.12944031 178.53050232]
[84.85350037 175.53617859]
[84.67034912 171.88264465]
[85.83951569 167.98339844]
[88.46429443 164.34033203]
[89.39992523 149.36953735]
[90.33554840 134.39874268]
[91.27117920 119.42795563]
[84.10292816 114.17465210]
[79.70245361 106.45346832]
[64.72274017 105.67362213]
[49.74302292 104.89377594]
[39.21526718 116.45665741]
[23.71122932 118.49598694]
[10.55144596 110.04885101]
[5.94956446 95.10372925]
[12.07845116 80.71724701]
[26.04423523 73.68227386]
[41.25269699 77.32049561]
[50.52286911 89.91406250]
[65.50258636 90.69390869]
[80.48229980 91.47374725]
[85.20775604 84.67592621]
[92.16818237 80.19342804]
[100.31192017 78.70351410]
[105.79895020 64.74312592]
[111.28598022 50.78273392]
[116.77301025 36.82234573]
[122.26004028 22.86195374]
[111.28592682 7.26511765]
[111.84685516 -11.64842224]
[123.54055786 -26.33455276]
[141.55982971 -31.04238510]
[138.43344116 -46.55161667]
[149.70475769 -56.28848267]
[154.31031799 -70.56394196]
[158.91589355 -84.83940125]
[163.52145386 -99.11486816]
[150.00280762 -105.67172241]
[137.52830505 -114.04626465]
[126.34076691 -124.07547760]
[116.65795898 -135.56414795]
[108.66836548 -148.28862000]
[102.52750397 -162.00125122]
[98.35490417 -176.43507385]
[96.23178864 -191.30917358]
[96.19948578 -206.33398438]
[98.25862885 -221.21707153]
[102.36912537 -235.66870117]
[108.45096588 -249.40760803]
[116.38578033 -262.16632080]
[126.01909637 -273.69650269]
[137.16340637 -283.77374268]
[149.60177612 -292.20184326]
[163.09210205 -298.81677246]
[177.37179565 -303.48974609]
[192.16287231 -306.12982178]
[207.17744446 -306.68563843]
[222.12322998 -305.14630127]
[236.70932007 -301.54183960]
[250.65177917 -295.94238281]
[263.67922974 -288.45697021]
[275.53808594 -279.23123169]
[285.99746704 -268.44482422]
[294.85385132 -256.30764771]
[301.93481445 -243.05599976]
[307.10250854 -228.94781494]
[310.25634766 -214.25769043]
[311.33496094 -199.27160645]
[310.31732178 -184.28126526]
[307.22326660 -169.57844543]
[302.11303711 -155.44934082]
[295.08605957 -142.16899109]
[286.27911377 -129.99589539]
[275.86367798 -119.16700745]
[264.04248047 -109.89311218]
[251.04559326 -102.35473633]
[237.12602234 -96.69860840]
[222.55471802 -93.03482819]
[207.61531067 -91.43471527]
[192.59861755 -91.92942047]
[177.79690552 -94.50930023]
[173.19134521 -80.23384094]
[168.58578491 -65.95838165]
[163.98022461 -51.68291855]
[167.43603516 -37.19476700]
[155.83529663 -26.43682098]
[164.06808472 -18.74905205]
[168.83122253 -8.48470211]
[169.39172363 2.86867762]
[165.62881470 13.64959526]
[158.05722046 22.26576614]
[147.75718689 27.42927170]
[136.22042847 28.34898567]
[130.73339844 42.30937576]
[125.24636841 56.26976395]
[119.75933838 70.23015594]
[114.27230835 84.19054413]
[120.79257202 104.61590576]
[106.24197388 120.36357880]
[105.30634308 135.33436584]
[104.37071228 150.30516052]
[103.43508911 165.27595520]
[103.12303162 180.27270508]
[103.43508911 195.26945496]
[103.74713898 210.26622009]
[104.05919647 225.26296997]
[118.09668732 228.84214783]
[130.71279907 235.93742371]
[141.04525757 246.05661011]
[148.38972473 258.50109863]
[152.24786377 272.41403198]
[152.36109924 286.83938599]
[148.72798157 300.78765869]
[141.60383606 313.30361938]
[131.48281860 323.53192139]
[119.06364441 330.77539062]
[105.20139313 334.54260254]
[105.20139313 349.54260254]
[105.20139313 364.54260254]
[105.20139313 379.54260254]
[105.20139313 394.54260254]
[105.20139313 409.54260254]
[105.20139313 424.54260254]
[105.20139313 439.54260254]
[105.20139313 454.54260254]
[105.20139313 469.54260254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 127]
[28 126]
[29 125]
[30 124]
[31 123]
[33 45]
[34 44]
[35 43]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[56 110]
[58 108]
[59 107]
[60 106]
[61 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
