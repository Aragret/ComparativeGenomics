%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCxxxxxxxxxxUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.84664154 277.14849854]
[98.53459167 262.15176392]
[98.22253418 247.15499878]
[97.91047668 232.15824890]
[97.59841919 217.16149902]
[97.28636169 202.16474915]
[96.97430420 187.16798401]
[96.66225433 172.17123413]
[96.35019684 157.17448425]
[83.03504181 150.26748657]
[70.59559631 158.64962769]
[58.15615845 167.03176880]
[63.07199097 181.29701233]
[64.12723541 196.34855652]
[61.24995041 211.16015625]
[54.63630676 224.72193909]
[44.73723221 236.10925293]
[32.22766876 244.54566956]
[17.96053314 249.45599365]
[2.90858603 250.50543213]
[-11.90190601 247.62242126]
[-25.46113968 241.00354004]
[-36.84462357 231.10006714]
[-45.27621460 218.58724976]
[-50.18103027 204.31822205]
[-51.22465515 189.26586914]
[-48.33592987 174.45649719]
[-41.71181107 160.89981079]
[-31.80394936 149.52015686]
[-19.28787231 141.09339905]
[-5.01695061 136.19409180]
[10.03580189 135.15628052]
[24.84406281 138.05072021]
[38.39818192 144.68006897]
[49.77401352 154.59233093]
[62.21345520 146.21018982]
[74.65289307 137.82804871]
[62.69659805 120.85952759]
[60.08686066 101.56895447]
[66.25334167 84.47034454]
[78.69622040 73.05056000]
[93.78161621 69.06132507]
[94.40559387 54.07431030]
[95.02957153 39.08729172]
[87.87303925 24.97720528]
[96.13307953 12.58281040]
[96.75705719 -2.40420556]
[95.97721100 -17.38392067]
[93.80036926 -32.22512436]
[91.62353516 -47.06632996]
[81.73434448 -55.41245651]
[80.25698853 -67.86381531]
[87.44372559 -77.64431763]
[85.57611084 -92.52759552]
[83.70849609 -107.41087341]
[81.84088135 -122.29415894]
[78.60305786 -126.55280304]
[77.48060608 -131.16717529]
[78.24647522 -135.25559998]
[80.35106659 -138.16044617]
[79.41544342 -153.13124084]
[70.83242035 -166.42192078]
[77.76078796 -179.60702515]
[76.82515717 -194.57781982]
[75.88952637 -209.54861450]
[74.95389557 -224.51940918]
[60.47777939 -229.08081055]
[48.62941742 -238.56661987]
[41.01119995 -251.69396973]
[38.65343475 -266.68746948]
[41.87498474 -281.51940918]
[50.24016571 -294.18386841]
[62.61765289 -302.96804810]
[77.33349609 -306.68402100]
[92.39749146 -304.82919312]
[105.77236938 -297.65444946]
[115.64927673 -286.13006592]
[120.69244385 -271.81466675]
[120.21983337 -256.64425659]
[114.29534912 -242.67054749]
[103.72023773 -231.78332520]
[89.92469025 -225.45503235]
[90.86032104 -210.48423767]
[91.79594421 -195.51344299]
[92.73157501 -180.54266357]
[101.24767303 -168.32278442]
[94.38623047 -154.06686401]
[95.32186127 -139.09606934]
[96.72416687 -124.16176605]
[98.59177399 -109.27848816]
[100.45938873 -94.39521027]
[102.32700348 -79.51193237]
[113.66915894 -66.15695190]
[106.46473694 -49.24316788]
[108.64157867 -34.40196228]
[110.81841278 -19.56075668]
[118.83255768 -32.24040604]
[132.36634827 -38.70851898]
[147.26643372 -36.98011780]
[158.96017456 -27.58562469]
[163.85890198 -13.40809155]
[160.45927429 1.20157874]
[149.80456543 11.75986385]
[135.16459656 15.02656174]
[121.03218079 9.99916363]
[111.74407196 -1.78022826]
[111.12009430 13.20678806]
[118.32125854 26.24490356]
[110.01659393 39.71126938]
[109.39261627 54.69828796]
[108.76863861 69.68530273]
[135.94958496 86.09181976]
[138.79739380 123.83692932]
[153.29298401 127.69409180]
[162.45732117 126.87751770]
[168.04840088 131.78521729]
[182.46061707 135.94309998]
[196.87283325 140.10098267]
[213.76730347 138.68206787]
[219.80761719 154.52349854]
[206.25741577 164.71310425]
[192.71495056 154.51319885]
[178.30273438 150.35531616]
[163.89051819 146.19743347]
[149.43582153 142.18968201]
[134.94023132 138.33253479]
[129.04191589 142.96499634]
[139.91377258 153.29954529]
[150.78562927 163.63407898]
[161.65750122 173.96861267]
[175.59983826 179.50135803]
[182.70799255 192.71022034]
[179.64495850 207.39414978]
[167.84870911 216.65960693]
[152.85714722 216.15679932]
[141.70820618 206.12179565]
[139.63630676 191.26379395]
[132.17263794 178.25251770]
[124.70895386 165.24124146]
[117.24526978 152.22994995]
[111.34694672 156.86242676]
[111.65900421 171.85917664]
[111.97106171 186.85594177]
[112.28311920 201.85269165]
[112.59517670 216.84944153]
[112.90722656 231.84619141]
[113.21928406 246.84295654]
[113.53134155 261.83969116]
[113.84339905 276.83645630]
[116.43439484 296.04418945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 37]
[11 36]
[12 35]
[42 111]
[43 110]
[44 109]
[46 107]
[47 106]
[48 96]
[49 95]
[50 94]
[53 92]
[54 91]
[55 90]
[56 89]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[66 82]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
