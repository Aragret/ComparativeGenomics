%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUxxxxxxxxxxCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.51586914 288.39541626]
[152.20381165 273.39865112]
[151.89175415 258.40188599]
[151.57969666 243.40513611]
[151.26763916 228.40838623]
[150.95558167 213.41163635]
[150.64352417 198.41488647]
[150.33146667 183.41812134]
[150.01942444 168.42137146]
[145.56260681 154.09877014]
[137.31031799 141.57281494]
[129.05802917 129.04685974]
[120.89192963 134.76901245]
[111.70006561 138.29206848]
[102.05444336 139.46286011]
[92.53964996 138.27261353]
[83.71743774 134.85380554]
[76.09355164 129.46861267]
[70.08877563 122.48980713]
[66.01586914 114.37550354]
[64.06359100 105.63930511]
[49.08387756 104.85945892]
[34.10416412 104.07961273]
[19.12444878 103.29976654]
[4.14473486 102.51992035]
[-10.83497906 101.74008179]
[-15.06070518 116.20520782]
[-22.50893974 129.30560303]
[-32.77800751 140.33479309]
[-45.31411362 148.69798279]
[-59.44120026 153.94413757]
[-74.39740753 155.79035950]
[-89.37617493 154.13706970]
[-103.56970215 149.07344055]
[-116.21257019 140.87254333]
[-126.62294769 129.97663879]
[-134.23942566 116.97332001]
[-138.65124512 102.56386566]
[-139.62049866 87.52533722]
[-137.09490967 72.66875458]
[-131.21066284 58.79530716]
[-122.28511810 46.65317917]
[-110.79959869 36.89717484]
[-97.37351227 30.05342674]
[-82.73091125 26.49100876]
[-67.66144562 26.40203476]
[-52.97779465 29.79130745]
[-39.47183228 36.47604370]
[-27.87191582 46.09574890]
[-18.80361748 58.13164139]
[-12.75597668 71.93463898]
[-10.05513382 86.76036072]
[4.92458010 87.54020691]
[19.90429497 88.32005310]
[34.88401031 89.09989929]
[49.86372375 89.87974548]
[64.84343719 90.65959167]
[72.84938049 75.79109955]
[86.70652008 66.13983917]
[84.22140503 51.34712982]
[81.73628235 36.55442429]
[66.73624420 34.77244568]
[52.84639359 28.83538055]
[41.19272232 19.22452164]
[32.71994019 6.71897697]
[28.11489677 -7.66748428]
[27.75090599 -22.76861572]
[31.65747070 -37.36023712]
[39.51790619 -50.25947189]
[50.69499969 -60.42063522]
[64.28267670 -67.02001190]
[79.17944336 -69.52260590]
[94.17768860 -67.72556305]
[108.06156921 -61.77454758]
[119.70557404 -52.15198517]
[128.16578674 -39.63793564]
[132.75637817 -25.24685478]
[133.10519409 -10.14536476]
[129.18397522 4.44232464]
[121.31059265 17.33365631]
[110.12329102 27.48358536]
[96.52899170 34.06930542]
[99.01411438 48.86201096]
[101.49922943 63.65472031]
[108.62058258 64.66004181]
[115.40495300 67.04678345]
[124.42248535 55.05995178]
[133.44001770 43.07311630]
[132.62715149 27.05067062]
[144.74214172 16.53370094]
[160.49139404 19.58992767]
[167.79344177 33.87487793]
[161.04676819 48.43035507]
[145.42684937 52.09064865]
[136.40931702 64.07747650]
[127.39178467 76.06431580]
[134.87530518 83.15290070]
[140.40884399 92.56941223]
[154.31140137 86.93745422]
[168.21395874 81.30549622]
[182.11651611 75.67353821]
[189.67028809 61.52009583]
[205.47117615 58.74314499]
[217.39808655 69.47293091]
[216.30172729 85.47847748]
[203.02310181 94.48169708]
[187.74847412 89.57609558]
[173.84591675 95.20805359]
[159.94335938 100.84001160]
[146.04080200 106.47196960]
[141.58398438 120.79456329]
[149.83627319 133.32052612]
[158.08856201 145.84648132]
[157.64248657 130.85311890]
[160.36959839 116.10311127]
[166.14710999 102.26040649]
[174.71498108 89.94815063]
[185.68750000 79.72055817]
[198.57077026 72.03802490]
[212.78485107 67.24637604]
[227.68991089 65.56130219]
[242.61497498 67.05865479]
[256.88824463 71.67104340]
[269.86718750 79.19082642]
[280.96755981 89.27951813]
[289.68969727 101.48297119]
[295.64096069 115.25186157]
[298.55349731 129.96638489]
[298.29614258 144.96417236]
[294.88052368 159.57011414]
[288.46038818 173.12673950]
[279.32470703 185.02377319]
[267.88476562 194.72570801]
[254.65547180 201.79579163]
[240.23237610 205.91578674]
[225.26472473 206.90022278]
[210.42625427 204.70478821]
[196.38493347 199.42831421]
[183.77281189 191.30831909]
[173.15762329 180.71031189]
[165.01617432 168.10931396]
[165.32823181 183.10606384]
[165.64028931 198.10282898]
[165.95234680 213.09957886]
[166.26438904 228.09632874]
[166.57644653 243.09307861]
[166.88850403 258.08984375]
[167.20056152 273.08657837]
[167.51261902 288.08334351]
[170.10362244 307.29107666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 113]
[11 112]
[12 111]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[59 84]
[60 83]
[61 82]
[86 96]
[87 95]
[88 94]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
