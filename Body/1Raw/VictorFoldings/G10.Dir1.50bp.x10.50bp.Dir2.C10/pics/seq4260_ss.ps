%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCxxxxxxxxxxAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.07914734 77.49474335]
[148.93751526 84.72644806]
[135.79588318 91.95814514]
[122.65425110 99.18984985]
[109.51262665 106.42155457]
[98.74394226 116.86356354]
[91.11097717 129.77626038]
[83.47800446 142.68896484]
[75.84503174 155.60165405]
[68.21206665 168.51435852]
[60.57909393 181.42704773]
[57.72409058 198.13888550]
[40.87501907 200.02174377]
[34.40145111 184.35237122]
[47.66639709 173.79408264]
[55.29936600 160.88137817]
[62.93233490 147.96868896]
[70.56530762 135.05598450]
[78.19827271 122.14328766]
[85.83124542 109.23059082]
[76.66931152 97.35376740]
[62.24192810 101.45871735]
[47.81454086 105.56365967]
[33.38715744 109.66860199]
[18.95977211 113.77355194]
[4.53238773 117.87849426]
[0.86400849 132.79286194]
[-9.78166199 143.86378479]
[-24.54099083 148.11323547]
[-39.44379425 144.39811707]
[-50.48128891 133.71780396]
[-54.68445206 118.94522858]
[-50.92264557 104.05413818]
[-40.20778275 93.05017853]
[-25.42210197 88.89334106]
[-10.54288197 92.70180511]
[0.42744294 103.45111084]
[14.85482788 99.34616089]
[29.28221130 95.24121857]
[43.70959854 91.13627625]
[58.13698196 87.03132629]
[72.56436920 82.92638397]
[81.49388123 79.96942902]
[89.78341675 80.25981903]
[96.42928314 83.19133759]
[100.71522522 87.88090515]
[102.28092194 93.27992249]
[115.42255402 86.04821777]
[128.56417847 78.81651306]
[141.70581055 71.58481598]
[154.84744263 64.35311127]
[148.42031860 50.79471588]
[142.82354736 36.87299347]
[138.07756042 22.63874626]
[134.19969177 8.14391136]
[131.20405579 -6.55861807]
[129.10162354 -21.41519547]
[127.90003967 -36.37160873]
[127.60369873 -51.37328720]
[128.21366882 -66.36548615]
[129.72775269 -81.29351044]
[132.14039612 -96.10287476]
[135.44281006 -110.73954773]
[139.62295532 -125.15011597]
[144.66554260 -139.28201294]
[150.55221558 -153.08364868]
[157.26145935 -166.50468445]
[164.76881409 -179.49613953]
[173.04687500 -192.01060486]
[182.06542969 -204.00242615]
[191.79159546 -215.42782593]
[202.18986511 -226.24513245]
[213.22229004 -236.41487122]
[224.84863281 -245.89993286]
[237.02645874 -254.66571045]
[249.71131897 -262.68020630]
[262.85696411 -269.91418457]
[276.41537476 -276.34127808]
[290.33712769 -281.93795776]
[304.57141113 -286.68389893]
[319.06625366 -290.56170654]
[333.76879883 -293.55725098]
[348.62539673 -295.65963745]
[363.58181763 -296.86114502]
[378.58349609 -297.15740967]
[393.57568359 -296.54736328]
[408.50369263 -295.03320312]
[423.31304932 -292.62051392]
[437.94970703 -289.31802368]
[452.36026001 -285.13781738]
[466.49212646 -280.09515381]
[480.29373169 -274.20843506]
[493.71475220 -267.49911499]
[506.70614624 -259.99169922]
[519.22058105 -251.71357727]
[531.21234131 -242.69496155]
[542.63769531 -232.96875000]
[553.45495605 -222.57043457]
[563.62469482 -211.53794861]
[573.10968018 -199.91157532]
[581.87542725 -187.73370361]
[589.88983154 -175.04879761]
[597.12377930 -161.90313721]
[603.55078125 -148.34468079]
[609.14739990 -134.42291260]
[613.89324951 -120.18861389]
[617.77099609 -105.69374847]
[620.76647949 -90.99118805]
[622.86877441 -76.13459015]
[624.07025146 -61.17816544]
[624.36645508 -46.17648315]
[623.75634766 -31.18428993]
[622.24212646 -16.25628662]
[619.82934570 -1.44694352]
[616.52679443 13.18969917]
[612.34649658 27.60023308]
[607.30377197 41.73207855]
[601.41699219 55.53366852]
[594.70764160 68.95463562]
[587.20013428 81.94602203]
[578.92193604 94.46041107]
[569.90325928 106.45214081]
[560.17700195 117.87745667]
[549.77862549 128.69467163]
[538.74615479 138.86430359]
[527.11968994 148.34925842]
[514.94177246 157.11492920]
[502.25686646 165.12930298]
[489.11114502 172.36317444]
[475.55267334 178.79011536]
[461.63085938 184.38668823]
[447.39654541 189.13247681]
[432.90167236 193.01014709]
[418.19909668 196.00556946]
[403.34249878 198.10780334]
[388.38604736 199.30917358]
[373.38436890 199.60531616]
[358.39218140 198.99511719]
[343.46420288 197.48083496]
[328.65484619 195.06799316]
[314.01821899 191.76536560]
[299.60772705 187.58503723]
[285.47589111 182.54223633]
[271.67434692 176.65538025]
[258.25338745 169.94595337]
[245.26203918 162.43841553]
[232.74769592 154.16018677]
[220.75599670 145.14144897]
[209.33073425 135.41513062]
[198.51356506 125.01670837]
[188.34397888 113.98413849]
[178.85908508 102.35766602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
