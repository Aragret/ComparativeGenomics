%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGxxxxxxxxxxUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.16720581 340.24057007]
[117.16720581 325.24057007]
[117.16720581 310.24057007]
[117.16720581 295.24057007]
[117.16720581 280.24057007]
[117.16720581 265.24057007]
[117.16720581 250.24055481]
[117.16720581 235.24055481]
[117.16720581 220.24055481]
[117.16720581 205.24055481]
[115.29959106 190.35726929]
[111.59342957 175.82234192]
[107.88727570 161.28739929]
[91.88511658 161.25767517]
[76.42716980 157.11984253]
[62.55008316 149.15138245]
[51.18449783 137.88668823]
[43.09261703 124.08120728]
[38.81711197 108.66077423]
[38.64470673 92.65951538]
[42.58696365 77.15053558]
[50.37950134 63.17390823]
[61.49973679 51.66694260]
[75.20190430 43.40132904]
[70.89432526 29.03314590]
[66.58673859 14.66496181]
[62.19773865 29.00848579]
[52.73649216 40.64828110]
[39.59224319 47.87522125]
[24.69501877 49.62814331]
[10.23225307 45.64965057]
[-1.67241871 36.52392960]
[-9.27097607 23.59095001]
[-11.44768715 8.74972630]
[-7.88293505 -5.82053566]
[0.89985114 -17.98041534]
[13.61105251 -25.94441795]
[28.38422394 -28.54315376]
[43.05014801 -25.39503479]
[55.45536041 -16.96231651]
[63.77808380 -4.48382854]
[63.77808380 -19.48382759]
[63.77808380 -34.48382950]
[63.77808380 -49.48382950]
[63.77808380 -64.48382568]
[48.67382050 -68.47445679]
[35.11946106 -76.22016907]
[24.02930832 -87.19187164]
[16.14974022 -100.64310455]
[12.00898075 -115.66079712]
[11.88168430 -131.22724915]
[15.77073288 -146.28912354]
[23.40742493 -159.82870483]
[34.27003479 -170.93264771]
[47.61944962 -178.85362244]
[62.54945755 -183.06059265]
[62.23740387 -198.05734253]
[61.92534637 -213.05409241]
[61.61328888 -228.05085754]
[61.30123520 -243.04760742]
[46.49587631 -245.76536560]
[32.54079437 -251.40811157]
[20.00744057 -259.74478149]
[9.40904903 -270.43395996]
[1.17961836 -283.03799438]
[-4.34386301 -297.04071045]
[-6.93521166 -311.86871338]
[-6.48831367 -326.91482544]
[-3.02146864 -341.56289673]
[3.32335758 -355.21310425]
[12.28634930 -367.30645752]
[23.50047684 -377.34777832]
[36.50652695 -384.92587280]
[50.77191544 -389.73043823]
[65.71247864 -391.56466675]
[80.71640778 -390.35351562]
[95.16931152 -386.14654541]
[108.47933960 -379.11605835]
[120.10146332 -369.54989624]
[129.55976868 -357.83984375]
[136.46691895 -344.46539307]
[140.54011536 -329.97421265]
[141.61251831 -314.95974731]
[139.64022827 -300.03677368]
[134.70402527 -285.81640625]
[127.00602722 -272.88095093]
[116.86145782 -261.76013184]
[104.68575287 -252.90931702]
[90.97747803 -246.69094849]
[76.29798889 -243.35966492]
[76.61004639 -228.36291504]
[76.92210388 -213.36614990]
[77.23415375 -198.36940002]
[77.54621124 -183.37265015]
[91.61595154 -180.16799927]
[104.51234436 -173.67308044]
[115.47811127 -164.26422119]
[123.86808014 -152.48895264]
[129.18721008 -139.03422546]
[131.11978149 -124.68632507]
[129.54808044 -110.28488159]
[124.55962372 -96.67379761]
[116.44228363 -84.65173340]
[105.66766357 -74.92528534]
[92.86370087 -68.06743622]
[78.77808380 -64.48382568]
[78.77808380 -49.48382950]
[78.77808380 -34.48382950]
[78.77808380 -19.48382759]
[78.77808380 -4.48382854]
[80.95492554 10.35737705]
[85.26250458 24.72556114]
[89.57009125 39.09374619]
[103.49206543 38.30591202]
[117.23621368 40.65972900]
[130.10264587 46.03532791]
[141.43615723 54.15897369]
[150.65962219 64.61698151]
[157.30332947 76.87679291]
[161.02899170 90.31410980]
[161.64688110 104.24466705]
[159.12551880 117.95906830]
[153.59330750 130.75894165]
[145.33197021 141.99247742]
[134.76219177 151.08763123]
[122.42221069 157.58123779]
[126.12837219 172.11618042]
[129.83453369 186.65110779]
[135.28833008 172.67770386]
[146.18252563 162.36671448]
[160.43455505 157.68916321]
[175.32003784 159.53923035]
[187.99342346 167.56326294]
[196.03211975 180.22737122]
[197.89939880 195.11068726]
[193.23835754 209.36813354]
[182.93997192 220.27423096]
[168.97288513 225.74420166]
[154.00704956 224.73239136]
[140.90332031 217.43222046]
[132.16720581 205.24055481]
[132.16720581 220.24055481]
[132.16720581 235.24055481]
[132.16720581 250.24055481]
[132.16720581 265.24057007]
[132.16720581 280.24057007]
[132.16720581 295.24057007]
[132.16720581 310.24057007]
[132.16720581 325.24057007]
[132.16720581 340.24057007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[24 113]
[25 112]
[26 111]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
