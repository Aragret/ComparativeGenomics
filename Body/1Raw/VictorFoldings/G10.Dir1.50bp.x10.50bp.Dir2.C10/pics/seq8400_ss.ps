%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUxxxxxxxxxxUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.30715179 444.39700317]
[81.30715179 429.39700317]
[81.30715179 414.39700317]
[81.30715179 399.39700317]
[81.30715179 384.39700317]
[81.30715179 369.39700317]
[81.30715179 354.39700317]
[81.30715179 339.39700317]
[81.30715179 324.39700317]
[81.30715179 309.39700317]
[68.10025787 306.90103149]
[55.54050827 302.10430908]
[44.02540970 295.15713501]
[33.91968918 286.27798462]
[25.54370689 275.74649048]
[19.16332245 263.89471436]
[14.98143387 251.09666443]
[13.13154697 237.75646973]
[13.67350101 224.29563904]
[16.59153557 211.13975525]
[21.79475403 198.70498657]
[29.11993980 187.38496399]
[38.33668900 177.53823853]
[49.15464783 169.47706604]
[61.23266602 163.45733643]
[74.18955994 159.67059326]
[87.61611938 158.23785400]
[88.86299896 143.28976440]
[90.10987091 128.34167480]
[91.35674286 113.39359283]
[88.56442261 98.65578461]
[81.93592072 85.19982147]
[75.30742645 71.74385071]
[61.25531006 77.02635956]
[46.75308228 80.90606689]
[31.94040298 83.34561157]
[16.95993233 84.32148743]
[1.95594716 83.82430267]
[-12.92705536 81.85884857]
[-27.54574013 78.44404602]
[-41.75931549 73.61279297]
[-55.43089676 67.41161346]
[-68.42881775 59.90022278]
[-80.62789154 51.15097046]
[-91.91062927 41.24811554]
[-102.16838074 30.28703117]
[-111.30234528 18.37328148]
[-119.22456360 5.62160301]
[-125.85872650 -7.84519291]
[-131.14096069 -21.89741135]
[-135.02037048 -36.39971924]
[-137.45962524 -51.21244431]
[-138.43519592 -66.19293213]
[-137.93771362 -81.19691467]
[-135.97195435 -96.07987213]
[-132.55686951 -110.69849396]
[-127.72532654 -124.91197205]
[-121.52387238 -138.58343506]
[-114.01222229 -151.58119202]
[-105.26272583 -163.78009033]
[-95.35964966 -175.06263733]
[-84.39836121 -185.32015991]
[-72.48442841 -194.45388794]
[-59.73258972 -202.37585449]
[-46.26565933 -209.00975037]
[-32.21333694 -214.29170227]
[-17.71095276 -218.17082214]
[-2.89817619 -220.60977173]
[12.08233166 -221.58505249]
[27.08629799 -221.08726501]
[41.96922302 -219.12121582]
[56.58777237 -215.70584106]
[70.80115509 -210.87400818]
[84.47248840 -204.67228699]
[97.47010040 -197.16036987]
[109.66882324 -188.41062927]
[120.95117188 -178.50732422]
[131.20848083 -167.54583740]
[140.34197998 -155.63171387]
[148.26367188 -142.87973022]
[154.89730835 -129.41265869]
[160.17897034 -115.36023712]
[164.05781555 -100.85777283]
[166.49645996 -86.04494476]
[167.47143555 -71.06441498]
[166.97335815 -56.06046295]
[165.00700378 -41.17757797]
[161.59133911 -26.55909729]
[156.75923157 -12.34581089]
[150.55722046 1.32539809]
[143.04505920 14.32286453]
[134.29507446 26.52141190]
[124.39154053 37.80355835]
[113.42984009 48.06064987]
[101.51554108 57.19390488]
[88.76338959 65.11535645]
[95.39188385 78.57131958]
[102.02038574 92.02728271]
[106.31743622 87.31244659]
[112.58647919 84.30047607]
[120.25186157 83.58235168]
[135.15376282 81.86965942]
[150.05566406 80.15696716]
[164.93894958 78.28936005]
[179.80198669 76.26702118]
[194.66503906 74.24468994]
[209.52809143 72.22235107]
[220.34466553 60.37409210]
[236.34178162 61.58728409]
[245.24781799 74.93126678]
[240.23083496 90.16968536]
[225.13941956 95.61293030]
[211.55041504 87.08540344]
[196.68737793 89.10773468]
[181.82432556 91.13006592]
[166.96127319 93.15240479]
[160.71717834 97.19675446]
[151.76835632 95.05886841]
[136.86645508 96.77156067]
[121.96455383 98.48425293]
[135.57150269 104.79701996]
[138.30578613 119.54570007]
[127.86599731 130.31654358]
[113.03916931 128.04385376]
[106.30483246 114.64046478]
[105.05796051 129.58854675]
[103.81108093 144.53663635]
[102.56420898 159.48472595]
[118.52366638 164.31384277]
[133.03909302 172.50640869]
[145.41206360 183.66510010]
[155.04794312 197.24993896]
[161.48442078 212.60444641]
[164.41374207 228.98735046]
[163.69738770 245.60836792]
[159.37261963 261.66638184]
[151.65055847 276.38793945]
[140.90591431 289.06466675]
[127.65873718 299.08715820]
[112.54930878 305.97445679]
[96.30715179 309.39700317]
[96.30715179 324.39700317]
[96.30715179 339.39700317]
[96.30715179 354.39700317]
[96.30715179 369.39700317]
[96.30715179 384.39700317]
[96.30715179 399.39700317]
[96.30715179 414.39700317]
[96.30715179 429.39700317]
[96.30715179 444.39700317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 128]
[28 127]
[29 126]
[30 125]
[31 98]
[32 97]
[33 96]
[101 120]
[102 119]
[103 118]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
