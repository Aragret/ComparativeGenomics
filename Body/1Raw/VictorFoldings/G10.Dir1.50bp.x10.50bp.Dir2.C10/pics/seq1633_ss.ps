%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUxxxxxxxxxxUACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.11322021 286.91647339]
[118.11322021 271.91647339]
[118.11322021 256.91647339]
[118.11322021 241.91647339]
[118.11322021 226.91647339]
[118.11322021 211.91647339]
[118.11322021 196.91647339]
[118.11322021 181.91647339]
[118.11322021 166.91647339]
[118.11322021 151.91647339]
[104.39255524 145.85319519]
[90.67311096 139.79045105]
[79.58179474 149.88909912]
[68.49048615 159.98774719]
[57.39916611 170.08639526]
[46.30785370 180.18504333]
[35.21653748 190.28370667]
[33.03253174 206.17739868]
[19.17152405 214.25526428]
[4.26649237 208.32066345]
[-0.24869923 192.92610168]
[9.08961868 179.88096619]
[25.11788750 179.19238281]
[36.20920181 169.09373474]
[47.30051804 158.99508667]
[58.39183426 148.89643860]
[69.48314667 138.79779053]
[80.57446289 128.69914246]
[79.02530670 121.36087036]
[64.76580048 116.70613098]
[75.92697906 106.68434906]
[74.37782288 99.34608459]
[60.15104294 94.59226990]
[45.92426300 89.83845520]
[40.68410873 90.91566467]
[36.03821564 89.93176270]
[32.68332291 87.47282410]
[30.97460175 84.31881714]
[17.07204437 78.68685913]
[3.16948938 73.05490112]
[-10.73306656 67.42295074]
[-24.63562202 61.79098892]
[-38.53817749 56.15903473]
[-52.26640701 63.64700317]
[-67.58572388 60.50812531]
[-77.26281738 48.22447968]
[-76.72845459 32.59603119]
[-66.23494720 21.00205040]
[-50.73701096 18.91686630]
[-37.55229568 27.32503510]
[-32.90622330 42.25647736]
[-19.00366592 47.88843536]
[-5.10110998 53.52038956]
[8.80144596 59.15234756]
[22.70400238 64.78430176]
[36.60655975 70.41625977]
[50.67807770 75.61167908]
[64.90485382 80.36549377]
[79.13163757 85.11930847]
[91.57107544 76.73715973]
[92.50670624 61.76637268]
[93.44232941 46.79558182]
[94.37796021 31.82478905]
[95.31359100 16.85399628]
[96.24922180 1.88320553]
[97.18484497 -13.08758640]
[82.92659760 -18.04792023]
[70.53602600 -26.67208672]
[60.93258667 -38.32011795]
[54.82892990 -52.12764740]
[52.67797852 -67.07006836]
[54.63935089 -82.03855896]
[60.56750107 -95.92234802]
[70.02252197 -107.69116974]
[82.30278015 -116.47170258]
[96.49700928 -121.61236572]
[111.55190277 -122.73169708]
[126.35027313 -119.74663544]
[139.79400635 -112.87867737]
[150.88546753 -102.63748169]
[158.80160522 -89.78302002]
[162.95498657 -75.26916504]
[163.03741455 -60.17294693]
[159.04275513 -45.61460495]
[151.26744080 -32.67446518]
[140.28846741 -22.31277275]
[126.92053986 -15.29843330]
[112.15563965 -12.15195751]
[111.22000885 2.81883407]
[110.28437805 17.78962517]
[109.34875488 32.76041794]
[108.41312408 47.73120880]
[107.47749329 62.70199966]
[106.54187012 77.67279053]
[117.31267548 88.11260223]
[132.24697876 86.71030426]
[147.18128967 85.30799866]
[155.49554443 81.36779785]
[162.44036865 84.03517914]
[149.50103760 76.44745636]
[140.67478943 64.31908417]
[137.43406677 49.67334366]
[140.31947327 34.95347595]
[148.84967041 22.61508942]
[161.60160828 14.71649933]
[176.44801331 12.57536888]
[190.91215515 16.54888725]
[202.58106995 25.97418022]
[209.50814819 39.27890015]
[210.53779602 54.24351883]
[205.49822998 68.37160492]
[195.23017883 79.30627441]
[181.44795227 85.22309875]
[196.15591431 88.16857910]
[210.86387634 91.11405945]
[224.95832825 83.45075989]
[239.68081665 89.82472992]
[243.73753357 105.34640503]
[234.01651001 118.10889435]
[217.97486877 118.32189941]
[207.91839600 105.82202148]
[193.21043396 102.87654114]
[178.50247192 99.93106079]
[163.53167725 98.99542999]
[148.58358765 100.24230194]
[133.64929199 101.64460754]
[118.71498108 103.04691315]
[132.49336243 108.97616577]
[146.27175903 114.90541077]
[160.05014038 120.83466339]
[174.85025024 123.27536774]
[187.33764648 131.58589172]
[195.30325317 144.29608154]
[197.33795166 159.15745544]
[193.08175659 173.54093933]
[183.28762817 184.90205383]
[169.68818665 191.23097229]
[154.68737793 191.40769958]
[147.49598694 178.24395752]
[140.30461121 165.08021545]
[133.11322021 151.91647339]
[133.11322021 166.91647339]
[133.11322021 181.91647339]
[133.11322021 196.91647339]
[133.11322021 211.91647339]
[133.11322021 226.91647339]
[133.11322021 241.91647339]
[133.11322021 256.91647339]
[133.11322021 271.91647339]
[133.11322021 286.91647339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[32 59]
[33 58]
[34 57]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[95 127]
[96 126]
[97 125]
[99 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
