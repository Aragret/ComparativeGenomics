%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCxxxxxxxxxxUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.33306122 263.79595947]
[82.33306122 248.79595947]
[82.33306122 233.79595947]
[82.33306122 218.79595947]
[82.33306122 203.79595947]
[82.33306122 188.79595947]
[82.33306122 173.79595947]
[82.33306122 158.79595947]
[82.33306122 143.79595947]
[82.33306122 128.79595947]
[68.34597778 123.37732697]
[58.24054337 134.46246338]
[48.13510895 145.54759216]
[38.02967453 156.63273621]
[27.92423820 167.71786499]
[27.22584343 183.74571228]
[14.17500401 193.07604980]
[-1.21679413 188.55143738]
[-7.14228010 173.64277649]
[0.94407237 159.78671265]
[16.83910561 157.61242676]
[26.94454002 146.52729797]
[37.04997635 135.44216919]
[47.15541077 124.35703278]
[57.26084518 113.27189636]
[73.58055878 94.03905487]
[93.07880402 93.61767578]
[84.92214203 81.02923584]
[59.17387772 76.93015289]
[47.04701614 54.33503723]
[32.39429092 51.12604141]
[17.74156761 47.91704559]
[12.65186405 49.54497910]
[7.93226194 49.06438828]
[4.33598423 46.98199081]
[2.29866457 44.03300095]
[-12.12872028 39.92805481]
[-26.55610466 35.82311249]
[-40.98348999 31.71816635]
[-55.41087341 27.61322212]
[-69.83825684 23.50827599]
[-82.68206787 32.42850494]
[-98.25003052 30.95448303]
[-109.19141388 19.78219414]
[-110.34004974 4.18685341]
[-101.15357208 -8.46789646]
[-85.96956635 -12.20686913]
[-71.95744324 -5.26463699]
[-65.73331451 9.08089161]
[-51.30593109 13.18583679]
[-36.87854385 17.29078102]
[-22.45116043 21.39572716]
[-8.02377510 25.50067139]
[6.40360928 29.60561562]
[20.95056343 33.26432037]
[35.60328674 36.47331619]
[50.25601196 39.68231583]
[54.40709305 33.71611023]
[59.92661285 28.98727417]
[66.45894623 25.80048943]
[65.53553772 10.82893848]
[64.61212158 -4.14261150]
[63.68870926 -19.11416054]
[48.87607956 -21.94909477]
[35.23418808 -28.37946129]
[23.62057304 -38.00103760]
[14.76527691 -50.20901108]
[9.22495079 -64.23596954]
[7.34786510 -79.20017242]
[9.25201416 -94.16095734]
[14.81770134 -108.17787170]
[23.69506454 -120.36980438]
[35.32606125 -129.97036743]
[48.97956467 -136.37603760]
[63.79729462 -139.18417358]
[78.84780121 -138.21824646]
[93.18499756 -133.53898621]
[105.90763855 -125.44050598]
[116.21595764 -114.43190002]
[123.46197510 -101.20518494]
[127.19020081 -86.59179688]
[127.16626740 -71.51033783]
[123.39168549 -56.90885544]
[116.10372162 -43.70520401]
[105.76051331 -32.72937393]
[93.01223755 -24.67131996]
[78.66025543 -20.03757477]
[79.58367157 -5.06602478]
[80.50708771 9.90552521]
[81.43049622 24.87707520]
[89.55155945 27.73221588]
[96.49379730 32.89195633]
[101.61797333 39.91177368]
[104.44326019 48.17456055]
[104.69226074 56.94486237]
[102.31803894 65.43433380]
[97.51058197 72.87257385]
[105.66724396 85.46101379]
[118.80887604 92.69271851]
[133.80809021 92.84671021]
[148.80729675 93.00070953]
[162.32727051 75.45718384]
[188.10556030 76.60778046]
[202.25288391 71.62245941]
[212.50575256 58.82360840]
[228.67320251 61.57056046]
[234.12353516 77.03749084]
[223.24992371 89.31334686]
[207.23820496 85.76977539]
[193.09089661 90.75509644]
[194.62818909 105.67611694]
[209.49478149 107.67217255]
[224.36137390 109.66822815]
[239.22798157 111.66428375]
[254.09457397 113.66033936]
[267.66848755 105.10880280]
[282.76950073 110.52536011]
[287.81341553 125.75488281]
[278.93096924 139.11459351]
[262.93603516 140.35606384]
[252.09852600 128.52694702]
[237.23191833 126.53088379]
[222.36532593 124.53482819]
[207.49871826 122.53877258]
[192.63212585 120.54271698]
[178.94456482 127.46743011]
[164.68878174 126.53572845]
[153.76911926 119.05842590]
[148.65330505 107.99991608]
[133.65408325 107.84592438]
[118.65487671 107.69192505]
[113.32442474 112.96793365]
[126.41363525 120.29408264]
[141.37693787 121.34282684]
[152.60792542 131.28590393]
[155.46252441 146.01176453]
[148.76033020 159.43118286]
[135.27275085 165.99510193]
[120.57699585 162.98931885]
[110.74987030 151.65672302]
[109.85489655 136.68368530]
[102.66351318 123.51995087]
[97.33306122 128.79595947]
[97.33306122 143.79595947]
[97.33306122 158.79595947]
[97.33306122 173.79595947]
[97.33306122 188.79595947]
[97.33306122 203.79595947]
[97.33306122 218.79595947]
[97.33306122 233.79595947]
[97.33306122 248.79595947]
[97.33306122 263.79595947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[27 98]
[28 97]
[30 57]
[31 56]
[32 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[60 90]
[61 89]
[62 88]
[63 87]
[99 131]
[100 130]
[101 129]
[103 110]
[104 109]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
