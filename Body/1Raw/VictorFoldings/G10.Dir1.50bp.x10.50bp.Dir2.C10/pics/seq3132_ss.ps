%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAxxxxxxxxxxAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 403.16516113]
[92.50000000 388.16516113]
[92.50000000 373.16516113]
[92.50000000 358.16516113]
[92.50000000 343.16516113]
[92.50000000 328.16516113]
[92.50000000 313.16516113]
[92.50000000 298.16516113]
[92.50000000 283.16516113]
[92.50000000 268.16516113]
[77.80443573 265.26437378]
[63.95278549 259.55038452]
[51.47812653 251.24107361]
[40.86095047 240.65423584]
[32.51063156 228.19543457]
[26.74966240 214.34245300]
[23.80118752 199.62701416]
[23.78036499 184.61430359]
[26.68986511 169.88131714]
[32.41970444 155.99465942]
[40.75139618 143.48876953]
[51.36627960 132.84532166]
[63.85771179 124.47470856]
[77.74665070 118.70020294]
[92.50000000 115.74546814]
[81.31559753 107.88301849]
[78.11270905 92.55742645]
[63.11347580 92.40541840]
[49.23560333 100.00247192]
[36.58739471 92.13658905]
[21.58816528 91.98458099]
[6.58893490 91.83257294]
[-8.41029453 91.68055725]
[-15.60385799 105.19023132]
[-28.25822639 113.79985046]
[-43.46551895 115.53099060]
[-57.73120880 109.98584747]
[-67.77715302 98.43865204]
[-71.29485321 83.54286957]
[-67.47598267 68.72144318]
[-57.19807816 57.38021851]
[-42.82293320 52.12533569]
[-27.65384865 54.16432571]
[-15.17657089 63.02864075]
[-8.25828457 76.68132782]
[6.74094486 76.83334351]
[21.74017525 76.98535156]
[36.73940277 77.13735962]
[49.54443359 69.52943420]
[63.26548767 77.40618896]
[78.26471710 77.55819702]
[91.22969055 70.01435852]
[98.50921631 56.89916229]
[105.78874969 43.78396225]
[112.93498993 30.59566498]
[119.94721985 17.33562660]
[115.52094269 2.40090799]
[122.82123566 -10.94676590]
[137.08648682 -15.07450867]
[144.09870911 -28.33454704]
[151.11094666 -41.59458542]
[157.71685791 -55.06165314]
[163.91033936 -68.72330475]
[170.10383606 -82.38495636]
[176.29731750 -96.04660797]
[170.12580872 -108.05807495]
[171.99075317 -121.23599243]
[180.98556519 -130.77944946]
[193.64799500 -133.34295654]
[200.11709595 -146.87628174]
[206.58619690 -160.40959167]
[213.05529785 -173.94291687]
[200.90350342 -182.81132507]
[190.58836365 -193.76179504]
[182.46121216 -206.42132568]
[176.79882812 -220.35876465]
[173.79409790 -235.09939575]
[173.54934692 -250.14115906]
[176.07292175 -264.97174072]
[181.27885437 -279.08602905]
[188.98985291 -292.00326538]
[198.94326782 -303.28353882]
[210.80009460 -312.54260254]
[224.15649414 -319.46508789]
[238.55755615 -323.81527710]
[253.51278687 -325.44497681]
[268.51281738 -324.29864502]
[283.04672241 -320.41537476]
[296.61953735 -313.92739868]
[308.76892090 -305.05572510]
[319.08111572 -294.10247803]
[327.20486450 -281.44076538]
[332.86346436 -267.50180054]
[335.86422729 -252.76036072]
[336.10491943 -237.71852112]
[333.57736206 -222.88862610]
[328.36761475 -208.77574158]
[320.65313721 -195.86058044]
[310.69668579 -184.58300781]
[298.83737183 -175.32714844]
[285.47909546 -168.40823364]
[271.07687378 -164.06193542]
[256.12118530 -162.43627930]
[241.12149048 -163.58662415]
[226.58860779 -167.47381592]
[220.11952209 -153.94050598]
[213.65042114 -140.40718079]
[207.18132019 -126.87386322]
[213.46064758 -111.30089569]
[206.42149353 -95.68589783]
[189.95896912 -89.85311890]
[183.76548767 -76.19146729]
[177.57199097 -62.52981567]
[171.37850952 -48.86816406]
[172.30978394 -45.40981293]
[171.57505798 -41.32342148]
[168.89562988 -37.41435623]
[164.37098694 -34.58235931]
[157.35874939 -21.32231903]
[150.34652710 -8.06227875]
[154.96511841 6.05169344]
[148.04260254 19.59915161]
[133.20726013 24.34785461]
[126.19503021 37.60789490]
[125.84622955 45.03473663]
[118.90394592 51.06349182]
[111.62442017 64.17868805]
[104.34488678 77.29389191]
[120.11405945 97.41673279]
[107.50000000 115.74546814]
[122.25334930 118.70020294]
[136.14228821 124.47470856]
[148.63372803 132.84532166]
[159.24861145 143.48876953]
[167.58029175 155.99465942]
[173.31013489 169.88131714]
[176.21963501 184.61430359]
[176.19880676 199.62701416]
[173.25033569 214.34245300]
[167.48936462 228.19543457]
[159.13905334 240.65423584]
[148.52186584 251.24107361]
[136.04721069 259.55038452]
[122.19556427 265.26437378]
[107.50000000 268.16516113]
[107.50000000 283.16516113]
[107.50000000 298.16516113]
[107.50000000 313.16516113]
[107.50000000 328.16516113]
[107.50000000 343.16516113]
[107.50000000 358.16516113]
[107.50000000 373.16516113]
[107.50000000 388.16516113]
[107.50000000 403.16516113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 130]
[27 51]
[28 50]
[30 48]
[31 47]
[32 46]
[33 45]
[52 128]
[53 127]
[54 126]
[55 124]
[56 123]
[59 120]
[60 119]
[61 118]
[62 114]
[63 113]
[64 112]
[65 111]
[69 108]
[70 107]
[71 106]
[72 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
