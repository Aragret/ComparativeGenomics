%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCxxxxxxxxxxAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.64868164 304.90481567]
[133.64868164 289.90481567]
[133.64868164 274.90481567]
[133.64868164 259.90481567]
[133.64868164 244.90483093]
[133.64868164 229.90483093]
[133.64868164 214.90483093]
[133.64868164 199.90483093]
[133.64868164 184.90483093]
[133.64868164 169.90483093]
[129.19186401 155.58222961]
[120.68077087 143.23065186]
[112.16967773 130.87908936]
[94.16095734 132.67298889]
[77.88829803 124.75260925]
[65.62592316 133.39172363]
[53.36355972 142.03083801]
[41.10118866 150.66995239]
[28.83882141 159.30906677]
[16.57645416 167.94818115]
[4.31408596 176.58731079]
[-5.15193033 190.65254211]
[-21.28794670 185.45010376]
[-20.75571632 168.50451660]
[-4.32503033 164.32493591]
[7.93733788 155.68582153]
[20.19970703 147.04670715]
[32.46207428 138.40759277]
[44.72444153 129.76847839]
[56.98680878 121.12935638]
[69.24917603 112.49024200]
[67.24737549 105.37443542]
[66.87014771 97.99204254]
[68.13620758 90.70925903]
[70.98276520 83.88729858]
[75.26861572 77.86456299]
[80.78118134 72.93976593]
[87.24703217 69.35720825]
[84.76190948 54.56449890]
[82.27679443 39.77179337]
[79.28790283 36.42096329]
[77.72016907 32.66420364]
[77.52294922 29.01139832]
[78.48107147 25.90077400]
[80.25379944 23.65026855]
[79.00692749 8.70218086]
[77.76004791 -6.24590588]
[76.51317596 -21.19399261]
[75.26629639 -36.14207840]
[74.01942444 -51.09016800]
[72.77255249 -66.03825378]
[58.53914642 -68.73487091]
[45.50502777 -75.02940369]
[34.56150436 -84.48439789]
[26.45510864 -96.44652557]
[21.73666763 -110.09171295]
[20.72386551 -124.48193359]
[23.47988129 -138.62963867]
[29.80946922 -151.56561279]
[39.27278900 -162.40530396]
[51.21595764 -170.40930176]
[64.81623840 -175.03384399]
[63.88060760 -190.00463867]
[62.94497681 -204.97543335]
[48.24711609 -208.50590515]
[35.24371338 -216.21324158]
[25.09102631 -227.41209412]
[18.69182205 -241.10667419]
[16.61511421 -256.07928467]
[19.04556274 -270.99853516]
[25.76705170 -284.53784180]
[36.18191528 -295.49331665]
[49.36406708 -302.89074707]
[64.14135742 -306.07241821]
[79.19980621 -304.75540161]
[93.20042419 -299.05679321]
[104.89827728 -289.48330688]
[113.25321198 -276.88623047]
[117.52230835 -262.38565063]
[117.32596588 -247.27101135]
[112.68163300 -232.88623047]
[104.00228882 -220.51043701]
[92.05969238 -211.24406433]
[77.91577148 -205.91105652]
[78.85139465 -190.94026184]
[79.78702545 -175.96948242]
[94.99887085 -172.66438293]
[108.68233490 -165.21199036]
[119.73139954 -154.20539856]
[127.25038147 -140.52534485]
[130.62655640 -125.26973724]
[129.58001709 -109.66558075]
[124.18696594 -94.97023010]
[114.87410736 -82.37011719]
[102.38500214 -72.88492584]
[87.72063446 -67.28512573]
[88.96751404 -52.33703995]
[90.21438599 -37.38895416]
[91.46125793 -22.44086647]
[92.70813751 -7.49278021]
[93.95500946 7.45530653]
[95.20188904 22.40339279]
[97.06949615 37.28667450]
[99.55461884 52.07938004]
[102.03973389 66.87208557]
[119.38465881 73.05831909]
[130.76232910 87.53811646]
[132.67030334 105.85410309]
[124.52125549 122.36799622]
[133.03234863 134.71957397]
[141.54342651 147.07113647]
[140.89350891 132.08522034]
[143.21670532 117.26622772]
[148.42143250 103.19815063]
[156.30259705 90.43541718]
[166.54959106 79.48101044]
[178.75859070 70.76662445]
[192.44842529 64.63571167]
[207.07960510 61.32987595]
[222.07551575 60.97940445]
[236.84515381 63.59811020]
[250.80647278 69.08278656]
[263.40924072 77.21728516]
[274.15679932 87.68103027]
[282.62561035 100.06164551]
[288.48187256 113.87120819]
[291.49481201 128.56550598]
[291.54568481 143.56541443]
[288.63250732 158.27981567]
[282.87008667 172.12879944]
[274.48550415 184.56658936]
[263.80917358 195.10301208]
[251.26187134 203.32283020]
[237.33810425 208.90209961]
[222.58656311 211.62095642]
[207.58862305 211.37223816]
[192.93534851 208.16574097]
[179.20422363 202.12785339]
[166.93638611 193.49650574]
[156.61529541 182.61187744]
[148.64868164 169.90483093]
[148.64868164 184.90483093]
[148.64868164 199.90483093]
[148.64868164 214.90483093]
[148.64868164 229.90483093]
[148.64868164 244.90483093]
[148.64868164 259.90481567]
[148.64868164 274.90481567]
[148.64868164 289.90481567]
[148.64868164 304.90481567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[13 109]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[38 105]
[39 104]
[40 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[50 97]
[51 96]
[62 86]
[63 85]
[64 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
