%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGxxxxxxxxxxGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.72822571 299.58532715]
[100.72822571 284.58532715]
[100.72822571 269.58532715]
[100.72822571 254.58534241]
[100.72822571 239.58534241]
[100.72822571 224.58534241]
[100.72822571 209.58534241]
[100.72822571 194.58534241]
[100.72822571 179.58534241]
[100.72822571 164.58534241]
[88.03330231 156.59541321]
[74.50910950 163.08358765]
[60.98492050 169.57174683]
[47.46072769 176.05992126]
[50.67733383 190.78234863]
[50.41140747 205.84973145]
[46.67728043 220.44949341]
[39.67634201 233.79429626]
[29.78613472 245.16444397]
[17.54002762 253.94679260]
[3.59843946 259.66769409]
[-11.28677940 262.01867676]
[-26.31288528 260.87289429]
[-40.66954422 256.29214478]
[-53.58251190 248.52349854]
[-64.35541534 237.98588562]
[-72.40728760 225.24758911]
[-77.30388641 210.99557495]
[-78.78116608 195.99842834]
[-76.75943756 181.06492615]
[-71.34774780 167.00042725]
[-62.83792877 154.56340027]
[-51.68891144 144.42454529]
[-38.50194550 137.13067627]
[-23.98819160 133.07510376]
[-8.93035507 132.47656250]
[5.85951471 135.36730957]
[19.58381653 141.59147644]
[31.50241852 150.81340027]
[40.97256470 162.53572083]
[54.49675369 156.04756165]
[68.02094269 149.55940247]
[81.54513550 143.07122803]
[67.26627350 131.18838501]
[59.17134857 115.20357513]
[58.12683487 97.97626495]
[63.78672409 82.37045288]
[74.73163605 70.77890778]
[88.77979279 64.75734711]
[87.22221375 49.83843231]
[85.66463470 34.91952133]
[84.10704803 20.00060844]
[82.54946899 5.08169699]
[80.99188995 -9.83721542]
[69.00018311 -19.77887917]
[67.63309479 -34.93096542]
[77.18485260 -46.30195999]
[65.61286163 -36.75790024]
[50.89346695 -39.64568329]
[43.78534698 -52.85456848]
[49.48396683 -66.72992706]
[63.82409668 -71.13000488]
[76.32392120 -62.83925629]
[76.32392120 -77.83925629]
[76.32392120 -92.83925629]
[76.32392120 -107.83925629]
[73.17825317 -116.48544312]
[76.48320770 -123.15049744]
[76.79525757 -138.14724731]
[77.10731506 -153.14401245]
[63.67517471 -160.48132324]
[55.20108032 -173.22683716]
[53.63231659 -188.45173645]
[59.32937241 -202.65745544]
[70.98310852 -212.57960510]
[85.91558075 -215.93815613]
[100.69541168 -211.96133423]
[111.92631531 -201.56300354]
[117.02750397 -187.13259888]
[114.82675934 -171.98612976]
[105.82980347 -159.60415649]
[92.10407257 -152.83195496]
[91.79201508 -137.83520508]
[91.47995758 -122.83844757]
[91.32392120 -107.83925629]
[91.32392120 -92.83925629]
[91.32392120 -77.83925629]
[91.32392120 -62.83925629]
[92.10376740 -47.85954285]
[103.79827881 -38.70672226]
[105.59040833 -23.59901428]
[95.91079712 -11.39479637]
[97.46838379 3.52411604]
[99.02596283 18.44302750]
[100.58354187 33.36194229]
[102.14112091 48.28085327]
[103.69870758 63.19976425]
[116.94811249 65.28510284]
[129.12091064 72.17599487]
[138.47045898 83.34223175]
[143.50250244 97.62110901]
[143.20202637 113.33409882]
[137.20751953 128.48356628]
[152.20671082 128.63960266]
[167.20588684 128.79563904]
[182.20507812 128.95167542]
[196.08499146 121.35835266]
[208.73109436 129.22763062]
[223.73028564 129.38366699]
[232.87261963 116.84582520]
[247.64878845 112.10828400]
[262.37707520 116.99271393]
[271.39410400 129.62095642]
[271.23269653 145.13719177]
[261.95489502 157.57511902]
[247.12818909 162.15208435]
[232.45376587 157.10816956]
[223.57424927 144.38285828]
[208.57505798 144.22682190]
[195.76799011 151.83129883]
[182.04904175 143.95086670]
[167.04985046 143.79483032]
[152.05067444 143.63879395]
[137.05148315 143.48275757]
[131.72067261 148.75840759]
[144.80888367 156.08633423]
[157.89710999 163.41426086]
[170.98532104 170.74218750]
[185.51811218 174.45674133]
[196.20259094 184.98489380]
[200.13090515 199.46138000]
[196.23397827 213.94631958]
[185.57234192 224.49761963]
[171.04763794 228.24366760]
[156.61280823 224.16496277]
[146.19636536 213.37155151]
[142.63319397 198.80090332]
[135.44180298 185.63716125]
[128.25042725 172.47343445]
[121.05904388 159.30969238]
[115.72822571 164.58534241]
[115.72822571 179.58534241]
[115.72822571 194.58534241]
[115.72822571 209.58534241]
[115.72822571 224.58534241]
[115.72822571 239.58534241]
[115.72822571 254.58534241]
[115.72822571 269.58532715]
[115.72822571 284.58532715]
[115.72822571 299.58532715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 43]
[12 42]
[13 41]
[14 40]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[57 89]
[63 88]
[64 87]
[65 86]
[66 85]
[68 84]
[69 83]
[70 82]
[103 124]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
