%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.85595703 93.14795685]
[152.09980774 80.61643219]
[138.85722351 87.66156769]
[125.61463165 94.70670319]
[112.37204742 101.75183868]
[101.49321747 112.07904053]
[101.01959229 127.89315796]
[87.83320618 134.81907654]
[80.10912323 147.67749023]
[72.38503265 160.53588867]
[74.85725403 176.38731384]
[63.89982605 188.10543823]
[47.91835785 186.70111084]
[39.17245865 173.25161743]
[44.37123489 158.07426453]
[59.52663422 152.81179810]
[67.25071716 139.95339966]
[74.97480011 127.09499359]
[74.89595032 112.20059967]
[88.63481903 104.35495758]
[84.50867462 98.09197998]
[76.25638580 85.56601715]
[72.13024139 79.30303192]
[57.26719284 81.32537079]
[51.72824860 85.12374115]
[45.97309875 85.45471954]
[41.74525833 83.10932159]
[26.81095314 84.51162720]
[11.87664509 85.91392517]
[3.56239867 89.85412598]
[-3.38243532 87.18674469]
[-18.34268379 88.27805328]
[-33.30293274 89.36936188]
[-44.83748245 100.51986694]
[-60.72777557 98.31121826]
[-68.78414154 84.43769836]
[-62.82641983 69.54188538]
[-47.42487335 65.05057526]
[-34.39424133 74.40911865]
[-19.43399429 73.31780243]
[-4.47374582 72.22649384]
[10.47434139 70.97962189]
[25.40864944 69.57731628]
[40.34295654 68.17501068]
[55.24485779 66.46232605]
[70.10790253 64.43998718]
[105.32691193 88.50925446]
[118.56949615 81.46411896]
[131.81208801 74.41898346]
[145.05467224 67.37384796]
[146.22021484 59.96496964]
[148.55133057 45.14721298]
[149.71687317 37.73833466]
[139.27706909 26.96752357]
[123.32295990 25.28051186]
[114.81651306 11.67830467]
[120.28315735 -3.40464592]
[135.52934265 -8.39799213]
[148.85949707 0.52873343]
[150.04786682 16.52771187]
[160.48768616 27.29852104]
[156.48968506 12.84113407]
[152.49168396 -1.61625254]
[148.49369812 -16.07363892]
[144.49569702 -30.53102493]
[134.54173279 -41.75236511]
[127.21189117 -54.83951569]
[122.84392548 -69.18946075]
[121.63909912 -84.14099121]
[123.65293121 -99.00519562]
[128.79261780 -113.09716797]
[136.82133484 -125.76758575]
[147.36915588 -136.43264771]
[159.95007324 -144.60092163]
[173.98437500 -149.89604187]
[188.82540894 -152.07403564]
[203.78935242 -151.03454590]
[218.18669128 -146.82545471]
[231.35406494 -139.64071655]
[242.68472290 -129.81137085]
[251.65661621 -117.79034424]
[257.85632324 -104.13151550]
[260.99819946 -89.46425629]
[260.93746948 -74.46437836]
[257.67691040 -59.82303619]
[251.36680603 -46.21486664]
[242.29785156 -34.26688766]
[230.88795471 -24.52962875]
[217.66877747 -17.45415306]
[208.91076660 -5.27641106]
[200.15277100 6.90133142]
[191.39477539 19.07907486]
[182.63676453 31.25681686]
[196.16096497 24.76865196]
[209.68515015 18.28048706]
[223.20933533 11.79232121]
[223.18049622 -3.47076869]
[229.78466797 -17.23113632]
[241.71057129 -26.75665092]
[256.59033203 -30.15601349]
[271.46954346 -26.75428009]
[283.39395142 -17.22686577]
[289.99591064 -3.46544576]
[289.96463013 11.79763985]
[283.30633545 25.53189468]
[271.34301758 35.01037216]
[256.44998169 38.35111237]
[241.58428955 34.89081192]
[229.69750977 25.31651115]
[216.17330933 31.80467606]
[202.64912415 38.29284286]
[189.12493896 44.78100586]
[204.10411072 45.57094955]
[218.72364807 42.21397018]
[233.67118835 40.96049118]
[248.64562988 41.83575439]
[263.34533691 44.82213593]
[277.47421265 49.85947418]
[290.74765015 56.84630203]
[302.89828491 65.64187622]
[313.68136597 76.06903076]
[322.87963867 87.91772461]
[330.30786133 100.94927979]
[335.81640625 114.90119934]
[339.29428101 129.49244690]
[340.67144775 144.42909241]
[339.92019653 159.41026306]
[337.05560303 174.13418579]
[332.13537598 188.30429077]
[325.25866699 201.63511658]
[316.56399536 213.85813904]
[306.22644043 224.72714233]
[294.45431519 234.02319336]
[281.48468018 241.55905151]
[267.57885742 247.18289185]
[253.01689148 250.78144836]
[238.09216309 252.28221130]
[223.10528564 251.65498352]
[208.35813904 248.91236877]
[194.14779663 244.10963440]
[180.76051331 237.34352112]
[168.46592712 228.75030518]
[157.51171875 218.50309753]
[148.11853027 206.80830383]
[140.47557068 193.90151978]
[134.73681641 180.04270935]
[131.01783752 165.51104736]
[129.39356995 150.59924316]
[129.89672852 135.60768127]
[132.51716614 120.83834839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 20]
[8 18]
[9 17]
[10 16]
[23 46]
[24 45]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[53 61]
[54 60]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
