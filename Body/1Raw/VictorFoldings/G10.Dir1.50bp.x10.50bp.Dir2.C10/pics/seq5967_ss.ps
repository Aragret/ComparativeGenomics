%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACxxxxxxxxxxUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.98363495 265.63729858]
[73.98363495 250.63728333]
[73.98363495 235.63728333]
[73.98363495 220.63728333]
[73.98363495 205.63728333]
[73.98363495 190.63728333]
[73.98363495 175.63728333]
[73.98363495 160.63728333]
[73.98363495 145.63728333]
[73.98363495 130.63728333]
[71.23115540 120.68163300]
[71.51618195 111.37022400]
[74.33287048 103.52052307]
[78.97582245 97.73794556]
[84.61347961 94.37177277]
[90.37007904 93.49401855]
[95.40940094 94.90270233]
[89.99077606 80.91561890]
[84.57215118 66.92853546]
[79.15352631 52.94145203]
[64.97290802 46.49568939]
[59.67690659 32.23360825]
[65.90934753 18.75428009]
[60.49071884 4.76719618]
[48.29070663 -5.30604601]
[50.90790176 -19.96890831]
[45.48927689 -33.95599365]
[40.07065201 -47.94307709]
[23.52442169 -39.19663239]
[9.75798988 -49.09318542]
[-5.23489571 -49.55511093]
[-20.22778130 -50.01703644]
[-26.80940247 -36.28378677]
[-38.41203308 -26.41977119]
[-53.02545166 -22.13398743]
[-68.11779022 -24.16897774]
[-81.07421112 -32.17216492]
[-89.64994049 -44.75695038]
[-92.35917664 -59.74293900]
[-88.73252869 -74.53372192]
[-79.39833832 -86.56671143]
[-65.97380066 -93.75711060]
[-50.78481293 -94.85913849]
[-36.46294785 -89.68186951]
[-25.48956108 -79.12229919]
[-19.76585579 -65.00992584]
[-4.77296972 -64.54799652]
[10.21991634 -64.08606720]
[21.43587303 -73.05880737]
[36.78531265 -69.10759735]
[37.70872498 -84.07914734]
[38.63213730 -99.05069733]
[39.55555344 -114.02224731]
[40.47896576 -128.99378967]
[33.60589218 -143.24411011]
[42.11201859 -155.47093201]
[43.03543091 -170.44247437]
[28.32007027 -176.16746521]
[16.10290146 -186.13972473]
[7.56760359 -199.37765503]
[3.53636456 -214.58398438]
[4.39069033 -230.27296448]
[10.03533459 -244.91545105]
[19.90875053 -257.08804321]
[33.03893280 -265.61138916]
[48.13910294 -269.66442871]
[48.75492859 -284.65176392]
[49.37075424 -299.63912964]
[49.98657990 -314.62646484]
[50.60240555 -329.61383057]
[36.79456329 -335.97088623]
[26.47418785 -347.13143921]
[21.21505737 -361.39361572]
[21.81915283 -376.58255005]
[28.19435310 -390.38201904]
[39.36848450 -400.68771362]
[53.63758087 -405.92807007]
[68.82569885 -405.30398560]
[82.61676788 -398.91064453]
[92.90774536 -387.72296143]
[98.12933350 -373.44699097]
[97.48528290 -358.25970459]
[91.07379913 -344.47705078]
[79.87258911 -334.20080566]
[65.58975983 -328.99801636]
[64.97393036 -314.01065063]
[64.35810852 -299.02328491]
[63.74228287 -284.03594971]
[63.12645721 -269.04858398]
[76.63683319 -264.40902710]
[88.30010223 -256.13375854]
[97.16157532 -244.88911438]
[102.49281311 -231.58486938]
[103.85145569 -217.30073547]
[101.11793518 -203.19866943]
[94.50592804 -190.42839050]
[84.54570770 -180.03359985]
[72.04158020 -172.86674500]
[58.00698090 -169.51905823]
[57.08356857 -154.54751587]
[64.02268982 -141.36807251]
[55.45051575 -128.07038879]
[54.52710342 -113.09883118]
[53.60368729 -98.12728119]
[52.68027496 -83.15573120]
[51.75686264 -68.18418121]
[54.05773544 -53.36170197]
[59.47636032 -39.37461853]
[64.89498901 -25.38753319]
[76.70742798 -16.31474113]
[74.47780609 -0.65142900]
[79.89643097 13.33565426]
[93.58322144 19.09823036]
[99.27773285 33.20593262]
[93.14060974 47.52282715]
[98.55923462 61.50991058]
[103.97785950 75.49699402]
[109.39648438 89.48407745]
[119.83849335 100.25275421]
[133.65208435 106.09954834]
[146.87461853 97.97895050]
[162.34239197 99.21482849]
[174.10774231 109.33196259]
[177.64663696 124.44010162]
[171.59829712 138.72985840]
[158.28843689 146.70654297]
[142.83497620 145.30293274]
[131.18008423 135.05876160]
[127.80529022 119.91312408]
[113.99170685 114.06633759]
[107.73968506 118.20907593]
[117.05915070 129.96270752]
[126.37860870 141.71632385]
[135.69807434 153.46994019]
[147.60185242 162.59681702]
[147.08474731 177.58790588]
[134.58033752 185.87281799]
[120.57388306 180.50447083]
[116.80979919 165.98576355]
[109.61841583 152.82202148]
[102.42703247 139.65829468]
[95.23564911 126.49455261]
[88.98363495 130.63728333]
[88.98363495 145.63728333]
[88.98363495 160.63728333]
[88.98363495 175.63728333]
[88.98363495 190.63728333]
[88.98363495 205.63728333]
[88.98363495 220.63728333]
[88.98363495 235.63728333]
[88.98363495 250.63728333]
[88.98363495 265.63729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 118]
[18 117]
[19 116]
[20 115]
[23 112]
[24 111]
[26 109]
[27 108]
[28 107]
[30 48]
[31 47]
[32 46]
[50 106]
[51 105]
[52 104]
[53 103]
[54 102]
[56 100]
[57 99]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[119 130]
[120 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
