%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAxxxxxxxxxxAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-183.78677368 356.09808350]
[-196.77716064 363.59808350]
[-209.76753235 371.09808350]
[-222.75791931 378.59808350]
[-235.74829102 386.09808350]
[-248.73867798 393.59808350]
[-261.72906494 401.09808350]
[-273.12011719 410.85736084]
[-282.52398682 422.54357910]
[-291.92785645 434.22979736]
[-301.33169556 445.91598511]
[-310.73556519 457.60220337]
[-320.13940430 469.28842163]
[-329.54327393 480.97460938]
[-331.52270508 497.25387573]
[-346.71463013 503.42941284]
[-359.49090576 493.14840698]
[-356.70837402 476.98703003]
[-341.22949219 471.57077026]
[-331.82562256 459.88455200]
[-322.42178345 448.19833374]
[-313.01791382 436.51214600]
[-303.61404419 424.82592773]
[-294.21020508 413.13970947]
[-284.80633545 401.45352173]
[-298.93478394 406.49206543]
[-313.92605591 407.00415039]
[-328.36535645 402.94140625]
[-340.89010620 394.68725586]
[-350.31826782 383.02062988]
[-355.76013184 369.04257202]
[-356.70211792 354.07217407]
[-353.05532837 339.52224731]
[-345.16390991 326.76583862]
[-333.77261353 317.00680542]
[-319.95645142 311.16616821]
[-305.01925659 309.79504395]
[-290.37066650 313.02285767]
[-277.39309692 320.54501343]
[-267.31124878 331.65161133]
[-261.07659912 345.29452515]
[-259.27746582 360.18624878]
[-262.08367920 374.92141724]
[-269.22906494 388.10769653]
[-256.23867798 380.60769653]
[-243.24829102 373.10769653]
[-230.25791931 365.60769653]
[-217.26753235 358.10769653]
[-204.27716064 350.60769653]
[-191.28677368 343.10769653]
[-196.81277466 321.78973389]
[-195.25950623 299.80538940]
[-186.77822876 279.44555664]
[-172.24267578 262.83517456]
[-153.15908813 251.71151733]
[-131.51007080 247.24246216]
[-109.54867554 249.90390015]
[-89.56390381 259.42907715]
[-79.68820190 248.13879395]
[-69.81249237 236.84851074]
[-59.93678665 225.55824280]
[-50.06108093 214.26795959]
[-40.18537521 202.97767639]
[-30.30966759 191.68739319]
[-28.26045036 184.53807068]
[-20.11342430 180.26937866]
[-10.00798988 169.18423462]
[0.09744497 158.09910583]
[-14.50477886 161.53057861]
[-29.26075745 158.83593750]
[-41.70768738 150.46492004]
[-49.76814651 137.81466675]
[-52.09682465 122.99652863]
[-48.30506516 108.48368835]
[-39.02571869 96.69837189]
[-25.80752945 89.60756683]
[-10.85664082 88.39476013]
[3.33161139 93.26235962]
[14.38917542 103.39794922]
[20.47052002 117.10988617]
[20.56065559 132.10961914]
[14.64624786 145.89120483]
[27.31776428 137.86421204]
[39.98928070 129.83721924]
[52.66079712 121.81021881]
[65.33231354 113.78321838]
[78.00382996 105.75622559]
[90.67534637 97.72922516]
[83.83792114 84.44762421]
[90.34601593 66.08512115]
[101.11469269 55.64311600]
[111.88336945 45.20110321]
[116.40447998 30.03963661]
[130.92773438 26.73445129]
[138.08978271 11.36755371]
[154.83877563 13.99571800]
[156.94990540 30.81771088]
[141.36975098 37.50312805]
[137.61888123 51.91771698]
[122.32537842 55.96978378]
[111.55670166 66.41179657]
[100.78802490 76.85380554]
[108.28802490 89.84418488]
[122.71540833 85.73923492]
[137.14279175 81.63429260]
[146.17414856 68.37480164]
[162.18199158 67.31237793]
[172.88645935 79.26201630]
[170.07600403 95.05698395]
[155.90657043 102.58072662]
[141.24774170 96.06167603]
[126.82035065 100.16662598]
[112.39296722 104.27156830]
[98.70233917 110.40074158]
[86.03082275 118.42774200]
[73.35930634 126.45473480]
[60.68779373 134.48173523]
[48.01627731 142.50872803]
[35.34476089 150.53572083]
[22.67324448 158.56272888]
[11.18257904 168.20454407]
[1.07714403 179.28967285]
[-9.02829075 190.37480164]
[-19.01938820 201.56311035]
[-28.89509392 212.85337830]
[-38.77080154 224.14366150]
[-48.64650726 235.43394470]
[-58.52221298 246.72422791]
[-68.39791870 258.01449585]
[-78.27362823 269.30477905]
[-72.48549652 276.56500244]
[-67.73184204 284.53826904]
[-64.09918976 293.07821655]
[-61.65348434 302.02819824]
[-60.43891907 311.22418213]
[-60.47711945 320.49761963]
[-61.76675415 329.67868042]
[-64.28359222 338.59930420]
[-67.98092651 347.09628296]
[-72.79047394 355.01425171]
[-78.62361908 362.20852661]
[-85.37303162 368.54776001]
[-92.91468048 373.91625977]
[-101.11007690 378.21624756]
[-109.80883789 381.36950684]
[-118.85143280 383.31887817]
[-128.07211304 384.02929688]
[-137.30197144 383.48834229]
[-146.37199402 381.70657349]
[-155.11618042 378.71722412]
[-163.37460327 374.57565308]
[-170.99629211 369.35821533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
[63 125]
[64 124]
[66 123]
[67 122]
[68 121]
[82 120]
[83 119]
[84 118]
[85 117]
[86 116]
[87 115]
[88 114]
[90 102]
[91 101]
[92 100]
[94 98]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
