%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUxxxxxxxxxxCGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.76118469 239.90946960]
[108.45320892 224.91262817]
[108.14523315 209.91580200]
[107.83724976 194.91896057]
[107.52927399 179.92211914]
[107.22129822 164.92527771]
[106.91332245 149.92845154]
[106.60533905 134.93161011]
[106.29736328 119.93476868]
[93.23066711 112.56852722]
[80.24028778 120.06852722]
[67.24990845 127.56852722]
[59.16725922 141.16931152]
[44.27646637 140.83224487]
[31.28608513 148.33224487]
[18.29570389 155.83224487]
[5.30532360 163.33224487]
[3.56440830 178.63830566]
[-6.73499584 189.85328674]
[-21.48877716 192.81806946]
[-34.99758148 186.60115051]
[-47.98796463 194.10115051]
[-51.83580780 209.42987061]
[-65.43841553 217.47627258]
[-80.72559357 213.46658325]
[-88.62773895 199.77966309]
[-84.45664215 184.53573608]
[-70.68694305 176.77873230]
[-55.48796463 181.11076355]
[-42.49758148 173.61076355]
[-41.12719345 158.80332947]
[-31.18272400 147.50857544]
[-16.32056808 144.19651794]
[-2.19467640 150.34187317]
[10.79570484 142.84187317]
[23.78608513 135.34187317]
[36.77646637 127.84187317]
[43.92995834 114.77753448]
[59.74990845 114.57814789]
[72.74028778 107.07814789]
[85.73066711 99.57814789]
[95.37248230 88.08747864]
[100.50278473 73.99208832]
[105.63308716 59.89670181]
[110.76338959 45.80131149]
[115.89369202 31.70592308]
[112.68469238 17.05319977]
[102.13268280 6.39229012]
[91.58066559 -4.26861858]
[81.02864838 -14.92952728]
[70.47663879 -25.59043694]
[59.92462158 -36.25134659]
[49.37260437 -46.91225433]
[38.82059097 -57.57316208]
[28.26857567 -68.23406982]
[12.31610012 -72.03546143]
[7.89190865 -87.82655334]
[19.54722977 -99.36282349]
[35.29206848 -94.77674866]
[38.92948532 -78.78608704]
[49.48149872 -68.12517548]
[60.03351593 -57.46426773]
[70.58552551 -46.80335999]
[81.13754272 -36.14245224]
[91.68955994 -25.48154259]
[102.24157715 -14.82063389]
[112.79358673 -4.15972471]
[123.34560394 6.50118399]
[137.74095154 -3.15658498]
[152.87518311 -0.47438046]
[163.42720032 -11.13528919]
[148.87199402 -7.50952911]
[133.89042664 -8.25283909]
[119.76560974 -13.30155754]
[107.70729828 -22.22327805]
[98.74824524 -34.25387955]
[93.65576935 -48.36297989]
[92.86602783 -63.34217453]
[96.44665527 -77.90854645]
[104.09098053 -90.81452179]
[115.14430237 -100.95475006]
[128.65992737 -107.46074677]
[143.48027039 -109.77529144]
[158.33604431 -107.70015717]
[171.95486450 -101.41306305]
[183.17034912 -91.45249176]
[191.02191162 -78.67153168]
[194.83708191 -64.16482544]
[194.28912354 -49.17483902]
[189.42494202 -34.98541260]
[180.65963745 -22.81026649]
[194.47322083 -28.65705490]
[208.28680420 -34.50384140]
[222.10038757 -40.35063171]
[235.85321045 -46.33892822]
[249.54383850 -52.46810150]
[263.23446655 -58.59727478]
[276.92507935 -64.72644806]
[277.29885864 -79.98499298]
[284.26370239 -93.56636810]
[296.43670654 -102.77399445]
[311.40097046 -105.77968597]
[326.18527222 -101.98665619]
[337.85418701 -92.14802551]
[344.09088135 -78.21724701]
[343.65701294 -62.96029663]
[336.63876343 -49.40645218]
[324.42959595 -40.24683380]
[309.45361328 -37.30009842]
[294.68435669 -41.15131378]
[283.05426025 -51.03582382]
[269.36364746 -44.90665054]
[255.67301941 -38.77747726]
[241.98239136 -32.64830399]
[237.13261414 -27.00987816]
[227.94717407 -26.53704834]
[214.13359070 -20.69025993]
[200.32000732 -14.84347248]
[186.50642395 -8.99668407]
[174.08810425 -0.58327419]
[163.53608704 10.07763481]
[164.35969543 27.46495628]
[150.22415161 40.08611298]
[129.98907471 36.83622742]
[124.85877991 50.93161392]
[119.72847748 65.02700806]
[114.59817505 79.12239075]
[109.46787262 93.21778107]
[120.72782898 83.30751038]
[130.46667480 71.89896393]
[143.73507690 64.90257263]
[158.65040588 63.31103516]
[173.09634399 67.35018158]
[185.02319336 76.44689178]
[192.73867798 89.31046295]
[195.14804077 104.11569214]
[191.90943909 118.76190186]
[183.48239136 131.17095947]
[171.06259155 139.58218384]
[156.41226196 142.80209351]
[141.61010742 140.37382507]
[128.75434875 132.64010620]
[121.29420471 119.62679291]
[121.60218048 134.62362671]
[121.91015625 149.62046814]
[122.21813202 164.61730957]
[122.52611542 179.61413574]
[122.83409119 194.61097717]
[123.14206696 209.60781860]
[123.45004272 224.60466003]
[123.75802612 239.60150146]
[126.34379578 258.80993652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 41]
[11 40]
[12 39]
[14 37]
[15 36]
[16 35]
[17 34]
[21 30]
[22 29]
[42 128]
[43 127]
[44 126]
[45 125]
[46 124]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[70 121]
[71 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 114]
[96 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
