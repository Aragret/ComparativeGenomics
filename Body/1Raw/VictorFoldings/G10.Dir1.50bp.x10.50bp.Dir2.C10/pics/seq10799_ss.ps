%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUAxxxxxxxxxxGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.27856445]
[92.50000000 239.27856445]
[92.50000000 224.27856445]
[92.50000000 209.27856445]
[92.50000000 194.27856445]
[92.50000000 179.27856445]
[92.50000000 164.27856445]
[92.50000000 149.27856445]
[92.50000000 134.27856445]
[92.50000000 119.27857208]
[86.46000671 114.83239746]
[81.73562622 129.06896973]
[66.73591614 128.97497559]
[62.19032669 114.68030548]
[74.38002014 105.94004822]
[68.34002686 101.49387360]
[54.01742554 105.95068359]
[46.62407684 119.66112518]
[32.03543854 123.97693634]
[19.01019096 116.84401703]
[4.68759394 121.30083466]
[-9.63500309 125.75765228]
[-23.95759964 130.21446228]
[-38.28019714 134.67127991]
[-52.55566025 139.27684021]
[-66.78244019 144.03065491]
[-81.00921631 148.78446960]
[-95.23599243 153.53828430]
[-108.34243774 164.29270935]
[-122.30479431 154.67558289]
[-116.92868042 138.59660339]
[-99.98980713 139.31150818]
[-85.76303101 134.55769348]
[-71.53625488 129.80387878]
[-57.30947495 125.05006409]
[-51.92738342 119.91403961]
[-42.73701477 120.34868622]
[-28.41441536 115.89186859]
[-14.09181881 111.43505096]
[0.23077849 106.97823334]
[14.55337620 102.52142334]
[21.23159790 89.25730133]
[35.69326019 84.53342438]
[49.56061172 91.62808990]
[63.88320923 87.17127228]
[72.00475311 74.56014252]
[70.13713837 59.67686462]
[68.26952362 44.79358673]
[66.40190887 29.91030502]
[58.94699860 16.89399529]
[47.05461884 7.75226212]
[30.73539162 6.13521767]
[24.22362709 -8.91566086]
[34.21807098 -21.91732025]
[50.43729401 -19.49476814]
[56.19635391 -4.14011765]
[68.08873749 5.00161648]
[81.47502136 -1.76649833]
[81.16296387 -16.76325226]
[80.85090637 -31.76000595]
[80.53884888 -46.75675964]
[80.22679138 -61.75351334]
[65.49256134 -64.91564178]
[51.88498688 -71.39102936]
[40.13791275 -80.83046722]
[30.88484383 -92.72489929]
[24.62478447 -106.43286896]
[21.69533348 -121.21511841]
[22.25447273 -136.27447510]
[26.27204704 -150.79879761]
[33.53139496 -164.00479126]
[43.64102936 -175.18031311]
[56.05574799 -183.72264099]
[70.10604095 -189.17112732]
[85.03419495 -191.23191833]
[100.03515625 -189.79389954]
[114.29994202 -184.93460083]
[127.05926514 -176.91609192]
[137.62503052 -166.17080688]
[145.42744446 -153.27821350]
[150.04573059 -138.93357849]
[151.23083496 -123.91053009]
[148.91883850 -109.01921082]
[143.23442078 -95.06269836]
[134.48416138 -82.79364777]
[123.13991547 -72.87372589]
[109.81349182 -65.83788300]
[95.22354889 -62.06557083]
[95.53560638 -47.06881714]
[95.84766388 -32.07206345]
[96.15971375 -17.07530785]
[96.47177124 -2.07855439]
[97.46446991 8.47022343]
[94.49336243 17.77863884]
[88.62535858 24.53702927]
[81.28518677 28.04269218]
[83.15280151 42.92597198]
[85.02041626 57.80925369]
[86.88803101 72.69253540]
[130.56263733 83.89136505]
[145.52288818 84.98267365]
[160.48313904 86.07398224]
[171.18769836 73.01777649]
[187.39839172 68.93181610]
[202.70594788 75.22818756]
[211.17869568 89.25380707]
[226.15841675 90.03365326]
[241.13812256 90.81349945]
[256.11782837 91.59333801]
[271.09756470 92.37318420]
[280.75354004 80.22650909]
[295.71398926 76.10773468]
[310.22631836 81.60061646]
[318.71026611 94.59301758]
[317.90353394 110.08911133]
[308.11636353 122.13031769]
[293.11209106 126.08656311]
[278.66018677 120.43657684]
[270.31771851 107.35289764]
[255.33799744 106.57305908]
[240.35827637 105.79321289]
[225.37857056 105.01336670]
[210.39884949 104.23352051]
[202.97387695 115.37200165]
[190.91065979 121.42098236]
[177.32661438 120.69713593]
[165.79205322 113.28316498]
[159.39183044 101.03423309]
[144.43157959 99.94292450]
[129.47132874 98.85160828]
[123.97850037 103.95835114]
[136.58415222 112.08839417]
[151.32667542 114.85568237]
[160.39909363 126.80101776]
[159.10848999 141.74539185]
[148.12243652 151.95846558]
[133.12376404 152.15727234]
[121.87087250 142.23898315]
[120.18421173 127.33557129]
[112.99283600 114.17182922]
[107.50000000 119.27857208]
[107.50000000 134.27856445]
[107.50000000 149.27856445]
[107.50000000 164.27856445]
[107.50000000 179.27856445]
[107.50000000 194.27856445]
[107.50000000 209.27856445]
[107.50000000 224.27856445]
[107.50000000 239.27856445]
[107.50000000 254.27856445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 45]
[17 44]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 35]
[26 34]
[27 33]
[28 32]
[46 99]
[47 98]
[48 97]
[49 96]
[50 57]
[51 56]
[58 92]
[59 91]
[60 90]
[61 89]
[62 88]
[100 130]
[101 129]
[102 128]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
