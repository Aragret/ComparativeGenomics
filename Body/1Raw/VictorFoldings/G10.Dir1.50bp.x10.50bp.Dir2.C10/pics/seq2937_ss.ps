%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACxxxxxxxxxxCCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.13557434 375.53106689]
[107.82351685 360.53430176]
[107.51145935 345.53753662]
[107.19940186 330.54080200]
[106.88734436 315.54403687]
[106.57528687 300.54730225]
[106.26323700 285.55053711]
[105.95117950 270.55377197]
[105.63912201 255.55702209]
[102.84679413 240.81922913]
[97.65138245 226.74769592]
[79.24981689 222.87832642]
[66.60125732 208.96417236]
[51.83520508 211.60304260]
[37.06914902 214.24191284]
[22.30309296 216.88076782]
[7.53703737 219.51963806]
[-6.58776569 224.56838989]
[-19.68091965 231.88749695]
[-18.70009995 247.11906433]
[-24.43310165 261.26458740]
[-35.74163437 271.51541138]
[-50.38037872 275.83630371]
[-65.44280243 273.36929321]
[-77.93824768 264.60421753]
[-85.38574219 251.28138733]
[-86.30657196 236.04606628]
[-80.51790619 221.92324829]
[-69.16909790 211.71701050]
[-54.51345062 207.45381165]
[-39.46086121 209.98013306]
[-27.00002480 218.79434204]
[-13.90687084 211.47523499]
[-15.30303383 204.10633850]
[-18.09535789 189.36853027]
[-19.49151993 181.99961853]
[-34.35456848 179.97729492]
[-49.21761322 177.95495605]
[-64.08065796 175.93261719]
[-80.59036255 179.78828430]
[-88.86568451 164.99114990]
[-76.93766022 152.94297791]
[-62.05832672 161.06958008]
[-47.19527817 163.09190369]
[-32.33223343 165.11424255]
[-17.46918488 167.13658142]
[-4.75595045 174.41215515]
[3.32221961 184.39639282]
[6.42192125 195.13888550]
[4.89817286 204.75358582]
[19.66422844 202.11471558]
[34.43028259 199.47584534]
[49.19633865 196.83699036]
[63.96239471 194.19812012]
[69.87922668 177.69462585]
[84.00279236 167.01828003]
[101.83890533 165.80329895]
[108.74590302 152.48814392]
[115.65290070 139.17298889]
[122.55989838 125.85782623]
[103.98969269 131.85220337]
[86.51354218 126.67041779]
[75.84756470 113.50482178]
[74.63059235 97.89099884]
[81.86515808 85.46290588]
[93.73992920 79.92598724]
[94.67556000 64.95520020]
[95.61119080 49.98440552]
[96.54681396 35.01361465]
[82.75127411 28.68531609]
[72.17615509 17.79810333]
[66.25167847 3.82437968]
[65.77906036 -11.34602165]
[70.82222748 -25.66142845]
[80.69913483 -37.18579865]
[94.07401276 -44.36055756]
[109.13800812 -46.21537781]
[123.85385132 -42.49940872]
[136.23133850 -33.71520615]
[144.59652710 -21.05076218]
[147.81806946 -6.21883535]
[145.46031189 8.77467537]
[137.84208679 21.90202141]
[125.99372864 31.38783646]
[111.51760864 35.94924545]
[110.58197784 50.92003632]
[109.64635468 65.89082336]
[108.71072388 80.86161804]
[113.61525726 75.90965271]
[119.42471313 71.71118164]
[130.30354309 61.38397980]
[141.18235779 51.05677414]
[152.06118774 40.72957230]
[159.38581848 25.43950081]
[176.10600281 28.24516487]
[178.03858948 45.08860397]
[162.38839722 51.60839462]
[151.50956726 61.93560028]
[140.63073730 72.26280212]
[129.75192261 82.59001160]
[136.93475342 95.75917816]
[144.11692810 108.92717743]
[158.68963623 105.37241364]
[173.26234436 101.81764984]
[187.83503723 98.26289368]
[199.30905151 86.54626465]
[215.12348938 90.88625336]
[219.00982666 106.81824493]
[206.97012329 117.95277405]
[191.38980103 112.83559418]
[176.81710815 116.39035797]
[162.24440002 119.94511414]
[147.67169189 123.49987793]
[135.87506104 132.76483154]
[128.96806335 146.07998657]
[122.06105804 159.39514160]
[115.15406036 172.71029663]
[121.14818573 180.06181335]
[124.65428925 188.82632446]
[125.37723541 198.19253540]
[123.27817535 207.30220032]
[118.57558441 215.32875061]
[111.72290039 221.55229187]
[116.91831207 235.62380981]
[120.09009552 220.96298218]
[128.00337219 208.22013855]
[139.73809814 198.87689209]
[153.92987061 194.01956177]
[168.92861938 194.21290588]
[182.99046326 199.43444824]
[194.48045349 209.07708740]
[202.06262207 222.01966858]
[204.85543823 236.75738525]
[202.53416443 251.57667542]
[195.36868286 264.75454712]
[184.19213867 274.75878906]
[170.30400085 280.42620850]
[155.31904602 281.09790039]
[140.97956848 276.69573975]
[128.95277405 267.73153687]
[120.63587189 255.24496460]
[120.94792938 270.24172974]
[121.25998688 285.23846436]
[121.57204437 300.23522949]
[121.88410187 315.23199463]
[122.19615936 330.22872925]
[122.50820923 345.22549438]
[122.82026672 360.22225952]
[123.13232422 375.21899414]
[125.72332001 394.42672729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 124]
[11 123]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 33]
[19 32]
[36 46]
[37 45]
[38 44]
[39 43]
[57 117]
[58 116]
[59 115]
[60 114]
[66 88]
[67 87]
[68 86]
[69 85]
[90 100]
[91 99]
[92 98]
[93 97]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
