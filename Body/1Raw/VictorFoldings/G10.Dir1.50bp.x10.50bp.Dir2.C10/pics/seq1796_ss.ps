%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCxxxxxxxxxxAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.71276093 507.50439453]
[86.71276093 492.50439453]
[86.71276093 477.50439453]
[86.71276093 462.50439453]
[86.71276093 447.50439453]
[86.71276093 432.50439453]
[86.71276093 417.50439453]
[86.71276093 402.50439453]
[86.71276093 387.50439453]
[86.71276093 372.50439453]
[72.05838013 369.41491699]
[58.36132050 363.34356689]
[46.22126389 354.55349731]
[36.17029190 343.42697144]
[28.64953995 330.44869995]
[23.98985481 316.18478394]
[22.39722443 301.25790405]
[23.94368172 286.32028198]
[28.56404877 272.02514648]
[36.05868149 258.99801636]
[46.10209274 247.80960083]
[58.25708389 238.95054626]
[71.99378967 232.81004333]
[86.71276093 229.65873718]
[86.71276093 214.65873718]
[86.71276093 199.65873718]
[83.54718018 192.92637634]
[86.87203979 184.34750366]
[87.18409729 169.35073853]
[87.49615479 154.35398865]
[80.02530670 141.46850586]
[88.04802704 127.83228302]
[88.36008453 112.83553314]
[79.97793579 100.39609528]
[65.96122742 95.05458069]
[51.94451141 89.71306610]
[38.97401428 98.02404022]
[23.77446365 97.11460876]
[12.16226959 87.54272461]
[8.45739269 73.14092255]
[-5.55932093 67.79940796]
[-19.57603455 62.45789719]
[-33.59274673 57.11638260]
[-47.91072845 63.80749893]
[-62.73768234 58.33602905]
[-69.27704620 43.94810867]
[-63.64912033 29.17982864]
[-49.19286728 22.79295158]
[-34.48491287 28.57669640]
[-28.25123405 43.09967041]
[-14.23452091 48.44118500]
[-0.21780819 53.78269577]
[13.79890442 59.12421036]
[26.14878464 50.84057999]
[41.18617630 51.42436981]
[53.13612747 60.86110687]
[57.28602600 75.69635773]
[71.30274200 81.03786469]
[85.31945038 86.37937927]
[98.09680939 78.52194977]
[99.65438843 63.60304260]
[89.97477722 51.39882278]
[91.76691437 36.29111481]
[103.46142578 27.13829613]
[105.01900482 12.21938419]
[106.57658386 -2.69952822]
[92.43405914 -7.93782330]
[80.03902435 -16.52932930]
[70.17064667 -27.93397331]
[63.44926071 -41.43485260]
[60.29737473 -56.18329239]
[60.91312408 -71.25218964]
[65.25779724 -85.69430542]
[73.05828857 -98.60179138]
[83.82424927 -109.16326904]
[96.87892151 -116.71484375]
[111.40168762 -120.78181458]
[126.47961426 -121.10852814]
[141.16491699 -117.67443848]
[154.53443909 -110.69542694]
[165.74777222 -100.61019897]
[174.10005188 -88.05271149]
[179.06620789 -73.81234741]
[180.33410645 -58.78426743]
[177.82402039 -43.91314316]
[171.69375610 -30.13379288]
[162.32864380 -18.31239319]
[150.31738281 -9.19204807]
[136.41503906 -3.34607220]
[121.49549866 -1.14194715]
[119.93791962 13.77696514]
[118.38033295 28.69587708]
[127.93209076 40.06687164]
[126.56501007 55.21895981]
[114.57330322 65.16062164]
[113.01572418 80.07953644]
[118.91403961 84.71200562]
[136.60900879 98.60943604]
[150.73381042 93.56067657]
[164.85861206 88.51191711]
[178.98341370 83.46316528]
[184.24658203 68.73791504]
[197.76965332 60.88548660]
[213.16743469 63.61355972]
[223.16957092 75.63401794]
[223.05334473 91.27117157]
[212.87365723 103.14163208]
[197.43702698 105.64053345]
[184.03216553 97.58796692]
[169.90736389 102.63672638]
[155.78256226 107.68547821]
[141.65776062 112.73423767]
[156.47393799 115.07532501]
[155.76776123 130.05870056]
[146.24078369 141.64476013]
[131.67620850 145.23265076]
[117.85765839 139.39761353]
[110.27280426 126.45808411]
[103.35683441 113.14759064]
[103.04477692 128.14434814]
[110.49330902 142.10249329]
[102.49291229 154.66604614]
[102.18085480 169.66279602]
[101.86879730 184.65954590]
[101.71276093 199.65873718]
[101.71276093 214.65873718]
[101.71276093 229.65873718]
[116.43173218 232.81004333]
[130.16844177 238.95054626]
[142.32342529 247.80960083]
[152.36683655 258.99801636]
[159.86146545 272.02514648]
[164.48184204 286.32028198]
[166.02828979 301.25790405]
[164.43566895 316.18478394]
[159.77598572 330.44869995]
[152.25523376 343.42697144]
[142.20425415 354.55349731]
[130.06420898 363.34356689]
[116.36714172 369.41491699]
[101.71276093 372.50439453]
[101.71276093 387.50439453]
[101.71276093 402.50439453]
[101.71276093 417.50439453]
[101.71276093 432.50439453]
[101.71276093 447.50439453]
[101.71276093 462.50439453]
[101.71276093 477.50439453]
[101.71276093 492.50439453]
[101.71276093 507.50439453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[28 124]
[29 123]
[30 122]
[32 120]
[33 119]
[34 59]
[35 58]
[36 57]
[40 53]
[41 52]
[42 51]
[43 50]
[60 96]
[61 95]
[64 92]
[65 91]
[66 90]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
