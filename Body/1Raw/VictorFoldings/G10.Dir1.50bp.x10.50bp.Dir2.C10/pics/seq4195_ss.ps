%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGxxxxxxxxxxCCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.19944763 299.31015015]
[130.88739014 284.31338501]
[130.57533264 269.31665039]
[130.26327515 254.31988525]
[129.95121765 239.32313538]
[129.63916016 224.32638550]
[129.32710266 209.32962036]
[129.01504517 194.33287048]
[128.70298767 179.33612061]
[124.99683380 164.80117798]
[118.08983612 151.48602295]
[111.18283844 138.17086792]
[104.27584076 124.85571289]
[97.36884308 111.54055786]
[94.46260071 126.25632477]
[84.69184875 137.63755798]
[70.58572388 142.73826599]
[55.79554749 140.23814392]
[44.14971161 130.78433228]
[38.66270447 116.82392883]
[40.75482178 101.97054291]
[49.88452911 90.06893158]
[63.68862534 84.19977570]
[78.59396362 85.88230896]
[90.74227142 94.68090820]
[86.73453522 80.22621918]
[82.72679138 65.77153015]
[78.71905518 51.31684494]
[74.20858765 46.34057617]
[73.10471344 40.68259811]
[74.85868835 36.17714691]
[71.45571136 21.56825447]
[68.05273438 6.95936155]
[64.64975739 -7.64953089]
[49.79317856 -5.51327753]
[34.80795670 -4.66208553]
[19.80503273 -5.10225725]
[4.89548874 -6.83053398]
[-9.81028938 -9.83411980]
[-24.20342445 -14.09077644]
[-38.17734909 -19.56898880]
[-51.62860870 -26.22819710]
[-64.45761108 -34.01910019]
[-76.56937408 -42.88401413]
[-87.87422180 -52.75730133]
[-98.28845978 -63.56586838]
[-107.73497772 -75.22969055]
[-116.14383698 -87.66240692]
[-123.45278931 -100.77197266]
[-129.60771179 -114.46132660]
[-134.56303406 -128.62911987]
[-138.28207397 -143.17044067]
[-140.73728943 -157.97764587]
[-141.91050720 -172.94110107]
[-141.79304504 -187.95002747]
[-140.38577271 -202.89328003]
[-137.69909668 -217.66024780]
[-133.75291443 -232.14158630]
[-128.57644653 -246.23007202]
[-122.20801544 -259.82141113]
[-114.69477844 -272.81497192]
[-106.09234619 -285.11456299]
[-96.46443176 -296.62908936]
[-85.88229370 -307.27334595]
[-74.42430115 -316.96847534]
[-62.17527008 -325.64273071]
[-49.22589874 -333.23190308]
[-35.67205811 -339.67974854]
[-21.61410141 -344.93856812]
[-7.15610552 -348.96942139]
[7.59488249 -351.74249268]
[22.52964973 -353.23718262]
[37.53762436 -353.44247437]
[52.50769043 -352.35684204]
[67.32901001 -349.98831177]
[81.89185333 -346.35446167]
[96.08839417 -341.48211670]
[109.81353760 -335.40740967]
[122.96565247 -328.17532349]
[135.44735718 -319.83935547]
[147.16625977 -310.46124268]
[158.03559875 -300.11044312]
[167.97486877 -288.86358643]
[176.91050720 -276.80389404]
[184.77635193 -264.02072144]
[191.51417542 -250.60864258]
[197.07406616 -236.66702271]
[201.41488647 -222.29904175]
[204.50447083 -207.61109924]
[206.31997681 -192.71191406]
[206.84793091 -177.71182251]
[206.08445740 -162.72187805]
[204.03518677 -147.85305786]
[200.71528625 -133.21543884]
[196.14935303 -118.91741180]
[190.37118530 -105.06482697]
[183.42355347 -91.76023865]
[175.35791016 -79.10216522]
[166.23397827 -67.18431854]
[156.11927795 -56.09493256]
[145.08872986 -45.91611099]
[133.22398376 -36.72322083]
[120.61289215 -28.58431816]
[107.34881592 -21.55966568]
[93.52996063 -15.70127201]
[79.25864410 -11.05250931]
[82.66162872 3.55638361]
[86.06460571 18.16527557]
[89.46758270 32.77416992]
[93.17374420 47.30910492]
[97.18148041 61.76379395]
[101.18922424 76.21848297]
[105.19696045 90.67317200]
[110.68399811 104.63356018]
[117.59099579 117.94871521]
[124.49799347 131.26387024]
[131.40498352 144.57902527]
[138.31199646 157.89418030]
[139.30258179 142.92692566]
[144.06347656 128.70251465]
[152.28219604 116.15450287]
[163.41935730 106.10643005]
[176.74400330 99.21776581]
[191.38163757 95.94060516]
[206.37156677 96.49003601]
[220.73001099 100.83000946]
[233.51458740 108.67567444]
[243.88624573 119.51212311]
[251.16429138 132.62814331]
[254.87106323 147.16293335]
[254.76325989 162.16253662]
[250.84797668 176.64254761]
[243.38217163 189.65260315]
[232.85583496 200.33886719]
[219.95980835 207.99998474]
[205.54048157 212.13313293]
[190.54418945 212.46707153]
[175.95518494 208.97985840]
[162.73091125 201.90039062]
[151.73933411 191.69329834]
[143.69975281 179.02406311]
[144.01181030 194.02081299]
[144.32386780 209.01756287]
[144.63591003 224.01432800]
[144.94796753 239.01107788]
[145.26002502 254.00782776]
[145.57208252 269.00457764]
[145.88414001 284.00134277]
[146.19619751 298.99807739]
[148.78720093 318.20581055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[25 113]
[26 112]
[27 111]
[28 110]
[31 109]
[32 108]
[33 107]
[34 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
