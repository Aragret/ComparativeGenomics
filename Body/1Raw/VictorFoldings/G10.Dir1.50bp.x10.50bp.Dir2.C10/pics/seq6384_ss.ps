%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.46504974 289.20828247]
[100.46504974 274.20828247]
[100.46504974 259.20828247]
[100.46504974 244.20826721]
[100.46504974 229.20826721]
[100.46504974 214.20826721]
[100.46504974 199.20826721]
[100.46504974 184.20826721]
[100.46504974 169.20826721]
[100.46504974 154.20826721]
[87.51683044 152.03602600]
[75.63619232 146.85914612]
[65.49837494 139.06129456]
[57.65763092 129.17219543]
[52.51711655 117.83225250]
[50.30866241 105.75138855]
[51.08333588 93.66471863]
[54.71315384 82.28787231]
[60.90351868 72.27456665]
[69.21539307 64.17916107]
[79.09559631 58.42602921]
[74.60514832 44.11394119]
[70.11470032 29.80185318]
[58.60097504 18.95082855]
[62.17336273 4.49097681]
[57.68291473 -9.82111263]
[51.90757370 -23.66471672]
[44.89534378 -36.92475510]
[37.88311386 -50.18479538]
[25.77634621 -54.74340820]
[20.22093582 -65.98006439]
[23.71895218 -77.59824371]
[16.97690392 -90.99767303]
[10.23485661 -104.39710999]
[3.49280787 -117.79653931]
[-8.98978329 -126.11428833]
[-23.95205688 -127.17748260]
[-38.91432953 -128.24067688]
[-53.41719437 -120.58568573]
[-67.15207672 -129.54586792]
[-65.98970795 -145.90377808]
[-51.12583542 -152.83178711]
[-37.85113525 -143.20295715]
[-22.88886070 -142.13975525]
[-7.92658758 -141.07656860]
[-2.87056684 -146.61611938]
[-17.52135277 -149.83395386]
[-22.05991364 -164.13085938]
[-11.94763088 -175.20974731]
[2.70308471 -171.99159241]
[7.24147415 -157.69522095]
[12.29749489 -163.23477173]
[9.87593746 -178.03802490]
[7.45438051 -192.84126282]
[5.03282356 -207.64451599]
[-0.46076596 -221.60232544]
[-8.77851391 -234.08491516]
[-17.09626198 -246.56750488]
[-25.41400909 -259.05007935]
[-33.73175812 -271.53268433]
[-49.11695862 -276.07968140]
[-55.02076340 -290.99691772]
[-46.91427612 -304.84121704]
[-31.01609802 -306.99240112]
[-19.52195358 -295.80023193]
[-21.24916458 -279.85043335]
[-12.93141747 -267.36782837]
[-4.61367035 -254.88525391]
[3.70407724 -242.40266418]
[12.02182484 -229.92007446]
[11.27943325 -244.90168762]
[14.53376389 -259.54440308]
[21.55211830 -272.80120850]
[31.83264542 -283.72415161]
[44.64023590 -291.53219604]
[59.05908585 -295.66702271]
[74.05816650 -295.83297729]
[88.56497192 -292.01818848]
[101.54219055 -284.49545288]
[112.06188202 -273.80264282]
[119.37184143 -260.70437622]
[122.94936371 -246.13725281]
[122.53863525 -231.14286804]
[118.16903687 -216.79342651]
[110.15300751 -204.11497498]
[99.06372833 -194.01408386]
[85.69415283 -187.21301270]
[71.00027466 -184.19808960]
[56.03276443 -185.18489075]
[41.86189270 -190.10285950]
[29.50093842 -198.60031128]
[19.83606911 -210.06607056]
[22.25762558 -195.26281738]
[24.67918205 -180.45957947]
[27.10074043 -165.65632629]
[30.86315727 -138.90982056]
[16.89224052 -124.53858948]
[23.63428879 -111.13916016]
[30.37633705 -97.73972321]
[37.11838531 -84.34029388]
[52.27754974 -75.54895020]
[51.14315414 -57.19702530]
[58.15538406 -43.93698502]
[65.16761017 -30.67694664]
[68.43083191 -45.31769180]
[78.98930359 -55.97220993]
[93.59989166 -59.36787415]
[107.77484894 -54.46168137]
[117.16020203 -42.76060867]
[118.87316895 -27.85873795]
[112.38758850 -14.33330536]
[99.69557190 -6.33876228]
[84.69557190 -6.33069992]
[71.99500275 -14.31155872]
[76.48545074 0.00052975]
[87.67798615 9.82785702]
[84.42678833 25.31140518]
[88.91723633 39.62349319]
[93.40768433 53.93558502]
[114.08683777 54.04138565]
[133.33702087 63.26807022]
[147.21655273 80.35663605]
[152.62088013 102.38637543]
[147.96138000 125.26774597]
[161.29179382 132.14524841]
[174.62222290 139.02273560]
[191.47061157 140.91162109]
[194.31964111 157.62446594]
[179.04862976 164.98873901]
[167.74472046 152.35314941]
[154.41430664 145.47566223]
[141.08387756 138.59817505]
[134.67916870 142.50070190]
[143.08047485 154.92720032]
[151.48178101 167.35371399]
[159.88307190 179.78022766]
[172.19923401 188.34246826]
[171.74755859 203.33567810]
[158.93829346 211.14099121]
[145.40655518 204.66857910]
[143.44390869 189.79696655]
[136.25251770 176.63322449]
[129.06114197 163.46948242]
[121.86975861 150.30574036]
[115.46504974 154.20826721]
[115.46504974 169.20826721]
[115.46504974 184.20826721]
[115.46504974 199.20826721]
[115.46504974 214.20826721]
[115.46504974 229.20826721]
[115.46504974 244.20826721]
[115.46504974 259.20828247]
[115.46504974 274.20828247]
[115.46504974 289.20828247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[21 119]
[22 118]
[23 117]
[25 115]
[26 114]
[27 104]
[28 103]
[29 102]
[32 100]
[33 99]
[34 98]
[35 97]
[36 45]
[37 44]
[38 43]
[52 95]
[53 94]
[54 93]
[55 92]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
