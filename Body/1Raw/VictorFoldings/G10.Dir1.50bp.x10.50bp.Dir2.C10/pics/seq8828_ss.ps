%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-44.59754181 241.79922485]
[-55.68885803 251.89787292]
[-66.78017426 261.99652100]
[-77.87149048 272.09518433]
[-88.96279907 282.19381714]
[-100.05411530 292.29248047]
[-110.60540771 302.95410156]
[-120.58813477 314.14987183]
[-130.57086182 325.34564209]
[-140.55358887 336.54138184]
[-143.95988464 345.08825684]
[-150.86233521 347.86346436]
[-161.07582092 358.84912109]
[-171.28929138 369.83477783]
[-181.50277710 380.82046509]
[-191.71626282 391.80612183]
[-198.07289124 407.52328491]
[-214.93553162 405.76602173]
[-217.91497803 389.07592773]
[-202.70191956 381.59265137]
[-192.48844910 370.60696411]
[-182.27496338 359.62130737]
[-172.06147766 348.63565063]
[-161.84800720 337.64999390]
[-151.74935913 326.55865479]
[-141.76663208 315.36291504]
[-131.78390503 304.16714478]
[-121.80117798 292.97137451]
[-136.64901733 290.84027100]
[-144.42346191 278.01226807]
[-139.44203186 263.86358643]
[-125.34574127 258.73574829]
[-112.43783569 266.37683105]
[-110.15277100 281.20114136]
[-99.06145477 271.10250854]
[-87.97013855 261.00384521]
[-76.87882233 250.90521240]
[-65.78750610 240.80654907]
[-54.69618988 230.70790100]
[-68.69403076 212.06155396]
[-80.45596313 191.92993164]
[-89.82611084 170.57984924]
[-96.68027496 148.29429626]
[-100.92760468 125.36862946]
[-102.51180267 102.10672760]
[-101.41188049 78.81690979]
[-97.64241028 55.80784988]
[-91.25335693 33.38452148]
[-82.32939911 11.84412384]
[-70.98882294 -8.52783966]
[-57.38192368 -27.46135902]
[-68.68093109 -37.32707977]
[-79.97993469 -47.19280243]
[-95.88779449 -53.05592728]
[-94.65753937 -69.96517944]
[-78.06854248 -73.46395111]
[-70.11421204 -58.49180984]
[-58.81520844 -48.62608719]
[-47.51620102 -38.76036453]
[-40.82598114 -45.54556656]
[-33.82400513 -52.00856400]
[-26.52577782 -58.13505554]
[-18.94745255 -63.91147614]
[-11.10580730 -69.32503510]
[-3.01820207 -74.36375427]
[5.29746008 -79.01647186]
[13.82277012 -83.27289581]
[22.53885460 -87.12359619]
[31.42642021 -90.56005096]
[40.46578979 -93.57465363]
[49.63695145 -96.16072845]
[58.91960526 -98.31255341]
[68.29320526 -100.02536774]
[77.73699188 -101.29537201]
[87.23006439 -102.11975861]
[96.75140381 -102.49670410]
[106.27993774 -102.42536926]
[115.79457092 -101.90592194]
[125.27423096 -100.93949890]
[134.69795227 -99.52824402]
[144.04484558 -97.67528534]
[153.29425049 -95.38472748]
[162.42565918 -92.66162872]
[171.41888428 -89.51203156]
[180.25401306 -85.94290161]
[188.91146851 -81.96213531]
[197.37208557 -77.57855988]
[205.61715698 -72.80185699]
[213.62841797 -67.64262390]
[221.38813782 -62.11226654]
[228.87913513 -56.22303772]
[236.08482361 -49.98796463]
[242.98925781 -43.42085648]
[249.57713318 -36.53625488]
[255.83389282 -29.34939194]
[261.74566650 -21.87618256]
[267.29940796 -14.13316917]
[272.48275757 -6.13749361]
[277.28427124 2.09314394]
[281.69332886 10.54052258]
[285.70016479 19.18594170]
[289.29592896 28.01026535]
[292.47262573 36.99395370]
[295.22320557 46.11712265]
[297.54165649 55.35957336]
[299.42276001 64.70085144]
[300.86239624 74.12026978]
[301.85739136 83.59697723]
[302.40551758 93.11000061]
[302.50558472 102.63827515]
[302.15731812 112.16071320]
[301.36154175 121.65621948]
[300.12002563 131.10379028]
[298.43545532 140.48251343]
[296.31161499 149.77160645]
[293.75320435 158.95053101]
[290.76586914 167.99893188]
[287.35620117 176.89682007]
[301.01245117 183.10223389]
[314.66870117 189.30763245]
[328.32492065 195.51304626]
[344.58551025 193.38565063]
[354.34201050 206.56680298]
[347.55776978 221.49685669]
[331.21185303 222.81704712]
[322.11950684 209.16928101]
[308.46328735 202.96388245]
[294.80703735 196.75846863]
[281.15078735 190.55305481]
[273.05001831 205.21005249]
[263.76599121 219.14765930]
[253.36219788 232.27056885]
[241.90975952 244.48905945]
[229.48698425 255.71958923]
[216.17881775 265.88534546]
[202.07626343 274.91683960]
[187.27575684 282.75231934]
[171.87847900 289.33819580]
[155.98971558 294.62945557]
[139.71810913 298.58987427]
[123.17494202 301.19241333]
[106.47329712 302.41928101]
[89.72739410 302.26205444]
[73.05173492 300.72183228]
[56.56033707 297.80917358]
[40.36596680 293.54391479]
[24.57934952 287.95529175]
[9.30843639 281.08148193]
[-5.34235954 272.96951294]
[-19.27285957 263.67483521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 28]
[8 27]
[9 26]
[10 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[51 59]
[52 58]
[53 57]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
