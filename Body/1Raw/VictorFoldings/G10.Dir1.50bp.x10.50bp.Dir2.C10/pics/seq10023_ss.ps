%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGxxxxxxxxxxCAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.50837708 138.21470642]
[131.89724731 130.09317017]
[119.28611755 121.97162628]
[106.67498779 113.85008240]
[89.45703888 113.96339417]
[75.44033051 119.30490875]
[61.47993851 124.79193878]
[47.57738113 130.42390442]
[33.67482758 136.05584717]
[19.77227020 141.68780518]
[5.86971378 147.31976318]
[9.01324654 162.02655029]
[9.55502701 177.05577087]
[7.47859192 191.95071411]
[2.84704113 206.25875854]
[-4.19887781 219.54507446]
[-13.44504642 231.40591431]
[-24.61048508 241.48083496]
[-37.35588837 249.46366882]
[-51.29393768 255.11184692]
[-66.00107574 258.25372314]
[-81.03035736 258.79379272]
[-95.92507172 256.71566772]
[-110.23258209 252.08248901]
[-123.51809692 245.03506470]
[-135.37788391 235.78755188]
[-145.45155334 224.62097168]
[-153.43295288 211.87466431]
[-159.07954407 197.93597412]
[-162.21974182 183.22848511]
[-162.75810242 168.19914246]
[-160.67829895 153.30465698]
[-156.04350281 138.99768066]
[-148.99456787 125.71295929]
[-139.74571228 113.85421753]
[-128.57798767 103.78182983]
[-115.83077240 95.80187225]
[-101.89144135 90.15686035]
[-87.18359375 87.01833344]
[-72.15418243 86.48165894]
[-57.25994110 88.56316376]
[-42.95348358 93.19958496]
[-29.66956711 100.25002289]
[-17.81187630 109.50022888]
[-7.74075079 120.66909027]
[0.23775712 133.41720581]
[14.14031315 127.78525543]
[28.04286957 122.15329742]
[41.94542694 116.52133942]
[55.84798050 110.88938141]
[60.89922714 105.42765045]
[70.09881592 105.28819275]
[84.11553192 99.94668579]
[92.75464630 87.68431854]
[93.06670380 72.68756104]
[93.37875366 57.69080734]
[93.69081116 42.69405365]
[94.00286865 27.69729996]
[94.31492615 12.70054722]
[94.62698364 -2.29620647]
[79.91397858 -5.44644451]
[66.06314850 -11.32445526]
[53.57519150 -19.71775246]
[42.90153885 -30.32292557]
[34.42803955 -42.75659943]
[28.46100235 -56.56931305]
[25.21613312 -71.26173401]
[24.81072998 -86.30274963]
[27.25945091 -101.14863586]
[32.47377396 -115.26271820]
[40.26520538 -128.13478088]
[50.35208893 -139.29951477]
[62.36979294 -148.35331726]
[75.88388062 -154.96890259]
[90.40583038 -158.90710449]
[105.41067505 -160.02558899]
[120.35601044 -158.28390503]
[134.70156860 -153.74501038]
[147.92875671 -146.57298279]
[159.55943298 -137.02709961]
[169.17315674 -125.45243835]
[176.42237854 -112.26739502]
[181.04505920 -97.94862366]
[182.87409973 -83.01372528]
[181.84336853 -68.00259399]
[177.99012756 -53.45787048]
[171.45365906 -39.90533829]
[162.47027588 -27.83490944]
[151.36470032 -17.68292427]
[138.53840637 -9.81637192]
[124.45504761 -4.51962280]
[109.62373352 -1.98415029]
[109.31167603 13.01260376]
[108.99962616 28.00935745]
[108.68756866 43.00611115]
[108.37551117 58.00286484]
[108.06345367 72.99961853]
[107.75139618 87.99636841]
[114.79653168 101.23896027]
[127.40766144 109.36049652]
[140.01878357 117.48204041]
[152.62991333 125.60358429]
[162.25115967 114.07052612]
[173.21678162 103.80725098]
[185.36054993 94.96935272]
[198.49836731 87.69081116]
[212.43107605 82.08197021]
[226.94746399 78.22784424]
[241.82745361 76.18687439]
[256.84545898 75.98999786]
[271.77386475 77.64019775]
[286.38629150 81.11245728]
[300.46124268 86.35413361]
[313.78533936 93.28578186]
[326.15661621 101.80229950]
[337.38751221 111.77458191]
[347.30776978 123.05146790]
[355.76702881 135.46199036]
[362.63699341 148.81799316]
[367.81353760 162.91703796]
[371.21823120 177.54536438]
[372.79937744 192.48120117]
[372.53308105 207.49815369]
[370.42333984 222.36854553]
[366.50216675 236.86695862]
[360.82894897 250.77359009]
[353.48974609 263.87762451]
[344.59582520 275.98040771]
[334.28195190 286.89846802]
[322.70455933 296.46627808]
[310.03909302 304.53881836]
[296.47756958 310.99368286]
[282.22561646 315.73303223]
[267.49926758 318.68499756]
[252.52177429 319.80487061]
[237.52018738 319.07562256]
[222.72190857 316.50836182]
[208.35130310 312.14196777]
[194.62622070 306.04266357]
[181.75473022 298.30288696]
[169.93194580 289.03997803]
[159.33711243 278.39434814]
[150.13084412 266.52743530]
[142.45269775 253.61906433]
[136.41908264 239.86497498]
[132.12144470 225.47364807]
[129.62496948 210.66328430]
[128.96746826 195.65837097]
[130.15893555 180.68638611]
[133.18130493 165.97431946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[4 99]
[5 53]
[6 52]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
