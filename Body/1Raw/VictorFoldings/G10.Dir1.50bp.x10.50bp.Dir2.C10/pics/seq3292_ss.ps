%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.02665710 388.19912720]
[91.02665710 373.19912720]
[91.02665710 358.19912720]
[91.02665710 343.19912720]
[91.02665710 328.19912720]
[91.02665710 313.19912720]
[91.02665710 298.19912720]
[91.02665710 283.19912720]
[91.02665710 268.19912720]
[91.02665710 253.19914246]
[74.92523956 248.37127686]
[61.06366348 238.83084106]
[50.78227997 225.48707581]
[45.07929993 209.61761475]
[44.51389694 192.74618530]
[49.15140533 176.49624634]
[58.55598068 162.43484497]
[71.83152771 151.92140198]
[87.70707703 145.97640991]
[86.78366089 131.00485229]
[74.81340790 121.96533966]
[60.16068268 125.17433167]
[45.50795746 128.38333130]
[30.85523224 131.59233093]
[16.20250702 134.80131531]
[1.54978228 138.01031494]
[-1.48332524 152.93412781]
[-10.32955360 165.33026123]
[-23.45623970 173.05101013]
[-38.58910751 174.75871277]
[-53.10629272 170.15750122]
[-64.49260712 160.04455566]
[-70.77530670 146.17199707]
[-70.86586761 130.94335938]
[-64.74860382 116.99707031]
[-53.48337173 106.74941254]
[-39.02193832 101.97586060]
[-23.86983109 103.50346375]
[-10.65224838 111.06755066]
[-1.65921402 123.35759735]
[12.99351120 120.14859772]
[27.64623642 116.93959808]
[42.29896164 113.73060608]
[56.95168686 110.52160645]
[71.60440826 107.31261444]
[74.20912933 92.54049683]
[61.53761673 84.51349640]
[48.86610031 76.48650360]
[36.19458389 68.45950317]
[23.52306938 60.43250656]
[6.90708399 57.06421661]
[5.54397964 40.16515350]
[21.40527534 34.17719650]
[31.55006599 47.76099014]
[44.22158051 55.78799057]
[56.89309692 63.81498718]
[69.56461334 71.84197998]
[82.23612976 79.86898041]
[89.42836761 77.74255371]
[77.13469696 69.14804840]
[76.18901825 54.17788696]
[87.30344391 44.10467529]
[102.10874939 46.51358032]
[109.45648193 59.59069061]
[103.81285095 73.48970795]
[111.00508881 71.36328888]
[117.27449799 57.73630905]
[123.54389954 44.10932922]
[129.81330872 30.48234940]
[136.08271790 16.85537148]
[123.75835419 8.23272991]
[113.17183685 -2.45209050]
[104.66346741 -14.85561752]
[98.50675964 -28.57912827]
[94.89963531 -43.18147278]
[93.95803070 -58.19323730]
[95.71222687 -73.13186646]
[100.10582733 -87.51713562]
[106.99760437 -100.88662720]
[116.16600800 -112.81055450]
[127.31631470 -122.90562439]
[140.09008789 -130.84732056]
[154.07670593 -136.38035583]
[168.82655334 -139.32684326]
[183.86547852 -139.59208679]
[198.71005249 -137.16755676]
[212.88308716 -132.13117981]
[225.92895508 -124.64486694]
[237.42831421 -114.94927216]
[247.01148987 -103.35605621]
[254.37043762 -90.23791504]
[259.26858521 -76.01651764]
[261.54846191 -61.14904404]
[261.13681030 -46.11340714]
[258.04684448 -31.39294815]
[252.37789917 -17.46086693]
[244.31221008 -4.76502228]
[234.10906982 6.28646708]
[222.09643555 15.33834076]
[208.66047668 22.09961891]
[194.23310852 26.35295677]
[179.27810669 27.96162224]
[164.27621460 26.87390709]
[149.70968628 23.12477493]
[143.44029236 36.75175476]
[137.17088318 50.37873459]
[130.90147400 64.00571442]
[124.63207245 77.63269043]
[131.72846985 90.84787750]
[146.55094910 93.14875031]
[161.37344360 95.44962311]
[169.24603271 82.44613647]
[181.49855042 73.44922638]
[196.26254272 69.83084869]
[211.28663635 72.14278412]
[224.27975464 80.03247833]
[233.26054382 92.29680634]
[236.85949707 107.06555939]
[234.52780151 122.08660126]
[226.62103271 135.06932068]
[214.34489441 144.03398132]
[199.57141113 147.61349487]
[184.55345154 145.26203918]
[171.58114624 137.33819580]
[162.63264465 125.05027771]
[159.07257080 110.27210999]
[144.25007629 107.97122955]
[129.42759705 105.67035675]
[119.80059052 122.60498047]
[101.75521088 130.08143616]
[102.67862701 145.05299377]
[115.70590210 147.70970154]
[127.69665527 153.42909241]
[137.94335938 161.86805725]
[145.84275818 172.52323914]
[150.93136597 184.76092529]
[152.91267395 197.85488892]
[151.67442322 211.02937317]
[147.29493713 223.50506592]
[140.03820801 234.54525757]
[130.33796692 243.49926758]
[118.77178192 249.84086609]
[106.02665710 253.19914246]
[106.02665710 268.19912720]
[106.02665710 283.19912720]
[106.02665710 298.19912720]
[106.02665710 313.19912720]
[106.02665710 328.19912720]
[106.02665710 343.19912720]
[106.02665710 358.19912720]
[106.02665710 373.19912720]
[106.02665710 388.19912720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 131]
[20 130]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[109 128]
[110 127]
[111 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
