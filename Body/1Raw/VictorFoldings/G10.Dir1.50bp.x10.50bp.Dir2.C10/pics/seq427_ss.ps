%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.81562042 303.25875854]
[116.81562042 288.25875854]
[116.81562042 273.25875854]
[116.81562042 258.25875854]
[116.81562042 243.25874329]
[116.81562042 228.25874329]
[116.81562042 213.25874329]
[116.81562042 198.25874329]
[116.81562042 183.25874329]
[116.81562042 168.25874329]
[113.90814972 153.54322815]
[108.20348358 139.67033386]
[102.49881744 125.79746246]
[84.38944244 126.39682770]
[67.46439362 113.99115753]
[57.13349152 124.86647034]
[53.82516098 140.92845154]
[38.17780304 145.83682251]
[26.28807640 134.54229736]
[30.38711548 118.66368866]
[46.25817871 114.53556824]
[56.58908081 103.66025543]
[54.61077499 96.42587280]
[40.10206985 92.61830902]
[50.65416336 81.95709991]
[48.67586136 74.72271729]
[34.24847412 70.61777496]
[19.82109070 66.51283264]
[10.64717102 67.17236328]
[5.14125395 62.17266083]
[-9.19880772 57.77235794]
[-23.53886795 53.37205887]
[-39.00165176 56.72062302]
[-48.89921570 45.59014511]
[-63.23927689 41.18984222]
[-69.85601807 42.31294250]
[-75.21619415 40.20193481]
[-78.07099152 36.30329895]
[-92.21830750 31.31797600]
[-106.36562347 26.33265495]
[-120.51293945 21.34733200]
[-132.12419128 31.40090561]
[-147.20964050 34.28616714]
[-161.71138000 29.22699547]
[-171.72851562 17.58428574]
[-174.56646729 2.48986411]
[-169.46186829 -11.99594307]
[-157.78781128 -21.97652817]
[-142.68457031 -24.76716232]
[-128.21484375 -19.61717987]
[-118.27089691 -7.91189957]
[-115.52761841 7.20001602]
[-101.38030243 12.18533802]
[-87.23298645 17.17066002]
[-73.08567047 22.15598106]
[-58.83897400 26.84978294]
[-44.49891281 31.25008202]
[-30.06182671 27.58678055]
[-19.13856888 39.03199768]
[-4.79850721 43.43229675]
[9.54155445 47.83259964]
[23.92603493 52.08544540]
[38.35342026 56.19039154]
[52.78080368 60.29533386]
[42.08759689 49.77605057]
[28.60018158 43.21178436]
[18.02289200 32.57595062]
[11.53316879 19.05250740]
[9.85343266 4.14685535]
[13.17066765 -10.48174572]
[21.11560822 -23.20487022]
[32.80384064 -32.60621262]
[46.93425751 -37.63923645]
[61.93389130 -37.74367523]
[76.13302612 -32.90790176]
[87.95103455 -23.67022705]
[96.07237244 -11.05896664]
[99.59298706 3.52202368]
[98.12096405 18.44962120]
[91.82018280 32.06211853]
[81.38949585 42.84606552]
[74.93898010 56.38825226]
[87.09231567 47.59640884]
[99.24564362 38.80456543]
[111.39897919 30.01272202]
[122.98802948 20.48938560]
[133.96882629 10.27067852]
[144.94963074 0.05197103]
[155.93043518 -10.16673660]
[166.91123962 -20.38544273]
[177.89204407 -30.60415077]
[188.87284851 -40.82285690]
[199.85363770 -51.04156494]
[210.83444214 -61.26027298]
[215.12528992 -77.08811951]
[231.04513550 -81.02392578]
[242.21701050 -69.01886749]
[237.14823914 -53.42272568]
[221.05314636 -50.27946854]
[210.07235718 -40.06076431]
[199.09155273 -29.84205437]
[188.11074829 -19.62334824]
[177.12994385 -9.40464115]
[166.14913940 0.81406635]
[155.16833496 11.03277397]
[144.18753052 21.25148010]
[133.20672607 31.47018814]
[148.06924438 33.49649429]
[157.29629517 45.32279968]
[155.64698792 60.23184967]
[144.05813599 69.75541687]
[129.11209106 68.48417664]
[119.29812622 57.14019394]
[120.19081879 42.16605759]
[108.03749084 50.95789719]
[95.88415527 59.74974060]
[83.73081970 68.54158020]
[108.38288116 68.03926086]
[125.64373016 83.18093109]
[127.96093750 104.32029724]
[116.37169647 120.09279633]
[122.07636261 133.96568298]
[127.78102875 147.83856201]
[130.11544800 133.02131653]
[136.63957214 119.51444244]
[146.79463196 108.47473907]
[159.71084595 100.84773254]
[174.28201294 97.28665161]
[189.26013184 98.09648895]
[203.36238098 103.20789337]
[215.38095093 112.18307495]
[224.28648376 124.25334930]
[229.31625366 138.38491821]
[230.03945923 153.36747742]
[226.39418030 167.91780090]
[218.69261169 180.78970337]
[207.59436035 190.88073730]
[194.04998779 197.32664490]
[179.21949768 199.57534790]
[164.37309265 197.43426514]
[150.78231812 191.08674622]
[139.61119080 181.07646179]
[131.81561279 168.25874329]
[131.81561279 183.25874329]
[131.81561279 198.25874329]
[131.81561279 213.25874329]
[131.81561279 228.25874329]
[131.81561279 243.25874329]
[131.81561279 258.25875854]
[131.81561279 273.25875854]
[131.81561279 288.25875854]
[131.81561279 303.25875854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 123]
[12 122]
[13 121]
[15 22]
[16 21]
[26 64]
[27 63]
[28 62]
[30 61]
[31 60]
[32 59]
[34 57]
[35 56]
[38 55]
[39 54]
[40 53]
[41 52]
[82 117]
[83 116]
[84 115]
[85 114]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
