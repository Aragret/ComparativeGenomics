%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGxxxxxxxxxxCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 281.98788452]
[92.50000000 266.98788452]
[92.50000000 251.98788452]
[92.50000000 236.98788452]
[92.50000000 221.98788452]
[92.50000000 206.98788452]
[92.50000000 191.98788452]
[92.50000000 176.98788452]
[92.50000000 161.98788452]
[92.50000000 146.98788452]
[86.99711609 145.77156067]
[81.67662811 143.91316223]
[76.61318970 141.43873596]
[71.87782288 138.38299561]
[61.21619797 148.93429565]
[50.55457306 159.48558044]
[49.03361511 175.45637512]
[35.52062988 184.10385132]
[20.38162994 178.79440308]
[15.22995567 163.60099792]
[24.01753235 150.17869568]
[40.00328445 148.82395935]
[50.66490936 138.27265930]
[61.32653427 127.72137451]
[58.70994186 123.64830780]
[56.52074814 119.33045197]
[42.02515411 123.18760681]
[27.52955627 127.04476929]
[13.03395939 130.90193176]
[1.80618978 142.85472107]
[-14.09511662 138.84466553]
[-18.31205750 122.99697113]
[-6.50660753 111.61438751]
[9.17680073 116.40633392]
[23.67239761 112.54917145]
[38.16799164 108.69200897]
[52.66358948 104.83485413]
[58.56439590 76.60765076]
[79.68424988 56.97231293]
[108.26595306 53.14078903]
[113.16750336 38.96423340]
[118.06905365 24.78767395]
[122.97060394 10.61111641]
[127.87216187 -3.56544161]
[132.77371216 -17.74200058]
[119.71217346 -25.20071793]
[108.24669647 -34.93000793]
[98.76680756 -46.59739685]
[91.59422302 -59.80460739]
[86.97193146 -74.10114288]
[85.05595398 -88.99966431]
[85.91010284 -103.99256897]
[89.50381470 -118.56935120]
[95.71327972 -132.23390198]
[104.32569122 -144.52146912]
[115.04652405 -155.01440430]
[127.50965118 -163.35639954]
[141.28979492 -169.26458740]
[155.91705322 -172.53907776]
[170.89297485 -173.06979370]
[185.70745850 -170.84013367]
[190.60900879 -185.01669312]
[183.13548279 -198.38261414]
[186.16369629 -213.08355713]
[197.82926941 -222.03750610]
[198.45324707 -237.02452087]
[199.07722473 -252.01155090]
[184.89025879 -257.26370239]
[173.02189636 -266.64437866]
[164.63490295 -279.23458862]
[160.55093384 -293.80087280]
[161.17012024 -308.91616821]
[166.43176270 -323.09960938]
[175.82040405 -334.96166992]
[188.41622925 -343.34024048]
[202.98524475 -347.41442871]
[218.10011292 -346.78512573]
[232.28002930 -341.51397705]
[244.13580322 -332.11740112]
[252.50592041 -319.51596069]
[256.57034302 -304.94421387]
[255.93092346 -289.82977295]
[250.65028381 -275.65338135]
[241.24574280 -263.80392456]
[228.63870239 -255.44224548]
[214.06423950 -251.38757324]
[213.44026184 -236.40055847]
[212.81628418 -221.41352844]
[213.73040771 -220.99035645]
[214.62301636 -220.52352905]
[226.12483215 -230.15205383]
[237.62663269 -239.78057861]
[249.12843323 -249.40910339]
[260.63024902 -259.03762817]
[265.74557495 -274.61856079]
[281.85000610 -277.71371460]
[292.37664795 -265.13906860]
[286.49661255 -249.83032227]
[270.25875854 -247.53582764]
[258.75695801 -237.90730286]
[247.25515747 -228.27877808]
[235.75335693 -218.65025330]
[224.25155640 -209.02172852]
[222.08766174 -189.87345886]
[204.78555298 -180.11514282]
[199.88400269 -165.93858337]
[212.91192627 -158.54173279]
[224.36183167 -148.87426758]
[233.84280396 -137.26434326]
[241.03082275 -124.10641479]
[245.67980957 -109.84789276]
[247.63002014 -94.97393036]
[246.81361389 -79.99089813]
[243.25691223 -65.40915680]
[237.07962036 -51.72565079]
[228.49078369 -39.40700912]
[217.78172302 -28.87360573]
[205.31610107 -20.48521996]
[191.51766968 -14.52874660]
[176.85575867 -11.20839500]
[161.82939148 -10.63867283]
[146.95027161 -12.84044933]
[142.04872131 1.33610916]
[137.14717102 15.51266766]
[132.24562073 29.68922615]
[127.34406281 43.86578369]
[122.44251251 58.04234314]
[129.51739502 62.67929840]
[135.65940857 68.49574280]
[140.67443848 75.30786133]
[144.40397644 82.90034485]
[146.73017883 91.03325653]
[147.57949829 99.44954681]
[146.92510986 107.88323975]
[144.78768921 116.06778717]
[141.23480225 123.74452972]
[136.37872314 130.67083740]
[130.37290955 136.62782288]
[123.40719604 141.42721558]
[115.70172119 144.91734314]
[107.50000000 146.98788452]
[107.50000000 161.98788452]
[107.50000000 176.98788452]
[107.50000000 191.98788452]
[107.50000000 206.98788452]
[107.50000000 221.98788452]
[107.50000000 236.98788452]
[107.50000000 251.98788452]
[107.50000000 266.98788452]
[107.50000000 281.98788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 24]
[15 23]
[16 22]
[26 37]
[27 36]
[28 35]
[29 34]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[61 106]
[62 105]
[65 88]
[66 87]
[67 86]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
