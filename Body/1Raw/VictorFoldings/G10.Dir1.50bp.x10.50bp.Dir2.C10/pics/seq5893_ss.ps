%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGxxxxxxxxxxGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.10571289 291.81903076]
[106.10571289 276.81903076]
[106.10571289 261.81903076]
[106.10571289 246.81903076]
[106.10571289 231.81903076]
[106.10571289 216.81903076]
[106.10571289 201.81903076]
[106.10571289 186.81903076]
[106.10571289 171.81903076]
[106.10571289 156.81903076]
[92.97390747 156.01121521]
[80.53539276 152.24615479]
[69.43807983 145.79714966]
[60.24211121 137.07516479]
[53.39162445 126.60323334]
[49.19360733 114.98558044]
[47.80462265 102.87283325]
[49.22609329 90.92569733]
[53.30811691 79.77894592]
[59.76143646 70.00765991]
[49.20942307 59.34674835]
[38.65740585 48.68584061]
[25.74739456 47.82838058]
[17.17565918 38.67979050]
[17.16166306 26.54463577]
[6.83076048 15.66932106]
[-3.50014210 4.79400730]
[-13.83104515 -6.08130646]
[-24.38306046 -16.74221611]
[-35.15173721 -27.18422508]
[-45.92041779 -37.62623215]
[-58.25170135 -46.16669083]
[-71.81359863 -52.57566833]
[-85.37549591 -58.98464203]
[-98.93739319 -65.39361572]
[-113.65800476 -60.30036163]
[-127.32039642 -66.99317169]
[-132.08532715 -81.05841064]
[-145.64721680 -87.46738434]
[-159.20912170 -93.87636566]
[-172.77101135 -100.28533936]
[-186.34510803 -93.00180054]
[-201.42889404 -95.08338928]
[-212.26647949 -105.52422333]
[-214.84706116 -120.16931152]
[-228.40895081 -126.57828522]
[-241.97084045 -132.98725891]
[-258.87481689 -134.28811646]
[-262.30429077 -150.89157104]
[-247.29905701 -158.78332520]
[-235.56187439 -146.54914856]
[-221.99996948 -140.14018250]
[-208.43807983 -133.73120117]
[-195.48484802 -141.03544617]
[-180.53756714 -139.29106140]
[-169.35279846 -128.95886230]
[-166.36203003 -113.84723663]
[-152.80014038 -107.43826294]
[-139.23825073 -101.02928162]
[-125.67634583 -94.62030792]
[-111.78429413 -99.86878204]
[-97.93930817 -93.56236267]
[-92.52841187 -78.95551300]
[-78.96652222 -72.54653931]
[-65.40462494 -66.13756561]
[-51.84272766 -59.72858810]
[-59.87910080 -72.39415741]
[-63.19149017 -87.02385712]
[-61.39457321 -101.91584015]
[-54.69738388 -115.33774567]
[-43.87898636 -125.72823334]
[-30.19786644 -131.87860107]
[-15.24552631 -133.07337952]
[-0.76134020 -129.17359924]
[11.56977463 -120.63289642]
[20.31336212 -108.44480133]
[24.45229721 -94.02713013]
[23.50510788 -79.05706787]
[17.58197594 -65.27604675]
[7.37192917 -54.28718948]
[-5.93731642 -47.36880875]
[-20.79752350 -45.32570648]
[-35.47840881 -48.39491272]
[-24.70973015 -37.95290375]
[-13.94105053 -27.51089478]
[-9.17864323 -26.69315910]
[-4.89970970 -22.83588028]
[-2.95573092 -16.41220856]
[7.37517166 -5.53689528]
[17.70607376 5.33841848]
[28.03697777 16.21373177]
[45.09061432 20.24088669]
[49.31831360 38.13382339]
[59.87033081 48.79473495]
[70.42234802 59.45564270]
[86.15015411 51.76241684]
[103.56362152 49.94020462]
[120.54337311 54.21078110]
[135.02278137 64.05437469]
[145.23954773 78.27292633]
[159.57960510 73.87262726]
[173.91967773 69.47232056]
[184.84292603 58.02710724]
[199.28001404 61.69040680]
[213.62007141 57.29010773]
[224.38977051 44.92297745]
[240.43080139 48.33137131]
[245.24154663 64.00902557]
[233.87312317 75.82810974]
[218.02037048 71.63017273]
[203.68031311 76.03047180]
[193.78276062 87.16094971]
[178.31997681 83.81238556]
[163.97990417 88.21268463]
[149.63984680 92.61298370]
[152.98658752 108.51432800]
[151.04302979 125.69613647]
[165.08500671 130.97087097]
[179.12698364 136.24562073]
[193.16896057 141.52035522]
[207.21093750 146.79510498]
[223.29203796 143.58102417]
[233.91130066 156.07754517]
[228.14456177 171.42932129]
[211.92411804 173.84373474]
[201.93618774 160.83708191]
[187.89421082 155.56233215]
[173.85223389 150.28759766]
[159.81025696 145.01284790]
[145.76828003 139.73811340]
[139.60264587 144.00834656]
[149.39678955 155.36944580]
[159.19093323 166.73054504]
[168.98509216 178.09164429]
[180.66014099 187.50935364]
[180.11218262 202.49934387]
[167.78070068 211.03950500]
[153.55563354 206.28056335]
[148.84550476 192.04000854]
[141.65412903 178.87628174]
[134.46273804 165.71253967]
[127.27135468 152.54879761]
[121.10571289 156.81903076]
[121.10571289 171.81903076]
[121.10571289 186.81903076]
[121.10571289 201.81903076]
[121.10571289 216.81903076]
[121.10571289 231.81903076]
[121.10571289 246.81903076]
[121.10571289 261.81903076]
[121.10571289 276.81903076]
[121.10571289 291.81903076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 95]
[21 94]
[22 93]
[25 91]
[26 90]
[27 89]
[28 88]
[29 85]
[30 84]
[31 83]
[32 66]
[33 65]
[34 64]
[35 63]
[38 60]
[39 59]
[40 58]
[41 57]
[45 53]
[46 52]
[47 51]
[100 115]
[101 114]
[102 113]
[104 111]
[105 110]
[117 130]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
