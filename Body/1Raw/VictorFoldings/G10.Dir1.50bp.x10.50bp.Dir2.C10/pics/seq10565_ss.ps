%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCxxxxxxxxxxCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.87286377 443.49295044]
[188.87286377 428.49295044]
[188.87286377 413.49295044]
[188.87286377 398.49295044]
[188.87286377 383.49295044]
[188.87286377 368.49295044]
[188.87286377 353.49295044]
[188.87286377 338.49295044]
[188.87286377 323.49295044]
[188.87286377 308.49295044]
[185.46989441 293.88406372]
[178.84138489 280.42810059]
[164.78846741 282.38931274]
[150.79730225 279.90155029]
[138.24388123 273.19598389]
[128.36697388 262.91921997]
[122.14588928 250.07104492]
[120.20336151 235.90704346]
[122.74330902 221.81605530]
[129.52943420 209.18389893]
[139.90721130 199.25708008]
[133.56007385 185.66612244]
[127.21294403 172.07518005]
[120.86581421 158.48422241]
[114.51868439 144.89326477]
[108.17155457 131.30232239]
[101.82442474 117.71137238]
[103.66624451 132.59786987]
[97.52127838 146.28140259]
[85.17118073 154.79464722]
[70.19670105 155.66926575]
[56.93949127 148.65168762]
[49.24330139 135.77656555]
[49.33953857 120.77687836]
[57.20030212 108.00157928]
[70.54647064 101.15469360]
[85.50618744 102.22056580]
[71.60363007 96.58860779]
[55.90804672 98.57835388]
[47.01701355 86.62850952]
[33.11445999 80.99655151]
[19.21190262 75.36460114]
[5.30934715 69.73264313]
[-8.59320927 64.10068512]
[-23.86784744 69.00628662]
[-37.14646149 60.00306702]
[-38.24283218 43.99752045]
[-26.31591797 33.26773453]
[-10.51502800 36.04468155]
[-2.96125221 50.19812775]
[10.94130325 55.83008575]
[24.84386063 61.46203995]
[38.74641418 67.09400177]
[52.64897156 72.72595215]
[67.35015869 70.33336639]
[77.23558807 82.68605042]
[91.13814545 88.31800842]
[104.30673218 81.13549805]
[107.09905243 66.39768982]
[105.61789703 57.31705093]
[110.10581970 51.38373184]
[113.20413971 36.70720673]
[115.99645996 21.96940041]
[118.48158264 7.17669392]
[120.96669769 -7.61601353]
[123.45182037 -22.40872002]
[125.93693542 -37.20142746]
[112.09638214 -43.17658234]
[100.08837891 -52.29093170]
[90.61106873 -64.01457977]
[84.21543121 -77.66593170]
[81.27331543 -92.45130920]
[81.95576477 -107.51110840]
[86.22310638 -121.96978760]
[93.82723999 -134.98672485]
[104.32607269 -145.80513000]
[117.10921478 -153.79603577]
[131.43347168 -158.49487305]
[146.46604919 -159.62844849]
[161.33297729 -157.13087463]
[175.16990662 -151.14732361]
[187.17237854 -142.02569580]
[196.64259338 -130.29631042]
[203.02993774 -116.64108276]
[205.96310425 -101.85391998]
[205.27151489 -86.79453278]
[200.99540710 -72.33844757]
[193.38339233 -59.32612991]
[182.87799072 -48.51408768]
[170.09001160 -40.53092575]
[155.76290894 -35.84077454]
[140.72964478 -34.71630859]
[138.24452209 -19.92360306]
[135.75939941 -5.13089514]
[133.27429199 9.66181183]
[130.78916931 24.45451927]
[132.82075500 28.84179115]
[132.07194519 34.55760956]
[127.88066101 39.80552673]
[124.78234100 54.48205566]
[121.83686066 69.19001770]
[119.04453278 83.92781830]
[115.41537476 111.36424255]
[121.76250458 124.95519257]
[128.10963440 138.54614258]
[134.45677185 152.13710022]
[140.80389404 165.72804260]
[147.15103149 179.31900024]
[153.49815369 192.90994263]
[169.33094788 191.42520142]
[184.69203186 195.43368530]
[197.73646545 204.43502808]
[206.90399170 217.33036804]
[211.10572815 232.55639648]
[209.85339355 248.27496338]
[203.31599426 262.59490967]
[192.29734802 273.79959106]
[198.92585754 287.25555420]
[200.22761536 272.31216431]
[205.28338623 258.18984985]
[213.76138306 245.81555176]
[225.10516357 236.00134277]
[238.57023621 229.39137268]
[253.27288818 226.41943359]
[268.24813843 227.28059387]
[282.51318359 231.91833496]
[295.13177490 240.02827454]
[305.27575684 251.07814026]
[312.27935791 264.34274292]
[315.68295288 278.95150757]
[315.26312256 293.94561768]
[311.04745483 308.34103394]
[303.31259155 321.19296265]
[292.56622314 331.65792847]
[279.51361084 339.04910278]
[265.01141357 342.88137817]
[250.01142883 342.90325928]
[235.49812317 339.11331177]
[222.42399597 331.76025391]
[211.64714050 321.32669067]
[203.87286377 308.49295044]
[203.87286377 323.49295044]
[203.87286377 338.49295044]
[203.87286377 353.49295044]
[203.87286377 368.49295044]
[203.87286377 383.49295044]
[203.87286377 398.49295044]
[203.87286377 413.49295044]
[203.87286377 428.49295044]
[203.87286377 443.49295044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[21 109]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[27 103]
[37 57]
[38 56]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[58 102]
[59 101]
[61 100]
[62 99]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
