%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGxxxxxxxxxxCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.30171967 569.65008545]
[120.30171967 554.65008545]
[120.30171967 539.65008545]
[120.30171967 524.65008545]
[120.30171967 509.65008545]
[120.30171967 494.65008545]
[120.30171967 479.65008545]
[120.30171967 464.65008545]
[120.30171967 449.65008545]
[120.30171967 434.65008545]
[118.27938843 419.78701782]
[115.83690643 418.28982544]
[113.86068726 415.70361328]
[112.78050995 412.20858765]
[112.95001221 408.14135742]
[114.59329224 403.96270752]
[111.80096436 389.22491455]
[109.00864410 374.48712158]
[106.21631622 359.74929810]
[103.11799622 345.07278442]
[99.71501923 330.46389771]
[96.31204224 315.85498047]
[92.90906525 301.24609375]
[88.29868317 295.40744019]
[89.59060669 286.29794312]
[86.49227905 271.62142944]
[83.39395905 256.94488525]
[77.62002563 270.78909302]
[66.79235840 281.16992188]
[52.71725845 286.35562134]
[37.74277496 285.48114014]
[24.36697769 278.69232178]
[14.82125568 267.12170410]
[10.69804859 252.69950867]
[12.68519974 237.83172607]
[20.45120621 224.99859619]
[32.70052719 216.34098816]
[47.38969803 213.30319214]
[62.06823730 216.39195251]
[74.28742981 225.09202576]
[82.00838470 237.95068359]
[82.94401550 222.97990417]
[83.87963867 208.00910950]
[74.06381989 199.60395813]
[70.85292816 186.88529968]
[75.64314270 174.46427917]
[86.88700867 166.97875977]
[88.13388824 152.03067017]
[89.38076019 137.08258057]
[79.46582031 132.65322876]
[71.17835999 125.63589478]
[65.17520905 116.58673859]
[61.93215942 106.22296906]
[61.70624161 95.36598206]
[64.51536560 84.87628174]
[70.13689423 75.58523560]
[78.12527466 68.22922516]
[87.84737396 63.39126205]
[85.97975922 48.50798416]
[84.11214447 33.62470245]
[82.24452972 18.74142456]
[80.37692261 3.85814404]
[78.50930786 -11.02513599]
[63.64824677 -13.85427666]
[50.38976288 -21.13904572]
[40.03279495 -32.16576004]
[33.59200668 -45.85412598]
[31.69840622 -60.86310577]
[34.53750229 -75.72226715]
[41.83115387 -88.97586823]
[52.86480331 -99.32544708]
[66.55748749 -105.75705719]
[81.56773376 -107.64060211]
[96.42498779 -104.79154968]
[109.67369080 -97.48901367]
[120.01587677 -86.44843292]
[126.43831635 -72.75144958]
[128.31179810 -57.73994446]
[125.45278931 -42.88459778]
[118.14138794 -29.64078903]
[107.09387207 -19.30600739]
[93.39258575 -12.89274883]
[95.26020050 1.99053085]
[97.12781525 16.87380981]
[98.99542236 31.75709152]
[100.86303711 46.64036942]
[102.73065186 61.52365112]
[107.68712616 62.20060730]
[112.51431274 63.51331711]
[117.13101196 65.43970490]
[121.45959473 67.94735718]
[125.42723846 70.99411011]
[137.31961060 61.85237885]
[149.21199036 52.71064377]
[161.10437012 43.56890869]
[166.86343384 28.21425819]
[183.08265686 25.79170609]
[193.07710266 38.79336548]
[186.56533813 53.84424591]
[170.24610901 55.46128845]
[158.35372925 64.60301971]
[146.46134949 73.74475861]
[134.56896973 82.88648987]
[137.95230103 106.89268494]
[126.34371185 128.17613220]
[104.32884979 138.32945251]
[103.08197021 153.27754211]
[101.83509827 168.22563171]
[113.36961365 181.33639526]
[111.91436768 198.39999390]
[98.85043335 208.94473267]
[97.91480255 223.91552734]
[96.97917175 238.88632202]
[98.07048798 253.84657288]
[101.16880798 268.52310181]
[104.26712799 283.19961548]
[107.51795197 297.84310913]
[110.92093658 312.45202637]
[114.32391357 327.06091309]
[117.72689056 341.66979980]
[122.02644348 346.82937622]
[122.89400482 352.52838135]
[120.95412445 356.95697021]
[123.74645233 371.69479370]
[126.53877258 386.43258667]
[129.33110046 401.17037964]
[132.73406982 415.77929688]
[137.63323975 401.60189819]
[147.79231262 390.56591797]
[161.51654053 384.51235962]
[176.51641846 384.45111084]
[190.28962708 390.39239502]
[200.53846741 401.34506226]
[205.55323792 415.48196411]
[204.49734497 430.44476318]
[197.54692078 443.73730469]
[185.86148071 453.14212036]
[171.39039612 457.09024048]
[156.54777527 454.92306519]
[143.80970764 447.00210571]
[135.30172729 434.65008545]
[135.30172729 449.65008545]
[135.30172729 464.65008545]
[135.30172729 479.65008545]
[135.30172729 494.65008545]
[135.30172729 509.65008545]
[135.30172729 524.65008545]
[135.30172729 539.65008545]
[135.30172729 554.65008545]
[135.30172729 569.65008545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 120]
[21 119]
[22 118]
[23 117]
[25 116]
[26 115]
[27 114]
[41 113]
[42 112]
[43 111]
[47 108]
[48 107]
[49 106]
[58 87]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
