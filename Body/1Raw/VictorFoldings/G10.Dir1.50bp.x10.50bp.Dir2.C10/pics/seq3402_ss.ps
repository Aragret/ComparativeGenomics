%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACxxxxxxxxxxUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 288.18975830]
[92.50000000 273.18975830]
[92.50000000 258.18975830]
[92.50000000 243.18974304]
[92.50000000 228.18974304]
[92.50000000 213.18974304]
[92.50000000 198.18974304]
[92.50000000 183.18974304]
[92.50000000 168.18974304]
[92.50000000 153.18974304]
[84.36732483 151.39083862]
[76.61052704 148.35629272]
[69.41609955 144.15907288]
[62.95702744 138.90010071]
[57.38861847 132.70581055]
[52.84475708 125.72513580]
[38.80278015 130.99987793]
[24.76080513 136.27461243]
[10.71882820 141.54936218]
[-3.32314825 146.82409668]
[-17.36512375 152.09884644]
[-31.40710068 157.37358093]
[-45.33781815 162.93551636]
[-59.15140152 168.78230286]
[-72.96498108 174.62908936]
[-86.77856445 180.47589111]
[-96.22408295 193.88163757]
[-112.52996826 192.13517761]
[-118.92212677 177.03311157]
[-108.82485199 164.11114502]
[-92.62535095 166.66230774]
[-78.81176758 160.81550598]
[-64.99819183 154.96871948]
[-51.18460464 149.12193298]
[-48.57522964 145.05494690]
[-43.35517120 142.61796570]
[-36.68184280 143.33160400]
[-22.63986588 138.05686951]
[-8.59788990 132.78211975]
[5.44408655 127.50738525]
[19.48606300 122.23264313]
[33.52803802 116.95790100]
[47.57001495 111.68315887]
[46.52421570 105.07346344]
[46.30836868 98.38503265]
[46.92581940 91.72166443]
[48.36698914 85.18677521]
[50.60951233 78.88179016]
[37.77585602 71.11665344]
[21.37798309 71.32109833]
[13.23575306 57.08607101]
[21.72519302 43.05533600]
[38.11309433 43.66251755]
[45.54099274 58.28299713]
[58.37464523 66.04813385]
[89.04769897 47.41248703]
[124.61016846 52.25338745]
[133.27677917 40.01043320]
[141.94338989 27.76748085]
[128.19429016 33.76435852]
[113.44451141 36.49269485]
[98.46001434 35.81079865]
[84.01899719 31.75408363]
[70.87140656 24.53322220]
[59.70002747 14.52321053]
[51.08501816 2.24389386]
[45.47377777 -11.66703606]
[43.15770721 -26.48715210]
[44.25708771 -41.44680786]
[48.71482468 -55.76911926]
[56.29941559 -68.71028900]
[66.61698151 -79.59825897]
[79.13169861 -87.86759186]
[93.19365692 -93.08882904]
[108.07257843 -94.99083710]
[122.99577332 -93.47483063]
[137.18824768 -88.61953735]
[149.91293335 -80.67710876]
[160.50903320 -70.06001282]
[168.42625427 -57.31961823]
[173.25343323 -43.11756516]
[174.73989868 -28.19139671]
[172.80844116 -13.31626797]
[167.55935669 0.73532373]
[159.26802063 13.23037720]
[172.82992554 6.82140160]
[186.39181519 0.41242585]
[199.95372009 -5.99654961]
[213.51560974 -12.40552521]
[227.07751465 -18.81450081]
[228.84918213 -30.64452744]
[236.06114197 -40.03671646]
[246.81217957 -44.70650101]
[258.35946655 -43.58961487]
[267.81805420 -37.08221436]
[281.63162231 -42.92900085]
[295.44522095 -48.77579117]
[294.94848633 -63.94542313]
[299.96890259 -78.26882172]
[309.82748413 -89.80887604]
[323.19094849 -97.00487518]
[338.25198364 -98.88362885]
[352.97369385 -95.19105530]
[365.36514282 -86.42652893]
[373.75042725 -73.77539062]
[376.99554443 -58.94860077]
[374.66159058 -43.95136261]
[367.06427002 -30.81192780]
[355.23098755 -21.30729675]
[340.76211548 -16.72289467]
[325.61450195 -17.67872238]
[311.83666992 -24.04551125]
[301.29199219 -34.96220779]
[287.47842407 -29.11541939]
[273.66482544 -23.26863098]
[267.87738037 -5.94863415]
[251.00543213 1.83077717]
[233.48648071 -5.25260496]
[219.92459106 1.15637088]
[206.36268616 7.56534672]
[192.80079651 13.97432232]
[179.23890686 20.38329697]
[165.67700195 26.79227257]
[154.18634033 36.43408585]
[145.51972961 48.67704010]
[136.85311890 60.91999435]
[141.67897034 66.11397552]
[145.77873230 71.89827728]
[149.08099365 78.17214203]
[151.52821350 84.82626343]
[153.07777405 91.74472046]
[153.70266724 98.80699921]
[153.39201355 105.89006042]
[152.15121460 112.87050629]
[150.00190735 119.62673950]
[146.98150635 126.04106140]
[143.14266968 132.00172424]
[138.55223083 137.40487671]
[133.29017639 142.15641785]
[127.44818878 146.17355347]
[121.12802124 149.38629150]
[114.43978882 151.73869324]
[107.50000000 153.18974304]
[107.50000000 168.18974304]
[107.50000000 183.18974304]
[107.50000000 198.18974304]
[107.50000000 213.18974304]
[107.50000000 228.18974304]
[107.50000000 243.18974304]
[107.50000000 258.18975830]
[107.50000000 273.18975830]
[107.50000000 288.18975830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 34]
[24 33]
[25 32]
[26 31]
[48 55]
[49 54]
[57 126]
[58 125]
[59 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
