%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAxxxxxxxxxxCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.51673889 587.76409912]
[161.08291626 568.55310059]
[161.37559509 553.55590820]
[161.66825867 538.55877686]
[161.96093750 523.56164551]
[162.25361633 508.56448364]
[162.54629517 493.56735229]
[162.83897400 478.57019043]
[163.13165283 463.57305908]
[163.42431641 448.57592773]
[163.71699524 433.57876587]
[161.81958008 418.69924927]
[158.12615967 415.59936523]
[156.37133789 410.12707520]
[157.90832520 403.61267090]
[154.42799377 389.02200317]
[150.94766235 374.43136597]
[147.46733093 359.84069824]
[143.98699951 345.25003052]
[140.50666809 330.65939331]
[126.19272614 326.53909302]
[115.79386139 315.73541260]
[112.17498016 301.08038330]
[116.40518951 286.48577881]
[127.44461060 275.89907837]
[123.96427917 261.30841064]
[120.48394775 246.71775818]
[117.00361633 232.12710571]
[106.52445984 221.54237366]
[110.84866333 206.32357788]
[107.36833191 191.73292542]
[94.58500671 184.17500305]
[90.84761047 169.42758179]
[98.86172485 156.07049561]
[95.38139343 141.47984314]
[91.90106201 126.88918304]
[88.42073059 112.29852295]
[78.07596588 101.43639374]
[63.67237854 97.24871826]
[54.50630569 97.85601044]
[49.03009033 92.83625793]
[34.71095276 88.36833954]
[20.39181328 83.90042114]
[8.63028240 93.88390350]
[-6.66462994 95.90113068]
[-20.61237335 89.30840302]
[-28.76227188 76.20944977]
[-28.51372337 60.78408432]
[-19.94603920 47.95449829]
[-5.79313660 41.81455612]
[9.42884636 44.32349777]
[20.86262894 54.68072510]
[24.85973358 69.58128357]
[39.17887115 74.04920197]
[53.49800873 78.51712036]
[67.86005402 82.84513092]
[82.26364136 87.03280640]
[88.12738037 82.35662842]
[77.49472046 71.77615356]
[65.85366821 62.31645584]
[70.31881714 47.99645233]
[85.27336121 46.82958603]
[91.90563202 60.28382874]
[99.85485077 73.00428772]
[105.71858978 68.32810974]
[104.84100342 53.35380554]
[103.96341705 38.37949753]
[95.43198395 25.05563927]
[102.41141510 11.89749336]
[101.53383636 -3.07681251]
[86.94351196 -7.12666035]
[74.46012878 -15.69660187]
[65.43778992 -27.85703468]
[60.85517120 -42.28888321]
[61.20935822 -57.42669296]
[66.46192932 -71.62842560]
[76.04313660 -83.35358429]
[88.91366577 -91.33030701]
[103.67742920 -94.69334412]
[118.73296356 -93.07789612]
[132.44714355 -86.65919495]
[143.33238220 -76.13349152]
[150.20791626 -62.64253998]
[152.32794189 -47.64973450]
[149.46247864 -32.78137970]
[141.92237854 -19.65029144]
[130.52551270 -9.68082523]
[116.50814056 -3.95439601]
[117.38572693 11.01990986]
[125.85438538 23.27270699]
[118.93772888 37.50191498]
[119.81530762 52.47622299]
[120.69289398 67.45053101]
[127.54249573 70.50550842]
[133.65267944 56.80639267]
[147.35169983 62.91677856]
[141.24171448 76.61547089]
[148.09130859 79.67044830]
[159.81878662 70.31809998]
[158.98811340 54.82327652]
[167.45195007 41.81777573]
[181.95578003 36.30247879]
[196.92259216 40.39812851]
[206.59732056 52.52986526]
[207.25985718 68.03279114]
[198.65544128 80.94570923]
[184.09263611 86.30334473]
[169.17112732 82.04557800]
[157.44366455 91.39792633]
[139.77317810 112.95169830]
[118.21177673 117.95372772]
[103.01139069 108.81819153]
[106.49172211 123.40885162]
[109.97205353 137.99951172]
[113.45238495 152.59016418]
[126.63275909 160.89169312]
[129.95445251 175.73828125]
[121.95899200 188.25259399]
[125.43932343 202.84324646]
[136.16741943 214.47160339]
[131.59428406 228.64677429]
[135.07460022 243.23742676]
[138.55493164 257.82809448]
[142.03526306 272.41876221]
[156.66473389 276.88262939]
[167.02720642 287.99639893]
[170.41294861 302.70703125]
[166.01028442 317.04135132]
[155.09732056 327.17904663]
[158.57765198 341.76971436]
[162.05798340 356.36035156]
[165.53831482 370.95101929]
[169.01864624 385.54168701]
[172.49897766 400.13232422]
[176.26333618 414.65231323]
[180.55668640 400.27987671]
[189.67674255 388.37084961]
[202.43322754 380.47958374]
[217.16122437 377.63598633]
[231.93852234 380.21115112]
[244.83647156 387.86901855]
[254.17170715 399.61010742]
[258.72583008 413.90206909]
[257.90447998 428.87957764]
[251.81488037 442.58782959]
[241.25175476 453.23773193]
[227.59378052 459.43933105]
[212.62350464 460.38317871]
[198.29476929 455.94613647]
[186.47767639 446.70730591]
[178.71414185 433.87145996]
[178.42146301 448.86859131]
[178.12879944 463.86572266]
[177.83612061 478.86288452]
[177.54344177 493.86001587]
[177.25076294 508.85717773]
[176.95808411 523.85430908]
[176.66540527 538.85144043]
[176.37272644 553.84863281]
[176.08006287 568.84576416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[5 157]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[11 151]
[12 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[25 124]
[26 123]
[27 122]
[28 121]
[30 119]
[31 118]
[34 115]
[35 114]
[36 113]
[37 112]
[38 57]
[39 56]
[41 55]
[42 54]
[43 53]
[65 93]
[66 92]
[67 91]
[69 89]
[70 88]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
