%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACAxxxxxxxxxxAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.61428833 77.55425262]
[122.95266724 88.10554504]
[112.29103851 98.65683746]
[116.67341614 129.72471619]
[108.68350220 142.41964722]
[100.69358826 155.11457825]
[92.70367432 167.80950928]
[84.71375275 180.50444031]
[76.72383881 193.19937134]
[82.61485291 207.55470276]
[78.91022491 222.62306213]
[67.03446198 232.61035156]
[51.55403900 233.67625427]
[38.42149353 225.41090393]
[32.68655777 210.99250793]
[36.55442810 195.96524048]
[48.53783417 186.10736084]
[64.02890778 185.20945740]
[72.01882172 172.51452637]
[80.00874329 159.81959534]
[87.99865723 147.12466431]
[95.98857117 134.42973328]
[103.97849274 121.73480225]
[94.47013092 110.13346100]
[80.45342255 115.47497559]
[66.43670654 120.81649017]
[58.59011841 134.80972290]
[42.73487854 137.25735474]
[31.03376770 126.28176880]
[32.46287537 110.30249023]
[45.92591476 101.57746124]
[61.09519196 106.79977417]
[75.11190796 101.45826721]
[89.12861633 96.11675262]
[101.73974609 87.99520874]
[112.40137482 77.44391632]
[123.06300354 66.89263153]
[114.24156952 56.89299393]
[105.97109985 46.43318939]
[98.27555084 35.54353333]
[91.17721558 24.25559425]
[84.69667053 12.60208893]
[78.85267639 0.61679482]
[73.66217041 -11.66554928]
[69.14018250 -24.20934486]
[65.29981232 -36.97823334]
[62.15218353 -49.93521118]
[59.70640564 -63.04272079]
[57.96955490 -76.26277161]
[56.94666290 -89.55706024]
[56.64068222 -102.88704681]
[57.05249405 -116.21409607]
[58.18088913 -129.49960327]
[60.02259827 -142.70503235]
[62.57226562 -155.79216003]
[65.82250214 -168.72302246]
[69.76387024 -181.46015930]
[74.38494873 -193.96665955]
[79.67233276 -206.20628357]
[85.61068726 -218.14355469]
[92.18279266 -229.74388123]
[99.36960602 -240.97366333]
[107.15028381 -251.80035400]
[115.50226593 -262.19256592]
[124.40135193 -272.12020874]
[133.82173157 -281.55450439]
[143.73611450 -290.46810913]
[154.11573792 -298.83520508]
[164.93054199 -306.63159180]
[176.14915466 -313.83459473]
[187.73905945 -320.42340088]
[199.66668701 -326.37893677]
[211.89744568 -331.68392944]
[224.39588928 -336.32299805]
[237.12580872 -340.28271484]
[250.05027771 -343.55163574]
[263.13186646 -346.12026978]
[276.33264160 -347.98117065]
[289.61434937 -349.12899780]
[302.93847656 -349.56039429]
[316.26647949 -349.27413940]
[329.55963135 -348.27105713]
[342.77951050 -346.55407715]
[355.88772583 -344.12817383]
[368.84631348 -341.00036621]
[381.61773682 -337.17977905]
[394.16494751 -332.67745972]
[406.45162964 -327.50650024]
[418.44216919 -321.68182373]
[430.10180664 -315.22036743]
[441.39675903 -308.14086914]
[452.29428101 -300.46383667]
[462.76281738 -292.21154785]
[472.77203369 -283.40789795]
[482.29290771 -274.07839966]
[491.29788208 -264.25012207]
[499.76086426 -253.95156860]
[507.65728760 -243.21257019]
[514.96435547 -232.06425476]
[521.66076660 -220.53892517]
[527.72729492 -208.67001343]
[533.14624023 -196.49191284]
[537.90191650 -184.03990173]
[541.98059082 -171.35009766]
[545.37048340 -158.45925903]
[548.06170654 -145.40475464]
[550.04644775 -132.22442627]
[551.31903076 -118.95647430]
[551.87579346 -105.63933563]
[551.71508789 -92.31162262]
[550.83734131 -79.01194763]
[549.24517822 -65.77886200]
[564.01123047 -63.13999557]
[578.77728271 -60.50112915]
[593.54333496 -57.86226654]
[608.77416992 -63.94131088]
[621.48492432 -53.57944107]
[618.59991455 -37.43606186]
[603.08697510 -32.11809540]
[590.90447998 -43.09621048]
[576.13842773 -45.73507309]
[561.37237549 -48.37393951]
[546.60632324 -51.01280212]
[542.23455811 -33.41859436]
[536.58691406 -16.19118309]
[529.69372559 0.57704455]
[521.59185791 16.79616547]
[512.32476807 32.37919998]
[501.94204712 47.24257278]
[490.49935913 61.30656815]
[478.05801392 74.49575043]
[464.68469238 86.73937225]
[450.45108032 97.97175598]
[435.43347168 108.13264465]
[419.71231079 117.16752625]
[403.37194824 125.02791595]
[386.49993896 131.67163086]
[369.18670654 137.06301880]
[351.52511597 141.17311096]
[333.60983276 143.97985840]
[315.53692627 145.46815491]
[297.40325928 145.62997437]
[279.30609131 144.46441650]
[261.34243774 141.97767639]
[243.60862732 138.18305969]
[226.19975281 133.10087585]
[209.20916748 126.75830841]
[192.72799683 119.18935394]
[176.84460449 110.43453217]
[161.64419556 100.54076385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[24 34]
[25 33]
[26 32]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
