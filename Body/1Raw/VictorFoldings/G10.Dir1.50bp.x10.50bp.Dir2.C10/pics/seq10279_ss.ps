%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUAxxxxxxxxxxCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.09864807 278.98629761]
[123.17523193 264.01473999]
[122.25182343 249.04319763]
[121.32840729 234.07164001]
[120.40499115 219.10009766]
[119.48158264 204.12854004]
[118.55816650 189.15699768]
[115.80192566 174.41239929]
[111.25463104 160.11827087]
[106.70734406 145.82414246]
[102.16004944 131.52999878]
[97.61276245 117.23587799]
[97.92146301 132.23269653]
[91.47505951 145.77684021]
[79.64139557 154.99446106]
[64.93138885 157.92968750]
[50.46627426 153.95973206]
[39.31533813 143.92695618]
[33.84463882 129.96015930]
[35.21497726 115.02288055]
[43.13558578 102.28459167]
[55.92583084 94.44816589]
[70.87181854 93.17636871]
[84.80207825 98.73895264]
[73.01993561 89.45556641]
[61.23780060 80.17218018]
[49.45566177 70.88879395]
[36.70240784 62.99230957]
[23.14051056 56.58333588]
[9.57861423 50.17435837]
[-3.98328257 43.76538467]
[-8.43412685 44.30357361]
[-12.40780830 43.44718170]
[-15.51616478 41.52758026]
[-17.52299690 38.96987534]
[-18.36164856 36.23351288]
[-31.35202980 28.73351288]
[-44.34241104 21.23351288]
[-57.55759430 14.13710880]
[-70.98504639 7.45103359]
[-84.41249084 0.76495808]
[-82.54577637 15.64835072]
[-92.86650085 26.53332710]
[-107.82810211 25.46074677]
[-116.49060059 13.21488571]
[-112.51994324 -1.25003231]
[-98.82010651 -7.35721493]
[-111.49162292 -15.38421154]
[-124.16313934 -23.41120911]
[-140.06875610 -21.31578827]
[-151.52360535 -32.54816055]
[-149.74049377 -48.49181366]
[-136.08726501 -56.91613770]
[-121.03753662 -51.35871887]
[-116.13614655 -36.08272552]
[-103.46463013 -28.05572701]
[-90.79311371 -20.02873039]
[-77.72641754 -12.66249084]
[-64.29896545 -5.97641611]
[-50.87151718 0.70965940]
[-47.37919998 -0.09713727]
[-43.31861496 0.78674805]
[-39.50701523 3.61116242]
[-36.84241104 8.24313068]
[-23.85202980 15.74313068]
[-10.86164856 23.24313164]
[2.42569304 30.20348740]
[15.98758984 36.61246109]
[29.54948616 43.02143860]
[43.11138153 49.43041229]
[36.09704590 36.17148972]
[35.92101288 21.17252159]
[42.62223816 7.75262690]
[54.71781158 -1.11851346]
[69.53110504 -3.47780943]
[83.78409576 1.19682658]
[94.32275391 11.87094688]
[98.81496429 26.18247986]
[96.26667023 40.96443558]
[87.24176788 52.94571686]
[73.73738098 59.47499847]
[58.73904800 59.10665512]
[70.52118683 68.39003754]
[82.30332184 77.67342377]
[94.08545685 86.95681000]
[102.55532837 83.10414886]
[113.18002319 85.15122223]
[127.22200012 79.87648010]
[137.41996765 67.78052521]
[152.05517578 70.54811859]
[166.09715271 65.27338409]
[180.13912964 59.99863815]
[194.18110657 54.72389603]
[180.08111572 49.60626221]
[170.87040710 37.76722336]
[169.37696838 22.84175491]
[176.05932617 9.41245556]
[188.86578369 1.60255444]
[203.86434937 1.80994427]
[216.44996643 9.97094917]
[222.75846863 23.57987785]
[220.85290527 38.45834732]
[211.31990051 50.03714752]
[226.09201050 47.43242645]
[240.86413574 44.82770157]
[246.04171753 30.36781883]
[257.76593018 20.44622612]
[272.88305664 17.73178482]
[287.32666016 22.95466423]
[297.21142578 34.70993805]
[299.87847900 49.83549118]
[294.61035156 64.26263428]
[282.82415771 74.11053467]
[267.69030762 76.73014832]
[253.27975464 71.41682434]
[243.46885681 59.59981918]
[228.69673157 62.20454025]
[213.92462158 64.80926514]
[199.45585632 68.76587677]
[185.41387939 74.04061890]
[171.37190247 79.31535339]
[157.32992554 84.59009552]
[148.13633728 96.30876923]
[132.49673462 93.91845703]
[118.45476532 99.19319916]
[111.90689087 112.68858337]
[116.45418549 126.98271179]
[121.00147247 141.27684021]
[125.54876709 155.57096863]
[130.09605408 169.86511230]
[134.69366455 155.58708191]
[144.94451904 144.63629150]
[158.88822937 139.10699463]
[173.85813904 140.05662537]
[186.99136353 147.30357361]
[195.77627563 159.46191406]
[198.53280640 174.20646667]
[194.73381042 188.71740723]
[185.10580444 200.21965027]
[171.49006653 206.51344299]
[156.49053955 206.39517212]
[142.97575378 199.88743591]
[133.52970886 188.23358154]
[134.45312500 203.20512390]
[135.37654114 218.17668152]
[136.29995728 233.14822388]
[137.22337341 248.11978149]
[138.14678955 263.09133911]
[139.07019043 278.06286621]
[148.57463074 291.42694092]
[141.50810242 306.22546387]
[125.14006805 307.23498535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[24 85]
[25 84]
[26 83]
[27 82]
[28 70]
[29 69]
[30 68]
[31 67]
[36 66]
[37 65]
[38 64]
[39 60]
[40 59]
[41 58]
[47 57]
[48 56]
[49 55]
[87 125]
[88 124]
[90 122]
[91 121]
[92 120]
[93 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
