%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCxxxxxxxxxxCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.37480164 252.86911011]
[90.37480164 237.86911011]
[90.37480164 222.86911011]
[90.37480164 207.86911011]
[90.37480164 192.86911011]
[90.37480164 177.86911011]
[90.37480164 162.86911011]
[90.37480164 147.86911011]
[90.37480164 132.86911011]
[90.37480164 117.86911011]
[89.87007904 111.19906616]
[91.79299927 105.54578400]
[76.79380798 105.38974762]
[61.79462433 105.23371124]
[46.00658035 114.65270996]
[31.24436188 105.21465302]
[16.24517441 105.37068939]
[11.59429646 120.45853424]
[2.52816010 133.36074829]
[-10.05961895 142.82640076]
[-24.93470383 147.94226074]
[-40.64307785 148.22091675]
[-55.65315628 143.64717102]
[-68.50514221 134.67834473]
[-77.95297241 122.19857025]
[-83.08513641 107.43170166]
[-98.07783508 107.89974213]
[-113.07053375 108.36778259]
[-128.06323242 108.83582306]
[-143.05592346 109.30387115]
[-148.77386475 123.41857910]
[-159.74295044 133.98262024]
[-174.06269836 139.16574097]
[-189.25213623 138.06990051]
[-202.67959595 130.88497925]
[-212.01870728 118.85580444]
[-215.65138245 104.06649780]
[-212.94825745 89.07940674]
[-204.37767029 76.49112701]
[-191.42451477 68.48265076]
[-176.33300781 66.44150543]
[-161.71784973 70.72132874]
[-150.11119080 80.58061218]
[-143.52397156 94.31117249]
[-128.53126526 93.84313202]
[-113.53857422 93.37509155]
[-98.54587555 92.90704346]
[-83.55317688 92.43900299]
[-79.90078735 78.62749481]
[-72.48809052 66.39615631]
[-61.91094971 56.74554443]
[-49.02449417 50.46809006]
[-34.87401962 48.08300781]
[-20.61017418 49.79337692]
[-7.39542007 55.46888351]
[3.69072318 64.65569305]
[11.73985767 76.61274719]
[16.08913803 90.37150574]
[31.08832550 90.21546936]
[39.81059265 81.77571869]
[52.34745026 81.56086731]
[61.95066071 90.23451996]
[76.94984436 90.39055634]
[91.94903564 90.54659271]
[106.17581177 85.79277802]
[118.06819153 76.65104675]
[129.96057129 67.50930786]
[141.85295105 58.36757660]
[153.74533081 49.22584152]
[145.93457031 36.40246201]
[139.55606079 22.80974579]
[134.68460083 8.60706520]
[131.37730408 -6.03906250]
[129.67295837 -20.95691872]
[129.59152222 -35.97159958]
[131.13397217 -50.90706253]
[134.28221130 -65.58820343]
[138.99932861 -79.84288788]
[145.23002625 -93.50398254]
[152.90124512 -106.41133118]
[161.92304993 -118.41358948]
[172.18966675 -129.37005615]
[183.58071899 -139.15223694]
[195.96264648 -147.64547729]
[209.19027710 -154.75018311]
[223.10855103 -160.38304138]
[237.55424500 -164.47804260]
[252.35801697 -166.98715210]
[267.34628296 -167.88095093]
[282.34335327 -167.14895630]
[297.17333984 -164.79977417]
[311.66238403 -160.86093140]
[325.64062500 -155.37860107]
[338.94418335 -148.41706848]
[351.41705322 -140.05796814]
[362.91299438 -130.39929199]
[373.29727173 -119.55426788]
[382.44808960 -107.65007782]
[390.25817871 -94.82627869]
[396.63595581 -81.23321533]
[401.50662231 -67.03027344]
[404.81314087 -52.38396835]
[406.51669312 -37.46602249]
[406.59732056 -22.45133781]
[405.05404663 -7.51595640]
[401.90502930 7.16501236]
[397.18713379 21.41944122]
[390.95571899 35.08020782]
[383.28378296 47.98714066]
[374.26135254 59.98891830]
[363.99414062 70.94482422]
[352.60256958 80.72640228]
[340.22018433 89.21897125]
[326.99215698 96.32295990]
[313.07360840 101.95507812]
[298.62768555 106.04929352]
[283.82376099 108.55760193]
[268.83544922 109.45059967]
[253.83843994 108.71780396]
[239.00857544 106.36782074]
[224.51972961 102.42819214]
[210.54177856 96.94511414]
[197.23861694 89.98287201]
[184.76618958 81.62309265]
[173.27075195 71.96379852]
[162.88706970 61.11822128]
[150.99468994 70.25995636]
[139.10231018 79.40168762]
[127.20993042 88.54342651]
[115.31755066 97.68515778]
[128.61865234 90.75114441]
[143.61526489 91.07009888]
[156.60951233 98.56339264]
[164.39729309 111.38331604]
[165.05830383 126.36874390]
[158.42951965 139.82456970]
[146.14550781 148.43287659]
[131.23522949 150.07101440]
[117.37525177 144.33505249]
[107.98317719 132.63937378]
[105.37480164 117.86911011]
[105.37480164 132.86911011]
[105.37480164 147.86911011]
[105.37480164 162.86911011]
[105.37480164 177.86911011]
[105.37480164 192.86911011]
[105.37480164 207.86911011]
[105.37480164 222.86911011]
[105.37480164 237.86911011]
[105.37480164 252.86911011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 64]
[13 63]
[14 62]
[16 59]
[17 58]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[65 130]
[66 129]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
