%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCxxxxxxxxxxCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.21308899 261.74612427]
[119.21308899 246.74610901]
[119.21308899 231.74610901]
[119.21308899 216.74610901]
[119.21308899 201.74610901]
[119.21308899 186.74610901]
[119.21308899 171.74610901]
[119.21308899 156.74610901]
[119.21308899 141.74610901]
[119.21308899 126.74610901]
[106.15912628 129.65394592]
[94.14698792 127.01515961]
[85.24270630 120.17610168]
[73.16271973 129.06845093]
[61.08272934 137.96080017]
[49.00273895 146.85314941]
[51.87237167 161.84407043]
[47.94520569 176.59332275]
[38.00097656 188.17239380]
[24.01412201 194.28228760]
[8.76174259 193.70985413]
[-4.72779083 186.56875610]
[-13.77612305 174.27687073]
[-16.58670044 159.27474976]
[-12.60147953 144.54109192]
[-2.61173034 133.00126648]
[11.39907551 126.94650269]
[26.64908218 127.57899475]
[40.11038971 134.77316284]
[52.19038010 125.88080597]
[64.27037048 116.98845673]
[76.35035706 108.09610748]
[75.36997986 88.98541260]
[88.72294617 73.32110596]
[110.62472534 70.93289948]
[129.36079407 85.08555603]
[125.65464020 70.55062103]
[121.94847870 56.01568222]
[118.24231720 41.48074722]
[114.53615570 26.94581032]
[110.82999420 12.41087437]
[98.50134277 6.89162493]
[91.71948242 -4.56412888]
[92.77884674 -17.63899422]
[101.06649780 -27.55421448]
[97.66352081 -42.16310883]
[94.26054382 -56.77199936]
[90.85756683 -71.38088989]
[87.45458221 -85.98978424]
[84.05160522 -100.59867859]
[77.00646973 -113.84126282]
[66.79299164 -124.82692719]
[56.57951355 -135.81259155]
[46.36603165 -146.79826355]
[30.56508064 -147.12301636]
[19.68218994 -158.58329773]
[20.17398262 -174.37992859]
[31.74869156 -185.14105225]
[47.53924561 -184.48226929]
[58.17738724 -172.79444885]
[57.35169983 -157.01173401]
[67.56517792 -146.02607727]
[77.77865601 -135.04040527]
[87.99213409 -124.05474091]
[84.99158478 -138.75157166]
[85.39546967 -153.74612427]
[89.18281555 -168.26013184]
[96.15704346 -181.54019165]
[105.95614624 -192.89701843]
[118.07150269 -201.74111938]
[131.87425232 -207.61343384]
[146.64794922 -210.20916748]
[161.62576294 -209.39356995]
[176.03025818 -205.20898438]
[189.11373901 -197.87260437]
[200.19711304 -187.76524353]
[208.70509338 -175.41152954]
[214.19606018 -161.45268250]
[216.38500977 -146.61326599]
[215.15830994 -131.66351318]
[210.57963562 -117.37940216]
[202.88665771 -104.50236511]
[192.47866821 -93.70079803]
[179.89591980 -85.53535461]
[165.79151917 -80.42987823]
[150.89756775 -78.64936829]
[135.98715210 -80.28624725]
[121.83419800 -85.25554657]
[109.17333221 -93.29933167]
[98.66049957 -104.00165558]
[102.06347656 -89.39276123]
[105.46645355 -74.78387451]
[108.86943054 -60.17497635]
[112.27241516 -45.56608582]
[115.67539215 -30.95719337]
[130.30578613 -22.72253418]
[134.56793213 -6.13584709]
[125.36492920 8.70471287]
[129.07109070 23.23964882]
[132.77725220 37.77458572]
[136.48341370 52.30952072]
[140.18957520 66.84445953]
[143.89573669 81.37939453]
[155.69238281 90.64434052]
[170.69155884 90.80037689]
[185.69075012 90.95641327]
[199.57066345 83.36309052]
[212.21676636 91.23236847]
[227.21594238 91.38840485]
[242.21513367 91.54444122]
[253.32931519 80.30830383]
[269.13360596 80.30561829]
[280.25158691 91.53796387]
[280.08718872 107.34140015]
[268.73791504 118.34001923]
[252.93711853 118.00854492]
[242.05909729 106.54362488]
[227.05990601 106.38758850]
[212.06072998 106.23155212]
[199.25366211 113.83604431]
[185.53471375 105.95560455]
[170.53552246 105.79956818]
[155.53634644 105.64353180]
[150.20552063 110.91917419]
[163.29374695 118.24710846]
[176.38195801 125.57503510]
[189.47018433 132.90296936]
[204.27197266 135.33341980]
[216.20117188 144.42703247]
[222.46640015 158.05593872]
[221.60159302 173.03099060]
[213.80909729 185.84805298]
[200.91236877 193.50796509]
[185.92919922 194.21832275]
[172.36561584 187.81289673]
[163.39549255 175.79055786]
[161.11804199 160.96168518]
[153.92666626 147.79794312]
[146.73529053 134.63420105]
[139.54389954 121.47046661]
[134.21308899 126.74610901]
[134.21308899 141.74610901]
[134.21308899 156.74610901]
[134.21308899 171.74610901]
[134.21308899 186.74610901]
[134.21308899 201.74610901]
[134.21308899 216.74610901]
[134.21308899 231.74610901]
[134.21308899 246.74610901]
[134.21308899 261.74612427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 32]
[14 31]
[15 30]
[16 29]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 64]
[52 63]
[53 62]
[54 61]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
