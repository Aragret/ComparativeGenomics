%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAxxxxxxxxxxGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.34194946 102.20217133]
[153.43043518 103.82903290]
[138.51892090 105.45590210]
[123.60740662 107.08276367]
[108.69588470 108.70963287]
[95.09085083 115.02651215]
[84.22554779 125.36794281]
[73.36024475 135.70938110]
[62.49494553 146.05081177]
[57.83305740 161.16958618]
[43.27969742 164.33958435]
[32.72561646 174.99845886]
[22.49202919 185.96539307]
[12.25844193 196.93232727]
[16.15652275 211.85910034]
[11.34405994 226.51664734]
[-0.64330763 236.22779846]
[-15.98045540 237.89376831]
[-29.77335358 230.98294067]
[-37.62074280 217.70054626]
[-37.01854324 202.28494263]
[-28.15891838 189.65519714]
[-13.86894321 183.84140015]
[1.29150534 186.69874573]
[11.52509308 175.73179626]
[21.75868034 164.76486206]
[21.98321152 161.19566345]
[23.98099899 157.56422424]
[27.75895309 154.71820068]
[32.93826675 153.47428894]
[36.82299042 139.09519958]
[52.15351105 135.18550110]
[63.01881409 124.84407043]
[73.88411713 114.50263977]
[84.74942017 104.16120911]
[84.00968170 96.69777679]
[70.27056885 102.71747589]
[60.29989624 91.51097107]
[67.87683105 78.56531525]
[82.53021240 81.77091980]
[81.79047394 74.30748749]
[69.10652924 66.30014038]
[56.42259216 58.29278946]
[59.42582321 72.98906708]
[52.42646408 86.25590515]
[38.60051346 92.07338715]
[24.22158623 87.80180359]
[15.81420898 75.37940216]
[17.19327927 60.44293213]
[27.73303795 49.76990509]
[42.65002441 48.20303726]
[31.19116974 38.52343750]
[19.73231697 28.84383392]
[8.27346325 19.16423225]
[-3.18538976 9.48463154]
[-19.41285706 7.11791372]
[-25.22472572 -8.21682453]
[-14.64224625 -20.74452019]
[1.44823647 -17.57775307]
[6.49421167 -1.97422147]
[17.95306396 7.70537996]
[29.41191864 17.38498116]
[40.87076950 27.06458282]
[52.32962418 36.74418259]
[64.42994690 45.60884857]
[77.11388397 53.61619949]
[89.79782104 61.62355042]
[107.14913940 76.50701904]
[107.06902313 93.79811859]
[121.98053741 92.17124939]
[136.89205933 90.54438782]
[151.80357361 88.91751862]
[166.71508789 87.29065704]
[166.95475769 71.25883484]
[169.22480774 55.38797760]
[173.48831177 39.93416595]
[179.67616272 25.14671135]
[187.68820190 11.26413155]
[197.39485168 -1.48969209]
[208.63925171 -12.90912628]
[221.23968506 -22.81010437]
[234.99263000 -31.03308868]
[249.67596436 -37.44564438]
[265.05261230 -41.94457245]
[280.87435913 -44.45756912]
[296.88577271 -44.94438934]
[312.82852173 -43.39748764]
[328.44528198 -39.84213638]
[343.48413086 -34.33601761]
[357.70248413 -26.96828842]
[370.87103271 -17.85811806]
[382.77743530 -7.15278912]
[393.22973633 4.97470617]
[402.05950928 18.32844925]
[409.12451172 32.69276428]
[414.31100464 47.83570099]
[428.98934937 44.74602509]
[443.66772461 41.65634537]
[455.57824707 31.24241829]
[469.62631226 36.19225693]
[484.30465698 33.10257721]
[498.98300171 30.01289940]
[513.66137695 26.92321968]
[528.33972168 23.83353996]
[536.05316162 13.45263100]
[548.38110352 11.20389843]
[558.58673096 17.75973129]
[573.32330322 14.96065712]
[588.05981445 12.16158390]
[602.79632568 9.36250973]
[609.29223633 -4.72943926]
[622.84698486 -12.28248501]
[638.24847412 -10.39232731]
[649.57458496 0.21422927]
[652.47015381 15.45874786]
[645.82177734 29.47939873]
[632.18591309 36.88495636]
[616.80578613 34.82783508]
[605.59539795 24.09903526]
[590.85888672 26.89810944]
[576.12237549 29.69718361]
[561.38580322 32.49625778]
[548.76263428 44.65465164]
[531.42938232 38.51188660]
[516.75103760 41.60156631]
[502.07269287 44.69124603]
[487.39434814 47.78092575]
[472.71600342 50.87060547]
[461.85534668 61.06353760]
[446.75738525 56.33469009]
[432.07904053 59.42436981]
[417.40069580 62.51404953]
[418.70065308 76.49256134]
[418.43746948 90.52980804]
[416.61419678 104.45153046]
[413.25329590 118.08486176]
[408.39627075 131.26051331]
[402.10324097 143.81483459]
[394.45217896 155.59191895]
[385.53790283 166.44541931]
[375.47088623 176.24047852]
[364.37597656 184.85536194]
[352.39080811 192.18296814]
[339.66406250 198.13215637]
[326.35363770 202.62887573]
[312.62472534 205.61715698]
[298.64773560 207.05966187]
[284.59609985 206.93832397]
[270.64431763 205.25442505]
[256.96560669 202.02870178]
[243.72982788 197.30097961]
[231.10134888 191.12977600]
[219.23701477 183.59152222]
[208.28425598 174.77963257]
[198.37915039 164.80335999]
[189.64479065 153.78640747]
[182.18978882 141.86541748]
[176.10684204 129.18827820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 35]
[7 34]
[8 33]
[9 32]
[11 30]
[12 26]
[13 25]
[14 24]
[41 67]
[42 66]
[43 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[96 132]
[97 131]
[98 130]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[107 122]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
