%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGxxxxxxxxxxCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.41404724 373.89889526]
[181.79821777 358.91156006]
[181.18238831 343.92419434]
[180.56655884 328.93685913]
[179.95074463 313.94949341]
[179.33491516 298.96212769]
[178.71908569 283.97479248]
[178.10325623 268.98742676]
[174.74400330 254.36842346]
[168.75570679 240.61560059]
[162.76741028 226.86276245]
[156.77911377 213.10993958]
[152.68554688 210.54244995]
[150.19511414 205.34768677]
[150.84019470 198.66738892]
[145.42156982 184.68029785]
[131.73477173 178.91772461]
[126.04026794 164.81002808]
[132.17738342 150.49313354]
[126.75876617 136.50604248]
[121.34014130 122.51896667]
[114.34659576 119.80965424]
[93.36597443 111.68170929]
[79.93852234 118.36779022]
[66.51107025 125.05386353]
[55.02754974 137.52642822]
[39.86345673 129.94444275]
[42.95130157 113.27406311]
[59.82499695 111.62641144]
[73.25244904 104.94033813]
[86.67989349 98.25426483]
[93.50347137 84.89616394]
[91.05054474 70.09808350]
[78.48206329 60.89639664]
[76.20524597 45.85409927]
[85.05510712 33.92868042]
[82.60218048 19.13060188]
[80.14925385 4.33252192]
[77.69631958 -10.46555710]
[73.74163055 -15.88801193]
[73.24208832 -21.62720490]
[75.45951843 -25.92048264]
[73.61618805 -40.80678940]
[71.77286530 -55.69309998]
[69.92954254 -70.57940674]
[68.08621979 -85.46571350]
[63.90298080 -93.65695190]
[66.36111450 -100.67619324]
[64.82382202 -115.59721375]
[63.28652573 -130.51821899]
[50.85342407 -136.54904175]
[43.09858322 -147.85522461]
[41.96797943 -161.40982056]
[47.65123367 -173.64778137]
[58.55992126 -181.40359497]
[57.32930756 -196.35302734]
[56.09869385 -211.30247498]
[53.04930115 -215.69068909]
[52.12423706 -220.34362793]
[53.06003952 -224.39256287]
[55.28163147 -227.20533752]
[54.97365570 -242.20217896]
[54.66567612 -257.19900513]
[52.19999695 -260.94335938]
[51.19538498 -264.88217163]
[51.52822495 -268.52029419]
[52.92326736 -271.45681763]
[54.99894333 -273.42724609]
[55.92235565 -288.39880371]
[56.84576797 -303.37036133]
[57.76918411 -318.34188843]
[44.24512863 -325.34332275]
[34.74309540 -337.24420166]
[30.90936470 -351.98266602]
[33.40815735 -367.00518799]
[41.80654526 -379.70901489]
[54.64944839 -387.89312744]
[69.71176147 -390.13958740]
[84.38385010 -386.05917358]
[96.12368011 -376.35882568]
[102.89726257 -362.71923828]
[103.53102112 -347.50350952]
[97.91516876 -333.34790039]
[87.02267456 -322.70489502]
[72.74073029 -317.41848755]
[71.81732178 -302.44692993]
[70.89390564 -287.47537231]
[69.97048950 -272.50384521]
[69.66251373 -257.50698853]
[69.97048950 -242.51016235]
[70.27847290 -227.51332092]
[71.04813385 -212.53308105]
[72.27873993 -197.58364868]
[73.50935364 -182.63421631]
[87.78464508 -174.58647156]
[94.53814697 -159.47349548]
[90.93914795 -143.14634705]
[78.20754242 -132.05551147]
[79.74483490 -117.13450623]
[81.28212738 -102.21348572]
[82.97252655 -87.30903625]
[84.81584930 -72.42272949]
[86.65917206 -57.53642273]
[88.50250244 -42.65011597]
[90.34582520 -27.76380730]
[92.49440002 -12.91848469]
[94.94732666 1.87959397]
[97.40026093 16.67767334]
[99.85318756 31.47575188]
[112.07751465 39.90791702]
[114.77593994 54.88032913]
[105.84862518 67.64515686]
[108.30155182 82.44323730]
[135.32722473 117.10034180]
[140.74584961 131.08741760]
[146.16447449 145.07450867]
[160.34509277 151.52026367]
[165.64109802 165.78234863]
[159.40866089 179.26167297]
[164.82728577 193.24876404]
[170.53193665 207.12164307]
[176.52023315 220.87446594]
[182.50852966 234.62730408]
[188.49682617 248.38012695]
[190.58949280 233.52682495]
[197.09219360 220.00961304]
[207.39125061 209.10414124]
[220.51473999 201.83956909]
[235.22418213 198.90145874]
[250.13140869 200.56709290]
[263.82962036 206.67929077]
[275.02609253 216.66120911]
[282.66421509 229.57086182]
[286.02316284 244.18994141]
[284.78591919 259.13882446]
[279.06927490 273.00677490]
[269.41268921 284.48504639]
[256.72750854 292.49041748]
[242.21080017 296.26739502]
[227.23257446 295.45959473]
[213.20631409 290.14318848]
[201.45571899 280.81991577]
[193.09062195 268.37161255]
[193.70643616 283.35894775]
[194.32226562 298.34631348]
[194.93809509 313.33367920]
[195.55390930 328.32101440]
[196.16973877 343.30838013]
[196.78556824 358.29571533]
[197.40139771 373.28308105]
[204.09291077 388.86062622]
[190.97653198 399.60293579]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 124]
[10 123]
[11 122]
[12 121]
[15 120]
[16 119]
[19 116]
[20 115]
[21 114]
[23 31]
[24 30]
[25 29]
[32 113]
[33 112]
[36 109]
[37 108]
[38 107]
[39 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[48 100]
[49 99]
[50 98]
[55 94]
[56 93]
[57 92]
[61 91]
[62 90]
[63 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
