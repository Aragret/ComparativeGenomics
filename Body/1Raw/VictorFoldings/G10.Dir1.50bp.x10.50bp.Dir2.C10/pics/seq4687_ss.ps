%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAAxxxxxxxxxxACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.54816437 221.40556335]
[96.92418671 206.41854858]
[96.30020905 191.43153381]
[95.67623138 176.44451904]
[95.05225372 161.45750427]
[94.42827606 146.47048950]
[93.80429840 131.48345947]
[93.18032074 116.49645233]
[81.67852020 106.86792755]
[66.81547546 108.89025879]
[51.95242691 110.91259003]
[42.38977814 123.20867157]
[27.28772736 125.04787445]
[15.62422752 115.85557556]
[0.76118100 117.87790680]
[-14.10186577 119.90024567]
[-28.96491241 121.92257690]
[-43.82796097 123.94491577]
[-58.43685150 127.34789276]
[-72.66362762 132.10169983]
[-86.89041138 136.85551453]
[-93.99693298 150.71679688]
[-108.49263000 155.33517456]
[-121.66344452 148.47477722]
[-135.89022827 153.22859192]
[-150.11700439 157.98240662]
[-155.68537903 172.59497070]
[-169.36888123 180.16436768]
[-184.70658875 177.11656189]
[-194.45648193 164.89062500]
[-194.01496887 149.25927734]
[-183.59053040 137.60314941]
[-168.10525513 135.42593384]
[-154.87081909 143.75563049]
[-140.64404297 139.00181580]
[-126.41725922 134.24800110]
[-120.01642609 120.84780884]
[-105.65617371 115.82410431]
[-91.64422607 122.62873840]
[-77.41744995 117.87492371]
[-63.19066620 113.12110901]
[-77.08244324 107.46261597]
[-85.83059692 95.27780151]
[-86.75044250 80.30603027]
[-79.55968475 67.14195251]
[-66.46507263 59.82545090]
[-51.48517990 60.60187149]
[-39.21714401 69.23294067]
[-33.42586899 83.06988525]
[-35.88862228 97.86633301]
[-45.85029602 109.08186340]
[-30.98724747 107.05953217]
[-16.12420082 105.03720093]
[-1.26115346 103.01486206]
[13.60189342 100.99253082]
[22.38535309 89.01811981]
[37.42978668 86.75545502]
[49.93009186 96.04954529]
[64.79313660 94.02721405]
[79.65618896 92.00487518]
[91.98265839 82.57472992]
[105.40879822 84.40759277]
[115.84860992 73.63677979]
[126.28842926 62.86597443]
[136.72824097 52.09516525]
[147.16804504 41.32435608]
[156.55520630 29.62473297]
[164.80749512 17.09877205]
[173.05978394 4.57280970]
[181.31207275 -7.95315218]
[171.09901428 -19.03371620]
[163.83918762 -32.22868347]
[159.95077515 -46.76895523]
[159.65563965 -61.80820465]
[162.96659851 -76.47214508]
[169.68692017 -89.90932465]
[179.42210388 -101.34062195]
[191.60295105 -110.10434723]
[205.51887512 -115.69461823]
[220.35932922 -117.79049683]
[235.26106262 -116.27446747]
[249.35829163 -111.23896027]
[257.61059570 -123.76491547]
[265.86288452 -136.29087830]
[258.90875244 -149.98526001]
[259.74954224 -165.32112122]
[268.15902710 -178.17320251]
[281.87512207 -185.08435059]
[297.20828247 -184.19552612]
[310.03393555 -175.74578857]
[316.90206909 -162.00808716]
[315.96517944 -146.67779541]
[307.47528076 -133.87869263]
[293.71612549 -127.05364990]
[278.38882446 -128.03858948]
[270.13653564 -115.51262665]
[261.88424683 -102.98667145]
[272.07467651 -92.02110291]
[279.34884644 -78.92733765]
[283.28009033 -64.46437836]
[283.63571167 -49.47180176]
[280.39071655 -34.82099915]
[273.72949219 -21.36454010]
[264.03533936 -9.88655472]
[251.86845398 -1.05704355]
[237.93353271 4.60723352]
[223.03894043 6.77299786]
[208.04988098 5.31006002]
[193.83804321 0.29913703]
[185.58575439 12.82509899]
[177.33346558 25.35106087]
[169.08117676 37.87702179]
[183.50131226 33.74666595]
[197.90734863 37.92591095]
[207.87826538 49.13219452]
[210.35411072 63.92645645]
[204.57507324 77.76852417]
[192.31468201 86.41044617]
[177.33547974 87.20011902]
[164.23440552 79.89521027]
[157.03199768 66.73750305]
[157.93885803 51.76417160]
[147.49905396 62.53497696]
[137.05923462 73.30578613]
[126.61942291 84.07659912]
[116.17961121 94.84740448]
[127.36905670 84.85759735]
[141.46842957 79.73822784]
[156.46063232 80.22167969]
[170.20088196 86.23879242]
[180.72346497 96.92874146]
[186.52302551 110.76222229]
[186.76986694 125.76019287]
[181.42866516 139.77702332]
[171.26354980 150.80744934]
[157.72874451 157.27345276]
[142.76057434 158.25000000]
[128.50038147 153.59736633]
[116.98825073 143.98118591]
[109.87113190 130.77714539]
[108.16734314 115.87247467]
[108.79132080 130.85949707]
[109.41529846 145.84651184]
[110.03927612 160.83352661]
[110.66325378 175.82054138]
[111.28722382 190.80755615]
[111.91120148 205.79457092]
[112.53517914 220.78158569]
[119.23516846 236.35548401]
[106.12464142 247.10493469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 60]
[10 59]
[11 58]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 41]
[20 40]
[21 39]
[24 36]
[25 35]
[26 34]
[62 126]
[63 125]
[64 124]
[65 123]
[66 122]
[67 112]
[68 111]
[69 110]
[70 109]
[82 97]
[83 96]
[84 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
