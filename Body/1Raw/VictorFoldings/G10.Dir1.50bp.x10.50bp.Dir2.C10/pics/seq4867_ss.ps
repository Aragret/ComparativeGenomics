%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAxxxxxxxxxxCUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.35836792 296.91189575]
[72.35836792 281.91189575]
[72.35836792 266.91189575]
[72.35836792 251.91188049]
[72.35836792 236.91188049]
[72.35836792 221.91188049]
[72.35836792 206.91188049]
[72.35836792 191.91188049]
[72.35836792 176.91188049]
[72.35836792 161.91188049]
[74.30462646 80.63049316]
[61.06204605 73.58535767]
[47.81945801 66.54022217]
[34.57687378 59.49508667]
[25.17892075 71.23879242]
[13.78602409 81.05297089]
[0.78714627 88.60449982]
[-13.37427425 93.63744354]
[-28.21545219 95.98179626]
[-43.23071671 95.55915833]
[-57.90872955 92.38539124]
[-71.74991608 86.57000732]
[-84.28346252 78.31241608]
[-95.08330536 67.89507294]
[-103.78266907 55.67381287]
[-110.08646393 42.06570435]
[-113.78133392 27.53481293]
[-114.74286652 12.57638073]
[-112.93978119 -2.30006385]
[-108.43492889 -16.58804893]
[-121.67751312 -23.63318443]
[-134.92010498 -30.67831993]
[-148.16268921 -37.72345352]
[-161.40527344 -44.76858902]
[-170.92630005 -33.11370850]
[-182.53833008 -23.54047203]
[-195.79504395 -16.41684532]
[-210.18685913 -12.01664162]
[-225.16061401 -10.50899410]
[-240.14074707 -11.95185280]
[-254.55146790 -16.28975868]
[-267.83886719 -23.35597229]
[-279.49218750 -32.87889099]
[-289.06353760 -44.49247360]
[-296.18502808 -57.75032806]
[-300.58291626 -72.14286041]
[-302.08813477 -87.11685181]
[-300.64285278 -102.09675598]
[-296.30261230 -116.50676727]
[-289.23425293 -129.79301453]
[-279.70944214 -141.44482422]
[-268.09429932 -151.01429749]
[-254.83529663 -158.13363647]
[-240.44206238 -162.52917480]
[-225.46781921 -164.03198242]
[-210.48815918 -162.58427429]
[-196.07884216 -158.24169922]
[-182.79373169 -151.17118835]
[-171.14347839 -141.64448547]
[-161.57588196 -130.02781677]
[-154.45869446 -116.76765442]
[-150.06547546 -102.37369537]
[-148.56510925 -87.39921570]
[-150.01522827 -72.41978455]
[-154.36013794 -58.01117325]
[-141.11755371 -50.96604156]
[-127.87496948 -43.92090607]
[-114.63237762 -36.87577057]
[-101.38979340 -29.83063507]
[-92.05818176 -41.55075455]
[-80.72878265 -51.35914612]
[-67.78649902 -58.92066574]
[-53.67136383 -63.97652435]
[-38.86359406 -66.35314941]
[-23.86726379 -65.96816254]
[-9.19314480 -62.83320236]
[4.65870380 -57.05360794]
[17.21596718 -48.82485580]
[28.05017662 -38.42597198]
[36.79134369 -26.21004868]
[43.14057159 -12.59227180]
[46.88030624 1.96419811]
[47.88175201 16.96397781]
[46.10935211 31.89632034]
[41.62200928 46.25250244]
[54.86459351 53.29763412]
[68.10717773 60.34276962]
[81.34976196 67.38790894]
[96.11582184 64.74903870]
[106.09854889 53.55327606]
[106.62036133 37.51871109]
[119.56764221 28.04519653]
[135.00834656 32.40000153]
[141.09768677 47.24249649]
[133.16442871 61.18678284]
[117.29431152 63.53600311]
[107.31158447 74.73176575]
[115.43312836 87.34289551]
[129.75572205 82.88607788]
[144.07832336 78.42926788]
[146.78048706 63.36417389]
[156.18338013 51.28757858]
[170.12629700 44.97459030]
[185.40524292 45.87588882]
[198.50923157 53.78435898]
[206.42707825 66.88269043]
[207.33929443 82.16099548]
[201.03628540 96.10841370]
[188.96641541 105.51994324]
[173.90325928 108.23287964]
[159.30822754 103.62380981]
[148.53514099 92.75186157]
[134.21253967 97.20867920]
[119.88994598 101.66548920]
[119.50002289 109.15534973]
[118.33025360 131.62492371]
[132.11264038 137.54489136]
[145.89501953 143.46484375]
[158.62287903 134.74676514]
[174.04425049 134.31669617]
[187.23822021 142.31187439]
[193.99462891 156.18106079]
[192.15756226 171.49864197]
[182.31318665 183.37686157]
[167.60282898 188.02539062]
[152.72050476 183.96092224]
[142.41510010 172.48040771]
[139.97505188 157.24722290]
[126.19267273 151.32727051]
[112.41029358 145.40730286]
[106.14730835 149.53344727]
[115.40430450 161.33633423]
[124.66130066 173.13920593]
[137.12884521 181.47949219]
[137.07604980 196.47940063]
[124.55011749 204.73173523]
[110.74695587 198.86039734]
[108.00411224 184.11322021]
[100.81272888 170.94947815]
[93.62134552 157.78573608]
[87.35836792 161.91188049]
[87.35836792 176.91188049]
[87.35836792 191.91188049]
[87.35836792 206.91188049]
[87.35836792 221.91188049]
[87.35836792 236.91188049]
[87.35836792 251.91188049]
[87.35836792 266.91189575]
[87.35836792 281.91189575]
[87.35836792 296.91189575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 88]
[12 87]
[13 86]
[14 85]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[89 97]
[90 96]
[98 114]
[99 113]
[100 112]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
