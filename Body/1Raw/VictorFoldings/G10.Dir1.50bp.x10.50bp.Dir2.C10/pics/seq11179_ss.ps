%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAxxxxxxxxxxUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.39581299 325.90274048]
[112.39581299 310.90274048]
[112.39581299 295.90274048]
[112.39581299 280.90274048]
[112.39581299 265.90274048]
[112.39581299 250.90274048]
[112.39581299 235.90274048]
[112.39581299 220.90274048]
[112.39581299 205.90274048]
[112.39581299 190.90274048]
[109.94288635 176.10466003]
[105.10306549 161.90690613]
[100.26325226 147.70916748]
[95.42343140 133.51141357]
[81.38146210 128.23666382]
[68.39107513 135.73666382]
[55.40069580 143.23666382]
[42.41031647 150.73666382]
[29.41993523 158.23666382]
[30.61191750 173.45317078]
[25.07566071 187.67683411]
[13.91039371 198.08354187]
[-0.66701239 202.60702515]
[-15.76220322 200.34916687]
[-28.37801743 191.75823975]
[-36.00957489 178.53999329]
[-37.14162827 163.31890869]
[-31.54940224 149.11715698]
[-20.34324074 138.75450134]
[-5.74813414 134.28845215]
[9.33804893 136.60574341]
[21.91993523 145.24629211]
[34.91031647 137.74629211]
[47.90069580 130.24629211]
[60.89107895 122.74628448]
[73.88146210 115.24628448]
[72.17008972 97.09706879]
[80.94227600 82.72949219]
[95.28813171 77.02101135]
[97.13146210 62.13470078]
[98.97478485 47.24839401]
[81.13354492 24.32912445]
[97.29678345 -4.45444727]
[90.74891663 -17.94983101]
[84.20104218 -31.44521523]
[77.65317535 -44.94059753]
[71.10530090 -58.43598175]
[56.68347931 -54.18617630]
[41.75883484 -52.36824036]
[26.73852921 -53.03176498]
[12.03232384 -56.15864944]
[-1.95858300 -61.66358948]
[-14.85251045 -69.39640808]
[-26.29770279 -79.14614868]
[-35.98192596 -90.64683533]
[-43.64098740 -103.58470917]
[-49.06594086 -117.60682678]
[-52.10879517 -132.33064270]
[-52.68653107 -147.35449219]
[-50.78339386 -162.26850891]
[-46.45130157 -176.66583252]
[-39.80843353 -190.15368652]
[-31.03601646 -202.36412048]
[-20.37336540 -212.96400452]
[-8.11136436 -221.66418457]
[5.41546822 -228.22732544]
[19.83810997 -232.47434998]
[34.76310349 -234.28941345]
[49.78328323 -233.62298584]
[64.48888397 -230.49327087]
[78.47872925 -224.98564148]
[91.37117004 -217.25033569]
[102.81448364 -207.49838257]
[112.49649048 -195.99583435]
[120.15305328 -183.05648804]
[125.57530975 -169.03332520]
[128.61532593 -154.30891418]
[129.19017029 -139.28495789]
[127.28415680 -124.37130737]
[122.94929504 -109.97482300]
[116.30382538 -96.48825073]
[107.52905273 -84.27951050]
[96.86436462 -73.68167877]
[84.60068512 -64.98385620]
[91.14855957 -51.48846817]
[97.69642639 -37.99308777]
[104.24430084 -24.49770164]
[110.79216766 -11.00231743]
[111.51589966 -25.98484802]
[108.32350922 -40.64119720]
[114.14089966 -54.46718597]
[126.85144043 -62.43225098]
[141.83041382 -61.63831711]
[153.62774658 -52.37425613]
[157.95101929 -38.01078415]
[153.22718811 -23.77401733]
[141.17459106 -14.84382915]
[131.85513306 -3.09020543]
[145.66871643 -8.93699360]
[159.48229980 -14.78378201]
[173.29588318 -20.63056946]
[177.70994568 -35.63224030]
[190.76274109 -44.24377823]
[206.29113770 -42.39908218]
[216.96310425 -30.96915817]
[217.73965454 -15.35086918]
[208.25413513 -2.91869211]
[192.98532104 0.45727870]
[179.14266968 -6.81698704]
[165.32908630 -0.97019887]
[151.51550293 4.87658930]
[137.70191956 10.72337723]
[139.49514771 20.20236397]
[138.32806396 29.40690422]
[134.53614807 37.46931839]
[128.69169617 43.69792557]
[121.52967834 47.63582611]
[113.86109161 49.09172058]
[112.01776886 63.97802734]
[110.17444611 78.86433411]
[124.31102753 91.60707855]
[125.10569763 112.35456085]
[109.62118530 128.67158508]
[114.46100616 142.86933899]
[119.30081940 157.06709290]
[124.14064026 171.26484680]
[127.63900757 156.67851257]
[135.83596802 144.11627197]
[147.77799988 135.03948975]
[162.07589722 130.50402832]
[177.06640625 131.03752136]
[191.00570679 136.57788086]
[202.27229309 146.48060608]
[209.55552673 159.59375000]
[212.00816345 174.39189148]
[209.34487915 189.15356445]
[201.87551880 202.16157532]
[190.46896362 211.90275574]
[176.45211792 217.24389648]
[161.45552063 217.56370544]
[147.22372437 212.82495117]
[135.41226196 203.57890320]
[127.39581299 190.90274048]
[127.39581299 205.90274048]
[127.39581299 220.90274048]
[127.39581299 235.90274048]
[127.39581299 250.90274048]
[127.39581299 265.90274048]
[127.39581299 280.90274048]
[127.39581299 295.90274048]
[127.39581299 310.90274048]
[127.39581299 325.90274048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 126]
[12 125]
[13 124]
[14 123]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[39 120]
[40 119]
[41 118]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
