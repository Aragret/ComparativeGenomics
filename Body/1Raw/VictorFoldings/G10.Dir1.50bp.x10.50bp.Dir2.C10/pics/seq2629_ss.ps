%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUxxxxxxxxxxACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.28119659 200.71377563]
[81.66536713 185.72642517]
[81.04954529 170.73907471]
[80.43371582 155.75172424]
[79.81789398 140.76435852]
[79.20206451 125.77701569]
[72.93266296 112.15003204]
[61.95185852 101.93132782]
[50.97105789 91.71261597]
[39.99025345 81.49391174]
[29.00945282 71.27520752]
[18.02865028 61.05649567]
[7.04784679 50.83779144]
[-3.93295550 40.61908340]
[-3.76787972 55.61817551]
[-13.14854622 67.32300568]
[-27.82349777 70.42877960]
[-41.14182663 63.52790451]
[-47.06747437 49.74796295]
[-42.91484451 35.33423233]
[-30.56597328 26.81922340]
[-15.61916447 28.06133461]
[-25.02302170 16.37512589]
[-34.42687988 4.68891764]
[-43.83073425 -6.99729109]
[-53.23459244 -18.68350029]
[-62.63845062 -30.36970901]
[-72.04230499 -42.05591583]
[-86.65904999 -32.34992981]
[-109.40064240 -36.82152557]
[-123.64733124 -41.51532364]
[-137.89402771 -46.20912552]
[-152.14071655 -50.90292740]
[-160.02357483 -38.05936050]
[-170.65632629 -27.38033485]
[-183.46553040 -19.44175529]
[-197.76040649 -14.67174053]
[-212.77006531 -13.32752895]
[-227.68504333 -15.48161411]
[-241.70100403 -21.01782799]
[-254.06207275 -29.63761139]
[-264.10165405 -40.87610626]
[-271.27828979 -54.12723923]
[-275.20498657 -68.67639160]
[-275.66995239 -83.73894501]
[-272.64813232 -98.50259399]
[-266.30249023 -112.17115784]
[-256.97525024 -124.00750732]
[-245.16938782 -133.37332153]
[-231.52160645 -139.76350403]
[-216.76788330 -142.83345032]
[-201.70390320 -142.41761780]
[-187.14201355 -138.53840637]
[-173.86753845 -131.40501404]
[-162.59635925 -121.40216827]
[-153.93629456 -109.06927490]
[-148.35440063 -95.07145691]
[-146.15167236 -80.16358185]
[-147.44691467 -65.14962006]
[-133.20022583 -60.45581818]
[-118.95352936 -55.76201630]
[-104.70684052 -51.06821442]
[-98.41262054 -55.14654922]
[-106.56909180 -67.73511505]
[-93.98040009 -75.89138794]
[-85.82418060 -63.30321503]
[-79.52996063 -67.38154602]
[-77.99266815 -82.30256653]
[-76.45537567 -97.22357941]
[-74.91808319 -112.14459991]
[-88.66919708 -118.48380280]
[-99.61518097 -128.94631958]
[-106.56869507 -142.39723206]
[-108.77547455 -157.37751770]
[-105.99613953 -172.26220703]
[-98.53217316 -185.43673706]
[-87.19321442 -195.47200012]
[-73.20922089 -201.27947998]
[-58.09708405 -202.22921753]
[-43.49604797 -198.21817017]
[-30.98992348 -189.68145752]
[-21.93528175 -177.54505920]
[-17.31430435 -163.12544250]
[-17.62823868 -147.98674011]
[-22.84303093 -133.77108765]
[-32.39302063 -122.02050018]
[-45.24229813 -114.00958252]
[-59.99706650 -110.60730743]
[-61.53435898 -95.68628693]
[-63.07165146 -80.76527405]
[-64.60894775 -65.84425354]
[-60.35609818 -51.45977402]
[-50.95223999 -39.77356720]
[-41.54838562 -28.08735657]
[-32.14452744 -16.40114784]
[-22.74066925 -4.71493959]
[-13.33681297 6.97126913]
[-3.93295550 18.65747833]
[6.28575182 29.63828087]
[17.26655388 39.85698700]
[28.24735641 50.07569504]
[39.22816086 60.29440308]
[50.20896149 70.51310730]
[61.18976593 80.73181915]
[72.17056274 90.95052338]
[83.15136719 101.16922760]
[81.55039215 94.20925903]
[83.02709198 86.34341431]
[87.96269226 78.96834564]
[96.10739136 73.60484314]
[106.55543518 71.61872101]
[117.84011078 73.94622803]
[128.13954163 80.87367249]
[142.96203613 83.17454529]
[157.78451538 85.47542572]
[172.60699463 87.77629852]
[187.69496155 81.35092163]
[200.63909912 91.41973114]
[198.12361145 107.62480164]
[182.73620605 113.29574585]
[170.30612183 102.59877777]
[155.48364258 100.29790497]
[140.66114807 97.99703217]
[125.83867645 95.69615173]
[118.87831879 108.98349762]
[129.20921326 119.85881042]
[143.09730530 113.78453827]
[158.22555542 112.82968903]
[172.76716614 117.10957336]
[184.96617126 126.10736847]
[193.34945679 138.73654175]
[196.90472412 153.47207642]
[195.20265198 168.53457642]
[188.44876099 182.10516357]
[177.45864868 192.54513550]
[163.55938721 198.59379578]
[148.42939758 199.52076721]
[133.89569092 195.21409607]
[121.71330261 186.19383240]
[113.35330200 173.54922485]
[109.82519531 158.80715942]
[111.55502319 143.74783325]
[118.33390808 130.18971252]
[108.00300598 119.31439972]
[94.18942261 125.16118622]
[94.80524445 140.14854431]
[95.42107391 155.13589478]
[96.03689575 170.12324524]
[96.65272522 185.11059570]
[97.26854706 200.09794617]
[103.96006775 215.67549133]
[90.84369659 226.41780090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 106]
[8 105]
[9 104]
[10 103]
[11 102]
[12 101]
[13 100]
[14 99]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[30 62]
[31 61]
[32 60]
[33 59]
[67 91]
[68 90]
[69 89]
[70 88]
[113 124]
[114 123]
[115 122]
[116 121]
[125 144]
[126 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
