%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.71109009 89.59135437]
[122.14485168 97.78218079]
[109.57861328 105.97299957]
[99.46656799 117.05210876]
[92.45434570 130.31214905]
[85.44211578 143.57218933]
[78.42988586 156.83222961]
[71.41765594 170.09226990]
[64.40542603 183.35231018]
[67.73738861 199.04553223]
[57.43450928 211.34310913]
[41.40027237 210.81137085]
[31.93477058 197.85823059]
[36.29912949 182.42022705]
[51.14538574 176.34007263]
[58.15761566 163.08003235]
[65.16984558 149.81999207]
[72.18207550 136.55995178]
[79.19430542 123.29991913]
[86.20653534 110.03987885]
[81.49648285 104.20331573]
[66.67726135 106.52511597]
[72.07637787 92.53020477]
[67.36632538 86.69364166]
[52.92435074 90.74695587]
[38.48237610 94.80027771]
[24.04040146 98.85359192]
[19.61545181 113.63274384]
[7.88787365 123.65608978]
[-7.40010405 125.72521210]
[-21.37014389 119.17987061]
[-29.56445694 106.10865021]
[-29.36826706 90.68253326]
[-20.84417725 77.82393646]
[-6.71219587 71.63599396]
[8.51821518 74.09325409]
[19.98708725 84.41161346]
[34.42906189 80.35829926]
[48.87103653 76.30498505]
[63.31301117 72.25167084]
[73.54780579 70.72523499]
[82.90014648 71.87906647]
[90.76316833 75.30242157]
[96.65690613 80.45910645]
[100.25244141 86.72113800]
[101.38778687 93.40676117]
[113.95403290 85.21593475]
[126.52027130 77.02511597]
[112.57174683 46.25510025]
[105.33407593 13.26086998]
[105.12215424 -20.51199150]
[111.94309235 -53.58424377]
[125.49600983 -84.50778961]
[145.18531799 -111.92906189]
[170.14686584 -134.64831543]
[161.82911682 -147.13090515]
[153.51138306 -159.61349487]
[145.19363403 -172.09608459]
[136.87588501 -184.57867432]
[128.55813599 -197.06126404]
[113.17292786 -201.60824585]
[107.26912689 -216.52551270]
[115.37561798 -230.36979675]
[131.27378845 -232.52096558]
[142.76792908 -221.32881165]
[141.04072571 -205.37901306]
[149.35847473 -192.89642334]
[157.67622375 -180.41383362]
[165.99397278 -167.93124390]
[174.31172180 -155.44865417]
[182.62945557 -142.96606445]
[190.27583313 -147.28598022]
[198.14614868 -151.18328857]
[206.21704102 -154.64642334]
[214.46459961 -157.66510010]
[222.86437988 -160.23034668]
[231.39144897 -162.33454895]
[240.02053833 -163.97145081]
[248.72604370 -165.13619995]
[257.48217773 -165.82530212]
[266.26290894 -166.03672791]
[275.04229736 -165.76983643]
[283.79421997 -165.02539062]
[292.49273682 -163.80560303]
[301.11209106 -162.11405945]
[309.62664795 -159.95578003]
[318.01123047 -157.33715820]
[326.24090576 -154.26593018]
[334.29132080 -150.75122070]
[342.13854980 -146.80340576]
[349.75930786 -142.43420410]
[357.13101196 -137.65657043]
[364.23181152 -132.48464966]
[371.04061890 -126.93376923]
[377.53720093 -121.02038574]
[383.70236206 -114.76203156]
[389.51773071 -108.17726135]
[394.96609497 -101.28558350]
[400.03125000 -94.10743713]
[404.69821167 -86.66410065]
[408.95309448 -78.97764587]
[412.78329468 -71.07086182]
[416.17742920 -62.96718597]
[419.12539673 -54.69065475]
[421.61849976 -46.26580429]
[423.64926147 -37.71762085]
[425.21170044 -29.07145309]
[426.30117798 -20.35293770]
[426.91439819 -11.58793163]
[427.04959106 -2.80242705]
[426.70626831 5.97751951]
[425.88552856 14.72586918]
[424.58972168 23.41667747]
[422.82269287 32.02416611]
[420.58969116 40.52280426]
[417.89733887 48.88739014]
[414.75354004 57.09310532]
[411.16769409 65.11561584]
[407.15036011 72.93112183]
[402.71350098 80.51644135]
[397.87017822 87.84906769]
[392.63482666 94.90724945]
[387.02294922 101.67005157]
[381.05114746 108.11740112]
[374.73712158 114.23017883]
[368.09960938 119.99024200]
[361.15829468 125.38050079]
[353.93374634 130.38496399]
[346.44738770 134.98876953]
[338.72140503 139.17825317]
[330.77871704 142.94097900]
[322.64285278 146.26579285]
[314.33798218 149.14282227]
[305.88867188 151.56349182]
[297.32000732 153.52064514]
[288.65737915 155.00845337]
[279.92651367 156.02249146]
[271.15328979 156.55973816]
[262.36370850 156.61859131]
[253.58383179 156.19886780]
[244.83972168 155.30178833]
[236.15730286 153.93002319]
[227.56233215 152.08760071]
[219.08027649 149.77999878]
[210.73632812 147.01402283]
[202.55523682 143.79788208]
[194.56123352 140.14111328]
[186.77806091 136.05451965]
[179.22880554 131.55024719]
[171.93585205 126.64160919]
[164.92083740 121.34317017]
[158.20457458 115.67063141]
[151.80699158 109.64081573]
[145.74708557 103.27158356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[24 40]
[25 39]
[26 38]
[27 37]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
