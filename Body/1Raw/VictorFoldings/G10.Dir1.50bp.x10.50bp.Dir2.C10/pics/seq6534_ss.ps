%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUxxxxxxxxxxGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.81306458 263.16354370]
[104.18908691 248.17652893]
[103.56510925 233.18951416]
[102.94113159 218.20249939]
[102.31715393 203.21546936]
[101.69317627 188.22845459]
[101.06919861 173.24143982]
[100.44522095 158.25442505]
[87.58681488 150.53034973]
[74.06262970 157.01850891]
[60.53843689 163.50666809]
[47.01424789 169.99484253]
[33.49005890 176.48300171]
[19.96586800 182.97117615]
[16.95287895 187.39173889]
[12.93209267 189.91873169]
[8.81170940 190.48803711]
[5.38960552 189.41255188]
[-8.51295090 195.04450989]
[-15.00878620 211.25381470]
[-30.89328384 217.65434265]
[-46.19815826 210.75370789]
[-59.98054123 216.67367554]
[-73.76292419 222.59362793]
[-87.54530334 228.51359558]
[-94.80300140 242.82112122]
[-110.54270172 245.92619324]
[-122.69025421 235.44685364]
[-121.92709351 219.42196655]
[-108.83865356 210.14443970]
[-93.46526337 214.73121643]
[-79.68288422 208.81124878]
[-65.90050507 202.89128113]
[-52.11812210 196.97132874]
[-49.04618454 184.41903687]
[-39.14458466 175.81481934]
[-25.89844704 174.48522949]
[-14.14490700 181.14195251]
[-0.24235132 175.50999451]
[13.47770214 169.44697571]
[27.00189209 162.95881653]
[40.52608109 156.47064209]
[54.05027390 149.98248291]
[67.57446289 143.49432373]
[81.09865570 137.00614929]
[64.50556183 112.87680817]
[68.75241089 86.69506073]
[87.76275635 72.42708588]
[85.27764130 57.63438034]
[80.74298859 49.62882996]
[82.89803314 42.50833893]
[80.72119904 27.66713333]
[78.54436493 12.82592773]
[74.68857574 7.32679605]
[74.29775238 1.57540011]
[76.59904480 -2.67660809]
[75.04145813 -17.59552002]
[73.48387909 -32.51443100]
[61.04120636 -38.52933502]
[53.27093506 -49.82694244]
[52.12357712 -63.38179779]
[57.79320908 -75.62789154]
[68.69458771 -83.39679718]
[67.44771576 -98.34487915]
[66.20083618 -113.29296875]
[64.95396423 -128.24105835]
[50.46456528 -132.83732605]
[38.84024429 -142.63241577]
[31.85363007 -156.13262939]
[30.57012749 -171.27928162]
[35.18545914 -185.76261902]
[44.99582672 -197.37403870]
[58.50521469 -204.34289551]
[73.65354156 -205.60646057]
[88.13079834 -200.97209167]
[99.72930908 -191.14645386]
[106.68038177 -177.62791443]
[107.92402649 -162.47793579]
[103.27060699 -148.00679016]
[93.42972565 -136.42121887]
[79.90205383 -129.48793030]
[81.14892578 -114.53984070]
[82.39579773 -99.59175873]
[83.64267731 -84.64366913]
[97.92583466 -76.61269379]
[104.69678497 -61.50904083]
[101.11862946 -45.17875290]
[88.40279388 -34.07201385]
[89.96037292 -19.15310097]
[91.51795197 -4.23418903]
[93.38556671 10.64909077]
[95.56240082 25.49029732]
[97.73924255 40.33150101]
[100.07034302 55.14926147]
[102.55546570 69.94197083]
[123.28804779 75.27955627]
[137.36466980 94.56411743]
[135.93060303 120.87361145]
[150.92979431 120.71757507]
[165.92898560 120.56153870]
[169.24421692 105.86099243]
[175.86080933 92.32151794]
[185.42193604 80.67327118]
[197.41197205 71.54443359]
[211.18431091 65.42731476]
[225.99624634 62.65179062]
[241.04896545 63.36755371]
[255.53070068 67.53599548]
[268.66049194 74.93232727]
[279.73022461 85.15766907]
[288.14294434 97.66057587]
[293.44497681 111.76678467]
[295.35037231 126.71557617]
[293.75637817 141.70075989]
[288.74896240 155.91423035]
[280.59817505 168.58944702]
[269.74353027 179.04286194]
[256.77047729 186.71073914]
[242.37860107 191.17955017]
[227.34402466 192.20831299]
[212.47755432 189.74154663]
[198.58093262 183.91226196]
[186.40357971 175.03483582]
[176.60218811 163.58801270]
[169.70536804 150.18911743]
[166.08502197 135.56072998]
[151.08583069 135.71676636]
[136.08663940 135.87280273]
[130.92304993 141.31221008]
[144.16087341 148.36627197]
[157.39871216 155.42033386]
[171.77536011 159.69956970]
[180.25976562 172.06948853]
[179.07435608 187.02256775]
[168.74691772 197.90118408]
[153.87561035 199.86178589]
[141.08163452 192.03143311]
[136.06134033 177.89743042]
[128.32858276 165.04423523]
[120.59584045 152.19104004]
[115.43223572 157.63044739]
[116.05621338 172.61746216]
[116.68019104 187.60447693]
[117.30416870 202.59149170]
[117.92814636 217.57852173]
[118.55212402 232.56553650]
[119.17610168 247.55255127]
[119.80007935 262.53955078]
[126.50006866 278.11346436]
[113.38954163 288.86291504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[18 39]
[19 38]
[22 34]
[23 33]
[24 32]
[25 31]
[48 95]
[49 94]
[51 93]
[52 92]
[53 91]
[56 90]
[57 89]
[58 88]
[63 84]
[64 83]
[65 82]
[66 81]
[98 128]
[99 127]
[100 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
