%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCxxxxxxxxxxAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.32678223 78.30564880]
[134.88734436 86.68778992]
[122.44789886 95.06993103]
[110.00846100 103.45207214]
[99.23765564 113.89189148]
[90.47144318 126.06372833]
[81.70523834 138.23556519]
[72.93903351 150.40739441]
[64.17282104 162.57923889]
[55.40661621 174.75106812]
[46.64040756 186.92291260]
[50.66170120 202.03460693]
[43.98180389 216.17366028]
[29.75476074 222.66404724]
[14.69814396 218.44122314]
[5.92123079 205.49905396]
[7.56820917 189.94844055]
[18.86142731 179.13191223]
[34.46857071 178.15670776]
[43.23477936 165.98486328]
[52.00098801 153.81303406]
[60.76719284 141.64118958]
[69.53340149 129.46936035]
[78.29960632 117.29751587]
[87.06581879 105.12567902]
[79.07589722 92.43074799]
[64.30984497 95.06961823]
[52.08608246 105.11402893]
[38.19612885 99.73643494]
[23.43007469 102.37530518]
[8.66401863 105.01416779]
[-3.51846886 115.99227905]
[-19.03140831 110.67431641]
[-21.91641617 94.53093719]
[-9.20564461 84.16906738]
[6.02515411 90.24810791]
[20.79121017 87.60924530]
[35.55726624 84.97038269]
[46.72486115 75.11471558]
[61.67097855 80.30355835]
[76.43703461 77.66469574]
[93.52498627 80.23355865]
[101.62631989 91.01263428]
[114.06575775 82.63049316]
[126.50519562 74.24835205]
[138.94464111 65.86620331]
[131.30465698 52.95259857]
[124.43572235 39.61287689]
[118.36150360 25.89302635]
[113.10294342 11.84033871]
[108.67816162 -2.49673963]
[105.10242462 -17.06878662]
[102.38804626 -31.82556915]
[100.54439545 -46.71621704]
[99.57781982 -61.68939972]
[99.49164581 -76.69350433]
[100.28618622 -91.67680359]
[101.95868683 -106.58763885]
[104.50339508 -121.37462616]
[107.91152954 -135.98678589]
[112.17134857 -150.37373352]
[117.26815796 -164.48590088]
[123.18439484 -178.27461243]
[129.89965820 -191.69233704]
[137.39080811 -204.69285583]
[145.63201904 -217.23130798]
[154.59487915 -229.26449585]
[164.24850464 -240.75093079]
[174.55958557 -251.65101624]
[185.49259949 -261.92718506]
[197.00985718 -271.54400635]
[209.07165527 -280.46832275]
[221.63641357 -288.66940308]
[234.66081238 -296.11892700]
[248.09996033 -302.79122925]
[261.90753174 -308.66333008]
[276.03591919 -313.71499634]
[290.43643188 -317.92877197]
[305.05941772 -321.29013062]
[319.85446167 -323.78753662]
[334.77056885 -325.41232300]
[349.75634766 -326.15893555]
[364.76007080 -326.02478027]
[379.73010254 -325.01031494]
[394.61477661 -323.11901855]
[409.36279297 -320.35745239]
[423.92333984 -316.73513794]
[438.24618530 -312.26452637]
[452.28198242 -306.96102905]
[465.98233032 -300.84295654]
[479.30001831 -293.93136597]
[492.18911743 -286.25012207]
[504.60519409 -277.82568359]
[516.50549316 -268.68710327]
[527.84893799 -258.86587524]
[538.59643555 -248.39582825]
[548.71093750 -237.31309509]
[558.15759277 -225.65586853]
[566.90386963 -213.46432495]
[574.91955566 -200.78050232]
[582.17700195 -187.64811707]
[588.65124512 -174.11244202]
[594.31994629 -160.22013855]
[599.16363525 -146.01908875]
[603.16546631 -131.55825806]
[606.31176758 -116.88749695]
[608.59161377 -102.05736542]
[609.99725342 -87.11900330]
[610.52368164 -72.12389374]
[610.16925049 -57.12372971]
[608.93505859 -42.17022705]
[606.82543945 -27.31492805]
[603.84759521 -12.60904503]
[600.01184082 1.89672959]
[595.33135986 16.15238953]
[589.82238770 30.10879326]
[583.50378418 43.71783066]
[576.39739990 56.93258667]
[568.52770996 69.70750427]
[559.92187500 81.99855042]
[550.60949707 93.76335907]
[540.62274170 104.96136475]
[529.99603271 115.55396271]
[518.76599121 125.50465393]
[506.97128296 134.77912903]
[494.65261841 143.34539795]
[481.85247803 151.17396545]
[468.61492920 158.23780823]
[454.98565674 164.51261902]
[441.01159668 169.97671509]
[426.74096680 174.61131287]
[412.22293091 178.40039062]
[397.50753784 181.33091736]
[382.64553833 183.39277649]
[367.68814087 184.57885742]
[352.68692017 184.88508606]
[337.69357300 184.31039429]
[322.75979614 182.85676575]
[307.93707275 180.52922058]
[293.27651978 177.33576965]
[278.82864380 173.28742981]
[264.64324951 168.39814758]
[250.76922607 162.68478394]
[237.25444031 156.16703796]
[224.14546204 148.86737061]
[211.48748779 140.81094360]
[199.32412720 132.02554321]
[187.69734192 122.54144287]
[176.64718628 112.39134216]
[166.21176147 101.61022186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[4 43]
[5 25]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[26 41]
[27 40]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
