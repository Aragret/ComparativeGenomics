%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUxxxxxxxxxxGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.33074188 262.15383911]
[120.33074188 247.15383911]
[120.33074188 232.15383911]
[120.33074188 217.15383911]
[120.33074188 202.15383911]
[120.33074188 187.15383911]
[120.33074188 172.15383911]
[120.33074188 157.15383911]
[120.33074188 142.15383911]
[120.33074188 127.15383911]
[113.74644470 123.56258392]
[106.56372070 136.73104858]
[93.39537811 129.54809570]
[100.57786560 116.38007355]
[93.99357605 112.78881836]
[81.38244629 120.91036224]
[84.46438599 135.77192688]
[81.96572876 150.74259949]
[74.22440338 163.79772949]
[62.28736496 173.17170715]
[47.76899338 177.59678650]
[32.63278198 176.47450256]
[18.92577553 169.95664978]
[8.50173855 158.92469788]
[2.77043462 144.87065125]
[2.50697565 129.69517517]
[7.74699211 115.45063782]
[17.78181458 104.06350708]
[31.25431633 97.07379150]
[46.34245300 95.42678833]
[61.00567627 99.34525299]
[73.26090240 108.29923248]
[85.87203217 100.17768860]
[94.51114655 87.91532135]
[97.91412354 73.30642700]
[101.31710052 58.69753647]
[104.72008514 44.08864594]
[108.12306213 29.47975349]
[102.66764069 31.22291183]
[96.57707214 31.61673546]
[90.13241577 30.52779388]
[76.11569977 25.18628120]
[62.09898758 19.84476852]
[47.78100586 26.53588295]
[32.95405197 21.06441498]
[26.41469193 6.67649317]
[32.04261017 -8.09178543]
[46.49886703 -14.47866344]
[61.20681763 -8.69491768]
[67.44049835 5.82805634]
[81.45721436 11.16956902]
[95.47392273 16.51108170]
[83.58509827 7.36472797]
[80.89862823 -7.39274025]
[88.80154419 -20.14201164]
[103.21355438 -24.30060577]
[116.69371033 -17.72143555]
[122.28217316 -3.80133748]
[117.09224701 10.27425003]
[126.10977936 -1.71258247]
[135.12730408 -13.69941521]
[144.14483643 -25.68624687]
[153.16236877 -37.67308044]
[138.99839783 -49.40526581]
[137.09657288 -73.85467529]
[139.27340698 -88.69588470]
[141.45024109 -103.53708649]
[143.62707520 -118.37829590]
[145.80390930 -133.21949768]
[147.98074341 -148.06069946]
[134.51463318 -154.98477173]
[124.02819824 -165.90782166]
[117.65892029 -179.64503479]
[116.09769440 -194.70629883]
[119.51386261 -209.45785522]
[127.53688049 -222.29957581]
[139.29646301 -231.83850098]
[153.51701355 -237.03990173]
[168.65599060 -237.33958435]
[183.07125854 -232.70503235]
[195.19912720 -223.63896179]
[203.72406006 -211.12480164]
[207.72134399 -196.52000427]
[206.75738525 -181.40876770]
[200.93675232 -167.43025208]
[190.89079285 -156.10073853]
[177.70925903 -148.64918518]
[162.82196045 -145.88386536]
[160.64512634 -131.04266357]
[158.46827698 -116.20146179]
[156.29144287 -101.36025238]
[154.11460876 -86.51905060]
[151.93777466 -71.67784119]
[157.48342896 -66.62851715]
[171.77467346 -71.18485260]
[168.57473755 -56.52986908]
[174.12040710 -51.48054123]
[188.69309998 -55.03530502]
[203.26580811 -58.59006500]
[217.83851624 -62.14482880]
[232.41120911 -65.69959259]
[235.53565979 -80.63948822]
[244.83967590 -92.73899078]
[258.47595215 -99.59573364]
[273.73696899 -99.84830475]
[287.59268188 -93.44655609]
[297.29199219 -81.66156006]
[300.90908813 -66.83323669]
[297.72583008 -51.90575790]
[288.37423706 -39.84298706]
[274.71109009 -33.03999710]
[259.44918823 -32.84752655]
[245.61880493 -39.30378723]
[235.96597290 -51.12688828]
[221.39326477 -47.57212448]
[206.82057190 -44.01736450]
[192.24786377 -40.46260071]
[177.67517090 -36.90784073]
[165.14920044 -28.65555000]
[156.13166809 -16.66871834]
[147.11413574 -4.68188524]
[138.09661865 7.30494738]
[129.07908630 19.29178047]
[122.73195648 32.88273239]
[119.32897186 47.49162292]
[115.92599487 62.10051727]
[112.52301788 76.70941162]
[109.12004089 91.31829834]
[119.11031342 80.12926483]
[130.02989197 69.84516907]
[144.04502869 64.49953461]
[159.03970337 64.89945984]
[172.74996948 70.98455811]
[183.10585022 81.83609772]
[188.54377747 95.81568909]
[188.24272156 110.81266785]
[182.24815369 124.56275940]
[171.46513367 134.98995972]
[157.52169800 140.51994324]
[142.52212524 140.31758118]
[135.33073425 127.15383911]
[135.33073425 142.15383911]
[135.33073425 157.15383911]
[135.33073425 172.15383911]
[135.33073425 187.15383911]
[135.33073425 202.15383911]
[135.33073425 217.15383911]
[135.33073425 232.15383911]
[135.33073425 247.15383911]
[135.33073425 262.15383911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 33]
[16 32]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[41 52]
[42 51]
[43 50]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
