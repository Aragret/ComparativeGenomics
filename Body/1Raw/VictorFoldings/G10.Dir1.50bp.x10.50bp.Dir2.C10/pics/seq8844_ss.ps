%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCxxxxxxxxxxGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.40978241 262.83087158]
[118.40978241 247.83087158]
[118.40978241 232.83087158]
[118.40978241 217.83087158]
[118.40978241 202.83087158]
[118.40978241 187.83087158]
[118.40978241 172.83087158]
[118.40978241 157.83087158]
[118.40978241 142.83087158]
[118.40978241 127.83087158]
[111.98057556 123.96882629]
[108.60781860 138.58473206]
[93.66501617 139.89341736]
[87.80297089 126.08630371]
[99.12217712 116.24474335]
[92.69297791 112.38269806]
[79.45038605 119.42783356]
[66.20780182 126.47296906]
[68.04370880 141.53929138]
[64.30926514 156.25045776]
[55.50952530 168.61689758]
[42.83458328 176.96617126]
[27.99862480 180.16909790]
[13.00808620 177.79251099]
[-0.10968365 170.15780640]
[-9.58061409 158.29754639]
[-14.12383938 143.81570435]
[-13.12492561 128.67085266]
[-6.71896791 114.91120148]
[4.22768021 104.39762115]
[18.23457527 98.55199432]
[33.40739822 98.16489410]
[47.69415283 103.28867340]
[59.16267014 113.23038483]
[72.40525818 106.18524933]
[85.64784241 99.14011383]
[95.39549255 87.73909760]
[100.29704285 73.56253815]
[105.19859314 59.38597870]
[110.10014343 45.20941925]
[105.16484833 33.24711609]
[109.58686829 21.51405334]
[120.46996307 16.14138031]
[125.66537476 2.06986141]
[130.86079407 -12.00165749]
[136.05621338 -26.07317734]
[135.58816528 -41.06587219]
[129.52514648 -54.78592682]
[114.92362213 -51.18503189]
[99.91862488 -50.17456055]
[84.96613312 -51.78522110]
[70.52054596 -55.96806717]
[57.02085114 -62.59598541]
[44.87728119 -71.46755981]
[34.45886993 -82.31319427]
[26.08222008 -94.80330658]
[20.00189018 -108.55832672]
[16.40265083 -123.16027069]
[15.39388084 -138.16539001]
[17.00623703 -153.11769104]
[21.19071960 -167.56280518]
[27.82016754 -181.06175232]
[36.69312286 -193.20431519]
[47.53993988 -203.62149048]
[60.03099823 -211.99671936]
[73.78671265 -218.07550049]
[88.38906097 -221.67308044]
[103.39428711 -222.68014526]
[118.34641266 -221.06610107]
[132.79104614 -216.87997437]
[146.28924561 -210.24899292]
[158.43080139 -201.37466431]
[168.84675598 -190.52665710]
[177.22056580 -178.03465271]
[183.29777527 -164.27825928]
[186.89370728 -149.67549133]
[187.89906311 -134.67015076]
[186.28332520 -119.71821594]
[182.09556580 -105.27405548]
[175.46305847 -91.77661133]
[166.58734131 -79.63606262]
[155.73815918 -69.22133636]
[143.24520874 -60.84894180]
[149.30822754 -47.12888718]
[163.53500366 -42.37507248]
[176.62815857 -49.69417572]
[189.72131348 -57.01328278]
[202.81446838 -64.33238983]
[215.90762329 -71.65149689]
[212.04461670 -86.22983551]
[211.92929077 -101.31086731]
[215.56887817 -115.94657898]
[222.73460388 -129.21696472]
[232.97602844 -140.28784180]
[245.64935303 -148.46327209]
[259.95791626 -153.22933960]
[275.00231934 -154.28645325]
[289.83679199 -151.56817627]
[303.52883911 -145.24534607]
[315.21783447 -135.71545410]
[324.16891479 -123.57754517]
[329.81942749 -109.59461212]
[331.81420898 -94.64564514]
[330.02786255 -79.67034149]
[324.57263184 -65.61006165]
[315.79147339 -53.34865189]
[304.23638916 -43.65687180]
[290.63372803 -37.14395142]
[275.83853149 -34.21930313]
[260.78088379 -35.06676865]
[246.40731812 -39.63307953]
[233.62135315 -47.63119507]
[223.22671509 -58.55833817]
[210.13357544 -51.23923492]
[197.04042053 -43.92012787]
[183.94726562 -36.60102463]
[170.85411072 -29.28191757]
[167.32258606 -25.58985901]
[163.24041748 -22.87244415]
[158.85310364 -21.18938065]
[154.40527344 -20.54225349]
[150.12773132 -20.87776184]
[144.93231201 -6.80624247]
[139.73689270 7.26527691]
[134.54148865 21.33679581]
[138.46014404 38.41438675]
[124.27670288 50.11096954]
[119.37515259 64.28752899]
[114.47360229 78.46408844]
[109.57205200 92.64064789]
[120.67017365 82.54947662]
[133.55364990 74.86730194]
[148.48922729 73.47845459]
[162.56828308 78.65341187]
[173.04904175 89.38438416]
[177.89044189 103.58158875]
[176.14967346 118.48023987]
[168.16574097 131.17892456]
[155.49343872 139.20468140]
[140.60116577 140.99461365]
[133.40977478 127.83087158]
[133.40977478 142.83087158]
[133.40977478 157.83087158]
[133.40977478 172.83087158]
[133.40977478 187.83087158]
[133.40977478 202.83087158]
[133.40977478 217.83087158]
[133.40977478 232.83087158]
[133.40977478 247.83087158]
[133.40977478 262.83087158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 36]
[17 35]
[18 34]
[37 130]
[38 129]
[39 128]
[40 127]
[43 125]
[44 124]
[45 123]
[46 122]
[47 84]
[48 83]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
