%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAxxxxxxxxxxUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.12515259 386.78646851]
[93.12515259 371.78646851]
[93.12515259 356.78646851]
[93.12515259 341.78646851]
[93.12515259 326.78646851]
[93.12515259 311.78646851]
[93.12515259 296.78646851]
[93.12515259 281.78646851]
[93.12515259 266.78646851]
[93.12515259 251.78646851]
[77.08295441 247.41801453]
[62.88330460 238.74334717]
[51.65608978 226.44396973]
[44.29710770 211.49017334]
[41.39660263 195.06449890]
[43.19190979 178.46813965]
[49.54808044 163.01797485]
[59.96797562 149.94200134]
[73.63114166 140.28176880]
[89.45841980 134.80938721]
[88.52279663 119.83858490]
[82.67480469 104.35281372]
[89.10791779 93.26161957]
[81.38383484 80.40321350]
[73.65974426 67.54481506]
[65.93566132 54.68641281]
[62.75858688 69.34609222]
[51.67909622 79.45771027]
[36.79084015 81.28523254]
[23.59473419 74.15341949]
[16.96647453 60.69733810]
[19.35507202 45.88874054]
[29.87798691 35.19910812]
[44.64721298 32.57804871]
[58.20517349 38.99339294]
[52.71814346 25.03300285]
[47.23111343 11.07261372]
[41.74407959 -2.88777614]
[27.25810432 1.06237841]
[12.42995358 3.42313981]
[-2.56651783 4.16682959]
[-17.55548477 3.28472805]
[-32.36120987 0.78717774]
[-46.81010056 -3.29653907]
[-60.73275757 -8.91854286]
[-73.96593475 -16.01291847]
[-86.35449219 -24.49648857]
[-97.75317383 -34.26978683]
[-108.02832794 -45.21822739]
[-117.05950165 -57.21344376]
[-124.74079132 -70.11479950]
[-130.98214722 -83.77103424]
[-135.71040344 -98.02202606]
[-138.87010193 -112.70070648]
[-140.42419434 -127.63496399]
[-140.35449219 -142.64970398]
[-138.66177368 -157.56887817]
[-135.36592102 -172.21759033]
[-130.50555420 -186.42405701]
[-124.13764954 -200.02175903]
[-116.33689117 -212.85122681]
[-107.19473267 -224.76206970]
[-96.81835175 -235.61462402]
[-85.32941437 -245.28166199]
[-72.86261749 -253.64982605]
[-59.56413651 -260.62103271]
[-45.58987808 -266.11349487]
[-31.10368729 -270.06286621]
[-16.27541161 -272.42285156]
[-1.27889907 -273.16571045]
[13.71002102 -272.28280640]
[28.51561165 -269.78448486]
[42.96428299 -265.69998169]
[56.88663483 -260.07720947]
[70.11943817 -252.98213196]
[82.50753021 -244.49789429]
[93.90568542 -234.72398376]
[104.18025970 -223.77499390]
[113.21077728 -211.77929688]
[120.89138031 -198.87751770]
[127.13200378 -185.22096252]
[131.85948181 -170.96969604]
[135.01838684 -156.29086304]
[136.57168579 -141.35652161]
[136.50117493 -126.34178162]
[134.80766296 -111.42269135]
[131.51101685 -96.77416229]
[126.64987183 -82.56794739]
[120.28125000 -68.97060394]
[112.47979736 -56.14154816]
[103.33699799 -44.23119736]
[92.96003723 -33.37919998]
[81.47057343 -23.71278381]
[69.00333405 -15.34528446]
[55.70447159 -8.37480736]
[61.19150162 5.58558226]
[66.67853546 19.54597282]
[72.16556549 33.50636292]
[78.79406738 46.96232605]
[86.51815033 59.82072830]
[94.24223328 72.67913055]
[101.96631622 85.53753662]
[114.82472229 93.26161957]
[129.80442810 94.04146576]
[143.98820496 87.03209686]
[156.29600525 95.42061615]
[171.27572632 96.20046234]
[186.25543213 96.98030853]
[202.42163086 88.22621918]
[216.77845764 98.27019501]
[231.77114868 98.73823547]
[244.40119934 88.84574127]
[259.97625732 92.69248199]
[266.54846191 107.32756805]
[259.07617188 121.52420807]
[243.29151917 124.39196014]
[231.30311584 113.73092651]
[216.31040955 113.26288605]
[207.24461365 121.33249664]
[194.70967102 121.02565002]
[185.47558594 111.96002197]
[170.49588013 111.18017578]
[155.51615906 110.40032959]
[142.40383911 117.46548462]
[129.02459717 109.02117920]
[114.04487610 108.24133301]
[103.49358368 118.90296173]
[104.42921448 133.87374878]
[117.67958832 136.28691101]
[130.03967285 141.61622620]
[140.87712097 149.58494568]
[149.63835144 159.78147888]
[155.87693787 171.68048096]
[159.27622986 184.67004395]
[159.66552734 198.08311462]
[157.02857971 211.23175049]
[151.50425720 223.44242859]
[143.37924194 234.09048462]
[133.07315063 242.63215637]
[121.11685181 248.63226318]
[108.12515259 251.78646851]
[108.12515259 266.78646851]
[108.12515259 281.78646851]
[108.12515259 296.78646851]
[108.12515259 311.78646851]
[108.12515259 326.78646851]
[108.12515259 341.78646851]
[108.12515259 356.78646851]
[108.12515259 371.78646851]
[108.12515259 386.78646851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 128]
[21 127]
[23 102]
[24 101]
[25 100]
[26 99]
[35 98]
[36 97]
[37 96]
[38 95]
[103 126]
[104 125]
[106 123]
[107 122]
[108 121]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
