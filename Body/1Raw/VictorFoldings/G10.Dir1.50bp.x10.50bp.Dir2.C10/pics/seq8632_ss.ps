%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCxxxxxxxxxxAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.07317352 279.23391724]
[94.07317352 264.23391724]
[94.07317352 249.23391724]
[94.07317352 234.23391724]
[94.07317352 219.23391724]
[94.07317352 204.23391724]
[94.07317352 189.23391724]
[94.07317352 174.23391724]
[94.07317352 159.23391724]
[94.07317352 144.23391724]
[86.46619415 139.95884705]
[80.25216675 134.49517822]
[75.58835602 128.21168518]
[72.54386139 121.49037933]
[59.01967239 127.97854614]
[45.49548340 134.46670532]
[31.97129250 140.95487976]
[29.27879906 158.83120728]
[16.54131889 171.43830872]
[-1.05198812 173.90330505]
[-16.48947525 165.43266296]
[-29.73206139 172.47779846]
[-42.97464752 179.52293396]
[-49.01791000 194.38424683]
[-64.44503021 198.78692627]
[-77.42163086 189.35362244]
[-77.99318695 173.32073975]
[-65.72123718 162.98736572]
[-50.01978302 166.28034973]
[-36.77719498 159.23521423]
[-23.53461075 152.19007874]
[-23.64000320 139.97821045]
[-18.48975182 128.82521057]
[-9.01424885 120.89334869]
[3.01116133 117.74944305]
[15.29864502 120.05553436]
[25.48312759 127.43068695]
[39.00731659 120.94252014]
[52.53150558 114.45435333]
[66.05569458 107.96618652]
[65.20134735 102.17481232]
[65.32798004 96.32212067]
[51.10120010 91.56830597]
[35.14943314 95.37266541]
[24.07696152 83.27587128]
[29.27419472 67.72206879]
[45.39466476 64.71167755]
[55.85501480 77.34152985]
[70.08179474 82.09534454]
[85.24650574 68.40869904]
[105.47549438 65.56607819]
[110.96252441 51.60569000]
[116.44955444 37.64530182]
[121.93658447 23.68490982]
[108.59106445 16.80828285]
[96.00971985 8.61677361]
[84.32166290 -0.80555636]
[73.64682770 -11.36202049]
[64.09475708 -22.94429016]
[55.76347351 -35.43351364]
[48.73846817 -48.70153427]
[43.09183121 -62.61219406]
[38.88150024 -77.02275085]
[36.15068436 -91.78532410]
[34.92740631 -106.74843597]
[35.22421646 -121.75852966]
[37.03807449 -136.66157532]
[40.35036087 -151.30465698]
[45.12709045 -165.53750610]
[51.31924438 -179.21406555]
[58.86328125 -192.19398499]
[67.68178558 -204.34408569]
[77.68426514 -215.53968811]
[88.76808167 -225.66589355]
[100.81949615 -234.61878967]
[113.71483612 -242.30651855]
[127.32177734 -248.65019226]
[141.50070190 -253.58470154]
[156.10607910 -257.05941772]
[170.98806763 -259.03866577]
[185.99394226 -259.50216675]
[200.96971130 -258.44515991]
[215.76170349 -255.87844849]
[230.21813965 -251.82843018]
[244.19065857 -246.33663940]
[257.53588867 -239.45942688]
[270.11685181 -231.26736450]
[281.80450439 -221.84451294]
[292.47888184 -211.28758240]
[302.03042603 -199.70489502]
[310.36117554 -187.21530151]
[317.38558960 -173.94697571]
[323.03161621 -160.03605652]
[327.24130249 -145.62532043]
[329.97146606 -130.86262512]
[331.19409180 -115.89945984]
[330.89660645 -100.88938141]
[329.08212280 -85.98641205]
[325.76916504 -71.34347534]
[320.99182129 -57.11083984]
[314.79907227 -43.43455505]
[307.25445557 -30.45495987]
[298.43542480 -18.30524635]
[288.43243408 -7.11008978]
[277.34817505 3.01562762]
[265.29638672 11.96799946]
[252.40069580 19.65516090]
[238.79347229 25.99822807]
[224.61433411 30.93211174]
[210.00880432 34.40618134]
[195.12672424 36.38478470]
[180.12083435 36.84762192]
[165.14511108 35.78994370]
[150.35322571 33.22260284]
[135.89697266 29.17194176]
[130.40994263 43.13233185]
[124.92291260 57.09272003]
[119.43588257 71.05310822]
[137.83029175 87.80317688]
[141.83511353 115.54315948]
[155.07769775 122.58829498]
[168.32028198 129.63342285]
[181.56286621 136.67855835]
[198.38609314 138.77987671]
[201.02403259 155.52734375]
[185.66131592 162.69834900]
[174.51773071 149.92114258]
[161.27514648 142.87600708]
[148.03256226 135.83087158]
[134.78997803 128.78575134]
[128.36077881 132.64778137]
[136.60461426 145.17930603]
[144.84846497 157.71083069]
[157.48718262 165.78936768]
[157.27865601 180.78791809]
[144.42024231 188.51196289]
[131.08103943 181.65151978]
[129.88514709 166.69935608]
[122.69375610 153.53561401]
[115.50237274 140.37187195]
[109.07317352 144.23391724]
[109.07317352 159.23391724]
[109.07317352 174.23391724]
[109.07317352 189.23391724]
[109.07317352 204.23391724]
[109.07317352 219.23391724]
[109.07317352 234.23391724]
[109.07317352 249.23391724]
[109.07317352 264.23391724]
[109.07317352 279.23391724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 40]
[15 39]
[16 38]
[17 37]
[21 31]
[22 30]
[23 29]
[42 49]
[43 48]
[51 118]
[52 117]
[53 116]
[54 115]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
