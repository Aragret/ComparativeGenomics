%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUxxxxxxxxxxUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[64.10525513 324.52368164]
[52.70310593 322.40127563]
[41.42401505 319.70019531]
[30.29733086 316.42749023]
[25.23056602 330.54583740]
[20.16380310 344.66418457]
[23.61504364 360.69607544]
[11.27673340 371.49874878]
[-4.15853071 365.95938110]
[-6.81227255 349.77636719]
[6.04544973 339.59744263]
[11.11221313 325.47906494]
[16.17897606 311.36071777]
[1.33049572 304.85031128]
[-13.01630497 297.29833984]
[-26.78847885 288.74322510]
[-39.91600418 279.22842407]
[-52.33213043 268.80236816]
[-63.97373199 257.51803589]
[-74.78161621 245.43283081]
[-84.70082855 232.60815430]
[-93.68093872 219.10925293]
[-101.67628479 205.00474548]
[-108.64622498 190.36633301]
[-114.55530548 175.26846313]
[-119.37348938 159.78788757]
[-133.96786499 163.25260925]
[-148.56224060 166.71733093]
[-163.15661621 170.18203735]
[-170.00730896 184.23913574]
[-184.31195068 190.55668640]
[-199.31629944 186.15176392]
[-207.93577576 173.10420227]
[-206.10050964 157.57469177]
[-194.67707825 146.89576721]
[-179.05926514 146.10971069]
[-166.62132263 155.58767700]
[-152.02694702 152.12295532]
[-137.43258667 148.65823364]
[-122.83820343 145.19352722]
[-126.60860443 118.65099335]
[-127.22870636 91.84918976]
[-124.68988037 65.16069031]
[-119.02742767 38.95652771]
[-110.32006836 13.60098934]
[-98.68885040 -10.55343437]
[-84.29546356 -33.17095184]
[-96.15709686 -42.35253906]
[-108.01873779 -51.53413010]
[-119.88037109 -60.71572113]
[-131.74200439 -69.89730835]
[-143.60363770 -79.07889557]
[-159.63575745 -78.48654938]
[-169.98506165 -90.74507904]
[-166.71244812 -106.45079803]
[-152.32838440 -113.55561829]
[-137.86711121 -106.60932922]
[-134.42205811 -90.94053650]
[-122.56041718 -81.75894165]
[-110.69878387 -72.57735443]
[-98.83715057 -63.39576721]
[-86.97550964 -54.21417618]
[-75.11387634 -45.03258514]
[-66.44917297 -54.89994812]
[-57.22927856 -64.25064087]
[-47.48495483 -73.05348206]
[-37.24869537 -81.27910614]
[-26.55464745 -88.90008545]
[-15.43847942 -95.89098358]
[-3.93726897 -102.22849274]
[7.91062212 -107.89147949]
[20.06567574 -112.86104584]
[32.48734665 -117.12061310]
[45.13420486 -120.65599060]
[57.96406937 -123.45536804]
[70.93414307 -125.50941467]
[84.00115967 -126.81127930]
[97.12155151 -127.35662842]
[110.25153351 -127.14362335]
[123.34732819 -126.17299652]
[136.36524963 -124.44796753]
[149.26187134 -121.97429657]
[161.99417114 -118.76023865]
[174.51969910 -114.81651306]
[186.79667664 -110.15626526]
[198.78413391 -104.79505157]
[210.44210815 -98.75074768]
[221.73170471 -92.04351807]
[232.61526489 -84.69572449]
[243.05648804 -76.73188782]
[253.02055359 -68.17856598]
[262.47421265 -59.06428528]
[271.38595581 -49.41945267]
[279.72604370 -39.27623367]
[287.46664429 -28.66846275]
[294.58197021 -17.63151932]
[301.04827881 -6.20221949]
[306.84399414 5.58131552]
[320.68759155 -0.19402786]
[334.53118896 -5.96937132]
[348.37478638 -11.74471474]
[362.21841431 -17.52005768]
[365.67138672 -32.64805984]
[377.37905884 -42.83187866]
[392.83956909 -44.15562057]
[406.10803223 -36.11028671]
[412.08245850 -21.78946877]
[408.46557617 -6.69981432]
[396.64810181 3.35639668]
[381.17416382 4.51234579]
[367.99374390 -3.67645264]
[354.15014648 2.09889078]
[340.30654907 7.87423420]
[326.46292114 13.64957714]
[312.61932373 19.42492104]
[316.45138550 30.37156487]
[319.72027588 41.49937057]
[322.41748047 52.77938461]
[324.53598022 64.18226624]
[326.07028198 75.67832947]
[327.01638794 87.23767853]
[327.37182617 98.83023834]
[327.13568115 110.42583466]
[326.30856323 121.99430847]
[324.89263916 133.50555420]
[322.89157104 144.92962646]
[320.31054688 156.23680115]
[317.15634155 167.39764404]
[313.43713379 178.38313293]
[309.16256714 189.16468811]
[304.34381104 199.71424866]
[298.99337769 210.00436401]
[293.12518311 220.00827026]
[286.75451660 229.69993591]
[279.89794922 239.05413818]
[272.57330322 248.04653931]
[264.79965210 256.65374756]
[256.59722900 264.85336304]
[247.98733521 272.62405396]
[238.99243164 279.94561768]
[229.63587952 286.79898071]
[219.94203186 293.16632080]
[209.93611145 299.03106689]
[199.64416504 304.37799072]
[189.09294128 309.19314575]
[178.30993652 313.46398926]
[167.32316589 317.17944336]
[156.16122437 320.32983398]
[144.85317993 322.90695190]
[133.42842102 324.90411377]
[121.91668701 326.31610107]
[110.34793091 327.13925171]
[98.75225067 327.37142944]
[87.15982056 327.01199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[26 40]
[27 39]
[28 38]
[29 37]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
