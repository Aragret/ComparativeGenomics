%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGxxxxxxxxxxUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.41197205 262.45538330]
[92.09991455 247.45864868]
[91.78785706 232.46188354]
[91.47579956 217.46513367]
[91.16374969 202.46838379]
[90.85169220 187.47163391]
[90.53963470 172.47486877]
[90.22757721 157.47811890]
[89.91551971 142.48136902]
[76.13314056 136.56140137]
[65.04182434 146.66004944]
[53.95050812 156.75869751]
[42.85919571 166.85734558]
[47.68551254 181.30126953]
[46.21324921 196.45884705]
[38.69747162 209.70396423]
[26.44034386 218.74180603]
[11.56548405 222.00653076]
[-3.34995031 218.93249512]
[-15.72176838 210.05229187]
[-23.40647697 196.90446472]
[-25.07265663 181.76696777]
[-20.43162918 167.26246643]
[-10.28748131 155.90393066]
[3.60225153 149.65931702]
[18.83108902 149.61053467]
[32.76054382 155.76603699]
[43.85186005 145.66738892]
[54.94317627 135.56874084]
[66.03449249 125.47008514]
[64.18946075 120.05269623]
[63.15946579 114.60791016]
[62.91778564 109.25320435]
[63.42133713 104.09832001]
[48.48703003 102.69602203]
[39.05073166 114.90093231]
[24.50630569 120.04516602]
[9.49482346 116.48722839]
[-1.19360423 105.36243439]
[-4.14833975 90.22066498]
[1.57346308 75.89360809]
[14.14599705 66.95298004]
[29.55741310 66.25168610]
[42.88998413 74.01352692]
[49.88933563 87.76171112]
[64.82363892 89.16401672]
[83.39215851 67.15225220]
[112.12679291 65.24751282]
[119.85087585 52.38910675]
[127.57496643 39.53070450]
[135.29904175 26.67230225]
[140.05285645 12.44552326]
[141.61044312 -2.47338891]
[143.16802979 -17.39230156]
[144.72560120 -32.31121445]
[131.43179321 -25.36322212]
[117.62630463 -31.22908974]
[113.39982605 -45.62134171]
[121.84158325 -58.02040482]
[136.78132629 -59.36357117]
[147.29910278 -48.66971207]
[150.39741516 -63.34623718]
[153.49574280 -78.02276611]
[155.20843506 -92.92466736]
[155.52049255 -107.92141724]
[155.83253479 -122.91817474]
[156.14459229 -137.91493225]
[156.45664978 -152.91168213]
[156.76870728 -167.90843201]
[142.97036743 -174.35246277]
[132.99087524 -185.85594177]
[128.55926514 -200.42578125]
[130.44329834 -215.53771973]
[138.31660461 -228.57347107]
[150.81504822 -237.27455139]
[165.77320862 -240.13343811]
[180.59950256 -236.65478516]
[192.72517395 -227.44132996]
[200.04939270 -214.08932495]
[201.30317688 -198.91210938]
[196.26930237 -184.53921509]
[185.81993103 -173.46084595]
[171.76545715 -167.59637451]
[171.45341492 -152.59962463]
[171.14135742 -137.60287476]
[170.82929993 -122.60611725]
[170.51724243 -107.60935974]
[170.20518494 -92.61260986]
[180.20927429 -103.78929138]
[194.62763977 -107.92581177]
[209.03546143 -103.75273132]
[219.01116943 -92.55071259]
[221.49334717 -77.75750732]
[215.72023010 -63.91297150]
[203.46353149 -55.26580811]
[188.48468018 -54.46972656]
[175.38047791 -61.76903152]
[168.17227173 -74.92443848]
[165.07394409 -60.24791718]
[161.97561646 -45.57139206]
[159.64451599 -30.75363159]
[158.08694458 -15.83471966]
[156.52935791 -0.91580790]
[154.97177124 14.00310421]
[164.04093933 2.05529046]
[175.95091248 -7.06351137]
[189.85087585 -12.70187378]
[204.74783325 -14.45700455]
[219.57759094 -12.20352077]
[233.28074646 -6.10240698]
[244.87837219 3.41048694]
[253.54196167 15.65558052]
[258.65258789 29.75811195]
[259.84518433 44.71062851]
[257.03454590 59.44495010]
[250.42146301 72.90850067]
[240.47834778 84.13945770]
[227.91552734 92.33551788]
[213.63044739 96.91117096]
[198.64361572 97.53954315]
[184.02565002 94.17574310]
[170.82083130 87.06006622]
[159.97248840 76.70085907]
[152.25558472 63.83813858]
[148.22140503 49.39080429]
[148.15745544 34.39638901]
[140.43336487 47.25479126]
[132.70927429 60.11319351]
[124.98519897 72.97159576]
[130.01812744 77.89638519]
[134.07650757 83.75946045]
[136.98542786 90.36721802]
[138.60856628 97.49348450]
[138.85426331 104.88726044]
[137.67996216 112.28153229]
[135.09506226 119.40292358]
[131.16160583 125.98180389]
[125.99328613 131.76246643]
[119.75233459 136.51301575]
[112.64447784 140.03453064]
[104.91227722 142.16931152]
[105.22433472 157.16606140]
[105.53638458 172.16281128]
[105.84844208 187.15957642]
[106.16049957 202.15632629]
[106.47255707 217.15307617]
[106.78461456 232.14982605]
[107.09667206 247.14659119]
[107.40872192 262.14334106]
[109.99972534 281.35107422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 30]
[11 29]
[12 28]
[13 27]
[34 46]
[35 45]
[48 129]
[49 128]
[50 127]
[51 126]
[52 104]
[53 103]
[54 102]
[55 101]
[61 100]
[62 99]
[63 98]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
