%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACxxxxxxxxxxCCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.86119080 305.31546021]
[149.92556763 290.34466553]
[148.98992920 275.37387085]
[148.05430603 260.40307617]
[147.11868286 245.43228149]
[146.18304443 230.46150208]
[145.24742126 215.49070740]
[141.39025879 200.99510193]
[134.76176453 187.53913879]
[128.13327026 174.08317566]
[121.50476837 160.62721252]
[114.87626648 147.17124939]
[108.24777222 133.71528625]
[99.89486694 134.70928955]
[91.54813385 133.66470337]
[83.69781494 130.64285278]
[76.80498505 125.82125092]
[71.27447510 119.48307037]
[67.43112183 112.00057983]
[52.56807327 114.02291107]
[37.70502472 116.04524994]
[33.77722931 130.70294189]
[24.56167603 142.70780945]
[11.48736763 150.24943542]
[-3.43781567 152.20558167]
[-17.93546295 148.30903625]
[-29.80444527 139.18363953]
[-37.25509262 126.24466705]
[-52.11813736 128.26699829]
[-66.98118591 130.28933716]
[-81.84423065 132.31167603]
[-91.21013641 145.04176331]
[-106.84672546 147.33798218]
[-119.47708893 137.83801270]
[-121.60785675 122.17802429]
[-111.97488403 109.64880371]
[-96.29324341 107.68372345]
[-83.86656952 117.44862366]
[-69.00351715 115.42628479]
[-54.14047241 113.40395355]
[-39.27742386 111.38162231]
[-35.55471039 96.92234039]
[-26.55536270 84.95751190]
[-13.62585258 77.32910919]
[1.27938759 75.22638702]
[15.89338303 79.00061798]
[27.98140335 88.10681152]
[35.68269348 101.18219757]
[50.54573822 99.15986633]
[65.40878296 97.13753510]
[66.85803986 89.68709564]
[69.89208984 82.72980499]
[58.80077744 72.63114929]
[42.67244339 69.66316986]
[37.43431854 54.12308884]
[48.47493362 41.99721527]
[64.43665314 45.75960541]
[68.89942932 61.53983688]
[79.99074554 71.63848877]
[85.76003265 68.34609985]
[92.05087280 66.21305847]
[98.63285828 65.31748962]
[105.26490784 65.69217682]
[111.70413208 67.32341766]
[119.69405365 54.62848663]
[127.68396759 41.93355942]
[135.67388916 29.23862839]
[143.66380310 16.54369926]
[130.19192505 23.13980103]
[115.35362244 25.33636093]
[100.54852295 22.92618561]
[87.17310333 16.13661575]
[76.48901367 5.60807610]
[69.50401306 -7.66632891]
[66.87697601 -22.43449211]
[68.85569000 -37.30340958]
[75.25350952 -50.87057114]
[85.46697235 -61.85625458]
[98.53268433 -69.22423553]
[113.21822357 -72.27954102]
[128.13838196 -70.73396301]
[141.88581848 -64.73329163]
[153.16380310 -54.84355164]
[160.90855408 -41.99758148]
[164.38952637 -27.40707779]
[163.27839661 -12.44828701]
[157.67985535 1.46796203]
[169.75984192 -7.42438745]
[181.83982849 -16.31673813]
[193.91983032 -25.20908737]
[205.90666199 -34.22661591]
[217.79904175 -43.36835098]
[229.69142151 -52.51008606]
[241.58380127 -61.65182114]
[243.38430786 -77.35321045]
[255.81181335 -87.11705780]
[271.49328613 -85.15063477]
[281.12521362 -72.62059784]
[278.99310303 -56.96078491]
[266.36193848 -47.46189117]
[250.72552490 -49.75944138]
[238.83314514 -40.61770630]
[226.94076538 -31.47597122]
[215.04838562 -22.33423615]
[211.64006042 -15.72145271]
[202.81217957 -13.12909889]
[190.73217773 -4.23674917]
[178.65219116 4.65560055]
[166.57220459 13.54795074]
[156.35873413 24.53361511]
[148.36880493 37.22854614]
[140.37889099 49.92347336]
[132.38897705 62.61840439]
[124.39906311 75.31333160]
[134.66250610 101.80453491]
[121.70373535 127.08678436]
[128.33222961 140.54273987]
[134.96072388 153.99871826]
[141.58923340 167.45468140]
[148.21772766 180.91064453]
[154.84622192 194.36660767]
[156.22331238 179.42996216]
[161.86466980 165.53120422]
[171.28735352 153.86018372]
[183.68473816 145.41596985]
[197.99554443 140.92143250]
[212.99468994 140.76135254]
[227.39817810 144.94941711]
[239.97296143 153.12710571]
[249.64259338 164.59437561]
[255.57931519 178.36955261]
[257.27487183 193.27340698]
[254.58415222 208.03010559]
[247.73748779 221.37637329]
[237.32096863 232.16972351]
[224.22633362 239.48616028]
[209.57453918 242.69938660]
[194.61984253 241.53431702]
[180.64248657 236.09068298]
[168.83895874 226.83448792]
[160.21821594 214.55506897]
[161.15383911 229.52586365]
[162.08946228 244.49665833]
[163.02510071 259.46743774]
[163.96072388 274.43823242]
[164.89636230 289.40902710]
[165.83198547 304.37982178]
[175.34732056 317.73611450]
[168.29287720 332.54040527]
[151.92565918 333.56329346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[19 50]
[20 49]
[21 48]
[28 41]
[29 40]
[30 39]
[31 38]
[52 59]
[53 58]
[64 114]
[65 113]
[66 112]
[67 111]
[68 110]
[87 109]
[88 108]
[89 107]
[90 106]
[91 104]
[92 103]
[93 102]
[94 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
