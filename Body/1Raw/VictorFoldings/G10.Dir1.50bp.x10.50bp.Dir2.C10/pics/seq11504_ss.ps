%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAxxxxxxxxxxCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.11677551 355.93524170]
[134.11677551 340.93524170]
[134.11677551 325.93524170]
[134.11677551 310.93524170]
[134.11677551 295.93524170]
[134.11677551 280.93524170]
[134.11677551 265.93524170]
[134.11677551 250.93522644]
[134.11677551 235.93522644]
[134.11677551 220.93522644]
[131.46429443 218.11123657]
[129.78237915 214.24858093]
[129.46047974 209.70645142]
[130.74923706 204.98345947]
[124.68621826 191.26339722]
[118.62320709 177.54335022]
[111.82762909 190.91571045]
[97.62759399 195.74882507]
[84.08523560 189.29867554]
[78.88926697 175.22735596]
[84.98973846 161.52392578]
[98.92307281 155.96853638]
[112.77966309 161.71640015]
[108.47207642 147.34820557]
[104.16448975 132.98002625]
[99.85690308 118.61184692]
[100.76658630 133.58422852]
[93.78007507 146.85783386]
[80.92301178 154.58415222]
[65.92313385 154.52304077]
[53.12946320 146.69221497]
[46.25134659 133.36210632]
[47.28300476 118.39762878]
[55.92532730 106.13751984]
[69.67258453 100.13643646]
[84.53668976 102.13334656]
[70.51997375 96.79183197]
[56.50326157 91.45032501]
[47.30367279 91.31086731]
[42.25242615 85.84913635]
[28.34987068 80.21717834]
[14.44731522 74.58522034]
[0.54475886 68.95326233]
[-13.18347168 76.44123840]
[-28.50278854 73.30236053]
[-38.17987823 61.01871109]
[-37.64551544 45.39026260]
[-27.15200996 33.79627991]
[-11.65407467 31.71109581]
[1.53064072 40.11926270]
[6.17671537 55.05070877]
[20.07927132 60.68266296]
[33.98182678 66.31462097]
[47.88438416 71.94657898]
[61.84477234 77.43360901]
[75.86148834 82.77512360]
[89.87819672 88.11663818]
[77.27022552 79.99019623]
[73.36634064 65.50711060]
[80.18212128 52.14503479]
[94.19857788 46.80283356]
[108.17897034 52.23869705]
[114.90519714 65.64608002]
[110.90326691 80.10436249]
[117.81026459 66.78920746]
[124.71726990 53.47405243]
[131.62426758 40.15889740]
[118.77892303 47.90468216]
[104.24148560 51.60101700]
[89.25643158 50.93148041]
[75.10657501 45.95338821]
[63.00320435 37.09288788]
[53.98244095 25.10848808]
[48.81650925 11.02611828]
[47.94763947 -3.94869614]
[51.45021439 -18.53403091]
[59.02439117 -31.48130226]
[70.02178192 -41.68215561]
[83.50094604 -48.26334000]
[98.30800629 -50.66147614]
[113.17539215 -48.67126846]
[126.83036804 -42.46308517]
[138.10400391 -32.56838608]
[146.03121948 -19.83420944]
[149.93339539 -5.35066509]
[149.47648621 9.64237404]
[144.69805908 23.86446953]
[156.19985962 14.23594379]
[161.81506348 -0.55527139]
[176.54075623 -2.79206896]
[188.04255676 -12.42059517]
[199.54435730 -22.04912186]
[211.04617310 -31.67764854]
[212.19197083 -47.44034576]
[224.20256042 -57.71270370]
[239.95225525 -56.40031433]
[250.09706116 -44.28179169]
[248.61822510 -28.54684448]
[236.39312744 -18.53073502]
[220.67469788 -20.17584419]
[209.17288208 -10.54731846]
[197.67108154 -0.91879183]
[186.16928101 8.70973396]
[181.37677002 22.81225395]
[165.82838440 25.73774719]
[154.32658386 35.36627197]
[144.93942261 47.06589890]
[138.03242493 60.38105392]
[131.12542725 73.69620514]
[124.21842194 87.01136780]
[114.22509003 114.30426025]
[118.53267670 128.67243958]
[122.84026337 143.04063416]
[127.14784241 157.40881348]
[132.34326172 171.48033142]
[138.40628052 185.20037842]
[144.46928406 198.92044067]
[145.97402954 183.99610901]
[151.07295227 169.88934326]
[159.45817566 157.45196533]
[170.62333679 147.43502808]
[183.89425659 140.44340515]
[198.46954346 136.89926147]
[213.46908569 137.01661682]
[227.98713684 140.78839111]
[241.14701843 147.98683167]
[252.15406799 158.17724609]
[260.34365845 170.74430847]
[265.22122192 184.92912292]
[266.49224854 199.87518311]
[264.07998657 214.67994690]
[258.13009644 228.44943237]
[249.00184631 240.35217285]
[237.24647522 249.66943359]
[223.57382202 255.83857727]
[208.80949402 258.48709106]
[193.84503174 257.45501709]
[179.58409119 252.80473328]
[166.88778687 244.81698608]
[156.52279663 233.97416687]
[149.11677551 220.93522644]
[149.11677551 235.93522644]
[149.11677551 250.93522644]
[149.11677551 265.93524170]
[149.11677551 280.93524170]
[149.11677551 295.93524170]
[149.11677551 310.93524170]
[149.11677551 325.93524170]
[149.11677551 340.93524170]
[149.11677551 355.93524170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 117]
[15 116]
[16 115]
[23 114]
[24 113]
[25 112]
[26 111]
[36 57]
[37 56]
[38 55]
[40 54]
[41 53]
[42 52]
[43 51]
[64 110]
[65 109]
[66 108]
[67 107]
[87 106]
[88 105]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
