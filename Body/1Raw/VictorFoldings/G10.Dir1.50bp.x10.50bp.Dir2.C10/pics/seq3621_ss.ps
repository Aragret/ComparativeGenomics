%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAxxxxxxxxxxAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.42181396 155.30561829]
[123.39562225 141.57125854]
[115.40570068 154.26618958]
[107.41578674 166.96112061]
[99.42587280 179.65605164]
[91.43595123 192.35098267]
[91.18905640 210.73355103]
[75.41663361 218.36444092]
[67.69254303 231.22283936]
[59.96846008 244.08123779]
[62.44067764 259.93267822]
[51.48325348 271.65078735]
[35.50178146 270.24645996]
[26.75588226 256.79696655]
[31.95466042 241.61961365]
[47.11005783 236.35714722]
[54.83414459 223.49874878]
[62.55822754 210.64035034]
[59.93802261 198.78953552]
[66.32216644 187.99778748]
[78.74102783 184.36105347]
[86.73094177 171.66612244]
[94.72085571 158.97120667]
[102.71077728 146.27627563]
[110.70069122 133.58134460]
[106.50962067 127.36161804]
[93.93640137 108.70246124]
[79.17034912 111.34132385]
[64.40428925 113.98018646]
[57.75574112 128.00076294]
[44.11976624 135.40614319]
[28.73967934 133.34883118]
[17.52943611 122.61989594]
[14.79960537 107.34483337]
[21.59986305 93.39720917]
[35.31536865 86.14018250]
[50.67223358 88.36421967]
[61.76543045 99.21413422]
[76.53148651 96.57527161]
[91.29753876 93.93640137]
[92.99903107 86.63195801]
[96.40200806 72.02306366]
[98.10349274 64.71862030]
[86.02350616 55.82627106]
[73.94351959 46.93392181]
[61.15364838 55.10604477]
[46.27456284 58.10225296]
[31.31853867 55.51733398]
[18.30825615 47.70087814]
[9.00324821 35.70999527]
[4.66194105 21.16635513]
[5.87146091 6.03686333]
[12.46823025 -7.63233852]
[23.56008911 -17.99260330]
[37.64695740 -23.64279175]
[52.82369614 -23.81875992]
[67.03778076 -18.49671173]
[78.36687469 -8.39640999]
[85.27880859 5.11616278]
[86.83879852 20.21354294]
[82.83586884 34.85393143]
[94.91585541 43.74628067]
[106.99584198 52.63862991]
[107.72698975 37.65645981]
[109.43576050 22.75410843]
[112.11486053 7.99529982]
[115.75282288 -6.55685472]
[120.33409882 -20.84012794]
[125.83910370 -34.79344177]
[132.24427795 -48.35713196]
[139.52224731 -61.47319412]
[147.64189148 -74.08554840]
[156.56849670 -86.14025116]
[166.26385498 -97.58576965]
[176.68655396 -108.37314606]
[187.79199219 -118.45626068]
[199.53268433 -127.79199982]
[211.85844421 -136.34042358]
[224.71655273 -144.06500244]
[238.05201721 -150.93269348]
[251.80784607 -156.91413879]
[265.92517090 -161.98373413]
[280.34365845 -166.11982727]
[295.00164795 -169.30473328]
[309.83642578 -171.52481079]
[324.78460693 -172.77056885]
[339.78225708 -173.03671265]
[354.76522827 -172.32206726]
[369.66946411 -170.62969971]
[384.43121338 -167.96685791]
[398.98736572 -164.34492493]
[413.27566528 -159.77937317]
[427.23501587 -154.28974915]
[440.80575562 -147.89950562]
[453.92984009 -140.63598633]
[466.55111694 -132.53022766]
[478.61566162 -123.61692047]
[490.07183838 -113.93415833]
[500.87069702 -103.52336121]
[510.96603394 -92.42903137]
[520.31469727 -80.69861603]
[528.87670898 -68.38227844]
[536.61541748 -55.53268814]
[543.49780273 -42.20478821]
[549.49438477 -28.45556831]
[554.57952881 -14.34382629]
[558.73150635 0.07009642]
[561.93249512 14.72456264]
[564.16894531 29.55690765]
[565.43115234 44.50370407]
[565.71380615 59.50104141]
[565.01568604 74.48478699]
[563.33972168 89.39086914]
[560.69311523 104.15554047]
[557.08721924 118.71566772]
[552.53741455 133.00900269]
[547.06317139 146.97441101]
[540.68786621 160.55216980]
[533.43878174 173.68423462]
[525.34698486 186.31443787]
[516.44696045 198.38876343]
[506.77679443 209.85560608]
[496.37789917 220.66592407]
[485.29470825 230.77346802]
[473.57458496 240.13504028]
[461.26770020 248.71060181]
[448.42663574 256.46347046]
[435.10632324 263.36053467]
[421.36370850 269.37225342]
[407.25756836 274.47293091]
[392.84823608 278.64077759]
[378.19729614 281.85794067]
[363.36743164 284.11068726]
[348.42202759 285.38937378]
[333.42501831 285.68853760]
[318.44049072 285.00689697]
[303.53259277 283.34738159]
[288.76501465 280.71704102]
[274.20092773 277.12716675]
[259.90258789 272.59310913]
[245.93115234 267.13424683]
[232.34638977 260.77389526]
[219.20634460 253.53929138]
[206.56724548 245.46136475]
[194.48310852 236.57464600]
[183.00563049 226.91714478]
[172.18386841 216.53015137]
[162.06411743 205.45808411]
[152.68965149 193.74829102]
[144.10054016 181.45083618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[8 18]
[9 17]
[10 16]
[27 40]
[28 39]
[29 38]
[43 63]
[44 62]
[45 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
