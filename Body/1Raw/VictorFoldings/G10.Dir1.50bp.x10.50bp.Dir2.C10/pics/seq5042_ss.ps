%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUxxxxxxxxxxCUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.60820007 85.65078735]
[152.38142395 90.40460205]
[138.15463257 95.15841675]
[123.92786407 99.91223145]
[109.70108032 104.66604614]
[97.08995056 112.78759003]
[93.36006165 128.16284180]
[79.02745056 132.21569824]
[68.81397247 143.20137024]
[58.60049438 154.18702698]
[48.38701248 165.17269897]
[38.17353439 176.15835571]
[43.31597900 190.57411194]
[41.15857697 205.72680664]
[32.19707870 218.13446045]
[18.49077225 224.94590759]
[3.18926620 224.59591675]
[-10.19126511 217.16490173]
[-18.57607460 204.36045837]
[-20.03839111 189.12496948]
[-14.24218941 174.95942688]
[-2.51939201 165.11897278]
[12.43618870 161.86486816]
[27.18786812 165.94488525]
[37.40134811 154.95921326]
[47.61482620 143.97354126]
[57.82830811 132.98788452]
[68.04178619 122.00222015]
[71.04114532 107.41273499]
[86.10428619 102.57411194]
[71.67168427 106.66066742]
[56.68297958 107.24267578]
[41.97695160 104.28756714]
[28.37655449 97.96070099]
[16.64287567 88.61614227]
[7.43254042 76.77680969]
[1.26096177 63.10525131]
[-1.52649403 48.36652374]
[-0.77383941 33.38541794]
[3.47680664 19.00028610]
[10.98757553 6.01612902]
[21.33815956 -4.84045410]
[33.94933701 -12.96192169]
[48.11537552 -17.89379311]
[63.04353714 -19.36007690]
[77.89842987 -17.27871895]
[91.84877777 -11.76619244]
[104.11389160 -3.13098359]
[114.00743103 8.14367771]
[120.97573090 21.42685509]
[124.62884521 35.97521210]
[124.76234436 50.97462082]
[121.36876678 65.58570099]
[114.63800049 78.99079895]
[104.94726562 90.43927002]
[119.17404938 85.68545532]
[133.40081787 80.93164062]
[147.62760925 76.17782593]
[161.85438538 71.42401123]
[158.27468872 56.37310028]
[156.06277466 41.06173706]
[155.23649597 25.61396027]
[155.80245972 10.15490341]
[157.75599670 -5.19021320]
[161.08120728 -20.29710388]
[165.75106812 -35.04341507]
[171.72767639 -49.30971909]
[178.96257019 -62.98049545]
[187.39704895 -75.94503784]
[196.96273804 -88.09838104]
[207.58207703 -99.34212494]
[219.16900635 -109.58525085]
[231.62959290 -118.74485016]
[244.86288452 -126.74678040]
[258.76162720 -133.52630615]
[273.21319580 -139.02857971]
[288.10052490 -143.20910645]
[303.30300903 -146.03410339]
[318.69744873 -147.48075867]
[334.15917969 -147.53744507]
[349.56292725 -146.20378113]
[364.78393555 -143.49063110]
[379.69891357 -139.42007446]
[394.18710327 -134.02514648]
[408.13116455 -127.34963989]
[421.41815186 -119.44768524]
[433.94052124 -110.38336182]
[445.59683228 -100.23015594]
[456.29278564 -89.07038116]
[465.94174194 -76.99447632]
[474.46563721 -64.10031128]
[481.79547119 -50.49238205]
[495.57785034 -56.41234589]
[509.36022949 -62.33230972]
[523.14263916 -68.25227356]
[536.92498779 -74.17223358]
[536.69238281 -89.37139130]
[542.29852295 -103.50076294]
[552.88861084 -114.40573120]
[566.84771729 -120.42337036]
[582.04718018 -120.63601685]
[596.16918945 -115.01126099]
[607.06018066 -104.40682983]
[613.05944824 -90.43982697]
[613.25213623 -75.24011230]
[607.60876465 -61.12553406]
[596.99005127 -50.24846649]
[583.01513672 -44.26757812]
[567.81518555 -44.09491730]
[553.70806885 -49.75680542]
[542.84497070 -60.38985443]
[529.06256104 -54.46989059]
[515.28021240 -48.54992676]
[501.49783325 -42.62996674]
[487.71542358 -36.71000290]
[492.29391479 -22.89037704]
[495.68557739 -8.73226643]
[497.86596680 5.66259909]
[498.81936646 20.19078636]
[498.53887939 34.74789810]
[497.02642822 49.22932053]
[494.29284668 63.53097916]
[490.35769653 77.55009460]
[485.24920654 91.18589783]
[479.00402832 104.34037781]
[471.66696167 116.91898346]
[463.29071045 128.83128357]
[453.93539429 139.99163818]
[443.66821289 150.31980896]
[432.56286621 159.74153137]
[420.69915771 168.18904114]
[408.16226196 175.60159302]
[395.04229736 181.92587280]
[381.43347168 187.11634827]
[367.43359375 191.13568115]
[353.14321899 193.95491028]
[338.66503906 195.55372620]
[324.10308838 195.92057800]
[309.56201172 195.05276489]
[295.14633179 192.95645142]
[280.95962524 189.64665222]
[267.10385132 185.14706421]
[253.67861938 179.49000549]
[240.78041077 172.71601868]
[228.50196838 164.87377930]
[216.93153381 156.01954651]
[206.15231323 146.21691895]
[196.24180603 135.53628540]
[187.27127075 124.05436707]
[179.30523682 111.85362244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[6 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
