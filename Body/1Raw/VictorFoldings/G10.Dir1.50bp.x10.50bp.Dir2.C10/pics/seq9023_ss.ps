%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAxxxxxxxxxxAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.87423515 215.49794006]
[-32.17324066 225.36366272]
[-43.47224426 235.22938538]
[-54.77124786 245.09510803]
[-66.07025146 254.96083069]
[-77.36925507 264.82653809]
[-88.46057129 274.92520142]
[-99.33940125 285.25241089]
[-110.21822357 295.57962036]
[-121.09704590 305.90682983]
[-131.97587585 316.23400879]
[-125.90631866 330.12417603]
[-124.95661926 345.25274658]
[-129.24143982 359.79290771]
[-138.24339294 371.98883057]
[-150.87541199 380.36782837]
[-165.61215210 383.91809082]
[-180.67407227 382.21090698]
[-194.24235535 375.45239258]
[-204.67858887 364.45874023]
[-210.72253418 350.55740356]
[-211.64436340 335.42712402]
[-207.33274841 320.89486694]
[-198.30834961 308.71554565]
[-185.66088867 300.35986328]
[-170.91763306 296.83676147]
[-155.85888672 298.57171631]
[-142.30308533 305.35519409]
[-131.42425537 295.02798462]
[-120.54543304 284.70077515]
[-109.66660309 274.37356567]
[-98.78778076 264.04638672]
[-97.77378082 259.31909180]
[-93.73921204 255.20159912]
[-87.23498535 253.52754211]
[-75.93597412 243.66181946]
[-64.63697052 233.79609680]
[-53.33796692 223.93037415]
[-42.03896332 214.06465149]
[-30.73995781 204.19892883]
[-50.13491821 173.55175781]
[-62.46414948 139.44303894]
[-67.14740753 103.47804260]
[-63.96429443 67.34936523]
[-53.06460571 32.75730133]
[-34.96130753 1.32984781]
[-46.66093063 -8.05731392]
[-55.37333679 -11.01465034]
[-58.50363922 -17.76349258]
[-70.00543976 -27.39201927]
[-81.50724792 -37.02054596]
[-93.00904846 -46.64907074]
[-109.24688721 -48.94357300]
[-115.12692261 -64.25230408]
[-104.60028076 -76.82695007]
[-88.49586487 -73.73180389]
[-83.38052368 -58.15087509]
[-71.87871552 -48.52235031]
[-60.37691498 -38.89382172]
[-48.87511063 -29.26529694]
[-37.27376938 -19.75693703]
[-25.57414627 -10.36977577]
[-19.51267052 -16.90626717]
[-13.11140060 -23.11037636]
[-6.38853741 -28.96446419]
[0.63680536 -34.45188522]
[7.94465303 -39.55703735]
[15.51422882 -44.26540756]
[23.32401085 -48.56361008]
[31.35179329 -52.43942261]
[39.57475281 -55.88182449]
[47.96951294 -58.88103104]
[56.51220322 -61.42851639]
[65.17853546 -63.51703262]
[73.94387054 -65.14064026]
[82.78328705 -66.29473114]
[91.67166138 -66.97602081]
[100.58370209 -67.18257141]
[109.49408722 -66.91379547]
[118.37748718 -66.17046356]
[127.20862579 -64.95467377]
[135.96241760 -63.26989365]
[144.61395264 -61.12091446]
[153.13864136 -58.51384354]
[161.51225281 -55.45609283]
[169.71098328 -51.95635223]
[177.71150208 -48.02457809]
[185.49107361 -43.67194748]
[193.02758789 -38.91083527]
[200.29962158 -33.75477982]
[207.28646851 -28.21843529]
[213.96829224 -22.31754684]
[220.32608032 -16.06889153]
[226.34176636 -9.49023247]
[231.99824524 -2.60027671]
[237.27943420 4.58138800]
[242.17030334 12.03434277]
[246.65698242 19.73739815]
[250.72666931 27.66865158]
[254.36782837 35.80555725]
[257.57009888 44.12497330]
[260.32437134 52.60325241]
[262.62280273 61.21628952]
[264.45889282 69.93959045]
[265.82739258 78.74836731]
[266.72439575 87.61755371]
[267.14739990 96.52195740]
[267.09518433 105.43624115]
[266.56787109 114.33506775]
[265.56698608 123.19314575]
[264.09539795 131.98527527]
[262.15722656 140.68646240]
[259.75802612 149.27198792]
[256.90460205 157.71740723]
[253.60508728 165.99873352]
[249.86883545 174.09242249]
[245.70648193 181.97544861]
[241.12986755 189.62539673]
[236.15200806 197.02053833]
[230.78703308 204.13983154]
[225.05021667 210.96304321]
[218.95787048 217.47076416]
[212.52729797 223.64450073]
[205.77679443 229.46669006]
[198.72555542 234.92079163]
[191.39361572 239.99128723]
[183.80183411 244.66377258]
[175.97178650 248.92494202]
[167.92575073 252.76271057]
[159.68658447 256.16613770]
[151.27772522 259.12557983]
[142.72306824 261.63259888]
[134.04693604 263.68005371]
[125.27401733 265.26214600]
[116.42923737 266.37438965]
[107.53774261 267.01358032]
[98.62481689 267.17794800]
[89.71580505 266.86697388]
[80.83602905 266.08160400]
[72.01074219 264.82400513]
[63.26502991 263.09780884]
[54.62376404 260.90789795]
[46.11150742 258.26049805]
[37.75246429 255.16313171]
[29.57040215 251.62461853]
[21.58858299 247.65501404]
[13.82969761 243.26560974]
[6.31580925 238.46885681]
[-0.93172085 233.27844238]
[-7.89228630 227.70907593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[46 62]
[47 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
