%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACAxxxxxxxxxxCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.54704285 129.14389038]
[86.99362946 139.80340576]
[76.44022369 150.46293640]
[65.88681030 161.12246704]
[55.33340073 171.78199768]
[44.77999115 182.44152832]
[34.99839020 193.81343079]
[26.03655434 205.84196472]
[17.07471657 217.87048340]
[8.11287975 229.89901733]
[14.78839302 243.67204285]
[14.28703403 258.96932983]
[6.72401190 272.27569580]
[-6.16274738 280.53341675]
[-21.41196060 281.84494019]
[-35.51947021 275.90887451]
[-45.24347305 264.08932495]
[-48.34946442 249.10226440]
[-44.12371063 234.39167786]
[-33.53726196 223.33792114]
[-19.02280045 218.48106384]
[-3.91564775 220.93717957]
[5.04618883 208.90864563]
[14.00802612 196.88012695]
[22.96986198 184.85159302]
[8.08320427 186.69209290]
[-4.59455156 178.67495728]
[-9.31321621 164.43647766]
[-3.93256879 150.43473816]
[9.10691738 143.02044678]
[23.89098549 145.55645752]
[33.71409607 156.89253235]
[34.12046432 171.88812256]
[44.67387390 161.22859192]
[55.22728348 150.56906128]
[65.78069305 139.90953064]
[76.33409882 129.25000000]
[86.88751221 118.59047699]
[82.45252991 104.26110077]
[67.72274017 101.42679596]
[52.99294662 98.59249878]
[38.95679092 106.36204529]
[24.18656349 100.09946442]
[20.01271820 84.60886383]
[29.63707352 71.77331543]
[45.67664719 71.43914795]
[55.82724762 83.86270905]
[70.55703735 86.69700623]
[85.28682709 89.53131104]
[88.81816864 82.91469574]
[99.41218567 63.06483459]
[88.85877228 52.40530777]
[78.30536652 41.74577713]
[67.75196075 31.08625031]
[52.68263245 34.39063263]
[38.22698975 29.00194931]
[28.99777031 16.63970375]
[27.93999100 1.24864638]
[35.39117813 -12.25999260]
[48.97369003 -19.57565689]
[64.35339355 -18.36394119]
[76.62268066 -9.01150417]
[81.86647034 5.49732876]
[78.41148376 20.53284073]
[88.96489716 31.19236946]
[99.51830292 41.85189819]
[110.07171631 52.51142502]
[105.92067719 38.09723663]
[101.76963806 23.68304634]
[97.61859894 9.26885509]
[93.46755981 -5.14533520]
[82.98677826 -15.87628174]
[75.16366577 -28.67467308]
[70.39240265 -42.89561081]
[68.91342163 -57.82252121]
[70.80124664 -72.70324707]
[75.96074677 -86.78797913]
[84.13194275 -99.36698914]
[94.90309906 -109.80644226]
[107.73146820 -117.58030701]
[121.97064209 -122.29686737]
[136.90312195 -123.71846008]
[151.77648926 -121.77344513]
[165.84127808 -116.55984497]
[178.38879395 -108.34035492]
[188.78675842 -97.52915192]
[196.51126099 -84.67099762]
[201.17304993 -70.41379547]
[202.53723145 -55.47595596]
[200.53506470 -40.61017990]
[195.26742554 -26.56553459]
[186.99977112 -14.04971313]
[176.14866638 -3.69337440]
[163.25697327 3.98342466]
[155.53814697 16.84498596]
[147.81932068 29.70654488]
[140.10049438 42.56810379]
[132.38166809 55.42966461]
[145.32173157 47.84318542]
[158.26179504 40.25670624]
[171.20185852 32.67023087]
[174.94738770 17.31618500]
[188.49601746 9.17922592]
[203.80960083 13.08686447]
[211.80285645 26.72076797]
[207.73353577 41.99218369]
[194.01588440 49.84085083]
[178.78834534 45.61029434]
[165.84828186 53.19677353]
[152.90820312 60.78325272]
[139.96813965 68.36973572]
[154.96127319 67.91577148]
[168.65292358 61.78888702]
[182.98657227 57.36776733]
[197.75062561 54.71768570]
[212.72709656 53.87776184]
[227.69487000 54.86040115]
[242.43298340 57.65109253]
[256.72384644 62.20863724]
[270.35647583 68.46575165]
[283.12960815 76.33005524]
[294.85464478 85.68544006]
[305.35852051 96.39379120]
[314.48611450 108.29701996]
[322.10272217 121.21938324]
[328.09585571 134.97010803]
[332.37704468 149.34617615]
[334.88308716 164.13534546]
[335.57699585 179.11929321]
[334.44851685 194.07678223]
[331.51428223 208.78698730]
[326.81765747 223.03276062]
[320.42797852 236.60374451]
[312.43954468 249.29960632]
[302.97030640 260.93289185]
[292.16006470 271.33187866]
[280.16842651 280.34304810]
[267.17245483 287.83331299]
[253.36396790 293.69213867]
[238.94683838 297.83300781]
[224.13394165 300.19476318]
[209.14395142 300.74258423]
[194.19816589 299.46835327]
[179.51725769 296.39086914]
[165.31794739 291.55563354]
[151.80989075 285.03393555]
[139.19250488 276.92214966]
[127.65205383 267.33996582]
[117.35893250 256.42889404]
[108.46509552 244.34999084]
[101.10185242 231.28160095]
[95.37791443 217.41667175]
[91.37777710 202.95986938]
[89.16050720 188.12464905]
[88.75883484 173.13003540]
[90.17868805 158.19738770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 25]
[8 24]
[9 23]
[10 22]
[39 49]
[40 48]
[41 47]
[51 67]
[52 66]
[53 65]
[54 64]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
