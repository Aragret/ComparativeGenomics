%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.67434692 462.27285767]
[182.67434692 447.27285767]
[182.67434692 432.27285767]
[182.67434692 417.27285767]
[182.67434692 402.27285767]
[182.67434692 387.27285767]
[182.67434692 372.27285767]
[182.67434692 357.27285767]
[182.67434692 342.27285767]
[182.67434692 327.27285767]
[180.65200806 312.40979004]
[176.49412537 297.99758911]
[172.18653870 283.62939453]
[167.87895203 269.26119995]
[163.57136536 254.89303589]
[159.26377869 240.52484131]
[154.95619202 226.15666199]
[146.01461792 202.60691833]
[155.47546387 185.93626404]
[145.96711731 174.33493042]
[136.45875549 162.73358154]
[126.95039368 151.13224792]
[117.44203949 139.53089905]
[107.93367767 127.92956543]
[98.42532349 116.32822418]
[84.19853973 111.57440948]
[69.62583923 115.12917328]
[55.05313492 118.68392944]
[40.48043060 122.23869324]
[30.95264053 135.14608765]
[14.91602612 135.60057068]
[4.67250729 123.25351715]
[8.08003521 107.57651520]
[22.52464676 100.59562683]
[36.92567062 107.66599274]
[51.49837494 104.11122894]
[66.07107544 100.55646515]
[80.64377594 97.00170898]
[82.04613495 82.06673431]
[83.44838715 67.13309479]
[69.79214478 60.92768478]
[56.13590240 54.72227859]
[42.47966385 48.51686859]
[28.82342148 42.31146240]
[15.16718006 36.10605621]
[1.51093888 29.90064812]
[-15.41059494 28.85278320]
[-19.08802605 12.30247021]
[-4.20252180 4.18717194]
[7.71634579 16.24440765]
[21.37258720 22.44981384]
[35.02882767 28.65522194]
[48.68507004 34.86063004]
[62.34131241 41.06603622]
[75.99755096 47.27144241]
[89.65379333 53.47684860]
[95.91677094 49.35070419]
[108.44273376 41.09841537]
[114.70571899 36.97227097]
[114.39366150 21.97551727]
[114.08160400 6.97876406]
[113.76954651 -8.01798916]
[113.45748901 -23.01474380]
[110.31639862 -28.95115852]
[110.64469910 -34.70646286]
[113.45748901 -38.63885498]
[113.76954651 -53.63560867]
[114.08160400 -68.63236237]
[114.39366150 -83.62911987]
[114.70571899 -98.62586975]
[101.27357483 -105.96318054]
[92.79947662 -118.70870209]
[91.23071289 -133.93360901]
[96.92777252 -148.13931274]
[108.58150482 -158.06146240]
[123.51397705 -161.42001343]
[138.29380798 -157.44320679]
[149.52471924 -147.04486084]
[154.62590027 -132.61445618]
[152.42515564 -117.46799469]
[143.42820740 -105.08602142]
[129.70246887 -98.31381226]
[129.39041138 -83.31706238]
[129.07835388 -68.32030487]
[128.76629639 -53.32355118]
[128.45423889 -38.32679749]
[128.45423889 -23.32679939]
[128.76629639 -8.33004570]
[129.07835388 6.66670799]
[129.39041138 21.66346169]
[129.70246887 36.66021347]
[139.58251953 89.15146637]
[110.02666473 106.81986237]
[119.53501892 118.42120361]
[129.04338074 130.02255249]
[138.55174255 141.62388611]
[148.06008911 153.22523499]
[157.56845093 164.82656860]
[167.07681274 176.42791748]
[181.25337219 181.32946777]
[195.89686584 178.07864380]
[210.54037476 174.82781982]
[225.18386841 171.57698059]
[239.82737732 168.32615662]
[246.88301086 154.37080383]
[261.27853394 148.26319885]
[276.21682739 152.88717651]
[284.64450073 166.05944824]
[282.58224487 181.56045532]
[271.00378418 192.07109070]
[255.37614441 192.62857056]
[243.07820129 182.96966553]
[228.43469238 186.22048950]
[213.79119873 189.47131348]
[199.14768982 192.72213745]
[184.50419617 195.97296143]
[180.70924377 202.44198608]
[188.11900330 215.48405457]
[173.11933899 215.38005066]
[169.32438660 221.84907532]
[173.63195801 236.21725464]
[177.93954468 250.58544922]
[182.24713135 264.95364380]
[186.55471802 279.32180786]
[190.86230469 293.69000244]
[196.35841370 301.06866455]
[195.10668945 308.40206909]
[200.00585938 294.22467041]
[210.16493225 283.18869019]
[223.88916016 277.13513184]
[238.88903809 277.07388306]
[252.66223145 283.01516724]
[262.91110229 293.96783447]
[267.92584229 308.10473633]
[266.86996460 323.06753540]
[259.91955566 336.36007690]
[248.23410034 345.76489258]
[233.76301575 349.71301270]
[218.92039490 347.54583740]
[206.18231201 339.62487793]
[197.67434692 327.27285767]
[197.67434692 342.27285767]
[197.67434692 357.27285767]
[197.67434692 372.27285767]
[197.67434692 387.27285767]
[197.67434692 402.27285767]
[197.67434692 417.27285767]
[197.67434692 432.27285767]
[197.67434692 447.27285767]
[197.67434692 462.27285767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[17 120]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[26 38]
[27 37]
[28 36]
[29 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
