%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCxxxxxxxxxxAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.71673965 194.63641357]
[8.27692699 205.40722656]
[4.23834705 223.34237671]
[-12.77014637 227.55084229]
[-22.98362541 238.53649902]
[-33.19710541 249.52217102]
[-43.41058731 260.50784302]
[-47.14048004 275.88308716]
[-61.47308731 279.93594360]
[-71.68656921 290.92160034]
[-81.90004730 301.90725708]
[-75.88977814 315.89999390]
[-76.09697723 331.12750244]
[-82.48574066 344.95153809]
[-93.94918060 354.97695923]
[-108.50118256 359.46685791]
[-123.62052155 357.64331055]
[-136.68768311 349.82223511]
[-145.43872070 337.35873413]
[-148.35743713 322.41210938]
[-144.93815613 307.57202148]
[-135.77328491 295.40957642]
[-122.45071411 288.03198242]
[-107.27863312 286.71746826]
[-92.88571167 291.69378662]
[-82.67223358 280.70812988]
[-72.45874786 269.72244263]
[-69.45939636 255.13296509]
[-54.39625168 250.29434204]
[-44.18276978 239.30868530]
[-33.96929169 228.32301331]
[-23.75580978 217.33735657]
[-23.87166977 205.20088196]
[-15.39611149 195.96054077]
[-2.49388146 194.96740723]
[7.94593096 184.19660950]
[-15.26108265 147.72737122]
[-24.62930489 105.52777100]
[-19.03393936 62.66447830]
[-33.05065155 57.32296753]
[-47.06736374 51.98145294]
[-58.92916107 61.73816299]
[-74.08275604 64.24098969]
[-88.45190430 58.81669235]
[-98.17138672 46.92436981]
[-100.62670135 31.76300621]
[-95.15738678 17.41092682]
[-83.23466492 7.72877121]
[-68.06567383 5.32098961]
[-53.73081207 10.83526421]
[-44.08607483 22.78828239]
[-41.72585297 37.96474075]
[-27.70913887 43.30625534]
[-13.69242668 48.64776611]
[-10.48220539 42.06294632]
[-6.89101219 35.67790985]
[-2.93123126 29.51467323]
[1.38348353 23.59448814]
[6.03825378 17.93776703]
[11.01702881 12.56402016]
[16.30264091 7.49177504]
[21.87686157 2.73852229]
[27.72047234 -1.67934740]
[33.81332397 -5.74660015]
[40.13440323 -9.44921112]
[46.66191101 -12.77441216]
[53.37334824 -15.71073818]
[60.24556351 -18.24806213]
[67.25485992 -20.37763786]
[74.37707520 -22.09211922]
[81.58763885 -23.38559341]
[88.86170197 -24.25360298]
[96.17416382 -24.69315338]
[103.49982452 -24.70273018]
[110.81341553 -24.28229904]
[118.08971405 -23.43330956]
[125.30364227 -22.15868950]
[132.43031311 -20.46283531]
[139.44515991 -18.35159302]
[146.32397461 -15.83224297]
[153.04307556 -12.91347408]
[160.22557068 -26.08205605]
[167.40808105 -39.25063705]
[174.59059143 -52.41921997]
[169.89096069 -67.50858307]
[177.31147766 -81.46249390]
[192.44967651 -86.00233459]
[206.32435608 -78.43470764]
[210.70388794 -63.24934387]
[202.98999023 -49.45545578]
[187.75917053 -45.23671341]
[180.57667542 -32.06813049]
[173.39416504 -18.89954758]
[166.21165466 -5.73096466]
[178.14151001 2.75328541]
[188.99536133 12.57663155]
[198.62373352 23.60380363]
[206.89404297 35.68296051]
[213.69242859 48.64776611]
[227.70913696 43.30625534]
[241.72584534 37.96474075]
[247.95953369 23.44176674]
[262.66748047 17.65802193]
[277.12374878 24.04489899]
[282.75164795 38.81317902]
[276.21231079 53.20109940]
[261.38534546 58.67256927]
[247.06736755 51.98145294]
[233.05065918 57.32296753]
[219.03393555 62.66447830]
[221.10456848 70.05499268]
[222.71681213 77.55884552]
[223.86454773 85.14764404]
[224.54345703 92.79265594]
[224.75096130 100.46495056]
[224.48628235 108.13548279]
[223.75039673 115.77522278]
[222.54612732 123.35525513]
[220.87799072 130.84687805]
[218.75233459 138.22175598]
[216.17718506 145.45195007]
[213.16230774 152.51011658]
[209.71910095 159.36952209]
[205.86059570 166.00421143]
[201.60139465 172.38906860]
[196.95762634 178.49992371]
[191.94686890 184.31365967]
[186.58808899 189.80825806]
[180.90156555 194.96292114]
[174.90882874 199.75814819]
[168.63255310 204.17578125]
[162.09649658 208.19909668]
[155.32539368 211.81288147]
[148.34487915 215.00344849]
[141.18139648 217.75871277]
[133.86201477 220.06823730]
[126.41448212 221.92330933]
[118.86695862 223.31689453]
[111.24802399 224.24371338]
[103.58651733 224.70027161]
[95.91143036 224.68481445]
[88.25182343 224.19741821]
[80.63668060 223.23992920]
[73.09483337 221.81597900]
[65.65482330 219.93093872]
[58.34481049 217.59194946]
[51.19246674 214.80786133]
[44.22486115 211.58921814]
[37.46837234 207.94821167]
[30.94856644 203.89860535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[4 32]
[5 31]
[6 30]
[7 29]
[9 27]
[10 26]
[11 25]
[39 54]
[40 53]
[41 52]
[81 94]
[82 93]
[83 92]
[84 91]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
