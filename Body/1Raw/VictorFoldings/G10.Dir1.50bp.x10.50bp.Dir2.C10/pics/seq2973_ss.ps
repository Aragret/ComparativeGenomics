%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUAxxxxxxxxxxAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.21971893 351.27041626]
[126.21971893 336.27041626]
[126.21971893 321.27041626]
[126.21971893 306.27041626]
[126.21971893 291.27041626]
[126.21971893 276.27041626]
[126.21971893 261.27041626]
[126.21971893 246.27041626]
[126.21971893 231.27041626]
[126.21971893 216.27041626]
[124.04288483 201.42921448]
[119.73529816 187.06101990]
[115.42771149 172.69284058]
[111.12013245 158.32466125]
[100.05381012 148.35540771]
[103.50218201 132.91458130]
[99.19459534 118.54639435]
[86.17829132 111.09148407]
[71.60558319 114.64624786]
[57.03288269 118.20100403]
[42.46017838 121.75576782]
[28.04796410 125.91365814]
[13.82118511 130.66746521]
[-0.40559438 135.42127991]
[-14.63237381 140.17509460]
[-18.33024025 155.15272522]
[-29.55428886 165.73687744]
[-44.72296906 168.55018616]
[-58.99600601 162.69494629]
[-67.81893158 150.03953552]
[-68.37637329 134.62223816]
[-60.49046326 121.36267853]
[-46.67756271 114.49192810]
[-31.34531593 116.20240784]
[-19.38618851 125.94831848]
[-5.15940905 121.19450378]
[9.06736946 116.44068909]
[23.29414940 111.68687439]
[24.66234016 109.16986084]
[27.14232254 107.06185913]
[30.57644844 105.80143738]
[34.64698410 105.75925446]
[38.90541840 107.18306732]
[53.47812271 103.62830353]
[68.05082703 100.07353973]
[82.62352753 96.51878357]
[93.39433289 86.07897186]
[97.40207672 71.62428284]
[96.68087769 62.45194626]
[101.64646912 56.91222000]
[105.95404816 42.54403687]
[92.86479187 35.09572983]
[81.76663208 24.92620468]
[73.21399689 12.54786396]
[67.63317871 -1.41666234]
[65.30108643 -16.26582336]
[66.33148956 -31.25439835]
[70.66951752 -45.63088989]
[78.09452820 -58.67521286]
[88.23133087 -69.73475647]
[100.56918335 -78.25701904]
[114.48747253 -83.81723785]
[129.28697205 -86.13954163]
[144.22494507 -85.11064148]
[148.53253174 -99.47882843]
[152.84011841 -113.84700775]
[157.14770508 -128.21519470]
[161.30558777 -142.62741089]
[165.31333923 -157.08209229]
[169.32107544 -171.53678894]
[156.24183655 -179.04574585]
[145.44149780 -189.57206726]
[137.59895325 -202.45404053]
[133.20719910 -216.88191223]
[132.54231262 -231.94871521]
[135.64608765 -246.70736694]
[142.32341003 -260.23010254]
[152.15454102 -271.66683960]
[164.52149963 -280.29873657]
[178.64686584 -285.58312988]
[193.64273071 -287.18783569]
[208.56642151 -285.01199341]
[222.47982788 -279.19238281]
[234.50834656 -270.09484863]
[243.89585876 -258.29122925]
[250.05224609 -244.52351379]
[252.59051514 -229.65718079]
[251.35112000 -214.62672424]
[246.41195679 -200.37696838]
[238.08351135 -187.80366516]
[226.88931274 -177.69718933]
[213.53305054 -170.69284058]
[198.85429382 -167.23092651]
[183.77575684 -167.52905273]
[179.76802063 -153.07435608]
[175.76028442 -138.61967468]
[177.01200867 -131.28627014]
[171.51588440 -123.90760803]
[167.20829773 -109.53942871]
[162.90072632 -95.17124176]
[158.59313965 -80.80305481]
[171.63336182 -73.44409180]
[182.71426392 -63.36283112]
[191.27796936 -51.06250381]
[196.89231873 -37.15816879]
[199.27276611 -22.34595299]
[198.29675293 -7.36822033]
[194.01000977 7.02365065]
[186.62446594 20.10695267]
[176.50772095 31.22394562]
[164.16474915 39.81491852]
[150.21278381 45.44637299]
[135.35031128 47.83289337]
[120.32223511 46.85161972]
[116.01464844 61.21980286]
[111.85676575 75.63201904]
[107.84902191 90.08670807]
[114.17188263 95.13267517]
[116.83020782 104.10866547]
[113.56278229 114.23880768]
[117.87036896 128.60699463]
[129.24479675 139.60394287]
[125.48831177 154.01707458]
[129.79589844 168.38525391]
[134.10348511 182.75344849]
[138.41107178 197.12162781]
[142.80006409 182.77810669]
[152.26130676 171.13830566]
[165.40556335 163.91136169]
[180.30278015 162.15844727]
[194.76554871 166.13693237]
[206.67022705 175.26266479]
[214.26878357 188.19563293]
[216.44549561 203.03686523]
[212.88073730 217.60711670]
[204.09796143 229.76699829]
[191.38674927 237.73100281]
[176.61358643 240.32974243]
[161.94766235 237.18162537]
[149.54244995 228.74890137]
[141.21972656 216.27041626]
[141.21972656 231.27041626]
[141.21972656 246.27041626]
[141.21972656 261.27041626]
[141.21972656 276.27041626]
[141.21972656 291.27041626]
[141.21972656 306.27041626]
[141.21972656 321.27041626]
[141.21972656 336.27041626]
[141.21972656 351.27041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[14 123]
[16 121]
[17 120]
[18 46]
[19 45]
[20 44]
[21 43]
[22 38]
[23 37]
[24 36]
[25 35]
[47 117]
[48 116]
[50 115]
[51 114]
[64 101]
[65 100]
[66 99]
[67 98]
[68 96]
[69 95]
[70 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
