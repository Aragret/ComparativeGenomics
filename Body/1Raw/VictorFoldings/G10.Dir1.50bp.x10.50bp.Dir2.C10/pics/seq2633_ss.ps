%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAxxxxxxxxxxCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.73878479 287.41085815]
[80.73878479 272.41085815]
[80.73878479 257.41085815]
[80.73878479 242.41085815]
[80.73878479 227.41085815]
[80.73878479 212.41085815]
[80.73878479 197.41085815]
[80.73878479 182.41085815]
[80.73878479 167.41085815]
[80.73878479 152.41085815]
[74.65286255 148.02775574]
[67.46147919 161.19148254]
[60.27009583 174.35522461]
[58.51793671 189.25254822]
[46.33212662 197.99931335]
[31.65728569 194.89303589]
[24.06076813 181.95884705]
[28.49517632 167.62930298]
[42.06888199 161.24664307]
[52.27495193 150.25408936]
[62.48102570 139.26155090]
[56.39510727 134.87843323]
[42.16832733 139.63224792]
[27.94154930 144.38606262]
[13.71477032 149.13987732]
[10.01690483 164.11750793]
[-1.20714450 174.70166016]
[-16.37582397 177.51496887]
[-30.64886284 171.65972900]
[-39.47178650 159.00431824]
[-40.02923203 143.58702087]
[-32.14332199 130.32746887]
[-18.33041763 123.45671082]
[-2.99817133 125.16719055]
[8.96095562 134.91310120]
[23.18773460 130.15928650]
[37.41451263 125.40547943]
[51.64129257 120.65166473]
[48.99123764 97.48109436]
[56.56325912 76.14105988]
[72.25807190 60.77343750]
[92.46675873 54.08155441]
[112.88807678 56.86481094]
[119.51657867 43.40884781]
[126.14507294 29.95288086]
[121.29168701 15.15145016]
[128.20561218 1.59961319]
[142.34642029 -2.93613482]
[148.97492981 -16.39209938]
[155.60342407 -29.84806633]
[162.23191833 -43.30403137]
[166.83747864 -57.57949066]
[169.32260132 -72.37220001]
[171.80772400 -87.16490936]
[174.29284668 -101.95761108]
[176.77795410 -116.75032043]
[179.26307678 -131.54302979]
[164.92338562 -136.02488708]
[151.32756042 -142.41764832]
[138.72889709 -150.60221863]
[127.36208344 -160.42613220]
[117.43888855 -171.70637512]
[109.14416504 -184.23280334]
[102.63244629 -197.77206421]
[98.02503967 -212.07189941]
[95.40778351 -226.86595154]
[94.82942200 -241.87858582]
[96.30074310 -256.83013916]
[99.79433441 -271.44207764]
[105.24510193 -285.44216919]
[112.55152130 -298.56964111]
[121.57745361 -310.57989502]
[132.15476990 -321.24917603]
[144.08642578 -330.37878418]
[157.15011597 -337.79861450]
[171.10249329 -343.37039185]
[185.68362427 -346.99038696]
[200.62187195 -348.59112549]
[215.63896179 -348.14279175]
[230.45510864 -345.65371704]
[244.79431152 -341.17031860]
[258.38943481 -334.77609253]
[270.98724365 -326.59014893]
[282.35296631 -316.76498413]
[292.27496338 -305.48367310]
[300.56832886 -292.95635986]
[307.07858276 -279.41641235]
[311.68441772 -265.11605835]
[314.30007935 -250.32173157]
[314.87683105 -235.30903625]
[313.40386963 -220.35763550]
[309.90872192 -205.74607849]
[304.45642090 -191.74656677]
[297.14859009 -178.61990356]
[288.12133789 -166.61062622]
[277.54287720 -155.94245911]
[265.61026001 -146.81416321]
[252.54574585 -139.39575195]
[238.59277344 -133.82546997]
[224.01124573 -130.20706177]
[209.07281494 -128.60794067]
[194.05578613 -129.05790710]
[191.57066345 -114.26520538]
[189.08554077 -99.47249603]
[186.60043335 -84.67978668]
[184.11531067 -69.88707733]
[181.63018799 -55.09437180]
[191.90580750 -66.02194214]
[205.53677368 -72.28266144]
[220.52160645 -72.95725250]
[234.65998840 -67.94664764]
[245.87591553 -57.98659134]
[252.52252197 -44.53955841]
[253.62384033 -29.58004189]
[249.01815796 -15.30462170]
[239.38174438 -3.80942202]
[226.12956238 3.21766019]
[211.20750427 4.74480486]
[196.80664062 0.54777479]
[185.04151917 -8.75716019]
[177.63966370 -21.80371284]
[175.68788147 -36.67553329]
[169.05938721 -23.21956635]
[162.43089294 -9.76360130]
[155.80238342 3.69236374]
[160.82443237 17.66786575]
[154.29388428 31.40855217]
[139.60104370 36.58137894]
[132.97253418 50.03734589]
[126.34403992 63.49331284]
[134.67567444 70.22191620]
[141.29220581 78.84753418]
[145.76341248 88.93365479]
[147.77006531 99.94679260]
[147.12548828 111.28466034]
[143.79017639 122.30907440]
[137.87811279 132.38189697]
[129.65446472 140.90185547]
[119.52427673 147.34034729]
[108.01287079 151.27378845]
[95.73878479 152.41085815]
[95.73878479 167.41085815]
[95.73878479 182.41085815]
[95.73878479 197.41085815]
[95.73878479 212.41085815]
[95.73878479 227.41085815]
[95.73878479 242.41085815]
[95.73878479 257.41085815]
[95.73878479 272.41085815]
[95.73878479 287.41085815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 38]
[23 37]
[24 36]
[25 35]
[43 130]
[44 129]
[45 128]
[48 125]
[49 124]
[50 123]
[51 122]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
