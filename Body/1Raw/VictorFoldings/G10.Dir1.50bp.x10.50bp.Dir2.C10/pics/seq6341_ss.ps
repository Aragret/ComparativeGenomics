%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAxxxxxxxxxxCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.27975464 526.84674072]
[187.65577698 511.85974121]
[187.03179932 496.87271118]
[186.40782166 481.88571167]
[185.78384399 466.89868164]
[185.15986633 451.91168213]
[184.53588867 436.92465210]
[183.91191101 421.93762207]
[181.42678833 407.14492798]
[177.11920166 392.77673340]
[172.81161499 378.40856934]
[155.79762268 377.88311768]
[139.95315552 371.59506226]
[127.17229462 360.27819824]
[118.98898315 345.26846313]
[116.39290619 328.34637451]
[119.70984650 311.52575684]
[128.56091309 296.81405640]
[141.90574646 285.97283936]
[136.71032715 271.90130615]
[131.51490784 257.82977295]
[126.31949615 243.75827026]
[121.12408447 229.68675232]
[115.92866516 215.61523438]
[110.73325348 201.54371643]
[105.53783417 187.47218323]
[101.23207092 201.84091187]
[90.83425140 212.65228271]
[76.64429474 217.51489258]
[61.80087280 215.35319519]
[49.58722687 206.64533997]
[42.70489502 193.31741333]
[42.67618561 178.31744385]
[49.50745392 164.96327209]
[61.68768311 156.20872498]
[76.52272034 153.99023438]
[90.73118591 158.79849243]
[101.17131042 169.57168579]
[99.30370331 154.68840027]
[90.04196930 143.02351379]
[96.00083160 128.36738586]
[82.38080597 122.58905792]
[73.46009827 110.78588104]
[71.61800385 96.10593414]
[77.34583282 82.46459961]
[89.11588287 73.50023651]
[87.24827576 58.61695480]
[85.38066101 43.73367310]
[75.98534393 31.00423622]
[82.07778931 17.41264725]
[80.21018219 2.52936792]
[78.34256744 -12.35391235]
[68.94725037 -25.08334732]
[75.03970337 -38.67493820]
[73.17208862 -53.55821609]
[71.30447388 -68.44149780]
[67.56392670 -74.01965332]
[67.29283142 -79.77793884]
[69.68208313 -83.98114777]
[68.43521118 -98.92923737]
[57.19133759 -106.41475677]
[52.40112686 -118.83577728]
[55.61202240 -131.55444336]
[65.42784119 -139.95959473]
[64.49221039 -154.93037415]
[63.55658340 -169.90116882]
[62.62095642 -184.87196350]
[48.33470535 -190.14671326]
[37.43353271 -200.78082275]
[31.80612755 -214.93186951]
[32.42747498 -230.14810181]
[39.18992615 -243.79322815]
[50.92183685 -253.50311279]
[65.59059143 -257.59548950]
[80.65473175 -255.36132812]
[93.50431061 -247.18769836]
[101.91306305 -234.49073792]
[104.42411041 -219.47027588]
[100.60240936 -204.72868347]
[91.11008453 -192.82003784]
[77.59174347 -185.80758667]
[78.52737427 -170.83680725]
[79.46300507 -155.86601257]
[80.39863586 -140.89521790]
[93.46256256 -130.35047913]
[94.91781616 -113.28688049]
[83.38330078 -100.17610931]
[84.63017273 -85.22801971]
[86.18775177 -70.30911255]
[88.05536652 -55.42583084]
[89.92298126 -40.54254913]
[99.18471527 -28.87766647]
[93.22584534 -14.22152519]
[95.09346008 0.66175485]
[96.96107483 15.54503441]
[106.22280884 27.20991898]
[100.26393890 41.86605835]
[102.13155365 56.74934006]
[103.99916840 71.63262177]
[117.61919403 77.41094208]
[126.53990173 89.21411896]
[128.38200378 103.89406586]
[122.65416718 117.53540039]
[110.88411713 126.49976349]
[120.27943420 139.22920227]
[114.18698120 152.82078552]
[116.05459595 167.70407104]
[119.60935211 182.27677917]
[124.80477142 196.34829712]
[130.00018311 210.41981506]
[135.19560242 224.49133301]
[140.39102173 238.56285095]
[145.58644104 252.63436890]
[150.78184509 266.70590210]
[155.97726440 280.77740479]
[169.04504395 279.90161133]
[181.87617493 282.45907593]
[193.58526611 288.26608276]
[203.36619568 296.91494751]
[210.54765320 307.80267334]
[214.63922119 320.17285156]
[215.36480713 333.16833496]
[212.68133545 345.89056396]
[206.78118896 357.46173096]
[198.07844543 367.08532715]
[187.17980957 374.10098267]
[191.48739624 388.46914673]
[195.79496765 402.83734131]
[200.66278076 388.64916992]
[211.11862183 377.89392090]
[225.16374207 372.62756348]
[240.11329651 373.85681152]
[253.10951233 381.34667969]
[261.66802979 393.66543579]
[264.15283203 408.45819092]
[260.08889771 422.89718628]
[250.25311279 434.22225952]
[236.52566528 440.26849365]
[221.53068542 439.88012695]
[208.13464355 433.13137817]
[198.89892578 421.31365967]
[199.52290344 436.30068970]
[200.14688110 451.28768921]
[200.77085876 466.27471924]
[201.39483643 481.26171875]
[202.01881409 496.24874878]
[202.64279175 511.23574829]
[203.26676941 526.22277832]
[209.96675110 541.79669189]
[196.85623169 552.54614258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[19 115]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[38 107]
[39 106]
[41 104]
[46 99]
[47 98]
[48 97]
[50 95]
[51 94]
[52 93]
[54 91]
[55 90]
[56 89]
[59 88]
[60 87]
[64 84]
[65 83]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
