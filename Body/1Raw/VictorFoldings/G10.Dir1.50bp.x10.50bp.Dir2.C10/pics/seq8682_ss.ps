%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUxxxxxxxxxxUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.73089600 276.83651733]
[145.83097839 261.86352539]
[144.93106079 246.89054871]
[144.03114319 231.91757202]
[143.13124084 216.94459534]
[142.23132324 201.97160339]
[141.33140564 186.99862671]
[136.18544006 172.90895081]
[127.22359467 160.88041687]
[118.26176453 148.85189819]
[109.29992676 136.82336426]
[100.33808899 124.79483795]
[83.95185852 111.94417572]
[85.48796844 95.43476105]
[74.72338867 84.98852539]
[63.95880890 74.54228973]
[53.19422913 64.09606171]
[42.42964935 53.64982605]
[31.18466759 63.58829117]
[19.21189499 72.63680267]
[6.58159161 80.74224091]
[-6.63211966 87.85705566]
[-20.35169601 93.93949127]
[-34.49662399 98.95384216]
[-48.98389435 102.87069702]
[-63.72849274 105.66705322]
[-78.64388275 107.32651520]
[-93.64253998 107.83934021]
[-108.63645172 107.20251465]
[-123.53761292 105.41978455]
[-138.25857544 102.50160217]
[-152.71296692 98.46509552]
[-166.81594849 93.33395386]
[-180.48477173 87.13828278]
[-193.63919067 79.91445923]
[-206.20204163 71.70485687]
[-218.09959412 62.55765915]
[-229.26200867 52.52655411]
[-239.62379456 41.67039871]
[-249.12414551 30.05290604]
[-257.70730591 17.74225235]
[-265.32290649 4.81068420]
[-271.92623901 -8.66591167]
[-277.47857666 -22.60844803]
[-281.94732666 -36.93510437]
[-285.30624390 -51.56180191]
[-287.53567505 -66.40270996]
[-288.62246704 -81.37072754]
[-288.56027222 -96.37802124]
[-287.34945679 -111.33652496]
[-284.99713135 -126.15843964]
[-281.51708984 -140.75680542]
[-276.92977905 -155.04592896]
[-271.26208496 -168.94197083]
[-264.54727173 -182.36337280]
[-256.82476807 -195.23138428]
[-248.13989258 -207.47048950]
[-238.54357910 -219.00885010]
[-228.09217834 -229.77874756]
[-216.84701538 -239.71701050]
[-204.87406921 -248.76528931]
[-192.24360657 -256.87048340]
[-179.02976990 -263.98504639]
[-165.31007385 -270.06723022]
[-151.16505432 -275.08129883]
[-136.67770386 -278.99789429]
[-121.93305969 -281.79397583]
[-107.01763153 -283.45315552]
[-92.01896667 -283.96569824]
[-77.02507019 -283.32858276]
[-62.12394333 -281.54556274]
[-47.40302658 -278.62710571]
[-32.94871521 -274.59033203]
[-18.84582901 -269.45892334]
[-5.17713308 -263.26300049]
[7.97716045 -256.03890991]
[20.53985405 -247.82907104]
[32.43722534 -238.68165588]
[43.59945679 -228.65032959]
[53.96103668 -217.79397583]
[63.46116638 -206.17630005]
[72.04409027 -193.86549377]
[79.65943909 -180.93377686]
[86.26252747 -167.45706177]
[91.81459808 -153.51441956]
[96.28307343 -139.18766785]
[99.64172363 -124.56091309]
[101.87084961 -109.71996307]
[102.95736694 -94.75192261]
[102.89489746 -79.74462891]
[101.68379974 -64.78615570]
[99.33119202 -49.96427917]
[95.85088348 -35.36598587]
[91.26328278 -21.07694435]
[85.59532928 -7.18100882]
[78.88027191 6.24027157]
[71.15752411 19.10813522]
[62.47240448 31.34706688]
[52.87588120 42.88524246]
[63.64046097 53.33147812]
[74.40504456 63.77770996]
[85.16962433 74.22394562]
[95.93420410 84.67018127]
[110.66399384 87.50447845]
[124.53650665 81.79891205]
[138.40901184 76.09333801]
[150.75772095 64.47673035]
[165.33882141 73.12705231]
[161.06300354 89.53295135]
[144.11457825 89.96585083]
[130.24208069 95.67141724]
[116.36956787 101.37699127]
[112.36661530 115.83300018]
[121.32845306 127.86153412]
[130.29028320 139.89006042]
[139.25212097 151.91859436]
[148.21395874 163.94711304]
[146.80787659 149.01316833]
[148.38162231 134.09594727]
[152.87310791 119.78418732]
[160.10507202 106.64270020]
[169.79209900 95.19011688]
[181.55187988 85.87843323]
[194.92030334 79.07512665]
[209.36981201 75.04869843]
[224.33010864 73.95805359]
[239.21078491 75.84623718]
[253.42459106 80.63872528]
[266.41055298 88.14639282]
[277.65615845 98.07292938]
[286.71762085 110.02658844]
[293.23730469 123.53560638]
[296.95791626 138.06684875]
[297.73263550 153.04682922]
[295.53085327 167.88435364]
[290.43948364 181.99385071]
[282.65948486 194.81849670]
[272.49786377 205.85214233]
[260.35565186 214.65933228]
[246.71205139 220.89250183]
[232.10552979 224.30566406]
[217.11253357 224.76409912]
[202.32478333 222.24971008]
[188.32585144 216.86174011]
[175.66824341 208.81283569]
[164.85148621 198.42063904]
[156.30438232 186.09870911]
[157.20429993 201.07170105]
[158.10421753 216.04467773]
[159.00413513 231.01765442]
[159.90405273 245.99063110]
[160.80395508 260.96362305]
[161.70387268 275.93658447]
[171.18733215 289.31555176]
[164.09759521 304.10296631]
[147.72798157 305.08682251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
