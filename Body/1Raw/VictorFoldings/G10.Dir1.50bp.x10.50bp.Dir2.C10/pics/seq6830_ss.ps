%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUxxxxxxxxxxACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.04037476 287.83184814]
[117.04037476 272.83184814]
[117.04037476 257.83184814]
[117.04037476 242.83183289]
[117.04037476 227.83183289]
[117.04037476 212.83183289]
[117.04037476 197.83183289]
[117.04037476 182.83183289]
[117.04037476 167.83183289]
[117.04037476 152.83183289]
[78.97578430 144.77769470]
[59.68775177 116.14091492]
[65.15191650 86.47859192]
[52.54078293 78.35704803]
[39.92965698 70.23550415]
[27.31852913 62.11396408]
[14.70740032 53.99242401]
[2.09627223 45.87088013]
[-10.51485634 37.74934006]
[-23.12598419 29.62779617]
[-36.90836716 23.70783424]
[-51.48106766 20.15307236]
[-66.05377197 16.59831047]
[-80.98807526 18.00061417]
[-94.64431763 24.20602036]
[-103.73665619 37.85378647]
[-120.08257294 36.53359604]
[-126.86679840 21.60354805]
[-117.11029816 8.42239666]
[-100.84972382 10.54977989]
[-87.19348907 4.34437275]
[-87.34952545 -10.65481567]
[-101.13190460 -16.57477951]
[-114.91428375 -22.49474144]
[-128.69667053 -28.41470528]
[-142.47904968 -34.33466721]
[-144.88792419 -27.52886200]
[-150.54597473 -21.40673065]
[-159.14424133 -17.30793571]
[-169.86953735 -16.41413879]
[-184.28175354 -20.57202721]
[-198.69396973 -24.72991371]
[-214.47367859 -20.26527786]
[-226.03976440 -31.89100266]
[-221.49404907 -47.64754105]
[-205.51275635 -51.32591248]
[-194.53608704 -39.14213181]
[-180.12387085 -34.98424149]
[-165.71165466 -30.82635498]
[-158.80464172 -44.14151001]
[-170.50427246 -53.52867126]
[-182.20390320 -62.91583633]
[-198.34188843 -68.11214447]
[-197.81610107 -85.05792999]
[-181.38699341 -89.24375153]
[-172.81674194 -74.61545563]
[-161.11711121 -65.22829437]
[-149.41748047 -55.84113312]
[-136.55908203 -48.11705017]
[-122.77670288 -42.19708633]
[-108.99432373 -36.27712250]
[-95.21193695 -30.35716057]
[-81.42955780 -24.43719673]
[-62.49900818 2.02560735]
[-47.92630768 5.58036900]
[-33.35360336 9.13513088]
[-43.73934937 -1.68782175]
[-49.88491440 -15.37109661]
[-51.07575989 -30.32375145]
[-47.17343140 -44.80725479]
[-38.63164139 -57.13761520]
[-26.44354630 -65.88120270]
[-12.02623749 -70.02140045]
[2.94399261 -69.07682800]
[16.72656822 -63.15732193]
[27.71900177 -52.95112610]
[34.64321136 -39.64491272]
[36.69412613 -24.78578186]
[33.63328552 -10.10139370]
[25.81657410 2.70091105]
[14.15283298 12.13261890]
[-0.00180585 17.09711456]
[-15.00444221 17.01666832]
[-2.39331388 25.13821030]
[10.21781445 33.25975418]
[22.82894325 41.38129425]
[35.44007111 49.50283813]
[48.05119705 57.62437820]
[60.66232681 65.74591827]
[73.27345276 73.86746216]
[81.71652985 63.97232056]
[93.82883453 57.01717758]
[108.51704407 54.34192276]
[124.21111298 56.86206436]
[139.03210449 64.90470123]
[151.01416016 78.11087799]
[164.10729980 70.79177094]
[177.20045471 63.47266388]
[182.93324280 48.48884964]
[198.26544189 43.76617813]
[211.43548584 52.92747879]
[212.34045410 68.94499207]
[200.28613281 79.53144073]
[184.51956177 76.56581879]
[171.42640686 83.88492584]
[158.33325195 91.20403290]
[159.03440857 98.67118073]
[173.96871948 97.26888275]
[188.90304565 95.86680603]
[190.30488586 110.80115509]
[175.37101746 112.20318604]
[160.43670654 113.60549164]
[161.13786316 121.07264709]
[175.36463928 125.82646179]
[189.59143066 130.58027649]
[203.81820679 135.33409119]
[218.04498291 140.08790588]
[231.27941895 131.75820923]
[246.76469421 133.93542480]
[257.18911743 145.59155273]
[257.63064575 161.22290039]
[247.88073730 173.44883728]
[232.54304504 176.49664307]
[218.85954285 168.92724609]
[213.29116821 154.31468201]
[199.06439209 149.56086731]
[184.83761597 144.80705261]
[170.61082458 140.05323792]
[156.38404846 135.29942322]
[150.29812622 139.68252563]
[160.50421143 150.67507935]
[170.71028137 161.66761780]
[184.28436279 168.05073547]
[188.71832275 182.38041687]
[181.12139893 195.31436157]
[166.44645691 198.42018127]
[154.26092529 189.67301941]
[152.50906372 174.77621460]
[145.31767273 161.61247253]
[138.12629700 148.44873047]
[132.04037476 152.83183289]
[132.04037476 167.83183289]
[132.04037476 182.83183289]
[132.04037476 197.83183289]
[132.04037476 212.83183289]
[132.04037476 227.83183289]
[132.04037476 242.83183289]
[132.04037476 257.83184814]
[132.04037476 272.83184814]
[132.04037476 287.83184814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 90]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 66]
[22 65]
[23 64]
[24 31]
[25 30]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[40 49]
[41 48]
[42 47]
[50 58]
[51 57]
[52 56]
[96 106]
[97 105]
[98 104]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
