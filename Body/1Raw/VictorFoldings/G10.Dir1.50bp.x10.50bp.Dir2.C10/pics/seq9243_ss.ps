%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUxxxxxxxxxxUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.14219666 543.09118652]
[147.14219666 528.09118652]
[147.14219666 513.09118652]
[147.14219666 498.09115601]
[147.14219666 483.09115601]
[147.14219666 468.09115601]
[147.14219666 453.09115601]
[147.14219666 438.09115601]
[147.14219666 423.09115601]
[147.14219666 408.09115601]
[145.17173767 393.22116089]
[141.26498413 378.73883057]
[132.54699707 390.94525146]
[117.78318787 393.59664917]
[105.36271667 385.18640137]
[102.34321594 370.49346924]
[110.44042969 357.86669922]
[125.05332947 354.48095703]
[137.87854004 362.26019287]
[135.75749207 347.41088867]
[133.63645935 332.56161499]
[131.51541138 317.71234131]
[129.24398804 302.88531494]
[126.82243347 288.08206177]
[124.40087891 273.27880859]
[121.97932434 258.47558594]
[119.55776215 243.67233276]
[117.13620758 228.86907959]
[114.71465302 214.06584167]
[112.29309082 199.26258850]
[102.60263062 187.95135498]
[108.01058197 173.08311462]
[105.58901978 158.27986145]
[102.56954193 143.58691406]
[98.95710754 129.02839661]
[95.34466553 114.46988678]
[84.79194641 103.80967712]
[70.27079010 100.04988861]
[55.74963379 96.29010010]
[45.51427078 107.66973114]
[31.15890503 112.97840881]
[15.98229218 110.99623871]
[3.47190785 102.17870331]
[-3.49745393 88.55201721]
[-3.32428455 73.24748993]
[3.95162320 59.78198624]
[16.65831947 51.24978638]
[31.87589645 49.61151886]
[46.10746765 55.24365616]
[56.08272552 66.85196686]
[59.50942230 81.76894379]
[74.03057861 85.52873230]
[88.55173492 89.28852081]
[92.71060944 83.04722595]
[101.02835846 70.56463623]
[105.18723297 64.32334137]
[96.12631989 52.36926651]
[87.06540680 40.41519547]
[78.00449371 28.46112061]
[62.68923187 22.59811401]
[60.37667847 6.36283970]
[73.44578552 -3.54324293]
[88.45217896 3.07039452]
[89.95856476 19.40020943]
[99.01947784 31.35428238]
[108.08039093 43.30835342]
[117.14130402 55.26242828]
[124.59474945 54.42808914]
[139.50164795 52.75941086]
[146.95509338 51.92507553]
[153.14859009 38.26342392]
[159.34207153 24.60177422]
[146.21057129 31.85186195]
[131.21710205 32.29404831]
[117.68115997 25.83042717]
[108.59959412 13.89203739]
[105.98303986 -0.87798810]
[110.41079712 -15.20959473]
[120.90257263 -25.92979240]
[135.13549805 -30.66515350]
[149.95845032 -28.36727524]
[162.08964539 -19.54490662]
[168.84326172 -6.15129900]
[168.72448730 8.84649467]
[177.78540039 -3.10757828]
[186.84631348 -15.06165123]
[195.90722656 -27.01572418]
[198.62078857 -35.80081558]
[205.27490234 -39.11777115]
[214.57623291 -50.88575363]
[223.87756348 -62.65373230]
[233.17887878 -74.42171478]
[238.25698853 -90.59728241]
[255.20617676 -90.19547272]
[259.51205444 -73.79743195]
[244.94686890 -65.12039185]
[235.64553833 -53.35240936]
[226.34420776 -41.58443069]
[217.04289246 -29.81644821]
[207.86129761 -17.95481110]
[198.80038452 -6.00073910]
[189.73947144 5.95333433]
[180.67855835 17.90740776]
[173.00372314 30.79526329]
[166.81022644 44.45691299]
[160.61674500 58.11856461]
[109.90318298 110.85745239]
[113.51561737 125.41596222]
[117.12805939 139.97447205]
[120.35457611 143.07756042]
[122.20273590 146.69166565]
[122.68358612 150.30847168]
[121.97603607 153.47779846]
[120.39226532 155.85830688]
[122.81382751 170.66154480]
[132.67749023 183.03161621]
[127.09633636 196.84103394]
[129.51789856 211.64428711]
[131.93945312 226.44752502]
[134.36100769 241.25076294]
[136.78256226 256.05401611]
[139.20411682 270.85726929]
[141.62568665 285.66049194]
[144.04724121 300.46374512]
[148.54505920 308.48315430]
[146.36468506 315.59127808]
[148.48573303 330.44058228]
[150.60678101 345.28985596]
[152.72781372 360.13912964]
[155.74729919 374.83209229]
[159.65405273 389.31439209]
[164.58494568 375.14801025]
[174.77076721 364.13668823]
[188.51077271 358.11901855]
[203.51075745 358.09976196]
[217.26615906 364.08212280]
[227.48023987 375.06723022]
[232.44750977 389.22091675]
[231.33857727 404.17987061]
[224.33863831 417.44638062]
[212.61643982 426.80535889]
[198.12927246 430.69409180]
[183.29609680 428.46325684]
[170.59359741 420.48538208]
[162.14219666 408.09115601]
[162.14219666 423.09115601]
[162.14219666 438.09115601]
[162.14219666 453.09115601]
[162.14219666 468.09115601]
[162.14219666 483.09115601]
[162.14219666 498.09115601]
[162.14219666 513.09118652]
[162.14219666 528.09118652]
[162.14219666 543.09118652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 131]
[12 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[32 115]
[33 114]
[34 109]
[35 108]
[36 107]
[37 53]
[38 52]
[39 51]
[56 67]
[57 66]
[58 65]
[59 64]
[70 106]
[71 105]
[72 104]
[84 103]
[85 102]
[86 101]
[87 100]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
