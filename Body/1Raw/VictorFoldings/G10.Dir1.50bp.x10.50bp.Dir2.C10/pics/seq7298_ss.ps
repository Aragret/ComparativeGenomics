%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUxxxxxxxxxxCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-53.35964203 158.42335510]
[-67.60633087 163.11715698]
[-81.85302734 167.81095886]
[-92.53898621 179.47804260]
[-107.04824829 176.11192322]
[-121.29493713 180.80572510]
[-135.54162598 185.49952698]
[-149.78833008 190.19332886]
[-164.03501892 194.88713074]
[-178.28170776 199.58093262]
[-192.52839661 204.27473450]
[-206.77508545 208.96853638]
[-192.89709473 214.66073608]
[-184.18019104 226.86793518]
[-183.30078125 241.84213257]
[-190.52883911 254.98576355]
[-203.64514160 262.26330566]
[-218.62254333 261.44033813]
[-230.86251831 252.76950073]
[-236.60696411 238.91305542]
[-234.09219360 224.12535095]
[-224.09184265 212.94769287]
[-238.95843506 214.94375610]
[-253.82504272 216.93980408]
[-268.69165039 218.93586731]
[-283.55822754 220.93193054]
[-298.42483521 222.92797852]
[-301.94705200 237.69139099]
[-310.56781006 250.18327332]
[-323.12121582 258.71417236]
[-337.90951538 262.13040161]
[-352.93273926 259.96990967]
[-366.15908813 252.52490234]
[-375.79980469 240.80223083]
[-380.55108643 226.38732910]
[-379.77035522 211.22966003]
[-373.56320190 197.37918091]
[-362.76907349 186.70907593]
[-348.84777832 180.66236877]
[-333.68212891 180.05682373]
[-319.32305908 184.97434998]
[-307.71258545 194.74989319]
[-300.42089844 208.06138611]
[-285.55429077 206.06532288]
[-270.68768311 204.06927490]
[-255.82109070 202.07321167]
[-240.95449829 200.07714844]
[-226.08790588 198.08110046]
[-211.46888733 194.72183228]
[-197.22219849 190.02804565]
[-182.97550964 185.33424377]
[-168.72882080 180.64044189]
[-154.48211670 175.94664001]
[-140.23542786 171.25283813]
[-125.98873901 166.55903625]
[-111.74205017 161.86523438]
[-102.07510376 150.53388977]
[-86.54682159 153.56427002]
[-72.30013275 148.87046814]
[-58.05344009 144.17666626]
[-61.83966446 127.21012115]
[-63.80994797 109.93827057]
[-63.94218063 92.55490112]
[-62.23487854 75.25506592]
[-58.70720291 58.23289108]
[-53.39873505 41.67936707]
[-46.36903763 25.78023911]
[-37.69698715 10.71390057]
[-27.47989273 -3.35059261]
[-15.83239365 -16.25542831]
[-2.88518357 -27.85580444]
[11.21646214 -38.02156067]
[26.31431389 -46.63862991]
[42.23896408 -53.61032104]
[58.81172943 -58.85840988]
[75.84665680 -62.32400894]
[93.15259552 -63.96823120]
[110.53536224 -63.77262878]
[127.79991913 -61.73939514]
[144.75254822 -57.89134598]
[161.20301819 -52.27165985]
[176.96676636 -44.94338608]
[184.59973145 -57.85608673]
[192.23269653 -70.76878357]
[199.86567688 -83.68148041]
[207.49864197 -96.59417725]
[203.32287598 -111.83683777]
[211.22084045 -125.52616882]
[226.50679016 -129.54054260]
[240.11184692 -121.49829865]
[243.96438599 -106.17076111]
[235.77874756 -92.65148163]
[220.41133118 -88.96121216]
[212.77836609 -76.04851532]
[205.14540100 -63.13581467]
[197.51243591 -50.22311783]
[189.87945557 -37.31041718]
[202.17924500 -28.42067337]
[213.60525513 -18.43274307]
[224.05976868 -7.43203878]
[233.45338440 4.48736858]
[241.70578003 17.22355080]
[248.74638367 30.66759109]
[254.51498413 44.70452881]
[258.96224976 59.21432114]
[262.05017090 74.07289124]
[276.95458984 72.38249969]
[291.85903931 70.69210052]
[300.34530640 57.55750656]
[315.30404663 53.00010681]
[329.67224121 59.17176437]
[336.66561890 73.15841675]
[332.98217773 88.35598755]
[320.36108398 97.58865356]
[304.76165771 96.49703217]
[293.54943848 85.59654999]
[278.64498901 87.28694153]
[263.74053955 88.97734070]
[264.09970093 101.93753815]
[263.43466187 114.88564301]
[261.74954224 127.74084473]
[259.05490112 140.42289734]
[255.36750793 152.85266113]
[250.71043396 164.95256042]
[245.11270142 176.64704895]
[238.60928345 187.86315918]
[231.24073792 198.53088379]
[223.05307007 208.58364868]
[214.09739685 217.95869446]
[204.42958069 226.59750366]
[194.10998535 234.44618225]
[183.20301819 241.45573425]
[171.77674866 247.58239746]
[159.90249634 252.78794861]
[147.65435791 257.03988647]
[135.10881042 260.31170654]
[122.34411621 262.58291626]
[109.43997192 263.83941650]
[96.47690582 264.07333374]
[83.53583527 263.28317261]
[70.69751740 261.47393799]
[58.04208755 258.65686035]
[45.64853668 254.84956360]
[33.59421158 250.07577515]
[21.95434952 244.36531067]
[10.80160141 237.75381470]
[0.20557377 230.28254700]
[-9.76759911 221.99812317]
[-19.05566978 212.95227051]
[-27.60066986 203.20143127]
[-35.34926605 192.80648804]
[-42.25309372 181.83229065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[22 48]
[23 47]
[24 46]
[25 45]
[26 44]
[27 43]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
