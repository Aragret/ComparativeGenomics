%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACxxxxxxxxxxAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.71092987 241.78706360]
[110.39887238 226.79029846]
[110.08681488 211.79354858]
[109.77475739 196.79679871]
[109.46270752 181.80004883]
[109.15065002 166.80328369]
[108.83859253 151.80653381]
[108.52653503 136.80978394]
[108.21447754 121.81302643]
[94.31192017 116.18107605]
[83.65029907 126.73236084]
[72.98867035 137.28366089]
[62.32704544 147.83494568]
[51.77575302 158.49656677]
[41.33594131 169.26737976]
[30.89612961 180.03819275]
[27.42634201 196.06605530]
[11.73038483 200.81674194]
[-0.04508708 189.40313721]
[4.21352243 173.56658936]
[20.12532043 169.59837341]
[30.56513405 158.82756042]
[41.00494385 148.05676270]
[43.41753387 141.01934814]
[51.77575302 137.17332458]
[62.43738174 126.62202454]
[73.09900665 116.07073975]
[83.76063538 105.51944733]
[77.84066772 91.73706818]
[62.84797287 92.20510864]
[47.85527802 92.67314911]
[32.86258316 93.14118958]
[17.86988449 93.60923004]
[8.33972645 106.00721741]
[-6.94113398 109.32826233]
[-20.75753975 102.00426483]
[-26.58580780 87.49340057]
[-21.67400742 72.64724731]
[-8.34134102 64.47570801]
[7.11691427 66.83713531]
[17.40184402 78.61653900]
[32.39453888 78.14849854]
[47.38723373 77.68045044]
[62.37993240 77.21240997]
[77.37262726 76.74436951]
[90.23103333 69.02028656]
[97.68594360 56.00397491]
[105.14085388 42.98766327]
[112.59576416 29.97135544]
[100.20611572 21.50160408]
[88.52855682 12.07426167]
[77.63692474 1.74892998]
[67.60008240 -9.40910816]
[58.48147583 -21.32930946]
[50.33876801 -33.93630600]
[43.22343445 -47.15039444]
[37.18046188 -60.88802719]
[32.24805832 -75.06235504]
[28.45740891 -89.58375549]
[25.83247566 -104.36042023]
[24.38985634 -119.29891968]
[24.13867188 -134.30482483]
[25.08051109 -149.28323364]
[27.20941925 -164.13948059]
[30.51193619 -178.77961731]
[34.96718216 -193.11106873]
[40.54698944 -207.04325867]
[47.21607971 -220.48808289]
[54.93228531 -233.36054993]
[63.64682770 -245.57925415]
[73.30460358 -257.06695557]
[83.84455872 -267.75103760]
[95.20005035 -277.56393433]
[107.29929352 -286.44360352]
[120.06577301 -294.33392334]
[133.41879272 -301.18496704]
[147.27392578 -306.95346069]
[161.54356384 -311.60293579]
[176.13749695 -315.10394287]
[190.96345520 -317.43441772]
[205.92770386 -318.57958984]
[220.93562317 -318.53219604]
[235.89234924 -317.29257202]
[250.70329285 -314.86856079]
[265.27484131 -311.27545166]
[279.51483154 -306.53601074]
[293.33325195 -300.68014526]
[306.64276123 -293.74493408]
[319.35916138 -285.77416992]
[331.40209961 -276.81829834]
[342.69543457 -266.93389893]
[353.16772461 -256.18350220]
[362.75277710 -244.63504028]
[371.38998413 -232.36155701]
[379.02478027 -219.44062805]
[385.60885620 -205.95396423]
[391.10058594 -191.98683167]
[395.46527100 -177.62751770]
[398.67526245 -162.96682739]
[400.71035767 -148.09744263]
[401.55758667 -133.11337280]
[401.21166992 -118.10936737]
[399.67477417 -103.18026733]
[396.95660400 -88.42047119]
[393.07434082 -73.92329407]
[388.05255127 -59.78039169]
[381.92297363 -46.08118439]
[374.72433472 -32.91228104]
[366.50219727 -20.35694504]
[357.30853271 -8.49455357]
[347.20141602 2.59989429]
[336.24481201 12.85625458]
[324.50799561 22.20968246]
[312.06509399 30.60104179]
[298.99487305 37.97727966]
[285.37988281 44.29175949]
[271.30627441 49.50455856]
[256.86297607 53.58272171]
[242.14134216 56.50046158]
[227.23440552 58.23933411]
[212.23645020 58.78834152]
[197.24229431 58.14402008]
[182.34672546 56.31043243]
[167.64392090 53.29918289]
[153.22683716 49.12930298]
[139.18663025 43.82715607]
[125.61206818 37.42626572]
[118.15715790 50.44257736]
[110.70224762 63.45888519]
[103.24733734 76.47519684]
[111.39190674 63.87892151]
[124.04653168 55.82532883]
[138.90658569 53.78112030]
[153.26577759 58.11858749]
[164.50903320 68.04779053]
[170.58876038 81.76045227]
[170.39772034 96.75923157]
[163.97068787 110.31259155]
[152.47817993 119.95220184]
[138.01316833 123.92252350]
[123.21123505 121.50097656]
[123.52329254 136.49772644]
[123.83534241 151.49447632]
[124.14739990 166.49124146]
[124.45945740 181.48799133]
[124.77151489 196.48474121]
[125.08357239 211.48149109]
[125.39562988 226.47825623]
[125.70767975 241.47500610]
[128.29867554 260.68273926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 28]
[11 27]
[12 26]
[13 25]
[14 23]
[15 22]
[16 21]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[46 130]
[47 129]
[48 128]
[49 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
