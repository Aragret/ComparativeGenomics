%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUAAUUxxxxxxxxxxACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.00077057 101.94506836]
[74.90762329 94.62596130]
[61.81446457 87.30685425]
[48.72130966 79.98774719]
[35.62815475 72.66864014]
[22.53500175 65.34954071]
[9.44184780 58.03042984]
[-3.65130687 50.71132660]
[-16.74446106 43.39221954]
[-29.83761597 36.07311630]
[-38.15330887 48.56621552]
[-47.41212082 60.37734222]
[-57.55837250 71.43545532]
[-68.53103638 81.67405701]
[-80.26412201 91.03156281]
[-92.68707275 99.45170593]
[-105.72515869 106.88383484]
[-119.29998016 113.28324890]
[-133.32989502 118.61147308]
[-147.73051453 122.83645630]
[-162.41523743 125.93279266]
[-177.29573059 127.88185120]
[-192.28253174 128.67192078]
[-207.28549194 128.29823303]
[-222.21437073 126.76305389]
[-236.97940063 124.07560730]
[-251.49176025 120.25205231]
[-265.66418457 115.31539917]
[-279.41143799 109.29532623]
[-292.65084839 102.22803497]
[-305.30276489 94.15604401]
[-317.29113770 85.12788391]
[-328.54382324 75.19786835]
[-338.99316406 64.42570496]
[-348.57632446 52.87618256]
[-357.23565674 40.61876678]
[-364.91909790 27.72717285]
[-371.58041382 14.27893257]
[-377.17956543 0.35492894]
[-381.68286133 -13.96109867]
[-385.06320190 -28.58304977]
[-387.30032349 -43.42298508]
[-388.38070679 -58.39165497]
[-388.29788208 -73.39903259]
[-387.05233765 -88.35486603]
[-384.65155029 -103.16920471]
[-381.10998535 -117.75295258]
[-376.44894409 -132.01840210]
[-370.69644165 -145.87974548]
[-363.88708496 -159.25364685]
[-356.06182861 -172.05963135]
[-347.26773071 -184.22071838]
[-337.55764771 -195.66375732]
[-326.99005127 -206.31993103]
[-315.62841797 -216.12513733]
[-303.54113770 -225.02040100]
[-290.80090332 -232.95225525]
[-277.48428345 -239.87297058]
[-263.67141724 -245.74093628]
[-249.44535828 -250.52085876]
[-234.89167786 -254.18397522]
[-220.09788513 -256.70828247]
[-205.15296936 -258.07858276]
[-190.14680481 -258.28662109]
[-175.16963196 -257.33117676]
[-160.31155396 -255.21798706]
[-145.66191101 -251.95976257]
[-131.30879211 -247.57608032]
[-117.33856201 -242.09330750]
[-103.83520508 -235.54443359]
[-90.87994385 -227.96884155]
[-78.55069733 -219.41209412]
[-66.92161560 -209.92564392]
[-56.06263733 -199.56654358]
[-46.03906631 -188.39710999]
[-36.91119003 -176.48449707]
[-28.73390579 -163.90037537]
[-21.55639267 -150.72039795]
[-15.42181492 -137.02386475]
[-10.36707115 -122.89311981]
[-6.42255878 -108.41316223]
[-3.61200190 -93.67107391]
[-1.95230389 -78.75552368]
[-1.45344627 -63.75620651]
[-2.11842918 -48.76334000]
[-3.94325352 -33.86708450]
[-6.91694403 -19.15703964]
[-11.02161694 -4.72166681]
[-16.23258591 9.35221386]
[-22.51851082 22.97995949]
[-9.42535591 30.29906654]
[3.66779876 37.61817169]
[16.76095390 44.93727875]
[29.85410690 52.25638199]
[42.94726181 59.57548904]
[56.04041672 66.89459229]
[69.13356781 74.21369934]
[82.22672272 81.53280640]
[95.31987762 88.85191345]
[102.41533661 88.20415497]
[108.61325836 91.65824127]
[123.54756927 90.25593567]
[138.48187256 88.85363007]
[153.41618347 87.45133209]
[168.33509827 85.89374542]
[183.23699951 84.18106079]
[198.13890076 82.46836853]
[207.76760864 69.93586731]
[223.44857788 67.96544647]
[235.87858582 77.72612000]
[237.68310547 93.42705536]
[227.79156494 105.75315857]
[212.07243347 107.39157867]
[199.85159302 97.37026978]
[184.94969177 99.08296204]
[170.04779053 100.79565430]
[163.72088623 104.70922089]
[154.81848145 102.38563538]
[139.88417053 103.78794098]
[124.94986725 105.19024658]
[110.01556396 106.59254456]
[123.52243805 113.11668396]
[135.52439880 122.11407471]
[145.57432556 133.24954224]
[153.29786682 146.10827637]
[158.40727234 160.21125793]
[160.71221924 175.03311157]
[160.12683105 190.02168274]
[156.67292786 204.61862183]
[150.47918701 218.28015137]
[141.77630615 230.49734497]
[130.88851929 240.81509399]
[118.22139740 248.84904480]
[104.24684143 254.29988098]
[89.48542023 256.96456909]
[74.48704529 256.74386597]
[59.81043625 253.64593506]
[46.00233078 247.78622437]
[33.57711029 239.38301086]
[22.99764824 228.74934387]
[14.65805435 216.28134155]
[8.86899662 202.44346619]
[5.84613180 187.75120544]
[5.70206881 172.75190735]
[8.44217396 158.00430298]
[13.96437263 144.05778503]
[22.06294823 131.43188477]
[32.43621063 120.59697723]
[44.69773102 111.95665741]
[58.39074326 105.83280945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[8 92]
[9 91]
[10 90]
[101 121]
[102 120]
[103 119]
[104 118]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
