%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCxxxxxxxxxxGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[64.66554260 176.78485107]
[57.21063232 189.80116272]
[49.75572205 202.81747437]
[42.30081177 215.83378601]
[42.15628433 231.65432739]
[29.11683273 238.85307312]
[21.66192245 251.86938477]
[14.20701122 264.88571167]
[6.75210094 277.90200806]
[-0.70280921 290.91830444]
[-0.10489379 307.30654907]
[-14.14042377 315.78805542]
[-28.37084961 307.63778687]
[-28.15712738 291.24002075]
[-13.71911907 283.46340942]
[-6.26420832 270.44708252]
[1.19070196 257.43078613]
[8.64561272 244.41447449]
[16.10052299 231.39816284]
[15.71182728 216.50863647]
[29.28450394 208.37887573]
[36.73941422 195.36256409]
[44.19432449 182.34625244]
[51.64923477 169.32994080]
[43.30777740 162.69314575]
[35.86796570 155.05923462]
[29.44813156 146.54966736]
[24.15037155 137.29975891]
[20.05894661 127.45661926]
[17.23892593 117.17679596]
[15.73516083 106.62380219]
[0.73597246 106.46776581]
[-14.26321602 106.31172180]
[-29.26240349 106.15568542]
[-39.30005264 118.14650726]
[-54.70583344 120.82901001]
[-68.20561218 112.93661499]
[-73.42520905 98.19585419]
[-67.90008545 83.56687927]
[-54.23903275 75.95703888]
[-38.89238739 78.95945740]
[-29.10636711 91.15650177]
[-14.10717964 91.31253815]
[0.89200902 91.46857452]
[15.89119720 91.62461090]
[21.59836006 68.41486359]
[33.57445908 47.73064423]
[50.86189651 31.22584152]
[72.07838440 20.22017097]
[95.52745819 15.59363651]
[119.33415222 17.71617317]
[141.59490967 26.41806221]
[150.10600281 14.06649017]
[158.61708069 1.71491718]
[167.12817383 -10.63665485]
[175.63926697 -22.98822784]
[166.28240967 -37.31422806]
[163.38867188 -54.13275146]
[167.39810181 -70.67411041]
[177.61689758 -84.22872925]
[192.33721924 -92.59098816]
[209.12248230 -94.41809082]
[213.13021851 -108.87277985]
[217.13796997 -123.32746887]
[220.54093933 -137.93637085]
[223.33326721 -152.67416382]
[226.12559509 -167.41197205]
[228.91790771 -182.14978027]
[215.25976562 -188.54554749]
[203.62179565 -198.13764954]
[194.73558044 -210.32313538]
[189.15971375 -224.33601379]
[187.24470520 -239.29541016]
[189.11093140 -254.26097107]
[194.64106750 -268.29193115]
[203.48748779 -280.50634766]
[215.09411621 -290.13635254]
[228.73133850 -296.57662964]
[243.54190063 -299.42230225]
[258.59481812 -298.49453735]
[272.94381714 -293.85162354]
[285.68695068 -285.78543091]
[296.02313232 -274.80297852]
[303.30267334 -261.59469604]
[307.06793213 -246.99079895]
[307.08221436 -231.90933228]
[303.34466553 -217.29832458]
[296.09017944 -204.07623291]
[285.77484131 -193.07421875]
[273.04702759 -184.98387146]
[258.70684814 -180.31376648]
[243.65571594 -179.35745239]
[240.86340332 -164.61964417]
[238.07107544 -149.88185120]
[235.27874756 -135.14404297]
[236.80819702 -132.72161865]
[237.43814087 -129.52832031]
[236.86268616 -125.91574097]
[234.91333008 -122.34207916]
[231.59265137 -119.31973267]
[227.58491516 -104.86504364]
[223.57716370 -90.41035461]
[237.03483582 -80.01770782]
[245.20979309 -65.10846710]
[260.11169434 -66.82115173]
[275.01361084 -68.53384399]
[289.91549683 -70.24653625]
[299.54421997 -82.77902985]
[315.22518921 -84.74945068]
[327.65518188 -74.98878479]
[329.45971680 -59.28784943]
[319.56817627 -46.96174240]
[303.84902954 -45.32332230]
[291.62820435 -55.34463120]
[276.72628784 -53.63194275]
[261.82440186 -51.91925049]
[246.92248535 -50.20656204]
[244.69073486 -38.98648453]
[239.47822571 -28.77358437]
[231.66555786 -20.34506226]
[221.83178711 -14.34670162]
[210.71153259 -11.24338245]
[199.14013672 -11.28308582]
[187.99084473 -14.47713757]
[179.47975159 -2.12556505]
[170.96865845 10.22600746]
[162.45756531 22.57757950]
[153.94647217 34.92915344]
[161.34994507 41.85688019]
[167.87060547 49.62125397]
[173.41465759 58.11054993]
[177.90231323 67.20261383]
[181.26898193 76.76661682]
[183.46624756 86.66493225]
[184.46246338 96.75513458]
[184.24333191 106.89202881]
[182.81196594 116.92974854]
[180.18898010 126.72386169]
[176.41212463 136.13343811]
[171.53573608 145.02305603]
[165.62998962 153.26483154]
[158.77986145 160.74014282]
[151.08392334 167.34144592]
[142.65290833 172.97373962]
[133.60815430 177.55598450]
[124.07978821 181.02223206]
[114.20492554 183.32261658]
[104.12566376 184.42402649]
[93.98703766 184.31062317]
[83.93492889 182.98403931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[31 45]
[32 44]
[33 43]
[34 42]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
[62 102]
[63 101]
[64 100]
[65 95]
[66 94]
[67 93]
[68 92]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
