%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.92852020 427.09811401]
[102.92852020 412.09811401]
[102.92852020 397.09811401]
[102.92852020 382.09811401]
[102.92852020 367.09811401]
[102.92852020 352.09811401]
[102.92852020 337.09811401]
[102.92852020 322.09811401]
[102.92852020 307.09811401]
[102.92852020 292.09811401]
[86.50691986 288.06887817]
[71.64367676 279.98654175]
[59.32087708 268.37942505]
[50.35422516 254.00891113]
[45.33903122 237.81947327]
[44.61069107 220.87675476]
[48.22226715 204.29724121]
[55.94065857 189.17481995]
[67.26162720 176.50854492]
[81.44275665 167.13667297]
[97.55212402 161.68115234]
[96.32151031 146.73171997]
[95.09089661 131.78228760]
[82.98372650 127.28844452]
[73.62062073 118.39404297]
[68.51147461 106.53340912]
[53.51858902 106.07147980]
[38.52570343 105.60955811]
[23.53281784 105.14762878]
[8.53360748 104.99362946]
[-6.46560144 105.14762878]
[-21.46481133 105.30162811]
[-36.46401978 105.45562744]
[-44.58374786 118.57330322]
[-58.51628113 125.19811249]
[-73.81579590 123.21610260]
[-85.60027313 113.25971222]
[-90.10932922 98.50600433]
[-85.90414429 83.66282654]
[-74.32657623 73.46658325]
[-59.07098007 71.17086029]
[-45.00536346 77.50820923]
[-36.61801910 90.45641327]
[-21.61880875 90.30241394]
[-6.61959839 90.14842224]
[8.37961102 89.99442291]
[12.33963394 87.22541046]
[18.09425926 86.95679474]
[23.99474335 90.15474701]
[38.98762894 90.61666870]
[53.98051453 91.07859802]
[68.97340393 91.54051971]
[76.03973389 76.01076508]
[90.66339111 65.59259796]
[109.42787170 63.80995178]
[110.96516418 48.88893509]
[112.50245667 33.96791840]
[114.03974915 19.04690170]
[115.11682129 4.08562183]
[115.73265076 -10.90173149]
[116.34847260 -25.88908577]
[116.96430206 -40.87643814]
[108.79709625 -50.91139984]
[109.65488434 -63.41881943]
[118.52893066 -71.69610596]
[119.45234680 -86.66765594]
[111.49289703 -96.86818695]
[112.60730743 -109.35536194]
[121.64942932 -117.44869995]
[122.88004303 -132.39813232]
[109.09883881 -138.71116638]
[98.31011200 -149.35911560]
[91.81664276 -163.05622864]
[90.40254974 -178.14848328]
[94.23860168 -192.81343079]
[102.86156464 -205.28019714]
[115.23018646 -214.04336548]
[129.85087585 -218.04473877]
[144.95814514 -216.80113220]
[158.72769165 -210.46272278]
[169.49678040 -199.79489136]
[175.96499634 -186.08584595]
[177.35125732 -170.99101257]
[173.48818970 -156.33316040]
[164.84226990 -143.88230896]
[152.45751953 -135.14195251]
[137.82948303 -131.16752625]
[136.59886169 -116.21808624]
[144.95404053 -100.81562805]
[134.42388916 -85.74423981]
[133.50048828 -70.77268982]
[142.17013550 -55.54502869]
[131.95164490 -40.26061249]
[131.33583069 -25.27326012]
[130.72000122 -10.28590584]
[130.10417175 4.70144701]
[132.26754761 7.55924988]
[133.12002563 11.62654495]
[132.09962463 16.25951195]
[128.96076965 20.58419418]
[127.42347717 35.50521088]
[125.88618469 50.42622757]
[124.34889221 65.34724426]
[134.90090942 76.00815582]
[149.83691406 74.62413025]
[164.77293396 73.24010468]
[179.70893860 71.85607910]
[186.05537415 57.86971283]
[198.55406189 48.94343185]
[213.84291077 47.47835922]
[227.80931091 53.86859894]
[236.69638062 66.39520264]
[238.11351013 81.68857574]
[231.67953491 95.63488007]
[219.12513733 104.48262787]
[203.82739258 105.85182190]
[189.90132141 99.37416077]
[181.09297180 86.79209137]
[166.15695190 88.17611694]
[151.22094727 89.56014252]
[136.28492737 90.94416809]
[136.29522705 101.99798584]
[133.10653687 112.25637054]
[127.18360138 120.84309387]
[119.21559906 127.08248138]
[110.04032898 130.55166626]
[111.27094269 145.50109863]
[112.50155640 160.45053101]
[125.59597778 162.20640564]
[138.07629395 166.52368164]
[149.44697571 173.22857666]
[159.25698853 182.05252075]
[167.11775208 192.64295959]
[172.71847534 204.57743835]
[175.83848572 217.38041687]
[176.35588074 230.54225159]
[174.25234985 243.53945923]
[169.61375427 255.85557556]
[162.62664795 267.00164795]
[153.57077026 276.53561401]
[142.80787659 284.07992554]
[130.76722717 289.33642578]
[117.92852020 292.09811401]
[117.92852020 307.09811401]
[117.92852020 322.09811401]
[117.92852020 337.09811401]
[117.92852020 352.09811401]
[117.92852020 367.09811401]
[117.92852020 382.09811401]
[117.92852020 397.09811401]
[117.92852020 412.09811401]
[117.92852020 427.09811401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 128]
[22 127]
[23 126]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[55 103]
[56 102]
[57 101]
[58 100]
[59 96]
[60 95]
[61 94]
[62 93]
[65 91]
[66 90]
[69 88]
[70 87]
[104 121]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
