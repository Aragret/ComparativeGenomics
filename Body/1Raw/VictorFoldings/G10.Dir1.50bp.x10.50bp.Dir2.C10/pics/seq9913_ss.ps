%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCAxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.75413537 231.56826782]
[-5.64972162 243.25448608]
[-15.05357933 254.94068909]
[-24.45743561 266.62689209]
[-33.86129379 278.31311035]
[-43.26515198 289.99932861]
[-45.88882446 305.60147095]
[-59.89583588 310.66632080]
[-69.29969025 322.35253906]
[-78.70355225 334.03875732]
[-88.10740662 345.72494507]
[-82.48439026 360.01751709]
[-84.77687073 375.20434570]
[-94.36817169 387.20028687]
[-108.67828369 392.77847290]
[-123.85786438 390.43841553]
[-135.82368469 380.80957031]
[-141.35697937 366.48202515]
[-138.96934509 351.30987549]
[-129.30303955 339.37429810]
[-114.95822906 333.88592529]
[-99.79361725 336.32110596]
[-90.38976288 324.63488770]
[-80.98590088 312.94869995]
[-71.58204651 301.26248169]
[-69.63099670 286.49621582]
[-54.95135880 280.59545898]
[-45.54750061 268.90924072]
[-36.14364624 257.22305298]
[-26.73978806 245.53683472]
[-17.33592987 233.85063171]
[-7.93207312 222.16441345]
[-24.72739601 204.95977783]
[-38.80938339 185.47181702]
[-49.87169647 164.12451172]
[-57.67367935 141.38221741]
[-62.04561234 117.73969269]
[-62.89238358 93.71126556]
[-60.19557571 69.81963348]
[-54.01385498 46.58455658]
[-67.94457245 41.02261734]
[-81.87528992 35.46068192]
[-95.80600739 29.89874268]
[-108.85902405 38.28910828]
[-124.34892273 37.37107086]
[-136.31950378 27.49763870]
[-140.16784668 12.46534348]
[-134.41418457 -1.94558787]
[-121.27091217 -10.19385910]
[-105.79188538 -9.10784149]
[-93.92911530 0.89486963]
[-90.24406433 15.96802711]
[-76.31334686 21.52996445]
[-62.38263321 27.09190178]
[-48.45191956 32.65383911]
[-44.31980896 24.20243645]
[-39.70705414 16.00347328]
[-34.62901688 8.08425045]
[-29.10261345 0.47114584]
[-23.14624214 -6.81048727]
[-16.77974701 -13.73639774]
[-10.02432537 -20.28351974]
[-2.90247822 -26.43004990]
[4.56207609 -32.15551376]
[12.34447765 -37.44084930]
[20.41880798 -42.26844788]
[28.75817490 -46.62223434]
[37.33480835 -50.48770905]
[46.12014008 -53.85200119]
[55.08491516 -56.70389938]
[64.19927216 -59.03391266]
[73.43286896 -60.83427811]
[82.75493622 -62.09899902]
[92.13444519 -62.82386398]
[101.54013824 -63.00645828]
[110.94071198 -62.64617538]
[120.30484772 -61.74421310]
[129.60134888 -60.30357742]
[138.79928589 -58.32906723]
[147.86798096 -55.82725525]
[156.77726746 -52.80647278]
[165.49746704 -49.27678680]
[173.99952698 -45.24994659]
[182.25514221 -40.73936081]
[190.41181946 -53.32780075]
[198.56848145 -65.91624451]
[206.72514343 -78.50467682]
[214.88180542 -91.09311676]
[215.18243408 -107.48950958]
[229.66145325 -115.18951416]
[243.42410278 -106.27201843]
[242.31253052 -89.91059113]
[227.47024536 -82.93645477]
[219.31358337 -70.34801483]
[211.15692139 -57.75957489]
[203.00025940 -45.17113495]
[194.84358215 -32.58269501]
[209.65109253 -20.62385368]
[222.96372986 -7.02054739]
[234.60000610 8.04177094]
[244.40127563 24.35775757]
[252.23391724 41.70497131]
[257.99114990 59.84692383]
[261.59451294 78.53628540]
[262.99484253 97.51825714]
[277.98773193 97.98018646]
[292.98062134 98.44210815]
[307.97351074 98.90403748]
[322.96636963 99.36595917]
[329.96340942 85.80113220]
[342.15820312 76.62239075]
[357.12954712 73.65219116]
[371.90481567 77.48025513]
[383.55038452 87.34652710]
[389.75402832 101.29204559]
[389.28399658 116.54792786]
[382.23361206 130.08509827]
[370.00274658 139.21574402]
[355.01986694 142.12696838]
[340.25976562 138.24075317]
[328.65313721 128.32868958]
[322.50445557 114.35884857]
[307.51156616 113.89691925]
[292.51867676 113.43499756]
[277.52578735 112.97306824]
[262.53292847 112.51114655]
[261.11599731 124.80152130]
[258.77105713 136.94903564]
[255.51159668 148.88374329]
[251.35641479 160.53686523]
[246.32943726 171.84130859]
[240.45960999 182.73196411]
[233.78074646 193.14607239]
[226.33131409 203.02366638]
[218.15422058 212.30786133]
[209.29656982 220.94517517]
[199.80938721 228.88584900]
[189.74731445 236.08415222]
[179.16828918 242.49862671]
[168.13327026 248.09231567]
[156.70581055 252.83300781]
[144.95173645 256.69338989]
[132.93873596 259.65124512]
[120.73600769 261.68951416]
[108.41384888 262.79644775]
[96.04322052 262.96569824]
[83.69538879 262.19628906]
[71.44146729 260.49264526]
[59.35203934 257.86456299]
[47.49674225 254.32720947]
[35.94385910 249.90092468]
[24.75993347 244.61123657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[8 25]
[9 24]
[10 23]
[11 22]
[40 55]
[41 54]
[42 53]
[43 52]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
