%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAxxxxxxxxxxAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.72315979 534.96258545]
[92.30893707 515.75415039]
[92.61691284 500.75732422]
[92.92489624 485.76049805]
[93.23287201 470.76364136]
[93.54084778 455.76681519]
[93.84882355 440.76995850]
[94.15680695 425.77313232]
[94.46478271 410.77630615]
[94.77275848 395.77944946]
[80.63355255 392.43328857]
[67.49947357 386.20538330]
[55.95083618 377.36816406]
[46.49850845 366.30932617]
[39.56129074 353.51492310]
[35.44736099 339.54803467]
[34.34058762 325.02389526]
[36.29231644 310.58285522]
[41.21898651 296.86215210]
[48.90571213 284.46774292]
[59.01565552 273.94757080]
[71.10477448 265.76736450]
[84.64133453 260.29000854]
[99.02929688 257.75942993]
[99.64512634 242.77206421]
[100.26094818 227.78471375]
[93.05268860 214.75051880]
[101.35003662 201.27963257]
[101.96585846 186.29228210]
[102.58168793 171.30493164]
[103.19750977 156.31758118]
[101.81348419 141.38156128]
[98.45423126 126.76255798]
[95.09497070 112.14354706]
[91.13835907 97.67478180]
[86.59107208 83.38064575]
[82.04377747 69.08651733]
[77.49649048 54.79238892]
[72.94919586 40.49826050]
[68.40190887 26.20412827]
[63.85461807 11.90999889]
[52.29785919 1.10481858]
[55.81275177 -13.36911678]
[51.26546097 -27.66324615]
[45.64831924 -34.94634247]
[46.77481079 -42.29775238]
[39.00967407 -55.13140488]
[28.24099731 -65.57341766]
[17.47231865 -76.01542664]
[6.70363903 -86.45743561]
[-7.41226816 -80.74244690]
[-22.63206100 -81.26949310]
[-36.31882095 -87.94725800]
[-46.10123062 -99.61877441]
[-50.28442764 -114.26188660]
[-48.14365387 -129.33958435]
[-40.04980469 -142.23956299]
[-27.40519333 -150.72683716]
[-12.40057182 -153.33091736]
[2.36441684 -149.60063171]
[14.33164978 -140.18228149]
[21.42773056 -126.70766449]
[22.42322159 -111.51131439]
[17.14564896 -97.22611237]
[27.91432762 -86.78410339]
[38.68300629 -76.34209442]
[49.45168304 -65.90008545]
[45.63476944 -80.40632629]
[45.20121765 -95.40006256]
[48.17353821 -110.10262299]
[54.39737701 -123.75047302]
[63.54951477 -135.63485718]
[75.15465546 -145.13856506]
[88.61012268 -151.76808167]
[103.21714783 -155.17909241]
[118.21713257 -155.19447327]
[132.83111572 -151.81341553]
[146.30015564 -145.21151733]
[157.92475891 -135.73161316]
[167.10124207 -123.86602783]
[173.35305786 -110.23096466]
[176.35551453 -95.53453064]
[175.95271301 -80.53993988]
[172.16555786 -66.02589417]
[165.19071960 -52.74615097]
[155.39041138 -41.39035034]
[143.27362061 -32.54822922]
[129.46955872 -26.67897606]
[114.69513702 -24.08739662]
[99.71760559 -24.90807915]
[85.31478119 -29.09840012]
[72.23464966 -36.44075012]
[61.15929031 -46.55059814]
[65.55959320 -32.21053696]
[70.10688019 -17.91640663]
[81.33838654 -8.13363838]
[78.14875031 7.36270905]
[82.69603729 21.65683937]
[87.24333191 35.95096970]
[91.79061890 50.24509811]
[96.33790588 64.53923035]
[100.88520050 78.83335876]
[105.43248749 93.12748718]
[108.08213806 94.76837158]
[110.17621613 97.43338013]
[111.32552338 100.91197968]
[111.22676086 104.84972382]
[109.71397400 108.78428650]
[113.07323456 123.40329742]
[116.43249512 138.02230835]
[121.92550659 124.06426239]
[132.54225159 113.46781921]
[146.51077271 108.00153351]
[161.49971008 108.57774353]
[175.00735474 115.10028839]
[184.77925110 126.48052216]
[189.18447876 140.81907654]
[187.48776245 155.72280884]
[179.97229004 168.70425415]
[167.89242554 177.59677124]
[153.26432800 180.91619873]
[138.52944946 178.10848999]
[126.14706421 169.64228821]
[118.18486786 156.93339539]
[117.56903839 171.92074585]
[116.95321655 186.90811157]
[116.33738708 201.89546204]
[123.50160217 216.00164795]
[115.24830627 228.40054321]
[114.63247681 243.38789368]
[114.01665497 258.37524414]
[128.99359131 262.40396118]
[142.69952393 269.64764404]
[154.45458984 279.74349976]
[163.67646790 292.18734741]
[169.90925598 306.35879517]
[172.84593201 321.55215454]
[172.34353638 337.01159668]
[168.43014526 351.96875000]
[161.30323792 365.68096924]
[151.31985474 377.46798706]
[138.97856140 386.74591064]
[124.89469147 393.05599976]
[109.76959991 396.08743286]
[109.46161652 411.08425903]
[109.15364075 426.08111572]
[108.84566498 441.07794189]
[108.53768921 456.07479858]
[108.22970581 471.07162476]
[107.92173004 486.06845093]
[107.61375427 501.06530762]
[107.30577850 516.06213379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[24 131]
[25 130]
[26 129]
[28 127]
[29 126]
[30 125]
[31 124]
[32 110]
[33 109]
[34 108]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[41 97]
[43 95]
[44 94]
[46 93]
[47 67]
[48 66]
[49 65]
[50 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
