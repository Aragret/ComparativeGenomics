%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGxxxxxxxxxxCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.10520172 318.50048828]
[85.10520172 303.50048828]
[85.10520172 288.50048828]
[85.10520172 273.50048828]
[85.10520172 258.50048828]
[85.10520172 243.50048828]
[85.10520172 228.50048828]
[85.10520172 213.50048828]
[85.10520172 198.50048828]
[85.10520172 183.50048828]
[78.97401428 179.18092346]
[65.36126709 185.48117065]
[66.71164703 170.54180908]
[60.58046341 166.22225952]
[46.45565796 171.27101135]
[32.33085632 176.31976318]
[18.20605278 181.36853027]
[19.74384308 196.36514282]
[17.64732552 211.29391479]
[12.03838825 225.28688049]
[3.24312854 237.53053284]
[-8.22710896 247.31301880]
[-21.70546150 254.06561279]
[-36.40830994 257.39572144]
[-51.48085785 257.10974121]
[-66.04679871 253.22427368]
[-79.25930023 245.96525574]
[-90.35018921 235.75469971]
[-98.67466736 223.18621826]
[-103.74874878 208.99055481]
[-105.27745056 193.99299622]
[-103.17188263 179.06550598]
[-97.55445862 165.07594299]
[-88.75177765 152.83763123]
[-77.27561188 143.06208801]
[-63.79317093 136.31767273]
[-49.08830261 132.99649048]
[-34.01593399 133.29161072]
[-19.45234871 137.18588257]
[-6.24425602 144.45292664]
[4.84044218 154.67019653]
[13.15729713 167.24372864]
[27.28210068 162.19496155]
[41.40690231 157.14620972]
[55.53170776 152.09745789]
[67.03350830 142.46893311]
[74.48841858 129.45262146]
[81.94332886 116.43630981]
[72.18498230 105.89632416]
[69.20504761 89.77184296]
[75.94019318 72.59874725]
[64.84887695 62.50009537]
[53.75756454 52.40144348]
[37.62923050 49.43346024]
[32.39110565 33.89338303]
[43.43172073 21.76750755]
[59.39344025 25.52989769]
[63.85621262 41.31013107]
[74.94752502 51.40877914]
[86.03884125 61.50742722]
[99.69508362 55.30202103]
[99.38302612 40.30526733]
[99.07097626 25.30851364]
[84.38628387 21.87183189]
[71.01799774 14.89045429]
[59.80644226 4.80323982]
[51.45639420 -7.75572205]
[46.49274445 -21.99696541]
[45.22750854 -37.02527237]
[47.74022293 -51.89595032]
[53.87293625 -65.67421722]
[63.24014282 -77.49395752]
[75.25300598 -86.61217499]
[89.15638733 -92.45569611]
[104.07631683 -94.65718079]
[119.07491302 -93.07824707]
[133.20935059 -87.81814575]
[145.59111023 -79.20754242]
[155.44189453 -67.78768921]
[162.14245605 -54.27645874]
[165.27159119 -39.52317810]
[164.63261414 -24.45524788]
[160.26567078 -10.01985264]
[152.44528198 2.87558770]
[141.66304016 13.42045498]
[128.59674072 20.95188904]
[114.06772614 24.99645805]
[114.37978363 39.99320984]
[114.69184113 54.98996353]
[126.48847961 64.25491333]
[141.13197327 61.00408936]
[155.77548218 57.75326157]
[167.57083130 47.20905685]
[181.67245483 52.00418854]
[193.46780396 41.45998001]
[207.56944275 46.25511551]
[222.21293640 43.00429153]
[236.85644531 39.75346375]
[251.49993896 36.50263977]
[253.17481995 21.45360374]
[259.64761353 7.76486301]
[270.21621704 -3.07872844]
[283.73422241 -9.90093899]
[298.73526001 -11.96174717]
[313.59219360 -9.03761101]
[326.69342041 -1.44571984]
[336.61779785 9.99041557]
[342.28884888 24.03028870]
[343.09136963 39.15095901]
[338.93835449 53.71224594]
[330.28027344 66.13465881]
[318.05627441 75.07069397]
[303.59234619 79.55105591]
[288.45742798 79.08972931]
[274.29324341 73.73676300]
[262.63619995 64.07280731]
[254.75076294 51.14614105]
[240.10726929 54.39696503]
[225.46376038 57.64779282]
[210.82026672 60.89861679]
[200.07231140 71.21030426]
[184.92327881 66.64768982]
[174.17533875 76.95938110]
[159.02630615 72.39676666]
[144.38281250 75.64759064]
[129.73930359 78.89841461]
[125.44940186 116.70295715]
[94.95964050 123.89122009]
[87.50473022 136.90753174]
[80.04981995 149.92384338]
[92.83246613 142.07502747]
[105.63811493 134.26377869]
[120.58666229 133.02246094]
[134.50531006 138.61451721]
[144.43984985 149.85307312]
[148.28169250 164.35273743]
[145.21542358 179.03598022]
[135.89183044 190.78633118]
[122.28984070 197.10978699]
[107.29658508 196.66423035]
[100.10520172 183.50048828]
[100.10520172 198.50048828]
[100.10520172 213.50048828]
[100.10520172 228.50048828]
[100.10520172 243.50048828]
[100.10520172 258.50048828]
[100.10520172 273.50048828]
[100.10520172 288.50048828]
[100.10520172 303.50048828]
[100.10520172 318.50048828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 45]
[15 44]
[16 43]
[17 42]
[46 130]
[47 129]
[48 128]
[51 60]
[52 59]
[53 58]
[61 89]
[62 88]
[63 87]
[90 126]
[91 125]
[92 124]
[94 122]
[96 120]
[97 119]
[98 118]
[99 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
