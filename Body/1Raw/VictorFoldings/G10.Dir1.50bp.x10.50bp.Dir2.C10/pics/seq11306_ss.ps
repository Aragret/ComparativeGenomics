%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCxxxxxxxxxxAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[21.31644249 194.00086975]
[13.86153126 207.01718140]
[6.40662098 220.03349304]
[-1.04828942 233.04978943]
[-8.50319958 246.06610107]
[-15.95810986 259.08242798]
[-23.14061928 272.25100708]
[-30.04761696 285.56616211]
[-36.95461655 298.88131714]
[-35.67549133 315.23049927]
[-49.34605408 324.28851318]
[-63.90320206 316.73724365]
[-64.37178802 300.34481812]
[-50.26977158 291.97430420]
[-43.36277390 278.65914917]
[-36.45577621 265.34399414]
[-37.04217529 260.54486084]
[-34.57456207 255.33505249]
[-28.97441864 251.62750244]
[-21.51950836 238.61119080]
[-14.06459904 225.59487915]
[-6.60968876 212.57858276]
[0.84522176 199.56227112]
[8.30013180 186.54595947]
[-1.32839417 175.04415894]
[-15.45319748 180.09291077]
[-29.57800102 185.14166260]
[-39.77333832 197.98640442]
[-55.95294571 195.31202698]
[-61.47263336 179.86970520]
[-50.65421677 167.54518127]
[-34.62675476 171.01686096]
[-20.50195312 165.96810913]
[-6.37715054 160.91935730]
[-10.32080841 153.21569824]
[-13.70805645 145.25942993]
[-16.52291679 137.09063721]
[-18.75229645 128.75039673]
[-20.38604355 120.28055573]
[-21.41699219 111.72358704]
[-21.84099388 103.12229156]
[-21.65693665 94.51963043]
[-20.86674309 85.95849609]
[-19.47535515 77.48152161]
[-17.49070168 69.13081360]
[-14.92366409 60.94782257]
[-11.78800488 52.97306442]
[-8.10030174 45.24595261]
[-3.87985897 37.80461502]
[0.85139489 30.68567467]
[6.06901979 23.92409325]
[11.74619102 17.55299377]
[17.85383606 11.60349178]
[8.34547710 0.00215080]
[-1.16288161 -11.59919071]
[-10.67123985 -23.20053101]
[-26.42989922 -26.20789146]
[-33.77621841 -40.47011948]
[-27.07472801 -55.04645538]
[-11.46623993 -58.75518417]
[1.07575011 -48.75128174]
[0.93010116 -32.70888901]
[10.43845940 -21.10754967]
[19.94681740 -9.50620747]
[29.45517731 2.09513354]
[35.12308121 -1.74930096]
[40.99995422 -5.26599503]
[47.06687546 -8.44362164]
[53.30429077 -11.27194595]
[59.69211960 -13.74185658]
[66.20978546 -15.84539795]
[72.83628845 -17.57579422]
[79.55028534 -18.92747307]
[86.33015442 -19.89608002]
[93.15405273 -20.47849655]
[100.00000000 -20.67284203]
[106.84594727 -20.47849655]
[113.66984558 -19.89608002]
[120.44971466 -18.92747307]
[127.16371155 -17.57579422]
[133.79022217 -15.84539795]
[140.30787659 -13.74185658]
[146.69570923 -11.27194595]
[152.93312073 -8.44362164]
[159.00004578 -5.26599503]
[164.87692261 -1.74930096]
[170.54483032 2.09513354]
[180.05317688 -9.50620747]
[189.56153870 -21.10754967]
[189.41589355 -37.14994049]
[201.95788574 -47.15384293]
[217.56637573 -43.44511414]
[224.26785278 -28.86877823]
[216.92153931 -14.60654926]
[201.16288757 -11.59919071]
[191.65452576 0.00215080]
[182.14616394 11.60349178]
[190.64982605 20.34734535]
[198.22738647 29.90494347]
[204.80143738 40.17864227]
[210.30482483 51.06348801]
[214.68130493 62.44827652]
[217.88619995 74.21669769]
[219.88674927 86.24852753]
[234.86645508 85.46868134]
[249.84617615 84.68884277]
[264.82589722 83.90899658]
[279.80560303 83.12915039]
[289.07577515 70.53558350]
[304.28424072 66.89736176]
[318.25003052 73.93233490]
[324.37890625 88.31881714]
[319.77703857 103.26393890]
[306.61724854 111.71107483]
[291.11322021 109.67174530]
[280.58544922 98.10886383]
[265.60574341 98.88871002]
[250.62602234 99.66855621]
[235.64630127 100.44840240]
[220.66659546 101.22824097]
[220.33943176 109.73577881]
[219.41291809 118.20326996]
[217.89105225 126.58853912]
[215.78080750 134.84974670]
[213.09213257 142.94564819]
[209.83784485 150.83576965]
[206.03355408 158.48063660]
[201.69769287 165.84193420]
[196.85130310 172.88275146]
[191.51800537 179.56771851]
[185.72386169 185.86317444]
[179.49729919 191.73742676]
[172.86886597 197.16079712]
[165.87115479 202.10586548]
[158.53866577 206.54751587]
[150.90756226 210.46315002]
[143.01553345 213.83274841]
[134.90161133 216.63902283]
[126.60598755 218.86741638]
[118.16977692 220.50630188]
[109.63483429 221.54692078]
[101.04355621 221.98350525]
[92.43866730 221.81329346]
[83.86297607 221.03652954]
[75.35921478 219.65650940]
[66.96978760 217.67948914]
[58.73657608 215.11474609]
[50.70071411 211.97445679]
[42.90240097 208.27369690]
[35.38069534 204.03034973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 16]
[8 15]
[9 14]
[25 34]
[26 33]
[27 32]
[53 65]
[54 64]
[55 63]
[56 62]
[87 97]
[88 96]
[89 95]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
