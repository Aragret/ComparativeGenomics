%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGxxxxxxxxxxUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.95788574]
[92.50000000 239.95788574]
[92.50000000 224.95788574]
[92.50000000 209.95788574]
[92.50000000 194.95788574]
[92.50000000 179.95788574]
[92.50000000 164.95788574]
[92.50000000 149.95788574]
[92.50000000 134.95788574]
[92.50000000 119.95789337]
[81.84046936 109.40447998]
[66.84122467 109.55455780]
[51.84197235 109.70462799]
[36.84272385 109.85470581]
[21.86148834 110.60476685]
[6.92225933 111.95362854]
[-8.01697063 113.30249023]
[-22.95619965 114.65135193]
[-36.01064301 133.10607910]
[-62.43421173 131.18368530]
[-76.41810608 136.61053467]
[-90.40200043 142.03738403]
[-104.38588715 147.46424866]
[-105.08496094 162.67710876]
[-111.91702271 176.28750610]
[-123.69838715 185.93734741]
[-138.38784790 189.95472717]
[-153.44038391 187.64364624]
[-166.24804688 179.40447998]
[-174.59182739 166.66473389]
[-177.02610779 151.63162231]
[-173.12915039 136.90974426]
[-163.57611084 125.04975891]
[-150.02214050 118.10646057]
[-134.81550598 117.28282166]
[-120.59087372 122.72154999]
[-109.81274414 133.48034668]
[-95.82884979 128.05349731]
[-81.84496307 122.62664032]
[-67.86106873 117.19978333]
[-68.31123352 102.20654297]
[-82.59551239 97.62841797]
[-96.87979889 93.05029297]
[-111.16408539 88.47216797]
[-126.02977753 94.50463867]
[-139.94358826 86.51806641]
[-142.23204041 70.63906860]
[-131.13961792 59.04865265]
[-115.17548370 60.63798904]
[-106.58595276 74.18788147]
[-92.30167389 78.76600647]
[-78.01738739 83.34413147]
[-63.73310471 87.92225647]
[-47.05327606 82.63276672]
[-32.11640549 87.88544464]
[-24.30505943 99.71212006]
[-9.36583042 98.36325836]
[5.57339907 97.01440430]
[20.51262856 95.66554260]
[22.42207909 93.54098511]
[25.31153107 92.06693268]
[28.92925644 91.62940979]
[32.88546371 92.51311493]
[36.69264984 94.85545349]
[51.69189835 94.70538330]
[66.69114685 94.55530548]
[81.69039917 94.40523529]
[85.70495605 88.41773987]
[91.45313263 84.55596161]
[97.95850372 83.21948242]
[104.20566559 84.39973450]
[109.29807281 87.71097565]
[121.59013367 79.11415863]
[114.31792450 65.97898865]
[108.45858002 52.15561295]
[104.07628632 37.79548645]
[101.21907043 23.05594635]
[99.91822815 8.09848976]
[100.18801880 -6.91300297]
[102.02548218 -21.81405830]
[105.41048431 -36.44141006]
[110.30594635 -50.63479614]
[116.65822601 -64.23870087]
[124.39772034 -77.10408020]
[133.43963623 -89.08996582]
[143.68490601 -100.06504059]
[155.02127075 -109.90904999]
[167.32452393 -118.51413727]
[180.45986938 -125.78602600]
[194.28338623 -131.64503479]
[208.64363098 -136.02697754]
[223.38322449 -138.88385010]
[238.34071350 -140.18432617]
[253.35220337 -139.91416931]
[268.25320435 -138.07633972]
[282.88049316 -134.69097900]
[297.07376099 -129.79518127]
[310.67752075 -123.44256592]
[323.54269409 -115.70275879]
[335.52835083 -106.66055298]
[346.50317383 -96.41501617]
[356.34692383 -85.07841492]
[364.95172119 -72.77494812]
[372.22329712 -59.63942719]
[378.08197021 -45.81576538]
[382.46356201 -31.45542526]
[385.32006836 -16.71574783]
[386.62017822 -1.75822735]
[386.34963989 13.25325298]
[384.51147461 28.15421867]
[381.12573242 42.78140640]
[376.22958374 56.97455215]
[369.87664795 70.57814789]
[362.13653564 83.44315338]
[353.09405518 95.42859650]
[342.84823608 106.40317535]
[331.51138306 116.24663544]
[319.20773315 124.85112762]
[306.07202148 132.12237549]
[292.24822998 137.98071289]
[277.88778687 142.36196899]
[263.14804077 145.21810913]
[248.19047546 146.51785278]
[233.17900085 146.24697876]
[218.27807617 144.40843201]
[203.65097046 141.02235413]
[189.45794678 136.12585449]
[175.85450745 129.77259827]
[162.98968506 122.03215790]
[151.00445557 112.98937225]
[140.03013611 102.74330139]
[130.18695068 91.40621948]
[117.89488983 100.00303650]
[130.42880249 91.76282501]
[145.19558716 89.12802124]
[159.80587769 92.52495575]
[171.89566040 101.40397644]
[179.50874329 114.32841492]
[181.41325378 129.20701599]
[177.30107117 143.63233948]
[167.83752441 155.27027893]
[154.55390930 162.23774719]
[139.59957886 163.40736389]
[125.39424133 158.58987427]
[114.23638153 148.56478882]
[107.93142700 134.95422363]
[107.50000000 119.95789337]
[107.50000000 134.95788574]
[107.50000000 149.95788574]
[107.50000000 164.95788574]
[107.50000000 179.95788574]
[107.50000000 194.95788574]
[107.50000000 209.95788574]
[107.50000000 224.95788574]
[107.50000000 239.95788574]
[107.50000000 254.95788574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 67]
[12 66]
[13 65]
[14 64]
[15 59]
[16 58]
[17 57]
[18 56]
[20 40]
[21 39]
[22 38]
[23 37]
[41 53]
[42 52]
[43 51]
[44 50]
[72 133]
[73 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
