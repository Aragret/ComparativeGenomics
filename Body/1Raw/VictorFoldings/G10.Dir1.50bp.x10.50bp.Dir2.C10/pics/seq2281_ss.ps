%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUxxxxxxxxxxGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.71897888 278.42547607]
[85.71897888 263.42547607]
[85.71897888 248.42547607]
[85.71897888 233.42547607]
[85.71897888 218.42547607]
[85.71897888 203.42547607]
[85.71897888 188.42547607]
[85.71897888 173.42547607]
[85.71897888 158.42547607]
[85.71897888 143.42547607]
[72.43164062 136.46511841]
[60.10035324 145.00558472]
[47.76906967 153.54603577]
[35.43778610 162.08650208]
[23.10650253 170.62695312]
[10.77521801 179.16741943]
[-1.55606568 187.70787048]
[-13.88734913 196.24833679]
[-26.21863365 204.78878784]
[-38.54991913 213.32925415]
[-41.12720871 228.92198181]
[-54.02382278 238.05723572]
[-69.58843231 235.31523132]
[-78.58682251 222.32275391]
[-75.68041229 206.78800964]
[-62.59352493 197.92747498]
[-47.09037781 200.99797058]
[-34.75909424 192.45750427]
[-22.42780876 183.91705322]
[-10.09652424 175.37658691]
[2.23475933 166.83613586]
[14.56604290 158.29566956]
[26.89732742 149.75521851]
[39.22861099 141.21475220]
[51.55989456 132.67430115]
[63.89117813 124.13384247]
[57.89384079 100.26424408]
[65.81170654 77.76542664]
[84.22570801 63.83214951]
[106.51286316 62.42662811]
[111.93148804 48.43954468]
[117.35011292 34.45246124]
[103.77931213 28.04726982]
[90.70002747 20.69026375]
[78.17890930 12.41893101]
[66.27976990 3.27542329]
[55.06324005 -6.69366693]
[44.58648300 -17.43753815]
[34.90287781 -28.90144348]
[26.06177902 -41.02696228]
[18.10823441 -53.75230789]
[11.08277512 -67.01262665]
[5.02120018 -80.74035645]
[-0.04560000 -94.86553955]
[-4.09180641 -109.31620026]
[-7.09680080 -124.01869202]
[-9.04526997 -138.89810181]
[-9.92728424 -153.87860107]
[-9.73834896 -168.88385010]
[-8.47942829 -183.83738708]
[-6.15693665 -198.66302490]
[-2.78270912 -213.28518677]
[1.62606001 -227.62937927]
[7.04690456 -241.62251282]
[13.45219994 -255.19326782]
[20.80930710 -268.27249146]
[29.08073616 -280.79354858]
[38.22433472 -292.69262695]
[48.19351196 -303.90908813]
[58.93746185 -314.38574219]
[70.40144348 -324.06927490]
[82.52703094 -332.91027832]
[95.25243378 -340.86370850]
[108.51280975 -347.88906860]
[122.24058533 -353.95056152]
[136.36581421 -359.01724243]
[150.81649780 -363.06332397]
[165.51901245 -366.06820679]
[180.39843750 -368.01657104]
[195.37893677 -368.89846802]
[210.38418579 -368.70941162]
[225.33772278 -367.45037842]
[240.16333008 -365.12777710]
[254.78547668 -361.75344849]
[269.12963867 -357.34457397]
[283.12274170 -351.92361450]
[296.69345093 -345.51821899]
[309.77261353 -338.16101074]
[322.29360962 -329.88949585]
[334.19259644 -320.74578857]
[345.40896606 -310.77651978]
[355.88555908 -300.03250122]
[365.56900024 -288.56845093]
[374.40991211 -276.44277954]
[382.36325073 -263.71731567]
[389.38851929 -250.45689392]
[395.44989014 -236.72906494]
[400.51644897 -222.60380554]
[404.56243896 -208.15309143]
[407.56723022 -193.45054626]
[409.51547241 -178.57112122]
[410.39724731 -163.59060669]
[410.20806885 -148.58535767]
[408.94891357 -133.63183594]
[406.62622070 -118.80623627]
[403.25177002 -104.18412018]
[398.84277344 -89.83998871]
[393.42172241 -75.84693909]
[387.01620483 -62.27628326]
[379.65890503 -49.19716644]
[371.38726807 -36.67624283]
[362.24349976 -24.77731323]
[352.27413940 -13.56101418]
[341.53002930 -3.08450198]
[330.06591797 6.59883690]
[317.94018555 15.43965816]
[305.21466064 23.39291000]
[291.95416260 30.41806602]
[278.22631836 36.47932434]
[264.10101318 41.54579926]
[249.65025330 45.59167480]
[234.94769287 48.59632874]
[220.06823730 50.54445648]
[205.08772278 51.42612839]
[190.08247375 51.23684692]
[175.12896729 49.97758102]
[160.30339050 47.65475082]
[145.68128967 44.28018570]
[131.33720398 39.87108612]
[125.91857147 53.85816956]
[120.49994659 67.84525299]
[127.14798737 72.59510803]
[132.70027161 78.71646118]
[136.87475586 85.95740509]
[139.44712830 94.00830841]
[140.26258850 102.51496887]
[139.24453735 111.09421539]
[136.39988708 119.35118103]
[131.82049561 126.89740753]
[125.68066406 133.36917114]
[118.23079681 138.44490051]
[109.78725433 141.86102295]
[100.71897888 143.42547607]
[100.71897888 158.42547607]
[100.71897888 173.42547607]
[100.71897888 188.42547607]
[100.71897888 203.42547607]
[100.71897888 218.42547607]
[100.71897888 233.42547607]
[100.71897888 248.42547607]
[100.71897888 263.42547607]
[100.71897888 278.42547607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[40 131]
[41 130]
[42 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
