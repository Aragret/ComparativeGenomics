%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACxxxxxxxxxxAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.26995850 118.37478638]
[71.84251404 125.06085968]
[58.41506195 131.74693298]
[44.98761368 138.43301392]
[31.56016350 145.11907959]
[18.13271523 151.80516052]
[6.64204788 161.44697571]
[-2.27410316 173.50939941]
[-11.19025421 185.57183838]
[-20.10640526 197.63426208]
[-29.02255630 209.69670105]
[-37.93870544 221.75912476]
[-35.34709549 237.34948730]
[-44.60643005 250.15730286]
[-60.22330856 252.58393860]
[-72.93251801 243.18971252]
[-75.19390869 227.54804993]
[-65.66584015 214.93887329]
[-50.00113678 212.84298706]
[-41.08498764 200.78054810]
[-32.16883469 188.71812439]
[-23.25268555 176.65568542]
[-14.33653450 164.59326172]
[-5.42038345 152.53082275]
[-19.27557945 158.27830505]
[-34.11478424 160.46875000]
[-49.03967667 158.96955872]
[-63.14675522 153.87149048]
[-75.58202362 145.48315430]
[-85.59268951 134.31236267]
[-92.57273865 121.03535461]
[-96.09962463 106.45587921]
[-95.95983887 91.45653534]
[-92.16184998 76.94532013]
[-84.93556213 63.80070877]
[-74.71844482 52.81842422]
[-62.12900925 44.66330719]
[-47.92936707 39.82903290]
[-32.97912598 38.60825729]
[-18.18332291 41.07488251]
[-4.43764925 47.07958221]
[7.42577839 56.25885773]
[16.68878555 68.05702209]
[22.79062080 81.75985718]
[25.36190033 96.53782654]
[24.24696350 111.49633789]
[19.51330948 125.72983551]
[11.44663906 138.37771606]
[24.87408829 131.69163513]
[38.30153656 125.00556183]
[51.72898865 118.31948853]
[65.15643311 111.63340759]
[78.58388519 104.94733429]
[81.49135590 90.23181152]
[71.61565399 78.94153595]
[61.73994446 67.65125275]
[45.89290619 65.15107727]
[38.09274673 51.13190842]
[44.32308578 36.34805298]
[59.80453873 32.14041519]
[72.66105652 41.73674011]
[73.03022766 57.77554703]
[82.90592957 69.06582642]
[92.78163910 80.35610962]
[100.28124237 80.43310547]
[97.02734375 65.79028320]
[93.77344513 51.14746857]
[90.51954651 36.50465012]
[87.26564789 21.86182976]
[84.01174927 7.21901083]
[80.75785065 -7.42380810]
[71.95641327 -19.57019424]
[68.11414337 -34.06974411]
[69.74557495 -48.98075867]
[76.63224030 -62.30644226]
[87.85191345 -72.26229095]
[101.90212250 -77.51507568]
[116.90133667 -77.36136627]
[130.84094238 -71.82174683]
[141.85423279 -61.63806152]
[148.46636963 -48.17404556]
[149.79188538 -33.23272705]
[145.65327454 -18.81496429]
[136.60359192 -6.85043955]
[133.04974365 7.72248411]
[129.49588013 22.29540825]
[125.94202423 36.86833191]
[122.38816833 51.44125366]
[118.83431244 66.01417542]
[115.28044891 80.58710480]
[122.78005981 80.66410065]
[132.88549805 69.57896423]
[135.86334229 53.45245361]
[151.40663147 48.22383881]
[163.52574158 59.27187347]
[159.75358582 75.23128510]
[143.97062683 79.68440247]
[133.86518860 90.76953125]
[136.35784912 97.84319305]
[150.50517273 92.85787201]
[164.65248108 87.87255096]
[178.79980469 82.88722992]
[192.94711304 77.90190125]
[207.09443665 72.91658020]
[219.00880432 63.80351639]
[231.35755920 72.31867981]
[227.07511902 86.69437408]
[212.07975769 87.06389618]
[197.93243408 92.04922485]
[183.78512573 97.03454590]
[169.63780212 102.01986694]
[155.49049377 107.00518799]
[141.34317017 111.99050903]
[143.83583069 119.06417084]
[158.65830994 121.36504364]
[173.48080444 123.66591644]
[188.56875610 117.24053955]
[201.51290894 127.30935669]
[198.99742126 143.51441956]
[183.61000061 149.18536377]
[171.17993164 138.48840332]
[156.35743713 136.18753052]
[141.53495789 133.88664246]
[153.43981934 143.01213074]
[165.34466553 152.13761902]
[175.45350647 163.21965027]
[183.35218811 175.97154236]
[188.77134705 189.95841980]
[191.52615356 204.70327759]
[191.52267456 219.70327759]
[188.76103210 234.44686890]
[183.33540344 248.43122864]
[175.43080139 261.17947388]
[165.31683350 272.25680542]
[153.33837891 281.28549194]
[139.90399170 287.95758057]
[125.47178650 292.04556274]
[110.53397369 293.41003418]
[95.59997559 292.00442505]
[81.17909241 287.87667847]
[67.76313019 281.16760254]
[55.80960464 272.10595703]
[45.72618103 261.00082397]
[37.85673523 248.23085022]
[32.46964645 234.23159790]
[29.74862289 219.48045349]
[29.78646851 204.48049927]
[32.58189011 189.74328613]
[38.03955460 175.77139282]
[45.97333527 163.04130554]
[56.11266708 151.98716736]
[68.11351776 142.98487854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[54 64]
[55 63]
[56 62]
[91 98]
[92 97]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
