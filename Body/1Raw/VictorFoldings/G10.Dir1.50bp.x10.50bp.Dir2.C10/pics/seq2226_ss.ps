%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGAxxxxxxxxxxUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.26084137 239.94216919]
[114.95286560 224.94534302]
[114.64488983 209.94850159]
[114.33690643 194.95166016]
[114.02893066 179.95481873]
[113.72095490 164.95797729]
[113.41297913 149.96115112]
[113.10499573 134.96430969]
[112.79701996 119.96746826]
[98.41254425 115.71462250]
[89.99913025 128.13293457]
[81.58572388 140.55125427]
[80.94851685 156.93801880]
[66.31445312 164.33911133]
[52.73780060 155.14093018]
[54.18505478 138.80577087]
[69.16740417 132.13784790]
[77.58081818 119.71952820]
[85.99422455 107.30121613]
[76.71083832 95.51907349]
[62.66886520 100.79381561]
[48.62688828 106.06855774]
[34.58491135 111.34329987]
[20.54293442 116.61804199]
[18.11050987 131.78309631]
[8.40899372 143.69007874]
[-5.95195293 149.13606262]
[-21.10930824 146.65611267]
[-32.98582077 136.91732788]
[-38.38676453 122.53937531]
[-35.85931778 107.38986969]
[-26.08334923 95.54394531]
[-11.68854332 90.18809509]
[3.45296788 92.76301575]
[15.26819324 102.57606506]
[29.31016922 97.30132294]
[43.35214615 92.02658081]
[57.39412308 86.75183868]
[71.43609619 81.47709656]
[81.76699829 70.60178375]
[86.31429291 56.30765533]
[90.86157990 42.01352692]
[95.40887451 27.71939468]
[99.95616150 13.42526531]
[104.50345612 -0.86886448]
[109.05074310 -15.16299438]
[113.59803009 -29.45712471]
[110.69055939 -44.17264557]
[101.04874420 -55.66331482]
[91.40692902 -67.15398407]
[81.76512146 -78.64464569]
[72.12330627 -90.13531494]
[62.48149109 -101.62597656]
[52.83967590 -113.11664581]
[43.19786072 -124.60731506]
[33.55604553 -136.09797668]
[17.79203415 -137.22555542]
[7.50580072 -149.22427368]
[8.79998684 -164.97547913]
[20.90677452 -175.13427734]
[36.64342117 -173.67362976]
[46.67365265 -161.46011353]
[45.04671478 -145.73979187]
[54.68852615 -134.24913025]
[64.33034515 -122.75846100]
[73.97215271 -111.26779175]
[83.61396790 -99.77713013]
[93.25578308 -88.28646088]
[102.89759827 -76.79579163]
[112.53941345 -65.30513000]
[122.18122864 -53.81446075]
[129.63345337 -54.65966034]
[126.68088531 -69.36620331]
[123.72830963 -84.07273865]
[114.39953613 -95.81896973]
[117.09107971 -110.57551575]
[129.96612549 -118.27183533]
[144.23814392 -113.65561676]
[150.16726685 -99.87716675]
[143.70597839 -86.33852386]
[144.12193298 -71.34429169]
[144.53790283 -56.35005569]
[151.99012756 -57.19525528]
[158.81369019 -70.55335236]
[165.63726807 -83.91145325]
[162.08320618 -99.55588531]
[172.21073914 -111.99825287]
[188.25091553 -111.69384003]
[197.89906311 -98.87616730]
[193.75395203 -83.37785339]
[178.99537659 -77.08788300]
[172.17179871 -63.72977829]
[165.34822083 -50.37168121]
[175.10749817 -38.98060608]
[189.35418701 -43.67440796]
[192.58552551 -57.10985565]
[201.97093201 -67.10392761]
[214.96984863 -71.10813141]
[228.14031982 -68.17455292]
[238.05030823 -59.17765045]
[252.39036560 -63.57794952]
[266.73043823 -67.97824860]
[281.07049561 -72.37854767]
[295.41055298 -76.77885437]
[309.75061035 -81.17915344]
[320.52029419 -93.54627991]
[336.56134033 -90.13788605]
[341.37207031 -74.46023560]
[330.00366211 -62.64114761]
[314.15090942 -66.83908844]
[299.81085205 -62.43878937]
[285.47079468 -58.03849030]
[271.13073730 -53.63818741]
[256.79064941 -49.23788834]
[242.45060730 -44.83758926]
[237.64314270 -29.17111588]
[224.32484436 -19.34080696]
[207.60575867 -19.36356735]
[194.04798889 -29.42771530]
[179.80130005 -24.73391533]
[127.89216614 -24.90983391]
[123.34487152 -10.61570454]
[118.79758453 3.67842555]
[114.25028992 17.97255516]
[109.70300293 32.26668549]
[105.15571594 46.56081390]
[100.60842133 60.85494614]
[96.06113434 75.14907837]
[106.90472412 64.78488159]
[116.93285370 53.62976456]
[130.07550049 46.39989853]
[144.86605835 43.90206528]
[159.65406799 46.41500092]
[172.78932190 53.65828705]
[182.80604553 64.82364655]
[188.58648682 78.66512299]
[189.48558044 93.63815308]
[185.40303040 108.07188416]
[176.79438782 120.35566711]
[164.62028503 129.11872864]
[150.23925781 133.38322449]
[135.25399780 132.67280579]
[127.79386139 119.65949249]
[128.10183716 134.65632629]
[128.40982056 149.65316772]
[128.71778870 164.65000916]
[129.02577209 179.64685059]
[129.33375549 194.64367676]
[129.64172363 209.64051819]
[129.94970703 224.63735962]
[130.25767517 239.63420105]
[132.84346008 258.84262085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 19]
[11 18]
[12 17]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[40 128]
[41 127]
[42 126]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 71]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[83 93]
[84 92]
[85 91]
[94 120]
[95 119]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
