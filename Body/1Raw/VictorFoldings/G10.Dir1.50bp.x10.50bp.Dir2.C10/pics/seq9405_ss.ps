%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUxxxxxxxxxxACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-21.72131920 253.90858459]
[-31.46897125 265.30960083]
[-41.21662521 276.71063232]
[-44.30369949 292.22772217]
[-58.45531082 296.87329102]
[-68.20296478 308.27432251]
[-77.95061493 319.67532349]
[-87.69826508 331.07635498]
[-97.44591522 342.47738647]
[-90.22596741 355.82791138]
[-88.32021332 370.88555908]
[-91.98638916 385.61386108]
[-100.72868347 398.02099609]
[-113.36476898 406.42895508]
[-128.18571472 409.70065308]
[-143.18711853 407.39361572]
[-156.34014893 399.81982422]
[-165.86598206 388.00360107]
[-170.47631836 373.54299927]
[-169.54765320 358.39367676]
[-163.20558167 344.60446167]
[-152.30780029 334.04022217]
[-138.32817078 328.12969971]
[-123.15730286 327.67224121]
[-108.84693909 332.72970581]
[-99.09928894 321.32870483]
[-89.35163879 309.92767334]
[-79.60398102 298.52664185]
[-69.85633087 287.12564087]
[-67.46646881 272.42401123]
[-52.61764526 266.96298218]
[-42.86999130 255.56195068]
[-33.12234116 244.16093445]
[-41.42148590 236.02902222]
[-49.22476959 227.42016602]
[-56.50484085 218.36454773]
[-63.23616791 208.89392090]
[-69.39515686 199.04147339]
[-74.96019745 188.84176636]
[-79.91179657 178.33056641]
[-84.23257446 167.54472351]
[-87.90740204 156.52204895]
[-90.92337036 145.30119324]
[-93.26992798 133.92149353]
[-94.93882751 122.42286682]
[-95.92423248 110.84561920]
[-96.22267914 99.23034668]
[-95.83312225 87.61776733]
[-94.75693512 76.04860687]
[-92.99787903 64.56342316]
[-90.56212616 53.20248795]
[-87.45822144 42.00563812]
[-83.69704437 31.01212883]
[-79.29178619 20.26050758]
[-74.25788879 9.78847122]
[-68.61299896 -0.36726290]
[-62.37691879 -10.17108631]
[-55.57150269 -19.58862495]
[-48.22061920 -28.58685684]
[-40.35004044 -37.13423538]
[-31.98736000 -45.20078659]
[-23.16190147 -52.75823212]
[-13.90460968 -59.78007126]
[-4.24794197 -66.24168396]
[5.77424335 -72.12041473]
[16.12680626 -77.39565277]
[26.77344704 -82.04890442]
[37.67683792 -86.06385040]
[48.79874802 -89.42640686]
[60.10018158 -92.12479401]
[71.54151154 -94.14954376]
[83.08262634 -95.49356842]
[94.68305206 -96.15213776]
[106.30213165 -96.12295532]
[117.89910126 -95.40612793]
[129.43331909 -94.00415039]
[140.86433411 -91.92195892]
[152.15206909 -89.16683960]
[163.25695801 -85.74845886]
[174.14004517 -81.67880249]
[184.76316833 -76.97212982]
[195.08911133 -71.64495850]
[205.08163452 -65.71596527]
[213.59272766 -78.06753540]
[222.10382080 -90.41910553]
[216.05479431 -104.61110687]
[218.66131592 -119.81668091]
[229.09165955 -131.18379211]
[244.01756287 -135.08523560]
[258.67617798 -130.27607727]
[268.39004517 -118.29090118]
[270.05947876 -102.95413208]
[263.15176392 -89.15967560]
[249.87113953 -81.30929565]
[234.45539856 -81.90802002]
[225.94430542 -69.55644226]
[217.43321228 -57.20487213]
[240.33729553 -37.14728165]
[259.86303711 -13.78814983]
[275.54040527 12.31019974]
[286.99197388 40.51950455]
[293.94210815 70.16067505]
[308.84402466 68.44799042]
[323.74594116 66.73529816]
[338.64782715 65.02260590]
[353.54974365 63.30991745]
[361.05987549 49.73135376]
[375.13119507 43.19092941]
[390.35302734 46.20357513]
[400.87222290 57.61086273]
[402.64395142 73.02645874]
[394.98693848 86.52275085]
[380.84548950 92.91014099]
[365.65725708 89.73255157]
[355.26242065 78.21182251]
[340.36050415 79.92450714]
[325.45861816 81.63719940]
[310.55670166 83.34989166]
[295.65481567 85.06257629]
[296.22064209 98.82033539]
[295.82028198 112.58390045]
[294.45565796 126.28549957]
[292.13354492 139.85766602]
[288.86535645 153.23358154]
[284.66714478 166.34736633]
[279.55966187 179.13444519]
[273.56799316 191.53186035]
[266.72167969 203.47857666]
[259.05441284 214.91574097]
[250.60392761 225.78706360]
[241.41188049 236.03900146]
[231.52351379 245.62107849]
[220.98750305 254.48609924]
[209.85574341 262.59042358]
[198.18305969 269.89413452]
[186.02690125 276.36129761]
[173.44714355 281.96002197]
[160.50573730 286.66275024]
[147.26638794 290.44638062]
[133.79429626 293.29220581]
[120.15579987 295.18624878]
[106.41805267 296.11920166]
[92.64870453 296.08642578]
[78.91555786 295.08813477]
[65.28622437 293.12918091]
[51.82783127 290.21926880]
[38.60663986 286.37271118]
[25.68775177 281.60842896]
[13.13478279 275.94989014]
[1.00954425 269.42495728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[83 97]
[84 96]
[85 95]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
