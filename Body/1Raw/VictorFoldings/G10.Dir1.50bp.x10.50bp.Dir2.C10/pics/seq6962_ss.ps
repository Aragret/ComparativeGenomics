%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGxxxxxxxxxxAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.09482574 297.56030273]
[98.09482574 282.56030273]
[98.09482574 267.56030273]
[98.09482574 252.56030273]
[98.09482574 237.56030273]
[98.09482574 222.56030273]
[98.09482574 207.56030273]
[98.09482574 192.56030273]
[98.09482574 177.56030273]
[98.09482574 162.56030273]
[84.46784973 156.29089355]
[73.07677460 166.05017090]
[61.68569946 175.80944824]
[50.29462814 185.56872559]
[48.96717072 189.85095215]
[46.56184387 193.12783813]
[43.53969955 195.18049622]
[40.38524246 195.96704102]
[37.54505920 195.61436462]
[25.39172554 204.40620422]
[21.44003487 219.95497131]
[6.76096201 226.42831421]
[-7.38496637 218.86047363]
[-10.14620399 203.05683899]
[0.59543377 191.14059448]
[16.59988213 192.25288391]
[28.75321579 183.46102905]
[40.53535461 174.17765808]
[51.92642593 164.41838074]
[63.31750107 154.65910339]
[74.70857239 144.89982605]
[57.30142593 122.53317261]
[55.14288330 96.10354614]
[66.97121429 74.42570496]
[87.16551971 63.68204880]
[85.01694489 48.83672333]
[82.86836243 33.99140167]
[80.71977997 19.14607811]
[70.84772491 10.78270149]
[69.39266968 -1.66937363]
[76.59467316 -11.43632507]
[74.75135040 -26.32263184]
[72.90802765 -41.20893860]
[71.06470490 -56.09524918]
[67.83772278 -60.35457230]
[66.72241211 -64.96561432]
[67.49119568 -69.04955292]
[69.59543610 -71.95117188]
[68.67201996 -86.92272186]
[67.74860382 -101.89427185]
[66.82519531 -116.86582184]
[51.83750916 -117.86461639]
[37.10060501 -120.77184296]
[22.85647583 -125.53977203]
[9.33902454 -132.09010315]
[-3.22978067 -140.31527710]
[-14.64354897 -150.08023071]
[-24.71485519 -161.22460938]
[-33.27832031 -173.56539917]
[-40.19332504 -186.89997864]
[-45.34631729 -201.00938416]
[-48.65267944 -215.66189575]
[-50.05812073 -230.61692810]
[-49.53956223 -245.62890625]
[-47.10551453 -260.45132446]
[-42.79595184 -274.84075928]
[-36.68164062 -288.56094360]
[-28.86298370 -301.38656616]
[-19.46836662 -313.10705566]
[-8.65206146 -323.52990723]
[3.40831923 -332.48397827]
[16.51473427 -339.82226562]
[30.45196342 -345.42422485]
[44.99114227 -349.19787598]
[59.89353180 -351.08126831]
[74.91441345 -351.04348755]
[89.80713654 -349.08511353]
[104.32714081 -345.23834229]
[118.23600006 -339.56631470]
[131.30532837 -332.16217041]
[143.32049561 -323.14752197]
[154.08421326 -312.67037964]
[163.41972351 -300.90277100]
[171.17375183 -288.03796387]
[177.21893311 -274.28717041]
[181.45603943 -259.87622070]
[183.81546021 -245.04176331]
[184.25846863 -230.02735901]
[182.77778625 -215.07958984]
[179.39773560 -200.44389343]
[174.17381287 -186.36061096]
[167.19178772 -173.06100464]
[158.56632996 -160.76344299]
[148.43907166 -149.66989136]
[136.97631836 -139.96250916]
[124.36627197 -131.80068970]
[110.81603241 -125.31845856]
[96.54808807 -120.62226868]
[81.79674530 -117.78923798]
[82.72015381 -102.81768799]
[83.64356995 -87.84613800]
[84.56698608 -72.87458801]
[85.95101166 -57.93857193]
[87.79433441 -43.05226517]
[89.63765717 -28.16595650]
[91.48097992 -13.27964973]
[102.80109406 0.09568983]
[95.56510925 16.99749947]
[97.71368408 31.84282303]
[99.86226654 46.68814468]
[102.01084137 61.53346634]
[116.23477936 62.69116592]
[129.79235840 69.19185638]
[140.66123962 80.66072845]
[147.02162170 95.95805359]
[147.54310608 113.28376770]
[141.61999512 130.38793945]
[155.96005249 134.78823853]
[170.30010986 139.18853760]
[185.08970642 132.97184753]
[199.10168457 140.78492737]
[201.58723450 156.63426208]
[190.63967896 168.36160278]
[174.65702820 166.97073364]
[165.89981079 153.52861023]
[151.55975342 149.12831116]
[137.21969604 144.72799683]
[131.18847656 149.18608093]
[141.66345215 159.92269897]
[152.13841248 170.65931702]
[162.61338806 181.39593506]
[173.08836365 192.13255310]
[185.30718994 200.83314514]
[188.25035095 215.54156494]
[180.32028198 228.27395630]
[165.82147217 232.11906433]
[152.62403870 224.98971558]
[147.89157104 210.75718689]
[140.70019531 197.59344482]
[133.50880432 184.42970276]
[126.31742859 171.26597595]
[119.12604523 158.10223389]
[113.09482574 162.56030273]
[113.09482574 177.56030273]
[113.09482574 192.56030273]
[113.09482574 207.56030273]
[113.09482574 222.56030273]
[113.09482574 237.56030273]
[113.09482574 252.56030273]
[113.09482574 267.56030273]
[113.09482574 282.56030273]
[113.09482574 297.56030273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 31]
[12 30]
[13 29]
[14 28]
[19 27]
[20 26]
[35 111]
[36 110]
[37 109]
[38 108]
[41 106]
[42 105]
[43 104]
[44 103]
[48 102]
[49 101]
[50 100]
[51 99]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
