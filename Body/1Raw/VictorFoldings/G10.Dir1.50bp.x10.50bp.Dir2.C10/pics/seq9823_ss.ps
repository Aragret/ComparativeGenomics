%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUxxxxxxxxxxCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.76489258 93.02201843]
[167.99278259 95.62673950]
[153.22065735 98.23146057]
[138.44854736 100.83618164]
[123.67642975 103.44091034]
[108.90431213 106.04563141]
[95.34241486 112.45460510]
[83.95133972 122.21388245]
[72.56026459 131.97315979]
[61.16919327 141.73242188]
[49.77811813 151.49169922]
[47.18603897 157.68231201]
[42.53432083 161.08074951]
[37.71318054 161.40609741]
[25.93104553 170.68948364]
[14.14890766 179.97286987]
[11.84204102 192.70402527]
[1.78575289 200.19017029]
[-10.27367687 198.83651733]
[-22.24393654 207.87603760]
[-28.13432312 223.18080139]
[-44.37370682 225.46430969]
[-54.25640106 212.37750244]
[-47.61593628 197.38296509]
[-31.28345490 195.90579224]
[-19.31319618 186.86627197]
[-13.38986683 170.37509155]
[4.86552238 168.19073486]
[16.64765930 158.90734863]
[28.42979622 149.62396240]
[40.01884460 140.10063171]
[51.40991974 130.34135437]
[62.80099106 120.58207703]
[74.19206238 110.82280731]
[85.58313751 101.06352997]
[70.78125000 103.49334717]
[55.80604553 102.63116455]
[41.38082504 98.51862335]
[28.20231056 91.35435486]
[16.90700912 81.48439026]
[8.04047585 69.38543701]
[2.03095627 55.64187241]
[-0.83129531 40.91748810]
[-0.40803480 25.92346001]
[3.28029466 11.38398838]
[10.05555058 -1.99868345]
[19.59049225 -13.57818508]
[31.42459297 -22.79523849]
[44.98627472 -29.20466614]
[59.62052536 -32.49689865]
[74.62051392 -32.51292419]
[89.26176453 -29.25197220]
[102.83711243 -22.87153816]
[114.69087982 -13.67979527]
[124.25054932 -2.12069511]
[131.05438232 11.24746895]
[134.77377319 25.77902412]
[135.22908020 40.77211380]
[132.39830017 55.50258255]
[126.41815948 69.25895691]
[117.57749939 81.37683105]
[106.29959106 91.27351379]
[121.07170105 88.66879272]
[135.84382629 86.06406403]
[150.61593628 83.45934296]
[165.38804626 80.85462189]
[180.16017151 78.24990082]
[178.87945557 60.50782394]
[179.56750488 42.73370361]
[182.21571350 25.14532852]
[186.79144287 7.95818281]
[193.23846436 -8.61717701]
[201.47758484 -24.37771225]
[211.40773010 -39.13038635]
[222.90705872 -52.69452667]
[235.83451843 -64.90404510]
[250.03158569 -75.60946655]
[265.32418823 -84.67975616]
[281.52487183 -92.00392151]
[298.43505859 -97.49237823]
[315.84741211 -101.07805634]
[333.54861450 -102.71717834]
[351.32174683 -102.38984680]
[368.94897461 -100.10025024]
[386.21438599 -95.87661743]
[402.90643311 -89.77088165]
[418.82064819 -81.85802460]
[433.76211548 -72.23515320]
[447.54785156 -61.02034760]
[460.00903320 -48.35115433]
[470.99310303 -34.38294220]
[483.66461182 -42.40993881]
[496.33615112 -50.43693542]
[509.00765991 -58.46393204]
[521.67919922 -66.49092865]
[534.35070801 -74.51792908]
[534.34863281 -89.94528961]
[542.70684814 -102.91235352]
[556.75811768 -109.28136444]
[572.01885986 -107.02000427]
[583.61938477 -96.84986115]
[587.85797119 -82.01618958]
[583.38214111 -67.25236511]
[571.62011719 -57.26946259]
[556.32513428 -55.25299835]
[542.37768555 -61.84641266]
[529.70617676 -53.81941605]
[517.03466797 -45.79241943]
[504.36312866 -37.76541901]
[491.69161987 -29.73842430]
[479.02011108 -21.71142578]
[484.92605591 -10.31890297]
[489.90328979 1.50925827]
[493.91992188 13.69749355]
[496.95028687 26.16793251]
[498.97491455 38.84089661]
[499.98086548 51.63541412]
[499.96160889 64.46972656]
[498.91726685 77.26181793]
[496.85443115 89.92993927]
[493.78622437 102.39313507]
[489.73223877 114.57174683]
[484.71829224 126.38792419]
[478.77639771 137.76615906]
[471.94448853 148.63368225]
[464.26617432 158.92106628]
[455.79043579 168.56250000]
[446.57147217 177.49636841]
[436.66809082 185.66552734]
[426.14358521 193.01773071]
[415.06515503 199.50595093]
[403.50360107 205.08869934]
[391.53274536 209.73025513]
[379.22906494 213.40087891]
[366.67120361 216.07710266]
[353.93939209 217.74174500]
[341.11495972 218.38412476]
[328.27987671 218.00009155]
[315.51614380 216.59205627]
[302.90533447 214.16893005]
[290.52804565 210.74618530]
[278.46340942 206.34561157]
[266.78851318 200.99530029]
[255.57800293 194.72940063]
[244.90353394 187.58789062]
[234.83332825 179.61636353]
[225.43180847 170.86573792]
[216.75904846 161.39187622]
[208.87052917 151.25529480]
[201.81671143 140.52072144]
[195.64268494 129.25674438]
[190.38796997 117.53529358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[14 30]
[15 29]
[16 28]
[19 26]
[20 25]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
