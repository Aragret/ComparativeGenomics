%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.21253204 273.49658203]
[109.21253204 258.49658203]
[109.21253204 243.49659729]
[109.21253204 228.49659729]
[109.21253204 213.49659729]
[109.21253204 198.49659729]
[109.21253204 183.49659729]
[109.21253204 168.49659729]
[109.21253204 153.49659729]
[109.21253204 138.49659729]
[85.72637939 133.46791077]
[71.36132812 116.76631927]
[57.03873444 121.22313690]
[43.31867981 127.28614807]
[30.38062477 134.87605286]
[17.44256783 142.46597290]
[4.50451279 150.05587769]
[-8.43354321 157.64578247]
[-21.37159920 165.23568726]
[-34.30965424 172.82560730]
[-47.24771118 180.41551208]
[-49.67771530 195.86312866]
[-61.50263596 206.09568787]
[-77.13911438 206.28167725]
[-89.20407867 196.33328247]
[-92.00082397 180.94781494]
[-84.20880890 167.38984680]
[-69.50719452 162.06101990]
[-54.83761978 167.47744751]
[-41.89956284 159.88754272]
[-28.96150780 152.29763794]
[-16.02345085 144.70773315]
[-3.08539557 137.11781311]
[9.85266018 129.52790833]
[22.79071617 121.93800354]
[35.72877121 114.34809113]
[32.93644714 99.61029053]
[18.11869049 97.27918243]
[3.30093145 94.94808197]
[-11.80010414 101.34266663]
[-24.72369003 91.24747467]
[-22.17514992 75.04756927]
[-6.77620173 69.40802002]
[5.63203526 80.13032532]
[20.44979286 82.46142578]
[35.26755142 84.79252625]
[48.80859375 94.35629272]
[52.58191681 106.90054321]
[66.90451813 102.44372559]
[67.79754639 91.98223114]
[71.91409302 82.32333374]
[78.84208679 74.43389893]
[87.88803101 69.10367584]
[85.71118927 54.26246643]
[83.53435516 39.42126083]
[81.35751343 24.58005714]
[79.18067932 9.73885155]
[77.00384521 -5.10235405]
[74.82700348 -19.94355965]
[59.81371689 -21.24656105]
[45.50579071 -25.97731781]
[32.67484665 -33.88070297]
[22.01283073 -44.53050232]
[14.09473801 -57.35237885]
[9.34758091 -71.65486908]
[8.02736568 -86.66665649]
[10.20529079 -101.57817078]
[15.76390362 -115.58525848]
[24.40343475 -127.93254089]
[35.65796661 -137.95413208]
[48.92055511 -145.10957336]
[63.47596359 -149.01300049]
[78.53924561 -149.45390320]
[93.29804230 -146.40849304]
[106.95644379 -140.04101562]
[118.77786255 -130.69485474]
[128.12478638 -118.87403870]
[134.49314880 -105.21604919]
[137.53952026 -90.45745087]
[137.09959412 -75.39414215]
[133.19711304 -60.83847809]
[126.04251862 -47.57542801]
[116.02165985 -36.32024765]
[103.67494202 -27.67991638]
[89.66821289 -22.12039566]
[91.84504700 -7.27919102]
[94.02188873 7.56201458]
[96.19872284 22.40321922]
[98.37555695 37.24442673]
[100.55239868 52.08563232]
[102.72923279 66.92683411]
[116.68202209 69.47604370]
[128.90356445 77.89975739]
[136.94042969 91.15724182]
[138.92349243 107.19864655]
[153.90319824 106.41880035]
[164.45486450 94.96017456]
[179.65754700 94.38269043]
[190.51655579 104.51270294]
[205.49627686 103.73285675]
[220.47599792 102.95301819]
[223.77589417 88.22164154]
[230.92890930 74.92739868]
[241.40425110 64.05680847]
[254.42456055 56.41653061]
[269.02368164 52.57353210]
[284.11822510 52.81298447]
[298.58807373 57.11712646]
[311.35949707 65.16655731]
[321.48477173 76.36395264]
[328.21249390 89.87839508]
[331.04345703 104.70701599]
[329.76757812 119.74945068]
[324.47955322 133.88943481]
[315.57174683 146.07769775]
[303.70520020 155.40977478]
[289.76049805 161.19317627]
[274.77243042 162.99873352]
[259.85317993 160.69247437]
[246.10989380 154.44551086]
[234.56239319 144.72142029]
[226.06758118 132.24180603]
[221.25584412 117.93273163]
[206.27612305 118.71257782]
[191.29640198 119.49241638]
[181.54797363 130.69526672]
[166.36752319 131.69952393]
[154.68304443 121.39851379]
[139.70333862 122.17835999]
[153.22314453 128.67564392]
[168.22172546 128.88238525]
[181.17497253 136.44635010]
[188.72586060 149.40721130]
[188.91748047 164.40599060]
[181.70018005 177.55554199]
[168.94441223 185.44795227]
[153.95600891 186.03782654]
[140.61944580 179.17225647]
[132.39106750 166.63058472]
[131.40391541 151.66033936]
[124.21253204 138.49659729]
[124.21253204 153.49659729]
[124.21253204 168.49659729]
[124.21253204 183.49659729]
[124.21253204 198.49659729]
[124.21253204 213.49659729]
[124.21253204 228.49659729]
[124.21253204 243.49659729]
[124.21253204 258.49658203]
[124.21253204 273.49658203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 49]
[13 48]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[37 46]
[38 45]
[39 44]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[59 85]
[95 129]
[96 128]
[99 125]
[100 124]
[101 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
