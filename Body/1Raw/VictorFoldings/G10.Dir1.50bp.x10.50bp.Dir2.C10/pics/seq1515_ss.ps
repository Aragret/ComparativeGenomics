%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCxxxxxxxxxxCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.02421570 483.11010742]
[85.02421570 468.11010742]
[85.02421570 453.11010742]
[85.02421570 438.11010742]
[85.02421570 423.11010742]
[85.02421570 408.11010742]
[85.02421570 393.11010742]
[85.02421570 378.11010742]
[85.02421570 363.11010742]
[85.02421570 348.11010742]
[71.30561829 345.09472656]
[58.51855087 339.26705933]
[47.23271942 330.88381958]
[37.95153046 320.31561279]
[31.08968735 308.03063965]
[26.95462418 294.57382202]
[25.73275375 280.54278564]
[27.48105431 266.56121826]
[32.12442780 253.25109863]
[39.45891190 241.20516968]
[49.16064835 230.96044922]
[60.80016708 222.97430420]
[73.86141205 217.60404968]
[87.76462555 215.09092712]
[88.38044739 200.10356140]
[88.99627686 185.11621094]
[81.78801727 172.08201599]
[90.08535767 158.61112976]
[90.70118713 143.62377930]
[91.31700897 128.63642883]
[77.91956329 120.19638062]
[70.70471191 106.10127258]
[71.69264221 90.29779053]
[80.60672760 77.21096039]
[74.05885315 63.71557617]
[67.51098633 50.22019196]
[60.96311569 36.72480774]
[53.46311569 23.73442841]
[45.04970551 11.31611443]
[36.63629532 -1.10220015]
[25.14562798 -10.74401474]
[11.45500278 -16.87318802]
[-2.23562312 -23.00236130]
[-15.92624855 -29.13153648]
[-29.31273270 -21.28413773]
[-44.75187683 -22.83733749]
[-56.30701828 -33.19390106]
[-59.53496552 -48.37151337]
[-53.19450760 -62.53407669]
[-39.72368240 -70.23579407]
[-24.30229378 -68.51520538]
[-12.86018372 -58.03390121]
[-9.79707432 -42.82216263]
[3.89355087 -36.69298935]
[17.58417702 -30.56381416]
[31.27480125 -24.43463898]
[22.78757668 -36.80262375]
[17.10138130 -50.68308258]
[14.47230721 -65.45088196]
[15.01875973 -80.44092560]
[18.71612930 -94.97810364]
[25.39789581 -108.40769958]
[34.76313400 -120.12487793]
[46.39005280 -129.60194397]
[59.75502014 -136.41206360]
[74.25610352 -140.24853516]
[89.24022675 -140.93856812]
[104.03253937 -138.45109558]
[117.96683502 -132.89813232]
[130.41555786 -124.52979279]
[140.81805420 -113.72293854]
[148.70582581 -100.96429443]
[153.72361755 -86.82846069]
[155.64546204 -71.95208740]
[154.38478088 -57.00515747]
[149.99838257 -42.66083908]
[142.68379211 -29.56516266]
[132.77043152 -18.30791855]
[120.70480347 -9.39610291]
[107.03028870 -3.23107648]
[92.36274719 -0.09049528]
[77.36277008 -0.11580244]
[62.70590591 -3.30585814]
[49.05460739 -9.51561069]
[57.46801758 2.90270400]
[65.88143158 15.32101822]
[69.07960510 0.66592723]
[80.84330750 -8.64080238]
[95.84106445 -8.38122368]
[107.27565765 1.32701898]
[109.96476746 16.08400726]
[102.68965149 29.20165253]
[88.74749756 34.73484802]
[74.45849609 30.17693901]
[81.00637054 43.67232132]
[87.55423737 57.16770554]
[94.10211182 70.66309357]
[104.54084778 70.42264557]
[114.42671204 73.78341675]
[122.55603790 80.33621216]
[127.93903351 89.28319550]
[142.84347534 87.59279633]
[157.74792480 85.90239716]
[172.65237427 84.21200562]
[187.55682373 82.52160645]
[202.42341614 80.52555084]
[217.24589539 78.22467041]
[225.18576050 64.75274658]
[239.94479370 59.58506012]
[254.55422974 65.16162872]
[262.11596680 78.84937286]
[259.05953979 94.18535614]
[246.82814026 103.92839813]
[231.19705200 103.47812653]
[219.54676819 93.04715729]
[204.72428894 95.34803009]
[201.20173645 98.65571594]
[195.54492188 99.74584961]
[189.24722290 97.42604828]
[174.34277344 99.11644745]
[159.43832397 100.80684662]
[144.53387451 102.49724579]
[129.62942505 104.18764496]
[121.90589142 120.38556671]
[106.30435944 129.25225830]
[105.68853760 144.23960876]
[105.07271576 159.22695923]
[112.23692322 173.33314514]
[103.98362732 185.73204041]
[103.36780548 200.71939087]
[102.75197601 215.70674133]
[118.16567993 220.05906677]
[132.09866333 227.94119263]
[143.75668335 238.89923096]
[152.47622681 252.30406189]
[157.76232910 267.38745117]
[159.31666565 283.28610229]
[157.05436707 299.09109497]
[151.10867310 313.89974976]
[141.82304382 326.86730957]
[129.73136902 337.25500488]
[115.52725220 344.47222900]
[100.02421570 348.11010742]
[100.02421570 363.11010742]
[100.02421570 378.11010742]
[100.02421570 393.11010742]
[100.02421570 408.11010742]
[100.02421570 423.11010742]
[100.02421570 438.11010742]
[100.02421570 453.11010742]
[100.02421570 468.11010742]
[100.02421570 483.11010742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 131]
[25 130]
[26 129]
[28 127]
[29 126]
[30 125]
[34 97]
[35 96]
[36 95]
[37 94]
[38 86]
[39 85]
[40 84]
[41 56]
[42 55]
[43 54]
[44 53]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
[106 116]
[107 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
