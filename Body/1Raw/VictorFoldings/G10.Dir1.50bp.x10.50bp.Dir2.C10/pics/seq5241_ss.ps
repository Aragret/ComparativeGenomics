%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAxxxxxxxxxxAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 594.15765381]
[92.50000000 579.15765381]
[92.50000000 564.15765381]
[92.50000000 549.15765381]
[92.50000000 534.15765381]
[92.50000000 519.15765381]
[92.50000000 504.15765381]
[92.50000000 489.15765381]
[92.50000000 474.15765381]
[92.50000000 459.15765381]
[77.89575195 455.85342407]
[64.38652039 449.37893677]
[52.65122604 440.05596924]
[43.28042221 428.34957886]
[36.74658203 414.84487915]
[33.38029099 400.21774292]
[33.35351944 385.20104980]
[36.67081451 370.54788208]
[43.16894913 356.99389648]
[52.52492142 345.22024536]
[64.27202606 335.81936646]
[77.82312775 329.26528931]
[92.50000000 325.88958740]
[92.50000000 310.88958740]
[77.95760345 307.33892822]
[64.67964935 300.40667725]
[53.43997574 290.49197388]
[44.89479446 278.16784668]
[39.54439163 264.14825439]
[37.70384216 249.24655151]
[39.48443985 234.32843018]
[44.78699112 220.26158142]
[53.30733109 207.86520386]
[64.55376434 197.86236572]
[77.87543488 190.83773804]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[90.10756683 83.99679565]
[89.18389130 80.03221893]
[89.59457397 76.39721680]
[91.05480957 73.48831940]
[93.17588806 71.56260681]
[94.42276764 56.61452484]
[95.66963959 41.66643524]
[83.96635437 51.04903030]
[68.96720886 50.88884735]
[57.46696472 41.25845718]
[54.67534637 26.52051544]
[61.85698700 13.35145855]
[75.75852966 7.71699524]
[90.08243561 12.16959381]
[98.33993530 24.69257545]
[101.74291229 10.08368206]
[105.14589691 -4.52521038]
[108.54887390 -19.13410378]
[94.60201263 -24.73638535]
[81.67384338 -32.40208435]
[70.06742859 -41.95150757]
[60.05482864 -53.16080475]
[51.87075806 -65.76720428]
[45.70706177 -79.47520447]
[41.70822525 -93.96347046]
[39.96799088 -108.89237213]
[40.52714539 -123.91194916]
[43.37258530 -138.67013550]
[48.43761063 -152.82095337]
[55.60348892 -166.03271484]
[64.70223999 -177.99571228]
[75.52058411 -188.42950439]
[87.80490875 -197.08950806]
[101.26726532 -203.77273560]
[115.59206390 -208.32249451]
[130.44352722 -210.63217163]
[145.47351074 -210.64758301]
[160.32966614 -208.36840820]
[174.66378784 -203.84803772]
[188.13983154 -197.19245911]
[200.44189453 -188.55767822]
[211.28163147 -178.14611816]
[220.40490723 -166.20182800]
[227.59788513 -153.00479126]
[232.69194031 -138.86439514]
[235.56765747 -124.11207581]
[236.15763855 -109.09368134]
[234.44804382 -94.16123962]
[230.47895813 -79.66480255]
[224.34339905 -65.94418335]
[216.18521118 -53.32100677]
[206.19564819 -42.09119034]
[194.60884094 -32.51796722]
[181.69644165 -24.82575226]
[167.76110840 -19.19486046]
[153.12951660 -15.75728798]
[138.14463806 -14.59361744]
[123.15776062 -15.73112488]
[119.75478363 -1.12223256]
[116.35180664 13.48666000]
[112.94882965 28.09555244]
[110.61772919 42.91331100]
[109.37084961 57.86139679]
[108.12397766 72.80948639]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[122.12456512 190.83773804]
[135.44624329 197.86236572]
[146.69267273 207.86520386]
[155.21301270 220.26158142]
[160.51556396 234.32843018]
[162.29615784 249.24655151]
[160.45561218 264.14825439]
[155.10520935 278.16784668]
[146.56002808 290.49197388]
[135.32034302 300.40667725]
[122.04239655 307.33892822]
[107.50000000 310.88958740]
[107.50000000 325.88958740]
[122.17687225 329.26528931]
[135.72796631 335.81936646]
[147.47508240 345.22024536]
[156.83105469 356.99389648]
[163.32917786 370.54788208]
[166.64648438 385.20104980]
[166.61970520 400.21774292]
[163.25341797 414.84487915]
[156.71957397 428.34957886]
[147.34877014 440.05596924]
[135.61347961 449.37893677]
[122.10424805 455.85342407]
[107.50000000 459.15765381]
[107.50000000 474.15765381]
[107.50000000 489.15765381]
[107.50000000 504.15765381]
[107.50000000 519.15765381]
[107.50000000 534.15765381]
[107.50000000 549.15765381]
[107.50000000 564.15765381]
[107.50000000 579.15765381]
[107.50000000 594.15765381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[41 110]
[43 108]
[48 107]
[49 106]
[50 105]
[58 104]
[59 103]
[60 102]
[61 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
