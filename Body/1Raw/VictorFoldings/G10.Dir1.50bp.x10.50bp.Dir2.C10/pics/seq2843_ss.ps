%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACxxxxxxxxxxGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.17486572 460.97268677]
[79.17486572 445.97268677]
[79.17486572 430.97268677]
[79.17486572 415.97268677]
[79.17486572 400.97268677]
[79.17486572 385.97268677]
[79.17486572 370.97268677]
[79.17486572 355.97268677]
[79.17486572 340.97268677]
[79.17486572 325.97268677]
[64.52049255 322.88320923]
[50.82342529 316.81182861]
[38.68336868 308.02178955]
[28.63239670 296.89526367]
[21.11164665 283.91699219]
[16.45196152 269.65304565]
[14.85933113 254.72618103]
[16.40578842 239.78857422]
[21.02615547 225.49342346]
[28.52078819 212.46630859]
[38.56419754 201.27787781]
[50.71919250 192.41882324]
[64.45589447 186.27833557]
[79.17486572 183.12701416]
[79.17486572 168.12701416]
[79.17486572 153.12701416]
[70.85167694 165.60598755]
[58.44631958 174.03848267]
[43.78034210 177.18635559]
[29.00721359 174.58737183]
[16.29614830 166.62315369]
[7.51356792 154.46311951]
[3.94906259 139.89280701]
[6.12602568 125.05161285]
[13.72480297 112.11876678]
[25.62962914 102.99324799]
[40.09246445 99.01499939]
[54.98965836 100.76817322]
[68.13378143 107.99533844]
[77.59483337 119.63529205]
[81.98352051 133.97822571]
[86.29110718 119.61004639]
[90.59868622 105.24186707]
[91.53431702 90.27107239]
[89.04920197 75.47836304]
[86.56407928 60.68565750]
[84.07896423 45.89295197]
[81.59384155 31.10024261]
[79.10872650 16.30753517]
[76.62360382 1.51482868]
[74.13848877 -13.27787876]
[71.49962616 -28.04393387]
[68.70729828 -42.78173828]
[65.91497040 -57.51954651]
[63.12265015 -72.25735474]
[60.33032608 -86.99515533]
[55.13491058 -101.06668091]
[47.68000031 -114.08298492]
[40.22509003 -127.09929657]
[26.65241241 -135.22906494]
[27.04110718 -150.11859131]
[13.92241859 -160.85806274]
[20.61057663 -176.43705750]
[37.43219757 -174.32296753]
[40.05741882 -157.57350159]
[53.09686661 -150.37475586]
[53.24139786 -134.55419922]
[60.69630814 -121.53789520]
[68.15122223 -108.52159119]
[68.85024261 -123.50528717]
[74.54299927 -137.38305664]
[84.56761169 -148.54133606]
[97.75852203 -155.68275452]
[112.58203888 -157.97698975]
[127.31462860 -155.15730286]
[140.24336243 -147.55152893]
[149.86502075 -136.04397583]
[155.06089783 -121.97262573]
[155.22688293 -106.97354126]
[150.34365845 -92.79065704]
[140.97901917 -81.07299805]
[128.22175598 -73.18297577]
[113.55517578 -70.03795624]
[98.68452454 -72.00359344]
[85.33880615 -78.85135651]
[75.06813049 -89.78748322]
[77.86045837 -75.04967499]
[80.65277863 -60.31187057]
[83.44510651 -45.57406616]
[86.23742676 -30.83625793]
[90.60093689 -24.81085968]
[88.93119812 -15.76299667]
[91.41631317 -0.97028983]
[93.90142822 13.82241726]
[96.38655090 28.61512375]
[98.87166595 43.40783310]
[101.35678864 58.20053864]
[103.84190369 72.99324799]
[106.32702637 87.78594971]
[111.86528015 73.84580994]
[120.76364136 61.77024460]
[132.43809509 52.35179138]
[146.12243652 46.20859528]
[160.91854858 43.74383545]
[175.85534668 45.11927414]
[189.95252991 50.24464417]
[202.28488159 58.78356171]
[212.04301453 70.17560577]
[218.58650208 83.67311859]
[221.48588562 98.39023590]
[220.55088806 113.36106873]
[215.84284973 127.60306549]
[207.67077637 140.18150330]
[196.57101440 150.27085876]
[183.27203369 157.20896912]
[168.64666748 160.54046631]
[153.65480042 160.04669189]
[139.28034973 155.76007080]
[126.46672058 147.96194458]
[116.05489349 137.16407776]
[108.72818756 124.07517242]
[104.96687317 109.54944611]
[100.65928650 123.91763306]
[96.35170746 138.28581238]
[94.17486572 153.12701416]
[94.17486572 168.12701416]
[94.17486572 183.12701416]
[108.89383698 186.27833557]
[122.63053894 192.41882324]
[134.78553772 201.27787781]
[144.82894897 212.46630859]
[152.32357788 225.49342346]
[156.94393921 239.78857422]
[158.49040222 254.72618103]
[156.89776611 269.65304565]
[152.23808289 283.91699219]
[144.71733093 296.89526367]
[134.66636658 308.02178955]
[122.52630615 316.81182861]
[108.82924652 322.88320923]
[94.17486572 325.97268677]
[94.17486572 340.97268677]
[94.17486572 355.97268677]
[94.17486572 370.97268677]
[94.17486572 385.97268677]
[94.17486572 400.97268677]
[94.17486572 415.97268677]
[94.17486572 430.97268677]
[94.17486572 445.97268677]
[94.17486572 460.97268677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[41 124]
[42 123]
[43 122]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[57 69]
[58 68]
[59 67]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
