%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAxxxxxxxxxxCAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 572.39758301]
[92.50000000 557.39758301]
[92.50000000 542.39758301]
[92.50000000 527.39758301]
[92.50000000 512.39758301]
[92.50000000 497.39755249]
[92.50000000 482.39755249]
[92.50000000 467.39755249]
[92.50000000 452.39755249]
[92.50000000 437.39755249]
[77.77018738 434.66390991]
[63.78981781 429.26864624]
[51.03553772 421.39413452]
[39.94248962 411.30737305]
[30.88946152 399.35073853]
[24.18593407 385.93057251]
[20.06152153 371.50326538]
[18.65810013 356.55978394]
[20.02492142 341.60888672]
[24.11689758 327.15991211]
[30.79607773 313.70535278]
[39.83630371 301.70407104]
[50.93086243 291.56567383]
[63.70289993 283.63653564]
[77.71820831 278.18789673]
[92.50000000 275.40676880]
[92.50000000 260.40676880]
[92.50000000 245.40676880]
[78.67464447 239.76860046]
[68.03237152 229.23829651]
[62.21679688 215.39836121]
[62.14283752 200.34571838]
[67.85289764 186.37399292]
[78.50568390 175.62405396]
[92.50000000 169.75593567]
[92.50000000 154.75593567]
[92.50000000 139.75593567]
[79.36823273 134.80107117]
[68.71958160 125.65775299]
[61.83566666 113.42641449]
[59.54499054 99.57914734]
[62.12324905 85.78253174]
[69.26013184 73.69704437]
[80.09668732 64.77723694]
[93.32869720 60.09663391]
[93.64075470 45.09988022]
[93.95280457 30.10312843]
[94.26486206 15.10637474]
[82.21932983 11.48143673]
[71.41790771 5.05612707]
[62.49936295 -3.78331137]
[55.98962402 -14.50805664]
[52.27071762 -26.47834206]
[51.55838776 -38.98162079]
[53.88956451 -51.27497482]
[59.12051392 -62.62926865]
[66.93566132 -72.37238312]
[76.86665344 -79.92901611]
[88.32039642 -84.85462952]
[100.61447906 -86.86162567]
[102.17206573 -101.78054047]
[103.72964478 -116.69945526]
[105.28722382 -131.61836243]
[106.84480286 -146.53727722]
[108.09168243 -161.48536682]
[108.55972290 -176.47805786]
[108.55972290 -191.47805786]
[108.55972290 -206.47805786]
[94.50253296 -212.26286316]
[83.73266602 -222.99031067]
[77.89243317 -237.02456665]
[77.87243652 -252.22549438]
[83.67572021 -266.27505493]
[94.41733551 -277.03079224]
[108.45925140 -282.85256958]
[123.66018677 -282.85256958]
[137.70210266 -277.03079224]
[148.44372559 -266.27505493]
[154.24700928 -252.22549438]
[154.22702026 -237.02456665]
[148.38677979 -222.99031067]
[137.61691284 -212.26286316]
[123.55972290 -206.47805786]
[123.55972290 -191.47805786]
[123.55972290 -176.47805786]
[125.84140778 -173.71014404]
[126.86080170 -169.67745972]
[126.02835846 -165.00205994]
[123.06246948 -160.54974365]
[125.53865051 -156.39714050]
[125.38740540 -150.63446045]
[121.76371765 -144.97969055]
[120.20613861 -130.06079102]
[118.64855957 -115.14187622]
[117.09097290 -100.22296143]
[115.53339386 -85.30404663]
[131.58705139 -78.12817383]
[144.27674866 -65.92108154]
[152.09022522 -50.11536789]
[154.08885193 -32.57378006]
[150.02032471 -15.36969185]
[140.35044861 -0.54201782]
[126.20980835 10.14641285]
[109.26161957 15.41843128]
[108.94956207 30.41518402]
[108.63750458 45.41193771]
[108.32544708 60.40869141]
[122.83776093 66.60506439]
[133.87577820 77.88177490]
[139.76033020 92.52330017]
[139.59617615 108.30224609]
[133.40830994 122.81818390]
[122.13807678 133.86282349]
[107.50000000 139.75593567]
[107.50000000 154.75593567]
[107.50000000 169.75593567]
[121.49431610 175.62405396]
[132.14710999 186.37399292]
[137.85716248 200.34571838]
[137.78320312 215.39836121]
[131.96763611 229.23829651]
[121.32535553 239.76860046]
[107.50000000 245.40676880]
[107.50000000 260.40676880]
[107.50000000 275.40676880]
[122.28179169 278.18789673]
[136.29710388 283.63653564]
[149.06913757 291.56567383]
[160.16369629 301.70407104]
[169.20391846 313.70535278]
[175.88310242 327.15991211]
[179.97508240 341.60888672]
[181.34190369 356.55978394]
[179.93847656 371.50326538]
[175.81407166 385.93057251]
[169.11053467 399.35073853]
[160.05751038 411.30737305]
[148.96446228 421.39413452]
[136.21018982 429.26864624]
[122.22981262 434.66390991]
[107.50000000 437.39755249]
[107.50000000 452.39755249]
[107.50000000 467.39755249]
[107.50000000 482.39755249]
[107.50000000 497.39755249]
[107.50000000 512.39758301]
[107.50000000 527.39758301]
[107.50000000 542.39758301]
[107.50000000 557.39758301]
[107.50000000 572.39758301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[35 116]
[36 115]
[37 114]
[45 107]
[46 106]
[47 105]
[48 104]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 89]
[66 85]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
