%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUxxxxxxxxxxUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.23675537 231.60061646]
[94.92469788 216.60386658]
[94.61264038 201.60711670]
[94.30059052 186.61036682]
[93.98853302 171.61360168]
[93.67647552 156.61685181]
[93.36441803 141.62010193]
[93.05236053 126.62334442]
[92.74030304 111.62659454]
[87.10835266 97.72403717]
[76.89486694 86.73837280]
[61.83172607 81.89974976]
[58.83236694 67.31026459]
[48.61888885 56.32460022]
[35.74011230 55.06326675]
[27.45862007 45.64860535]
[27.82693863 33.51717377]
[17.84421349 22.32140541]
[7.86148596 11.12563992]
[-9.58845329 10.46460152]
[-20.96199989 -2.33877778]
[-19.61536789 -19.07330894]
[-29.82884789 -30.05897331]
[-40.04232788 -41.04463959]
[-50.25580597 -52.03030396]
[-60.46928787 -63.01596832]
[-72.41252136 -53.92058563]
[-85.18975830 -46.03965759]
[-98.67794037 -39.44908142]
[-112.74716949 -34.21233368]
[-127.26194763 -30.37984467]
[-142.08248901 -27.98852730]
[-157.06605530 -27.06141090]
[-172.06834412 -27.60742188]
[-186.94487000 -29.62130547]
[-201.55236816 -33.08366394]
[-215.75013733 -37.96115112]
[-229.40147400 -44.20679855]
[-242.37487793 -51.76044846]
[-254.54541016 -60.54935455]
[-265.79586792 -70.48887634]
[-276.01788330 -81.48329163]
[-285.11303711 -93.42670441]
[-292.99368286 -106.20409393]
[-299.58401489 -119.69241333]
[-304.82046509 -133.76174927]
[-308.65267944 -148.27661133]
[-311.04370117 -163.09719849]
[-311.97048950 -178.08078003]
[-311.42419434 -193.08305359]
[-309.41000366 -207.95954895]
[-305.94735718 -222.56697083]
[-301.06958008 -236.76464844]
[-294.82366943 -250.41584778]
[-287.26977539 -263.38909912]
[-278.48062134 -275.55944824]
[-268.54086304 -286.80972290]
[-257.54623413 -297.03152466]
[-245.60264587 -306.12640381]
[-232.82510376 -314.00683594]
[-219.33665466 -320.59686279]
[-205.26721191 -325.83306885]
[-190.75227356 -329.66494751]
[-175.93164062 -332.05569458]
[-160.94804382 -332.98220825]
[-145.94577026 -332.43560791]
[-131.06932068 -330.42111206]
[-116.46196747 -326.95816040]
[-102.26438904 -322.08010864]
[-88.61331177 -315.83392334]
[-75.64021301 -308.27975464]
[-63.47003174 -299.49035645]
[-52.21997452 -289.55038452]
[-41.99839401 -278.55557251]
[-32.90372849 -266.61178589]
[-25.02356529 -253.83407593]
[-18.43379974 -240.34550476]
[-13.19789600 -226.27595520]
[-9.36627865 -211.76094055]
[-6.97584963 -196.94026184]
[-6.04963112 -181.95664978]
[-6.59654331 -166.95439148]
[-8.61131859 -152.07798767]
[-12.07455349 -137.47068787]
[-16.95289421 -123.27320862]
[-23.19935799 -109.62226105]
[-30.75378609 -96.64930725]
[-39.54342651 -84.47930145]
[-49.48362350 -73.22944641]
[-39.27014160 -62.24378204]
[-29.05666351 -51.25811768]
[-18.84318352 -40.27245331]
[-8.62970352 -29.28678894]
[4.22416973 -30.61898422]
[15.65908337 -24.19114876]
[21.36952591 -12.16539383]
[19.05725288 1.14291370]
[29.03997803 12.33867931]
[39.02270508 23.53444481]
[55.93996429 28.09583092]
[59.60455322 46.11112213]
[69.81803131 57.09678650]
[84.15064240 61.14963913]
[87.88053131 76.52489471]
[98.09401703 87.51055908]
[133.17796326 77.05317688]
[147.94401550 79.69203949]
[162.71008301 82.33090973]
[177.47613525 84.96977234]
[192.24218750 87.60863495]
[207.00823975 90.24749756]
[221.80094910 92.73262024]
[236.61871338 95.06372070]
[251.43646240 97.39482880]
[266.25421143 99.72592926]
[282.84057617 96.21456146]
[290.80627441 111.18065643]
[278.63018799 122.97808075]
[263.92312622 114.54368591]
[249.10536194 112.21258545]
[234.28759766 109.88147736]
[219.46984863 107.55037689]
[212.32731628 109.63124084]
[204.36938477 105.01355743]
[189.60331726 102.37469482]
[174.83726501 99.73582458]
[160.07121277 97.09696198]
[145.30516052 94.45809937]
[130.53910828 91.81923676]
[124.83859253 96.69306183]
[136.53189087 106.08810425]
[148.22517395 115.48315430]
[161.81809998 121.82607269]
[166.75198364 135.99140930]
[160.04086304 149.40635681]
[145.74627686 153.95223999]
[132.51927185 146.87791443]
[128.36492920 132.46327209]
[120.90125275 119.45199585]
[113.43756866 106.44071198]
[107.73706055 111.31453705]
[108.04911804 126.31129456]
[108.36116791 141.30804443]
[108.67322540 156.30479431]
[108.98528290 171.30155945]
[109.29734039 186.29830933]
[109.60939789 201.29505920]
[109.92145538 216.29180908]
[110.23351288 231.28857422]
[112.82450867 250.49629211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 105]
[11 104]
[13 102]
[14 101]
[17 99]
[18 98]
[19 97]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[106 129]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
