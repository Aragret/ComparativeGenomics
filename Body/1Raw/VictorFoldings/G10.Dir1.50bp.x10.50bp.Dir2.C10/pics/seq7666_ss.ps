%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGxxxxxxxxxxACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-1.04471862 246.52272034]
[-11.43313694 238.78616333]
[-21.30884361 250.07644653]
[-31.18454933 261.36672974]
[-41.06025696 272.65701294]
[-50.93596268 283.94726562]
[-60.81166840 295.23754883]
[-70.68737793 306.52783203]
[-73.94938660 322.00912476]
[-88.15252686 326.49465942]
[-98.02822876 337.78494263]
[-107.90393829 349.07522583]
[-102.87244415 363.58657837]
[-105.78648376 378.66650391]
[-115.86219025 390.25854492]
[-130.38925171 395.24453735]
[-145.45996094 392.28323364]
[-157.02037048 382.17126465]
[-161.96080017 367.62863159]
[-158.95228577 352.56729126]
[-148.80410767 341.03860474]
[-134.24606323 336.14379883]
[-119.19421387 339.19952393]
[-109.31851196 327.90924072]
[-99.44280243 316.61895752]
[-96.88716888 301.94522095]
[-81.97765350 296.65213013]
[-72.10195160 285.36184692]
[-62.22624207 274.07156372]
[-52.35053635 262.78128052]
[-42.47483063 251.49101257]
[-32.59912491 240.20072937]
[-22.72341728 228.91044617]
[-31.27398872 220.19184875]
[-39.20659637 210.90745544]
[-46.48390198 201.10098267]
[-53.07164383 190.81857300]
[-58.93881607 180.10864258]
[-64.05779266 169.02162170]
[-68.40447998 157.60966492]
[-71.95841217 145.92652893]
[-74.70286560 134.02719116]
[-76.62492371 121.96767426]
[-77.71553040 109.80474854]
[-77.96955109 97.59566498]
[-77.38579559 85.39789581]
[-75.96701050 73.26887512]
[-73.71987152 61.26567841]
[-70.65496063 49.44482803]
[-66.78670502 37.86195755]
[-62.13331604 26.57160187]
[-56.71669388 15.62690163]
[-50.56233978 5.07938290]
[-43.69922638 -5.02130461]
[-36.15966034 -14.62761211]
[-27.97912979 -23.69431877]
[-19.19614792 -32.17874527]
[-9.85205936 -40.04094696]
[0.00914876 -47.24391937]
[-7.88733387 -59.99717712]
[-15.78381634 -72.75043488]
[-29.26274681 -83.03414917]
[-23.11226273 -98.83312988]
[-6.22808647 -97.29660797]
[-3.03055906 -80.64691925]
[4.86592340 -67.89366150]
[12.76240540 -55.14040375]
[20.95968628 -59.47278976]
[29.37145233 -63.37242889]
[37.97488022 -66.82873535]
[46.74661636 -69.83232880]
[55.66286850 -72.37506104]
[64.69943237 -74.45002747]
[73.83178711 -76.05160522]
[83.03515625 -77.17543793]
[92.28456116 -77.81848907]
[101.55490112 -77.97900391]
[110.82102203 -77.65654755]
[120.05778503 -76.85198975]
[129.24011230 -75.56753540]
[138.34309387 -73.80664062]
[147.34202576 -71.57411194]
[156.21249390 -68.87598419]
[164.93040466 -65.71959686]
[173.47213745 -62.11350250]
[181.81448364 -58.06749344]
[189.93481445 -53.59254456]
[197.81111145 -48.70080566]
[205.42196655 -43.40554810]
[212.74674988 -37.72113800]
[219.76557922 -31.66300392]
[230.31759644 -42.32391357]
[240.86961365 -52.98482132]
[244.50703430 -68.97547913]
[260.25186157 -73.56156158]
[271.90719604 -62.02528763]
[267.48300171 -46.23419571]
[251.53053284 -42.43280411]
[240.97851562 -31.77189636]
[230.42649841 -21.11098862]
[253.56004333 10.00968075]
[269.40478516 45.40178680]
[277.20861816 83.38542175]
[292.18887329 82.61576080]
[307.16909790 81.84609985]
[322.14935303 81.07643890]
[337.12957764 80.30677795]
[342.99014282 66.21363831]
[354.39080811 56.06536865]
[369.06799316 51.87691498]
[384.10751343 54.47990036]
[396.52328491 63.35749817]
[403.85009766 76.74705505]
[404.63327026 91.99006653]
[398.71725464 106.06002045]
[387.27670288 116.16332245]
[372.58316040 120.29394531]
[357.55398560 117.63175201]
[345.17330933 108.70532990]
[337.89926147 95.28701782]
[322.91900635 96.05667877]
[307.93878174 96.82633972]
[292.95852661 97.59600067]
[277.97830200 98.36566162]
[277.62585449 111.31361389]
[276.33270264 124.20163727]
[274.10568237 136.96150208]
[270.95660400 149.52560425]
[266.90209961 161.82742310]
[261.96368408 173.80180359]
[256.16751099 185.38531494]
[249.54425049 196.51661682]
[242.12899780 207.13677979]
[233.96102905 217.18952942]
[225.08358765 226.62162781]
[215.54370117 235.38314819]
[205.39187622 243.42765808]
[194.68190002 250.71257019]
[183.47048950 257.19931030]
[171.81700134 262.85348511]
[159.78317261 267.64520264]
[147.43272400 271.54904175]
[134.83106995 274.54437256]
[122.04495239 276.61529541]
[109.14208221 277.75085449]
[96.19078827 277.94503784]
[83.25967407 277.19680786]
[70.41722107 275.51013184]
[57.73143387 272.89392090]
[45.26950836 269.36209106]
[33.09743500 264.93328857]
[21.27968407 259.63098145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[59 67]
[60 66]
[61 65]
[91 100]
[92 99]
[93 98]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
