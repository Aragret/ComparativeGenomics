%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAxxxxxxxxxxGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.72267151 648.71130371]
[134.72267151 633.71130371]
[134.72267151 618.71130371]
[134.72267151 603.71130371]
[134.72267151 588.71130371]
[134.72267151 573.71130371]
[134.72267151 558.71130371]
[134.72267151 543.71130371]
[134.72267151 528.71130371]
[134.72267151 513.71130371]
[119.99285126 510.97766113]
[106.01248169 505.58239746]
[93.25820160 497.70791626]
[82.16515350 487.62112427]
[73.11212921 475.66448975]
[66.40859985 462.24432373]
[62.28418732 447.81701660]
[60.88076401 432.87353516]
[62.24758530 417.92263794]
[66.33956146 403.47369385]
[73.01874542 390.01910400]
[82.05896759 378.01782227]
[93.15352631 367.87942505]
[105.92556000 359.95028687]
[119.94087219 354.50167847]
[134.72267151 351.72052002]
[126.37410736 342.91091919]
[126.28968048 330.37252808]
[135.06275940 320.86004639]
[135.37481689 305.86331177]
[135.68687439 290.86654663]
[133.81925964 275.98327637]
[129.81152344 261.52856445]
[125.80377960 247.07388306]
[121.79604340 232.61920166]
[117.78829956 218.16452026]
[114.85002136 216.10684204]
[112.79022217 212.49313354]
[112.34322357 207.76527405]
[114.01170349 202.68238831]
[110.91337585 188.00585938]
[107.81505585 173.32934570]
[104.71673584 158.65281677]
[101.61841583 143.97628784]
[91.41909027 133.12165833]
[96.13904572 118.02091217]
[80.12577057 111.80479431]
[73.34169769 92.10913849]
[61.44931793 82.96739960]
[49.55693817 73.82566833]
[37.66455841 64.68392944]
[21.34533119 63.06688690]
[14.83356476 48.01601028]
[24.82800865 35.01435089]
[41.04723358 37.43690109]
[46.80629349 52.79155350]
[58.69867325 61.93328857]
[70.59104919 71.07501984]
[82.48342896 80.21675873]
[96.07437897 73.86962891]
[96.69835663 58.88261032]
[97.32233429 43.89559174]
[88.91028595 56.31483078]
[77.12596893 65.59545135]
[63.08094406 70.86205292]
[48.09999847 71.61788177]
[33.59621048 67.79163361]
[20.93765259 59.74421310]
[11.31834030 48.23470306]
[5.64561272 34.34873581]
[4.45455074 19.39609718]
[7.85750055 4.78719807]
[15.53347969 -8.09997940]
[26.75845146 -18.04985428]
[40.47362137 -24.12390518]
[55.38531113 -25.74919701]
[70.08696747 -22.77242470]
[83.19187164 -15.47437286]
[93.46389771 -4.54342842]
[99.93413544 8.98934746]
[101.99227905 23.84766579]
[108.05529022 10.12761116]
[114.11830139 -3.59244227]
[111.82188416 -19.83000755]
[124.90083313 -29.72309494]
[139.90065002 -23.09454536]
[141.39080811 -6.76324129]
[127.83835602 2.47057080]
[121.77534485 16.19062424]
[115.71233368 29.91067886]
[112.30935669 44.51956940]
[111.68537903 59.50658798]
[111.06140137 74.49360657]
[122.97860718 97.48571014]
[110.81556702 114.92258453]
[121.23650360 126.82698059]
[116.29493713 140.87796021]
[119.39326477 155.55448914]
[122.49158478 170.23101807]
[125.58990479 184.90754700]
[128.68823242 199.58407593]
[132.24298096 214.15676880]
[136.25073242 228.61146545]
[140.25846863 243.06614685]
[144.26620483 257.52084351]
[148.27395630 271.97552490]
[152.96040344 257.72640991]
[162.66174316 246.28596497]
[175.95350647 239.33404541]
[190.88397217 237.89141846]
[205.26083374 242.16992188]
[216.97308350 251.54133606]
[224.30093384 264.62960815]
[226.16842651 279.51287842]
[222.30133057 294.00582886]
[213.26747131 305.98037720]
[200.39334106 313.67822266]
[185.56930542 315.96905518]
[170.97204590 312.51651001]
[158.74494934 303.82754517]
[150.68362427 291.17858887]
[150.37156677 306.17535400]
[150.05950928 321.17211914]
[159.31376648 337.05728149]
[149.72267151 351.72052002]
[164.50445557 354.50167847]
[178.51976013 359.95028687]
[191.29179382 367.87942505]
[202.38636780 378.01782227]
[211.42658997 390.01910400]
[218.10577393 403.47369385]
[222.19773865 417.92263794]
[223.56455994 432.87353516]
[222.16114807 447.81701660]
[218.03672791 462.24432373]
[211.33320618 475.66448975]
[202.28016663 487.62112427]
[191.18713379 497.70791626]
[178.43284607 505.58239746]
[164.45246887 510.97766113]
[149.72267151 513.71130371]
[149.72267151 528.71130371]
[149.72267151 543.71130371]
[149.72267151 558.71130371]
[149.72267151 573.71130371]
[149.72267151 588.71130371]
[149.72267151 603.71130371]
[149.72267151 618.71130371]
[149.72267151 633.71130371]
[149.72267151 648.71130371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[29 123]
[30 122]
[31 121]
[32 106]
[33 105]
[34 104]
[35 103]
[36 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[46 95]
[48 59]
[49 58]
[50 57]
[51 56]
[60 93]
[61 92]
[62 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
