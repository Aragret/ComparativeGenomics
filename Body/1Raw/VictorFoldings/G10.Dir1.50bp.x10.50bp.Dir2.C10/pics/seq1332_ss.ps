%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAAxxxxxxxxxxGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.21865845]
[92.50000000 242.21865845]
[92.50000000 227.21865845]
[92.50000000 212.21865845]
[92.50000000 197.21865845]
[92.50000000 182.21865845]
[92.50000000 167.21865845]
[92.50000000 152.21865845]
[92.50000000 137.21865845]
[92.50000000 122.21865845]
[91.66529083 137.19541931]
[81.83753204 148.52745056]
[67.12948608 151.47250366]
[53.69622421 144.79811096]
[47.15935516 131.29739380]
[50.25445175 116.62018585]
[61.68626404 106.90866089]
[76.67197418 106.22729492]
[61.67276764 106.07329559]
[46.67355728 105.91929626]
[31.67434883 105.76530457]
[16.67513847 105.61130524]
[1.67592990 105.45730591]
[-8.83451653 124.37591553]
[-36.07163239 127.87412262]
[-50.21894836 132.85943604]
[-64.36626434 137.84477234]
[-78.51358032 142.83009338]
[-91.44279480 153.79693604]
[-105.56021881 144.40892029]
[-100.44718170 128.24435425]
[-83.49890137 128.68276978]
[-69.35158539 123.69744873]
[-55.20426941 118.71212769]
[-41.05695343 113.72680664]
[-41.36486435 106.23313141]
[-41.98069000 91.24577332]
[-42.28860474 83.75209808]
[-56.79722977 79.94423676]
[-71.30585480 76.13638306]
[-83.22886658 86.06721497]
[-98.71417236 87.05966187]
[-111.80735016 78.73210907]
[-117.47382355 64.28666687]
[-113.53469849 49.27790833]
[-101.50466156 39.47699738]
[-86.00949860 38.65259552]
[-73.00742340 47.12169266]
[-67.49799347 61.62775421]
[-52.98936844 65.43561554]
[-38.48074341 69.24346924]
[-18.19701958 67.29415894]
[-3.26089430 76.55603027]
[1.82992685 90.45809937]
[16.82913589 90.61209106]
[31.82834625 90.76609039]
[46.82755661 90.92008972]
[61.82676315 91.07408905]
[76.82597351 91.22808075]
[86.34931183 79.63903046]
[83.29091644 64.95413971]
[68.23293304 63.75672150]
[54.12274551 58.36420059]
[42.10420609 49.21371460]
[33.15159988 37.04705811]
[27.99067879 22.85052299]
[27.03981400 7.77496290]
[30.37608910 -6.95751667]
[37.72904205 -20.15261841]
[48.50260925 -30.74067688]
[61.82342148 -37.86336136]
[76.61161804 -40.94327164]
[91.66839600 -39.73073196]
[105.77315521 -34.32403564]
[117.78250122 -25.16148186]
[126.72287750 -12.98583698]
[131.86953735 1.21587431]
[132.80525208 16.29238319]
[129.45417786 31.02150345]
[122.08797455 44.20921326]
[111.30377197 54.78644180]
[97.97581482 61.89574051]
[101.03421021 76.58063507]
[107.34238434 79.70726776]
[111.93644714 84.30508423]
[114.55817413 89.66046906]
[128.48889160 84.09853363]
[142.41961670 78.53659058]
[156.35032654 72.97465515]
[170.28103638 67.41271973]
[167.53021240 52.61680222]
[167.71907043 37.56852722]
[170.84037781 22.84631157]
[176.77415466 9.01603413]
[185.29232788 -3.39070272]
[196.06745911 -13.89701843]
[208.68539429 -22.09907913]
[222.66114807 -27.68161774]
[237.45750427 -30.43005753]
[252.50575256 -30.23875427]
[267.22744751 -27.11506462]
[281.05676270 -21.17905045]
[293.46212769 -12.65888023]
[303.96670532 -1.88204348]
[312.16671753 10.73722553]
[317.74700928 24.71387482]
[320.49304199 39.51068115]
[320.29931641 54.55889511]
[317.17324829 69.28009796]
[311.23498535 83.10845184]
[302.71279907 95.51243591]
[291.93426514 106.01525879]
[279.31365967 114.21323395]
[265.33612061 119.79125214]
[250.53886414 122.53489685]
[235.49069214 122.33872223]
[220.76998901 119.21026611]
[206.94259644 113.26978302]
[194.53999329 104.74559021]
[184.03890991 93.96535492]
[175.84298706 81.34343719]
[161.91226196 86.90537262]
[147.98155212 92.46730804]
[134.05082703 98.02924347]
[120.12011719 103.59118652]
[135.01200867 105.38886261]
[149.90388489 107.18654633]
[164.70910645 104.77709198]
[179.41967773 107.70954895]
[192.16929626 115.61190033]
[201.34046936 127.48159027]
[205.76968384 141.81274414]
[204.89500427 156.78723145]
[198.82740784 170.50524902]
[188.33666992 181.22647095]
[174.75370789 187.59069824]
[159.80177307 188.79052734]
[145.37776184 184.67375183]
[133.31159973 175.76264954]
[125.13409424 163.18774414]
[121.88276672 148.54612732]
[114.69138336 135.38240051]
[107.50000000 122.21865845]
[107.50000000 137.21865845]
[107.50000000 152.21865845]
[107.50000000 167.21865845]
[107.50000000 182.21865845]
[107.50000000 197.21865845]
[107.50000000 212.21865845]
[107.50000000 227.21865845]
[107.50000000 242.21865845]
[107.50000000 257.21865845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[25 35]
[26 34]
[27 33]
[28 32]
[38 51]
[39 50]
[40 49]
[60 83]
[61 82]
[86 125]
[87 124]
[88 123]
[89 122]
[90 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
