%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCxxxxxxxxxxGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.38219452 263.76861572]
[114.38219452 248.76861572]
[114.38219452 233.76861572]
[114.38219452 218.76861572]
[114.38219452 203.76861572]
[114.38219452 188.76861572]
[114.38219452 173.76861572]
[114.38219452 158.76861572]
[114.38219452 143.76861572]
[114.38219452 128.76861572]
[108.29627228 124.38552094]
[101.10488892 137.54925537]
[98.20268250 152.26582336]
[84.25042725 157.77351379]
[72.07842255 149.00753784]
[72.87986755 134.02896118]
[85.91836548 126.61185455]
[96.12443542 115.61930847]
[90.03852081 111.23620605]
[75.81173706 115.99002075]
[61.58495712 120.74383545]
[47.35818100 125.49765015]
[33.13140106 130.25146484]
[18.90462112 135.00527954]
[4.67784214 139.75909424]
[-9.54893684 144.51290894]
[-15.11731720 159.12547302]
[-28.80081940 166.69487000]
[-44.13851166 163.64706421]
[-53.88840866 151.42112732]
[-53.44690323 135.78977966]
[-43.02246094 124.13365936]
[-27.53718567 121.95644379]
[-14.30275154 130.28613281]
[-0.07597249 125.53231812]
[14.15080643 120.77850342]
[28.37758636 116.02468872]
[42.60436630 111.27087402]
[56.83114243 106.51705933]
[71.05792236 101.76324463]
[85.28469849 97.00942993]
[95.94632721 86.45813751]
[100.84787750 72.28157806]
[105.74942780 58.10502243]
[110.65097809 43.92846298]
[115.55252838 29.75190544]
[114.53306580 25.37901497]
[114.95560455 21.33024788]
[116.53154755 18.02899551]
[118.86215973 15.75694466]
[121.49607086 14.63005352]
[127.55908203 0.91000003]
[133.62210083 -12.81005383]
[114.34246826 -26.19279480]
[121.23135376 -45.78358459]
[118.43902588 -60.52138901]
[115.64669800 -75.25919342]
[100.59268951 -75.69601440]
[85.98464203 -79.35922241]
[72.50581360 -86.07749176]
[60.78662109 -95.53659821]
[51.37520218 -107.29411316]
[44.71173859 -120.80012512]
[41.10789490 -135.42292786]
[40.73223495 -150.47859192]
[43.60231781 -165.26292419]
[49.58391571 -179.08445740]
[58.39725113 -191.29670715]
[69.63011169 -201.32850647]
[82.75711823 -208.71063232]
[97.16429138 -213.09782410]
[112.17778778 -214.28488159]
[127.09539032 -212.21626282]
[141.21937561 -206.98875427]
[153.88916016 -198.84683228]
[164.51213074 -188.17132568]
[172.59144592 -175.46153259]
[177.74920654 -161.31192017]
[179.74418640 -146.38429260]
[178.48307800 -131.37683105]
[174.02485657 -116.99147797]
[166.57806396 -103.90106201]
[156.49096680 -92.71782684]
[144.23538208 -83.96485138]
[130.38450623 -78.05152130]
[133.17683411 -63.31371307]
[135.96916199 -48.57590866]
[146.52429199 -43.31372070]
[151.68803406 -31.06490707]
[165.34426880 -37.27031326]
[179.00051880 -43.47572327]
[192.65675354 -49.68112946]
[206.31298828 -55.88653564]
[219.96923828 -62.09194183]
[225.59800720 -76.61622620]
[239.53576660 -82.71485138]
[253.34776306 -77.25917053]
[267.00399780 -83.46458435]
[269.12661743 -98.74522400]
[279.19094849 -110.43765259]
[293.98550415 -114.81085205]
[308.78939819 -110.46935272]
[318.87872314 -98.79850769]
[321.03408813 -83.52244568]
[314.56765747 -69.51570129]
[301.54287720 -61.24777603]
[286.11590576 -61.35693359]
[273.20941162 -69.80834198]
[259.55316162 -63.60293198]
[254.57839966 -49.61053467]
[240.81742859 -43.12282944]
[226.17463684 -48.43570328]
[212.51840210 -42.23029327]
[198.86216736 -36.02488708]
[185.20591736 -29.81948090]
[171.54968262 -23.61407471]
[157.89343262 -17.40866661]
[147.34214783 -6.74704027]
[141.27912903 6.97301340]
[135.21612549 20.69306755]
[129.72909546 34.65345764]
[124.82753754 48.83001328]
[119.92598724 63.00657272]
[115.02443695 77.18312836]
[110.12288666 91.35968781]
[121.22100830 81.26851654]
[130.86270142 69.77774811]
[143.76750183 62.13144684]
[158.47702026 59.19374084]
[173.32888794 61.29663467]
[186.64463806 68.20246887]
[196.91944885 79.13079834]
[202.99211121 92.84658051]
[204.17636108 107.79975891]
[200.33833313 122.30043793]
[191.91180420 134.70983887]
[179.84906006 143.62556458]
[165.51333618 148.04000854]
[150.52478027 147.45429993]
[136.57357788 141.93235779]
[129.38218689 128.76861572]
[129.38218689 143.76861572]
[129.38218689 158.76861572]
[129.38218689 173.76861572]
[129.38218689 188.76861572]
[129.38218689 203.76861572]
[129.38218689 218.76861572]
[129.38218689 233.76861572]
[129.38218689 248.76861572]
[129.38218689 263.76861572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[51 120]
[52 119]
[53 118]
[55 87]
[56 86]
[57 85]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
