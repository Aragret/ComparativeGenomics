%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCxxxxxxxxxxCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.40482330 282.97012329]
[79.40482330 267.97012329]
[79.40482330 252.97013855]
[79.40482330 237.97013855]
[79.40482330 222.97013855]
[79.40482330 207.97013855]
[79.40482330 192.97013855]
[79.40482330 177.97013855]
[79.40482330 162.97013855]
[79.40482330 147.97013855]
[73.65391541 143.15586853]
[66.46253967 156.31961060]
[64.13740540 171.13830566]
[51.51146317 179.23680115]
[37.07314682 175.17047119]
[30.52934074 161.67312622]
[36.27945328 147.81901550]
[50.45882034 142.92239380]
[62.15211487 133.52734375]
[56.40121460 128.71308899]
[41.63515854 131.35194397]
[26.86910248 133.99081421]
[25.59944725 149.02578735]
[20.48080444 163.21951294]
[11.86217117 175.60424805]
[0.33118007 185.33557129]
[-13.32596684 191.74998474]
[-28.17810249 194.41015625]
[-43.21258163 193.13468933]
[-57.40433502 188.01055908]
[-69.78573608 179.38714600]
[-79.51260376 167.85240173]
[-85.92175293 154.19277954]
[-88.57617950 139.33961487]
[-87.29491425 124.30563354]
[-82.16531372 110.11585999]
[-73.53711700 97.73778534]
[-61.99861526 88.01537323]
[-48.33652115 81.61150360]
[-33.48233414 78.96280670]
[-18.44884300 80.24987793]
[-4.26105452 85.38495636]
[8.11368561 94.01792908]
[17.83164597 105.56018829]
[24.23023796 119.22475433]
[38.99629593 116.58589172]
[53.76234818 113.94702911]
[55.45175934 87.32940674]
[70.64563751 66.77496338]
[93.52157593 58.14373779]
[116.33417511 63.07725906]
[124.84526825 50.72568512]
[133.35635376 38.37411118]
[141.86744690 26.02254105]
[150.37854004 13.67096806]
[147.72454834 -1.67810714]
[156.53195190 -14.08311462]
[171.18130493 -16.51869583]
[179.69239807 -28.87026787]
[188.20349121 -41.22183990]
[196.71458435 -53.57341385]
[184.28469849 -67.53764343]
[187.24253845 -92.32065582]
[189.72766113 -107.11336517]
[188.05792236 -116.16122437]
[192.42143250 -122.18662262]
[195.21374512 -136.92443848]
[198.00607300 -151.66223145]
[200.79840088 -166.40003967]
[187.26869202 -173.09704590]
[176.04830933 -183.19682312]
[167.96987915 -195.94990540]
[163.63284302 -210.40995789]
[163.35908508 -225.50390625]
[167.16888428 -240.11172485]
[174.77954102 -253.14936829]
[185.62629700 -263.64941406]
[198.90423584 -270.83261108]
[213.62806702 -274.16598511]
[228.70516968 -273.40216064]
[243.01673889 -268.59780884]
[255.50074768 -260.10946655]
[265.23080444 -248.56698608]
[271.48486328 -234.82693481]
[273.79882812 -219.90888977]
[272.00103760 -204.91987610]
[266.22482300 -190.97218323]
[256.89886475 -179.10081482]
[244.71522522 -170.18672180]
[230.57797241 -164.89137268]
[215.53620911 -163.60771179]
[212.74388123 -148.86991882]
[209.95155334 -134.13211060]
[207.15922546 -119.39430237]
[204.52037048 -104.62824249]
[202.03524780 -89.83554077]
[206.96810913 -84.18603516]
[216.24101257 -95.97642517]
[218.93441772 -110.73262787]
[230.94349670 -119.72052002]
[245.86045837 -118.14436340]
[255.72595215 -106.84515381]
[255.27597046 -91.85190582]
[244.75061035 -81.16467285]
[229.76676941 -80.48565674]
[216.83383179 -72.88703156]
[221.76669312 -67.23752594]
[236.75938416 -67.70557404]
[251.75209045 -68.17361450]
[266.74478149 -68.64165497]
[280.39147949 -77.73560333]
[294.96844482 -70.22265625]
[295.48013306 -53.83149338]
[281.40017700 -45.42393494]
[267.21282959 -53.64896011]
[252.22012329 -53.18091583]
[237.22743225 -52.71287537]
[222.23474121 -52.24483109]
[209.06614685 -45.06232452]
[200.55506897 -32.71075058]
[192.04397583 -20.35917854]
[183.53288269 -8.00760555]
[186.47360229 6.54875803]
[178.01809692 19.19625282]
[162.73011780 22.18205833]
[154.21902466 34.53363037]
[145.70793152 46.88520432]
[137.19683838 59.23677444]
[128.68574524 71.58834839]
[134.43646240 77.68497467]
[138.88284302 84.94801331]
[141.78826904 93.09660339]
[142.97697449 101.80200958]
[142.34361267 110.70079803]
[139.86015320 119.41005707]
[135.57923889 127.54385376]
[129.63426208 134.73028564]
[122.23564911 140.62838745]
[113.66372681 144.94409180]
[104.25821686 147.44454956]
[94.40482330 147.97013855]
[94.40482330 162.97013855]
[94.40482330 177.97013855]
[94.40482330 192.97013855]
[94.40482330 207.97013855]
[94.40482330 222.97013855]
[94.40482330 237.97013855]
[94.40482330 252.97013855]
[94.40482330 267.97012329]
[94.40482330 282.97012329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 47]
[21 46]
[22 45]
[51 129]
[52 128]
[53 127]
[54 126]
[55 125]
[58 122]
[59 121]
[60 120]
[61 119]
[63 96]
[64 95]
[66 94]
[67 93]
[68 92]
[69 91]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
