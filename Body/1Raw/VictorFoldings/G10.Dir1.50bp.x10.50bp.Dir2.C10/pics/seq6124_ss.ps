%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAxxxxxxxxxxAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.73023987 484.62796021]
[94.73023987 469.62796021]
[94.73023987 454.62796021]
[94.73023987 439.62796021]
[94.73023987 424.62796021]
[94.73023987 409.62796021]
[94.73023987 394.62796021]
[94.73023987 379.62796021]
[94.73023987 364.62796021]
[94.73023987 349.62796021]
[80.00042725 346.89431763]
[66.02005768 341.49905396]
[53.26577759 333.62454224]
[42.17273331 323.53778076]
[33.11970139 311.58114624]
[26.41617584 298.16098022]
[22.29176331 283.73367310]
[20.88834000 268.79019165]
[22.25516129 253.83929443]
[26.34713936 239.39033508]
[33.02631760 225.93577576]
[42.06654358 213.93447876]
[53.16110611 203.79608154]
[65.93314362 195.86692810]
[79.94844818 190.41831970]
[94.73023987 187.63717651]
[94.73023987 172.63717651]
[94.73023987 157.63717651]
[85.13913727 142.97393799]
[94.39338684 127.08876801]
[94.08133698 112.09201050]
[87.16535950 125.40250397]
[79.64758301 138.38261414]
[66.39102173 145.40139771]
[51.42983627 144.32296753]
[39.31694794 135.47549438]
[33.73847961 121.55138397]
[36.39204788 106.78796387]
[46.47013092 95.67795563]
[60.90580368 91.60230255]
[75.48090363 95.14724731]
[64.38958740 85.04859161]
[53.29827118 74.94994354]
[42.20695496 64.85129547]
[31.11563873 54.75264740]
[20.02432251 44.65399551]
[8.93300819 34.55534744]
[-2.15830731 24.45669746]
[-13.24962234 14.35804749]
[-27.38519287 20.11551285]
[-42.61843872 19.16104507]
[-55.92478561 11.68415451]
[-64.66224670 -0.83061516]
[-67.09600067 -15.89844894]
[-62.74281693 -30.52761650]
[-52.46702576 -41.81348801]
[-38.30889130 -47.51523972]
[-23.07952499 -46.50079346]
[-9.80272484 -38.97156143]
[-1.11461067 -26.42247963]
[1.25978589 -11.34517956]
[-3.15097332 3.26673222]
[7.94034195 13.36538219]
[19.03165817 23.46403122]
[30.12297249 33.56267929]
[41.21428680 43.66133118]
[52.30560303 53.75997925]
[63.39691925 63.85863113]
[74.48823547 73.95727539]
[85.57955170 84.05593109]
[80.68755341 69.87606812]
[72.98947906 57.00207901]
[73.12923431 42.00273132]
[81.06586456 29.27441597]
[94.47308350 22.54787445]
[109.42118073 23.79469490]
[121.52877045 32.64942551]
[127.24705505 46.51669693]
[124.89997864 61.33193207]
[115.17530823 72.75282288]
[108.00167847 85.92623901]
[120.61280823 77.80469513]
[133.22393799 69.68315887]
[141.22607422 53.13185501]
[158.74584961 52.89176178]
[171.18528748 44.50962067]
[183.62472534 36.12747574]
[196.06416321 27.74533272]
[208.50360107 19.36318970]
[220.94305420 10.98104668]
[233.38249207 2.59890342]
[229.99205017 -12.19532871]
[232.17871094 -27.21474648]
[239.64675903 -40.42809677]
[251.38619995 -50.04838562]
[265.80938721 -54.77453995]
[280.96566772 -53.96739578]
[294.80529785 -47.73610687]
[305.45657349 -36.92340469]
[311.47903442 -22.99161720]
[312.05813599 -7.82490873]
[307.11560059 6.52555132]
[297.31982422 18.11898041]
[283.99566650 25.38746262]
[268.94503784 27.34799576]
[254.20349121 23.73543358]
[241.76463318 15.03834343]
[229.32519531 23.42048645]
[216.88575745 31.80262947]
[204.44630432 40.18477249]
[192.00686646 48.56691742]
[179.56742859 56.94905853]
[167.12799072 65.33119965]
[164.48748779 77.17751312]
[154.13661194 84.25411224]
[141.34547424 82.29428101]
[128.73434448 90.41582489]
[116.12322235 98.53736877]
[109.07808685 111.77995300]
[109.39014435 126.77671051]
[118.16322327 136.28916931]
[118.07879639 148.82757568]
[109.73023987 157.63717651]
[109.73023987 172.63717651]
[109.73023987 187.63717651]
[124.51203156 190.41831970]
[138.52734375 195.86692810]
[151.29937744 203.79608154]
[162.39393616 213.93447876]
[171.43415833 225.93577576]
[178.11334229 239.39033508]
[182.20532227 253.83929443]
[183.57214355 268.79019165]
[182.16871643 283.73367310]
[178.04431152 298.16098022]
[171.34077454 311.58114624]
[162.28775024 323.53778076]
[151.19470215 333.62454224]
[138.44042969 341.49905396]
[124.46005249 346.89431763]
[109.73023987 349.62796021]
[109.73023987 364.62796021]
[109.73023987 379.62796021]
[109.73023987 394.62796021]
[109.73023987 409.62796021]
[109.73023987 424.62796021]
[109.73023987 439.62796021]
[109.73023987 454.62796021]
[109.73023987 469.62796021]
[109.73023987 484.62796021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[30 120]
[31 119]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[81 118]
[82 117]
[83 116]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
