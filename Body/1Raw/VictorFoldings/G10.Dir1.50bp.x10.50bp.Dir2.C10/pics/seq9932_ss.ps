%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAxxxxxxxxxxAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.17074394 292.01715088]
[16.10781670 307.81057739]
[3.59085965 315.88366699]
[-2.95701098 329.37905884]
[-9.50488186 342.87445068]
[-16.05275154 356.36984253]
[-22.60062218 369.86520386]
[-29.14849281 383.36059570]
[-25.27396584 398.92877197]
[-35.14390564 411.57644653]
[-51.18693924 411.60140991]
[-61.09622192 398.98455811]
[-57.27020645 383.40438843]
[-42.64387894 376.81271362]
[-36.09600830 363.31735229]
[-29.54813576 349.82196045]
[-23.00026512 336.32656860]
[-16.45239449 322.83117676]
[-9.90452480 309.33581543]
[-11.30994511 294.50765991]
[1.67536032 285.46926880]
[-24.75654984 268.82650757]
[-48.42636871 248.44593811]
[-68.81005096 224.77880859]
[-85.45629883 198.34910583]
[-97.99658203 169.74194336]
[-106.15324402 139.59072876]
[-120.97572327 141.89160156]
[-135.79820251 144.19247437]
[-150.62068176 146.49334717]
[-157.58778381 160.35838318]
[-171.38935852 167.45036316]
[-186.71842957 165.04225159]
[-197.68066406 154.06004333]
[-200.06086731 138.72660828]
[-192.94377136 124.93796539]
[-179.06607056 117.99613190]
[-163.76402283 120.57038116]
[-152.92156982 131.67086792]
[-138.09907532 129.36999512]
[-123.27659607 127.06911469]
[-108.45411682 124.76824188]
[-109.88262939 103.98321533]
[-109.24378967 83.15895844]
[-106.54389191 62.50058746]
[-101.80952454 42.21158600]
[-95.08732605 22.49180031]
[-86.44350433 3.53547573]
[-75.96321106 -14.47066879]
[-63.74966812 -31.34927177]
[-49.92318344 -46.93407822]
[-60.25408554 -57.80939484]
[-70.58499146 -68.68470764]
[-80.91589355 -79.56002045]
[-96.51163483 -78.41683197]
[-109.16317749 -87.60772705]
[-112.89685059 -102.79303741]
[-105.94972229 -116.80272675]
[-91.60202789 -123.02185822]
[-76.62829590 -118.51393127]
[-68.09867096 -105.40746307]
[-70.04058075 -89.89092255]
[-59.70967484 -79.01560974]
[-49.37877274 -68.14029694]
[-39.04787064 -57.26498413]
[-31.32425880 -63.76972961]
[-23.29677582 -69.89552307]
[-14.98399639 -75.62820435]
[-6.40515471 -80.95449066]
[2.41989875 -85.86206818]
[11.47074318 -90.33957672]
[20.72643661 -94.37666321]
[30.16555977 -97.96397400]
[39.76627350 -101.09322357]
[49.50636292 -103.75715637]
[59.36328888 -105.94961548]
[69.31424713 -107.66551971]
[79.33620453 -108.90091705]
[89.40598297 -109.65293121]
[99.50026703 -109.91983032]
[109.59571075 -109.70099640]
[119.66895294 -108.99693298]
[129.69668579 -107.80926514]
[139.65570068 -106.14075470]
[149.52294922 -103.99525452]
[159.27561951 -101.37772369]
[168.89111328 -98.29421997]
[178.34721375 -94.75189209]
[187.62202454 -90.75891876]
[196.69407654 -86.32455444]
[205.54240417 -81.45904541]
[214.14649963 -76.17366791]
[222.48648071 -70.48062897]
[230.54304504 -64.39311981]
[238.29753113 -57.92522430]
[245.73202515 -51.09189987]
[252.82929993 -43.90896606]
[259.57293701 -36.39303970]
[265.94735718 -28.56151199]
[271.93777466 -20.43250656]
[277.53033447 -12.02483082]
[282.71212769 -3.35793972]
[287.47113037 5.54811096]
[291.79635620 14.67271519]
[295.67776489 23.99475861]
[299.10641479 33.49266815]
[302.07434082 43.14447403]
[304.57467651 52.92783356]
[306.60165405 62.82011795]
[308.15057373 72.79843140]
[309.21783447 82.83968353]
[309.80102539 92.92064667]
[309.89874268 103.01799011]
[309.51074219 113.10835266]
[308.63800049 123.16838074]
[307.28247070 133.17478943]
[305.44729614 143.10444641]
[303.13674927 152.93437195]
[300.35617065 162.64179993]
[297.11196899 172.20428467]
[293.41168213 181.59968567]
[289.26385498 190.80628967]
[284.67807007 199.80276489]
[279.66497803 208.56831360]
[274.23617554 217.08264160]
[268.40417480 225.32604980]
[262.18252563 233.27946472]
[255.58558655 240.92448425]
[248.62864685 248.24342346]
[241.32778931 255.21934509]
[233.69990540 261.83609009]
[225.76266479 268.07836914]
[217.53440857 273.93173218]
[209.03421021 279.38262939]
[200.28169250 284.41845703]
[191.29714966 289.02755737]
[182.10134888 293.19924927]
[172.71557617 296.92391968]
[163.16154480 300.19293213]
[153.46136475 302.99868774]
[143.63748169 305.33474731]
[133.71261597 307.19567871]
[123.70974731 308.57714844]
[113.65201569 309.47604370]
[103.56269836 309.89019775]
[93.46514130 309.81869507]
[83.38269806 309.26168823]
[73.33870697 308.22045898]
[63.35640717 306.69744873]
[53.45889664 304.69613647]
[43.66907883 302.22119141]
[34.00960541 299.27832031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[27 42]
[28 41]
[29 40]
[30 39]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
