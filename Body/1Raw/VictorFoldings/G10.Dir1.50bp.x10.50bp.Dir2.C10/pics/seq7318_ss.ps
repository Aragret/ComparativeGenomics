%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUxxxxxxxxxxACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-45.18451309 260.56365967]
[-55.62432480 271.33447266]
[-66.06414032 282.10528564]
[-70.11309052 297.39962769]
[-84.52690887 301.15341187]
[-94.96672058 311.92422485]
[-105.40653229 322.69503784]
[-115.84634399 333.46585083]
[-126.28615570 344.23666382]
[-136.72596741 355.00747681]
[-130.08386230 368.63311768]
[-128.50566101 383.70907593]
[-132.18191528 398.41488647]
[-140.66874695 410.97473145]
[-152.94128418 419.87194824]
[-167.51757812 424.03216553]
[-182.63748169 422.95300293]
[-196.47515869 416.76477051]
[-207.35968018 406.21475220]
[-213.97666931 392.57690430]
[-215.52708435 377.49804688]
[-211.82373047 362.79901123]
[-203.31378174 350.25485229]
[-191.02485657 341.38024902]
[-176.44091797 337.24691772]
[-161.32304382 338.35394287]
[-147.49678040 344.56765747]
[-137.05696106 333.79684448]
[-126.61715698 323.02603149]
[-116.17734528 312.25521851]
[-105.73752594 301.48440552]
[-95.29771423 290.71362305]
[-91.99549103 276.18966675]
[-76.83494568 271.66546631]
[-66.39513397 260.89465332]
[-55.95532227 250.12385559]
[-64.37552643 240.85424805]
[-72.24561310 231.11325073]
[-79.53923035 220.93344116]
[-86.23198700 210.34890747]
[-92.30146790 199.39506531]
[-97.72737122 188.10858154]
[-102.49153900 176.52720642]
[-106.57801056 164.68971252]
[-109.97312927 152.63574219]
[-112.66551971 140.40559387]
[-114.64617920 128.04022217]
[-115.90847015 115.58100891]
[-116.44817352 103.06965637]
[-116.26348877 90.54801941]
[-115.35501862 78.05802155]
[-113.72582245 65.64146423]
[-111.38133240 53.33988571]
[-108.32941437 41.19446945]
[-104.58026886 29.24586105]
[-100.14645386 17.53404617]
[-95.04279327 6.09822369]
[-89.28638458 -5.02333498]
[-82.89647675 -15.79340839]
[-75.89447021 -26.17595291]
[-68.30378723 -36.13621902]
[-60.14983749 -45.64087296]
[-51.45991135 -54.65810776]
[-42.26308823 -63.15774155]
[-32.59014893 -71.11133575]
[-22.47346306 -78.49225616]
[-11.94689369 -85.27581787]
[-1.04566693 -91.43930817]
[10.19373226 -96.96210480]
[21.73368835 -101.82571411]
[33.53558350 -106.01387787]
[45.55991364 -109.51255798]
[57.76644135 -112.31005859]
[70.11431885 -114.39701843]
[82.56221008 -115.76644135]
[95.06845856 -116.41375732]
[107.59121704 -116.33679199]
[120.08856964 -115.53580475]
[132.51869202 -114.01348114]
[144.83998108 -111.77490997]
[157.01119995 -108.82758331]
[168.99160767 -105.18136597]
[180.74113464 -100.84845734]
[192.22044373 -95.84336853]
[203.39111328 -90.18284607]
[214.21575928 -83.88582611]
[224.65814209 -76.97338867]
[234.68334961 -69.46867371]
[244.25779724 -61.39678955]
[253.34944153 -52.78475571]
[261.92788696 -43.66139221]
[269.96438599 -34.05722809]
[277.43206787 -24.00441551]
[284.30593872 -13.53658962]
[290.56298828 -2.68878841]
[296.18225098 8.50268459]
[301.14495850 20.00037575]
[305.43447876 31.76580429]
[309.03649902 43.75959396]
[311.93890381 55.94160461]
[314.13198853 68.27106476]
[315.60845947 80.70671844]
[316.36334229 93.20693970]
[316.39410400 105.72989655]
[315.70065308 118.23367310]
[314.28530884 130.67642212]
[329.05136108 133.31529236]
[343.99746704 128.12644958]
[355.16506958 137.98211670]
[369.93112183 140.62097168]
[378.09872437 127.80072021]
[390.55352783 119.08603668]
[405.39633179 115.80585480]
[420.36370850 118.46038055]
[433.17321777 126.64482117]
[441.87149048 139.11109924]
[445.13214111 153.95820618]
[442.45794678 168.92205811]
[434.25665283 181.72079468]
[421.77896118 190.40267944]
[406.92755127 193.64379883]
[391.96722412 190.94990540]
[379.17932129 182.73179626]
[370.51385498 170.24266052]
[367.29226685 155.38703918]
[352.52621460 152.74816895]
[338.63626099 158.12576294]
[326.41250610 148.08134460]
[311.64645386 145.44248962]
[306.63711548 164.50064087]
[299.91549683 183.02429199]
[291.53720093 200.85995483]
[281.57174683 217.85983276]
[270.10162354 233.88304138]
[257.22195435 248.79681396]
[243.03944397 262.47753906]
[227.67160034 274.81188965]
[211.24580383 285.69763184]
[193.89813232 295.04455566]
[175.77236938 302.77520752]
[157.01870728 308.82553101]
[137.79254150 313.14538574]
[118.25321198 315.69900513]
[98.56262207 316.46517944]
[78.88394165 315.43756104]
[59.38024139 312.62472534]
[40.21314240 308.04992676]
[21.54147911 301.75106812]
[3.51997519 293.78039551]
[-13.70203304 284.20391846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[106 129]
[107 128]
[109 126]
[110 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
