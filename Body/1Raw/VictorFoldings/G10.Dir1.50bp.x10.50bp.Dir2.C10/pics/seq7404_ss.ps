%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAxxxxxxxxxxACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.12931824 453.82504272]
[146.12931824 438.82504272]
[146.12931824 423.82504272]
[146.12931824 408.82504272]
[146.12931824 393.82504272]
[146.12931824 378.82504272]
[146.12931824 363.82504272]
[146.12931824 348.82504272]
[146.12931824 333.82504272]
[146.12931824 318.82504272]
[144.26170349 303.94177246]
[133.61967468 293.52081299]
[137.70736694 278.23678589]
[134.00120544 263.70184326]
[123.35917664 253.28088379]
[127.44687653 237.99687195]
[123.74071503 223.46192932]
[120.03456116 208.92700195]
[109.39252472 198.50604248]
[113.48022461 183.22201538]
[109.77406311 168.68708801]
[106.06790161 154.15214539]
[102.36174011 139.61720276]
[98.65557861 125.08227539]
[78.74168396 113.37953186]
[76.80398560 90.36295319]
[65.30218506 80.73442841]
[53.80037689 71.10589600]
[41.02302170 63.24847412]
[27.24063873 57.32851028]
[13.45825768 51.40854645]
[8.00609303 70.92121124]
[-15.22619057 83.72007751]
[-30.20590401 82.94023132]
[-45.18561935 82.16039276]
[-60.16533279 81.38054657]
[-72.99845123 91.00814819]
[-88.49010468 86.83821869]
[-94.75641632 72.06957245]
[-86.99041748 58.03145218]
[-71.14951324 55.49270248]
[-59.38548660 66.40083313]
[-44.40577316 67.18067932]
[-29.42605972 67.96051788]
[-14.44634533 68.74036407]
[-11.63036728 61.78908920]
[-3.18243194 40.93525314]
[-14.48143673 31.06953049]
[-25.78044128 21.20380783]
[-37.07944489 11.33808422]
[-48.37845230 1.47236156]
[-59.67745590 -8.39336109]
[-70.97646332 -18.25908470]
[-86.88432312 -24.12220955]
[-85.65406799 -41.03145981]
[-69.06506348 -44.53023148]
[-61.11073685 -29.55809021]
[-49.81173325 -19.69236565]
[-38.51272964 -9.82664299]
[-27.21372223 0.03907984]
[-15.91471863 9.90480328]
[-4.61571360 19.77052689]
[6.68329096 29.63624954]
[19.37822151 37.62616348]
[33.16060257 43.54612732]
[46.94298172 49.46609116]
[38.76186371 36.89353180]
[35.90980911 22.16716766]
[38.80560303 7.44934225]
[47.02404404 -5.09885597]
[59.35837173 -13.63491440]
[73.99748993 -16.90544510]
[88.79185486 -14.43021774]
[101.56914520 -6.57268381]
[110.45320892 5.51339865]
[114.13955688 20.05337143]
[112.08690643 34.91226196]
[104.59666443 47.90826797]
[92.76864624 57.13312531]
[78.33961487 61.23230362]
[63.42890549 59.60409546]
[74.93070984 69.23262024]
[86.43251038 78.86114502]
[91.76616669 73.39834595]
[99.09102631 69.43820190]
[107.93918610 67.65630341]
[117.20413208 55.85966492]
[126.46908569 44.06302261]
[135.73403931 32.26638412]
[137.52075195 15.96486092]
[152.63854980 9.61001301]
[165.53553772 19.73916435]
[162.94439697 35.93231201]
[147.53067017 41.53133392]
[138.26571655 53.32797241]
[129.00077820 65.12461090]
[119.73582458 76.92125702]
[128.37493896 89.18362427]
[142.60171509 84.42980957]
[156.82850647 79.67599487]
[159.81799316 64.61084747]
[169.95161438 53.06938553]
[184.50344849 48.15619278]
[199.55914307 51.19289780]
[211.06880188 61.36264038]
[215.93635559 75.92980957]
[212.85246277 90.97591400]
[202.64669800 102.45362854]
[188.06434631 107.27549744]
[173.02798462 104.14447021]
[161.58232117 93.90277100]
[147.35552979 98.65658569]
[133.12875366 103.41040039]
[124.74530792 115.52274323]
[113.19051361 121.37611389]
[116.89667511 135.91104126]
[120.60283661 150.44598389]
[124.30899811 164.98092651]
[128.01516724 179.51585388]
[138.92228699 190.97645569]
[134.56948853 205.22084045]
[138.27565002 219.75576782]
[141.98181152 234.29071045]
[152.88893127 245.75129700]
[148.53614807 259.99569702]
[152.24230957 274.53063965]
[163.14942932 285.99121094]
[158.79664612 300.23559570]
[164.25044250 286.26220703]
[175.14463806 275.95120239]
[189.39666748 271.27365112]
[204.28213501 273.12371826]
[216.95553589 281.14776611]
[224.99421692 293.81185913]
[226.86151123 308.69519043]
[222.20046997 322.95260620]
[211.90208435 333.85873413]
[197.93499756 339.32870483]
[182.96916199 338.31689453]
[169.86543274 331.01672363]
[161.12931824 318.82504272]
[161.12931824 333.82504272]
[161.12931824 348.82504272]
[161.12931824 363.82504272]
[161.12931824 378.82504272]
[161.12931824 393.82504272]
[161.12931824 408.82504272]
[161.12931824 423.82504272]
[161.12931824 438.82504272]
[161.12931824 453.82504272]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[13 126]
[14 125]
[16 123]
[17 122]
[18 121]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[26 83]
[27 82]
[28 81]
[29 66]
[30 65]
[31 64]
[33 45]
[34 44]
[35 43]
[36 42]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[86 97]
[87 96]
[88 95]
[89 94]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
