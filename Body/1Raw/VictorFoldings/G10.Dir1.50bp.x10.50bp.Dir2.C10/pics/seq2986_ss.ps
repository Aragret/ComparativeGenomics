%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACxxxxxxxxxxUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.41838074 302.13714600]
[107.11437988 287.14022827]
[106.81037903 272.14331055]
[106.50637054 257.14639282]
[106.20236969 242.14947510]
[105.89836121 227.15255737]
[105.59436035 212.15563965]
[105.29035187 197.15872192]
[104.98635101 182.16180420]
[101.96687317 167.46885681]
[96.33211517 153.56742859]
[90.69735718 139.66600037]
[76.97364807 133.61128235]
[62.90736389 138.82086182]
[48.84108353 144.03044128]
[34.77480316 149.24002075]
[20.70851898 154.44960022]
[6.64223766 159.65917969]
[-7.42404413 164.86875916]
[-21.49032593 170.07833862]
[-35.55661011 175.28791809]
[-35.17201233 190.42497253]
[-39.72562790 204.86601257]
[-48.72351837 217.04454041]
[-61.18965912 225.63954163]
[-75.77181244 229.71868896]
[-90.88822174 228.83952332]
[-104.89916229 223.09738159]
[-116.28484344 213.11514282]
[-123.81022644 199.97561646]
[-126.65901184 185.10406494]
[-124.52218628 170.11363220]
[-117.63153839 156.63040161]
[-106.73451233 146.11691284]
[-93.01313782 139.71357727]
[-77.95580292 138.11500549]
[-63.19582367 141.49459839]
[-50.33423996 149.48574829]
[-40.76618576 161.22163391]
[-26.69990540 156.01205444]
[-12.63362312 150.80247498]
[1.43265879 145.59289551]
[15.49894047 140.38331604]
[29.56522369 135.17373657]
[43.63150406 129.96415710]
[57.69778824 124.75457764]
[71.76406860 119.54499817]
[68.71643066 109.35895538]
[69.04254150 99.25401306]
[72.38576508 90.26673889]
[59.98810577 81.82292175]
[43.60295486 81.14556122]
[36.23774338 66.49340057]
[45.46917343 52.93933487]
[61.80073929 54.42661667]
[68.43192291 69.42526245]
[80.82958221 77.86908722]
[92.37418365 71.73112488]
[105.43945312 71.23031616]
[111.90855408 57.69699478]
[118.37764740 44.16367340]
[124.84674835 30.63035393]
[131.31584167 17.09703255]
[137.78494263 3.56371260]
[144.11656189 -10.03447151]
[150.31005859 -23.69612122]
[156.50354004 -37.35777283]
[148.17276001 -57.66003036]
[164.82048035 -77.81078339]
[160.94447327 -93.14985657]
[171.72955322 -103.42269135]
[159.94073486 -94.14778900]
[145.21530151 -91.29090118]
[130.81344604 -95.48453522]
[119.92371368 -105.80023193]
[114.95704651 -119.95410919]
[117.01307678 -134.81253052]
[125.63658905 -147.08587646]
[138.91836548 -154.05683899]
[153.91784668 -154.18208313]
[167.31416321 -147.43385315]
[176.14141846 -135.30622864]
[178.44541931 -120.48597717]
[185.45764160 -133.74601746]
[192.46986389 -147.00605774]
[199.48210144 -160.26609802]
[206.49432373 -173.52613831]
[205.34472656 -189.88493347]
[219.08659363 -198.83441162]
[233.58348083 -191.16810608]
[233.92222595 -174.77246094]
[219.75436401 -166.51390076]
[212.74214172 -153.25387573]
[205.72990417 -139.99383545]
[198.71768188 -126.73378754]
[191.70544434 -113.47374725]
[186.21186829 -99.51593781]
[190.36730957 -85.21273804]
[179.30278015 -73.90402985]
[191.16441345 -64.72244263]
[204.20516968 -72.13450623]
[212.02923584 -86.54685974]
[228.42761230 -86.70665741]
[236.53105164 -72.44950867]
[228.00343323 -58.44194412]
[211.61724854 -59.09375000]
[198.57649231 -51.68168640]
[187.53791809 -33.94668579]
[170.16519165 -31.16428185]
[163.97171021 -17.50263214]
[157.77821350 -3.84098125]
[157.88136292 3.59332967]
[151.31826782 10.03281021]
[144.84916687 23.56613159]
[138.38006592 37.09945297]
[131.91096497 50.63277435]
[125.44187164 64.16609192]
[118.97277832 77.69941711]
[126.68917084 86.03295135]
[130.81661987 96.95751190]
[130.52403259 108.95312500]
[125.61412048 120.25261688]
[116.58705902 129.10191345]
[104.59878540 134.03125000]
[110.23353577 147.93267822]
[115.86829376 161.83409119]
[118.29497528 147.03169250]
[125.10136414 133.66482544]
[135.64486694 122.99549866]
[148.93003845 116.03101349]
[163.70262146 113.42890167]
[178.56788635 115.43482971]
[192.12239075 121.85942841]
[203.08642578 132.09613037]
[210.42485046 145.17846680]
[213.44483948 159.87130737]
[211.86126709 174.78747559]
[205.82363892 188.51872253]
[195.90197754 199.76864624]
[183.03300476 207.47511292]
[168.43171692 210.91053772]
[153.47662354 209.75059509]
[139.57969666 204.10479736]
[128.05293274 194.50614929]
[119.98326874 181.85778809]
[120.28727722 196.85472107]
[120.59127808 211.85163879]
[120.89527893 226.84855652]
[121.19928741 241.84547424]
[121.50328827 256.84237671]
[121.80729675 271.83929443]
[122.11129761 286.83624268]
[122.41530609 301.83316040]
[124.99598694 321.04226685]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 126]
[11 125]
[12 124]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[50 57]
[51 56]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 111]
[66 110]
[67 109]
[69 99]
[71 97]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
