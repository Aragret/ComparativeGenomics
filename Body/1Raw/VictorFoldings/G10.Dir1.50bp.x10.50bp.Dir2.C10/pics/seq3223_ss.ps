%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCxxxxxxxxxxGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.81686401 288.66955566]
[97.81686401 273.66955566]
[97.81686401 258.66955566]
[97.81686401 243.66955566]
[97.81686401 228.66955566]
[97.81686401 213.66955566]
[97.81686401 198.66955566]
[97.81686401 183.66955566]
[97.81686401 168.66955566]
[97.81686401 153.66955566]
[76.87072754 147.01008606]
[60.84064865 132.78224182]
[52.19522095 113.76764679]
[52.02248764 93.42630005]
[59.91067505 75.26931000]
[74.09408569 62.25286484]
[67.74695587 48.66191101]
[61.39982986 35.07096100]
[55.05270004 21.48001099]
[48.70557022 7.88905954]
[47.80777359 22.86216736]
[35.08148956 30.80204773]
[21.23825836 25.02581024]
[17.92973900 10.39523506]
[27.94074440 -0.77534890]
[13.81594181 4.27340746]
[-0.30886161 9.32216358]
[-10.50419807 22.16689682]
[-26.68380737 19.49251938]
[-32.20349503 4.05020523]
[-21.38507843 -8.27431965]
[-5.35761786 -4.80263901]
[8.76718521 -9.85139561]
[22.89198875 -14.90015221]
[30.34689903 -27.91646194]
[27.55457306 -42.65426636]
[17.38354874 -54.77288055]
[22.61635780 -68.71802521]
[19.82403374 -83.45582581]
[7.86365795 -89.73332977]
[1.80955791 -101.58979797]
[3.68240380 -114.57312775]
[12.57238197 -123.95209503]
[10.08726311 -138.74479675]
[7.60214424 -153.53750610]
[5.11702585 -168.33021545]
[-7.67659903 -173.55729675]
[-16.13643265 -184.34823608]
[-18.12704277 -197.80513000]
[-13.23230457 -210.38101196]
[-2.83674026 -218.81477356]
[-5.01357746 -233.65597534]
[-7.19041443 -248.49717712]
[-9.36725140 -263.33837891]
[-11.54408836 -278.17959595]
[-13.72092533 -293.02078247]
[-15.89776230 -307.86199951]
[-25.55586815 -320.39321899]
[-19.74748993 -334.10861206]
[-21.92432785 -348.94982910]
[-24.10116386 -363.79101562]
[-39.07651520 -365.69927979]
[-52.98125076 -371.57812500]
[-64.78354645 -380.99133301]
[-73.60758972 -393.24038696]
[-78.79858398 -407.41629028]
[-79.97132111 -422.46710205]
[-77.03877258 -437.27597046]
[-70.21855927 -450.74398804]
[-60.01678085 -461.87170410]
[-47.19047928 -469.83340454]
[-32.69145203 -474.03826904]
[-17.59562302 -474.17422485]
[-3.02320051 -470.23126221]
[9.94444275 -462.50189209]
[20.34502220 -451.55975342]
[27.40674400 -438.21679688]
[30.60558510 -423.46316528]
[29.70416641 -408.39364624]
[24.76938248 -394.12652588]
[16.16742516 -381.72052002]
[4.53661680 -372.09625244]
[-9.25995827 -365.96786499]
[-7.08312178 -351.12664795]
[-4.90628481 -336.28546143]
[4.59611940 -324.81576538]
[-1.05655658 -310.03884888]
[1.12028039 -295.19763184]
[3.29711747 -280.35641479]
[5.47395420 -265.51522827]
[7.65079117 -250.67401123]
[9.82762814 -235.83280945]
[12.00446510 -220.99160767]
[26.76074791 -213.86717224]
[34.46060562 -199.21528625]
[31.90802383 -182.69360352]
[19.90973282 -170.81533813]
[22.39485168 -156.02262878]
[24.87997055 -141.22991943]
[27.36508942 -126.43721771]
[41.45335007 -117.30601501]
[44.67259979 -100.48577881]
[34.56184006 -86.24815369]
[37.35416412 -71.51034546]
[47.32546616 -60.44588089]
[42.29238129 -45.44659042]
[45.08470535 -30.70878601]
[59.25744629 -27.58177948]
[67.07698059 -14.21222878]
[62.29652023 1.54193020]
[68.64365387 15.13288116]
[74.99078369 28.72383118]
[81.33791351 42.31478119]
[87.68504333 55.90573502]
[99.49552917 53.33967972]
[111.79608917 53.94217682]
[123.73589325 57.79025269]
[134.45863342 64.73251343]
[143.16377258 74.39191437]
[149.16580200 86.18497467]
[151.94723511 99.35640717]
[151.20126343 113.02735901]
[146.86059570 126.25399017]
[159.63795471 134.11141968]
[176.03688049 134.02514648]
[184.07630920 148.31849670]
[175.48596191 162.28767395]
[159.10285950 161.56240845]
[151.78053284 146.88877869]
[139.00317383 139.03135681]
[132.45658875 142.69090271]
[139.90272522 155.71223450]
[147.34886169 168.73356628]
[160.11767578 176.60487366]
[159.79725647 191.60144043]
[146.70387268 198.92015076]
[133.76203918 191.33666992]
[133.74620056 176.33747864]
[126.55482483 163.17375183]
[119.36344147 150.01000977]
[112.81686401 153.66955566]
[112.81686401 168.66955566]
[112.81686401 183.66955566]
[112.81686401 198.66955566]
[112.81686401 213.66955566]
[112.81686401 228.66955566]
[112.81686401 243.66955566]
[112.81686401 258.66955566]
[112.81686401 273.66955566]
[112.81686401 288.66955566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 114]
[17 113]
[18 112]
[19 111]
[20 110]
[25 34]
[26 33]
[27 32]
[35 107]
[36 106]
[38 104]
[39 103]
[43 100]
[44 99]
[45 98]
[46 97]
[51 93]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[59 85]
[60 84]
[61 83]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
