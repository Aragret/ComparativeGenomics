%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGxxxxxxxxxxGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.94787598]
[92.50000000 235.94787598]
[92.50000000 220.94787598]
[92.50000000 205.94787598]
[92.50000000 190.94787598]
[92.50000000 175.94787598]
[92.50000000 160.94787598]
[92.50000000 145.94787598]
[92.50000000 130.94787598]
[92.50000000 115.94787598]
[87.59844971 101.77131653]
[78.33349609 89.97467804]
[69.06855011 78.17803192]
[58.40692520 67.62674713]
[46.51454544 58.48501205]
[34.62216568 49.34327698]
[22.72978592 40.20154190]
[13.95774174 37.42609787]
[10.68771744 30.74383736]
[-1.01190603 21.35667610]
[-12.71152973 11.96951389]
[-11.47049236 26.91808701]
[-19.98499489 39.26730728]
[-34.39788437 43.42285538]
[-48.17998123 37.50223160]
[-55.08786011 24.18753242]
[-51.99218750 9.51044846]
[-40.29532623 0.11984254]
[-25.29569817 0.26989004]
[-35.50917816 -10.71577454]
[-45.72265625 -21.70143890]
[-55.93613815 -32.68710327]
[-68.81491089 -33.94843674]
[-77.09640503 -43.36310196]
[-76.72808838 -55.49453354]
[-87.81940460 -65.59318542]
[-99.89939117 -74.48553467]
[-111.97937775 -83.37788391]
[-124.24174500 -92.01699829]
[-136.68118286 -100.39913940]
[-149.12062073 -108.78128815]
[-161.56007385 -117.16342926]
[-173.99951172 -125.54557037]
[-186.43894958 -133.92771912]
[-198.96490479 -142.18000793]
[-211.57603455 -150.30154419]
[-224.18716431 -158.42309570]
[-236.79829407 -166.54463196]
[-252.18959045 -162.95526123]
[-265.56665039 -171.37130737]
[-268.99310303 -186.79969788]
[-260.43606567 -200.08702087]
[-244.97232056 -203.35015869]
[-231.77621460 -194.65313721]
[-228.67675781 -179.15576172]
[-216.06562805 -171.03421021]
[-203.45449829 -162.91267395]
[-190.84336853 -154.79113770]
[-183.46922302 -153.80741882]
[-178.05680847 -146.36715698]
[-165.61737061 -137.98501587]
[-153.17791748 -129.60287476]
[-140.73847961 -121.22072601]
[-128.29904175 -112.83858490]
[-115.85960388 -104.45643616]
[-111.02490234 -104.49104309]
[-106.13091278 -101.44471741]
[-103.08702850 -95.45787048]
[-91.00704193 -86.56552124]
[-78.92705536 -77.67317200]
[-82.82286072 -92.15842438]
[-79.08724213 -106.68582153]
[-68.68714142 -117.49497986]
[-54.31459045 -121.78797913]
[-39.68988800 -118.45359802]
[-28.59859085 -108.35493469]
[-23.91164780 -94.10597992]
[-26.84225845 -79.39505005]
[-36.63184357 -68.03001404]
[-50.74639893 -62.95268250]
[-65.53231812 -65.47725677]
[-48.61505890 -60.91587448]
[-44.95047379 -42.90058517]
[-34.73699188 -31.91491890]
[-24.52351189 -20.92925453]
[-14.31003284 -9.94359016]
[-3.32436800 0.26989004]
[8.37525558 9.65705204]
[20.07487869 19.04421425]
[31.87151909 28.30916214]
[43.76390076 37.45089722]
[55.65628052 46.59263229]
[67.54866028 55.73436737]
[82.54135132 56.20240784]
[94.98079681 47.82026291]
[107.42023468 39.43812180]
[119.85967255 31.05597878]
[129.61625671 17.19071388]
[145.64054871 22.72771454]
[144.75590515 39.65856552]
[128.24182129 43.49541855]
[115.80237579 51.87755966]
[103.36293793 60.25970459]
[90.92350006 68.64184570]
[85.83812714 69.17718506]
[80.86518860 68.91308594]
[90.13014221 80.70972443]
[99.39508820 92.50636292]
[103.30028534 85.05600739]
[111.37789154 79.90775299]
[122.43044281 78.78171539]
[134.64804077 82.84527588]
[149.22074890 86.40003204]
[163.79344177 89.95479584]
[178.36614990 93.50955963]
[192.93885803 97.06432343]
[207.33987427 89.99395752]
[221.78448486 96.97483826]
[225.19201660 112.65184021]
[214.94850159 124.99890137]
[198.91188049 124.54441071]
[189.38409424 111.63702393]
[174.81138611 108.08226013]
[160.23867798 104.52749634]
[145.66598511 100.97274017]
[131.09327698 97.41797638]
[125.19496155 102.05045319]
[136.27946472 112.15657043]
[147.36396790 122.26269531]
[158.44847107 132.36882019]
[172.18611145 138.39187622]
[178.98020935 151.76499939]
[175.74360657 166.41165161]
[163.94700623 175.67663574]
[148.95054626 175.35009766]
[137.56842041 165.58039856]
[134.97247314 150.80661011]
[127.78108978 137.64288330]
[120.58970642 124.47913361]
[113.39832306 111.31539917]
[107.50000000 115.94787598]
[107.50000000 130.94787598]
[107.50000000 145.94787598]
[107.50000000 160.94787598]
[107.50000000 175.94787598]
[107.50000000 190.94787598]
[107.50000000 205.94787598]
[107.50000000 220.94787598]
[107.50000000 235.94787598]
[107.50000000 250.94787598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 108]
[12 107]
[13 106]
[14 93]
[15 92]
[16 91]
[17 90]
[19 89]
[20 88]
[21 87]
[29 86]
[30 85]
[31 84]
[32 83]
[35 81]
[36 70]
[37 69]
[38 68]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 58]
[46 57]
[47 56]
[48 55]
[94 104]
[95 103]
[96 102]
[97 101]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
