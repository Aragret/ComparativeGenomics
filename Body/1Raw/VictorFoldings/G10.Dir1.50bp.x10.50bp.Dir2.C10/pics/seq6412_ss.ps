%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.48400116 301.12615967]
[121.48400116 286.12615967]
[121.48400116 271.12615967]
[121.48400116 256.12615967]
[121.48400116 241.12617493]
[121.48400116 226.12617493]
[121.48400116 211.12617493]
[121.48400116 196.12617493]
[121.48400116 181.12617493]
[121.48400116 166.12617493]
[118.50514221 151.42492676]
[112.66609192 137.60807800]
[106.82704163 123.79122162]
[91.97972107 121.65650177]
[82.48453522 133.26861572]
[82.64838409 149.31083679]
[70.11775970 159.32896423]
[54.50506973 155.63795471]
[47.78704453 141.06922913]
[55.11717224 126.79867554]
[70.87240601 123.77343750]
[80.36759186 112.16130829]
[76.01716614 106.05199432]
[67.31631470 93.83335114]
[62.96588898 87.72402954]
[48.88684845 92.89904022]
[34.80781174 98.07404327]
[20.72877312 103.24904633]
[6.64973450 108.42405701]
[-1.36215329 122.32331085]
[-17.24529076 124.58283997]
[-28.81549454 113.46933746]
[-27.19709396 97.50812531]
[-13.63158703 88.94328308]
[1.47472906 94.34501648]
[15.55376720 89.17001343]
[29.63280487 83.99500275]
[43.71184540 78.81999969]
[57.79088211 73.64499664]
[66.49173737 61.42635727]
[66.77732086 46.42907333]
[67.06289673 31.43179321]
[67.34848022 16.43451118]
[57.25548935 7.43944359]
[54.52671814 -5.38539028]
[40.88223648 -11.61661530]
[27.23775673 -17.84784126]
[13.59327602 -24.07906532]
[0.14857228 -16.33183670]
[-15.27854538 -18.00027084]
[-26.75603485 -28.44282341]
[-29.87056732 -43.64411545]
[-23.42453957 -57.75894547]
[-9.89658451 -65.35987091]
[5.51152563 -63.52417755]
[16.87505722 -52.95773315]
[19.82450104 -37.72354507]
[33.46898270 -31.49232101]
[47.11346054 -25.26109505]
[60.75794220 -19.02987099]
[64.97200012 -22.20143890]
[69.84951782 -24.20818520]
[75.07539368 -24.92047119]
[80.38420105 -38.94960785]
[68.78280640 -29.44130898]
[55.38258743 -22.70082664]
[40.83250046 -19.05459785]
[25.83720016 -18.67920685]
[11.12289429 -21.59283447]
[-2.59780979 -27.65437508]
[-14.66042900 -36.57027054]
[-24.48077774 -47.90873337]
[-31.58326530 -61.12064743]
[-35.62392044 -75.56616974]
[-36.40705872 -90.54571533]
[-33.89475250 -105.33382416]
[-28.20867157 -119.21433258]
[-19.62418938 -131.51501465]
[-8.55704403 -141.64013672]
[4.45678711 -149.09938049]
[18.78705406 -153.53147888]
[33.73975372 -154.72177124]
[48.59073257 -152.61265564]
[62.62076950 -147.30624390]
[75.15039825 -139.05952454]
[85.57282257 -128.27188110]
[93.38328552 -115.46576691]
[98.20353699 -101.26136017]
[99.80013275 -86.34657288]
[98.09574890 -71.44371796]
[93.17456055 -57.27796555]
[104.51080322 -67.10087585]
[115.84705353 -76.92378998]
[127.18329620 -86.74669647]
[138.51953125 -96.56961060]
[142.98252869 -104.59271240]
[150.16638184 -106.46911621]
[161.68759155 -116.07441711]
[173.20880127 -125.67972565]
[184.73001099 -135.28501892]
[196.25120544 -144.89031982]
[207.77241516 -154.49563599]
[208.95001221 -170.25598145]
[220.98130798 -180.50408936]
[236.72833252 -179.15992737]
[246.84866333 -167.02096558]
[245.33808899 -151.28903198]
[233.09280396 -141.29760742]
[217.37771606 -142.97442627]
[205.85650635 -133.36912537]
[194.33531189 -123.76381683]
[182.81410217 -114.15851593]
[171.29289246 -104.55321503]
[159.77169800 -94.94791412]
[148.34245300 -85.23336792]
[137.00621033 -75.41045380]
[125.66996002 -65.58754730]
[114.33371735 -55.76463318]
[102.99747467 -45.94172287]
[94.41333008 -33.64080429]
[89.10453033 -19.61167145]
[96.21537781 0.12270358]
[82.34576416 16.72009468]
[82.06018066 31.71737480]
[81.77459717 46.71465683]
[81.48901367 61.71193695]
[103.82674408 60.69185257]
[121.90294647 70.85230255]
[131.05397034 87.63301086]
[129.96200562 105.09353638]
[120.64389801 117.95217133]
[126.48294830 131.76902771]
[132.32200623 145.58587646]
[134.15402222 130.69818115]
[139.86981201 116.82987976]
[149.05979919 104.97474670]
[161.06546021 95.98229218]
[175.02648926 90.49689484]
[189.94247437 88.91161346]
[204.74459839 91.34005737]
[218.37216187 97.60819244]
[229.84864807 107.26688385]
[238.35168457 119.62399292]
[243.27197266 133.79406738]
[244.25694275 148.76168823]
[241.23600769 163.45433044]
[234.42562866 176.81916809]
[224.31382751 187.89849854]
[211.62519836 195.89840698]
[197.26896667 200.24565125]
[182.27384949 200.62870789]
[167.71438599 197.02014160]
[154.63383484 189.67851257]
[143.96954346 179.12992859]
[136.48399353 166.12617493]
[136.48399353 181.12617493]
[136.48399353 196.12617493]
[136.48399353 211.12617493]
[136.48399353 226.12617493]
[136.48399353 241.12617493]
[136.48399353 256.12615967]
[136.48399353 271.12615967]
[136.48399353 286.12615967]
[136.48399353 301.12615967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 164]
[2 163]
[3 162]
[4 161]
[5 160]
[6 159]
[7 158]
[8 157]
[9 156]
[10 155]
[11 133]
[12 132]
[13 131]
[14 22]
[15 21]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[40 126]
[41 125]
[42 124]
[43 123]
[45 60]
[46 59]
[47 58]
[48 57]
[63 121]
[64 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
