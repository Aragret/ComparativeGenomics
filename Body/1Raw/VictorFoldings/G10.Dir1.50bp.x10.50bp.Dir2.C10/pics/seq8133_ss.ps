%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAAxxxxxxxxxxCUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 303.29168701]
[92.50000000 288.29168701]
[92.50000000 273.29168701]
[92.50000000 258.29168701]
[92.50000000 243.29168701]
[92.50000000 228.29168701]
[92.50000000 213.29168701]
[92.50000000 198.29168701]
[92.50000000 183.29168701]
[92.50000000 168.29168701]
[79.14644623 165.46093750]
[66.61611938 160.04598999]
[55.40368271 152.26062012]
[45.95176697 142.41218567]
[38.63350296 130.88943481]
[33.73778915 118.14727783]
[31.45789337 104.68872833]
[31.88382149 91.04507446]
[34.99875641 77.75493622]
[40.67973328 65.34296417]
[48.70248032 54.29913330]
[58.75029373 45.05943298]
[70.42650604 37.98860550]
[83.27019501 33.36579132]
[96.77431488 31.37347794]
[97.70994568 16.40268707]
[98.64556885 1.43189561]
[99.58119965 -13.53889561]
[100.51683044 -28.50968742]
[85.63272095 -30.41291618]
[70.90302277 -33.27560043]
[56.38952255 -37.08573532]
[42.15308762 -41.82734299]
[28.25343132 -47.48052979]
[14.74885941 -54.02158356]
[1.69601047 -61.42307663]
[-10.85036469 -69.65395355]
[-22.83764267 -78.67970276]
[-34.21554565 -88.46245575]
[-44.93634796 -98.96118164]
[-54.95508194 -110.13185120]
[-64.22972870 -121.92760468]
[-72.72138214 -134.29898071]
[-80.39443207 -147.19406128]
[-87.21668243 -160.55877686]
[-93.15953064 -174.33708191]
[-98.19805145 -188.47116089]
[-102.31109619 -202.90174866]
[-105.48143005 -217.56829834]
[-107.69574738 -232.40931702]
[-108.94475555 -247.36253357]
[-109.22322845 -262.36523438]
[-108.52998352 -277.35452271]
[-106.86794281 -292.26748657]
[-104.24407196 -307.04159546]
[-100.66936493 -321.61486816]
[-96.15883636 -335.92620850]
[-90.73139191 -349.91552734]
[-84.40979004 -363.52423096]
[-77.22056580 -376.69515991]
[-69.19385529 -389.37313843]
[-60.36333847 -401.50494385]
[-50.76604462 -413.03973389]
[-40.44223404 -423.92907715]
[-29.43520546 -434.12731934]
[-17.79112816 -443.59167480]
[-5.55883980 -452.28250122]
[7.21035051 -460.16326904]
[20.46288490 -467.20095825]
[34.14317703 -473.36608887]
[48.19384384 -478.63272095]
[62.55595779 -482.97882080]
[77.16927338 -486.38616943]
[91.97250366 -488.84042358]
[106.90354919 -490.33132935]
[121.89978790 -490.85260010]
[136.89831543 -490.40209961]
[151.83622742 -488.98168945]
[166.65087891 -486.59729004]
[181.28010559 -483.25897217]
[195.66256714 -478.98068237]
[209.73794556 -473.78039551]
[223.44717407 -467.67993164]
[236.73277283 -460.70483398]
[249.53901672 -452.88442993]
[261.81216431 -444.25143433]
[273.50079346 -434.84213257]
[284.55581665 -424.69592285]
[294.93090820 -413.85543823]
[304.58251953 -402.36608887]
[313.47018433 -390.27606201]
[321.55664062 -377.63613892]
[328.80795288 -364.49926758]
[335.19369507 -350.92056274]
[340.68710327 -336.95697021]
[345.26510620 -322.66708374]
[348.90856934 -308.11083984]
[351.60211182 -293.34930420]
[353.33453369 -278.44433594]
[354.09848022 -263.45849609]
[353.89083862 -248.45463562]
[352.71240234 -233.49569702]
[350.56814575 -218.64439392]
[347.46707153 -203.96304321]
[343.42214966 -189.51319885]
[338.45040894 -175.35549927]
[332.57263184 -161.54931641]
[325.81353760 -148.15254211]
[318.20141602 -135.22138977]
[309.76824951 -122.81008911]
[300.54937744 -110.97069550]
[290.58346558 -99.75287628]
[279.91232300 -89.20366669]
[268.58071899 -79.36733246]
[256.63616943 -70.28511810]
[244.12876892 -61.99511719]
[231.11099243 -54.53211212]
[217.63743591 -47.92739868]
[203.76461792 -42.20867920]
[189.55072021 -37.39994431]
[175.05535889 -33.52135849]
[160.33934021 -30.58919334]
[145.46438599 -28.61574554]
[130.49287415 -27.60929298]
[115.48761749 -27.57405853]
[114.55199432 -12.60326767]
[113.61636353 2.36752415]
[112.68073273 17.33831596]
[111.74510193 32.30910873]
[127.39594269 36.99629593]
[141.49752808 45.24636841]
[153.25239563 56.59278488]
[161.99583435 70.39389801]
[167.23336792 85.86925507]
[168.66883850 102.14370728]
[166.22103882 118.29692841]
[160.02842712 133.41545105]
[150.44117737 146.64431763]
[138.00144958 157.23542786]
[123.41271973 164.58984375]
[107.50000000 168.29168701]
[107.50000000 183.29168701]
[107.50000000 198.29168701]
[107.50000000 213.29168701]
[107.50000000 228.29168701]
[107.50000000 243.29168701]
[107.50000000 258.29168701]
[107.50000000 273.29168701]
[107.50000000 288.29168701]
[107.50000000 303.29168701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
