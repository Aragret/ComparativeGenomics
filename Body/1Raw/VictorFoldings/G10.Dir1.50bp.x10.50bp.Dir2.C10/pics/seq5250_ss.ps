%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.80735779 286.49334717]
[79.80735779 271.49334717]
[79.80735779 256.49334717]
[79.80735779 241.49336243]
[79.80735779 226.49336243]
[79.80735779 211.49336243]
[79.80735779 196.49336243]
[79.80735779 181.49336243]
[79.80735779 166.49336243]
[79.80735779 151.49336243]
[66.71420288 144.17425537]
[53.93684769 152.03167725]
[41.15949249 159.88909912]
[33.45719528 173.70884705]
[18.56278229 173.78492737]
[5.78542519 181.64236450]
[8.85501099 196.48666382]
[6.65935469 211.48516846]
[-0.53640729 224.82670593]
[-11.86335182 234.90023804]
[-25.95369530 240.48934937]
[-41.10596085 240.91909790]
[-55.49043655 236.13760376]
[-67.37012482 226.72225952]
[-75.31050873 213.81001282]
[-78.35272980 198.96006775]
[-76.12944031 183.96565247]
[-68.90910339 170.63739014]
[-57.56361008 160.58474731]
[-43.46299362 155.02162170]
[-28.30996132 154.61979675]
[-13.93432140 159.42778015]
[-2.07200050 168.86500549]
[10.70535660 161.00758362]
[17.49373245 147.74984741]
[33.30206680 147.11175537]
[46.07942200 139.25431824]
[58.85678101 131.39689636]
[51.56705856 116.66651917]
[49.31691742 100.55780029]
[52.22961426 84.72877502]
[59.90249252 70.77475739]
[71.45877838 60.06756592]
[85.64657593 53.62084198]
[100.97399139 51.99463272]
[115.86582947 55.24816132]
[123.04833984 42.07957840]
[130.23085022 28.91099548]
[137.41336060 15.74241257]
[144.45849609 2.49982738]
[151.36549377 -10.81532860]
[157.71261597 -24.40627861]
[163.48889160 -38.24949646]
[163.01533508 -44.94899368]
[165.64192200 -50.08049774]
[169.80416870 -52.54040909]
[176.15130615 -66.13135529]
[182.49842834 -79.72231293]
[188.84556580 -93.31326294]
[186.80177307 -111.58353424]
[201.50135803 -121.11882782]
[207.56437683 -134.83888245]
[205.14093018 -153.06268311]
[219.63897705 -162.90171814]
[225.41525269 -176.74493408]
[231.19152832 -190.58815002]
[236.96778870 -204.43136597]
[224.26715088 -212.48130798]
[213.10975647 -222.56201172]
[203.81663513 -234.38342285]
[196.65515137 -247.60542297]
[191.83137512 -261.84759521]
[189.48410034 -276.70013428]
[189.68083191 -291.73574829]
[192.41593933 -306.52178955]
[197.61071777 -320.63287354]
[205.11570740 -333.66293335]
[214.71496582 -345.23715210]
[226.13230896 -355.02246094]
[239.03924561 -362.73733521]
[253.06439209 -368.15979004]
[267.80426025 -371.13381958]
[282.83468628 -371.57385254]
[297.72329712 -369.46725464]
[312.04165649 -364.87457275]
[325.37780762 -357.92800903]
[337.34805298 -348.82739258]
[347.60800171 -337.83459473]
[355.86242676 -325.26589966]
[361.87384033 -311.48291016]
[365.46929932 -296.88220215]
[366.54531860 -281.88385010]
[365.07098389 -266.91943359]
[361.08865356 -252.41944885]
[354.71298218 -238.80113220]
[346.12734985 -226.45628357]
[335.57879639 -215.74011230]
[323.37084961 -206.96093750]
[309.85473633 -200.37133789]
[295.41937256 -196.16093445]
[280.48004150 -194.45085144]
[265.46658325 -195.29028320]
[250.81100464 -198.65509033]
[245.03474426 -184.81187439]
[239.25846863 -170.96865845]
[233.48219299 -157.12544250]
[237.79447937 -145.78033447]
[233.04403687 -134.17636108]
[221.28442383 -128.77586365]
[215.22142029 -115.05580902]
[219.29675293 -103.62345123]
[214.30593872 -92.12081146]
[202.43650818 -86.96613312]
[196.08938599 -73.37518311]
[189.74224854 -59.78422928]
[183.39512634 -46.19327927]
[177.33210754 -32.47322464]
[171.55583191 -18.63000679]
[172.55194092 -15.94391251]
[172.50871277 -12.68936062]
[171.19946289 -9.27354813]
[168.55398560 -6.17960405]
[164.68064880 -3.90832973]
[157.77365112 9.40682602]
[157.48362732 16.84063721]
[150.58193970 22.92492104]
[143.39942932 36.09350586]
[136.21691895 49.26208878]
[129.03440857 62.43066788]
[136.66474915 69.27390289]
[142.69911194 77.65316772]
[146.83157349 87.19958496]
[148.84078979 97.48412323]
[148.60165405 108.03687286]
[146.09254456 118.36852264]
[141.39785767 127.99301910]
[134.70555115 136.45046997]
[126.29981232 143.32904053]
[116.54905701 148.28501892]
[105.88984680 151.05981445]
[94.80735779 151.49336243]
[94.80735779 166.49336243]
[94.80735779 181.49336243]
[94.80735779 196.49336243]
[94.80735779 211.49336243]
[94.80735779 226.49336243]
[94.80735779 241.49336243]
[94.80735779 256.49334717]
[94.80735779 271.49334717]
[94.80735779 286.49334717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[46 129]
[47 128]
[48 127]
[49 126]
[50 124]
[51 123]
[52 118]
[53 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 110]
[62 109]
[64 106]
[65 105]
[66 104]
[67 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
