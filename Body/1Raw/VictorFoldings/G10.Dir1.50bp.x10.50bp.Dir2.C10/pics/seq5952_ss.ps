%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAxxxxxxxxxxUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.92091370 400.62478638]
[108.92091370 385.62478638]
[108.92091370 370.62478638]
[108.92091370 355.62478638]
[108.92091370 340.62478638]
[108.92091370 325.62478638]
[108.92091370 310.62478638]
[108.92091370 295.62478638]
[108.92091370 280.62478638]
[108.92091370 265.62478638]
[91.55482483 259.32681274]
[77.85254669 246.88937378]
[69.87946320 230.15406799]
[68.84992981 211.61273193]
[74.94240570 194.03646851]
[87.26908112 180.06144714]
[104.00518799 171.79357910]
[102.44760895 156.87466431]
[100.89002991 141.95574951]
[99.33244324 127.03683472]
[79.10002136 109.59486389]
[85.32942963 88.00624084]
[78.42243195 74.69108582]
[71.51543427 61.37592697]
[55.78471375 51.86150360]
[57.18354416 34.39601517]
[50.00103378 21.22743416]
[42.81852722 8.05885029]
[35.63601685 -5.10973167]
[19.71076584 -14.29484081]
[20.74594498 -31.78564835]
[13.29103470 -44.80195618]
[5.83612394 -57.81826782]
[-1.61878622 -70.83457947]
[-9.07369614 -83.85088348]
[-16.52860641 -96.86719513]
[-23.98351669 -109.88350677]
[-37.80622864 -104.01247406]
[-52.22631836 -99.81755066]
[-67.04135132 -97.35762024]
[-82.04333496 -96.66721344]
[-97.02168274 -97.75602722]
[-111.76611328 -100.60877228]
[-126.06963348 -105.18540192]
[-139.73146057 -111.42166901]
[-152.55978394 -119.23002625]
[-164.37452698 -128.50085449]
[-175.00981140 -139.10400391]
[-184.31636047 -150.89064026]
[-192.16351318 -163.69526672]
[-198.44110107 -177.33815002]
[-203.06100464 -191.62776184]
[-205.95837402 -206.36347961]
[-207.09251404 -221.33847046]
[-206.44750977 -236.34248352]
[-204.03244019 -251.16488647]
[-199.88117981 -265.59759521]
[-194.05201721 -279.43801880]
[-186.62677002 -292.49185181]
[-177.70971680 -304.57580566]
[-167.42599487 -315.52029419]
[-155.91999817 -325.17163086]
[-143.35324097 -333.39434814]
[-129.90214539 -340.07299805]
[-115.75553894 -345.11383057]
[-101.11202240 -348.44607544]
[-86.17717743 -350.02294922]
[-71.16064453 -349.82235718]
[-56.27325058 -347.84704590]
[-41.72398376 -344.12478638]
[-27.71709061 -338.70785522]
[-14.44921112 -331.67224121]
[-2.10660410 -323.11676025]
[9.13746071 -313.16146851]
[19.12513161 -301.94619751]
[27.71620178 -289.62832642]
[34.79006195 -276.38079834]
[40.24740601 -262.38958740]
[44.01162720 -247.85112000]
[46.02987289 -232.96949768]
[46.27381516 -217.95361328]
[44.74003220 -203.01426697]
[41.45005035 -188.36120605]
[36.45005798 -174.20010376]
[29.81024933 -160.72979736]
[21.62383270 -148.13937378]
[12.00573540 -136.60556030]
[1.09097981 -126.29031372]
[-10.96720791 -117.33841705]
[-3.51229739 -104.32210541]
[3.94261289 -91.30579376]
[11.39752293 -78.28948975]
[18.85243416 -65.27317810]
[26.30734444 -52.25686646]
[33.76225281 -39.24055862]
[45.38506317 -35.74518585]
[51.68983841 -24.90688515]
[48.80459976 -12.29224110]
[55.98711014 0.87634182]
[63.16961670 14.04492474]
[70.35212708 27.21350670]
[81.89970398 30.94992256]
[87.97763824 41.91703796]
[84.83058929 54.46892929]
[91.73758698 67.78408813]
[98.64458466 81.09924316]
[115.72390747 83.21818542]
[127.04450226 100.17639923]
[141.90754700 102.19873047]
[156.77059937 104.22106171]
[171.63363647 106.24340057]
[186.49668884 108.26573181]
[201.35974121 110.28807068]
[213.78640747 100.52317047]
[229.46804810 102.48825073]
[239.10102844 115.01747131]
[236.97026062 130.67745972]
[224.33988953 140.17742920]
[208.70330811 137.88121033]
[199.33740234 125.15111542]
[184.47434998 123.12878418]
[169.61131287 121.10644531]
[154.74826050 119.08411407]
[139.88520813 117.06177521]
[125.02216339 115.03944397]
[114.25135803 125.47925568]
[115.80893707 140.39816284]
[117.36651611 155.31707764]
[118.92410278 170.23599243]
[130.50784302 172.32130432]
[141.23222351 177.14204407]
[150.46253967 184.40660095]
[157.65402222 193.67889404]
[162.38403320 204.40461731]
[164.37684631 215.94429016]
[163.51977539 227.61143494]
[159.86944580 238.71340942]
[153.64819336 248.59251404]
[145.23042297 256.66497803]
[135.12019348 262.45538330]
[123.92091370 265.62478638]
[123.92091370 280.62478638]
[123.92091370 295.62478638]
[123.92091370 310.62478638]
[123.92091370 325.62478638]
[123.92091370 340.62478638]
[123.92091370 355.62478638]
[123.92091370 370.62478638]
[123.92091370 385.62478638]
[123.92091370 400.62478638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 129]
[18 128]
[19 127]
[20 126]
[22 106]
[23 105]
[24 104]
[26 101]
[27 100]
[28 99]
[29 98]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
