%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUxxxxxxxxxxCCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.86619568 297.47860718]
[77.55821991 282.48175049]
[77.25024414 267.48492432]
[76.94226837 252.48808289]
[76.63428497 237.49125671]
[76.32630920 222.49441528]
[76.01833344 207.49757385]
[75.71035767 192.50073242]
[75.40237427 177.50389099]
[62.11503601 170.54354858]
[49.61100006 178.82901001]
[37.10696411 187.11448669]
[24.60292816 195.39996338]
[24.11727142 212.27789307]
[13.78783226 225.42442322]
[-2.17622447 229.80171204]
[-17.45716286 223.88198853]
[-29.78844643 232.42245483]
[-42.11972809 240.96290588]
[-42.33553314 256.47848511]
[-51.65688705 268.88381958]
[-66.49953461 273.40878296]
[-81.15618134 268.31344604]
[-89.99104309 255.55708313]
[-89.60694122 240.04476929]
[-80.15156555 227.74130249]
[-65.26069641 223.37760925]
[-50.66019058 228.63162231]
[-38.32890320 220.09117126]
[-25.99762154 211.55070496]
[-26.93125916 198.19854736]
[-21.08440971 186.03788757]
[-9.89427471 178.30574036]
[3.76438308 177.11897278]
[16.31745338 182.89593506]
[28.82148933 174.61045837]
[41.32552338 166.32498169]
[53.82955933 158.03950500]
[62.86907959 146.06924438]
[67.41636658 131.77511597]
[71.96366119 117.48098755]
[67.12384033 103.28323364]
[54.79256058 94.74277496]
[42.46127701 86.20231628]
[44.77309799 101.02309418]
[37.16574860 113.95090485]
[23.08698845 119.12667084]
[8.91752243 114.20465088]
[1.07916117 101.41558838]
[3.12436652 86.55567169]
[14.12622070 76.35963440]
[29.09681892 75.44797516]
[18.11601639 65.22927094]
[7.13521433 55.01056290]
[-8.95987701 51.86730576]
[-14.02864170 36.27116394]
[-2.85676956 24.26611137]
[13.06307602 28.20191765]
[17.35392189 44.02976227]
[28.33472443 54.24847031]
[39.31552505 64.46717834]
[51.00173569 73.87103271]
[63.33301926 82.41149139]
[75.66430664 90.95195007]
[90.63514709 78.95014191]
[107.41689301 81.30259705]
[117.74780273 70.42728424]
[128.07870483 59.55196762]
[113.62263489 63.55473328]
[98.62393188 63.75220490]
[84.06749725 60.13142014]
[70.90917206 52.93013382]
[60.01300812 42.62122345]
[52.09450912 29.88162804]
[47.67363739 15.54789448]
[47.04069901 0.56125450]
[50.23725128 -14.09418964]
[57.05339432 -27.45608330]
[67.04154205 -38.64701462]
[79.54581451 -46.93212128]
[93.74512482 -51.76736832]
[108.70706940 -52.83523941]
[123.44915771 -50.06561661]
[137.00335693 -43.64036560]
[148.47961426 -33.98140717]
[157.12434387 -21.72299576]
[162.36987305 -7.67008448]
[163.87178040 7.25453568]
[161.53141785 22.07083511]
[155.50248718 35.80589676]
[146.18330383 47.55541992]
[160.22528076 42.28067780]
[174.26725769 37.00593567]
[178.82034302 32.07520294]
[184.35385132 30.47269821]
[188.99551392 31.81589699]
[203.24221802 27.12209702]
[217.48890686 22.42829704]
[224.71394348 16.73667717]
[232.07653809 17.78763771]
[246.41659546 13.38733673]
[260.75665283 8.98703671]
[264.11804199 -5.99951267]
[274.53414917 -17.28667450]
[289.20312500 -21.83825874]
[304.17907715 -18.42991447]
[315.43353271 -7.97846603]
[319.93911743 6.70469761]
[316.48382568 21.66987991]
[305.99716187 32.89152145]
[291.29995728 37.35105896]
[276.34567261 33.84889603]
[265.15695190 23.32709694]
[250.81689453 27.72739792]
[236.47683716 32.12769699]
[222.18270874 36.67498779]
[207.93601990 41.36878967]
[193.68931580 46.06259155]
[179.54200745 51.04791260]
[165.50003052 56.32265472]
[151.45805359 61.59739304]
[138.95401001 69.88286591]
[128.62310791 80.75818634]
[118.29221344 91.63349915]
[120.11468506 109.06816101]
[106.97591400 122.97822571]
[86.25778961 122.02827454]
[81.71050262 136.32240295]
[77.16320801 150.61653137]
[88.00680542 140.25234985]
[98.18633270 129.23521423]
[111.85362244 123.05418396]
[126.84910583 122.68590546]
[140.80332947 128.18858337]
[151.51141357 138.69271851]
[157.28135681 152.53857422]
[157.20144653 167.53836060]
[151.28433228 181.32196045]
[140.46495056 191.71144104]
[126.45288086 197.06512451]
[111.46218109 196.53712463]
[97.85935974 190.20922852]
[90.39921570 177.19592285]
[90.70719147 192.19276428]
[91.01516724 207.18959045]
[91.32315063 222.18643188]
[91.63112640 237.18327332]
[91.93910217 252.18011475]
[92.24707794 267.17694092]
[92.55506134 282.17379761]
[92.86303711 297.17062378]
[95.44881439 316.37905884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 38]
[11 37]
[12 36]
[13 35]
[17 30]
[18 29]
[19 28]
[39 129]
[40 128]
[41 127]
[42 64]
[43 63]
[44 62]
[52 61]
[53 60]
[54 59]
[66 124]
[67 123]
[68 122]
[91 121]
[92 120]
[93 119]
[96 118]
[97 117]
[98 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
