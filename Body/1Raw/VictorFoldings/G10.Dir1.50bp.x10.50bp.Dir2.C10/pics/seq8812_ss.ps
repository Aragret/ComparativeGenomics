%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[183.03038025 77.95639038]
[177.29089355 68.68043518]
[164.04830933 75.72556305]
[150.80572510 82.77069855]
[137.56314087 89.81583405]
[124.32055664 96.86096954]
[111.07797241 103.90610504]
[100.19914246 114.23331451]
[92.47505951 127.09171295]
[84.75097656 139.95011902]
[77.02689362 152.80851746]
[74.05378723 169.49974060]
[57.19182587 171.26342773]
[50.82921600 155.54866028]
[64.16848755 145.08442688]
[71.89257050 132.22602844]
[79.61666107 119.36763000]
[87.34074402 106.50922394]
[82.83197784 100.51580811]
[69.30568695 82.53556061]
[54.81008530 86.39272308]
[40.31449127 90.24987793]
[26.03903008 94.85544586]
[12.02231693 100.19696045]
[-1.99439621 105.53846741]
[-16.01110840 110.87998199]
[-30.02782249 116.22149658]
[-42.67555237 127.51181030]
[-57.02587891 118.48382568]
[-52.32328033 102.19512177]
[-35.36933517 102.20478058]
[-21.35262108 96.86326599]
[-7.33590889 91.52175903]
[6.68080425 86.18024445]
[20.69751740 80.83872986]
[8.49872875 72.11006927]
[7.50439692 57.14306259]
[18.44129753 46.87738037]
[33.31544113 48.81641006]
[41.25503540 61.54287338]
[36.45733261 75.75428009]
[50.95292664 71.89712524]
[65.44852448 68.03996277]
[94.08177185 72.00029755]
[104.03283691 90.66352081]
[117.27542114 83.61838531]
[130.51800537 76.57324982]
[143.76058960 69.52811432]
[157.00317383 62.48298264]
[170.24575806 55.43784714]
[160.35086060 30.99295425]
[153.77067566 5.45708466]
[150.62001038 -20.72250366]
[150.95365906 -47.08732986]
[154.76533508 -73.17572784]
[161.98789978 -98.53091431]
[172.49449158 -122.70902252]
[186.10073853 -145.28681946]
[202.56803894 -165.86917114]
[221.60771179 -184.09590149]
[242.88606262 -199.64814758]
[266.03027344 -212.25390625]
[260.25399780 -226.09712219]
[254.47770691 -239.94033813]
[242.79824829 -252.22962952]
[251.37406921 -266.85467529]
[267.80157471 -262.66259766]
[268.32092285 -245.71661377]
[274.09719849 -231.87339783]
[279.87347412 -218.03018188]
[290.18423462 -221.56668091]
[300.67312622 -224.53376770]
[311.30874634 -226.92256165]
[322.05923462 -228.72587585]
[332.89236450 -229.93830872]
[343.77569580 -230.55621338]
[354.67660522 -230.57774353]
[365.56250000 -230.00280762]
[376.40069580 -228.83311462]
[387.15875244 -227.07217407]
[397.80444336 -224.72525024]
[408.30587769 -221.79936218]
[418.63159180 -218.30323792]
[428.75061035 -214.24739075]
[438.63269043 -209.64392090]
[448.24813843 -204.50662231]
[457.56820679 -198.85089111]
[466.56494141 -192.69363403]
[475.21139526 -186.05331421]
[483.48165894 -178.94979858]
[491.35095215 -171.40437317]
[498.79568481 -163.43963623]
[505.79354858 -155.07942200]
[512.32354736 -146.34878540]
[518.36621094 -137.27386475]
[523.90325928 -127.88185120]
[528.91827393 -118.20087433]
[533.39605713 -108.25992584]
[537.32336426 -98.08878326]
[540.68823242 -87.71791840]
[543.48071289 -77.17839050]
[545.69238281 -66.50177765]
[547.31658936 -55.72005844]
[548.34844971 -44.86552811]
[548.78491211 -33.97071075]
[548.62457275 -23.06823730]
[547.86804199 -12.19077206]
[546.51745605 -1.37090206]
[544.57684326 9.35895824]
[542.05212402 19.96666145]
[538.95074463 30.42042923]
[535.28204346 40.68894196]
[531.05694580 50.74142838]
[526.28814697 60.54777908]
[520.98992920 70.07860565]
[515.17810059 79.30535126]
[508.87014771 88.20037079]
[502.08489990 96.73700714]
[494.84265137 104.88968658]
[487.16516113 112.63397217]
[479.07537842 119.94666290]
[470.59753418 126.80584717]
[461.75704956 133.19096375]
[452.58035278 139.08285522]
[443.09497070 144.46389771]
[433.32928467 149.31794739]
[423.31256104 153.63046265]
[413.07482910 157.38848877]
[402.64669800 160.58078003]
[392.05944824 163.19775391]
[381.34478760 165.23156738]
[370.53482056 166.67611694]
[359.66189575 167.52705383]
[348.75860596 167.78182983]
[337.85763550 167.43968201]
[326.99160767 166.50160217]
[316.19308472 164.97039795]
[305.49444580 162.85064697]
[294.92770386 160.14869690]
[284.52450562 156.87261963]
[274.31610107 153.03224182]
[264.33297729 148.63903809]
[254.60510254 143.70616150]
[245.16162109 138.24838257]
[236.03080750 132.28205872]
[227.24003601 125.82502747]
[218.81564331 118.89664459]
[210.78288269 111.51765442]
[203.16580200 103.71015167]
[195.98725891 95.49751282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 18]
[9 17]
[10 16]
[11 15]
[20 43]
[21 42]
[22 41]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
