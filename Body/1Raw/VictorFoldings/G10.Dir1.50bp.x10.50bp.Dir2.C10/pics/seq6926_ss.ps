%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAxxxxxxxxxxUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.20966339 145.24662781]
[93.99205017 130.50694275]
[96.77444458 115.76726532]
[87.26608276 127.36860657]
[84.50248718 142.94657898]
[70.45059204 147.88552856]
[60.94223022 159.48687744]
[51.43387222 171.08821106]
[41.92551422 182.68955994]
[32.41715622 194.29089355]
[22.90879631 205.89224243]
[13.40043736 217.49357605]
[17.45826149 232.47068787]
[11.90633678 246.96054077]
[-1.12050748 255.39147949]
[-16.61318398 254.52166748]
[-28.61444283 244.68554688]
[-32.50955582 229.66529846]
[-26.80076981 215.23652649]
[-13.68323326 206.94738770]
[1.79909635 207.98521423]
[11.30745506 196.38388062]
[20.81581306 184.78253174]
[30.32417107 173.18119812]
[39.83253098 161.57984924]
[49.34088898 149.97851562]
[58.84924698 138.37716675]
[60.93273926 123.62901306]
[75.66474152 117.86024475]
[85.17310333 106.25890350]
[80.56753540 91.98344421]
[66.07194519 88.12628174]
[51.57634354 84.26912689]
[37.08074951 80.41196442]
[22.50804520 76.85720062]
[7.86454391 73.60637665]
[-6.77895737 70.35555267]
[-16.61102867 82.08538055]
[-30.77242279 87.89171600]
[-46.00895691 86.44029236]
[-58.81938553 78.06464386]
[-66.25996399 64.68943024]
[-66.62091064 49.38817596]
[-59.81927109 35.67700195]
[-47.41801834 26.70663452]
[-32.26686859 24.53839493]
[-17.84744644 29.67053223]
[-7.47322702 40.92371750]
[-3.52813148 55.71205139]
[11.11536980 58.96287537]
[25.75887108 62.21369934]
[30.24583244 60.41295242]
[35.91498947 61.45791626]
[40.93790817 65.91636658]
[55.43350601 69.77352905]
[69.92910004 73.63068390]
[84.42469788 77.48784637]
[73.55283356 67.15331268]
[62.68097305 56.81877518]
[51.80911255 46.48424149]
[39.87226868 37.40063858]
[29.33457375 26.72557640]
[20.40632439 14.67209721]
[13.26570606 1.48075294]
[8.05522346 -12.58519459]
[4.87886333 -27.24502754]
[3.80001664 -42.20618057]
[4.84021425 -57.17007065]
[7.97869635 -71.83805847]
[13.15282822 -85.91741943]
[20.25934982 -99.12716675]
[29.15643311 -111.20366669]
[39.66651917 -121.90591431]
[51.57985687 -131.02032471]
[64.65869141 -138.36499023]
[78.64200592 -143.79333496]
[93.25073242 -147.19702148]
[108.19332123 -148.50814819]
[123.17156219 -147.70051575]
[137.88653564 -144.79025269]
[152.04457092 -139.83544922]
[165.36311340 -132.93498230]
[177.57635498 -124.22656250]
[188.44056702 -113.88398743]
[197.73893738 -102.11366272]
[205.28587341 -89.15049744]
[210.93077087 -75.25319672]
[214.56098938 -60.69910431]
[216.10404968 -45.77868271]
[215.52919006 -30.78970146]
[212.84785461 -16.03129959]
[208.11357117 -1.79800844]
[201.42082214 11.62611389]
[192.90316772 23.97316170]
[182.73060608 34.99671936]
[171.10614014 44.47679520]
[158.26176453 52.22418976]
[144.44956970 58.08574677]
[133.57769775 68.42028046]
[122.70584106 78.75481415]
[111.83397675 89.08935547]
[126.32957458 85.23219299]
[140.82516479 81.37503052]
[155.32077026 77.51787567]
[164.57797241 64.41506195]
[180.60166931 63.62705231]
[191.09982300 75.75833893]
[188.01918030 91.50283051]
[173.72293091 98.78270721]
[159.17793274 92.01347351]
[144.68232727 95.87062836]
[130.18673706 99.72779083]
[115.69113922 103.58494568]
[130.26144409 107.14952850]
[144.83174133 110.71411896]
[159.62231445 108.21633148]
[174.62057495 107.98751831]
[189.48045349 110.03295135]
[203.85911560 114.30544281]
[217.42478943 120.70641327]
[229.86448669 129.08818054]
[240.89118958 139.25733948]
[250.25047302 150.97927856]
[257.72640991 163.98352051]
[263.14648438 177.97004700]
[266.38568115 192.61611938]
[267.36920166 207.58384705]
[266.07443237 222.52786255]
[262.53115845 237.10336304]
[256.82122803 250.97406006]
[249.07629395 263.81994629]
[239.47511292 275.34457397]
[228.23919678 285.28207397]
[215.62777710 293.40316772]
[201.93183899 299.52047729]
[187.46739197 303.49282837]
[172.56816101 305.22860718]
[157.57791138 304.68774414]
[142.84251404 301.88272095]
[128.70196533 296.87826538]
[115.48249817 289.78982544]
[103.48914337 280.78097534]
[92.99861908 270.05953979]
[84.25296021 257.87295532]
[77.45395660 244.50231934]
[72.75849152 230.25617981]
[70.27487946 215.46321106]
[70.06044769 200.46475220]
[72.12012482 185.60682678]
[76.40640259 171.23226929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[31 57]
[32 56]
[33 55]
[34 54]
[35 51]
[36 50]
[37 49]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
