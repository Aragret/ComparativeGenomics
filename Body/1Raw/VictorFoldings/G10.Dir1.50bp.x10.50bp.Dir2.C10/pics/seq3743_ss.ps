%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUxxxxxxxxxxACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.40859222 283.52496338]
[98.40859222 268.52496338]
[98.40859222 253.52496338]
[98.40859222 238.52496338]
[98.40859222 223.52496338]
[98.40859222 208.52496338]
[98.40859222 193.52496338]
[98.40859222 178.52496338]
[98.40859222 163.52496338]
[98.40859222 148.52496338]
[82.32966614 140.56129456]
[71.66215515 128.13887024]
[59.22271347 136.52102661]
[46.78327560 144.90316772]
[34.34383392 153.28530884]
[38.02826309 167.98907471]
[36.45842361 183.06591797]
[29.82387733 196.69525146]
[18.92578125 207.23124695]
[5.08013248 213.40165710]
[-10.04113960 214.46134949]
[-24.61206627 210.28236389]
[-36.87314224 201.36935425]
[-45.34377670 188.79858398]
[-49.00110245 174.08804321]
[-47.40348053 159.01411438]
[-40.74382782 145.39703369]
[-29.82633400 134.88113403]
[-15.96933746 128.73626709]
[-0.84613848 127.70444489]
[13.71706295 131.91026306]
[25.96169090 140.84587097]
[38.40113068 132.46372986]
[50.84057236 124.08158112]
[63.28001022 115.69944000]
[60.59749222 93.49829102]
[70.27031708 73.33586884]
[89.26540375 61.53445435]
[88.01852417 46.58636475]
[86.77165222 31.63827896]
[82.91815948 23.28349495]
[85.65763855 16.36678505]
[84.72200775 1.39599335]
[82.85439301 -13.48728657]
[80.06207275 -28.22509193]
[77.26974487 -42.96289825]
[74.47742462 -57.70070267]
[61.70081711 -66.61115265]
[59.07894516 -81.59716034]
[67.65243530 -93.72279358]
[62.95221710 -101.63227081]
[64.95867157 -108.79605103]
[62.47354889 -123.58876038]
[59.98843002 -138.38146973]
[57.50331116 -153.17417908]
[42.46202087 -153.44650269]
[27.72692490 -156.47827148]
[13.79989624 -162.16619873]
[1.15528512 -170.31655884]
[-9.77623749 -180.65176392]
[-18.62234879 -192.81979370]
[-25.08175278 -206.40621948]
[-28.93444443 -220.94827271]
[-30.04920197 -235.95066833]
[-28.38805962 -250.90243530]
[-24.00759315 -265.29431152]
[-17.05700111 -278.63613892]
[-7.77301550 -290.47344971]
[3.52815199 -300.40310669]
[16.46158791 -308.08691406]
[30.58678627 -313.26315308]
[45.42264557 -315.75552368]
[60.46386719 -315.47912598]
[75.19814301 -312.44338989]
[89.12364197 -306.75170898]
[101.76605225 -298.59796143]
[112.69478607 -288.25979614]
[121.53762054 -276.08938599]
[127.99336243 -262.50122070]
[131.84213257 -247.95812988]
[132.95285034 -232.95542908]
[131.28767395 -218.00411987]
[126.90332794 -203.61341858]
[119.94914246 -190.27348328]
[110.66196442 -178.43865967]
[99.35812378 -168.51203918]
[86.42261505 -160.83172607]
[72.29602051 -155.65928650]
[74.78113556 -140.86657715]
[77.26625824 -126.07387543]
[79.75137329 -111.28117371]
[82.39024353 -96.51511383]
[94.80509949 -88.36608124]
[97.84686279 -73.45962524]
[89.21522522 -60.49303055]
[92.00755310 -45.75522232]
[94.79988098 -31.01741791]
[97.59220123 -16.27961159]
[107.24431610 -27.76162529]
[122.17057037 -29.24723434]
[133.89651489 -19.89297485]
[135.76470947 -5.00976753]
[126.71446991 6.95238781]
[111.88410950 9.20192909]
[99.69280243 0.46036488]
[100.62842560 15.43115616]
[101.71974182 30.39140511]
[102.96661377 45.33949280]
[104.21348572 60.28757858]
[113.60189819 61.30896759]
[122.72718048 64.57429504]
[131.04844666 70.01139832]
[138.04557800 77.41697693]
[143.25112915 86.46279144]
[146.28028870 96.70948792]
[146.85728455 107.62776947]
[144.83625793 118.62563324]
[158.49249268 124.83103943]
[172.14874268 131.03645325]
[185.80497742 137.24185181]
[200.51243591 131.45686340]
[214.96923828 137.84249878]
[220.59841919 152.61030579]
[214.06028748 166.99877930]
[199.23379517 172.47151184]
[184.91523743 165.78161621]
[179.59957886 150.89810181]
[165.94332886 144.69268799]
[152.28709412 138.48728943]
[138.63084412 132.28187561]
[132.32528687 136.34265137]
[141.33473206 148.33555603]
[150.34417725 160.32846069]
[162.85424805 168.60482788]
[162.76177979 183.60453796]
[150.15061951 191.72602844]
[136.45643616 185.60479736]
[134.09692383 170.79167175]
[126.90554047 157.62792969]
[119.71415710 144.46418762]
[113.40859222 148.52496338]
[113.40859222 163.52496338]
[113.40859222 178.52496338]
[113.40859222 193.52496338]
[113.40859222 208.52496338]
[113.40859222 223.52496338]
[113.40859222 238.52496338]
[113.40859222 253.52496338]
[113.40859222 268.52496338]
[113.40859222 283.52496338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 35]
[13 34]
[14 33]
[15 32]
[38 109]
[39 108]
[40 107]
[42 106]
[43 105]
[44 98]
[45 97]
[46 96]
[47 95]
[50 92]
[52 91]
[53 90]
[54 89]
[55 88]
[117 130]
[118 129]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
