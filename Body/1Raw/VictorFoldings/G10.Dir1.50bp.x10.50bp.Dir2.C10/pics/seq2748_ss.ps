%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAAxxxxxxxxxxAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.38053894 404.56701660]
[68.38053894 389.56701660]
[68.38053894 374.56701660]
[68.38053894 359.56701660]
[68.38053894 344.56701660]
[68.38053894 329.56701660]
[68.38053894 314.56701660]
[68.38053894 299.56701660]
[68.38053894 284.56701660]
[68.38053894 269.56701660]
[51.58150482 263.36022949]
[38.38552856 251.20283508]
[30.79717445 234.90682983]
[29.98238564 216.91549683]
[36.08941269 199.93707275]
[48.22265244 186.53703308]
[64.57386780 178.75051880]
[63.32699203 163.80244446]
[62.08012009 148.85435486]
[60.83324432 133.90626526]
[59.58636856 118.95817566]
[58.33949661 104.01009369]
[49.07454681 92.21344757]
[34.84776688 87.45963287]
[20.62098694 82.70581818]
[2.70356107 86.82233429]
[-8.44776440 73.30760956]
[-22.77036095 68.85079193]
[-37.09296036 64.39397430]
[-51.41555786 59.93716049]
[-65.73815155 55.48034286]
[-77.54064178 60.78649139]
[-89.40596771 56.73273087]
[-95.11560822 46.02257919]
[-109.34238434 41.26876450]
[-123.56916046 36.51494980]
[-132.54801941 48.69014359]
[-144.85093689 57.49317169]
[-159.27261353 62.06160355]
[-174.40014648 61.94787216]
[-188.75149536 57.16312027]
[-200.92066956 48.17610931]
[-209.71545410 35.86729050]
[-214.27423096 21.44256020]
[-214.15036011 6.31510735]
[-209.35598755 -8.03303623]
[-200.36082458 -20.19618416]
[-188.04611206 -28.98271751]
[-173.61833191 -33.53181839]
[-158.49096680 -33.39781570]
[-144.14604187 -28.59383392]
[-131.98892212 -19.59052086]
[-123.21063995 -7.26992750]
[-118.67121124 7.16089821]
[-118.81534576 22.28817177]
[-104.58856964 27.04198647]
[-90.36179352 31.79580116]
[-73.41478729 27.34618568]
[-61.28133774 41.15774536]
[-46.95874023 45.61456299]
[-32.63614273 50.07137680]
[-18.31354523 54.52819443]
[-3.99094844 58.98500824]
[6.90133190 53.63098907]
[18.89859390 57.27580261]
[25.37480354 68.47904205]
[39.60158157 73.23285675]
[53.82836151 77.98667145]
[43.62228775 66.99412537]
[29.40298271 62.21800232]
[18.57660675 51.83582306]
[13.20930386 37.82896805]
[14.32538795 22.87054634]
[21.71186256 9.81527901]
[33.95906830 1.15467906]
[48.72970200 -1.45843494]
[63.20488739 2.47463274]
[74.62212372 12.20328236]
[80.80251312 25.87086296]
[80.56656647 40.86900711]
[73.95910645 54.33567047]
[74.59318542 69.32226562]
[81.22168732 55.86629868]
[87.85018158 42.41033173]
[86.23121643 26.09129524]
[99.71037292 16.75083542]
[114.42147064 23.99761772]
[115.23097992 40.37677383]
[101.30615234 49.03882980]
[94.67765045 62.49479675]
[88.04915619 75.95075989]
[106.08464813 76.30749512]
[118.12769318 87.41539001]
[132.62329102 83.55823517]
[147.11888123 79.70107269]
[161.61448669 75.84391022]
[176.11007690 71.98675537]
[190.56477356 67.97901154]
[204.97698975 63.82112503]
[219.38920593 59.66323853]
[224.31828308 55.10125351]
[229.96447754 53.93857956]
[234.48793030 55.64559174]
[249.06062317 52.09083176]
[263.63333130 48.53606796]
[275.10733032 36.81944275]
[290.92178345 41.15943146]
[294.80810547 57.09142685]
[282.76840210 68.22595215]
[267.18807983 63.10877228]
[252.61538696 66.66353607]
[238.04267883 70.21829224]
[223.54708862 74.07545471]
[209.13487244 78.23334503]
[194.72265625 82.39122772]
[189.13157654 87.29892731]
[179.96723938 86.48235321]
[165.47164917 90.33950806]
[150.97604370 94.19667053]
[136.48045349 98.05382538]
[121.98485565 101.91098785]
[115.79217529 117.08351898]
[100.20023346 124.46053314]
[82.89381409 119.12378693]
[73.28758240 102.76321411]
[74.53445435 117.71130371]
[75.78133392 132.65939331]
[77.02820587 147.60748291]
[78.27507782 162.55555725]
[79.52195740 177.50364685]
[91.51433563 180.11380005]
[102.39920807 185.75245667]
[111.42774963 194.02322388]
[117.98106384 204.34889221]
[121.61260986 216.01179504]
[122.07860565 228.20362854]
[119.35439301 240.08148193]
[113.63559723 250.82612610]
[105.32413483 259.69848633]
[94.99993896 266.09057617]
[83.38053894 269.56701660]
[83.38053894 284.56701660]
[83.38053894 299.56701660]
[83.38053894 314.56701660]
[83.38053894 329.56701660]
[83.38053894 344.56701660]
[83.38053894 359.56701660]
[83.38053894 374.56701660]
[83.38053894 389.56701660]
[83.38053894 404.56701660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 130]
[18 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 68]
[24 67]
[25 66]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[34 57]
[35 56]
[36 55]
[82 91]
[83 90]
[84 89]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 115]
[99 114]
[100 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
