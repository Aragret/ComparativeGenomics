%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCxxxxxxxxxxAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.23799896 284.12496948]
[123.23799896 269.12496948]
[123.23799896 254.12495422]
[123.23799896 239.12495422]
[123.23799896 224.12495422]
[123.23799896 209.12495422]
[123.23799896 194.12495422]
[123.23799896 179.12495422]
[123.23799896 164.12495422]
[123.23799896 149.12495422]
[121.29251099 134.25166321]
[117.43438721 119.75631714]
[99.44644928 124.05916595]
[84.85153961 115.65191650]
[71.34632111 122.17948914]
[57.84110641 128.70704651]
[44.33588791 135.23461914]
[38.81547546 154.49864197]
[21.21869278 163.43629456]
[2.97537279 156.73973083]
[-10.11390018 164.06578064]
[-23.20317268 171.39181519]
[-36.29244614 178.71786499]
[-49.38171768 186.04391479]
[-57.30050659 200.40443420]
[-73.69956970 200.45626831]
[-81.70896149 186.14607239]
[-73.08930969 172.19496155]
[-56.70776367 172.95463562]
[-43.61849213 165.62858582]
[-30.52921867 158.30255127]
[-17.43994522 150.97650146]
[-4.35067225 143.65045166]
[-4.31828117 133.28948975]
[0.07281301 123.81555939]
[8.08129311 116.98907471]
[18.28705215 114.10949707]
[28.84278297 115.76839447]
[37.80832291 121.72940063]
[51.31354141 115.20183563]
[64.81875610 108.67427063]
[78.32397461 102.14670563]
[78.23537445 99.12850952]
[78.56501007 96.12705994]
[65.62494659 88.54058075]
[52.68487549 80.95410156]
[39.74480820 73.36762238]
[26.80474281 65.78114319]
[13.86467457 58.19466400]
[0.92460769 50.60818481]
[-15.46885490 51.03993607]
[-23.80764198 36.91914749]
[-15.51352215 22.77207565]
[0.88122344 23.15201759]
[8.51108646 37.66811752]
[21.45115471 45.25459671]
[34.39122009 52.84107590]
[47.33128738 60.42755508]
[60.27135468 68.01403809]
[73.21142578 75.60051727]
[86.15148926 83.18699646]
[98.79859924 76.72660828]
[113.72711945 79.31351471]
[124.77407837 91.02696991]
[135.11209106 80.15841675]
[145.45010376 69.28986359]
[135.63874817 57.92745209]
[126.98838043 45.65806961]
[119.58228302 32.59986877]
[113.49179840 18.87861824]
[108.77556610 4.62646103]
[105.47902679 -10.01934433]
[103.63391876 -24.91774559]
[103.25801086 -39.92525864]
[104.35492706 -54.89735413]
[106.91410065 -69.68983459]
[110.91088867 -84.16023254]
[116.30679321 -98.16919708]
[123.04985046 -111.58180237]
[131.07511902 -124.26887512]
[140.30531311 -136.10823059]
[150.65151978 -146.98585510]
[162.01412964 -156.79696655]
[174.28369141 -165.44709778]
[187.34202576 -172.85293579]
[201.06340027 -178.94314575]
[215.31565857 -183.65908813]
[229.96153259 -186.95533752]
[244.85997009 -188.80014038]
[259.86749268 -189.17575073]
[274.83956909 -188.07853699]
[289.63198853 -185.51907349]
[304.10229492 -181.52198792]
[318.11117554 -176.12580872]
[331.52362061 -169.38247681]
[344.21054077 -161.35696411]
[356.04971313 -152.12654114]
[366.92712402 -141.78010559]
[376.73800659 -130.41729736]
[385.38790894 -118.14756775]
[392.79348755 -105.08907318]
[398.88342285 -91.36758423]
[403.59906006 -77.11523438]
[406.89501953 -62.46929550]
[408.73953247 -47.57082367]
[409.11483765 -32.56329346]
[408.01733398 -17.59124374]
[405.45758057 -2.79886723]
[401.46020508 11.67137337]
[396.06375122 25.68011856]
[389.32015991 39.09245682]
[381.29437256 51.77920914]
[372.06372070 63.61819839]
[361.71704102 74.49539948]
[350.35406494 84.30606842]
[338.08416748 92.95570374]
[325.02551270 100.36101532]
[311.30389404 106.45068359]
[297.05145264 111.16605377]
[282.40545654 114.46171570]
[267.50692749 116.30593109]
[252.49940491 116.68093872]
[237.52737427 115.58312225]
[222.73504639 113.02306366]
[208.26489258 109.02540588]
[194.25625610 103.62866211]
[180.84405518 96.88480377]
[168.15745544 88.85877228]
[156.31864929 79.62786865]
[145.98063660 90.49642944]
[135.64262390 101.36498260]
[131.92973328 115.89820099]
[135.78784180 130.39353943]
[140.73410034 116.23252106]
[150.93290710 105.23323059]
[164.68057251 99.23309326]
[179.68057251 99.23442078]
[193.42718506 105.23698425]
[203.62405396 116.23806763]
[208.56781006 130.39996338]
[207.43260193 145.35694885]
[200.40808105 158.61047363]
[188.66766357 167.94656372]
[174.17257690 171.80564880]
[159.34419250 169.54306030]
[146.65959167 161.53677368]
[138.23800659 149.12495422]
[138.23800659 164.12495422]
[138.23800659 179.12495422]
[138.23800659 194.12495422]
[138.23800659 209.12495422]
[138.23800659 224.12495422]
[138.23800659 239.12495422]
[138.23800659 254.12495422]
[138.23800659 269.12496948]
[138.23800659 284.12496948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 133]
[12 132]
[14 42]
[15 41]
[16 40]
[17 39]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[64 131]
[65 130]
[66 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
