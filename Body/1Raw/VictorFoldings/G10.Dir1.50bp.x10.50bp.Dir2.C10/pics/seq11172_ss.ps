%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAAxxxxxxxxxxUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 294.38244629]
[92.50000000 279.38244629]
[92.50000000 264.38244629]
[92.50000000 249.38244629]
[92.50000000 234.38244629]
[92.50000000 219.38244629]
[92.50000000 204.38244629]
[92.50000000 189.38244629]
[92.50000000 174.38244629]
[92.50000000 159.38244629]
[83.84567261 157.63301086]
[75.54287720 154.62942505]
[67.77228546 150.43708801]
[60.70298386 145.14720154]
[49.51468658 155.13830566]
[38.32638931 165.12939453]
[27.13809395 175.12049866]
[15.94979668 185.11158752]
[11.33487988 200.84800720]
[-4.66241837 204.45611572]
[-15.58545017 192.22421265]
[-10.19753551 176.73542786]
[5.95869970 173.92329407]
[17.14699554 163.93220520]
[28.33529282 153.94110107]
[39.52359009 143.94999695]
[50.71188736 133.95890808]
[41.78409958 113.90807343]
[40.68458939 91.98703003]
[47.56120682 71.14347839]
[61.48925781 54.18026352]
[80.59583282 43.37841415]
[102.31168365 40.19045639]
[104.76461029 25.39237595]
[107.21754456 10.59429741]
[109.67047119 -4.20378208]
[112.12339783 -19.00186157]
[114.57632446 -33.79994202]
[117.02925110 -48.59801865]
[119.48218536 -63.39609909]
[107.59609985 -71.10243988]
[99.57881165 -82.72837067]
[96.61849213 -96.49252319]
[99.13153839 -110.30121613]
[106.70435333 -122.06690979]
[118.16098785 -130.02380371]
[131.74565125 -132.99282837]
[134.50189209 -147.73742676]
[137.25813293 -162.48202515]
[140.01437378 -177.22662354]
[142.77061462 -191.97120667]
[128.37446594 -196.23207092]
[114.49274445 -201.95060730]
[101.27258301 -209.06617737]
[88.85413361 -217.50337219]
[77.36904144 -227.17274475]
[66.93904877 -237.97178650]
[57.67472076 -249.78602600]
[49.67427063 -262.49023438]
[43.02250290 -275.94973755]
[37.78992844 -290.02182007]
[34.03202057 -304.55737305]
[31.78860855 -319.40228271]
[31.08347893 -334.39916992]
[31.92410469 -349.38906860]
[34.30157471 -364.21310425]
[38.19068527 -378.71411133]
[43.55021286 -392.73834229]
[50.32334137 -406.13717651]
[58.43827438 -418.76855469]
[67.80898285 -430.49859619]
[78.33613586 -441.20294189]
[89.90814209 -450.76812744]
[102.40232849 -459.09277344]
[115.68625641 -466.08856201]
[129.61909485 -471.68142700]
[144.05316162 -475.81201172]
[158.83543396 -478.43658447]
[173.80923462 -479.52728271]
[188.81579590 -479.07254028]
[203.69607544 -477.07720947]
[218.29232788 -473.56243896]
[232.44979858 -468.56546021]
[246.01844788 -462.13925171]
[258.85440063 -454.35195923]
[270.82162476 -445.28610229]
[281.79324341 -435.03781128]
[291.65295410 -423.71569824]
[300.29623413 -411.43978882]
[307.63146973 -398.34024048]
[313.58090210 -384.55587769]
[318.08145142 -370.23284912]
[321.08541870 -355.52297974]
[322.56094360 -340.58221436]
[322.49240112 -325.56890869]
[320.88052368 -310.64221191]
[317.74240112 -295.96038818]
[313.11129761 -281.67904663]
[307.03625488 -267.94958496]
[299.58175659 -254.91752625]
[290.82675171 -242.72105408]
[280.86410522 -231.48942566]
[269.79937744 -221.34172058]
[257.74990845 -212.38549805]
[244.84336853 -204.71569824]
[231.21662903 -198.41363525]
[217.01411438 -193.54611206]
[202.38639832 -190.16473389]
[187.48852539 -188.30532837]
[172.47842407 -187.98762512]
[157.51521301 -189.21496582]
[154.75897217 -174.47036743]
[152.00273132 -159.72578430]
[149.24649048 -144.98118591]
[146.49024963 -130.23658752]
[159.52877808 -121.04742432]
[167.29582214 -107.04840088]
[168.19844055 -91.00635529]
[162.00621033 -76.11718750]
[149.90716553 -65.36915588]
[134.28025818 -60.94316864]
[131.82733154 -46.14509201]
[129.37440491 -31.34701157]
[126.92147827 -16.54893303]
[124.46855164 -1.75085402]
[122.01561737 13.04722500]
[119.56269073 27.84530449]
[117.10976410 42.64338303]
[127.19452667 46.68036652]
[136.38357544 52.47357178]
[144.37422180 59.83218384]
[150.90330505 68.51382446]
[155.75575256 78.23254395]
[158.77172852 88.66822815]
[159.85191345 99.47715759]
[158.96072388 110.30330658]
[156.12751770 120.79008484]
[151.44560242 130.59208679]
[145.06918335 139.38647461]
[137.20829773 146.88356018]
[128.12187195 152.83641052]
[118.10916901 157.04895020]
[107.50000000 159.38244629]
[107.50000000 174.38244629]
[107.50000000 189.38244629]
[107.50000000 204.38244629]
[107.50000000 219.38244629]
[107.50000000 234.38244629]
[107.50000000 249.38244629]
[107.50000000 264.38244629]
[107.50000000 279.38244629]
[107.50000000 294.38244629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[40 121]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
