%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUxxxxxxxxxxGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[233.34524536 465.13568115]
[232.72943115 450.14834595]
[232.11360168 435.16098022]
[231.49777222 420.17364502]
[230.88194275 405.18627930]
[230.26612854 390.19894409]
[229.65029907 375.21157837]
[229.03446960 360.22421265]
[226.73359680 345.40173340]
[222.77699280 330.93298340]
[218.82037354 316.46420288]
[214.86376953 301.99545288]
[210.90715027 287.52667236]
[206.95054626 273.05789185]
[201.67581177 259.01593018]
[195.12792969 245.52053833]
[188.58006287 232.02516174]
[182.03219604 218.52976990]
[167.19654846 218.19567871]
[154.13566589 210.97288513]
[145.87173462 198.44192505]
[144.35894775 183.42175293]
[150.02192688 169.33572388]
[140.38011169 157.84506226]
[130.73829651 146.35440063]
[120.97902679 134.96331787]
[111.10332489 123.67304230]
[101.22761536 112.38275909]
[76.44477844 113.58954620]
[61.93614960 109.78169250]
[47.42752457 105.97383118]
[32.11525345 109.95439911]
[21.76907349 99.23964691]
[7.26044846 95.43179321]
[0.69539595 96.82559204]
[-4.74693251 94.93642426]
[-7.75937796 91.15827942]
[-22.09943962 86.75798035]
[-36.43949890 82.35768127]
[-50.77956009 77.95738220]
[-61.96827698 88.47917938]
[-76.92255402 91.98133850]
[-91.61976624 87.52180481]
[-102.10644531 76.30016327]
[-105.56171417 61.33498001]
[-101.05612946 46.65181732]
[-89.80167389 36.20036697]
[-74.82573700 32.79202271]
[-60.15676880 37.34360886]
[-49.74064636 48.63076782]
[-46.37926102 63.61731720]
[-32.03919983 68.01761627]
[-17.69913864 72.41791534]
[-3.35907745 76.81822205]
[11.06830692 80.92316437]
[25.57693291 84.73102570]
[39.85145187 80.47809601]
[51.23538208 91.46520996]
[65.74401093 95.27306366]
[80.25263214 99.08092499]
[91.84168243 89.55758667]
[83.26950836 76.25990295]
[90.20862579 63.08045578]
[89.28521729 48.10890579]
[88.36180115 33.13735580]
[84.69075775 24.70413399]
[87.57633972 17.84952736]
[86.96051025 2.86217427]
[86.34468842 -12.12517929]
[72.31245422 -18.13011169]
[62.28176498 -29.63437080]
[58.24421310 -44.35377884]
[61.00146484 -59.36578369]
[70.00606537 -71.68974304]
[83.47013855 -78.87873077]
[98.72038269 -79.50535583]
[112.72885895 -73.44521332]
[122.71417236 -61.90153885]
[126.69372559 -47.16634750]
[123.87738037 -32.16531372]
[114.82431793 -19.87691116]
[101.33203888 -12.74100494]
[101.94786835 2.24634862]
[102.56369019 17.23370171]
[103.33335114 32.21394348]
[104.25676727 47.18549347]
[105.18017578 62.15704346]
[113.68630219 74.38385773]
[106.81323242 88.63417053]
[112.51789856 102.50705719]
[122.39360046 113.79733276]
[132.26930237 125.08761597]
[140.32696533 129.52268982]
[142.22897339 136.71258545]
[151.87078857 148.20324707]
[161.51260376 159.69390869]
[175.71818542 156.67468262]
[189.64706421 160.27325439]
[200.40608215 169.61633301]
[214.21966553 163.76954651]
[228.03324890 157.92274475]
[241.84683228 152.07595825]
[255.66041565 146.22917175]
[267.88998413 134.48719788]
[282.55856323 142.98832703]
[278.45031738 159.43699646]
[261.50720215 160.04275513]
[247.69361877 165.88954163]
[233.88003540 171.73632812]
[220.06645203 177.58312988]
[206.25288391 183.42991638]
[204.65011597 199.11827087]
[195.52757263 211.98190308]
[202.07545471 225.47729492]
[208.62332153 238.97267151]
[215.17118835 252.46806335]
[218.96601868 237.95600891]
[229.90469360 227.69223022]
[244.62869263 224.82800293]
[258.61727905 230.24275208]
[267.57550049 242.27398682]
[268.75286865 257.22769165]
[261.78793335 270.51263428]
[248.81913757 278.04989624]
[233.82832336 277.52529907]
[221.41931152 269.10128784]
[225.37593079 283.57006836]
[229.33253479 298.03881836]
[233.28913879 312.50759888]
[237.24575806 326.97634888]
[241.20236206 341.44512939]
[246.70761108 327.49191284]
[257.98336792 317.59963989]
[272.53442383 313.95733643]
[287.14083862 317.37106323]
[298.57028198 327.08532715]
[304.29360962 340.95053101]
[303.04425049 355.89840698]
[295.09872437 368.62118530]
[282.21527100 376.30340576]
[267.24487305 377.24508667]
[253.50028992 371.23785400]
[244.02182007 359.60839844]
[244.63764954 374.59576416]
[245.25347900 389.58309937]
[245.86930847 404.57046509]
[246.48512268 419.55780029]
[247.10095215 434.54516602]
[247.71678162 449.53253174]
[248.33261108 464.51986694]
[255.02412415 480.09741211]
[241.90774536 490.83972168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 116]
[16 115]
[17 114]
[18 113]
[23 96]
[24 95]
[25 94]
[26 92]
[27 91]
[28 90]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[61 89]
[63 87]
[64 86]
[65 85]
[67 84]
[68 83]
[69 82]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
