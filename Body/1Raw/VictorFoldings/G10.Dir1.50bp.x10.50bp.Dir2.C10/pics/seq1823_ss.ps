%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAACCCACUCCACCUUACUxxxxxxxxxxCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.03025818 444.43548584]
[145.71820068 429.43875122]
[145.40614319 414.44198608]
[145.09408569 399.44522095]
[144.78202820 384.44848633]
[144.46998596 369.45172119]
[144.15792847 354.45495605]
[143.84587097 339.45822144]
[143.53381348 324.46145630]
[141.35697937 309.62026978]
[137.34922791 295.16555786]
[133.34149170 280.71087646]
[129.33375549 266.25619507]
[125.32601166 251.80149841]
[115.49514771 263.13085938]
[100.50073242 262.72161865]
[91.30246735 250.87289429]
[94.62354279 236.24517822]
[108.03652191 229.53010559]
[121.73716736 235.63537598]
[119.25205231 220.84266663]
[109.51309204 209.57316589]
[114.85712433 194.68182373]
[112.37200928 179.88911438]
[109.88688660 165.09640503]
[107.40177155 150.30371094]
[104.76290894 135.53764343]
[101.97058105 120.79984283]
[97.60309601 135.14993286]
[84.06267548 141.60415649]
[70.16487885 135.96047974]
[64.95792389 121.89321899]
[71.83183289 108.56095123]
[86.31085968 104.64363098]
[71.66735840 101.39280701]
[54.27424622 107.34758759]
[41.77985382 95.06385803]
[27.07189178 92.11837769]
[12.36392975 89.17288971]
[-2.34403229 86.22740936]
[-17.69800186 91.98828125]
[-30.19045639 81.36422729]
[-26.97023010 65.28435516]
[-11.35001469 60.29026794]
[0.60145026 71.51944733]
[15.30941200 74.46492767]
[30.01737404 77.41041565]
[44.72533417 80.35589600]
[55.00277710 73.89978027]
[67.31365967 76.27910614]
[74.91819000 86.74930573]
[89.56169128 90.00012970]
[102.57799530 82.54521942]
[107.18356323 68.26976013]
[111.78912354 53.99429703]
[116.39469147 39.71883774]
[109.44466400 25.77843285]
[114.31871796 11.36669350]
[127.65159607 4.82681322]
[132.25715637 -9.44864750]
[127.95448303 -27.32228279]
[141.35247803 -38.61359024]
[145.66006470 -52.98177338]
[149.96765137 -67.34996033]
[154.27523804 -81.71813965]
[140.83705139 -88.46992493]
[128.77558899 -97.45280457]
[118.45735168 -108.39379120]
[110.19592285 -120.96040344]
[104.24234009 -134.77076721]
[100.77753448 -149.40518188]
[99.90679932 -164.41894531]
[101.65659332 -179.35578918]
[105.97373962 -193.76181030]
[112.72705078 -207.19921875]
[121.71129608 -219.25967407]
[132.65345764 -229.57666016]
[145.22100830 -237.83666992]
[159.03204346 -243.78868103]
[173.66685486 -247.25183105]
[188.68070984 -248.12086487]
[203.61735535 -246.36936951]
[218.02288818 -242.05059814]
[231.45951843 -235.29576111]
[243.51895142 -226.31015015]
[253.83470154 -215.36682129]
[262.09329224 -202.79832458]
[268.04373169 -188.98661804]
[271.50521851 -174.35140991]
[272.37255859 -159.33746338]
[270.61938477 -144.40101624]
[266.29895020 -129.99597168]
[259.54260254 -116.56009674]
[250.55561829 -104.50168610]
[239.61112976 -94.18717194]
[227.04170227 -85.93001556]
[213.22932434 -79.98114014]
[198.59371948 -76.52130890]
[183.57966614 -75.65568542]
[168.64341736 -77.41056061]
[164.33583069 -63.04237366]
[160.02824402 -48.67419052]
[155.72065735 -34.30600739]
[161.18769836 -23.47001076]
[157.66787720 -11.43548298]
[146.53262329 -4.84308290]
[141.92704773 9.43237782]
[148.92410278 22.53111839]
[144.45675659 37.07407379]
[130.67015076 44.32440186]
[126.06459045 58.59986115]
[121.45902252 72.87532043]
[116.85346222 87.15077972]
[116.70838928 118.00751495]
[119.50070953 132.74533081]
[124.20092773 140.65480042]
[122.19448090 147.81858826]
[124.67959595 162.61129761]
[127.16471100 177.40400696]
[129.64982605 192.19670105]
[139.56654358 204.52429199]
[134.04475403 218.35755920]
[136.52987671 233.15026855]
[139.78070068 247.79376221]
[143.78843689 262.24844360]
[147.79618835 276.70312500]
[151.80392456 291.15783691]
[155.81166077 305.61251831]
[160.97358704 291.52868652]
[171.65090942 280.99328613]
[185.80255127 276.02023315]
[200.72329712 277.56024170]
[213.56088257 285.31887817]
[221.86128235 297.81298828]
[224.03779602 312.65426636]
[219.67436218 327.00558472]
[209.60508728 338.12356567]
[195.75482178 343.88293457]
[180.77117920 343.18267822]
[167.51843262 336.15670776]
[158.53056335 324.14941406]
[158.84262085 339.14614868]
[159.15467834 354.14291382]
[159.46673584 369.13967896]
[159.77879333 384.13641357]
[160.09085083 399.13317871]
[160.40290833 414.12994385]
[160.71495056 429.12667847]
[161.02700806 444.12344360]
[163.61801147 463.33114624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[20 123]
[21 122]
[23 120]
[24 119]
[25 118]
[26 117]
[27 115]
[28 114]
[34 52]
[35 51]
[37 48]
[38 47]
[39 46]
[40 45]
[53 113]
[54 112]
[55 111]
[56 110]
[59 107]
[60 106]
[62 103]
[63 102]
[64 101]
[65 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
