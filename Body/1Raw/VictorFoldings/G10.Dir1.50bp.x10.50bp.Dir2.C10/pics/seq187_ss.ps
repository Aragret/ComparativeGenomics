%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.80529022 470.00515747]
[90.80529022 455.00515747]
[90.80529022 440.00515747]
[90.80529022 425.00515747]
[90.80529022 410.00515747]
[90.80529022 395.00515747]
[90.80529022 380.00515747]
[90.80529022 365.00515747]
[90.80529022 350.00515747]
[90.80529022 335.00515747]
[76.45594025 332.29391479]
[62.85013580 326.97814941]
[50.45636368 319.23928833]
[39.70167542 309.34213257]
[30.95699120 297.62600708]
[24.52427864 284.49288940]
[20.62614441 270.39382935]
[19.39812279 255.81329346]
[20.88397217 241.25262451]
[25.03410530 227.21273804]
[31.70725441 214.17695618]
[40.67527390 202.59426880]
[51.63093567 192.86399841]
[64.19846344 185.32189941]
[77.94641876 180.22869873]
[92.40251160 177.76097107]
[92.70652008 162.76405334]
[93.01052094 147.76713562]
[93.31452179 132.77021790]
[93.61853027 117.77330017]
[84.08061218 106.19624329]
[69.30267334 103.62479401]
[54.52472687 101.05334473]
[39.74678040 98.48189545]
[32.46642685 111.75876617]
[21.26787186 121.95048523]
[7.36585283 127.95153046]
[-7.73164558 129.11096191]
[-22.38695717 125.30300140]
[-35.01038742 116.94071960]
[-44.23263550 104.93119049]
[-49.05334473 90.57711029]
[-48.94960022 75.43551636]
[-43.93265533 61.14884186]
[-34.54670715 49.26680756]
[-21.80987930 41.07828522]
[-7.10376406 37.47150421]
[7.97642899 38.83769989]
[21.79491425 45.02867508]
[32.85276413 55.37288666]
[39.95050430 68.74826813]
[42.31822968 83.70395660]
[57.09617233 86.27540588]
[71.87412262 88.84685516]
[86.65206146 91.41830444]
[86.11621857 87.25652313]
[86.67234039 82.72006226]
[88.42147827 78.06937408]
[87.81359100 63.08169937]
[87.20570374 48.09402084]
[73.02076721 38.93244934]
[67.12955475 23.28419304]
[71.66005707 7.36153316]
[84.64402008 -2.63897991]
[83.73250580 -17.61125946]
[82.82099915 -32.58353806]
[68.12883759 -36.13768387]
[55.13787079 -43.86595154]
[45.00323105 -55.08114243]
[38.62609482 -68.78601837]
[36.57350540 -83.76194000]
[39.02798080 -98.67726898]
[45.77127075 -112.20573425]
[56.20376587 -123.14440155]
[69.39781952 -130.52061462]
[84.18021393 -133.67846680]
[99.23651886 -132.33718872]
[113.22794342 -126.61603546]
[124.91036224 -117.02372742]
[133.24499512 -104.41320038]
[137.49073792 -89.90578461]
[137.27003479 -74.79146576]
[132.60253906 -60.41419601]
[123.90327454 -48.05239487]
[111.94577026 -38.80526352]
[97.79327393 -33.49505234]
[98.70478821 -18.52277184]
[99.61630249 -3.55049324]
[111.51730347 2.57123876]
[118.88594055 13.87286949]
[119.69947052 27.44857025]
[113.63735199 39.74383163]
[102.19338226 47.48613739]
[102.80126953 62.47381592]
[103.40914917 77.46149445]
[115.97539520 85.65231323]
[129.93321228 80.15872955]
[143.89102173 74.66513824]
[157.84883118 69.17154694]
[171.80664062 63.67795944]
[185.76445007 58.18436813]
[199.60804749 52.40902710]
[213.33177185 46.35430145]
[227.05548096 40.29957581]
[239.10633850 28.37425423]
[253.90161133 36.65289688]
[250.04225159 53.16173172]
[233.11019897 54.02328873]
[219.38648987 60.07801437]
[205.66278076 66.13273621]
[203.11589050 70.23602295]
[197.93701172 72.75096893]
[191.25804138 72.14218140]
[177.30023193 77.63576508]
[163.34242249 83.12935638]
[149.38459778 88.62294769]
[135.42678833 94.11653900]
[121.46898651 99.61012268]
[136.34854126 97.71314240]
[149.27587891 105.32129669]
[154.84111023 119.25070190]
[150.71527100 133.67211914]
[138.62495422 142.55043030]
[123.62977600 142.17019653]
[112.00496674 132.69055176]
[108.61544800 118.07730103]
[108.31144714 133.07421875]
[108.00743866 148.07113647]
[107.70343781 163.06805420]
[107.39942932 178.06498718]
[122.47295380 181.34831238]
[136.61790466 187.49394226]
[149.29666138 196.26631165]
[160.02772522 207.33007812]
[168.40394592 220.26292419]
[174.10807800 234.57164001]
[176.92469788 249.71101379]
[176.74836731 265.10452271]
[173.58758545 280.16635132]
[167.56443787 294.32357788]
[158.90979004 307.03817749]
[147.95454407 317.82717896]
[135.11686707 326.28131104]
[120.88636017 332.08032227]
[105.80529022 335.00515747]
[105.80529022 350.00515747]
[105.80529022 365.00515747]
[105.80529022 380.00515747]
[105.80529022 395.00515747]
[105.80529022 410.00515747]
[105.80529022 425.00515747]
[105.80529022 440.00515747]
[105.80529022 455.00515747]
[105.80529022 470.00515747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[26 130]
[27 129]
[28 128]
[29 127]
[30 126]
[31 55]
[32 54]
[33 53]
[34 52]
[58 95]
[59 94]
[60 93]
[64 88]
[65 87]
[66 86]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
