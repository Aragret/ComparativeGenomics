%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCxxxxxxxxxxCUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.68642426 380.25036621]
[93.68642426 365.25036621]
[93.68642426 350.25036621]
[93.68642426 335.25036621]
[93.68642426 320.25036621]
[93.68642426 305.25036621]
[93.68642426 290.25036621]
[93.68642426 275.25036621]
[93.68642426 260.25036621]
[93.68642426 245.25038147]
[92.12884521 230.33146667]
[89.03052521 215.65493774]
[86.22631073 213.41799927]
[84.39593506 209.68284607]
[84.24469757 204.93632507]
[86.22697449 199.96739197]
[84.05014038 185.12619019]
[81.87330627 170.28498840]
[69.80817413 161.62657166]
[67.38913727 146.60647583]
[76.55268860 134.01017761]
[74.37584686 119.16896820]
[68.45588684 105.38658905]
[59.19093704 93.58994293]
[49.92598724 81.79330444]
[37.33802032 89.96944427]
[24.06781578 96.98428345]
[10.22222424 102.78133392]
[-4.08727741 107.31393433]
[-18.74547386 110.54557037]
[-33.63434601 112.45024109]
[-48.63401031 113.01259613]
[-63.62370300 112.22811890]
[-78.48272705 110.10312653]
[-93.09144592 106.65471649]
[-107.33224487 101.91065979]
[-121.09044647 95.90915680]
[-134.25529480 88.69852448]
[-146.72076416 80.33682251]
[-158.38652039 70.89138031]
[-169.15861511 60.43823624]
[-178.95033264 49.06156540]
[-187.68281555 36.85296249]
[-195.28575134 23.91072655]
[-201.69795227 10.33906555]
[-206.86776733 -3.75274992]
[-210.75358582 -18.25125694]
[-213.32409668 -33.03972244]
[-214.55862427 -47.99907303]
[-214.44721985 -63.00886536]
[-212.99078369 -77.94824219]
[-210.20104980 -92.69692230]
[-206.10047913 -107.13616180]
[-200.72206116 -121.14968872]
[-194.10913086 -134.62467957]
[-186.31492615 -147.45263672]
[-177.40219116 -159.53027344]
[-167.44268799 -170.76036072]
[-156.51663208 -181.05245972]
[-144.71195984 -190.32371521]
[-132.12374878 -198.49946594]
[-118.85332489 -205.51390076]
[-105.00756073 -211.31053162]
[-90.69792175 -215.84269714]
[-76.03961945 -219.07388306]
[-61.15069199 -220.97810364]
[-46.15100861 -221.53999329]
[-31.16134262 -220.75506592]
[-16.30238342 -218.62960815]
[-1.69376731 -215.18075562]
[12.54688072 -210.43626404]
[26.30490303 -204.43434143]
[39.46952438 -197.22331238]
[51.93474960 -188.86122131]
[63.60021210 -179.41542053]
[74.37199402 -168.96195984]
[84.16335297 -157.58497620]
[92.89546204 -145.37611389]
[100.49801636 -132.43365479]
[106.90979767 -118.86179352]
[112.07917786 -104.76981354]
[115.96454620 -90.27118683]
[118.53461456 -75.48265076]
[119.76868439 -60.52325821]
[119.65682983 -45.51346970]
[118.19993591 -30.57413673]
[115.40975189 -15.82553959]
[111.30873108 -1.38643122]
[105.92989349 12.62693214]
[99.31655121 26.10172081]
[91.52194977 38.92944336]
[82.60884857 51.00681305]
[72.64900970 62.23659134]
[61.72262955 72.52835846]
[70.98757935 84.32499695]
[80.25252533 96.12163544]
[89.15120697 84.45735168]
[102.79997253 82.43767548]
[113.27397919 90.00896454]
[128.04003906 87.37009430]
[142.80609131 84.73123169]
[157.57214355 82.09236908]
[172.33819580 79.45350647]
[187.10424805 76.81464386]
[192.93656921 62.53221512]
[205.57778931 53.68896866]
[220.99415588 53.10675812]
[234.26637268 60.97135925]
[241.15931702 74.77320099]
[239.47346497 90.10817719]
[229.74678040 102.08294678]
[215.08299255 106.87640381]
[200.16128540 102.95897675]
[189.74311829 91.58069611]
[174.97706604 94.21955872]
[160.21101379 96.85842133]
[145.44494629 99.49729156]
[130.67889404 102.13615417]
[115.91284180 104.77501678]
[110.96491241 114.00164032]
[100.93690491 118.93125153]
[89.21705627 116.99213409]
[91.39389038 131.83334351]
[103.78878021 141.26756287]
[105.78498077 156.34965515]
[96.71450806 168.10815430]
[98.89134979 182.94935608]
[101.06818390 197.79055786]
[103.70704651 212.55661011]
[106.80536652 227.23313904]
[113.53775024 213.82885742]
[125.99416351 205.47193909]
[140.95028687 204.32559204]
[154.53479004 210.68650818]
[163.23136902 222.90818787]
[164.78892517 237.82710266]
[158.80429077 251.58152771]
[146.82658386 260.61117554]
[131.95619202 262.57873535]
[118.04225922 256.97494507]
[108.68642426 245.25038147]
[108.68642426 260.25036621]
[108.68642426 275.25036621]
[108.68642426 290.25036621]
[108.68642426 305.25036621]
[108.68642426 320.25036621]
[108.68642426 335.25036621]
[108.68642426 350.25036621]
[108.68642426 365.25036621]
[108.68642426 380.25036621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[16 128]
[17 127]
[18 126]
[21 123]
[22 122]
[23 96]
[24 95]
[25 94]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
