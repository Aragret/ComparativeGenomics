%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.56335449 276.99694824]
[133.00578308 262.07803345]
[131.44819641 247.15913391]
[129.89060974 232.24021912]
[128.33303833 217.32130432]
[125.23471069 202.64477539]
[120.62915039 188.36932373]
[116.02358246 174.09385681]
[111.41802216 159.81840515]
[106.81245422 145.54293823]
[102.20689392 131.26747131]
[97.60132599 116.99201965]
[90.59297180 114.32125854]
[78.95874786 123.78936005]
[76.57625580 108.97975159]
[69.56790161 106.30899048]
[56.62984467 113.89890289]
[48.64171219 127.55541229]
[33.74893951 127.32162476]
[20.81088448 134.91152954]
[7.87282896 142.50143433]
[5.44282627 157.94906616]
[-6.38209677 168.18162537]
[-22.01857376 168.36761475]
[-34.08353806 158.41920471]
[-36.88028336 143.03375244]
[-29.08827209 129.47578430]
[-14.38665104 124.14695740]
[0.28292045 129.56338501]
[13.22097683 121.97348022]
[26.15903282 114.38356781]
[33.22174835 101.26993561]
[49.03993607 100.96084595]
[61.97799301 93.37093353]
[69.70665741 88.93170929]
[77.61968231 86.94733429]
[85.10769653 87.31111908]
[91.61030579 89.78140259]
[96.64392090 93.99645996]
[100.04689789 79.38756561]
[103.44987488 64.77867126]
[106.85285187 50.16978073]
[110.25582886 35.56089020]
[113.65880585 20.95199585]
[103.82260132 13.86101532]
[96.99652863 3.88123989]
[93.97147369 -7.78926706]
[95.08370972 -19.75913048]
[100.17770386 -30.60953712]
[108.62735748 -39.06241608]
[119.41290283 -44.13097000]
[131.24389648 -45.23483658]
[135.55146790 -59.60302353]
[134.38481140 -66.21712494]
[136.46434021 -71.59363556]
[140.34866333 -74.47245026]
[145.25021362 -88.64900970]
[150.15176392 -102.82556152]
[155.05331421 -117.00212097]
[159.95486450 -131.17868042]
[164.85641479 -145.35523987]
[151.45742798 -152.15087891]
[139.10861206 -160.70777893]
[128.04002380 -170.86653137]
[118.45787048 -182.43788147]
[110.54065704 -195.20625305]
[104.43587494 -208.93379211]
[100.25725555 -223.36476135]
[98.08264160 -238.23031616]
[97.95254517 -253.25352478]
[99.86939240 -268.15451050]
[103.79747772 -282.65570068]
[109.66361237 -296.48690796]
[117.35851288 -309.39047241]
[126.73884583 -321.12600708]
[137.62983704 -331.47494507]
[149.82861328 -340.24441528]
[163.10791016 -347.27105713]
[177.22035217 -352.42401123]
[191.90301514 -355.60726929]
[206.88238525 -356.76150513]
[221.87939453 -355.86523438]
[236.61466980 -352.93511963]
[250.81370544 -348.02581787]
[264.21197510 -341.22872925]
[276.55984497 -332.67047119]
[287.62731934 -322.51052856]
[297.20825195 -310.93814087]
[305.12405396 -298.16891479]
[311.22735596 -284.44070435]
[315.40441895 -270.00930786]
[317.57742310 -255.14350891]
[317.70590210 -240.12028503]
[315.78744507 -225.21949768]
[311.85778809 -210.71875000]
[305.99014282 -196.88818359]
[298.29385376 -183.98544312]
[288.91226196 -172.25090027]
[278.02014160 -161.90316772]
[265.82040405 -153.13502502]
[252.54034424 -146.10980225]
[238.42735291 -140.95837402]
[223.74435425 -137.77671814]
[208.76484680 -136.62409973]
[193.76792908 -137.52200317]
[179.03297424 -140.45368958]
[174.13142395 -126.27713013]
[169.22987366 -112.10057068]
[164.32832336 -97.92401123]
[159.42677307 -83.74745941]
[154.52522278 -69.57089996]
[149.91966248 -55.29543686]
[145.61207581 -40.92725372]
[158.61160278 -28.40486336]
[163.53613281 -10.95202827]
[158.95700073 6.68182898]
[146.04394531 19.65323067]
[128.26770020 24.35497475]
[124.86472321 38.96386719]
[121.46174622 53.57275772]
[118.05876923 68.18164825]
[114.65578461 82.79054260]
[111.25280762 97.39943695]
[111.87678528 112.38645172]
[116.48235321 126.66191101]
[121.08791351 140.93737793]
[125.69348145 155.21282959]
[130.29904175 169.48829651]
[134.90460205 183.76376343]
[139.51017761 198.03921509]
[144.81428528 184.00830078]
[156.33558655 174.40312195]
[171.09182739 171.70993042]
[185.26339722 176.62585449]
[195.18203735 187.87844849]
[198.28033447 202.55497742]
[193.75630188 216.85647583]
[182.78097534 227.08105469]
[168.19526672 230.58212280]
[153.77467346 226.45339966]
[143.25195312 215.76373291]
[144.80952454 230.68263245]
[146.36711121 245.60154724]
[147.92468262 260.52047729]
[149.48226929 275.43936157]
[161.91392517 285.19793701]
[163.72113037 300.89855957]
[153.83168030 313.22634888]
[138.11282349 314.86743164]
[125.89028168 304.84820557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 145]
[2 144]
[3 143]
[4 142]
[5 141]
[6 130]
[7 129]
[8 128]
[9 127]
[10 126]
[11 125]
[12 124]
[16 34]
[17 33]
[19 31]
[20 30]
[21 29]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[52 113]
[53 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
