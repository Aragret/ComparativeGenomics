%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCxxxxxxxxxxUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.52340698 287.11712646]
[79.52340698 272.11712646]
[79.52340698 257.11712646]
[79.52340698 242.11712646]
[79.52340698 227.11712646]
[79.52340698 212.11712646]
[79.52340698 197.11712646]
[79.52340698 182.11712646]
[79.52340698 167.11712646]
[79.52340698 152.11712646]
[65.74102783 146.19715881]
[54.86219788 156.52436829]
[43.98337555 166.85156250]
[33.10454941 177.17877197]
[36.77056885 192.09371948]
[32.47254944 206.83898926]
[21.36663628 217.44813538]
[6.44026279 221.06739807]
[-8.29144955 216.72317505]
[-18.86574364 205.58406067]
[-22.43819046 190.64642334]
[-18.04781723 175.92839050]
[-6.87561274 165.38906860]
[8.07315540 161.86346436]
[22.77734375 166.29994202]
[33.65616989 155.97274780]
[44.53499603 145.64553833]
[55.41381836 135.31832886]
[53.11103821 128.18060303]
[40.95735550 136.97196960]
[28.84069061 128.12965393]
[33.50614929 113.87365723]
[48.50547409 113.90514374]
[46.20269012 106.76741028]
[31.33964348 104.74507904]
[16.47659683 102.72274017]
[1.61355019 100.70040894]
[-9.83893776 111.34815216]
[-25.45883560 112.09165192]
[-37.87090683 102.57984161]
[-41.21455002 87.30390930]
[-33.91099548 73.47668457]
[-19.40876579 67.62696075]
[-4.55536461 72.51679230]
[3.63588476 85.83736420]
[18.49893188 87.85969543]
[33.36197662 89.88202667]
[48.22502518 91.90436554]
[77.96419525 61.61908722]
[113.16962433 66.37754822]
[121.42191315 53.85158539]
[129.67419434 41.32562256]
[137.92649841 28.79966164]
[146.17878723 16.27369881]
[134.41191101 6.95543814]
[123.50195312 -3.35292435]
[113.53195953 -14.57293320]
[104.57780457 -26.61919403]
[96.70762634 -39.40002823]
[89.98133850 -52.81816483]
[84.45011902 -66.77148438]
[80.15607452 -81.15377808]
[77.13188171 -95.85560608]
[75.40055084 -110.76506042]
[74.97527313 -125.76867676]
[75.85926819 -140.75225830]
[78.04582214 -155.60179138]
[81.51828766 -170.20422363]
[86.25023651 -184.44845581]
[92.20565796 -198.22605896]
[99.33921814 -211.43217468]
[107.59663391 -223.96630859]
[116.91506195 -235.73306274]
[127.22357941 -246.64286804]
[138.44372559 -256.61270142]
[150.49011230 -265.56668091]
[163.27105713 -273.43667603]
[176.68928528 -280.16278076]
[190.64268494 -285.69381714]
[205.02503967 -289.98764038]
[219.72691345 -293.01162720]
[234.63638306 -294.74276733]
[249.64001465 -295.16781616]
[264.62359619 -294.28363037]
[279.47308350 -292.09686279]
[294.07546997 -288.62417603]
[308.31964111 -283.89202881]
[322.09716797 -277.93643188]
[335.30316162 -270.80267334]
[347.83718872 -262.54507446]
[359.60379028 -253.22648621]
[370.51345825 -242.91783142]
[380.48315430 -231.69754028]
[389.43695068 -219.65101624]
[397.30679321 -206.86996460]
[404.03268433 -193.45164490]
[409.56350708 -179.49816895]
[413.85714722 -165.11575317]
[416.88095093 -150.41384888]
[418.61184692 -135.50434875]
[419.03671265 -120.50070953]
[418.15228271 -105.51715088]
[415.96533203 -90.66768646]
[412.49246216 -76.06533813]
[407.76010132 -61.82124710]
[401.80429077 -48.04381180]
[394.67034912 -34.83789062]
[386.41259766 -22.30399132]
[377.09384155 -10.53750896]
[366.78500366 0.37200874]
[355.56457520 10.34153080]
[343.51794434 19.29518127]
[330.73678589 27.16481590]
[317.31835938 33.89054108]
[303.36480713 39.42117310]
[288.98233032 43.71461487]
[274.28039551 46.73818970]
[259.37084961 48.46889114]
[244.36721802 48.89353943]
[229.38366699 48.00891113]
[214.53424072 45.82173538]
[199.93194580 42.34865570]
[185.68791199 37.61610794]
[171.91056824 31.66010857]
[158.70474243 24.52598953]
[150.45245361 37.05195236]
[142.20016479 49.57791138]
[133.94787598 62.10387421]
[125.69558716 74.62983704]
[131.45301819 79.64012909]
[136.19883728 85.96234131]
[139.63490295 93.38412476]
[141.50930786 101.62582397]
[141.63151550 110.35094452]
[139.88490295 119.17982483]
[136.23632812 127.70618439]
[130.74194336 135.51560974]
[123.54876709 142.20533752]
[114.89208221 147.40419006]
[105.08824921 150.79197693]
[94.52340698 152.11712646]
[94.52340698 167.11712646]
[94.52340698 182.11712646]
[94.52340698 197.11712646]
[94.52340698 212.11712646]
[94.52340698 227.11712646]
[94.52340698 242.11712646]
[94.52340698 257.11712646]
[94.52340698 272.11712646]
[94.52340698 287.11712646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[34 48]
[35 47]
[36 46]
[37 45]
[50 129]
[51 128]
[52 127]
[53 126]
[54 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
