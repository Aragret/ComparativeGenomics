%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGxxxxxxxxxxAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.50411987 329.49743652]
[179.87034607 319.61700439]
[172.68783569 306.44842529]
[165.50532532 293.27984619]
[158.32281494 280.11126709]
[145.43594360 272.64279175]
[145.62057495 256.82266235]
[138.43806458 243.65408325]
[131.25555420 230.48550415]
[124.07305145 217.31692505]
[116.89054108 204.14834595]
[112.27940369 218.42199707]
[99.66603088 226.54005432]
[84.76440430 224.82495117]
[74.32511139 214.05364990]
[73.07724762 199.10563660]
[81.58611298 186.75253296]
[95.99710083 182.59040833]
[109.78219604 188.50500488]
[104.58677673 174.43348694]
[99.39136505 160.36196899]
[94.19594574 146.29045105]
[89.00053406 132.21893311]
[93.71729279 146.45803833]
[91.55093384 161.30078125]
[82.96113586 173.59774780]
[69.77052307 180.73970032]
[54.77793503 181.21124268]
[41.16458130 174.91230774]
[31.81900406 163.17944336]
[28.72419739 148.50218201]
[32.53683090 133.99481201]
[42.44792175 122.73557281]
[56.35448456 117.11352539]
[71.30557251 118.32150269]
[56.40367126 116.60881805]
[41.50177002 114.89612579]
[26.59986687 113.18343353]
[11.77790737 120.20066833]
[-1.55443740 110.65181732]
[0.31800607 94.35991669]
[15.46902847 88.08467865]
[28.31255531 98.28153229]
[43.21445847 99.99422455]
[58.11635971 101.70691681]
[73.01826477 103.41960144]
[80.60488892 87.13088989]
[94.77991486 81.36227417]
[96.64752960 66.47899628]
[98.51514435 51.59571457]
[100.38275909 36.71243286]
[85.78642273 33.18725204]
[71.67656708 28.04993439]
[58.23064423 21.36508751]
[45.61774826 13.21678066]
[33.99650192 3.70748854]
[23.51305199 -7.04320097]
[14.29924297 -18.90008545]
[6.47094440 -31.71405220]
[0.12660667 -45.32395172]
[-4.65398312 -59.55862808]
[-7.81070423 -74.23905945]
[-9.30385780 -89.18063354]
[-9.11466599 -104.19543457]
[-7.24550676 -119.09463501]
[-3.71988845 -133.69087219]
[1.41785145 -147.80056763]
[8.10309982 -161.24629211]
[16.25178337 -173.85894775]
[25.76142311 -185.47990417]
[36.51242828 -195.96302795]
[48.36958694 -205.17648315]
[61.18378830 -213.00439453]
[74.79387665 -219.34832764]
[89.02869415 -224.12849426]
[103.70922089 -227.28477478]
[118.65084076 -228.77748108]
[133.66563416 -228.58784485]
[148.56477356 -226.71824646]
[163.16090393 -223.19218445]
[177.27046204 -218.05401611]
[190.71597290 -211.36837769]
[203.32838440 -203.21931458]
[214.94906616 -193.70932007]
[225.43186951 -182.95800781]
[234.64497375 -171.10057068]
[242.47250366 -158.28613281]
[248.81602478 -144.67585754]
[253.59576416 -130.44090271]
[256.75161743 -115.76027679]
[258.24386597 -100.81861115]
[258.05377197 -85.80382538]
[256.18371582 -70.90473175]
[252.65724182 -56.30871201]
[247.51864624 -42.19931793]
[240.83259583 -28.75399590]
[232.68316650 -16.14183235]
[223.17282104 -4.52143908]
[212.42118835 5.96104479]
[200.56347656 15.17379093]
[187.74880981 23.00094032]
[174.13835144 29.34405708]
[159.90324402 34.12337112]
[145.22251892 37.27877426]
[130.28082275 38.77058792]
[115.26603699 38.58004761]
[113.39842224 53.46332550]
[111.53081512 68.34660339]
[109.66320038 83.22988892]
[122.78993988 104.73318481]
[103.07205200 127.02351379]
[108.26747131 141.09503174]
[113.46288300 155.16654968]
[118.65830231 169.23806763]
[123.85371399 183.30958557]
[130.05912781 196.96583557]
[137.24163818 210.13441467]
[144.42413330 223.30299377]
[151.60664368 236.47157288]
[158.78915405 249.64016724]
[172.18977356 258.05053711]
[171.49139404 272.92874146]
[178.67390442 286.09732056]
[185.85641479 299.26593018]
[193.03892517 312.43450928]
[207.49990845 308.22805786]
[222.52708435 307.22912598]
[237.41761780 309.48437500]
[251.47503662 314.88833618]
[264.04187012 323.18829346]
[274.53033447 333.99597168]
[282.44982910 346.80593872]
[287.43002319 361.01904297]
[289.23791504 375.97048950]
[287.78897095 390.96096802]
[283.15097046 405.28936768]
[275.54080200 418.28552246]
[265.31448364 429.34155273]
[252.95022583 437.94036865]
[239.02639771 443.67977905]
[224.19421387 446.29135132]
[209.14739990 445.65295410]
[194.58973694 441.79440308]
[181.20210266 434.89620972]
[169.61065674 425.28097534]
[160.35755920 413.39846802]
[153.87559509 399.80441284]
[150.46794128 385.13464355]
[150.29396057 370.07528687]
[153.36181641 355.33071899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[19 115]
[20 114]
[21 113]
[22 112]
[23 111]
[35 46]
[36 45]
[37 44]
[38 43]
[48 109]
[49 108]
[50 107]
[51 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
