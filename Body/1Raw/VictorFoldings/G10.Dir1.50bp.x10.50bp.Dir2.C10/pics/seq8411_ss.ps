%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACxxxxxxxxxxCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.69343567]
[92.50000000 227.69343567]
[92.50000000 212.69343567]
[92.50000000 197.69343567]
[92.50000000 182.69343567]
[92.50000000 167.69343567]
[92.50000000 152.69343567]
[92.50000000 137.69343567]
[92.50000000 122.69344330]
[92.50000000 107.69344330]
[87.89443207 93.41798401]
[79.12822723 81.24614716]
[64.78473663 74.56970215]
[63.62522507 59.72029495]
[54.85901642 47.54845810]
[46.09280777 35.37662125]
[37.32660294 23.20478630]
[28.56039429 11.03294945]
[19.79418755 -1.13888776]
[11.02797985 -13.31072426]
[-1.78538203 -5.49788284]
[-15.15921783 1.31117511]
[-29.01504326 7.07649040]
[-43.27154541 11.76422882]
[-57.84505844 15.34688187]
[-72.65006256 17.80342484]
[-87.59967804 19.11944008]
[-102.60616302 19.28720474]
[-117.58145905 18.30573463]
[-132.43768311 16.18079185]
[-147.08764648 12.92484283]
[-161.44538879 8.55699730]
[-175.42663574 3.10288763]
[-188.94935608 -3.40547967]
[-201.93418884 -10.92990971]
[-214.30491638 -19.42624664]
[-225.98895264 -28.84462929]
[-236.91773987 -39.12978745]
[-247.02713013 -50.22135925]
[-256.25781250 -62.05425644]
[-264.55557251 -74.55904388]
[-271.87176514 -87.66232300]
[-278.16345215 -101.28721619]
[-283.39367676 -115.35375214]
[-287.53176880 -129.77938843]
[-290.55343628 -144.47946167]
[-292.44097900 -159.36770630]
[-293.18325806 -174.35676575]
[-292.77597046 -189.35865784]
[-291.22149658 -204.28535461]
[-288.52893066 -219.04925537]
[-284.71408081 -233.56373596]
[-279.79937744 -247.74359131]
[-273.81359863 -261.50561523]
[-266.79193115 -274.76904297]
[-258.77554321 -287.45605469]
[-249.81149292 -299.49218750]
[-239.95237732 -310.80682373]
[-229.25607300 -321.33352661]
[-217.78532410 -331.01055908]
[-205.60746765 -339.78109741]
[-192.79394531 -347.59368896]
[-179.41998291 -354.40249634]
[-165.56405640 -360.16754150]
[-151.30746460 -364.85501099]
[-136.73387146 -368.43740845]
[-121.92882538 -370.89364624]
[-106.97919464 -372.20938110]
[-91.97270203 -372.37686157]
[-76.99742889 -371.39511108]
[-62.14124298 -369.26989746]
[-47.49133682 -366.01367188]
[-33.13368225 -361.64553833]
[-19.15253258 -356.19116211]
[-5.62993765 -349.68255615]
[7.35474539 -342.15786743]
[19.72531700 -333.66131592]
[31.40917969 -324.24270630]
[42.33776855 -313.95733643]
[52.44694519 -302.86557007]
[61.67739105 -291.03250122]
[69.97493744 -278.52755737]
[77.29087830 -265.42413330]
[83.58229828 -251.79911804]
[88.81226349 -237.73248291]
[92.95008087 -223.30677795]
[95.97148132 -208.60664368]
[97.85871887 -193.71835327]
[98.60073090 -178.72929382]
[98.19315338 -163.72740173]
[96.63838196 -148.80073547]
[93.94554138 -134.03688049]
[90.13043213 -119.52248383]
[85.21544647 -105.34272003]
[79.22942352 -91.58081055]
[72.20748901 -78.31750488]
[64.19086456 -65.63064575]
[55.22658539 -53.59467697]
[45.36725998 -42.28024292]
[34.67074585 -31.75373650]
[23.19981766 -22.07693100]
[31.96602440 -9.90509510]
[40.73223114 2.26674199]
[49.49843979 14.43857861]
[58.26464462 26.61041641]
[67.03085327 38.78225327]
[75.79705811 50.95409012]
[89.51353455 56.75992203]
[91.30006409 72.47993469]
[100.06626892 84.65177155]
[99.16812134 69.67868805]
[101.15306091 54.81060028]
[105.94766998 40.59751511]
[113.37457275 27.56520844]
[123.15904999 16.19577026]
[134.93913269 6.90978289]
[148.27906799 0.05075461]
[162.68536377 -4.12758398]
[177.62510681 -5.47066641]
[192.54565430 -3.92880988]
[206.89505005 0.44094938]
[220.14248657 7.47696447]
[231.79791260 16.91895676]
[241.43014526 28.41764832]
[248.68290710 41.54767609]
[253.28785706 55.82332993]
[255.07469177 70.71652222]
[253.97727966 85.67633057]
[250.03623962 100.14934540]
[243.39733887 113.60018158]
[234.30618286 125.53126526]
[223.09906006 135.50123596]
[210.19055176 143.14129639]
[196.05816650 148.16880798]
[181.22470093 150.39779663]
[166.23887634 149.74580383]
[151.65505981 146.23696899]
[138.01271057 140.00105286]
[125.81652069 131.26876831]
[115.51763153 120.36313629]
[107.50000000 107.69344330]
[107.50000000 122.69344330]
[107.50000000 137.69343567]
[107.50000000 152.69343567]
[107.50000000 167.69343567]
[107.50000000 182.69343567]
[107.50000000 197.69343567]
[107.50000000 212.69343567]
[107.50000000 227.69343567]
[107.50000000 242.69343567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[14 107]
[15 106]
[16 105]
[17 104]
[18 103]
[19 102]
[20 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
