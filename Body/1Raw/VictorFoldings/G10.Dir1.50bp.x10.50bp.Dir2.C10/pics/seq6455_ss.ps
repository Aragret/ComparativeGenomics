%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGxxxxxxxxxxUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.73753357 307.44616699]
[108.73753357 292.44616699]
[108.73753357 277.44616699]
[108.73753357 262.44616699]
[108.73753357 247.44615173]
[108.73753357 232.44615173]
[108.73753357 217.44615173]
[108.73753357 202.44615173]
[108.73753357 187.44615173]
[108.73753357 172.44615173]
[105.79204559 157.73818970]
[100.27806091 152.74403381]
[100.04291534 143.54638672]
[94.55588531 129.58599854]
[89.06885529 115.62561035]
[93.92662048 129.81723022]
[93.49119568 144.81091309]
[87.81804657 158.69671631]
[77.62983704 169.70581055]
[64.22436523 176.43585205]
[49.30926514 178.02952576]
[34.78446579 174.28384399]
[22.50017929 165.67591858]
[14.02121067 153.30227661]
[10.42763996 138.73908997]
[12.17722511 123.84147644]
[19.04709816 110.50712585]
[30.16215706 100.43461609]
[44.10652924 94.90700531]
[59.10394287 94.62842560]
[73.24192047 99.63317108]
[59.33936310 94.00122070]
[45.43680954 88.36926270]
[31.53425217 82.73730469]
[22.33955765 82.40649414]
[17.40302849 76.84085846]
[3.62064672 70.92089081]
[-10.16173458 65.00093079]
[-23.46673012 72.76515961]
[-38.61529160 71.22423553]
[-49.81925964 61.17758560]
[-52.92183685 46.63413239]
[-66.70421600 40.71416855]
[-79.96964264 48.76452637]
[-95.43064880 47.44663620]
[-107.14217377 37.26725006]
[-110.60089111 22.14055634]
[-104.47685242 7.88307333]
[-91.12488556 -0.02290515]
[-75.67908478 1.46263087]
[-64.07867432 11.76846313]
[-60.78425598 26.93178749]
[-47.00187302 32.85174942]
[-34.31809998 25.08902931]
[-19.31800652 26.29784393]
[-7.77095366 36.22351456]
[-4.24177170 51.21855164]
[9.54060936 57.13851166]
[23.32299042 63.05847549]
[37.16621017 68.83474731]
[51.06876373 74.46670532]
[64.97132111 80.09866333]
[78.87387848 85.73062134]
[91.04571533 76.96440887]
[90.11008453 61.99361801]
[89.17445374 47.02282715]
[88.23883057 32.05203629]
[73.95257568 26.77729034]
[63.05140305 16.14318085]
[57.42399979 1.99213064]
[58.04534912 -13.22410488]
[64.80780029 -26.86922073]
[76.53971100 -36.57911682]
[91.20846558 -40.67149734]
[106.27260590 -38.43733215]
[119.12218475 -30.26370239]
[127.53092957 -17.56674004]
[130.04197693 -2.54626989]
[126.22027588 12.19532013]
[116.72795868 24.10396004]
[103.20961761 31.11640739]
[104.14524841 46.08720016]
[105.08087921 61.05799103]
[106.01650238 76.02878571]
[120.03321838 81.37029266]
[130.69483948 70.81900787]
[141.35647583 60.26771545]
[152.01809692 49.71642303]
[147.00332642 35.30064392]
[148.74847412 20.13762093]
[156.90704346 7.23798990]
[169.85914612 -0.83701950]
[185.03312683 -2.48410845]
[199.41619873 2.62375379]
[210.15257263 13.47239685]
[215.11053467 27.90781593]
[213.30567932 43.06384659]
[205.09637451 55.93125153]
[192.11257935 63.95519257]
[176.93222046 65.54251099]
[162.56938171 60.37805176]
[151.90776062 70.92934418]
[141.24613953 81.48062897]
[130.58450317 92.03192139]
[137.21301270 105.48788452]
[152.07604980 103.46555328]
[166.93910217 101.44322205]
[181.80215454 99.42088318]
[196.68148804 91.29428101]
[208.60951233 103.34246063]
[200.33418274 118.13959503]
[183.82447815 114.28392792]
[168.96144104 116.30626678]
[154.09838867 118.32859802]
[139.23533630 120.35093689]
[124.23486328 122.38816071]
[111.52999878 118.48645782]
[103.02924347 110.13858032]
[108.51627350 124.09897614]
[114.00331116 138.05935669]
[119.63526154 151.96191406]
[121.94134521 137.14024353]
[128.43865967 123.62044525]
[138.57096863 112.55988312]
[151.47093201 104.90540314]
[166.03422546 101.31226349]
[181.01414490 102.08806610]
[195.12834167 107.16639709]
[207.16856384 116.11251831]
[216.10409546 128.16059875]
[221.17001343 142.27925110]
[221.93264771 157.25985718]
[218.32672119 171.81997681]
[210.66090393 184.71321106]
[199.59143066 194.83580017]
[186.06593323 201.32121277]
[171.24223328 203.61427307]
[156.38934326 201.51866150]
[142.77873230 195.21379089]
[131.57556152 185.23937988]
[123.73753357 172.44615173]
[123.73753357 187.44615173]
[123.73753357 202.44615173]
[123.73753357 217.44615173]
[123.73753357 232.44615173]
[123.73753357 247.44615173]
[123.73753357 262.44616699]
[123.73753357 277.44616699]
[123.73753357 292.44616699]
[123.73753357 307.44616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[13 120]
[14 119]
[15 118]
[31 63]
[32 62]
[33 61]
[34 60]
[36 59]
[37 58]
[38 57]
[42 53]
[43 52]
[64 84]
[65 83]
[66 82]
[67 81]
[85 104]
[86 103]
[87 102]
[88 101]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
