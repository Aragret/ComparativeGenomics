%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUxxxxxxxxxxUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.67823792 479.34829712]
[158.67823792 464.34829712]
[158.67823792 449.34829712]
[158.67823792 434.34829712]
[158.67823792 419.34829712]
[158.67823792 404.34829712]
[158.67823792 389.34829712]
[158.67823792 374.34829712]
[158.67823792 359.34829712]
[158.67823792 344.34829712]
[156.81062317 329.46502686]
[153.10446167 314.93008423]
[149.09672546 300.47540283]
[144.78913879 286.10720825]
[140.48155212 271.73901367]
[126.98004150 269.46557617]
[115.72920990 261.54736328]
[108.96743774 249.48976135]
[108.07010651 235.62831116]
[113.27024078 222.67648315]
[123.60161591 213.19447327]
[119.59387970 198.73979187]
[108.73735809 188.54248047]
[112.50620270 173.17672729]
[108.49846649 158.72203064]
[104.49072266 144.26734924]
[100.48298645 129.81265259]
[93.03473663 128.99160767]
[86.02641296 126.33944702]
[79.90065002 122.02371216]
[75.04434967 116.31697083]
[71.76424408 109.57965088]
[56.80399323 110.67095947]
[45.26944351 121.82146454]
[29.37915039 119.61281586]
[21.32278633 105.73929596]
[27.28050423 90.84348297]
[42.68205261 86.35217285]
[55.71268082 95.71071625]
[70.67292786 94.61940002]
[73.42218018 86.48529053]
[78.37538147 79.47187805]
[85.12179565 74.16075134]
[93.10197449 70.99232483]
[93.41403198 55.99557495]
[93.72608948 40.99882126]
[94.03814697 26.00206566]
[94.35019684 11.00531197]
[94.66225433 -3.99144149]
[94.97431183 -18.98819542]
[80.43159485 -25.67803574]
[69.87192535 -37.64152908]
[65.07015991 -52.80618668]
[66.80834961 -68.56689453]
[74.74874115 -82.23341370]
[87.49840546 -91.48960876]
[84.09542847 -106.09849548]
[80.69245148 -120.70738983]
[77.28946686 -135.31628418]
[62.20732498 -135.97311401]
[47.86203003 -140.67578125]
[35.31811142 -149.07534790]
[25.50640488 -160.54849243]
[19.15500450 -174.24383545]
[16.73522758 -189.14508057]
[18.42663765 -204.14646912]
[24.10371971 -218.13479614]
[33.34519958 -230.07203674]
[45.46529388 -239.07235718]
[59.56461334 -244.46789551]
[74.59689331 -245.85824585]
[89.44664764 -243.14024353]
[103.01190948 -236.51557922]
[114.28606415 -226.47584534]
[122.43247986 -213.76606750]
[126.84664154 -199.32939148]
[127.20099640 -184.23710632]
[123.46924591 -169.60916138]
[115.92830658 -156.53106689]
[105.13777161 -145.97328186]
[91.89836121 -138.71926880]
[95.30133820 -124.11036682]
[98.70432281 -109.50148010]
[102.10729980 -94.89258575]
[111.50890350 -94.00601959]
[120.40248871 -90.83109283]
[129.66743469 -102.62773132]
[138.93238831 -114.42436981]
[148.19734192 -126.22100830]
[149.98405457 -142.52253723]
[165.10185242 -148.87738037]
[177.99884033 -138.74822998]
[175.40769958 -122.55508423]
[159.99397278 -116.95606232]
[150.72903442 -105.15942383]
[141.46408081 -93.36277771]
[132.19912720 -81.56613922]
[139.90377808 -67.63645172]
[141.25221252 -51.71382141]
[135.95947266 -36.57137299]
[124.90159607 -24.86684990]
[109.97106934 -18.67613792]
[109.65901184 -3.67938519]
[109.34695435 11.31736851]
[109.03489685 26.31412315]
[108.72283936 41.31087494]
[108.41078186 56.30762863]
[108.09873199 71.30438232]
[125.94725800 85.31096649]
[128.77210999 107.82262421]
[114.93767548 125.80491638]
[118.94541168 140.25961304]
[122.95315552 154.71429443]
[126.96089172 169.16897583]
[138.10408020 180.40019226]
[134.04856873 194.73204041]
[138.05630493 209.18673706]
[154.07852173 213.14495850]
[165.86408997 224.56404114]
[170.27565002 240.27290344]
[166.20501709 255.97677612]
[154.84973145 267.43142700]
[159.15731812 281.79962158]
[163.46490479 296.16781616]
[168.07791138 301.04916382]
[169.29927063 306.68295288]
[167.63940430 311.22390747]
[171.34556580 325.75885010]
[176.79936218 311.78546143]
[187.69355774 301.47445679]
[201.94558716 296.79690552]
[216.83105469 298.64697266]
[229.50445557 306.67098999]
[237.54313660 319.33511353]
[239.41043091 334.21841431]
[234.74937439 348.47586060]
[224.45098877 359.38198853]
[210.48391724 364.85195923]
[195.51808167 363.84014893]
[182.41435242 356.53997803]
[173.67823792 344.34829712]
[173.67823792 359.34829712]
[173.67823792 374.34829712]
[173.67823792 389.34829712]
[173.67823792 404.34829712]
[173.67823792 419.34829712]
[173.67823792 434.34829712]
[173.67823792 449.34829712]
[173.67823792 464.34829712]
[173.67823792 479.34829712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 124]
[14 123]
[15 122]
[21 117]
[22 116]
[24 114]
[25 113]
[26 112]
[27 111]
[32 40]
[33 39]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[49 103]
[50 102]
[56 84]
[57 83]
[58 82]
[59 81]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
