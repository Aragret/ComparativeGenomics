%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGxxxxxxxxxxUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.61848450 415.86251831]
[165.70697021 400.89022827]
[164.79545593 385.91796875]
[163.88394165 370.94567871]
[162.97242737 355.97338867]
[162.06091309 341.00112915]
[161.14939880 326.02883911]
[158.42832947 311.27770996]
[153.93788147 296.96563721]
[149.44743347 282.65353394]
[144.95698547 268.34146118]
[133.76445007 258.51412964]
[137.01564026 243.03057861]
[132.52519226 228.71849060]
[128.03474426 214.40640259]
[123.54430389 200.09429932]
[119.05385590 185.78221130]
[107.86132050 175.95489502]
[111.11251831 160.47134399]
[106.62207031 146.15925598]
[102.13162231 131.84716797]
[82.65146637 126.79205322]
[70.06842804 111.08543396]
[69.38505554 90.97167206]
[80.87302399 74.44722748]
[74.95767975 60.66285706]
[69.04234314 46.87849045]
[63.12700653 33.09412384]
[57.21166992 19.30975533]
[51.29633331 5.52538824]
[39.54127502 3.32889295]
[30.41704559 -4.21384811]
[26.13673019 -15.12214184]
[27.66488838 -26.61879921]
[34.50289917 -35.83700562]
[29.15104103 -49.84976959]
[23.79918289 -63.86253357]
[18.44732285 -77.87529755]
[2.80180478 -76.56982422]
[-12.56601906 -79.71014404]
[-26.41953468 -87.03525543]
[-37.64632416 -97.94773865]
[-45.34747314 -111.56250000]
[-48.90956497 -126.77853394]
[-48.05352020 -142.36798096]
[-42.85644150 -157.07516479]
[-33.74476242 -169.71780396]
[-21.45925140 -179.28199768]
[-27.09400749 -193.18342590]
[-32.72876358 -207.08483887]
[-40.27260208 -220.04981995]
[-49.57392502 -231.81779480]
[-58.87525177 -243.58576965]
[-68.17657471 -255.35375977]
[-77.47789764 -267.12173462]
[-92.50883484 -264.23565674]
[-107.15593719 -268.67648315]
[-118.05341339 -279.42373657]
[-122.69709015 -294.00781250]
[-120.01988983 -309.07736206]
[-110.63702393 -321.16952515]
[-96.70458984 -327.50558472]
[-81.42417145 -326.62960815]
[-68.30709076 -318.74285889]
[-60.36755753 -305.65768433]
[-59.43001938 -290.38092041]
[-65.70991516 -276.42306519]
[-56.40859222 -264.65509033]
[-47.10726929 -252.88710022]
[-37.80594635 -241.11912537]
[-28.50462151 -229.35113525]
[-29.78791809 -244.29614258]
[-25.35371399 -258.62576294]
[-15.85371113 -270.23394775]
[-2.68413520 -277.41461182]
[12.21946716 -279.11245728]
[26.66669655 -275.07791138]
[38.53422546 -265.90393066]
[46.07787323 -252.93885803]
[48.18893814 -238.08815002]
[44.55715561 -223.53445435]
[35.71629333 -211.41673279]
[22.96570396 -203.51594543]
[8.17935371 -200.99328613]
[-6.46958923 -204.21949768]
[-18.82734108 -212.71960449]
[-13.19258499 -198.81817627]
[-7.55782938 -184.91674805]
[6.70144463 -186.63279724]
[20.92936897 -184.58653259]
[34.14945984 -178.91204834]
[45.45274734 -169.99263000]
[54.06027222 -158.43489075]
[59.37677383 -145.02758789]
[61.03184128 -130.68768311]
[58.90571594 -116.39774323]
[53.13794708 -103.13851166]
[44.11822510 -91.82168579]
[32.46009064 -83.22715759]
[37.81194687 -69.21439362]
[43.16380692 -55.20162964]
[48.51566696 -41.18886185]
[65.62019348 -34.78656006]
[72.79094696 -17.64469337]
[65.08069611 -0.38994935]
[70.99604034 13.39441776]
[76.91137695 27.17878532]
[82.82671356 40.96315384]
[88.74205017 54.74752045]
[94.65738678 68.53188324]
[104.43635559 68.39138794]
[113.79881287 71.21843719]
[121.86578369 76.74761963]
[127.87990570 84.45983124]
[131.27653503 93.63102722]
[131.73680115 103.40016174]
[129.21748352 112.85007477]
[123.95510101 121.09357452]
[116.44371033 127.35671997]
[120.93415833 141.66880798]
[125.42460632 155.98089600]
[136.93832397 166.83192444]
[133.36595154 181.29176331]
[137.85639954 195.60386658]
[142.34683228 209.91595459]
[146.83728027 224.22804260]
[151.32772827 238.54013062]
[162.84146118 249.39114380]
[159.26907349 263.85101318]
[163.75952148 278.16308594]
[168.24996948 292.47518921]
[172.74041748 306.78726196]
[177.36355591 292.51748657]
[187.63516235 281.58615112]
[201.58992004 276.08480835]
[216.55778503 277.06604004]
[229.67491150 284.34210205]
[238.43151855 296.52084351]
[241.15216064 311.27206421]
[237.31631470 325.77331543]
[227.65786743 337.25000000]
[214.02485657 343.50625610]
[199.02572632 343.34506226]
[185.53031921 336.79721069]
[176.12167358 325.11734009]
[177.03318787 340.08959961]
[177.94470215 355.06188965]
[178.85621643 370.03417969]
[179.76773071 385.00643921]
[180.67924500 399.97872925]
[181.59075928 414.95098877]
[191.08456421 428.32260132]
[184.00628662 443.11550903]
[167.63743591 444.11203003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 132]
[9 131]
[10 130]
[11 129]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[19 121]
[20 120]
[21 119]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[35 102]
[36 101]
[37 100]
[38 99]
[48 88]
[49 87]
[50 86]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
