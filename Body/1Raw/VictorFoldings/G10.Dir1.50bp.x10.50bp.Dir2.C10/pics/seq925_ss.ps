%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.86915588 275.47256470]
[175.86915588 260.47256470]
[175.86915588 245.47256470]
[175.86915588 230.47256470]
[175.86915588 215.47256470]
[175.86915588 200.47256470]
[175.86915588 185.47256470]
[175.86915588 170.47256470]
[175.86915588 155.47256470]
[175.86915588 140.47256470]
[169.04557800 127.11446381]
[156.89224243 118.32262421]
[144.73890686 109.53078461]
[132.58557129 100.73893738]
[120.43224335 91.94709778]
[126.96157074 120.78569031]
[94.56198883 145.80372620]
[87.04453278 159.72488403]
[72.15245819 159.99945068]
[59.48094177 168.02644348]
[46.80942917 176.05343628]
[34.13791275 184.08044434]
[27.01176643 198.85034180]
[10.63978481 199.79386902]
[1.86405718 185.94039917]
[9.71230030 171.54119873]
[26.11091423 171.40892029]
[38.78242874 163.38192749]
[51.45394516 155.35493469]
[64.12546539 147.32792664]
[70.73656464 133.98092651]
[86.53498840 133.13221741]
[85.23262787 125.74616241]
[71.13713074 120.61614990]
[82.62790680 110.97404480]
[81.32554626 103.58798218]
[66.67282104 100.37899017]
[52.02009583 97.16999054]
[41.73231506 108.57424927]
[27.11576843 113.29146576]
[12.10223484 110.05273438]
[0.73027915 99.72926331]
[-3.94109988 85.09799957]
[-0.65532482 70.09468842]
[9.70374775 58.75514984]
[24.34957886 54.12965775]
[39.34251404 57.46244431]
[50.64952850 67.85700989]
[55.22909164 82.51726532]
[69.88182068 85.72626495]
[84.53454590 88.93525696]
[90.07711029 83.88254547]
[79.97184753 72.79724884]
[91.05728912 62.69216156]
[101.16223907 73.77710724]
[106.70481110 68.72438812]
[97.33027649 55.97964096]
[103.44490051 42.39801025]
[101.60157013 27.51170349]
[99.75824738 12.62539482]
[97.91492462 -2.26091242]
[94.18618774 -7.84115553]
[93.92269135 -13.59601879]
[96.31450653 -17.79464149]
[95.08389282 -32.74407578]
[93.85327911 -47.69350815]
[79.22523499 -51.66793442]
[66.84048462 -60.40829468]
[58.19456100 -72.85914612]
[54.33149338 -87.51699829]
[55.71776962 -102.61183167]
[62.18598557 -116.32087708]
[72.95507812 -126.98870850]
[86.72461700 -133.32711792]
[101.83187866 -134.57072449]
[116.45257568 -130.56935120]
[128.82119751 -121.80617523]
[137.44415283 -109.33940887]
[141.28021240 -94.67446899]
[139.86611938 -79.58221436]
[133.37265015 -65.88510895]
[122.58391571 -55.23714828]
[108.80271149 -48.92412186]
[110.03332520 -33.97468948]
[111.26393890 -19.02525330]
[112.80123138 -4.10423660]
[114.64455414 10.78207111]
[116.48788452 25.66837883]
[118.33120728 40.55468750]
[127.57389069 52.23466873]
[121.59111786 66.88106537]
[129.22409058 79.79376221]
[141.37742615 88.58560944]
[153.53074646 97.37744904]
[165.68408203 106.16928864]
[177.83741760 114.96113586]
[205.59584045 109.17935181]
[220.57608032 108.40969086]
[231.13554382 96.95824432]
[246.33859253 96.39109802]
[257.19073486 106.52849579]
[272.17095947 105.75883484]
[280.64144897 102.17456818]
[287.46606445 105.13036346]
[302.45895386 104.66844177]
[317.43917847 103.89878082]
[332.40048218 102.82170868]
[347.36175537 101.74463654]
[362.32302856 100.66757202]
[377.28430176 99.59049988]
[392.24560547 98.51342773]
[407.60968018 91.34537506]
[418.75082397 104.12471771]
[409.55505371 118.36811829]
[393.32266235 113.47470856]
[378.36138916 114.55178070]
[363.40008545 115.62885284]
[348.43881226 116.70591736]
[333.47753906 117.78298950]
[318.51626587 118.86006165]
[314.73422241 121.86759949]
[309.00701904 122.48997498]
[302.92086792 119.66132355]
[287.92797852 120.12325287]
[272.94064331 120.73907471]
[257.96038818 121.50873566]
[248.20434570 132.70494080]
[233.02320862 133.69888306]
[221.34574890 123.38993835]
[206.36550903 124.15959930]
[219.88090515 130.66606140]
[234.86122131 129.89790344]
[248.52607727 136.08428955]
[257.83300781 147.84785461]
[260.70977783 162.56939697]
[256.51593018 176.97119141]
[246.18516541 187.84664917]
[232.01768494 192.77433777]
[217.16784668 190.65713501]
[204.94200134 181.96640015]
[198.06224060 168.63716125]
[198.06053162 153.63630676]
[190.86915588 140.47256470]
[190.86915588 155.47256470]
[190.86915588 170.47256470]
[190.86915588 185.47256470]
[190.86915588 200.47256470]
[190.86915588 215.47256470]
[190.86915588 230.47256470]
[190.86915588 245.47256470]
[190.86915588 260.47256470]
[190.86915588 275.47256470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[17 32]
[19 30]
[20 29]
[21 28]
[22 27]
[36 51]
[37 50]
[38 49]
[56 91]
[58 89]
[59 88]
[60 87]
[61 86]
[64 85]
[65 84]
[66 83]
[97 130]
[98 129]
[101 126]
[102 125]
[104 124]
[105 123]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
