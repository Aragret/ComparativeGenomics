%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUxxxxxxxxxxAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.38509369 264.65014648]
[70.38509369 249.65014648]
[70.38509369 234.65014648]
[70.38509369 219.65014648]
[70.38509369 204.65014648]
[70.38509369 189.65014648]
[70.38509369 174.65014648]
[70.38509369 159.65014648]
[70.38509369 144.65014648]
[70.38509369 129.65014648]
[63.20258331 116.48156738]
[50.59145355 108.36002350]
[41.61906052 106.32335663]
[37.80489349 99.93605042]
[25.36545181 91.55390167]
[12.92601204 83.17176056]
[0.48657146 74.78961945]
[-11.95286846 66.40747833]
[-22.51946831 77.11182404]
[-34.86986923 85.68992615]
[-48.58261871 91.85084534]
[-63.19009781 95.38607788]
[-78.19448090 96.17667389]
[-93.08468628 94.19715118]
[-107.35379791 89.51638794]
[-120.51629639 82.29518890]
[-132.12463379 72.78077698]
[-141.78436279 61.29830170]
[-149.16766357 48.23978043]
[-154.02433777 34.05065536]
[-156.19036865 19.21464729]
[-155.59342957 4.23723269]
[-152.25534058 -10.37156105]
[-146.29119873 -24.11453056]
[-158.73063660 -32.49667358]
[-171.17007446 -40.87881851]
[-183.60951233 -49.26095963]
[-201.90510559 -41.39385223]
[-221.12493896 -46.03706360]
[-233.62953186 -61.16911316]
[-234.55422974 -80.63477325]
[-247.64738464 -87.95388031]
[-260.74053955 -95.27298737]
[-273.83370972 -102.59208679]
[-286.92684937 -109.91119385]
[-300.02001953 -117.23030090]
[-315.84118652 -117.21025085]
[-323.17520142 -130.17411804]
[-339.95108032 -132.62495422]
[-342.24002075 -149.42367554]
[-326.73144531 -156.27352905]
[-315.85607910 -143.26727295]
[-300.97140503 -143.81082153]
[-292.70089722 -130.32345581]
[-279.60775757 -123.00434875]
[-266.51458740 -115.68524170]
[-253.42143250 -108.36613464]
[-240.32827759 -101.04703522]
[-227.23512268 -93.72792816]
[-218.91308594 -100.10511017]
[-208.89649963 -103.33000946]
[-198.34019470 -103.00372314]
[-188.47033691 -99.13835144]
[-180.44204712 -92.15855408]
[-175.20414734 -82.85508728]
[-173.38714600 -72.29523468]
[-175.22737122 -61.70040131]
[-162.78793335 -53.31825638]
[-150.34849548 -44.93611526]
[-137.90905762 -36.55397034]
[-127.41088104 -47.24174881]
[-115.12423706 -55.82069016]
[-101.46674347 -61.99742126]
[-86.90291595 -65.56024933]
[-71.92840576 -66.38641357]
[-57.05311966 -64.44630432]
[-42.78385925 -59.80455017]
[-29.60703659 -52.61783600]
[-17.97212029 -43.12963867]
[-8.27628422 -31.66195869]
[-0.85085803 -18.60440254]
[4.04999638 -4.40094614]
[6.25798607 10.46516323]
[5.69646406 25.48784637]
[2.38308883 40.15542221]
[-3.57072568 53.96803284]
[8.86871433 62.35017776]
[21.30815506 70.73232269]
[33.74759674 79.11446381]
[46.18703461 87.49660492]
[58.71299744 95.74889374]
[71.32412720 103.87043762]
[61.14029312 92.85728455]
[56.59755325 78.56170654]
[58.55591583 63.69009781]
[66.64463043 51.05788803]
[79.33237457 43.05656815]
[94.21715546 41.20091629]
[108.48102570 45.84223557]
[119.42272949 56.10054779]
[134.18878174 53.46168137]
[148.95484924 50.82281876]
[163.72090149 48.18395233]
[178.48695374 45.54508972]
[184.31925964 31.26266289]
[196.96049500 22.41942024]
[212.37686157 21.83720779]
[225.64907837 29.70180702]
[232.54200745 43.50365448]
[230.85615540 58.83862686]
[221.12947083 70.81339264]
[206.46569824 75.60684967]
[191.54399109 71.68942261]
[181.12582397 60.31114578]
[166.35975647 62.95000839]
[151.59370422 65.58887482]
[136.82765198 68.22773743]
[122.06159210 70.86660004]
[120.97317505 78.28720856]
[117.70792389 100.54901123]
[131.09420776 107.31713104]
[144.48049927 114.08524323]
[160.81549072 112.63611603]
[170.01522827 126.21171570]
[162.61579895 140.84661865]
[146.22911072 141.48570251]
[137.71237183 127.47152710]
[124.32609558 120.70341492]
[110.93980408 113.93529510]
[104.55113220 117.86401367]
[113.05389404 130.22131348]
[121.55665588 142.57862854]
[130.05941772 154.93592834]
[140.09178162 166.08723450]
[133.76472473 179.68754578]
[118.77273560 179.19717407]
[113.34792328 165.21264648]
[106.15653992 152.04891968]
[98.96515656 138.88517761]
[91.77377319 125.72143555]
[85.38509369 129.65014648]
[85.38509369 144.65014648]
[85.38509369 159.65014648]
[85.38509369 174.65014648]
[85.38509369 189.65014648]
[85.38509369 204.65014648]
[85.38509369 219.65014648]
[85.38509369 234.65014648]
[85.38509369 249.65014648]
[85.38509369 264.65014648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 92]
[12 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[34 70]
[35 69]
[36 68]
[37 67]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[48 52]
[100 118]
[101 117]
[102 116]
[103 115]
[104 114]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
