%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUxxxxxxxxxxCUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.66919708 441.22058105]
[86.66919708 426.22058105]
[86.66919708 411.22058105]
[86.66919708 396.22058105]
[86.66919708 381.22058105]
[86.66919708 366.22058105]
[86.66919708 351.22058105]
[86.66919708 336.22058105]
[86.66919708 321.22058105]
[86.66919708 306.22058105]
[72.94782257 303.20434570]
[60.15845490 297.37475586]
[48.87110138 288.98870850]
[39.58943558 278.41708374]
[32.72832108 266.12835693]
[28.59528351 252.66790771]
[27.37670898 238.63368225]
[29.12945366 224.64973450]
[33.77819061 211.33840942]
[41.11864853 199.29272461]
[50.82657623 189.04988098]
[62.47207260 181.06732178]
[75.53862762 175.70233154]
[89.44602203 173.19601440]
[90.06999969 158.20899963]
[90.69397736 143.22198486]
[91.31795502 128.23495483]
[80.80384827 122.45214844]
[73.45732880 112.96446991]
[58.74936676 115.90995789]
[48.69289398 128.40983582]
[32.65125275 128.19682312]
[22.93022156 115.43434143]
[26.98694038 99.91265869]
[41.70944214 93.53868866]
[55.80388260 101.20199585]
[70.51184845 98.25651550]
[78.78894043 79.44077301]
[97.33724976 70.58060455]
[99.82236481 55.78789902]
[102.30748749 40.99518967]
[103.08732605 26.01547623]
[102.15170288 11.04468536]
[101.21607208 -3.92610621]
[100.28044128 -18.89689827]
[99.03356934 -33.84498596]
[97.47599030 -48.76389694]
[95.91841125 -63.68280792]
[94.36082458 -78.60172272]
[82.36911774 -88.54338837]
[81.00203705 -103.69547272]
[90.55379486 -115.06646729]
[88.99621582 -129.98538208]
[87.43862915 -144.90429688]
[72.42980194 -145.75939941]
[57.75253296 -149.01115417]
[43.78699875 -154.57531738]
[30.89493942 -162.30778503]
[19.41029167 -172.00825500]
[9.63053703 -183.42546082]
[1.80899310 -196.26367188]
[-3.85174298 -210.19033813]
[-7.20504475 -224.84474182]
[-8.16405392 -239.84729004]
[-6.70392847 -254.80938721]
[-2.86249065 -269.34347534]
[3.26075768 -283.07305908]
[11.50720978 -295.64257812]
[21.66326141 -306.72637939]
[33.46585083 -316.03738403]
[46.60925674 -323.33444214]
[60.75303268 -328.42852783]
[75.53083038 -331.18768311]
[90.55986023 -331.54046631]
[105.45083618 -329.47769165]
[119.81804657 -325.05282593]
[133.28935242 -318.38049316]
[145.51579285 -309.63348389]
[156.18070984 -299.03839111]
[165.00781250 -286.86965942]
[171.76849365 -273.44247437]
[176.28762817 -259.10461426]
[178.44815063 -244.22752380]
[178.19410706 -229.19648743]
[175.53205872 -214.40089417]
[170.53097534 -200.22396851]
[163.32040405 -187.03291321]
[154.08709717 -175.16943359]
[143.07023621 -164.94079590]
[130.55517578 -156.61196899]
[116.86608124 -150.39868164]
[102.35754395 -146.46186829]
[103.91512299 -131.54295349]
[105.47270966 -116.62404633]
[117.16721344 -107.47122955]
[118.95935059 -92.36351776]
[109.27973938 -80.15930176]
[110.83731842 -65.24038696]
[112.39489746 -50.32147598]
[113.95248413 -35.40256500]
[117.08242035 -31.71759415]
[117.88799286 -26.00950050]
[115.25123596 -19.83252525]
[116.18686676 -4.86173487]
[117.12248993 10.10905647]
[118.05812073 25.07984924]
[126.30883026 12.55284309]
[139.37339783 5.18283701]
[154.36207581 4.60000658]
[167.95948792 10.93326855]
[177.15803528 22.78176498]
[179.92306519 37.52471542]
[175.64297485 51.90111542]
[165.26451111 62.73104095]
[151.08326721 67.61901093]
[136.23600769 65.48384857]
[124.00680542 56.79783249]
[117.10018921 43.48030853]
[114.61507416 58.27301788]
[112.12995148 73.06572723]
[122.00385284 80.29158783]
[128.10263062 90.89874268]
[129.37995911 103.06735992]
[125.61669159 114.70972443]
[117.45847321 123.82840729]
[106.30496979 128.85893250]
[105.68099213 143.84596252]
[105.05701447 158.83297729]
[104.43303680 173.81999207]
[119.84191895 178.17959595]
[133.76885986 186.06703186]
[145.42024231 197.02825928]
[154.13317871 210.43420410]
[159.41328430 225.51689148]
[160.96267700 241.41337585]
[158.69680786 257.21517944]
[152.74906921 272.02017212]
[143.46289062 284.98410034]
[131.37203979 295.36868286]
[117.16976166 302.58370972]
[101.66919708 306.22058105]
[101.66919708 321.22058105]
[101.66919708 336.22058105]
[101.66919708 351.22058105]
[101.66919708 366.22058105]
[101.66919708 381.22058105]
[101.66919708 396.22058105]
[101.66919708 411.22058105]
[101.66919708 426.22058105]
[101.66919708 441.22058105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[26 127]
[27 126]
[29 37]
[30 36]
[39 120]
[40 119]
[41 118]
[42 106]
[43 105]
[44 104]
[45 103]
[46 100]
[47 99]
[48 98]
[49 97]
[52 94]
[53 93]
[54 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
