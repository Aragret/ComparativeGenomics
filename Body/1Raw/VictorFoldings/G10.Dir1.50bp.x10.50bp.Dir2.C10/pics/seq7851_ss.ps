%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCxxxxxxxxxxUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[175.19496155 367.29653931]
[162.07858276 356.55422974]
[168.77011108 340.97668457]
[169.38592529 325.98934937]
[170.00175476 311.00198364]
[170.61758423 296.01461792]
[171.23341370 281.02728271]
[171.84922791 266.03991699]
[172.46505737 251.05256653]
[173.08088684 236.06521606]
[173.69670105 221.07786560]
[174.31253052 206.09051514]
[152.63081360 197.79046631]
[142.41876221 178.66267395]
[146.92224121 159.02116394]
[135.94143677 148.80245972]
[124.96063232 138.58375549]
[113.97982788 128.36503601]
[102.99902344 118.14633179]
[88.04959106 116.91572571]
[75.54555511 125.20119476]
[70.95884705 140.57460022]
[56.02638245 146.43984985]
[42.20307922 138.29762268]
[40.09298706 122.39395142]
[51.31479263 110.92875671]
[67.26007843 112.69715881]
[79.76411438 104.41168976]
[78.76609039 96.97838593]
[64.89308929 91.27400970]
[76.77003479 82.11178589]
[75.77200317 74.67848969]
[61.52531052 69.98468781]
[47.27861786 65.29088593]
[33.03192902 60.59708786]
[18.78523636 55.90328598]
[9.59197330 56.18563080]
[4.29596138 50.96409607]
[-9.85135460 45.97877121]
[-23.99867058 40.99345016]
[-38.14598846 36.00812912]
[-52.29330444 31.02280617]
[-66.44062042 26.03748512]
[-80.58480072 33.08855820]
[-95.54538727 27.99381447]
[-102.44652557 13.77587509]
[-97.19390106 -1.13001013]
[-82.90378571 -7.88044262]
[-68.05426788 -2.47051120]
[-61.45529938 11.89016819]
[-47.30798340 16.87549019]
[-33.16066742 21.86081314]
[-19.01334953 26.84613419]
[-4.86603308 31.83145714]
[9.28128338 36.81678009]
[23.47903633 41.65659332]
[37.72572708 46.35039520]
[51.97241974 51.04419708]
[66.21910858 55.73799515]
[80.46580505 60.43179703]
[92.61914062 51.63995361]
[92.61914062 36.63995361]
[92.46514130 21.64074516]
[92.15716553 6.64390707]
[91.84918213 -8.35293102]
[91.54120636 -23.34976959]
[83.52219391 -36.98817062]
[90.99655151 -49.87162018]
[90.68857574 -64.86846161]
[76.63570404 -70.73674774]
[66.18934631 -81.81797028]
[61.15938187 -96.19223022]
[62.41729355 -111.36910248]
[69.74513245 -124.71910858]
[81.87331390 -133.92927551]
[96.70055389 -137.40388489]
[111.65794373 -134.54093933]
[124.15402222 -125.83645630]
[132.02377319 -112.79855347]
[133.90370178 -97.68611908]
[129.46812439 -83.11746979]
[119.48550415 -71.61672211]
[105.68540955 -65.17643738]
[105.99338531 -50.17959976]
[113.99037170 -37.61387253]
[106.53804779 -23.65774727]
[106.84602356 -8.66090870]
[107.15399933 6.33592939]
[107.46197510 21.33276749]
[110.76406097 27.99673462]
[107.61914062 36.63995361]
[107.61914062 51.63995361]
[128.68582153 85.82762146]
[113.21773529 107.16553497]
[124.19853973 117.38423920]
[135.17933655 127.60294342]
[146.16014099 137.82165527]
[157.14094543 148.04035950]
[172.03149414 142.31059265]
[188.56809998 145.66766357]
[201.37510681 158.02018738]
[205.76686096 176.21076965]
[220.76606750 176.36476135]
[235.76527405 176.51876831]
[250.76448059 176.67276001]
[265.76370239 176.82675171]
[280.76290894 176.67276001]
[295.75579834 176.21083069]
[310.74868774 175.74891663]
[318.59735107 162.46728516]
[332.39093018 155.55780029]
[347.72790527 157.22528076]
[359.71432495 166.93760681]
[364.52536011 181.59562683]
[360.62582397 196.52201843]
[349.26004028 206.95381165]
[334.05480957 209.56228638]
[319.86203003 203.51506042]
[311.21060181 190.74179077]
[296.21771240 191.20372009]
[281.22482300 191.66564941]
[277.32247925 194.51538086]
[271.57458496 194.90209961]
[265.60968018 191.82597351]
[250.61048889 191.67196655]
[235.61128235 191.51797485]
[220.61206055 191.36398315]
[205.61285400 191.20997620]
[218.70207214 198.53613281]
[231.79129028 205.86227417]
[246.69242859 207.58157349]
[259.33493042 215.65420532]
[267.16406250 228.44891357]
[268.59777832 243.38024902]
[263.34637451 257.43096924]
[252.47102356 267.76181030]
[238.16931152 272.28521729]
[223.33123779 270.08709717]
[210.95518494 261.61163330]
[203.54200745 248.57151794]
[202.58964539 233.60209656]
[195.94476318 220.15422058]
[189.29988098 206.70632935]
[188.68406677 221.69367981]
[188.06823730 236.68104553]
[187.45240784 251.66839600]
[186.83657837 266.65576172]
[186.22076416 281.64309692]
[185.60493469 296.63046265]
[184.98910522 311.61779785]
[184.37327576 326.60516357]
[183.75746155 341.59249878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[15 98]
[16 97]
[17 96]
[18 95]
[19 94]
[20 28]
[21 27]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[61 92]
[62 91]
[63 89]
[64 88]
[65 87]
[66 86]
[68 84]
[69 83]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
