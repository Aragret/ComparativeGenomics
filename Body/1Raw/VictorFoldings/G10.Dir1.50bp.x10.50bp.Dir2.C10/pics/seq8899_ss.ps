%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGxxxxxxxxxxCUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.58311462 287.28829956]
[108.27105713 272.29153442]
[107.95899963 257.29476929]
[107.64694977 242.29803467]
[107.33489227 227.30126953]
[107.02283478 212.30451965]
[106.71077728 197.30776978]
[106.39871979 182.31101990]
[106.08666229 167.31427002]
[104.21905518 152.43098450]
[100.81607819 137.82208252]
[97.41309357 123.21319580]
[92.80271912 117.37452698]
[94.09463501 108.26503754]
[89.45304108 101.60623932]
[91.08787537 93.25108337]
[88.29554749 78.51327515]
[85.50322723 63.77547073]
[82.71089935 49.03766251]
[79.91857910 34.29985809]
[74.62960052 48.33647919]
[66.30076599 60.81167603]
[55.36438751 71.07791138]
[42.38812637 78.60231018]
[28.04552078 82.99431610]
[13.08103848 84.02595520]
[-1.72857881 81.64367676]
[-15.61462688 75.97113800]
[-27.85634041 67.30278015]
[-37.81830215 56.08853149]
[-44.98343277 42.91048813]
[-48.97981644 28.45265388]
[-49.60002136 13.46548176]
[-46.81185150 -1.27311146]
[-40.76003647 -14.99810696]
[-31.75868988 -26.99709892]
[-20.27504158 -36.64727020]
[-6.90515518 -43.44772339]
[7.65699434 -47.04547119]
[22.65554810 -47.25377274]
[37.31199265 -44.06182098]
[50.86558151 -37.63528824]
[62.61279678 -28.30775070]
[71.94389343 -16.56336594]
[78.37453461 -3.01172900]
[81.57113647 11.64573288]
[86.47268677 -2.53082490]
[86.32501984 -11.73028374]
[91.62648010 -16.94949341]
[96.82189941 -31.02101135]
[102.01731110 -45.09253311]
[107.21273041 -59.16405106]
[104.73419952 -74.78990936]
[116.40080261 -84.04947662]
[121.59621429 -98.12100220]
[126.79163361 -112.19252014]
[131.98704529 -126.26403809]
[118.58426666 -133.03628540]
[106.04085541 -141.29222107]
[94.52032471 -150.92420959]
[84.17288208 -161.80667114]
[75.13341522 -173.79774475]
[67.51978302 -186.74110413]
[61.43124008 -200.46798706]
[56.94716644 -214.79945374]
[54.12601852 -229.54864502]
[53.00457382 -244.52330017]
[53.59745407 -259.52816772]
[55.89693451 -274.36764526]
[59.87303162 -288.84826660]
[65.47390747 -302.78125000]
[72.62654877 -315.98495483]
[81.23770142 -328.28723145]
[91.19509888 -339.52767944]
[102.36893463 -349.55978394]
[114.61353302 -358.25274658]
[127.76925659 -365.49325562]
[141.66459656 -371.18685913]
[156.11839294 -375.25939941]
[170.94221497 -377.65774536]
[185.94279480 -378.35064697]
[200.92459106 -377.32904053]
[215.69227600 -374.60626221]
[230.05329895 -370.21780396]
[243.82046509 -364.22091675]
[256.81430054 -356.69372559]
[268.86535645 -347.73437500]
[279.81655884 -337.45971680]
[289.52511597 -326.00363159]
[297.86447144 -313.51553345]
[304.72592163 -300.15820312]
[310.01995850 -286.10577393]
[313.67764282 -271.54144287]
[315.65121460 -256.65512085]
[315.91497803 -241.64085388]
[314.46548462 -226.69439697]
[311.32165527 -212.01058960]
[306.52444458 -197.78088379]
[300.13641357 -184.19079590]
[292.24081421 -171.41748047]
[282.94064331 -159.62747192]
[272.35708618 -148.97447205]
[260.62814331 -139.59738159]
[247.90673828 -131.61845398]
[234.35870361 -125.14167786]
[220.16067505 -120.25151825]
[205.49774170 -117.01171875]
[190.56108093 -115.46452332]
[175.54541016 -115.63009644]
[160.64648438 -117.50628662]
[146.05856323 -121.06862640]
[140.86314392 -106.99710083]
[135.66773987 -92.92558289]
[130.47232056 -78.85406494]
[133.32246399 -64.23469543]
[121.28424835 -53.96863556]
[116.08882904 -39.89711761]
[110.89341736 -25.82559586]
[105.69799805 -11.75407696]
[100.64924622 2.37072587]
[95.74769592 16.54728317]
[94.65637970 31.50753212]
[97.44870758 46.24533844]
[100.24103546 60.98314285]
[103.03335571 75.72094727]
[105.82568359 90.45875549]
[108.77116394 105.16671753]
[112.02198792 119.81021881]
[115.42496490 134.41911316]
[118.82794189 149.02799988]
[125.28001404 135.48655701]
[137.55987549 126.87232208]
[152.48892212 125.41506195]
[166.20280457 131.49198914]
[175.15174866 143.53012085]
[177.01934814 158.41340637]
[171.32215881 172.28935242]
[159.53488159 181.56622314]
[144.70863342 183.84272766]
[130.68113708 178.52958679]
[121.08341980 167.00221252]
[121.39547729 181.99896240]
[121.70753479 196.99571228]
[122.01958466 211.99246216]
[122.33164215 226.98922729]
[122.64369965 241.98597717]
[122.95575714 256.98272705]
[123.26781464 271.97949219]
[123.57987213 286.97622681]
[126.17086792 306.18395996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[14 127]
[16 126]
[17 125]
[18 124]
[19 123]
[20 122]
[46 121]
[47 120]
[49 119]
[50 118]
[51 117]
[52 116]
[54 114]
[55 113]
[56 112]
[57 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
