%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.40353394 371.77764893]
[102.40353394 356.77764893]
[102.40353394 341.77764893]
[102.40353394 326.77764893]
[102.40353394 311.77764893]
[102.40353394 296.77764893]
[102.40353394 281.77764893]
[102.40353394 266.77764893]
[102.40353394 251.77764893]
[102.40353394 236.77764893]
[84.93239594 229.48826599]
[72.30657196 215.31776428]
[67.04622650 197.03153992]
[70.22862244 178.22256470]
[81.26785278 162.60548401]
[98.02214813 153.28297424]
[96.46456146 138.36405945]
[94.90698242 123.44515228]
[89.35597229 121.50159454]
[84.44460297 118.26591492]
[80.46803284 113.93255615]
[66.14543152 118.38937378]
[51.82283401 122.84618378]
[37.50024033 127.30300140]
[35.31375122 142.40869141]
[26.78256035 155.06498718]
[13.60053539 162.75894165]
[-1.61502111 163.96293640]
[-15.84305000 158.43789673]
[-26.25856400 147.28085327]
[-30.79355812 132.70701599]
[-28.54760361 117.61004639]
[-19.96663666 104.98745728]
[-6.75441599 97.34546661]
[8.46576405 96.20140839]
[22.67192459 101.78242493]
[33.04342270 112.98040771]
[47.36602020 108.52359009]
[61.68861771 104.06677246]
[76.01121521 99.60995483]
[83.75833130 78.80736542]
[107.18274689 71.48147583]
[106.87068939 56.48472214]
[106.55863953 41.48796844]
[96.51594543 52.62997437]
[81.87625885 55.89793396]
[68.04864502 50.08439636]
[60.14213943 37.33735275]
[61.07803345 22.36657906]
[70.51053619 10.70347691]
[84.95452118 6.65733242]
[99.07322693 11.72311497]
[107.64981079 24.02828217]
[109.82665253 9.18707657]
[112.00348663 -5.65412903]
[114.18032074 -20.49533463]
[116.35716248 -35.33654022]
[101.78194427 -43.72164536]
[91.54566193 -57.01586151]
[87.18350220 -73.17948151]
[89.33211517 -89.74604034]
[97.63683319 -104.19863892]
[110.80989075 -114.35237885]
[126.82999420 -118.68460083]
[128.38757324 -133.60351562]
[129.94515991 -148.52241516]
[123.68267059 -163.05142212]
[132.69972229 -174.90646362]
[134.25730896 -189.82537842]
[135.81489563 -204.74429321]
[122.29453278 -211.64097595]
[112.18146515 -222.95867920]
[106.84339905 -237.16676331]
[107.00225830 -252.34368896]
[112.63655853 -266.43692017]
[122.98431396 -277.54043579]
[136.64607239 -284.15261841]
[151.77418518 -285.37918091]
[166.32272339 -281.05429077]
[178.32408142 -271.76281738]
[186.15519714 -258.76135254]
[188.75697327 -243.80824280]
[185.77754211 -228.92578125]
[177.61984253 -216.12670898]
[165.38714600 -207.14198303]
[150.73381042 -203.18670654]
[149.17622375 -188.26779175]
[147.61863708 -173.34887695]
[153.99253845 -159.88697815]
[144.86405945 -146.96484375]
[143.30648804 -132.04592896]
[141.74890137 -117.12701416]
[153.84330750 -111.53186035]
[163.62973022 -102.45352173]
[170.13803101 -90.77263641]
[172.71707153 -77.62876892]
[171.09986877 -64.30922699]
[165.43110657 -52.12298203]
[156.25431824 -42.27204514]
[144.45982361 -35.73289490]
[131.19836426 -33.15970230]
[129.02153015 -18.31849861]
[126.84469604 -3.47729206]
[124.66785431 11.36391354]
[122.49102020 26.20511818]
[121.55538940 41.17591095]
[121.86744690 56.17266464]
[122.17950439 71.16941833]
[131.92715454 82.57044220]
[146.69320679 85.20930481]
[161.45925903 87.84816742]
[176.22532654 90.48703003]
[185.29006958 88.91149902]
[191.26974487 93.33744812]
[205.97770691 96.28293610]
[220.68566895 99.22841644]
[237.40371704 96.41004944]
[244.73995972 111.69454956]
[232.08364868 122.97525787]
[217.74018860 113.93637848]
[203.03222656 110.99089050]
[188.32426453 108.04541016]
[173.58645630 105.25308990]
[158.82040405 102.61421967]
[144.05435181 99.97535706]
[129.28828430 97.33649445]
[123.04994202 113.47663879]
[109.82589722 121.88757324]
[111.38347626 136.80648804]
[112.94105530 151.72538757]
[124.03544617 154.05615234]
[134.12785339 159.18519592]
[142.52725220 166.75222778]
[148.66094971 176.23036194]
[152.11352539 186.96273804]
[152.65509033 198.20811462]
[150.25650024 209.19206238]
[145.09077454 219.16021729]
[137.52073669 227.43020630]
[128.07342529 233.43824768]
[117.40353394 236.77764893]
[117.40353394 251.77764893]
[117.40353394 266.77764893]
[117.40353394 281.77764893]
[117.40353394 296.77764893]
[117.40353394 311.77764893]
[117.40353394 326.77764893]
[117.40353394 341.77764893]
[117.40353394 356.77764893]
[117.40353394 371.77764893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[21 40]
[22 39]
[23 38]
[24 37]
[42 108]
[43 107]
[44 106]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
[64 92]
[65 91]
[66 90]
[68 88]
[69 87]
[70 86]
[109 126]
[110 125]
[111 124]
[112 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
