%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCxxxxxxxxxxCAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.08657837]
[92.50000000 270.08657837]
[92.50000000 255.08657837]
[92.50000000 240.08657837]
[92.50000000 225.08657837]
[92.50000000 210.08657837]
[92.50000000 195.08657837]
[92.50000000 180.08657837]
[92.50000000 165.08657837]
[92.50000000 150.08657837]
[84.76477814 148.29910278]
[77.40393829 145.32475281]
[70.59835815 141.23661804]
[64.51528168 136.13516235]
[59.30418015 130.14573669]
[46.06159592 137.19087219]
[32.81900787 144.23600769]
[19.57642365 151.28114319]
[6.33383751 158.32627869]
[7.44175720 173.51484680]
[2.27004051 187.83871460]
[-8.28528118 198.81619263]
[-22.39543343 204.54536438]
[-37.61574936 204.03363037]
[-51.30921555 197.36962891]
[-61.10335922 185.70794678]
[-65.30127716 171.06904602]
[-63.17566681 155.98921204]
[-55.09479523 143.08110046]
[-42.45872116 134.58111572]
[-27.45672798 131.96195984]
[-12.68799496 135.67738342]
[-0.71129733 145.08369446]
[12.53128815 138.03855896]
[25.77387428 130.99342346]
[39.01646042 123.94828796]
[52.25904465 116.90315247]
[49.60592270 94.96488190]
[56.54718781 73.98522186]
[71.76130676 57.95845032]
[92.35171509 49.93584824]
[114.39825439 51.44482040]
[120.74538422 37.85387039]
[127.09251404 24.26291847]
[133.43965149 10.67196655]
[139.78677368 -2.91898417]
[126.72178650 -10.30371666]
[114.26834106 -18.67868614]
[102.50135040 -27.99352646]
[91.49157715 -38.19221115]
[81.30523682 -49.21340942]
[72.00359344 -60.99083328]
[63.64258957 -73.45365143]
[56.27250290 -86.52691650]
[49.93766785 -100.13199615]
[44.67617798 -114.18706512]
[40.51968002 -128.60760498]
[37.49316788 -143.30686951]
[35.61484909 -158.19647217]
[34.89601517 -173.18685913]
[35.34098816 -188.18786621]
[36.94709778 -203.10928345]
[39.70468140 -217.86137390]
[43.59715652 -232.35540771]
[48.60110855 -246.50421143]
[54.68644714 -260.22271729]
[61.81657028 -273.42837524]
[69.94860077 -286.04177856]
[79.03363037 -297.98712158]
[89.01701355 -309.19247437]
[99.83870697 -319.59051514]
[111.43363953 -329.11868286]
[123.73207092 -337.71966553]
[136.66003418 -345.34173584]
[150.13977051 -351.93908691]
[164.09024048 -357.47198486]
[178.42750549 -361.90719604]
[193.06535339 -365.21804810]
[207.91575623 -367.38458252]
[222.88938904 -368.39382935]
[237.89619446 -368.23968506]
[252.84594727 -366.92306519]
[267.64871216 -364.45193481]
[282.21545410 -360.84109497]
[296.45858765 -356.11230469]
[310.29244995 -350.29400635]
[323.63381958 -343.42117310]
[336.40249634 -335.53512573]
[348.52166748 -326.68334961]
[359.91842651 -316.91900635]
[370.52423096 -306.30087280]
[380.27532959 -294.89279175]
[389.11306763 -282.76336670]
[396.98428345 -269.98556519]
[403.84164429 -256.63623047]
[409.64389038 -242.79562378]
[414.35614014 -228.54701233]
[417.95007324 -213.97607422]
[420.40405273 -199.17045593]
[421.70330811 -184.21919250]
[421.84002686 -169.21221924]
[420.81344604 -154.23976135]
[418.62963867 -139.39187622]
[415.30181885 -124.75788116]
[410.84997559 -110.42577362]
[405.30090332 -96.48174286]
[398.68792725 -83.00966644]
[391.05084229 -70.09055328]
[382.43560791 -57.80211258]
[372.89398193 -46.21824265]
[362.48339844 -35.40861511]
[351.26647949 -25.43823814]
[339.31060791 -16.36707878]
[326.68777466 -8.24968910]
[313.47384644 -1.13489044]
[299.74829102 4.93452692]
[285.59368896 9.92206097]
[271.09515381 13.79771614]
[256.33987427 16.53818321]
[241.41661072 18.12697792]
[226.41508484 18.55455017]
[211.42555237 17.81832314]
[196.53813171 15.92272854]
[181.84239197 12.87916565]
[167.42668152 8.70593834]
[153.37773132 3.42814541]
[147.03059387 17.01909637]
[140.68347168 30.61004639]
[134.33633423 44.20099640]
[127.98921204 57.79195023]
[136.48547363 64.87556458]
[143.24111938 73.63484955]
[147.93386841 83.65193939]
[150.33985901 94.44893646]
[150.34428406 105.51075745]
[147.94694519 116.30968475]
[143.26220703 126.33052063]
[136.51358032 135.09521484]
[128.02299500 142.18562317]
[118.19551849 147.26350403]
[107.50000000 150.08657837]
[107.50000000 165.08657837]
[107.50000000 180.08657837]
[107.50000000 195.08657837]
[107.50000000 210.08657837]
[107.50000000 225.08657837]
[107.50000000 240.08657837]
[107.50000000 255.08657837]
[107.50000000 270.08657837]
[107.50000000 285.08657837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
