%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUxxxxxxxxxxCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.78683472 422.36389160]
[82.78683472 407.36389160]
[82.78683472 392.36389160]
[82.78683472 377.36389160]
[82.78683472 362.36389160]
[82.78683472 347.36389160]
[82.78683472 332.36389160]
[82.78683472 317.36389160]
[82.78683472 302.36389160]
[82.78683472 287.36389160]
[68.13245392 284.27441406]
[54.43539429 278.20306396]
[42.29533768 269.41299438]
[32.24436188 258.28646851]
[24.72361374 245.30819702]
[20.06392860 231.04426575]
[18.47129822 216.11738586]
[20.01775551 201.17977905]
[24.63812256 186.88462830]
[32.13275528 173.85751343]
[42.17616653 162.66909790]
[54.33115768 153.81002808]
[68.06786346 147.66954041]
[82.78683472 144.51823425]
[82.78683472 129.51823425]
[75.59545135 142.68196106]
[73.51361084 157.53680420]
[64.44487762 169.48493958]
[50.69736481 175.48542786]
[35.76999664 174.01104736]
[23.46200180 165.43705750]
[16.90592766 151.94566345]
[17.77038765 136.97059631]
[25.83536148 124.32321167]
[39.04820633 117.22245789]
[54.04396057 117.47497559]
[68.16535187 112.41669464]
[53.34759903 110.08559418]
[38.52983856 107.75449371]
[23.42880440 114.14907837]
[10.50521755 104.05388641]
[13.05375862 87.85397339]
[28.45270729 82.21443176]
[40.86094284 92.93672943]
[55.67870331 95.26783752]
[70.49645996 97.59893799]
[78.09006500 84.76026917]
[89.94760132 78.45291901]
[101.87571716 79.22010040]
[108.50421143 65.76412964]
[115.13271332 52.30816650]
[121.76120758 38.85220337]
[128.38970947 25.39623642]
[120.19579315 14.33572388]
[117.55091858 0.90857446]
[120.89879608 -12.27841759]
[129.52641296 -22.69491005]
[141.71455383 -28.37251282]
[142.02661133 -43.36926651]
[142.33866882 -58.36602020]
[142.65072632 -73.36277008]
[142.96278381 -88.35952759]
[128.32363892 -91.89640045]
[114.78726959 -98.49797821]
[102.98679352 -107.85548401]
[93.47415161 -119.53125763]
[86.69425964 -132.97920227]
[82.96422577 -147.57032776]
[82.45851135 -162.62217712]
[85.20076752 -177.43075562]
[91.06273651 -191.30345154]
[99.77024078 -203.59138489]
[110.91601562 -213.71984863]
[123.97875977 -221.21510315]
[138.34748840 -225.72659302]
[153.35017395 -227.04330444]
[168.28509521 -225.10363770]
[182.45372009 -219.99833679]
[195.19335938 -211.96618652]
[205.90815735 -201.38284302]
[214.09696960 -188.74331665]
[219.37678528 -174.63879395]
[221.50064087 -159.72895813]
[220.36923218 -144.71116638]
[216.03546143 -130.28784180]
[208.70202637 -117.13356781]
[198.71191406 -105.86361694]
[186.53240967 -97.00508881]
[172.73313904 -90.97232056]
[157.95953369 -88.04747009]
[157.64747620 -73.05072021]
[157.33541870 -58.05396271]
[157.02336121 -43.05720901]
[156.71130371 -28.06045723]
[167.18896484 -22.83939934]
[174.92872620 -14.05663776]
[189.34094238 -18.21452522]
[203.75315857 -22.37241364]
[218.16537476 -26.53030014]
[232.57759094 -30.68818855]
[246.98980713 -34.84607697]
[250.60339355 -49.77381897]
[261.20834351 -60.88375092]
[275.95196533 -65.18735504]
[290.86831665 -61.52698517]
[301.94494629 -50.88726044]
[306.20233154 -36.13021469]
[302.49520874 -21.22542000]
[291.82083130 -10.18218994]
[277.05050659 -5.97109699]
[262.15740967 -9.72490501]
[251.14768982 -20.43385887]
[236.73547363 -16.27597237]
[222.32325745 -12.11808395]
[207.91104126 -7.96019697]
[193.49882507 -3.80230951]
[179.08660889 0.35557798]
[174.46528625 18.07846069]
[160.42553711 30.12009239]
[141.84567261 32.02473450]
[135.21717834 45.48070145]
[128.58868408 58.93666840]
[121.96017456 72.39263153]
[115.33168030 85.84859467]
[122.71939850 110.97815704]
[97.78683472 129.51823425]
[97.78683472 144.51823425]
[112.50580597 147.66954041]
[126.24250793 153.81002808]
[138.39750671 162.66909790]
[148.44091797 173.85751343]
[155.93554688 186.88462830]
[160.55590820 201.17977905]
[162.10237122 216.11738586]
[160.50973511 231.04426575]
[155.85005188 245.30819702]
[148.32929993 258.28646851]
[138.27833557 269.41299438]
[126.13827515 278.20306396]
[112.44120789 284.27441406]
[97.78683472 287.36389160]
[97.78683472 302.36389160]
[97.78683472 317.36389160]
[97.78683472 332.36389160]
[97.78683472 347.36389160]
[97.78683472 362.36389160]
[97.78683472 377.36389160]
[97.78683472 392.36389160]
[97.78683472 407.36389160]
[97.78683472 422.36389160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[37 46]
[38 45]
[39 44]
[49 124]
[50 123]
[51 122]
[52 121]
[53 120]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
