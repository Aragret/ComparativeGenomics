%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAUCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAxxxxxxxxxxACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.41575623 535.22680664]
[101.41575623 520.22680664]
[101.41575623 505.22677612]
[101.41575623 490.22677612]
[101.41575623 475.22677612]
[101.41575623 460.22677612]
[101.41575623 445.22677612]
[101.41575623 430.22677612]
[101.41575623 415.22677612]
[101.41575623 400.22677612]
[85.93566132 396.85437012]
[71.57402802 390.14898682]
[59.03900146 380.43792725]
[48.94936752 368.19686890]
[41.80403137 354.02642822]
[37.95732498 338.62277222]
[37.60145569 322.74334717]
[40.75689316 307.16967773]
[47.27122116 292.66891479]
[56.82650375 279.95596313]
[68.95478821 269.65838623]
[83.06101990 262.28527832]
[98.45225525 258.20211792]
[97.82827759 243.21511841]
[97.20429993 228.22810364]
[96.58032227 213.24108887]
[93.13742828 206.64622498]
[96.10254669 197.93646240]
[95.79048920 182.93971252]
[95.32244110 167.94702148]
[94.69846344 152.96000671]
[94.07449341 137.97299194]
[93.45051575 122.98596954]
[92.82653809 107.99895477]
[89.57570648 93.35545349]
[83.79943848 79.51223755]
[78.02316284 65.66901398]
[64.74218750 65.90345001]
[52.20879745 61.60191727]
[41.92070007 53.30155945]
[35.09939957 42.01596832]
[32.54516983 29.11145592]
[34.54322052 16.14163399]
[40.83205032 4.66038465]
[50.63740921 -3.96431375]
[45.44199371 -18.03583336]
[40.24657822 -32.10735321]
[35.05116272 -46.17887115]
[29.10550499 -53.20033646]
[29.89736938 -60.59753799]
[22.57826424 -73.69069672]
[13.06990528 -85.29203796]
[3.56154656 -96.89337921]
[-5.94681215 -108.49472046]
[-15.45517063 -120.09606171]
[-31.09275436 -120.09587097]
[-43.03866577 -130.18692017]
[-45.65240860 -145.60452271]
[-37.69985580 -159.06895447]
[-22.93596077 -164.22271729]
[-8.33177948 -158.63238525]
[-0.78296226 -144.93751526]
[-3.85382915 -129.60441589]
[5.65452909 -118.00307465]
[15.16288757 -106.40173340]
[24.67124557 -94.80039215]
[34.17960358 -83.19905090]
[32.27649307 -98.07783508]
[35.21796036 -112.78659821]
[42.69680405 -125.78916931]
[53.93193436 -135.72756958]
[67.74996948 -141.56384277]
[82.70774841 -142.68843079]
[97.24310303 -138.98391724]
[109.83795929 -130.83715820]
[119.17693329 -119.09903717]
[124.28464508 -104.99544525]
[124.62767029 -89.99936676]
[120.17017365 -75.67698669]
[111.37768555 -63.52411270]
[99.16850281 -54.80999756]
[84.81774139 -50.44472885]
[69.82418060 -50.88421631]
[55.75374222 -56.08255768]
[44.07392883 -65.49909210]
[49.12268448 -51.37428665]
[54.31809998 -37.30276871]
[59.51351547 -23.23124886]
[64.70893097 -9.15972900]
[81.51429749 -8.06603241]
[96.21488190 0.26268294]
[105.85397339 14.20638943]
[108.46891022 31.01029968]
[103.49057770 47.32905960]
[91.86637878 59.89274216]
[97.64265442 73.73596191]
[103.41893005 87.57917786]
[105.86875153 72.78058624]
[112.91027069 59.53607941]
[123.80807495 49.22890472]
[137.42401123 42.93553925]
[152.33601379 41.31325531]
[166.98672485 44.53149033]
[179.84599304 52.25412750]
[189.57081604 63.67461777]
[195.14555359 77.60021973]
[195.98797607 92.57654572]
[192.01008606 107.03948212]
[183.62734985 119.47851562]
[171.71525574 128.59454346]
[157.51788330 133.43547058]
[142.51799011 133.49572754]
[128.28219604 128.76901245]
[116.29723358 119.74899292]
[107.81355286 107.37497711]
[108.43753052 122.36199188]
[109.06150818 137.34901428]
[109.68548584 152.33602905]
[110.30946350 167.32304382]
[113.81207275 175.83088684]
[110.78723907 182.62765503]
[111.09929657 197.62440491]
[111.56733704 212.61711121]
[112.19131470 227.60412598]
[112.81529236 242.59114075]
[113.43927002 257.57815552]
[127.45295715 259.89718628]
[140.73071289 264.92861938]
[152.75326538 272.47351074]
[163.05087280 282.23461914]
[171.22163391 293.82821655]
[176.94723511 306.79907227]
[180.00531006 320.63839722]
[180.27809143 334.80377197]
[177.75694275 348.74038696]
[172.54260254 361.90280151]
[164.84117126 373.77627563]
[154.95599365 383.89697266]
[143.27563477 391.86990356]
[130.25869751 397.38452148]
[116.41575623 400.22677612]
[116.41575623 415.22677612]
[116.41575623 430.22677612]
[116.41575623 445.22677612]
[116.41575623 460.22677612]
[116.41575623 475.22677612]
[116.41575623 490.22677612]
[116.41575623 505.22677612]
[116.41575623 520.22680664]
[116.41575623 535.22680664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 126]
[24 125]
[25 124]
[26 123]
[28 122]
[29 121]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
[35 97]
[36 96]
[37 95]
[45 89]
[46 88]
[47 87]
[48 86]
[50 85]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
