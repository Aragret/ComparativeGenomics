%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCxxxxxxxxxxGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.51667786]
[92.50000000 238.51667786]
[92.50000000 223.51667786]
[92.50000000 208.51667786]
[92.50000000 193.51667786]
[92.50000000 178.51667786]
[92.50000000 163.51667786]
[92.50000000 148.51667786]
[92.50000000 133.51667786]
[92.50000000 118.51667023]
[85.48834991 131.77702332]
[70.61745453 133.74082947]
[60.40394974 122.75518799]
[63.44439697 108.06655884]
[77.17977905 102.03816986]
[62.21953201 100.94686127]
[47.25928116 99.85555267]
[32.29903412 98.76424408]
[27.25355911 111.48651123]
[18.82668114 122.24937439]
[7.71385813 130.18006897]
[-5.17214489 134.63890076]
[-18.77622986 135.27088928]
[-31.98735046 132.03396606]
[-43.72925568 125.20167542]
[-53.04816818 115.34000397]
[-59.19024658 103.26059723]
[-61.66257858 89.95391846]
[-76.56447601 88.24122620]
[-91.46638489 86.52853394]
[-106.36828613 84.81584930]
[-120.96164703 90.92684937]
[-132.72224426 81.78695679]
[-147.62414551 80.07427216]
[-155.72979736 93.00722504]
[-168.64869690 101.13523102]
[-183.81581116 102.84448242]
[-198.21968079 97.79559326]
[-209.00041199 86.99102783]
[-214.01748657 72.57604980]
[-212.27474976 57.41274643]
[-204.11824036 44.51181793]
[-191.16741943 36.43474197]
[-175.99369812 34.78523636]
[-161.60981750 39.89080811]
[-150.87171936 50.73773956]
[-145.91145325 65.17237091]
[-131.00955200 66.88505554]
[-117.48207855 60.65155029]
[-104.65559387 69.91394043]
[-89.75369263 71.62663269]
[-74.85179138 73.33932495]
[-59.94988632 75.05200958]
[-52.91757202 60.23310471]
[-41.23537445 48.68240738]
[-26.29139709 41.79690552]
[-9.86970139 40.41780090]
[6.06268883 44.72776794]
[19.59139061 54.22698975]
[29.08469200 67.79104614]
[33.39034653 83.80399323]
[48.35059357 84.89530182]
[63.31084061 85.98661804]
[78.27108765 87.07792664]
[88.48055267 82.02010345]
[98.16822815 82.67036438]
[104.74488068 87.36260223]
[114.95835876 76.37693787]
[125.17184448 65.39127350]
[135.38531494 54.40561295]
[129.30813599 44.49250031]
[125.69280243 33.45380783]
[124.73020172 21.89014816]
[126.46701813 10.42933655]
[130.80355835 -0.30767429]
[137.49937439 -9.74044895]
[146.18670654 -17.36044312]
[156.39057922 -22.75842285]
[167.55479431 -25.64643669]
[179.07228088 -25.87317085]
[190.31806946 -23.43187332]
[197.22506714 -36.74702835]
[204.13206482 -50.06218338]
[211.03906250 -63.37733841]
[207.58293152 -79.04369354]
[217.78810120 -91.42247009]
[233.82604980 -91.01773071]
[243.39382935 -78.13995361]
[239.15187073 -62.66787338]
[224.35421753 -56.47034073]
[217.44721985 -43.15518570]
[210.54022217 -29.84002876]
[203.63322449 -16.52487373]
[210.31484985 -10.65045357]
[215.83395386 -3.67245674]
[229.49018860 -9.87786388]
[243.14643860 -16.08327103]
[256.80267334 -22.28867722]
[270.45892334 -28.49408531]
[284.11517334 -34.69949341]
[297.77139282 -40.90489960]
[309.69027710 -52.96213531]
[324.57577515 -44.84683609]
[320.89834595 -28.29652405]
[303.97680664 -27.24865723]
[290.32055664 -21.04325104]
[276.66433716 -14.83784389]
[263.00808716 -8.63243675]
[249.35183716 -2.42702961]
[235.69560242 3.77837729]
[222.03936768 9.98378468]
[223.53840637 29.91505814]
[217.00904846 48.84644318]
[203.49040222 63.67230988]
[185.17079163 71.94787598]
[165.03349304 72.29232025]
[146.37098694 64.61909485]
[136.15750122 75.60475922]
[125.94403076 86.59042358]
[115.73054504 97.57608795]
[129.96052551 92.83186340]
[141.96987915 83.84434509]
[156.03491211 78.63139343]
[171.00083923 77.62098694]
[185.63893127 80.89609528]
[198.74736023 88.18782043]
[209.24987793 98.89749146]
[216.28421021 112.14582062]
[219.27281189 126.84507751]
[217.97032166 141.78842163]
[212.48367310 155.74896240]
[203.26333618 167.58050537]
[191.06632996 176.31164551]
[176.89404297 181.22554016]
[161.91006470 181.91873169]
[147.34463501 178.33433533]
[134.39358521 170.76660156]
[124.12025452 159.83689880]
[117.36809540 146.44255066]
[114.69138336 131.68040466]
[107.50000000 118.51667023]
[107.50000000 133.51667786]
[107.50000000 148.51667786]
[107.50000000 163.51667786]
[107.50000000 178.51667786]
[107.50000000 193.51667786]
[107.50000000 208.51667786]
[107.50000000 223.51667786]
[107.50000000 238.51667786]
[107.50000000 253.51667786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 64]
[16 63]
[17 62]
[18 61]
[28 53]
[29 52]
[30 51]
[31 50]
[33 48]
[34 47]
[67 120]
[68 119]
[69 118]
[70 117]
[81 93]
[82 92]
[83 91]
[84 90]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
