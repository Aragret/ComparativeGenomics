%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUxxxxxxxxxxUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.15060425 720.17468262]
[115.15060425 705.17468262]
[115.15060425 690.17468262]
[115.15060425 675.17468262]
[115.15060425 660.17468262]
[115.15060425 645.17468262]
[115.15060425 630.17468262]
[115.15060425 615.17468262]
[115.15060425 600.17468262]
[115.15060425 585.17468262]
[99.66556549 581.80047607]
[85.30006409 575.09106445]
[72.76294708 565.37414551]
[62.67356491 553.12615967]
[55.53117371 538.94836426]
[51.69021988 523.53790283]
[51.34276962 507.65304565]
[54.50889587 492.07623291]
[61.03554535 477.57525635]
[70.60393524 464.86563110]
[82.74511719 454.57516479]
[96.86297607 447.21298218]
[112.26348114 443.14434814]
[111.65559387 428.15667725]
[103.40887451 415.75341797]
[110.58055878 401.65103149]
[109.97267151 386.66333008]
[106.53902435 380.06866455]
[109.50746155 371.36639404]
[109.20346069 356.36947632]
[108.74748993 341.37640381]
[108.13961029 326.38873291]
[107.53172302 311.40106201]
[97.35504913 297.13488770]
[105.96572876 280.88879395]
[105.05421448 265.91650391]
[104.14270020 250.94422913]
[103.23118591 235.97193909]
[92.76747131 221.91496277]
[101.04712677 205.49768066]
[92.30452728 193.43881226]
[98.89881134 179.05737305]
[97.68404388 164.10664368]
[96.46927643 149.15589905]
[95.25450134 134.20516968]
[83.15313721 130.14460754]
[73.35353088 121.96540833]
[67.19458771 110.78511810]
[65.51780701 98.13127899]
[68.55227661 85.73274994]
[75.88339996 75.28353882]
[86.50954437 68.21130371]
[83.78846741 53.46017456]
[81.06739044 38.70904922]
[78.34631348 23.95792198]
[75.62523651 9.20679474]
[69.99047852 -4.69462681]
[61.67273331 -17.17721748]
[53.35498428 -29.65980911]
[45.03723907 -42.14239883]
[29.65203285 -46.68938446]
[23.74822998 -61.60664368]
[31.85471916 -75.45093536]
[47.75289536 -77.60210419]
[59.24703979 -66.40995026]
[57.51982880 -50.46014786]
[65.83757782 -37.97755814]
[74.15532684 -25.49496460]
[82.47306824 -13.01237488]
[81.75918579 -27.99537659]
[85.21971130 -42.59074402]
[92.58432770 -55.65835953]
[103.27773285 -66.17743683]
[116.46462250 -73.32627869]
[131.11489868 -76.54644775]
[146.08413696 -75.58641052]
[160.20303345 -70.52114868]
[172.36866760 -61.74633789]
[181.63073730 -49.94743347]
[187.26571655 -36.04610062]
[188.83343506 -21.12825012]
[186.21142578 -6.35919285]
[179.60450745 7.10738373]
[169.52879333 18.21953392]
[156.77133179 26.10923004]
[142.32868958 30.16016579]
[127.32905579 30.05590248]
[112.94412231 25.80458260]
[100.29757690 17.73830032]
[90.37636566 6.48571873]
[93.09744263 21.23684502]
[95.81851196 35.98797226]
[98.53958893 50.73909760]
[101.26066589 65.49022675]
[111.99342346 67.61679840]
[121.52217865 72.99426270]
[133.19529724 63.57416153]
[138.59004211 48.08775711]
[154.74751282 45.28275299]
[165.04629517 58.04469681]
[158.89187622 73.24519348]
[142.61540222 75.24727631]
[130.94227600 84.66738129]
[134.29713440 104.02739716]
[126.54862213 122.08358002]
[110.20523834 132.99040222]
[111.42000580 147.94113159]
[112.63477325 162.89186096]
[113.84954071 177.84260559]
[122.67902374 190.97084045]
[115.99785614 204.28291321]
[125.32574463 213.24645996]
[125.99969482 225.76327515]
[118.20346832 235.06042480]
[119.11498260 250.03271484]
[120.02649689 265.00497437]
[120.93801117 279.97726440]
[130.08232117 289.12802124]
[130.50245667 301.65594482]
[122.51940155 310.79318237]
[123.12728882 325.78085327]
[123.73516846 340.76852417]
[127.22693634 349.27432251]
[124.20037842 356.06546021]
[124.50437927 371.06237793]
[124.96035004 386.05545044]
[125.56822968 401.04315186]
[133.85844421 414.51840210]
[126.64327240 427.54879761]
[127.25115967 442.53646851]
[141.25680542 444.86917114]
[154.52435303 449.91146851]
[166.53530884 457.46411133]
[176.82072449 467.22982788]
[184.97946167 478.82492065]
[190.69392395 491.79449463]
[193.74234009 505.63015747]
[194.00741577 519.78997803]
[191.48078918 533.71984863]
[186.26335144 546.87493896]
[178.56120300 558.74114990]
[168.67745972 568.85534668]
[157.00038147 576.82299805]
[143.98808289 582.33404541]
[130.15060425 585.17468262]
[130.15060425 600.17468262]
[130.15060425 615.17468262]
[130.15060425 630.17468262]
[130.15060425 645.17468262]
[130.15060425 660.17468262]
[130.15060425 675.17468262]
[130.15060425 690.17468262]
[130.15060425 705.17468262]
[130.15060425 720.17468262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[23 130]
[24 129]
[26 127]
[27 126]
[29 125]
[30 124]
[31 122]
[32 121]
[33 120]
[35 117]
[36 116]
[37 115]
[38 114]
[40 111]
[42 109]
[43 108]
[44 107]
[45 106]
[52 94]
[53 93]
[54 92]
[55 91]
[56 90]
[57 69]
[58 68]
[59 67]
[60 66]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
