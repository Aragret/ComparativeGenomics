%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGxxxxxxxxxxUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-42.91198349 311.26599121]
[-51.67818832 323.43780518]
[-60.44439697 335.60964966]
[-69.21060181 347.78149414]
[-77.97681427 359.95333862]
[-86.74301910 372.12515259]
[-94.73293304 384.82009888]
[-101.91544342 397.98867798]
[-109.09795380 411.15725708]
[-116.28046417 424.32583618]
[-118.55666351 441.12628174]
[-135.33065796 443.58987427]
[-142.34147644 428.15341187]
[-129.44905090 417.14334106]
[-122.26653290 403.97476196]
[-115.08403015 390.80615234]
[-107.90151978 377.63757324]
[-122.64502716 380.39965820]
[-135.13104248 372.08703613]
[-138.27058411 357.41928101]
[-130.28115845 344.72402954]
[-115.69879150 341.20910645]
[-102.80269623 348.87008667]
[-98.91485596 363.35894775]
[-90.14865112 351.18710327]
[-81.38243866 339.01528931]
[-72.61623383 326.84344482]
[-63.85002518 314.67160034]
[-55.08382034 302.49975586]
[-65.78133392 293.83935547]
[-75.99610901 284.61450195]
[-85.69840240 274.85208130]
[-94.85996246 264.58050537]
[-103.45410919 253.82969666]
[-111.45581818 242.63093567]
[-118.84179688 231.01686096]
[-125.59052277 219.02127075]
[-131.68235779 206.67910767]
[-137.09956360 194.02630615]
[-141.82635498 181.09971619]
[-145.84896851 167.93696594]
[-149.15570068 154.57638550]
[-151.73692322 141.05688477]
[-153.58511353 127.41783905]
[-154.69488525 113.69895172]
[-155.06301880 99.94017792]
[-154.68843079 86.18157196]
[-153.57221985 72.46321106]
[-151.71763611 58.82502747]
[-149.13008118 45.30674362]
[-145.81707764 31.94772148]
[-141.78828430 18.78685951]
[-137.05543518 5.86248159]
[-131.63229370 -6.78777790]
[-125.53466797 -19.12708282]
[-118.78031158 -31.11950302]
[-111.38888550 -42.73011398]
[-103.38192749 -53.92511368]
[-94.78273773 -64.67189789]
[-85.61635590 -74.93917847]
[-75.90948486 -84.69705200]
[-65.69038391 -93.91710663]
[-54.98881149 -102.57249451]
[-43.83592606 -110.63801575]
[-32.26420593 -118.09017944]
[-20.30734825 -124.90729523]
[-8.00016594 -131.06950378]
[4.62149954 -136.55885315]
[17.52089691 -141.35937500]
[30.66046524 -145.45707703]
[44.00194550 -148.84004211]
[57.50648117 -151.49841309]
[71.13475800 -153.42443848]
[84.84708405 -154.61251831]
[98.60353088 -155.05920410]
[112.36405182 -154.76318359]
[126.08856964 -153.72531128]
[139.73710632 -151.94862366]
[153.26994324 -149.43829346]
[166.64767456 -146.20161438]
[179.83131409 -142.24803162]
[192.78251648 -137.58905029]
[205.46353149 -132.23822021]
[217.83744812 -126.21115112]
[229.86824036 -119.52537537]
[241.52085876 -112.20036316]
[252.76139832 -104.25744629]
[263.55709839 -95.71975708]
[273.87655640 -86.61215210]
[283.68966675 -76.96115112]
[292.96792603 -66.79486084]
[301.68429565 -56.14287949]
[309.81335449 -45.03622437]
[317.33145142 -33.50724411]
[324.21673584 -21.58950043]
[330.44909668 -9.31770325]
[336.01043701 3.27241516]
[340.88452148 16.14419365]
[345.05718994 29.26015282]
[348.51626587 42.58209610]
[363.22421265 39.63661575]
[377.93218994 36.69113159]
[392.64013672 33.74565125]
[407.34811401 30.80016708]
[422.05606079 27.85468483]
[436.76403809 24.90920258]
[448.71548462 13.68002129]
[464.33572388 18.67411041]
[467.55593872 34.75397873]
[455.06347656 45.37803650]
[439.70950317 39.61716461]
[425.00155640 42.56264496]
[410.29357910 45.50812912]
[395.58563232 48.45361328]
[380.87765503 51.39909363]
[366.16970825 54.34457779]
[351.46173096 57.29005814]
[353.74871826 74.13992310]
[354.90786743 91.10471344]
[354.93408203 108.10904694]
[353.82723999 125.07733917]
[351.59228516 141.93417358]
[348.23910522 158.60462952]
[343.78259277 175.01461792]
[338.24261475 191.09120178]
[331.64373779 206.76292419]
[324.01535034 221.96014404]
[315.39129639 236.61529541]
[305.80993652 250.66326904]
[295.31384277 264.04162598]
[283.94967651 276.69088745]
[271.76794434 288.55480957]
[258.82278442 299.58074951]
[245.17173767 309.71960449]
[230.87545776 318.92639160]
[215.99751282 327.16012573]
[200.60400391 334.38424683]
[184.76336670 340.56665039]
[168.54598999 345.67987061]
[152.02397156 349.70114136]
[135.27072144 352.61260986]
[118.36071014 354.40133667]
[101.36909485 355.05935669]
[84.37139893 354.58377075]
[67.44316101 352.97668457]
[50.65962219 350.24523926]
[34.09537888 346.40155029]
[17.82404900 341.46273804]
[1.91795182 335.45074463]
[-13.55221653 328.39230347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 17]
[8 16]
[9 15]
[10 14]
[100 117]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
