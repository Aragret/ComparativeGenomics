%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUxxxxxxxxxxUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[8.71007824 499.76275635]
[8.71007824 484.76275635]
[8.71007824 469.76275635]
[8.71007824 454.76275635]
[8.71007824 439.76275635]
[8.71007824 424.76275635]
[8.71007824 409.76275635]
[8.71007824 394.76275635]
[8.71007824 379.76275635]
[8.71007824 364.76275635]
[-5.40263033 361.50115967]
[-18.43640518 355.16513062]
[-29.73060608 346.07205200]
[-38.71192551 334.67916870]
[-44.92350388 321.56063843]
[-48.04815292 307.37841797]
[-47.92455673 292.84906006]
[-44.55560303 278.70739746]
[-38.10840225 265.66943359]
[-28.90599442 254.39599609]
[-17.41117859 245.45939636]
[-4.20322609 239.31423950]
[10.05130196 236.27435303]
[10.36335850 221.27760315]
[2.07973981 233.78286743]
[-8.44469833 244.47099304]
[-20.82063484 252.94662476]
[-34.59025574 258.89620972]
[-49.24419403 262.09967041]
[-64.24036407 262.43847656]
[-79.02403259 259.90011597]
[-93.04831696 254.57852173]
[-105.79441833 246.67050171]
[-116.79084015 236.46859741]
[-125.63079834 224.35021973]
[-131.98728943 210.76364136]
[-135.62515259 196.21147156]
[-136.40985107 181.23200989]
[-134.31231689 166.37937927]
[-129.41017151 152.20303345]
[-121.88474274 139.22735596]
[-112.01441193 127.93238068]
[-100.16431427 118.73590851]
[-86.77279663 111.97814178]
[-72.33525848 107.90906525]
[-57.38576126 106.67920685]
[-42.47732544 108.33406067]
[-28.16144371 112.81240845]
[-14.96769714 119.94858551]
[-3.38414812 129.47860718]
[6.16070223 141.04995728]
[13.31376839 154.23454285]
[17.81044388 168.54467773]
[19.48438454 183.45098877]
[18.27482986 198.39556885]
[27.29236031 186.40873718]
[28.76054764 171.58666992]
[43.23982620 165.21006775]
[52.25735855 153.22323608]
[61.27488708 141.23640442]
[70.29241943 129.24957275]
[79.05862427 117.07772827]
[87.56971741 104.72615814]
[71.44328308 68.32038879]
[73.31089783 53.43711090]
[67.35202789 38.78096771]
[76.61376953 27.11608505]
[78.48137665 12.23280430]
[80.34899139 -2.65047526]
[82.21660614 -17.53375435]
[68.71743774 -24.42928314]
[58.39305496 -35.52806091]
[52.49016953 -49.48985672]
[51.72158813 -64.62871552]
[56.18011856 -79.11654663]
[65.32736969 -91.20388031]
[78.05877686 -99.43109894]
[92.83694458 -102.80474091]
[107.87734985 -100.91741180]
[121.36379242 -93.99701691]
[131.66770935 -82.87923431]
[137.54484558 -68.90657806]
[138.28553772 -53.76633072]
[133.80030823 -39.28673553]
[124.63079071 -27.21628571]
[111.88424683 -19.01253891]
[97.09988403 -15.66614151]
[95.23226929 -0.78286207]
[93.36466217 14.10041809]
[91.49704742 28.98369789]
[97.58950043 42.57528687]
[88.19417572 55.30472183]
[86.32656860 70.18800354]
[91.92444611 75.17936707]
[97.95907593 61.44680405]
[112.88430023 62.94266510]
[116.07361603 77.59968567]
[103.12021637 85.16209412]
[108.71810150 90.15345764]
[123.29080200 86.59869385]
[137.86351013 83.04393005]
[152.43620300 79.48916626]
[167.00891113 75.93441010]
[181.58161926 72.37964630]
[196.15431213 68.82488251]
[207.62831116 57.10826111]
[223.44276428 61.44824982]
[227.32910156 77.38024139]
[215.28939819 88.51477051]
[199.70907593 83.39759064]
[185.13636780 86.95234680]
[170.56367493 90.50711060]
[155.99096680 94.06187439]
[141.41825867 97.61663818]
[126.84556580 101.17139435]
[112.27285767 104.72615814]
[99.92128754 113.23725128]
[91.41019440 125.58882141]
[90.48973083 132.24165344]
[86.85984802 136.71997070]
[82.27925110 138.26710510]
[73.26171875 150.25393677]
[64.24419403 162.24076843]
[55.22666168 174.22760010]
[53.11347580 189.90704346]
[39.27919388 195.42626953]
[30.26166344 207.41310120]
[25.36011124 221.58966064]
[25.04805565 236.58641052]
[40.08786011 240.57778931]
[53.73514557 248.03483582]
[65.20519257 258.52401733]
[73.83960724 271.43762207]
[79.14409637 286.02893066]
[80.81678009 301.45538330]
[78.76536560 316.82727051]
[73.11222076 331.25903320]
[64.18709564 343.92019653]
[52.50787735 354.08334351]
[38.75055313 361.16571045]
[23.71007729 364.76275635]
[23.71007729 379.76275635]
[23.71007729 394.76275635]
[23.71007729 409.76275635]
[23.71007729 424.76275635]
[23.71007729 439.76275635]
[23.71007729 454.76275635]
[23.71007729 469.76275635]
[23.71007729 484.76275635]
[23.71007729 499.76275635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[55 127]
[56 126]
[58 124]
[59 123]
[60 122]
[61 121]
[62 118]
[63 117]
[64 93]
[65 92]
[67 90]
[68 89]
[69 88]
[70 87]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
