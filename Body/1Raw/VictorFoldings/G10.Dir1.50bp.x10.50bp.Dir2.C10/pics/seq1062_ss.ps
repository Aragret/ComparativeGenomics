%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUxxxxxxxxxxAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[195.53424072 389.21472168]
[194.61082458 374.24319458]
[193.68740845 359.27163696]
[192.76399231 344.30007935]
[191.84059143 329.32852173]
[190.91717529 314.35699463]
[189.99375916 299.38543701]
[186.03715515 284.91665649]
[179.21357727 271.55856323]
[172.38999939 258.20046997]
[165.56642151 244.84236145]
[152.88635254 237.02795410]
[153.49896240 221.21861267]
[146.67538452 207.86051941]
[139.85180664 194.50241089]
[133.02822876 181.14431763]
[126.20465088 167.78622437]
[119.38108063 154.42811584]
[106.44026947 157.41575623]
[93.15914154 157.36940002]
[80.23950195 154.29151917]
[68.36405945 148.34472656]
[58.16032791 139.84329224]
[50.16751480 129.23643494]
[36.35393143 135.08322144]
[22.54034805 140.93002319]
[13.09482956 154.33576965]
[-3.21105647 152.58930969]
[-9.60321236 137.48724365]
[0.49406335 124.56528473]
[16.69355965 127.11643219]
[30.50714302 121.26964569]
[44.32072449 115.42285919]
[42.51280212 105.76786041]
[42.36656952 95.94613647]
[43.88625336 86.24160004]
[47.02792740 76.93474579]
[51.70078278 68.29460907]
[57.76974487 60.57092667]
[65.05939484 53.98695755]
[73.35900879 48.73301315]
[68.22870636 34.63762283]
[63.09840393 20.54223442]
[57.96810150 6.44684601]
[52.05668640 -0.59949756]
[52.88041687 -7.99095631]
[48.04060364 -22.18870926]
[43.20078659 -36.38646317]
[38.36096954 -50.58421326]
[23.55024719 -48.01730347]
[8.52031612 -47.79902649]
[-6.35870028 -49.93475723]
[-20.72039223 -54.37190628]
[-34.21109009 -61.00119781]
[-46.49857712 -69.65938568]
[-57.28025818 -80.13325500]
[-66.29062653 -92.16487122]
[-73.30778503 -105.45794678]
[-78.15895081 -119.68512726]
[-80.72463989 -134.49606323]
[-80.94167328 -149.52601624]
[-78.80471039 -164.40484619]
[-74.36637878 -178.76617432]
[-67.73597717 -192.25633240]
[-59.07677460 -204.54310608]
[-48.60201645 -215.32391357]
[-36.56965637 -224.33328247]
[-23.27600288 -231.34934998]
[-9.04841900 -236.19934082]
[5.76272535 -238.76380920]
[20.79269218 -238.97959900]
[35.67135620 -236.84141541]
[50.03231812 -232.40190125]
[63.52192307 -225.77038574]
[75.80797577 -217.11016846]
[86.58792877 -206.63452148]
[95.59631348 -194.60142517]
[102.61128235 -181.30718994]
[107.46009064 -167.07919312]
[110.02333832 -152.26783752]
[110.23789215 -137.23785400]
[108.09848022 -122.35937500]
[103.65777588 -107.99877930]
[97.02514648 -94.50971985]
[88.36391449 -82.22438049]
[77.88738251 -71.44528961]
[65.85353851 -62.43790436]
[52.55872345 -55.42403030]
[57.39853668 -41.22627640]
[62.23835373 -27.02852440]
[67.07817078 -12.83077240]
[72.06349182 1.31654382]
[77.19379425 15.41193295]
[82.32409668 29.50732231]
[87.45439911 43.60271072]
[109.58058167 43.02405167]
[130.30068970 50.80737305]
[146.57376099 65.81036377]
[159.71539307 58.57866287]
[172.85702515 51.34696198]
[180.87890625 37.04376221]
[197.27790833 37.10989761]
[205.18415833 51.47733307]
[196.46438599 65.36608124]
[180.08872986 64.48859406]
[166.94709778 71.72029114]
[153.80546570 78.95199585]
[157.45980835 93.96544647]
[157.00428772 109.41052246]
[152.47145081 124.18250275]
[144.18553162 137.22479248]
[132.73918152 147.60453796]
[139.56275940 160.96264648]
[146.38632202 174.32073975]
[153.20989990 187.67884827]
[160.03347778 201.03694153]
[166.85705566 214.39503479]
[180.02519226 223.16490173]
[178.92451477 238.01878357]
[185.74809265 251.37689209]
[192.57167053 264.73498535]
[199.39524841 278.09307861]
[200.46255493 263.13110352]
[205.62796021 249.04853821]
[214.48812866 236.94493103]
[226.35127258 227.76530457]
[240.29116821 222.22639465]
[255.21937561 220.76066589]
[269.97036743 223.48255920]
[283.39236450 230.17956543]
[294.43740845 240.32878113]
[302.24316406 253.13777161]
[306.20013428 267.60644531]
[305.99935913 282.60510254]
[301.65652466 296.96267700]
[293.51074219 309.55813599]
[282.19796753 319.40808105]
[268.60150146 325.74340820]
[253.78295898 328.06951904]
[238.89932251 326.20471191]
[225.11270142 320.29467773]
[213.49949646 310.80078125]
[204.96530151 298.46200562]
[205.88871765 313.43356323]
[206.81213379 328.40512085]
[207.73554993 343.37667847]
[208.65896606 358.34820557]
[209.58238220 373.31976318]
[210.50578308 388.29132080]
[220.01022339 401.65536499]
[212.94369507 416.45388794]
[196.57565308 417.46343994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 122]
[9 121]
[10 120]
[11 119]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[24 33]
[25 32]
[26 31]
[41 95]
[42 94]
[43 93]
[44 92]
[46 91]
[47 90]
[48 89]
[49 88]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
