%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAxxxxxxxxxxACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.91637421 237.89770508]
[115.60432434 222.90095520]
[115.29226685 207.90420532]
[114.98020935 192.90745544]
[114.66815186 177.91069031]
[114.35609436 162.91394043]
[114.04403687 147.91719055]
[113.73198700 132.92044067]
[113.41992950 117.92368317]
[99.19314575 113.16986847]
[89.92819977 124.96650696]
[80.66325378 136.76313782]
[71.39830017 148.55978394]
[62.13335037 160.35643005]
[57.10520172 176.54759216]
[40.15485382 176.19810486]
[35.79836273 159.81344604]
[50.33671188 151.09147644]
[59.60166168 139.29483032]
[68.86660767 127.49819183]
[78.13156128 115.70155334]
[87.39650726 103.90491486]
[92.44526672 89.78011322]
[92.75732422 74.78335571]
[93.06937408 59.78660583]
[76.35765839 46.39358139]
[73.48846436 25.41579056]
[85.70629883 8.42201805]
[81.10073090 -5.85344267]
[76.49516296 -20.12890244]
[71.88960266 -34.40436554]
[59.45016098 -42.78650665]
[44.48991394 -41.69519806]
[29.52966499 -40.60388565]
[14.17240238 -33.42120743]
[3.01911402 -46.18994141]
[12.20130062 -60.44208908]
[28.43835258 -55.56413269]
[43.39860153 -56.65544510]
[58.35885239 -57.74675751]
[63.23267746 -63.44726562]
[58.23263550 -77.58938599]
[72.98033142 -74.84828949]
[77.85415649 -80.54879761]
[76.60727692 -95.49688721]
[75.36040497 -110.44496918]
[74.11353302 -125.39305878]
[72.86665344 -140.34114075]
[71.46435547 -155.27545166]
[69.90676880 -170.19436646]
[60.77830505 -183.11650085]
[67.15219879 -196.57839966]
[65.59461212 -211.49731445]
[54.43454742 -226.10665894]
[62.12533951 -241.84996033]
[60.25772476 -256.73324585]
[58.39011002 -271.61651611]
[43.37879944 -272.68734741]
[28.86491203 -276.66647339]
[15.40633011 -283.40090942]
[3.52036285 -292.63183594]
[-6.33612394 -304.00442505]
[-13.78427315 -317.08157349]
[-18.53779793 -331.36059570]
[-20.41398621 -346.29263306]
[-19.34072304 -361.30377197]
[-15.35925865 -375.81701660]
[-8.62263203 -389.27450562]
[0.61021942 -401.15896606]
[11.98440838 -411.01361084]
[25.06274223 -418.45965576]
[39.34252548 -423.21087646]
[54.27487946 -425.08465576]
[69.28585052 -424.00894165]
[83.79844666 -420.02514648]
[97.25484467 -413.28634644]
[109.13782501 -404.05154419]
[118.99063110 -392.67578125]
[126.43454742 -379.59622192]
[131.18344116 -365.31567383]
[133.05479431 -350.38302612]
[131.97666931 -335.37222290]
[127.99051666 -320.86029053]
[121.24953461 -307.40496826]
[112.01283264 -295.52349854]
[100.63545227 -285.67251587]
[87.55471039 -278.23071289]
[73.27339172 -273.48413086]
[75.14100647 -258.60086060]
[77.00862122 -243.71757507]
[86.38907623 -236.01599121]
[88.03396606 -223.58564758]
[80.51352692 -213.05490112]
[82.07110596 -198.13598633]
[91.08816528 -186.28094482]
[84.82568359 -171.75195312]
[86.38326263 -156.83303833]
[90.23081207 -150.46577454]
[87.81474304 -141.58801270]
[89.06161499 -126.63993073]
[90.30849457 -111.69184875]
[91.55536652 -96.74375916]
[92.80223846 -81.79566956]
[100.23390961 -55.10825348]
[86.16506195 -39.00992966]
[90.77062988 -24.73446846]
[95.37619019 -10.45900726]
[99.98175812 3.81645370]
[108.76522827 4.84392929]
[116.79349518 8.55231285]
[123.27017975 14.57374859]
[127.55281830 22.31093788]
[129.21661377 30.99638176]
[143.78930664 34.55114365]
[154.89692688 23.84485626]
[170.03392029 20.86580086]
[184.37014771 26.56457901]
[193.33096313 39.12273407]
[194.05700684 54.53300476]
[186.31660461 67.87802887]
[172.57968140 74.89945221]
[157.22964478 73.35677338]
[145.16462708 63.74225235]
[140.23454285 49.12384415]
[125.66184235 45.56908417]
[118.45777893 54.60320663]
[108.06613159 60.09866333]
[107.75407410 75.09541321]
[107.44201660 90.09217072]
[108.78865814 75.15274048]
[116.32437134 62.18304443]
[128.63632202 53.61473083]
[143.41616821 51.05424500]
[157.89289856 54.98164749]
[169.35229492 64.66059875]
[175.64588928 78.27642059]
[175.59371948 93.27632904]
[169.20555115 106.84803772]
[157.67907715 116.44702911]
[143.17538452 120.27362061]
[128.41668701 117.61162567]
[128.72874451 132.60838318]
[129.04078674 147.60513306]
[129.35284424 162.60188293]
[129.66490173 177.59863281]
[129.97695923 192.59539795]
[130.28901672 207.59214783]
[130.60107422 222.58889771]
[130.91313171 237.58564758]
[133.50413513 256.79336548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[23 129]
[24 128]
[25 127]
[28 108]
[29 107]
[30 106]
[31 105]
[32 40]
[33 39]
[34 38]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 97]
[50 96]
[52 94]
[53 93]
[55 90]
[56 89]
[57 88]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
