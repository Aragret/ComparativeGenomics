%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACxxxxxxxxxxUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-9.53249645 316.48254395]
[-16.71500587 329.65112305]
[-23.89751434 342.81970215]
[-31.08002281 355.98828125]
[-38.26253128 369.15686035]
[-45.44504166 382.32543945]
[-52.62755203 395.49401855]
[-59.81005859 408.66259766]
[-66.99256897 421.83120728]
[-74.17507935 434.99978638]
[-76.45127869 451.80023193]
[-93.22527313 454.26382446]
[-100.23609161 438.82733154]
[-87.34365845 427.81726074]
[-80.16114807 414.64868164]
[-72.97864532 401.48010254]
[-65.79613495 388.31152344]
[-58.61362457 375.14294434]
[-51.43111420 361.97436523]
[-44.24860764 348.80578613]
[-37.06609726 335.63717651]
[-29.88358879 322.46859741]
[-22.70108032 309.30001831]
[-54.14887619 287.35043335]
[-81.74504852 260.71960449]
[-104.80007935 230.07299805]
[-122.73789215 196.17633057]
[-135.11029053 159.87657166]
[-149.75379944 163.12739563]
[-164.39729309 166.37821960]
[-176.11256409 177.85360718]
[-191.83329773 173.18556213]
[-195.38734436 157.17616272]
[-183.11862183 146.29450989]
[-167.64813232 151.73472595]
[-153.00462341 148.48388672]
[-138.36112976 145.23306274]
[-140.21221924 134.06085205]
[-141.53996277 122.81443787]
[-142.34146118 111.51831055]
[-142.61495972 100.19709015]
[-142.35986328 88.87544250]
[-141.57672119 77.57802582]
[-140.26724243 66.32946777]
[-138.43429565 55.15426636]
[-136.08186340 44.07677078]
[-133.21507263 33.12111664]
[-129.84016418 22.31117439]
[-125.96450043 11.67049599]
[-121.59651184 1.22226381]
[-116.74572754 -9.01075745]
[-111.42270660 -19.00627327]
[-105.63906097 -28.74250603]
[-99.40737152 -38.19824219]
[-92.74123383 -47.35288239]
[-85.65516663 -56.18647766]
[-78.16459656 -64.67978668]
[-70.28585815 -72.81430054]
[-62.03610992 -80.57229614]
[-53.43333054 -87.93687439]
[-44.49625778 -94.89199066]
[-35.24436951 -101.42248535]
[-25.69781494 -107.51412964]
[-15.87740135 -113.15366364]
[-5.80452061 -118.32878876]
[4.49888039 -123.02822876]
[15.01035309 -127.24175262]
[25.70699501 -130.96017456]
[36.56550217 -134.17539978]
[47.56221771 -136.88041687]
[58.67317963 -139.06933594]
[69.87418365 -140.73739624]
[81.14082336 -141.88093567]
[92.44854736 -142.49748230]
[103.77272797 -142.58569336]
[115.08869171 -142.14538574]
[126.37177277 -141.17749023]
[137.59741211 -139.68414307]
[148.74111938 -137.66859436]
[159.77864075 -135.13522339]
[170.68591309 -132.08953857]
[181.43919373 -128.53820801]
[192.01502991 -124.48895264]
[202.39039612 -119.95059204]
[212.54267883 -114.93302155]
[222.44975281 -109.44716644]
[232.09004211 -103.50497437]
[241.44255066 -97.11940765]
[250.48689270 -90.30436707]
[259.20336914 -83.07469940]
[267.57296753 -75.44616699]
[275.57748413 -67.43537903]
[283.19943237 -59.05979919]
[290.42227173 -50.33766556]
[297.23022461 -41.28798676]
[303.60845947 -31.93048096]
[309.54309082 -22.28553200]
[315.02117920 -12.37415504]
[320.03079224 -2.21794510]
[324.56100464 8.16097164]
[328.60198975 18.73998070]
[332.14486694 29.49603462]
[335.18200684 40.40569687]
[337.70672607 51.44519806]
[339.71353149 62.59049225]
[341.19808960 73.81728363]
[342.15713501 85.10112762]
[342.58859253 96.41743469]
[342.49148560 107.74153900]
[341.86608887 119.04878235]
[340.71371460 130.31451416]
[339.03686523 141.51420593]
[336.83923340 152.62345886]
[334.12561035 163.61804199]
[330.90188599 174.47402954]
[327.17504883 185.16775513]
[322.95330811 195.67591858]
[318.24578857 205.97563171]
[313.06277466 216.04444885]
[307.41552734 225.86044312]
[301.31640625 235.40222168]
[294.77865601 244.64898682]
[287.81652832 253.58059692]
[280.44522095 262.17761230]
[272.68075562 270.42126465]
[264.54006958 278.29364014]
[256.04089355 285.77752686]
[247.20175171 292.85668945]
[238.04188538 299.51565552]
[228.58126831 305.73992920]
[218.84049988 311.51593018]
[208.84082031 316.83111572]
[198.60400391 321.67388916]
[188.15234375 326.03366089]
[177.50863647 329.90100098]
[166.69604492 333.26742554]
[155.73815918 336.12564087]
[144.65881348 338.46939087]
[133.48217773 340.29357910]
[122.23259735 341.59420776]
[110.93457031 342.36849976]
[99.61272430 342.61471558]
[88.29172516 342.33236694]
[76.99623108 341.52200317]
[65.75085449 340.18545532]
[54.58010101 338.32559204]
[43.50830460 335.94647217]
[32.55958557 333.05331421]
[21.75780487 329.65237427]
[11.12649155 325.75109863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[28 37]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
