%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUxxxxxxxxxxAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.76802063 464.82330322]
[189.76802063 449.82330322]
[189.76802063 434.82330322]
[189.76802063 419.82330322]
[189.76802063 404.82330322]
[189.76802063 389.82330322]
[189.76802063 374.82330322]
[189.76802063 359.82330322]
[189.76802063 344.82330322]
[189.76802063 329.82330322]
[187.74568176 314.96026611]
[176.88916016 304.76293945]
[180.65802002 289.39718628]
[176.65026855 274.94250488]
[172.64253235 260.48782349]
[168.63479614 246.03314209]
[164.62705994 231.57844543]
[160.61930847 217.12376404]
[132.79762268 202.76609802]
[135.86431885 175.04519653]
[127.09811401 162.87335205]
[118.33190155 150.70152283]
[109.56569672 138.52967834]
[100.79949188 126.35784912]
[92.03327942 114.18601227]
[78.71812439 107.27900696]
[63.71893692 107.12297058]
[48.71974945 106.96693420]
[38.40485764 121.81335449]
[21.40744019 127.49404144]
[4.53583336 121.93081665]
[-5.56940985 107.51027679]
[-20.56210518 107.97832489]
[-35.55480194 108.44636536]
[-47.54320908 119.10739899]
[-63.32787323 116.23964691]
[-70.80014801 102.04299927]
[-64.22794342 87.40791321]
[-48.65289307 83.56117249]
[-36.02284241 93.45366669]
[-21.03014755 92.98562622]
[-6.03745222 92.51758575]
[-0.73557746 81.51618958]
[8.81304455 73.78711700]
[20.81826591 70.85895538]
[32.99512482 73.35269165]
[42.99872971 80.85124207]
[48.87578583 91.96775055]
[63.87497330 92.12378693]
[78.87416077 92.27982330]
[81.76229858 85.35821533]
[87.53857422 71.51499176]
[90.42671204 64.59338379]
[79.76508331 54.04209518]
[63.77417374 50.40576935]
[59.18702698 34.66123962]
[70.72250366 23.00513649]
[86.51389313 27.42825317]
[90.31637573 43.38047028]
[100.97799683 53.93175888]
[114.76038361 48.01179886]
[114.44832611 33.01504517]
[114.13626862 18.01828957]
[106.11354828 4.38206911]
[113.58439636 -8.50341320]
[99.04611969 -12.64224339]
[86.37458801 -20.88382530]
[76.69654083 -32.49532318]
[70.87255096 -46.44424820]
[69.42047882 -61.49027252]
[72.46944427 -76.29551697]
[79.74832916 -89.54350281]
[90.60990906 -100.05623627]
[104.08837128 -106.89892578]
[118.98522186 -109.46312714]
[133.97584534 -107.52083588]
[147.72729492 -101.24475098]
[159.01678467 -91.19293976]
[166.84046936 -78.25921631]
[170.50267029 -63.59361649]
[169.67774963 -48.50020981]
[164.43904114 -34.32109070]
[155.25239563 -22.31705093]
[142.93467712 -13.55548763]
[128.58114624 -8.81546974]
[136.58155823 3.74808311]
[129.13302612 17.70623398]
[129.44508362 32.70298767]
[129.75714111 47.69974136]
[137.62591553 63.30502319]
[139.60527039 78.76103210]
[136.49206543 92.16081238]
[129.63761902 102.04919434]
[120.75533295 107.56844330]
[111.69445038 108.53199768]
[104.20511627 105.41979980]
[112.97132874 117.59163666]
[121.73753357 129.76347351]
[130.50373840 141.93531799]
[139.26994324 154.10714722]
[148.03614807 166.27899170]
[154.83726501 164.26519775]
[162.22789001 164.38024902]
[169.53128052 166.78884888]
[176.02824402 171.43840027]
[181.02717590 178.04968262]
[183.93550110 186.12998962]
[198.93467712 185.97395325]
[213.93386841 185.81791687]
[228.93305969 185.66188049]
[241.14067078 175.25256348]
[256.86224365 178.44807434]
[264.03756714 192.79710388]
[257.16232300 207.29229736]
[241.51060486 210.81417847]
[229.08909607 200.66107178]
[214.08990479 200.81710815]
[199.09071350 200.97314453]
[184.09153748 201.12918091]
[175.07400513 213.11601257]
[179.08174133 227.57070923]
[183.08947754 242.02539062]
[187.09722900 256.48007202]
[191.10496521 270.93478394]
[195.11270142 285.38946533]
[206.25588989 296.62066650]
[202.20037842 310.95251465]
[207.09953308 296.77514648]
[217.25860596 285.73913574]
[230.98284912 279.68557739]
[245.98271179 279.62435913]
[259.75592041 285.56564331]
[270.00476074 296.51831055]
[275.01953125 310.65521240]
[273.96365356 325.61798096]
[267.01321411 338.91055298]
[255.32777405 348.31533813]
[240.85668945 352.26345825]
[226.01406860 350.09628296]
[213.27600098 342.17532349]
[204.76802063 329.82330322]
[204.76802063 344.82330322]
[204.76802063 359.82330322]
[204.76802063 374.82330322]
[204.76802063 389.82330322]
[204.76802063 404.82330322]
[204.76802063 419.82330322]
[204.76802063 434.82330322]
[204.76802063 449.82330322]
[204.76802063 464.82330322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[13 125]
[14 124]
[15 123]
[16 122]
[17 121]
[18 120]
[20 101]
[21 100]
[22 99]
[23 98]
[24 97]
[25 96]
[26 50]
[27 49]
[28 48]
[32 42]
[33 41]
[34 40]
[53 60]
[54 59]
[61 89]
[62 88]
[63 87]
[65 85]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
