%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCxxxxxxxxxxUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.07106304 251.41178894]
[7.17458105 264.16503906]
[-0.72190160 276.91830444]
[-8.61838436 289.67156982]
[-16.51486588 302.42483521]
[-24.41134834 315.17807007]
[-24.52453423 333.56332397]
[-40.24313354 341.30737305]
[-47.87610626 354.22006226]
[-55.50907516 367.13278198]
[-63.14204407 380.04547119]
[-65.99704742 396.75729370]
[-82.84611511 398.64016724]
[-89.31968689 382.97079468]
[-76.05474091 372.41250610]
[-68.42177582 359.49981689]
[-60.78880310 346.58709717]
[-53.15583420 333.67440796]
[-55.85986710 321.84436035]
[-49.55468369 311.00848389]
[-37.16460419 307.28158569]
[-29.26812363 294.52835083]
[-21.37164116 281.77508545]
[-13.47515869 269.02182007]
[-5.57867622 256.26855469]
[2.31780624 243.51530457]
[-16.62785721 228.59393311]
[-33.32293701 211.19105530]
[-47.44526672 191.64250183]
[-58.72232437 170.32551575]
[-66.93650055 147.65145874]
[-71.92927551 124.05784607]
[-73.60430908 100.00000000]
[-71.92927551 75.94215393]
[-66.93650055 52.34854889]
[-58.72232437 29.67448235]
[-47.44526672 8.35749817]
[-33.32293701 -11.19104862]
[-16.62785721 -28.59392738]
[2.31780624 -43.51530838]
[-5.57867622 -56.26856613]
[-13.47515869 -69.02182770]
[-21.37164116 -81.77507782]
[-29.26812363 -94.52833557]
[-38.43005753 -106.40515900]
[-48.76095963 -117.28047180]
[-59.09186554 -128.15579224]
[-69.42276764 -139.03109741]
[-72.75904846 -124.40683746]
[-86.18023682 -117.70819855]
[-99.87270355 -123.83326721]
[-103.82445526 -138.30335999]
[-95.14596558 -150.53788757]
[-80.18354797 -151.59114075]
[-89.34548950 -163.46797180]
[-98.50742340 -175.34478760]
[-114.01363373 -174.76419067]
[-126.88089752 -183.43675232]
[-132.16149902 -198.02766418]
[-127.82492065 -212.92645264]
[-115.53868103 -222.40420532]
[-100.02709198 -222.81655884]
[-87.25466156 -214.00494385]
[-82.13265991 -199.35758972]
[-86.63059998 -184.50672913]
[-77.46866608 -172.62989807]
[-68.30672455 -160.75308228]
[-58.54745483 -149.36199951]
[-48.21654892 -138.48669434]
[-37.88564682 -127.61138153]
[-27.55474472 -116.73606110]
[-28.87568665 -131.67779541]
[-22.67219543 -145.33489990]
[-10.55076408 -154.17066956]
[4.34957075 -155.89694214]
[18.17013168 -150.06668091]
[27.33186913 -138.18969727]
[29.46220207 -123.34175110]
[24.00945091 -109.36793518]
[12.38569069 -99.88699341]
[-2.39892387 -97.35417175]
[-16.51486588 -102.42481995]
[-8.61838436 -89.67156219]
[-0.72190160 -76.91830444]
[7.17458105 -64.16504669]
[15.07106304 -51.41179276]
[24.49610519 -56.32535553]
[34.20417404 -60.65293121]
[44.15888214 -64.37829590]
[54.32290649 -67.48748779]
[64.65815735 -69.96884918]
[75.12588501 -71.81307983]
[85.68685150 -73.01325989]
[96.30147552 -73.56490326]
[106.92996216 -73.46593475]
[117.53247070 -72.71672821]
[128.06925964 -71.32008362]
[138.50083923 -69.28125000]
[148.78808594 -66.60785675]
[158.89244080 -63.30993271]
[168.77606201 -59.39984131]
[178.40185547 -54.89223480]
[187.73376465 -49.80401230]
[196.73680115 -44.15424728]
[205.37721252 -37.96411514]
[213.62261963 -31.25682640]
[221.44212341 -24.05751610]
[228.80638123 -16.39317513]
[235.68782043 -8.29253197]
[242.06062317 0.21404760]
[247.90090942 9.09467602]
[253.18678284 18.31606483]
[257.89843750 27.84364891]
[262.01821899 37.64170837]
[265.53063965 47.67352295]
[268.42260742 57.90148163]
[270.68319702 68.28724670]
[272.30401611 78.79189301]
[273.27893066 89.37603760]
[273.60430908 100.00000000]
[273.27893066 110.62396240]
[272.30401611 121.20810699]
[270.68319702 131.71275330]
[268.42260742 142.09851074]
[265.53063965 152.32647705]
[262.01821899 162.35829163]
[257.89843750 172.15635681]
[253.18678284 181.68392944]
[247.90090942 190.90531921]
[242.06062317 199.78594971]
[235.68782043 208.29252625]
[228.80638123 216.39317322]
[221.44212341 224.05751038]
[213.62261963 231.25682068]
[205.37721252 237.96411133]
[196.73680115 244.15425110]
[187.73376465 249.80401611]
[178.40185547 254.89224243]
[168.77606201 259.39984131]
[158.89244080 263.30993652]
[148.78808594 266.60784912]
[138.50083923 269.28125000]
[128.06925964 271.32009888]
[117.53247070 272.71673584]
[106.92996216 273.46594238]
[96.30147552 273.56491089]
[85.68685150 273.01327515]
[75.12588501 271.81307983]
[64.65815735 269.96884155]
[54.32290649 267.48748779]
[44.15888214 264.37829590]
[34.20417404 260.65292358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[8 18]
[9 17]
[10 16]
[11 15]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 71]
[46 70]
[47 69]
[48 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
