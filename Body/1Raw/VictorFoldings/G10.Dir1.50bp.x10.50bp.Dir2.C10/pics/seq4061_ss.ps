%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUUCxxxxxxxxxxUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.14582825 239.07359314]
[112.84182739 224.07667542]
[112.53781891 209.07974243]
[112.23381805 194.08282471]
[111.92980957 179.08590698]
[111.62580872 164.08898926]
[111.32180023 149.09207153]
[111.01779938 134.09515381]
[110.71379852 119.09823608]
[96.87018585 113.32289124]
[85.99829865 123.65739441]
[75.12640381 133.99189758]
[64.25451660 144.32640076]
[53.38262177 154.66090393]
[42.51073074 164.99540710]
[45.50804901 180.12879944]
[39.82657242 194.47189331]
[27.27923965 203.44786072]
[11.86985779 204.19250488]
[-1.48449516 196.46820068]
[-8.52249336 182.73976135]
[-6.99833775 167.38787842]
[2.60161996 155.31126404]
[17.21406746 150.36355591]
[32.17622757 154.12351990]
[43.04811859 143.78901672]
[53.92000961 133.45451355]
[64.79190063 123.12001038]
[75.66379547 112.78550720]
[86.53568268 102.45099640]
[92.86730194 88.85281372]
[93.77881622 73.88053894]
[94.69033051 58.90825653]
[95.60184479 43.93597794]
[96.51335907 28.96369934]
[81.63639832 26.99771881]
[66.93518066 23.98722458]
[52.48294067 19.94721603]
[38.35168076 14.89782047]
[24.61180115 8.86419392]
[11.33175659 1.87639546]
[-1.42229331 -6.03076124]
[-13.58680820 -14.81788254]
[-25.10118294 -24.44119263]
[-35.90805435 -34.85274506]
[-45.95358276 -46.00067139]
[-55.18772125 -57.82943344]
[-63.56446457 -70.28009796]
[-71.04208374 -83.29064178]
[-77.58331299 -96.79624176]
[-83.15557861 -110.72960663]
[-87.73111725 -125.02133179]
[-91.28712463 -139.60021973]
[-93.80589294 -154.39361572]
[-95.27487183 -169.32783508]
[-95.68673706 -184.32847595]
[-95.03944397 -199.32081604]
[-93.33621216 -214.23013306]
[-90.58553314 -228.98217773]
[-86.80110931 -243.50343323]
[-82.00179291 -257.72158813]
[-76.21149445 -271.56576538]
[-69.45905304 -284.96701050]
[-61.77812576 -297.85855103]
[-53.20697021 -310.17620850]
[-43.78828430 -321.85855103]
[-33.56899643 -332.84741211]
[-22.60001945 -343.08804321]
[-10.93599796 -352.52941895]
[1.36495519 -361.12451172]
[14.24155807 -368.83047485]
[27.62965965 -375.60894775]
[41.46255875 -381.42614746]
[55.67134094 -386.25308228]
[70.18521881 -390.06573486]
[84.93188477 -392.84509277]
[99.83787537 -394.57727051]
[114.82891083 -395.25372314]
[129.83032227 -394.87100220]
[144.76737976 -393.43106079]
[159.56564331 -390.94104004]
[174.15141296 -387.41339111]
[188.45201111 -382.86563110]
[202.39617920 -377.32046509]
[215.91445923 -370.80551147]
[228.93951416 -363.35317993]
[241.40644836 -355.00067139]
[253.25312805 -345.78952026]
[264.42056274 -335.76568604]
[274.85308838 -324.97906494]
[284.49877930 -313.48342896]
[293.30950928 -301.33602905]
[301.24145508 -288.59735107]
[308.25506592 -275.33093262]
[314.31536865 -261.60278320]
[319.39224243 -247.48136902]
[323.46032715 -233.03701782]
[326.49938965 -218.34167480]
[328.49429321 -203.46856689]
[329.43505859 -188.49179077]
[329.31704712 -173.48596191]
[328.14083862 -158.52583313]
[325.91229248 -143.68594360]
[322.64248657 -129.04020691]
[318.34771729 -114.66162109]
[313.04940796 -100.62178802]
[306.77392578 -86.99067688]
[299.55255127 -73.83618164]
[291.42123413 -61.22385025]
[282.42053223 -49.21651077]
[272.59527588 -37.87398529]
[261.99438477 -27.25278091]
[250.67066956 -17.40581322]
[238.68058777 -8.38214016]
[226.08383179 -0.22671770]
[212.94319153 7.01982403]
[199.32411194 13.32138252]
[185.29444885 18.64656448]
[170.92410278 22.96883774]
[156.28466797 26.26667213]
[141.44906616 28.52363396]
[126.49121857 29.72848320]
[111.48563385 29.87521362]
[110.57412720 44.84749222]
[109.66261292 59.81977081]
[108.75109863 74.79205322]
[107.83958435 89.76432800]
[115.81760406 77.06192017]
[122.85758209 63.81659317]
[133.63203430 53.38053894]
[147.09519958 46.76667404]
[161.94035339 44.61693573]
[176.72663879 47.13998032]
[190.01890564 54.09091568]
[200.52702332 64.79509735]
[207.23107910 78.21357727]
[209.48037720 93.04397583]
[207.05661011 107.84685516]
[200.19502258 121.18547058]
[189.56159973 131.76518250]
[176.18841553 138.55912781]
[161.37344360 140.90789795]
[146.55462646 138.58351135]
[133.16740417 131.80952454]
[125.71071625 118.79422760]
[126.01471710 133.79115295]
[126.31872559 148.78807068]
[126.62272644 163.78498840]
[126.92672729 178.78190613]
[127.23073578 193.77882385]
[127.53473663 208.77574158]
[127.83874512 223.77265930]
[128.14274597 238.76957703]
[130.72343445 257.97869873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
