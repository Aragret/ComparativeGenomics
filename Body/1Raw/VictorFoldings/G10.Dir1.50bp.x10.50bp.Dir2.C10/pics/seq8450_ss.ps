%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAxxxxxxxxxxCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-43.32968521 321.22277832]
[-51.84077454 333.57434082]
[-60.35186386 345.92593384]
[-68.86295319 358.27749634]
[-70.32206726 374.03128052]
[-83.91478729 380.12121582]
[-92.42587280 392.47277832]
[-100.93696594 404.82434082]
[-109.44805908 417.17593384]
[-117.95914459 429.52749634]
[-126.47023773 441.87905884]
[-134.98132324 454.23065186]
[-135.74775696 470.61187744]
[-150.43972778 477.89730835]
[-163.94342041 468.59234619]
[-162.36737061 452.26910400]
[-147.33290100 445.71954346]
[-138.82180786 433.36798096]
[-130.31071472 421.01638794]
[-121.79962921 408.66482544]
[-113.28853607 396.31326294]
[-104.77745056 383.96170044]
[-96.26635742 371.61010742]
[-95.41601562 356.73980713]
[-81.21453094 349.76638794]
[-72.70343781 337.41482544]
[-64.19234467 325.06326294]
[-55.68125534 312.71170044]
[-66.28975677 304.52539062]
[-76.46852875 295.81054688]
[-86.19128418 286.58972168]
[-95.43288422 276.88668823]
[-104.16945648 266.72656250]
[-112.37841797 256.13558960]
[-120.03855133 245.14112854]
[-127.13007355 233.77160645]
[-133.63465881 222.05639648]
[-139.53547668 210.02575684]
[-144.81730652 197.71081543]
[-149.46647644 185.14335632]
[-153.47099304 172.35586548]
[-156.82048035 159.38140869]
[-159.50631714 146.25349426]
[-161.52154541 133.00605774]
[-162.86094666 119.67332458]
[-163.52107239 106.28974915]
[-163.50021362 92.88992310]
[-162.79843140 79.50846863]
[-161.41752625 66.17996979]
[-159.36106873 52.93886566]
[-156.63438416 39.81937790]
[-153.24450684 26.85540581]
[-149.20021057 14.08045292]
[-144.51193237 1.52753079]
[-139.19180298 -10.77092171]
[-133.25355530 -22.78312302]
[-126.71253204 -34.47803116]
[-119.58565521 -45.82542801]
[-111.89132690 -56.79598236]
[-103.64943695 -67.36135101]
[-94.88127899 -77.49423218]
[-85.60951233 -87.16843414]
[-75.85810852 -96.35896301]
[-65.65224457 -105.04206085]
[-55.01831436 -113.19530487]
[-43.98379135 -120.79760742]
[-32.57718658 -127.82933044]
[-20.82798004 -134.27230835]
[-8.76653290 -140.10987854]
[3.57598543 -145.32698059]
[16.16768074 -149.91009521]
[28.97601128 -153.84741211]
[41.96788025 -157.12873840]
[55.10971451 -159.74560547]
[68.36755371 -161.69123840]
[81.70713806 -162.96061707]
[95.09399414 -163.55046082]
[108.49352264 -163.45924377]
[121.87110901 -162.68721008]
[135.19216919 -161.23634338]
[148.42230225 -159.11039734]
[161.52728271 -156.31486511]
[174.47328186 -152.85696411]
[187.22682190 -148.74565125]
[199.75495911 -143.99151611]
[212.02529907 -138.60688782]
[224.00616455 -132.60565186]
[235.66656494 -126.00331116]
[246.97637939 -118.81694794]
[257.90640259 -111.06512451]
[268.42834473 -102.76787567]
[278.51504517 -93.94663239]
[288.14041138 -84.62419891]
[297.27963257 -74.82466888]
[305.90902710 -64.57336426]
[314.00631714 -53.89676666]
[321.55056763 -42.82247543]
[328.52230835 -31.37910843]
[334.90350342 -19.59623337]
[340.67767334 -7.50430250]
[345.82989502 4.86543894]
[350.34683228 17.48102379]
[354.21682739 30.30985260]
[357.42990112 43.31877136]
[359.97772217 56.47416687]
[361.85372925 69.74203491]
[363.05303955 83.08810425]
[363.57260132 96.47786713]
[363.41101074 109.87673950]
[362.56875610 123.25008392]
[361.04794312 136.56335449]
[358.85256958 149.78211975]
[373.49606323 153.03294373]
[388.13958740 156.28378296]
[402.78308105 159.53460693]
[417.42657471 162.78543091]
[432.89706421 157.34521484]
[445.16580200 168.22686768]
[441.61175537 184.23626709]
[425.89102173 188.90431213]
[414.17575073 177.42892456]
[399.53225708 174.17810059]
[384.88876343 170.92727661]
[370.24523926 167.67645264]
[355.60174561 164.42562866]
[350.44293213 182.22680664]
[344.04605103 199.62150574]
[336.44268799 216.52369690]
[327.67044067 232.84985352]
[317.77270508 248.51925659]
[306.79837036 263.45443726]
[294.80169678 277.58157349]
[281.84204102 290.83078003]
[267.98339844 303.13662720]
[253.29432678 314.43826294]
[237.84742737 324.67977905]
[221.71905518 333.81057739]
[204.98896790 341.78549194]
[187.73985291 348.56515503]
[170.05699158 354.11599731]
[152.02778625 358.41058350]
[133.74139404 361.42767334]
[115.28817749 363.15240479]
[96.75939178 363.57620239]
[78.24662781 362.69699097]
[59.84140396 360.51910400]
[41.63470840 357.05331421]
[23.71654510 352.31677246]
[6.17549658 346.33285522]
[-10.90172100 339.13119507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
