%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCxxxxxxxxxxCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[255.84626770 158.52348328]
[241.35096741 161.94915771]
[230.61717224 150.32606506]
[216.35131836 145.69081116]
[202.08547974 141.05554199]
[187.81962585 136.42028809]
[173.55378723 131.78503418]
[159.28793335 127.14978790]
[145.02207947 122.51452637]
[130.75624084 117.87927246]
[114.31946564 134.46150208]
[90.08679962 137.78190613]
[67.86068726 125.13927460]
[56.78157806 135.25131226]
[45.70246887 145.36335754]
[34.62336349 155.47540283]
[36.48332596 170.88059998]
[28.90372467 184.42051697]
[14.79906940 190.88876343]
[-0.40711206 187.79818726]
[-10.86773205 176.33715820]
[-12.56046963 160.91268921]
[-4.83443165 147.45579529]
[9.33956146 141.14093018]
[24.51132202 144.39628601]
[35.59042740 134.28424072]
[46.66953659 124.17221069]
[57.74864578 114.06016541]
[55.47722626 99.23313904]
[41.87904358 92.90151978]
[28.28086090 86.56990051]
[14.68267632 80.23828125]
[1.08449268 73.90666199]
[-12.51369095 67.57504272]
[-26.11187553 61.24342728]
[-40.75750732 69.64893341]
[-57.36514282 67.70970154]
[-69.43829346 56.38294220]
[-72.37255859 40.25893021]
[-86.09626770 34.20420456]
[-99.81998444 28.14947891]
[-110.52831268 38.90569305]
[-124.40071106 45.06369400]
[-139.56105042 45.79066086]
[-153.95903015 40.98828125]
[-165.64741516 31.30603790]
[-173.04547119 18.05336952]
[-175.15267944 3.02259660]
[-171.68402100 -11.75349617]
[-163.10864258 -24.27656174]
[-150.58625793 -32.85295868]
[-135.81045532 -36.32279968]
[-120.77950287 -34.21681976]
[-107.52624512 -26.81983185]
[-97.84305573 -15.13221836]
[-93.03951263 -0.73463446]
[-93.76525879 14.42576599]
[-80.04154205 20.48048973]
[-66.31783295 26.53521538]
[-55.42087936 18.76567078]
[-41.99866104 17.39899254]
[-29.56100464 22.90046310]
[-21.41375160 33.92520905]
[-19.78025627 47.64524460]
[-6.18207216 53.97686386]
[7.41611195 60.30848312]
[21.01429558 66.64009857]
[34.61248016 72.97171783]
[48.21066284 79.30333710]
[61.80884552 85.63495636]
[66.24085236 77.80580902]
[72.22984314 71.21202087]
[79.45221710 66.15168762]
[87.53017426 62.84172821]
[96.05139160 61.40881348]
[104.59006500 61.88486481]
[112.72815704 64.20739746]
[120.07585144 68.22447205]
[126.29024506 73.70402527]
[131.09129333 80.34696960]
[134.27432251 87.80333710]
[135.71861267 95.69064331]
[135.39149475 103.61342621]
[149.65734863 108.24868011]
[163.92318726 112.88393402]
[178.18904114 117.51918793]
[192.45487976 122.15444946]
[206.72073364 126.78970337]
[220.98658752 131.42495728]
[235.25242615 136.06021118]
[250.76812744 132.96609497]
[260.48153687 144.25764465]
[272.69454956 123.62770844]
[289.95315552 107.00118256]
[311.00762939 95.57500458]
[334.33529663 90.16979980]
[358.25064087 91.17098999]
[381.02697754 98.50124359]
[401.02124023 111.62651062]
[416.79248047 129.59483337]
[427.20562744 151.10548401]
[441.80001831 147.64076233]
[456.39437866 144.17605591]
[470.98873901 140.71133423]
[485.58312988 137.24661255]
[489.90563965 122.50852203]
[501.02917480 111.91783905]
[515.96154785 108.32340240]
[530.68603516 112.69210052]
[541.24176025 123.84877014]
[544.78942871 138.79232788]
[540.37457275 153.50303650]
[529.18487549 164.02378845]
[514.23028564 167.52453613]
[499.53344727 163.06361389]
[489.04785156 151.84098816]
[474.45346069 155.30570984]
[459.85910034 158.77041626]
[445.26470947 162.23513794]
[430.67034912 165.69985962]
[431.54461670 174.34770203]
[431.57043457 183.04043579]
[430.74740601 191.69502258]
[429.08319092 200.22875977]
[426.59353638 208.56007385]
[423.30206299 216.60931396]
[419.24011230 224.29953003]
[414.44625854 231.55714417]
[408.96624756 238.31274414]
[402.85226440 244.50167847]
[396.16259766 250.06469727]
[388.96109009 254.94850159]
[381.31640625 259.10632324]
[373.30154419 262.49826050]
[364.99298096 265.09176636]
[356.47009277 266.86190796]
[347.81423950 267.79162598]
[339.10809326 267.87182617]
[330.43487549 267.10159302]
[321.87744141 265.48812866]
[313.51760864 263.04669189]
[305.43524170 259.80041504]
[297.70764160 255.78019714]
[290.40875244 251.02426147]
[283.60839844 245.57794189]
[277.37161255 239.49311829]
[271.75811768 232.82781982]
[266.82168579 225.64561462]
[262.60958862 218.01502991]
[259.16226196 210.00889587]
[256.51278687 201.70362854]
[254.68659973 193.17852783]
[253.70133972 184.51502991]
[253.56658936 175.79585266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[13 28]
[14 27]
[15 26]
[16 25]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[39 59]
[40 58]
[41 57]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
