%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACxxxxxxxxxxAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.32373047 85.03174591]
[150.42118835 90.66370392]
[136.51863098 96.29566193]
[122.61606598 101.92761993]
[108.71351624 107.55957031]
[96.82113647 116.70130920]
[87.80360413 128.68814087]
[78.78607178 140.67497253]
[69.76854706 152.66180420]
[60.75101471 164.64863586]
[66.83740234 178.75010681]
[65.04168701 194.00366211]
[55.84692383 206.30618286]
[41.72644424 212.34832764]
[26.47859001 210.50482178]
[14.20495892 201.27153015]
[8.20709515 187.13218689]
[10.09839344 171.89018250]
[19.37010384 159.64555359]
[33.52818298 153.69204712]
[48.76418304 155.63110352]
[57.78171158 143.64427185]
[66.79924011 131.65744019]
[75.81677246 119.67060852]
[84.83429718 107.68377686]
[77.78916931 94.44119263]
[62.80945206 95.22103882]
[47.82973862 96.00088501]
[32.85002136 96.78073120]
[17.87030792 97.56056976]
[2.89059401 98.34041595]
[-4.01536751 112.05913544]
[-16.86426353 120.47349548]
[-32.19980621 121.32007599]
[-45.89681244 114.37114716]
[-54.27085495 101.49593353]
[-55.06935883 86.15781403]
[-48.07752991 72.48265839]
[-35.17613602 64.14901733]
[-19.83558846 63.39859390]
[-6.18241405 70.43325043]
[2.11074877 83.36070251]
[17.09046364 82.58085632]
[32.07017899 81.80101013]
[47.04989243 81.02117157]
[62.02960587 80.24132538]
[77.00932312 79.46147919]
[85.64826965 78.23207855]
[93.21103668 79.79199219]
[98.91882324 83.47274017]
[102.26998138 88.41301727]
[103.08155823 93.65702057]
[116.98411560 88.02506256]
[130.88667297 82.39310455]
[144.78923035 76.76114655]
[158.69178772 71.12918854]
[154.48469543 58.18647766]
[151.15357971 44.99132538]
[148.71333313 31.60293961]
[147.17488098 18.08140373]
[146.54510498 4.48738575]
[146.82681274 -9.11811733]
[148.01872253 -22.67405891]
[150.11546326 -36.11961746]
[153.10757446 -49.39447403]
[156.98164368 -62.43906021]
[161.72024536 -75.19486237]
[167.30209351 -87.60465240]
[173.70213318 -99.61275482]
[180.89161682 -111.16530609]
[188.83827209 -122.21048737]
[197.50643921 -132.69874573]
[206.85717773 -142.58305359]
[216.84852600 -151.81904602]
[227.43563843 -160.36534119]
[238.57099915 -168.18357849]
[250.20463562 -175.23870850]
[262.28433228 -181.49909973]
[274.75585938 -186.93667603]
[287.56326294 -191.52706909]
[300.64910889 -195.24969482]
[313.95462036 -198.08789062]
[327.42010498 -200.02893066]
[340.98516846 -201.06414795]
[354.58889771 -201.18888855]
[368.17028809 -200.40264893]
[381.66842651 -198.70895386]
[395.02267456 -196.11544800]
[408.17321777 -192.63378906]
[421.06097412 -188.27960205]
[433.62814331 -183.07247925]
[445.81835938 -177.03576660]
[457.57696533 -170.19660950]
[468.85116577 -162.58569336]
[479.59042358 -154.23719788]
[489.74652100 -145.18858337]
[499.27395630 -135.48048401]
[508.12997437 -125.15646362]
[516.27484131 -114.26287842]
[523.67211914 -102.84860229]
[530.28851318 -90.96487427]
[536.09442139 -78.66502380]
[541.06378174 -66.00424194]
[545.17437744 -53.03935242]
[548.40771484 -39.82853699]
[550.74938965 -26.43106842]
[552.18884277 -12.90706825]
[552.71972656 0.68278122]
[567.71240234 1.15082335]
[582.70513916 1.61886549]
[597.69781494 2.08690763]
[610.32788086 -7.80558538]
[625.90289307 -3.95884466]
[632.47509766 10.67623901]
[625.00286865 24.87288284]
[609.21820068 27.74063683]
[597.22979736 17.07960320]
[582.23706055 16.61156082]
[567.24438477 16.14352036]
[552.25170898 15.67547703]
[550.41644287 32.39451599]
[547.20367432 48.90464401]
[542.63531494 65.09255219]
[536.74261475 80.84712982]
[529.56604004 96.06025696]
[521.15472412 110.62749481]
[511.56637573 124.44886017]
[500.86672974 137.42945862]
[489.12915039 149.48019409]
[476.43417358 160.51831055]
[462.86883545 170.46803284]
[448.52624512 179.26101685]
[433.50473022 186.83688354]
[417.90740967 193.14358521]
[401.84127808 198.13778687]
[385.41653442 201.78517151]
[368.74591064 204.06063843]
[351.94381714 204.94853210]
[335.12548828 204.44267273]
[318.40640259 202.54649353]
[301.90127563 199.27293396]
[285.72338867 194.64440918]
[269.98376465 188.69262695]
[254.79043579 181.45837402]
[240.24769592 172.99122620]
[226.45536804 163.34925842]
[213.50814819 152.59857178]
[201.49490356 140.81291199]
[190.49812317 128.07308960]
[180.59330750 114.46651459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
