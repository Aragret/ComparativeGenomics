%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCxxxxxxxxxxCCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.22293854 296.80841064]
[96.22293854 281.80841064]
[96.22293854 266.80841064]
[96.22293854 251.80839539]
[96.22293854 236.80839539]
[96.22293854 221.80839539]
[96.22293854 206.80839539]
[96.22293854 191.80839539]
[96.22293854 176.80839539]
[96.22293854 161.80839539]
[82.32038116 156.17643738]
[71.88056946 166.94725037]
[61.44075775 177.71806335]
[51.00094604 188.48886108]
[40.56113434 199.25967407]
[41.05830383 215.05613708]
[30.17931366 226.52012634]
[14.37847328 226.85026550]
[3.03014159 215.85067749]
[2.86708307 200.04722595]
[13.98603725 188.81582642]
[29.79032516 188.81985474]
[40.23013687 178.04905701]
[50.66995239 167.27824402]
[61.10976410 156.50743103]
[71.54957581 145.73663330]
[53.49011612 105.04553986]
[72.28805542 71.56925201]
[64.03576660 59.04329300]
[55.78348160 46.51733017]
[47.53118896 33.99136734]
[39.27890015 21.46540642]
[27.38652229 12.32367325]
[13.15974236 7.56985807]
[-2.38117051 10.53475189]
[-12.00026321 -0.83724564]
[-26.22704315 -5.59106064]
[-40.45382309 -10.34487534]
[-54.68059921 -15.09869003]
[-70.22151184 -12.13379669]
[-79.84060669 -23.50579453]
[-94.06738281 -28.25960922]
[-108.09463501 -20.97868156]
[-123.13636017 -25.82863235]
[-130.26856995 -39.93207550]
[-125.25986481 -54.92168045]
[-111.08180237 -61.90438843]
[-96.14598846 -56.73748016]
[-89.31356812 -42.48638916]
[-75.08679199 -37.73257446]
[-60.56347275 -41.03749084]
[-49.92678452 -29.32546997]
[-35.70000839 -24.57165527]
[-21.47322845 -19.81784058]
[-7.24644852 -15.06402493]
[7.27687025 -18.36894226]
[17.91355705 -6.65692091]
[32.14033508 -1.90310609]
[38.22625351 -6.28620958]
[36.72038651 -21.21043015]
[50.39809036 -15.05241680]
[56.48400879 -19.43552017]
[56.48400879 -34.43552017]
[48.74671173 -48.23569107]
[56.48400879 -60.96296310]
[56.48400879 -75.96296692]
[56.48400879 -90.96296692]
[56.48400879 -105.96296692]
[42.42682266 -111.74776459]
[31.65695000 -122.47521973]
[25.81671906 -136.50947571]
[25.79672241 -151.71038818]
[31.60000992 -165.75996399]
[42.34162140 -176.51571655]
[56.38354111 -182.33747864]
[71.58448029 -182.33747864]
[85.62639618 -176.51571655]
[96.36801147 -165.75996399]
[102.17129517 -151.71038818]
[102.15129852 -136.50947571]
[96.31107330 -122.47521973]
[85.54119873 -111.74776459]
[71.48400879 -105.96296692]
[71.48400879 -90.96296692]
[71.48400879 -75.96296692]
[71.48400879 -60.96296310]
[79.22131348 -48.23569107]
[71.48400879 -34.43552017]
[71.48400879 -19.43552017]
[66.54216003 3.37493849]
[51.80486298 13.21311855]
[60.05715179 25.73908043]
[68.30944061 38.26504135]
[76.56172943 50.79100418]
[84.81401825 63.31696701]
[91.16015625 61.29449463]
[97.75509644 60.36138916]
[104.41321564 60.54391861]
[110.94712830 61.83693695]
[117.17292786 64.20405579]
[122.91539764 67.57865906]
[128.01290894 71.86576080]
[132.32200623 76.94469452]
[135.72138977 82.67253113]
[138.11540222 88.88804626]
[153.04969788 87.48574066]
[167.98400879 86.08343506]
[182.91831970 84.68113708]
[194.21839905 73.29308319]
[210.15119934 75.17067719]
[218.49444580 88.87359619]
[212.84790039 103.89012146]
[197.54312134 108.70086670]
[184.32061768 99.61544037]
[169.38632202 101.01774597]
[154.45201111 102.42005157]
[139.51770020 103.82234955]
[143.62014771 116.90884399]
[143.10096741 132.30436707]
[156.62515259 138.79254150]
[170.14933777 145.28070068]
[185.70022583 141.33741760]
[198.39140320 151.15135193]
[198.48728943 167.19412231]
[185.91433716 177.15907288]
[170.31742859 173.40194702]
[163.66117859 158.80488586]
[150.13699341 152.31672668]
[136.61279297 145.82856750]
[130.26533508 149.82351685]
[139.02333069 162.00126648]
[147.78134155 174.17900085]
[156.53933716 186.35675049]
[166.38903809 197.66972351]
[160.08259583 211.27960205]
[145.08395386 211.07856750]
[139.14454651 197.30465698]
[131.95317078 184.14091492]
[124.76178741 170.97717285]
[117.57040405 157.81343079]
[111.22293854 161.80839539]
[111.22293854 176.80839539]
[111.22293854 191.80839539]
[111.22293854 206.80839539]
[111.22293854 221.80839539]
[111.22293854 236.80839539]
[111.22293854 251.80839539]
[111.22293854 266.80841064]
[111.22293854 281.80841064]
[111.22293854 296.80841064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 58]
[34 57]
[36 55]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[68 83]
[105 117]
[106 116]
[107 115]
[108 114]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
