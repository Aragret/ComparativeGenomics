%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCxxxxxxxxxxCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.69929504 453.83959961]
[86.69929504 438.83959961]
[86.69929504 423.83959961]
[86.69929504 408.83959961]
[86.69929504 393.83959961]
[86.69929504 378.83959961]
[86.69929504 363.83959961]
[86.69929504 348.83959961]
[86.69929504 333.83959961]
[86.69929504 318.83959961]
[72.75777435 316.15435791]
[59.55238342 310.92788696]
[47.54212952 303.34011841]
[37.14478683 293.65316772]
[28.72238350 282.20208740]
[22.56857681 269.38348389]
[18.89842606 255.64166260]
[17.84087753 241.45324707]
[19.43422699 227.31063843]
[23.62474823 213.70500183]
[30.26848602 201.10910034]
[39.13621521 189.96093750]
[49.92134476 180.64849854]
[62.25051117 173.49627686]
[75.69651794 168.75392151]
[89.79311371 166.58758545]
[90.40100098 151.59989929]
[91.00888062 136.61222839]
[91.61676788 121.62454987]
[76.19721222 109.97999573]
[73.89347839 88.74833679]
[58.95582581 87.38211823]
[44.01817322 86.01589966]
[37.29535294 99.62355042]
[26.10821724 109.88086700]
[11.96973228 115.40061951]
[-3.20798659 115.43631744]
[-17.37227821 109.98312378]
[-28.60754013 99.77854919]
[-35.39429092 86.20267487]
[-36.81468201 71.09152222]
[-32.67661667 56.48875427]
[-23.53973579 44.36927414]
[-10.63972282 36.37213898]
[4.27879763 33.57890320]
[19.19821930 36.36732483]
[32.10081482 44.36029053]
[41.24160767 56.47681808]
[45.38438797 71.07824707]
[60.32204056 72.44446564]
[75.25969696 73.81068420]
[88.06911469 66.00563049]
[93.70386505 52.10421371]
[99.33862305 38.20278931]
[104.97338104 24.30136871]
[104.18701935 19.89441490]
[104.81613922 15.88422871]
[106.55303955 12.67552853]
[108.98833466 10.52738762]
[111.66886139 9.53242588]
[118.41090393 -3.86700606]
[125.15295410 -17.26643753]
[131.89500427 -30.66587067]
[138.63705444 -44.06530380]
[145.37910461 -57.46473694]
[152.12115479 -70.86416626]
[158.86318970 -84.26360321]
[146.20677185 -76.21282959]
[132.01280212 -71.36193848]
[117.07634735 -69.98265839]
[102.23407745 -72.15225220]
[88.31738281 -77.74917603]
[76.10580444 -86.45993042]
[66.28336334 -97.79658508]
[59.40027237 -111.12411499]
[55.84207535 -125.69597626]
[55.80809402 -140.69593811]
[59.30022812 -155.28378296]
[66.12286377 -168.64236450]
[75.89383698 -180.02339172]
[88.06582642 -188.78939819]
[101.95701599 -194.44932556]
[116.78930664 -196.68614197]
[131.73185730 -195.37454224]
[145.94766235 -190.58802795]
[158.64042664 -182.59468079]
[169.09918213 -171.84225464]
[176.73806763 -158.93305969]
[181.12919617 -144.59019470]
[182.02659607 -129.61705017]
[179.38002014 -114.85238647]
[173.33987427 -101.12690735]
[185.56384277 -109.82025146]
[197.78782654 -118.51359558]
[210.01181030 -127.20694733]
[212.94053650 -139.80763245]
[223.35003662 -146.79098511]
[235.32704163 -144.84948730]
[247.72470093 -153.29330444]
[254.35589600 -168.29196167]
[270.68746948 -169.77923584]
[279.91888428 -156.22517395]
[272.55368042 -141.57301331]
[256.16851807 -140.89564514]
[243.77087402 -132.45182800]
[237.04707336 -116.26917267]
[218.70515442 -114.98296356]
[206.48117065 -106.28961945]
[194.25720215 -97.59626770]
[182.03321838 -88.90292358]
[172.26263428 -77.52155304]
[165.52058411 -64.12211609]
[158.77853394 -50.72268677]
[152.03648376 -37.32325363]
[145.29443359 -23.92382240]
[138.55238342 -10.52439022]
[131.81033325 2.87504220]
[125.06829071 16.27447510]
[118.87480164 29.93612480]
[113.24004364 43.83754730]
[107.60528564 57.73896790]
[101.97053528 71.64038849]
[114.00814819 76.27082825]
[122.41230011 85.52019501]
[125.65519714 97.17443085]
[123.38960266 108.64978790]
[116.45075226 117.56438446]
[106.60444641 122.23242950]
[105.99655914 137.22010803]
[105.38867950 152.20779419]
[104.78079224 167.19546509]
[120.16225433 171.02542114]
[134.42016602 177.93896484]
[146.94409180 187.63761902]
[157.19834900 199.70370483]
[164.74490356 213.61834717]
[169.26213074 228.78376770]
[170.55845642 244.54899597]
[168.58052063 260.23779297]
[163.41537476 275.17767334]
[155.28665161 288.72866821]
[144.54483032 300.31088257]
[131.65220642 309.42913818]
[117.16295624 315.69424438]
[101.69929504 318.83959961]
[101.69929504 333.83959961]
[101.69929504 348.83959961]
[101.69929504 363.83959961]
[101.69929504 378.83959961]
[101.69929504 393.83959961]
[101.69929504 408.83959961]
[101.69929504 423.83959961]
[101.69929504 438.83959961]
[101.69929504 453.83959961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[26 131]
[27 130]
[28 129]
[29 128]
[31 51]
[32 50]
[33 49]
[52 122]
[53 121]
[54 120]
[55 119]
[60 118]
[61 117]
[62 116]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[92 110]
[93 109]
[94 108]
[95 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
