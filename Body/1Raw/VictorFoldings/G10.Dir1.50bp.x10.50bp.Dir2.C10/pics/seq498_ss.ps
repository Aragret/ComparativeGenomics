%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUUAACAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAxxxxxxxxxxACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[4.39392376 290.98791504]
[-12.23575592 281.71417236]
[-27.97342110 270.99621582]
[-37.37727737 282.68243408]
[-46.78113556 294.36865234]
[-56.18499374 306.05484009]
[-65.58885193 317.74105835]
[-74.99270630 329.42727661]
[-77.61638641 345.02941895]
[-91.62339020 350.09429932]
[-101.02725220 361.78048706]
[-110.43110657 373.46670532]
[-119.83496094 385.15292358]
[-117.88559723 400.83651733]
[-127.66294861 413.25338745]
[-143.36628723 415.03683472]
[-155.67910767 405.12875366]
[-157.29641724 389.40744019]
[-147.25871277 377.20007324]
[-131.52117920 375.74905396]
[-122.11731720 364.06283569]
[-112.71345520 352.37664795]
[-103.30960083 340.69042969]
[-101.35855103 325.92416382]
[-86.67891693 320.02340698]
[-77.27505493 308.33721924]
[-67.87120056 296.65100098]
[-58.46734238 284.96478271]
[-49.06348801 273.27859497]
[-39.65962982 261.59237671]
[-48.98959351 253.03269958]
[-57.79595184 243.93521118]
[-66.04774475 234.33187866]
[-73.71598816 224.25643921]
[-80.77371216 213.74432373]
[-87.19613647 202.83245850]
[-92.96067047 191.55920410]
[-98.04706573 179.96415710]
[-102.43743896 168.08810425]
[-106.11637115 155.97274780]
[-109.07092285 143.66069031]
[-111.29071808 131.19519043]
[-112.76795197 118.62005615]
[-113.49742889 105.97948456]
[-113.47659302 93.31789398]
[-112.70551300 80.67979431]
[-111.18690491 68.10958862]
[-108.92609406 55.65145874]
[-105.93103790 43.34918594]
[-102.21225739 31.24601173]
[-97.78281403 19.38446426]
[-92.65828705 7.80623293]
[-86.85668182 -3.44799256]
[-80.39838409 -14.33866024]
[-73.30609894 -24.82749557]
[-65.60473633 -34.87763596]
[-57.32138062 -44.45376205]
[-48.48513412 -53.52222061]
[-39.12704468 -62.05113983]
[-29.28001213 -70.01054382]
[-18.97863579 -77.37246704]
[-8.25911903 -84.11102295]
[2.84086251 -90.20254517]
[14.28230095 -95.62561798]
[26.02498627 -100.36118317]
[38.02764893 -104.39260101]
[50.24810791 -107.70569611]
[62.64341354 -110.28883362]
[75.17000580 -112.13292694]
[87.78386688 -113.23149872]
[100.44065094 -113.58069611]
[113.09589386 -113.17927551]
[125.70510864 -112.02866364]
[138.22398376 -110.13289642]
[150.60852051 -107.49863434]
[162.81521606 -104.13513947]
[174.80113220 -100.05423737]
[186.52418518 -95.27025604]
[197.94314575 -89.80001831]
[209.01789856 -83.66275024]
[219.70951843 -76.88001251]
[229.98042297 -69.47564697]
[239.79454041 -61.47567749]
[249.11735535 -52.90821838]
[257.91610718 -43.80337524]
[266.15988159 -34.19314957]
[273.81970215 -24.11131668]
[280.86865234 -13.59330559]
[287.28195190 -2.67608213]
[293.03707886 8.60198689]
[298.11376953 20.20126534]
[302.49423218 32.08098984]
[306.16305542 44.19940567]
[309.10729980 56.51393127]
[311.31668091 68.98128510]
[312.78341675 81.55764771]
[327.76367188 80.78798676]
[342.74389648 80.01832581]
[357.72415161 79.24866486]
[372.68542480 78.17159271]
[387.62142944 76.78756714]
[402.55746460 75.40354156]
[410.53634644 62.22615814]
[424.58041382 56.34248352]
[439.22286987 59.81557465]
[448.89672852 71.10958099]
[463.83273315 69.72555542]
[478.76873779 68.34152985]
[493.70477295 66.95750427]
[508.64077759 65.57347870]
[521.70581055 55.66200638]
[536.71490479 62.26945496]
[538.22802734 78.59864807]
[524.68859863 87.85150909]
[510.02481079 80.50949097]
[495.08877563 81.89351654]
[480.15277100 83.27754211]
[465.21676636 84.66156769]
[450.28073120 86.04559326]
[442.84686279 98.92486572]
[429.09191895 105.02935791]
[414.20584106 101.82646179]
[403.94146729 90.33956146]
[389.00546265 91.72358704]
[374.06945801 93.10760498]
[370.34994507 96.19216919]
[364.63674927 96.93199921]
[358.49380493 94.22890472]
[343.51358032 94.99856567]
[328.53332520 95.76822662]
[313.55310059 96.53788757]
[313.01278687 115.57093048]
[310.77957153 134.48020935]
[306.87109375 153.11546326]
[301.31851196 171.32856750]
[294.16589355 188.97477722]
[285.47012329 205.91384888]
[275.30029297 222.01113892]
[263.73721313 237.13873291]
[250.87281799 251.17639160]
[236.80932617 264.01254272]
[221.65852356 275.54516602]
[205.54081726 285.68264771]
[188.58430481 294.34436035]
[170.92376709 301.46148682]
[152.69952393 306.97744751]
[134.05645752 310.84844971]
[115.14272308 313.04367065]
[96.10863495 313.54568481]
[77.10547638 312.35052490]
[58.28427505 309.46768188]
[39.79461670 304.92004395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[12 21]
[13 20]
[96 131]
[97 130]
[98 129]
[99 128]
[100 125]
[101 124]
[102 123]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
