%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUxxxxxxxxxxGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[163.23789978 508.30001831]
[163.23789978 493.30001831]
[163.23789978 478.30001831]
[163.23789978 463.30001831]
[163.23789978 448.30001831]
[163.23789978 433.30001831]
[163.23789978 418.30001831]
[163.23789978 403.30001831]
[163.23789978 388.30001831]
[163.23789978 373.30001831]
[141.53915405 365.44818115]
[124.99589539 349.30889893]
[116.58380890 327.74353027]
[117.83325195 304.59313965]
[128.55085754 283.99429321]
[146.84880066 269.64004517]
[142.24324036 255.36459351]
[137.63766479 241.08914185]
[126.36635590 231.35226440]
[129.49275208 215.84303284]
[124.88718414 201.56758118]
[120.28161621 187.29211426]
[115.67605591 173.01664734]
[111.07048798 158.74119568]
[106.46492767 144.46572876]
[101.85935974 130.19027710]
[84.43667603 128.06289673]
[70.16645813 116.16550446]
[64.31700134 97.45152283]
[49.33728790 98.23136902]
[34.35757446 99.01121521]
[27.45161247 112.72993469]
[14.60271645 121.14429474]
[-0.73282611 121.99086761]
[-14.42983150 115.04193878]
[-22.80387306 102.16673279]
[-23.60237694 86.82861328]
[-16.61054993 73.15345764]
[-3.70915604 64.81980896]
[11.63139248 64.06938934]
[25.28456688 71.10404968]
[33.57772827 84.03150177]
[48.55744553 83.25165558]
[63.53715897 82.47180939]
[72.42950439 70.39182281]
[68.72334290 55.85688400]
[65.01718903 41.32194901]
[54.31480408 34.04782104]
[51.55249786 21.81717873]
[57.68479156 11.34329033]
[54.28181076 -3.26560235]
[42.07065582 -9.04013920]
[35.52858353 -20.63450241]
[36.85972214 -33.68449783]
[45.35185242 -43.42515945]
[42.25353241 -58.10168457]
[39.15520859 -72.77821350]
[36.05688858 -87.45473480]
[32.95856476 -102.13126373]
[29.86024475 -116.80778503]
[14.79905987 -117.96424103]
[0.67425901 -123.31837463]
[-11.36912251 -132.43614197]
[-20.35478210 -144.57839966]
[-25.55429459 -158.76084900]
[-26.54615593 -173.83377075]
[-23.24996185 -188.57527161]
[-15.93291950 -201.79031372]
[-5.18818855 -212.40763855]
[8.11320305 -219.56652832]
[22.89297104 -222.68664551]
[37.95298767 -221.51504517]
[52.07239914 -216.14674377]
[64.10662079 -207.01687622]
[73.08007812 -194.86558533]
[78.26533508 -180.67793274]
[79.24205780 -165.60401917]
[75.93105316 -150.86584473]
[68.60073853 -137.65814209]
[57.84534454 -127.05162811]
[44.53676987 -119.90611267]
[47.63508987 -105.22958374]
[50.73341370 -90.55305481]
[53.83173370 -75.87653351]
[56.93005753 -61.20000839]
[60.02837753 -46.52348328]
[74.48429108 -37.98623657]
[78.40045166 -21.31447220]
[68.89070129 -6.66858053]
[72.29368591 7.94031191]
[84.96128845 20.04533577]
[79.55212402 37.61578751]
[83.25828552 52.15072250]
[86.96444702 66.68566132]
[107.16402435 67.77606964]
[121.91827393 79.15535736]
[135.01142883 71.83625031]
[148.10458374 64.51714325]
[161.19773865 57.19804001]
[172.07308960 44.19177628]
[187.58166504 51.04163361]
[185.29270935 67.84035492]
[168.51684570 70.29119110]
[155.42369080 77.61029816]
[142.33053589 84.92940521]
[129.23738098 92.24851227]
[130.19718933 101.74331665]
[128.15110779 111.06459045]
[123.30277252 119.28446198]
[116.13481903 125.58470917]
[120.74038696 139.86016846]
[125.34595490 154.13563538]
[129.95152283 168.41108704]
[134.55708313 182.68655396]
[139.16264343 196.96200562]
[143.76820374 211.23747253]
[155.36894226 221.99542236]
[151.91313171 236.48356628]
[156.51869202 250.75903320]
[161.12426758 265.03448486]
[169.41258240 264.22927856]
[177.72386169 264.68304443]
[185.86802673 266.38430786]
[193.65901184 269.29306030]
[200.91897583 273.34170532]
[207.48240662 278.43667603]
[213.19984436 284.46054077]
[217.94129944 291.27474976]
[221.59924316 298.72274780]
[224.09097290 306.63369751]
[225.36058044 314.82629395]
[225.38012695 323.11297607]
[224.15025330 331.30416870]
[221.70021057 339.21267700]
[218.08711243 346.65789795]
[213.39460754 353.47000122]
[207.73095703 359.49383545]
[201.22651672 364.59234619]
[194.03079224 368.64978027]
[186.30889893 371.57427979]
[178.23789978 373.30001831]
[178.23789978 388.30001831]
[178.23789978 403.30001831]
[178.23789978 418.30001831]
[178.23789978 433.30001831]
[178.23789978 448.30001831]
[178.23789978 463.30001831]
[178.23789978 478.30001831]
[178.23789978 493.30001831]
[178.23789978 508.30001831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 120]
[17 119]
[18 118]
[20 116]
[21 115]
[22 114]
[23 113]
[24 112]
[25 111]
[26 110]
[29 44]
[30 43]
[31 42]
[45 94]
[46 93]
[47 92]
[50 90]
[51 89]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
