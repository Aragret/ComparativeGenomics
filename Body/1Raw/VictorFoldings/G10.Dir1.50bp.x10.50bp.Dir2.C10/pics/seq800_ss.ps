%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxCCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.48464966 110.50218201]
[92.46712494 122.48901367]
[83.44959259 134.47584534]
[74.43206024 146.46267700]
[65.41453552 158.44950867]
[56.39700317 170.43634033]
[48.27545929 183.04747009]
[41.09295273 196.21604919]
[33.91044235 209.38464355]
[26.72793388 222.55322266]
[24.45173454 239.35366821]
[7.67773342 241.81726074]
[0.66692185 226.38078308]
[13.55935097 215.37071228]
[20.74185944 202.20213318]
[27.92436790 189.03353882]
[35.10687637 175.86495972]
[20.60977554 179.71646118]
[6.95524979 173.50727844]
[0.32893345 160.05024719]
[3.73261285 145.44151306]
[15.62438774 136.29899597]
[30.61716843 136.76432800]
[41.91907883 146.62672424]
[44.41016769 161.41880798]
[53.42770004 149.43197632]
[62.44522858 137.44514465]
[71.46276093 125.45832062]
[80.48028564 113.47148132]
[89.49781799 101.48464966]
[87.94865417 94.14638519]
[83.30117798 72.13159943]
[70.20802307 64.81249237]
[57.11486435 57.49338913]
[52.63082886 57.72766113]
[48.71953964 56.59943390]
[45.74702454 54.46729660]
[43.92041779 51.77332306]
[43.27447128 48.98225021]
[30.83503151 40.60010529]
[18.39558983 32.21796417]
[5.95615005 23.83581924]
[-6.65497780 15.71427727]
[-19.43233490 7.85685205]
[-32.20969391 -0.00057375]
[-44.98704910 -7.85799932]
[-58.84536362 -1.07930899]
[-74.16589355 -2.89177728]
[-86.05990601 -12.71705246]
[-90.73206329 -27.41992378]
[-86.69150543 -42.30876160]
[-75.22755432 -52.63258743]
[-59.99832153 -55.09711075]
[-45.86338806 -48.91590500]
[-37.33317184 -36.06137848]
[-37.12962341 -20.63535690]
[-24.35226631 -12.77793121]
[-11.57490921 -4.92050552]
[1.20244789 2.93692040]
[6.03152275 2.70122886]
[11.04800320 5.54133892]
[14.33829308 11.39637947]
[26.77773285 19.77852249]
[39.21717453 28.16066551]
[51.65661621 36.54280853]
[64.43397522 44.40023422]
[77.52712250 51.71934128]
[90.62027740 59.03844452]
[89.93095398 44.05429459]
[90.31826782 29.05929565]
[91.78022003 14.13070869]
[94.30929565 -0.65454739]
[97.89244843 -15.22029591]
[102.51122284 -29.49148750]
[108.14181519 -43.39459610]
[114.75522614 -56.85798264]
[122.31736755 -69.81228638]
[130.78929138 -82.19075775]
[140.12733459 -93.92961884]
[150.28340149 -104.96838379]
[161.20513916 -115.25019073]
[172.83630371 -124.72205353]
[185.11694336 -133.33517456]
[197.98381042 -141.04516602]
[211.37057495 -147.81231689]
[225.20829773 -153.60174561]
[239.42565918 -158.38365173]
[253.94941711 -162.13336182]
[268.70474243 -164.83157349]
[283.61560059 -166.46438599]
[298.60519409 -167.02339172]
[313.59625244 -166.50569153]
[328.51156616 -164.91397095]
[343.27426147 -162.25642395]
[357.80831909 -158.54675293]
[372.03878784 -153.80404663]
[385.89242554 -148.05276489]
[399.29779053 -141.32252502]
[412.18582153 -133.64802551]
[424.49017334 -125.06877136]
[436.14736938 -115.62899780]
[447.09741211 -105.37732697]
[457.28384399 -94.36658478]
[466.65420532 -82.65350342]
[475.16021729 -70.29842377]
[482.75802612 -57.36500931]
[489.40850830 -43.91989517]
[495.07739258 -30.03235626]
[499.73547363 -15.77394485]
[503.35876465 -1.21812546]
[505.92855835 13.56010532]
[507.43164062 28.48460579]
[507.86029053 43.47848129]
[507.21224976 58.46447754]
[505.49087524 73.36537933]
[502.70504761 88.10441589]
[498.86914062 102.60564423]
[494.00286865 116.79434967]
[488.13131714 130.59742737]
[481.28475952 143.94377136]
[473.49847412 156.76460266]
[464.81256104 168.99386597]
[455.27175903 180.56854248]
[444.92526245 191.42901611]
[433.82635498 201.51931763]
[422.03222656 210.78747559]
[409.60363770 219.18571472]
[396.60464478 226.67077637]
[383.10220337 233.20408630]
[369.16589355 238.75198364]
[354.86752319 243.28590393]
[340.28076172 246.78247070]
[325.48074341 249.22366333]
[310.54373169 250.59690857]
[295.54669189 250.89514160]
[280.56689453 250.11680603]
[265.68151855 248.26593018]
[250.96726990 245.35205078]
[236.49995422 241.39016724]
[222.35409546 236.40069580]
[208.60260010 230.40934753]
[195.31629944 223.44699097]
[182.56365967 215.54949951]
[170.41040039 206.75756836]
[158.91911316 197.11648560]
[148.14903259 186.67593384]
[138.15562439 175.48970032]
[128.99038696 163.61543274]
[120.70053864 151.11428833]
[113.32880402 138.05068970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 17]
[8 16]
[9 15]
[10 14]
[32 68]
[33 67]
[34 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 59]
[44 58]
[45 57]
[46 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
