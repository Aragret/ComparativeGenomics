%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCxxxxxxxxxxCUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.86907959 292.19274902]
[145.24510193 277.20571899]
[144.62112427 262.21871948]
[143.99716187 247.23168945]
[143.37318420 232.24467468]
[142.74920654 217.25765991]
[142.12522888 202.27064514]
[141.50125122 187.28363037]
[137.34335327 172.87141418]
[129.88844299 159.85510254]
[122.43354034 146.83879089]
[114.97863007 133.82247925]
[107.52371979 120.80617523]
[114.35157776 134.16207886]
[112.49515533 149.04676819]
[102.59599304 160.31648254]
[88.07495117 164.07672119]
[73.95011139 159.02806091]
[65.10263062 146.91517639]
[64.58995056 131.92395020]
[72.58924103 119.23491669]
[86.33650970 113.23303986]
[72.31980133 118.57454681]
[58.30308533 123.91606140]
[44.28637314 129.25756836]
[30.26965904 134.59909058]
[22.42307472 148.59233093]
[6.56783342 151.03994751]
[-5.13327885 140.06436157]
[-3.70417070 124.08509064]
[9.75886822 115.36006165]
[24.92814636 120.58237457]
[38.94485855 115.24085999]
[52.96157455 109.89935303]
[66.97828674 104.55783844]
[80.99500275 99.21632385]
[65.99500275 99.21049500]
[54.87117386 89.14766693]
[53.36677933 74.22329712]
[62.25853348 62.14287567]
[76.95561218 59.14354324]
[89.86987305 66.77387238]
[94.33352661 81.09634399]
[95.26914978 66.12554932]
[96.20478058 51.15475845]
[97.14041138 36.18396759]
[97.45246887 21.18721390]
[97.14041138 6.19046021]
[96.82835388 -8.80629349]
[96.51629639 -23.80304718]
[96.20423889 -38.79980087]
[83.37066650 -50.64196396]
[83.04619598 -67.76442719]
[94.94454956 -79.60871124]
[94.32057190 -94.59572601]
[93.54072571 -109.57543945]
[92.60510254 -124.54623413]
[91.66947174 -139.51702881]
[90.73384094 -154.48782349]
[89.79821777 -169.45860291]
[88.86258698 -184.42939758]
[80.27956390 -197.72007751]
[87.20793152 -210.90518188]
[86.27230072 -225.87597656]
[71.57444000 -229.40646362]
[58.57103729 -237.11378479]
[48.41835022 -248.31263733]
[42.01914597 -262.00723267]
[39.94243622 -276.97982788]
[42.37288666 -291.89907837]
[49.09437561 -305.43838501]
[59.50923920 -316.39385986]
[72.69139099 -323.79129028]
[87.46868134 -326.97296143]
[102.52713013 -325.65594482]
[116.52774811 -319.95733643]
[128.22560120 -310.38385010]
[136.58053589 -297.78677368]
[140.84963989 -283.28622437]
[140.65328979 -268.17156982]
[136.00895691 -253.78678894]
[127.32961273 -241.41098022]
[115.38701630 -232.14460754]
[101.24309540 -226.81161499]
[102.17871857 -211.84082031]
[110.69482422 -199.62094116]
[103.83337402 -185.36502075]
[104.76900482 -170.39424133]
[105.70463562 -155.42344666]
[106.64026642 -140.45265198]
[107.57588959 -125.48186493]
[108.51152039 -110.51107025]
[112.09086609 -103.98926544]
[109.30758667 -95.21970367]
[109.93156433 -80.23268890]
[120.56710052 -72.89224243]
[125.08132935 -60.57574463]
[121.60679626 -47.72446060]
[111.20099640 -39.11185837]
[111.51305389 -24.11510277]
[111.82510376 -9.11834908]
[112.13716125 5.87840414]
[112.44921875 20.87515831]
[114.44605255 22.92942047]
[115.72200012 25.92373848]
[115.90515137 29.57727623]
[114.73598480 33.47652054]
[112.11119843 37.11959457]
[111.17557526 52.09038925]
[110.23994446 67.06118011]
[109.30431366 82.03196716]
[121.62403870 94.28681183]
[120.54002380 113.35126495]
[127.99493408 126.36756897]
[135.44984436 139.38388062]
[142.90475464 152.40019226]
[150.35966492 165.41650391]
[150.73056030 150.42108154]
[154.75088501 135.96989441]
[162.17735291 122.93733215]
[172.56062317 112.11200714]
[185.27239990 104.14891815]
[199.54351807 99.52992249]
[214.51045227 98.53449249]
[229.26757812 101.22287750]
[242.92195129 107.43239594]
[254.64736938 116.78731537]
[263.73434448 128.72158813]
[269.63302612 142.51309204]
[271.98651123 157.32730103]
[270.65237427 172.26785278]
[265.71136475 186.43070984]
[257.46243286 198.95889282]
[246.40473938 209.09432983]
[233.20733643 216.22373962]
[218.66879272 219.91575623]
[203.66882324 219.94694519]
[189.11506653 216.31544495]
[175.88812256 209.24098206]
[164.78834534 199.15162659]
[156.48826599 186.65965271]
[157.11224365 201.64666748]
[157.73622131 216.63368225]
[158.36019897 231.62069702]
[158.98417664 246.60771179]
[159.60815430 261.59472656]
[160.23213196 276.58175659]
[160.85610962 291.56875610]
[167.55609131 307.14266968]
[154.44557190 317.89208984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[43 111]
[44 110]
[45 109]
[46 108]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[54 95]
[55 94]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[63 85]
[64 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
