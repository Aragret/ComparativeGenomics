%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCxxxxxxxxxxCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.31349182 293.18957520]
[76.31349182 278.18957520]
[76.31349182 263.18957520]
[76.31349182 248.18957520]
[76.31349182 233.18957520]
[76.31349182 218.18957520]
[76.31349182 203.18957520]
[76.31349182 188.18957520]
[76.31349182 173.18957520]
[76.31349182 158.18957520]
[69.62034607 154.80551147]
[62.85223007 168.19180298]
[60.55193710 183.01437378]
[45.74399948 185.40707397]
[38.89252853 172.06324768]
[49.46594620 161.42369080]
[56.23406219 148.03739929]
[49.54092026 144.65335083]
[37.46092987 153.54570007]
[25.38094139 162.43804932]
[19.30369568 177.66955566]
[3.03758121 179.75416565]
[-6.68421555 166.54740906]
[0.13925534 151.63525391]
[16.48859215 150.35806274]
[28.56858063 141.46571350]
[40.64856720 132.57336426]
[37.70308685 117.86539459]
[23.13038254 114.31063080]
[16.58587837 115.81959534]
[11.10852814 114.02238464]
[8.03166103 110.29299164]
[-6.38055468 106.13510132]
[-20.79277039 101.97721100]
[-35.20498657 97.81932831]
[-49.61720276 93.66143799]
[-64.02941895 89.50354767]
[-73.48408508 101.40639496]
[-86.77650452 108.78067780]
[-101.87968445 110.50186157]
[-116.49049377 106.30749512]
[-128.38088989 96.83718109]
[-135.73767090 83.53507233]
[-137.43899536 68.42964172]
[-133.22541809 53.82436371]
[-123.73946381 41.94643402]
[-110.42768860 34.60715103]
[-95.32003021 32.92570496]
[-80.72030640 37.15849686]
[-68.85486603 46.66006470]
[-61.53310394 59.98148346]
[-59.87153244 75.09133148]
[-45.45931625 79.24922180]
[-31.04710007 83.40711212]
[-16.63488388 87.56499481]
[-2.22266722 91.72288513]
[12.18954849 95.88077545]
[26.68514633 99.73793030]
[41.25784683 103.29269409]
[51.59635162 72.78047943]
[75.40734100 53.92224503]
[103.81282806 51.22117615]
[127.47628784 63.57573318]
[138.35511780 53.24852753]
[149.23393250 42.92132187]
[156.95802307 30.06291962]
[160.96575928 15.60823250]
[164.97349548 1.15354371]
[168.98124695 -13.30114460]
[172.98898315 -27.75583267]
[161.31172180 -18.34086418]
[146.73374939 -14.80780125]
[132.04177856 -17.83202171]
[120.04431915 -26.83541679]
[113.03482056 -40.09689713]
[112.35320282 -55.08140564]
[118.12977600 -68.92449951]
[129.26028442 -78.97993469]
[143.61701965 -83.32551575]
[158.45555115 -81.13054657]
[170.93936157 -72.81461334]
[178.68202209 -59.96738815]
[180.20362854 -45.04622269]
[187.65853882 -58.06253052]
[195.11344910 -71.07884216]
[192.31199646 -86.87540436]
[203.02326965 -98.81894684]
[219.03050232 -97.74739838]
[228.05430603 -84.48276520]
[223.17240906 -69.20053864]
[208.12976074 -63.62392807]
[200.67485046 -50.60762024]
[193.21994019 -37.59131241]
[187.44366455 -23.74809265]
[183.43592834 -9.29340458]
[179.42819214 5.16128397]
[175.42045593 19.61597252]
[171.41270447 34.07065964]
[182.38392639 23.84166527]
[195.32423401 16.25559998]
[209.60891724 11.67869949]
[224.54833984 10.33192539]
[239.42124939 12.28029537]
[253.50965881 17.42974854]
[266.13339233 25.53168106]
[276.68301392 36.19495392]
[284.64923096 48.90477753]
[289.64743042 63.04754639]
[291.43634033 77.94049072]
[289.92956543 92.86462402]
[285.19985962 107.09944153]
[277.47558594 119.95772552]
[267.12960815 130.81871033]
[254.66145325 139.15806580]
[240.67300415 144.57318115]
[225.83961487 146.80262756]
[210.87738037 145.73878479]
[196.50866699 141.43299866]
[183.42712402 134.09315491]
[172.26431274 124.07358551]
[163.55914307 111.85801697]
[157.73187256 98.03619385]
[155.06382751 83.27538300]
[155.68382263 68.28820038]
[159.56114197 53.80014801]
[148.68231201 64.12734985]
[137.80349731 74.45455933]
[142.34834290 80.62793732]
[145.86875916 87.61125183]
[148.22067261 95.23166656]
[149.28962708 103.29083252]
[148.99528503 111.57004547]
[147.29499817 119.83616638]
[144.18640137 127.84817505]
[139.70867920 135.36419678]
[133.94291687 142.14869690]
[127.01082611 147.97978210]
[119.07250977 152.65617371]
[110.32285309 156.00393677]
[100.98677826 157.88244629]
[91.31349182 158.18957520]
[91.31349182 173.18957520]
[91.31349182 188.18957520]
[91.31349182 203.18957520]
[91.31349182 218.18957520]
[91.31349182 233.18957520]
[91.31349182 248.18957520]
[91.31349182 263.18957520]
[91.31349182 278.18957520]
[91.31349182 293.18957520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 27]
[19 26]
[20 25]
[28 59]
[29 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[63 127]
[64 126]
[65 125]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
