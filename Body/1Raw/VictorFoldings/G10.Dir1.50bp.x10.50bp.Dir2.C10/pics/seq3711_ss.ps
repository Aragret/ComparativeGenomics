%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAxxxxxxxxxxGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.42497253 398.68374634]
[155.11291504 383.68701172]
[154.80085754 368.69024658]
[154.48880005 353.69351196]
[154.17674255 338.69674683]
[153.86468506 323.69998169]
[153.55262756 308.70324707]
[153.24057007 293.70648193]
[152.92851257 278.70971680]
[149.67768860 264.06622314]
[143.61468506 250.34617615]
[137.55166626 236.62611389]
[131.48864746 222.90606689]
[125.42563629 209.18601990]
[119.36262512 195.46595764]
[113.29961395 181.74591064]
[108.96459198 196.10583496]
[97.65097809 205.95480347]
[82.83077240 208.27027893]
[69.05210876 202.34169006]
[60.54347229 189.98841858]
[59.91606903 175.00154114]
[67.36243439 161.98034668]
[80.59737396 154.92085266]
[95.55925751 155.98954773]
[107.65695953 164.85908508]
[104.25398254 150.25019836]
[100.85100555 135.64131165]
[97.44802856 121.03241730]
[94.04504395 106.42352295]
[91.53002930 104.57727814]
[89.65103912 101.75167084]
[88.78070831 98.18817902]
[89.19417572 94.26554871]
[91.02040863 90.45957184]
[88.84357452 75.61837006]
[86.66673279 60.77716446]
[83.34101868 56.58679581]
[82.12281036 51.99676895]
[82.80345917 47.89330673]
[84.84716797 44.94529724]
[83.60028839 29.99721146]
[82.35341644 15.04912472]
[81.10653687 0.10103811]
[79.85966492 -14.84704876]
[78.61279297 -29.79513550]
[63.90973663 -33.29908371]
[51.02704239 -41.16538239]
[41.21979141 -52.61292267]
[35.43888092 -66.51242065]
[34.23883438 -81.49783325]
[37.72463608 -96.10057831]
[45.54266739 -108.89348602]
[56.91654587 -118.63027191]
[70.72421265 -124.36693573]
[69.47734070 -139.31501770]
[68.23046112 -154.26310730]
[66.98358917 -169.21119690]
[65.73671722 -184.15928650]
[56.87905121 -197.26853943]
[63.53162003 -210.59492493]
[62.28474808 -225.54301453]
[61.03787231 -240.49108887]
[59.79099655 -255.43917847]
[58.54412460 -270.38726807]
[57.29724884 -285.33535767]
[42.80784988 -289.93164062]
[31.18353081 -299.72671509]
[24.19691467 -313.22692871]
[22.91341209 -328.37356567]
[27.52874565 -342.85690308]
[37.33911133 -354.46835327]
[50.84849930 -361.43719482]
[65.99682617 -362.70077515]
[80.47408295 -358.06637573]
[92.07259369 -348.24075317]
[99.02366638 -334.72219849]
[100.26731110 -319.57223511]
[95.61389160 -305.10107422]
[85.77301025 -293.51550293]
[72.24533844 -286.58224487]
[73.49221039 -271.63415527]
[74.73908234 -256.68606567]
[75.98596191 -241.73797607]
[77.23283386 -226.78988647]
[78.47970581 -211.84179688]
[87.24818420 -199.80172729]
[80.68479919 -185.40615845]
[81.93167877 -170.45806885]
[83.17855072 -155.50997925]
[84.42542267 -140.56190491]
[85.67230225 -125.61380768]
[100.23957062 -122.24400330]
[113.06940460 -114.52613831]
[122.89885712 -103.20526886]
[128.75578308 -89.38183594]
[130.05502319 -74.40470123]
[126.65679932 -59.73953247]
[118.88164520 -46.82538223]
[107.48023224 -36.93345642]
[93.56087494 -31.04201126]
[94.80775452 -16.09392357]
[96.05462646 -1.14583647]
[97.30149841 13.80225086]
[98.54837799 28.75033760]
[99.79524994 43.69842529]
[101.50794220 58.60032654]
[103.68477631 73.44153595]
[105.86161804 88.28273773]
[108.65393829 103.02054596]
[112.05691528 117.62943268]
[115.45989227 132.23832703]
[118.86287689 146.84721375]
[122.26585388 161.45611572]
[127.01966858 175.68289185]
[133.08267212 189.40295410]
[139.14569092 203.12300110]
[145.20870972 216.84304810]
[151.27171326 230.56311035]
[157.33473206 244.28315735]
[163.39775085 258.00320435]
[165.39498901 243.13677979]
[171.60961914 229.48472595]
[181.50964355 218.21577454]
[194.24757385 210.29458618]
[208.73295593 206.39924622]
[223.72578430 206.86325073]
[237.94256592 211.64685059]
[250.16629028 220.34056091]
[259.35055542 232.20013428]
[264.70907593 246.21034241]
[265.78320312 261.17184448]
[262.48095703 275.80383301]
[255.08503723 288.85372925]
[244.22854614 299.20443726]
[230.84089661 305.96981812]
[216.06811523 308.57077026]
[201.17483521 306.78460693]
[187.43600464 300.76425171]
[176.02775574 291.02505493]
[167.92527771 278.39767456]
[168.23731995 293.39443970]
[168.54937744 308.39117432]
[168.86143494 323.38793945]
[169.17349243 338.38467407]
[169.48554993 353.38143921]
[169.79760742 368.37820435]
[170.10966492 383.37493896]
[170.42172241 398.37170410]
[173.01272583 417.57943726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[26 114]
[27 113]
[28 112]
[29 111]
[30 110]
[35 109]
[36 108]
[37 107]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
