%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAxxxxxxxxxxUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.55696106 313.22448730]
[116.55696106 298.22448730]
[116.55696106 283.22448730]
[116.55696106 268.22448730]
[116.55696106 253.22447205]
[116.55696106 238.22447205]
[116.55696106 223.22447205]
[116.55696106 208.22447205]
[116.55696106 193.22447205]
[116.55696106 178.22447205]
[113.61148071 163.51651001]
[107.83520508 149.67329407]
[93.26250458 146.11853027]
[81.76069641 155.74705505]
[70.25889587 165.37557983]
[73.56645966 180.31942749]
[69.53921509 195.08561707]
[59.10260391 206.28094482]
[44.65487289 211.33285522]
[29.51601219 209.08042908]
[17.16481590 200.04125977]
[10.43950176 186.29248047]
[10.88549614 170.99346924]
[18.40031242 157.65983582]
[31.25710297 149.35551453]
[46.50146866 147.98881531]
[60.63036728 153.87377930]
[72.13217163 144.24525452]
[83.63397217 134.61672974]
[81.25706482 127.50334167]
[67.03021240 132.25691223]
[62.27686691 118.02998352]
[76.50325012 113.27655792]
[74.12634277 106.16316986]
[59.14663315 105.38332367]
[44.16691589 104.60348511]
[31.33380127 114.23107910]
[15.84214973 110.06115723]
[9.57583237 95.29251099]
[17.34183121 81.25439453]
[33.18273926 78.71563721]
[44.94676208 89.62376404]
[59.92647552 90.40361023]
[74.90618896 91.18345642]
[80.39321899 77.22306824]
[68.89141846 67.59454346]
[57.38961411 57.96601486]
[43.93057251 65.03160858]
[28.79170036 66.40383148]
[14.28156853 61.87343597]
[2.61286473 52.13127136]
[-4.43501759 38.66294479]
[-5.78732729 23.52228165]
[-1.23784733 9.01812172]
[8.51966000 -2.63775611]
[21.99724579 -9.66791534]
[37.13967514 -11.00030708]
[51.63783646 -6.43175125]
[63.28086853 3.34108043]
[70.29329681 16.82790184]
[71.60576630 31.97207069]
[67.01814270 46.46421051]
[78.51994324 56.09273911]
[90.02175140 65.72126770]
[104.92365265 64.00857544]
[113.94117737 52.02174377]
[122.83353424 39.94175339]
[131.59973145 27.76991653]
[140.36595154 15.59808064]
[129.54560852 5.17210102]
[120.31924438 -6.68770313]
[112.87468719 -19.73988152]
[107.36350250 -33.71871185]
[103.89789581 -48.33959579]
[102.54841614 -63.30487823]
[103.34253693 -78.30988312]
[106.26409149 -93.04912567]
[111.25360107 -107.22253418]
[118.20948792 -120.54155731]
[126.99014282 -132.73504639]
[137.41679382 -143.55473328]
[149.27716064 -152.78036499]
[162.32980347 -160.22410583]
[176.30897522 -165.73442078]
[190.93006897 -169.19912720]
[205.89544678 -170.54768372]
[220.90039062 -169.75263977]
[235.63945007 -166.83016968]
[249.81256104 -161.83978271]
[263.13116455 -154.88307190]
[275.32409668 -146.10166931]
[286.14312744 -135.67434692]
[295.36804199 -123.81340027]
[302.81097412 -110.76029968]
[308.32043457 -96.78079224]
[311.78421021 -82.15947723]
[313.13183594 -67.19402313]
[312.33587646 -52.18912125]
[309.41247559 -37.45023727]
[304.42123413 -23.27744675]
[297.46368408 -9.95928383]
[288.68151855 2.23310995]
[278.25354004 13.05151272]
[266.39202881 22.27567482]
[253.33847046 29.71780586]
[239.35861206 35.22639084]
[224.73709106 38.68928528]
[209.77156067 40.03598785]
[194.76669312 39.23908234]
[180.02799988 36.31478882]
[165.85551453 31.32264709]
[152.53778076 24.36428833]
[143.77157593 36.53612518]
[135.00537109 48.70796204]
[133.63960266 56.02098846]
[125.92801666 61.03927231]
[116.91048431 73.02610779]
[135.83131409 88.79095459]
[139.76138306 117.01979065]
[121.67842102 143.89701843]
[127.45469666 157.74023438]
[129.76077271 142.91856384]
[136.25808716 129.39877319]
[146.39039612 118.33820343]
[159.29035950 110.68372345]
[173.85365295 107.09059143]
[188.83357239 107.86639404]
[202.94776917 112.94471741]
[214.98799133 121.89084625]
[223.92352295 133.93891907]
[228.98944092 148.05757141]
[229.75209045 163.03817749]
[226.14614868 177.59829712]
[218.48033142 190.49153137]
[207.41087341 200.61412048]
[193.88536072 207.09954834]
[179.06166077 209.39259338]
[164.20877075 207.29698181]
[150.59817505 200.99211121]
[139.39498901 191.01770020]
[131.55696106 178.22447205]
[131.55696106 193.22447205]
[131.55696106 208.22447205]
[131.55696106 223.22447205]
[131.55696106 238.22447205]
[131.55696106 253.22447205]
[131.55696106 268.22448730]
[131.55696106 283.22448730]
[131.55696106 298.22448730]
[131.55696106 313.22448730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 121]
[12 120]
[13 29]
[14 28]
[15 27]
[34 44]
[35 43]
[36 42]
[45 64]
[46 63]
[47 62]
[65 117]
[66 116]
[67 114]
[68 113]
[69 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
