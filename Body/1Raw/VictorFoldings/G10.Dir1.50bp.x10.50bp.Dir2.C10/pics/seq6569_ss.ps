%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCxxxxxxxxxxCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[56.98096848 417.18502808]
[59.57196808 397.97729492]
[59.88402557 382.98052979]
[60.19608307 367.98379517]
[60.50813675 352.98703003]
[60.82019424 337.99026489]
[61.13225174 322.99353027]
[61.44430542 307.99676514]
[61.75636292 293.00003052]
[62.06842041 278.00326538]
[47.53607178 274.39593506]
[34.16445923 267.64181519]
[22.62565804 258.07672119]
[13.50041485 246.17791748]
[7.24893761 232.54020691]
[4.18767738 217.84620667]
[4.47331190 202.83219910]
[8.09473133 188.25123596]
[14.87343311 174.83535767]
[24.47231865 163.25888062]
[36.41245651 154.10443115]
[50.09697342 147.83367920]
[64.84089661 144.76403809]
[65.15295410 129.76727295]
[53.45332718 120.38011932]
[38.88062286 123.93488312]
[24.30792046 127.48963928]
[9.73521900 131.04440308]
[-4.83748436 134.59916687]
[-19.41018677 138.15393066]
[-33.36523056 147.78164673]
[-46.47984314 137.03720093]
[-39.78576660 121.46074677]
[-22.96494865 123.58122253]
[-8.39224625 120.02646637]
[6.18045664 116.47170258]
[20.75315857 112.91693878]
[35.32586288 109.36217499]
[49.89856339 105.80741882]
[55.38559723 91.84702301]
[47.13330841 79.32106781]
[35.93754196 69.33834076]
[22.55125618 62.57022095]
[9.16497231 55.80210876]
[-4.22131300 49.03399277]
[-17.60759735 42.26587677]
[-30.99388313 35.49776459]
[-47.85718155 33.74689484]
[-50.84296036 17.05793190]
[-35.63275528 9.56887245]
[-24.22576714 22.11147881]
[-10.83948326 28.87959290]
[2.54680181 35.64770889]
[15.93308640 42.41582489]
[29.31937218 49.18393707]
[42.70565796 55.95205307]
[34.80042648 43.20421600]
[29.98577690 28.99790955]
[28.51160812 14.07052422]
[30.45444489 -0.80312359]
[35.71343613 -14.85100555]
[44.01561737 -27.34395599]
[54.93004990 -37.63351822]
[67.89022064 -45.18560791]
[82.22341156 -49.60822678]
[97.18566132 -50.67181015]
[112.00032806 -48.32115936]
[125.89846039 -42.67828369]
[138.15864563 -34.03608322]
[148.14453125 -22.84313202]
[155.33778381 -9.68041325]
[159.36502075 4.76885319]
[160.01722717 19.75466728]
[157.26054382 34.49917984]
[151.23803711 48.23706436]
[142.26232910 60.25524902]
[130.79931641 69.92991638]
[117.44397736 76.75889587]
[102.88954163 80.38773346]
[87.89147186 80.62805939]
[73.22824097 77.46740723]
[59.65927124 71.06877136]
[67.91156006 83.59473419]
[78.68035126 73.25590515]
[92.06050110 68.62388611]
[105.38533020 69.95063019]
[116.25960541 76.36081696]
[122.99004364 86.12155914]
[137.48564148 82.26440430]
[150.18313599 68.96952820]
[166.93035889 74.12026215]
[181.34257507 69.96237183]
[195.75479126 65.80448914]
[203.19023132 60.38542557]
[210.51020813 61.71336746]
[225.00581360 57.85620880]
[225.19171143 42.76091003]
[229.44448853 28.27586555]
[237.44854736 15.47596359]
[248.60995483 5.31103992]
[262.10043335 -1.46460044]
[276.91894531 -4.34815979]
[291.96578979 -3.12565875]
[306.12445068 2.11218476]
[318.34423828 10.97668839]
[327.71835327 22.81004715]
[333.55120850 36.73414612]
[335.40991211 51.71572495]
[333.15658569 66.64305115]
[326.95843506 80.40842438]
[317.27539062 91.99034882]
[304.82598877 100.52938080]
[290.53405762 105.39186096]
[275.46020508 106.21696472]
[260.72293091 102.94345856]
[247.41589355 95.81427002]
[236.52655029 85.35842133]
[228.86297607 72.35180664]
[214.36737061 76.20896149]
[199.91268921 80.21670532]
[185.50047302 84.37458801]
[171.08825684 88.53247833]
[164.93803406 98.99584961]
[152.91433716 102.55252075]
[141.34280396 96.75999451]
[126.84720612 100.61715698]
[114.58392334 127.86031342]
[80.14970398 130.07933044]
[79.83764648 145.07609558]
[94.44111633 148.75639343]
[107.85293579 155.59098816]
[119.40192413 165.23420715]
[128.51094055 177.19996643]
[134.72569275 190.88619995]
[137.73742676 205.60517883]
[137.39825439 220.61807251]
[133.72839355 235.17202759]
[126.91502380 248.53788757]
[117.30270386 260.04678345]
[105.37599945 269.12359619]
[91.73500061 275.31564331]
[77.06517029 278.31530762]
[76.75311279 293.31207275]
[76.44106293 308.30883789]
[76.12900543 323.30557251]
[75.81694794 338.30233765]
[75.50489044 353.29907227]
[75.19283295 368.29583740]
[74.88077545 383.29260254]
[74.56872559 398.28933716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[23 129]
[24 128]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[40 83]
[41 82]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[88 126]
[89 125]
[91 122]
[92 121]
[93 120]
[95 119]
[96 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
