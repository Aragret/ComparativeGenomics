%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUxxxxxxxxxxGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.00402832 308.12527466]
[137.00402832 293.12527466]
[137.00402832 278.12527466]
[137.00402832 263.12527466]
[137.00402832 248.12527466]
[137.00402832 233.12527466]
[137.00402832 218.12527466]
[137.00402832 203.12527466]
[137.00402832 188.12527466]
[137.00402832 173.12527466]
[132.45674133 158.83114624]
[123.79013824 146.58818054]
[115.12352753 134.34523010]
[106.45691681 122.10227966]
[97.77442932 124.29125214]
[88.40361786 123.00204468]
[79.75412750 118.05445862]
[73.25988770 109.84129333]
[61.10655594 118.63313293]
[60.16424561 134.24229431]
[49.37154388 145.55828857]
[33.82444000 147.23803711]
[20.86380005 138.48843384]
[16.60923767 123.44074249]
[23.06963158 109.20005035]
[37.19458008 102.49037170]
[52.31471252 106.47980499]
[64.46804810 97.68795776]
[68.57299042 83.26057434]
[62.86832809 69.38769531]
[57.16366577 55.51481247]
[51.45900345 41.64193344]
[45.75433731 27.76905251]
[43.35715103 42.57626343]
[36.57829666 55.95711136]
[26.05749702 66.64882660]
[12.78761864 73.64241791]
[-1.97904229 76.27789307]
[-16.84893608 74.30653381]
[-30.41877174 67.91438293]
[-41.40794373 57.70467758]
[-48.77938843 44.64092255]
[-51.83745575 29.95595551]
[-50.29354858 15.03562069]
[-44.29336929 1.28797245]
[-34.40316010 -9.98960686]
[-21.55628014 -17.73283768]
[-6.96509933 -21.21097755]
[7.99338865 -20.09579277]
[21.90753174 -14.49252415]
[33.46423340 -4.92995977]
[41.57198715 7.68746853]
[41.26400757 -7.30936956]
[40.95603180 -22.30620766]
[40.64805222 -37.30304718]
[31.13512993 -25.70544624]
[16.90786743 -20.95308304]
[2.33449078 -24.50508499]
[-8.11049843 -35.27087402]
[-11.22015285 -49.94499969]
[-6.03970671 -64.02204132]
[5.84027481 -73.17987823]
[20.77225304 -74.60676575]
[34.17162704 -67.86460876]
[41.92388153 -55.02523041]
[44.37680817 -69.82331085]
[46.82973862 -84.62139130]
[49.28266525 -99.41947174]
[35.42914200 -105.36449432]
[23.40134239 -114.45269775]
[13.89854145 -126.15570068]
[7.47322178 -139.79310608]
[4.49894333 -154.57203674]
[5.14862680 -169.63330078]
[9.38449955 -184.10121155]
[16.96029472 -197.13467407]
[27.43556404 -207.97589111]
[40.20129013 -215.99459839]
[54.51529312 -220.72459412]
[69.54537201 -221.89086914]
[84.41769409 -219.42564392]
[98.26760864 -213.47221375]
[110.28990173 -204.37672424]
[119.78560638 -192.66795349]
[126.20265198 -179.02667236]
[129.16796875 -164.24592590]
[128.50915527 -149.18507385]
[124.26451111 -134.71971130]
[116.68081665 -121.69086456]
[106.19897461 -110.85598755]
[93.42839050 -102.84502411]
[79.11152649 -98.12371063]
[64.08074188 -96.96653748]
[61.62781525 -82.16846466]
[59.17488861 -67.37038422]
[56.72196198 -52.57230377]
[55.64488983 -37.61102295]
[55.95286942 -22.61418533]
[56.26084518 -7.61734724]
[56.56882477 7.37949085]
[59.62722015 22.06438828]
[65.33188629 35.93726730]
[71.03654480 49.81015015]
[76.74121094 63.68302917]
[82.44586945 77.55590820]
[101.37326050 72.90805817]
[117.84037018 81.41797638]
[124.29125214 97.77442932]
[118.69987488 113.43566895]
[127.36647797 125.67862701]
[136.03308105 137.92158508]
[144.69969177 150.16453552]
[143.85212708 135.18849182]
[145.88790894 120.32728577]
[150.73170471 106.13088989]
[158.20423889 93.12468719]
[168.02897644 81.79002380]
[179.84230042 72.54637146]
[193.20704651 65.73582458]
[207.62860107 61.61042404]
[222.57324219 60.32285309]
[237.48788452 61.92075348]
[251.82057190 66.34500122]
[265.04089355 73.43184662]
[276.65954590 82.91903687]
[286.24658203 94.45544434]
[293.44717407 107.61414337]
[297.99487305 121.90814972]
[299.72134399 136.80845642]
[298.56268311 151.76364136]
[294.56182861 166.22024536]
[287.86679077 179.64321899]
[278.72534180 191.53584290]
[267.47583008 201.45794678]
[254.53456116 209.04237366]
[240.38046265 214.00840759]
[225.53736877 216.17228699]
[210.55458069 215.45390320]
[195.98658752 211.87986755]
[182.37254333 205.58242798]
[170.21626282 196.79466248]
[159.96763611 185.84176636]
[152.00402832 173.12527466]
[152.00402832 188.12527466]
[152.00402832 203.12527466]
[152.00402832 218.12527466]
[152.00402832 233.12527466]
[152.00402832 248.12527466]
[152.00402832 263.12527466]
[152.00402832 278.12527466]
[152.00402832 293.12527466]
[152.00402832 308.12527466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 112]
[12 111]
[13 110]
[14 109]
[18 28]
[19 27]
[29 105]
[30 104]
[31 103]
[32 102]
[33 101]
[52 100]
[53 99]
[54 98]
[55 97]
[65 96]
[66 95]
[67 94]
[68 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
