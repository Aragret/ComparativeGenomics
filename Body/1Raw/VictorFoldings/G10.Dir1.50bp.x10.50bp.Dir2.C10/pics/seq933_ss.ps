%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGxxxxxxxxxxCUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.43058777 502.05050659]
[136.43058777 487.05050659]
[136.43058777 472.05050659]
[136.43058777 457.05050659]
[136.43058777 442.05050659]
[136.43058777 427.05050659]
[136.43058777 412.05050659]
[136.43058777 397.05050659]
[136.43058777 382.05050659]
[136.43058777 367.05050659]
[134.74018860 352.14605713]
[131.38092041 337.52703857]
[121.27276611 330.81234741]
[118.38120270 318.61355591]
[124.79746246 307.37811279]
[121.73906708 292.69320679]
[118.68067169 278.00830078]
[115.88558197 275.76449585]
[114.06678772 272.02798462]
[113.92632294 267.28604126]
[115.91551971 262.32638550]
[113.76694489 247.48106384]
[111.61836243 232.63574219]
[98.37462616 225.87249756]
[91.57238770 212.44888306]
[94.00725555 197.41809082]
[104.95235443 186.57783508]
[102.80377960 171.73251343]
[100.65519714 156.88719177]
[98.50662231 142.04187012]
[96.35803986 127.19654846]
[81.10180664 119.89407349]
[73.02615356 105.03263855]
[58.09013748 103.64861298]
[43.15412521 102.26458740]
[34.34577179 114.84665680]
[20.41970062 121.32431793]
[5.12196016 119.95512390]
[-7.43243694 111.10737610]
[-13.86641979 97.16107178]
[-12.44927979 81.86769104]
[-3.56222081 69.34109497]
[10.40418339 62.95085526]
[25.69304085 64.41592407]
[38.19172287 73.34220886]
[44.53815079 87.32857513]
[59.47416306 88.71260071]
[74.41017914 90.09662628]
[80.59167480 76.41717529]
[94.12028503 66.87242889]
[91.06188965 52.18753433]
[88.00349426 37.50263596]
[84.94509888 22.81773758]
[72.00943756 14.13980770]
[69.11698151 -0.79633433]
[77.46977997 -13.07502937]
[74.41138458 -27.75992775]
[71.35298920 -42.44482422]
[68.29459381 -57.12972260]
[53.22897720 -57.66882706]
[38.73035049 -61.79838181]
[25.64163971 -69.27829742]
[14.72381020 -79.67369843]
[6.61160898 -92.38021851]
[1.77666855 -106.65911102]
[0.50008583 -121.68022156]
[2.85607982 -136.57023621]
[8.70767593 -150.46348572]
[17.71467018 -162.55221558]
[29.35340881 -172.13362122]
[42.94722748 -178.65063477]
[57.70580292 -181.72438049]
[72.77108765 -181.17613220]
[87.26721191 -177.03779602]
[100.35138702 -169.54994202]
[111.26290894 -159.14793396]
[119.36740875 -146.43649292]
[124.19368744 -132.15466309]
[125.46116638 -117.13278961]
[123.09614563 -102.24420166]
[117.23612976 -88.35449982]
[108.22180176 -76.27123260]
[96.57726288 -66.69689178]
[82.97949219 -60.18811798]
[86.03788757 -45.50321960]
[89.09628296 -30.81832314]
[92.15467834 -16.13342476]
[104.71488190 -8.21024036]
[108.02571869 6.63876581]
[99.62999725 19.75934219]
[102.68839264 34.44424057]
[105.74678802 49.12913895]
[108.80518341 63.81403351]
[122.36708069 70.22300720]
[135.65441895 63.26265335]
[148.94175720 56.30229950]
[162.22909546 49.34194183]
[162.17741394 34.03652191]
[169.25469971 20.46557808]
[181.83467102 11.74761868]
[197.02655029 9.88596344]
[211.33932495 15.30840874]
[221.48403931 26.76891518]
[225.12953186 41.63394165]
[221.43806458 56.48761749]
[211.25791931 67.91667175]
[196.92842102 73.29479980]
[181.74238586 71.38613892]
[169.18945312 62.62928391]
[155.90211487 69.58963776]
[142.61477661 76.54999542]
[129.32743835 83.51035309]
[131.54888916 101.32367706]
[124.41926575 116.56563568]
[111.20336151 125.04796600]
[113.35194397 139.89329529]
[115.50051880 154.73861694]
[117.64910126 169.58393860]
[119.79767609 184.42926025]
[133.36711121 191.72149658]
[139.96363831 205.44515991]
[137.24644470 220.24653625]
[126.46368408 230.48715210]
[128.61225891 245.33247375]
[130.76084900 260.17779541]
[133.36557007 274.94992065]
[136.42396545 289.63482666]
[139.48236084 304.31970215]
[152.06271362 317.72735596]
[145.99993896 334.16778564]
[149.35919189 348.78677368]
[155.43263245 335.07135010]
[167.10502625 325.65032959]
[181.79336548 322.60852051]
[196.24728394 326.61901855]
[207.26829529 336.79434204]
[212.41754150 350.88281250]
[210.55557251 365.76681519]
[202.09440613 378.15264893]
[188.90641785 385.29943848]
[173.90995789 385.62573242]
[160.42361450 379.05929565]
[151.43058777 367.05050659]
[151.43058777 382.05050659]
[151.43058777 397.05050659]
[151.43058777 412.05050659]
[151.43058777 427.05050659]
[151.43058777 442.05050659]
[151.43058777 457.05050659]
[151.43058777 472.05050659]
[151.43058777 487.05050659]
[151.43058777 502.05050659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[15 128]
[16 127]
[17 126]
[21 125]
[22 124]
[23 123]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[33 48]
[34 47]
[35 46]
[50 93]
[51 92]
[52 91]
[53 90]
[56 87]
[57 86]
[58 85]
[59 84]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
