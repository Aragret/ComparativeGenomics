%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAxxxxxxxxxxCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.87951660 235.22811890]
[156.05593872 221.87002563]
[149.23237610 208.51193237]
[142.40879822 195.15382385]
[135.44844055 181.86648560]
[128.35203552 168.65130615]
[121.25563049 155.43611145]
[114.15922546 142.22093201]
[107.06282806 129.00575256]
[99.96642303 115.79057312]
[106.71697998 129.18571472]
[104.77457428 144.05941772]
[94.81044006 155.27174377]
[80.26791382 158.94799805]
[66.17248535 153.81779480]
[57.39515686 141.65397644]
[56.96912003 126.66003418]
[65.04160309 114.01744843]
[78.82333374 108.09511566]
[64.89262390 113.65705109]
[58.59278107 127.90309906]
[44.38582230 133.34524536]
[30.84322166 127.25151825]
[16.91250420 132.81346130]
[2.98178840 138.37539673]
[-10.94892788 143.93733215]
[-18.57381821 158.05259705]
[-34.38848114 160.75000000]
[-46.26125717 149.96034241]
[-45.08437347 133.96052551]
[-31.76062965 125.02422333]
[-16.51086426 130.00660706]
[-2.58014894 124.44467926]
[11.35056686 118.88273621]
[25.28128433 113.32080078]
[30.90303993 99.57556915]
[44.95153427 93.73652649]
[59.33068466 99.72633362]
[73.26139832 94.16439819]
[85.34057617 89.18429565]
[95.53905487 92.10624695]
[97.38237762 77.21994019]
[99.22570038 62.33362961]
[101.06902313 47.44732285]
[93.75263214 36.77614594]
[95.63364410 24.38126183]
[105.15685272 16.85991287]
[107.30543518 2.01459074]
[109.45401764 -12.83073235]
[102.21802521 -29.73254204]
[113.53813934 -43.10787964]
[115.38146210 -57.99419022]
[117.07186127 -72.89863586]
[118.60915375 -87.81965637]
[120.14644623 -102.74066925]
[121.68373871 -117.66168213]
[123.22103119 -132.58270264]
[108.63465118 -136.18598938]
[94.69173431 -141.78431702]
[81.66368103 -149.26869202]
[69.80409241 -158.49345398]
[59.34381485 -169.27903748]
[50.48645782 -181.41548157]
[43.40443802 -194.66656494]
[38.23560333 -208.77433777]
[35.08057404 -223.46420288]
[34.00075531 -238.45019531]
[35.01717377 -253.44062805]
[38.11003876 -268.14370728]
[43.21914673 -282.27322388]
[50.24505234 -295.55413818]
[59.05099106 -307.72793579]
[69.46555328 -318.55767822]
[81.28601837 -327.83251953]
[94.28228760 -335.37194824]
[108.20140076 -341.02920532]
[122.77240753 -344.69415283]
[137.71168518 -346.29547119]
[152.72842407 -345.80197144]
[167.53033447 -343.22329712]
[181.82928467 -338.60958862]
[195.34693909 -332.05068970]
[207.82019043 -323.67428589]
[219.00621033 -313.64337158]
[228.68728638 -302.15325928]
[236.67497253 -289.42758179]
[242.81376648 -275.71401978]
[246.98419189 -261.27957153]
[249.10507202 -246.40516663]
[249.13510132 -231.38034058]
[247.07373047 -216.49757385]
[242.96105957 -202.04655457]
[236.87713623 -188.30856323]
[228.94041443 -175.55104065]
[219.30535889 -164.02230835]
[208.15953064 -153.94674683]
[195.71987915 -145.52052307]
[182.22856140 -138.90762329]
[167.94818115 -134.23680115]
[153.15669250 -131.59893799]
[138.14204407 -131.04541016]
[136.60475159 -116.12438965]
[135.06745911 -101.20337677]
[133.53016663 -86.28236389]
[131.99287415 -71.36134338]
[134.45100403 -64.34210205]
[130.26776123 -56.15086365]
[128.42443848 -41.26455688]
[135.62644958 -31.49760437]
[134.17140198 -19.04553032]
[124.29933929 -10.68215275]
[122.15075684 4.16316986]
[120.00218201 19.00849342]
[127.39331055 34.89608765]
[115.95533752 49.29064560]
[114.11200714 64.17695618]
[112.26868439 79.06326294]
[110.42536163 93.94956970]
[113.18160248 108.69416809]
[120.27800751 121.90934753]
[127.37441254 135.12452698]
[134.47080994 148.33972168]
[141.56721497 161.55490112]
[148.66362000 174.77008057]
[155.52339172 180.89701843]
[155.76689148 188.33024597]
[162.59046936 201.68835449]
[169.41404724 215.04644775]
[176.23762512 228.40454102]
[190.91188049 224.95063782]
[205.98629761 225.10958862]
[220.58447266 228.87213135]
[233.85768127 236.01953125]
[245.03424072 246.13626099]
[253.46434021 258.63412476]
[258.65789795 272.78652954]
[260.31292725 287.77066040]
[258.33325195 302.71536255]
[252.83395386 316.75180054]
[244.13471985 329.06384277]
[232.74134827 338.93576050]
[219.31623840 345.79357910]
[204.63987732 349.23858643]
[189.56556702 349.07049561]
[174.96966553 345.29910278]
[161.70080566 338.14364624]
[150.53038025 328.02014160]
[142.10784912 315.51718140]
[136.92288208 301.36163330]
[135.27691650 286.37649536]
[137.26565552 271.43298340]
[142.77348328 257.39990234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 129]
[2 128]
[3 127]
[4 126]
[5 124]
[6 123]
[7 122]
[8 121]
[9 120]
[10 119]
[19 39]
[20 38]
[23 35]
[24 34]
[25 33]
[26 32]
[41 118]
[42 117]
[43 116]
[44 115]
[47 113]
[48 112]
[49 111]
[51 108]
[52 107]
[53 105]
[54 104]
[55 103]
[56 102]
[57 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
