%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUxxxxxxxxxxCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.96279907 101.76844025]
[74.97241211 94.26844025]
[61.98203278 86.76844025]
[48.99165344 79.26844025]
[36.00127411 71.76844025]
[23.01089096 64.26844025]
[10.02050972 56.76844025]
[-2.96987081 49.26844025]
[-15.96025181 41.76844025]
[-28.95063210 34.26844025]
[-41.94101334 26.76844215]
[-50.42918396 39.14500427]
[-59.85092163 50.82657623]
[-70.14956665 61.74290085]
[-81.26318359 71.82833099]
[-93.12493134 81.02220154]
[-105.66346741 89.26923370]
[-118.80338287 96.51980591]
[-132.46565247 102.73033142]
[-146.56811523 107.86345673]
[-161.02595520 111.88829803]
[-175.75221252 114.78066254]
[-190.65830994 116.52313995]
[-205.65463257 117.10527039]
[-220.65095520 116.52353668]
[-235.55711365 114.78144073]
[-250.28344727 111.88946533]
[-264.74139404 107.86500549]
[-278.84396362 102.73225403]
[-292.50640869 96.52208710]
[-305.64651489 89.27185059]
[-318.18527222 81.02515411]
[-330.04727173 71.83159637]
[-341.16113281 61.74645615]
[-351.46008301 50.83040237]
[-360.88211060 39.14907455]
[-369.37060547 26.77273560]
[-376.87451172 13.77581501]
[-383.34866333 0.23647867]
[-388.75415039 -13.76384449]
[-393.05844116 -28.14095497]
[-396.23568726 -42.80838394]
[-398.26675415 -57.67792130]
[-399.13940430 -72.66013336]
[-398.84844971 -87.66492462]
[-397.39556885 -102.60204315]
[-394.78958130 -117.38165283]
[-391.04608154 -131.91488647]
[-386.18762207 -146.11430359]
[-380.24343872 -159.89454651]
[-373.24923706 -173.17269897]
[-365.24710083 -185.86892700]
[-356.28515625 -197.90687561]
[-346.41732788 -209.21412659]
[-335.70294189 -219.72270203]
[-324.20642090 -229.36938477]
[-311.99691772 -238.09616089]
[-299.14788818 -245.85054016]
[-285.73657227 -252.58589172]
[-271.84365845 -258.26171875]
[-257.55267334 -262.84384155]
[-242.94956970 -266.30477905]
[-228.12219238 -268.62365723]
[-213.15969849 -269.78652954]
[-198.15209961 -269.78643799]
[-183.18962097 -268.62335205]
[-168.36227417 -266.30429077]
[-153.75923157 -262.84317017]
[-139.46830750 -258.26083374]
[-125.57544708 -252.58483887]
[-112.16422272 -245.84930420]
[-99.31528473 -238.09475708]
[-87.10590363 -229.36782837]
[-75.60951233 -219.72099304]
[-64.89525604 -209.21229553]
[-55.02756882 -197.90489197]
[-46.06579590 -185.86683655]
[-38.06383514 -173.17050171]
[-31.06981277 -159.89224243]
[-25.12579346 -146.11193848]
[-20.26752472 -131.91244507]
[-16.52422523 -117.37917328]
[-13.91840744 -102.59952545]
[-12.46574306 -87.66239166]
[-12.17496967 -72.65760040]
[-13.04783630 -57.67539215]
[-15.07909107 -42.80588531]
[-18.25652122 -28.13849640]
[-22.56101227 -13.76144314]
[-27.96668053 0.23880918]
[-34.44101334 13.77806091]
[-21.45063210 21.27806091]
[-8.46025181 28.77806091]
[4.53012896 36.27806091]
[17.52050972 43.77806091]
[30.51089096 51.27806091]
[43.50127411 58.77806091]
[56.49165344 66.27806091]
[69.48203278 73.77806091]
[82.47241211 81.27806091]
[95.46279907 88.77806091]
[102.63137817 88.23473358]
[108.81423950 91.84604645]
[123.77552032 90.76898193]
[138.73680115 89.69190979]
[153.69807434 88.61483765]
[168.64752197 87.38422394]
[183.58352661 86.00019836]
[198.51954651 84.61617279]
[208.42196655 72.29881287]
[224.14254761 70.67427826]
[236.35452271 80.70638275]
[237.81275940 96.44325256]
[227.65209961 108.54848480]
[211.90069580 109.84025574]
[199.90356445 99.55219269]
[184.96755981 100.93621826]
[170.03153992 102.32023621]
[163.62188721 106.09230042]
[154.77514648 103.57611847]
[139.81387329 104.65319061]
[124.85258484 105.73026276]
[109.89130402 106.80732727]
[123.27983093 113.57102203]
[135.11961365 122.78077698]
[144.96960449 134.09350586]
[152.46286011 147.08776855]
[157.32023621 161.27952576]
[159.36080933 176.14007568]
[158.50852966 191.11584473]
[154.79516602 205.64894104]
[148.35905457 219.19798279]
[139.43992615 231.25822449]
[128.37008667 241.38038635]
[115.56186676 249.18742371]
[101.49243164 254.38847351]
[86.68589020 256.78979492]
[71.69382477 256.30194092]
[57.07472992 252.94309998]
[43.37318802 246.83836365]
[31.09962654 238.21514893]
[20.71125793 227.39471436]
[12.59507561 214.78013611]
[7.05342579 200.84133911]
[4.29274940 186.09757996]
[4.41588736 171.09808350]
[7.41825247 156.40162659]
[13.18799973 142.55569458]
[21.51019287 130.07606506]
[32.07481003 119.42763519]
[44.48829269 111.00710297]
[58.28821182 105.12813568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
