%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCxxxxxxxxxxAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[207.80860901 500.48443604]
[207.80860901 485.48443604]
[207.80860901 470.48443604]
[207.80860901 455.48443604]
[207.80860901 440.48443604]
[207.80860901 425.48443604]
[207.80860901 410.48443604]
[207.80860901 395.48443604]
[207.80860901 380.48443604]
[207.80860901 365.48443604]
[206.09591675 350.58255005]
[202.54115295 336.00985718]
[198.83499146 321.47491455]
[194.97784424 306.97930908]
[190.97009277 292.52462769]
[186.96235657 278.06994629]
[172.14555359 273.71774292]
[162.03434753 261.85235596]
[160.05065918 246.24223328]
[167.00093079 231.96165466]
[159.27685547 219.10325623]
[151.55276489 206.24485779]
[143.82867432 193.38644409]
[136.10459900 180.52804565]
[128.38050842 167.66964722]
[120.65642548 154.81123352]
[116.26123810 152.79682922]
[113.11599731 147.96580505]
[112.89133453 141.25335693]
[105.70882416 128.08477783]
[98.52632141 114.91619110]
[85.74896240 107.05876160]
[70.75626373 106.59072113]
[55.76356888 106.12268066]
[46.36237717 118.46760559]
[31.49084282 122.89672852]
[16.86737251 117.70694733]
[8.11499310 104.89385223]
[8.59916878 89.38433075]
[18.13372612 77.14211273]
[33.05243301 72.87458801]
[47.61874390 78.22269440]
[56.23160934 91.12998199]
[71.22430420 91.59803009]
[86.21700287 92.06607056]
[91.99327850 78.22285461]
[81.11444855 67.89564514]
[70.23562622 57.56843948]
[59.35680008 47.24123764]
[48.47797394 36.91403198]
[34.00951004 41.90624237]
[18.88007736 39.59133148]
[6.56630611 30.50124741]
[-0.10218880 16.72482681]
[0.40696463 1.42778873]
[7.97676659 -11.87471771]
[20.86773109 -20.12587547]
[36.11761093 -21.42962837]
[50.22209167 -15.48638344]
[59.94007111 -3.66185546]
[63.03842926 11.32676601]
[58.80517960 26.03520584]
[69.68400574 36.36241150]
[80.56282806 46.68961716]
[91.44165802 57.01681900]
[102.32048035 67.34402466]
[116.68866730 63.03644180]
[120.09164429 48.42754745]
[123.49462128 33.81865692]
[110.11434937 26.86026955]
[98.88547516 16.79234314]
[90.51384735 4.24775362]
[85.52572632 -9.98493481]
[84.23465729 -25.01104355]
[86.72180176 -39.88602066]
[92.83082581 -53.67480850]
[102.17769623 -65.51063538]
[114.17486572 -74.64949036]
[128.06819153 -80.51689911]
[142.98431396 -82.74402618]
[157.98559570 -81.19087982]
[172.12904358 -75.95508575]
[184.52560425 -67.36577606]
[194.39599609 -55.96287918]
[201.11976624 -42.46318817]
[204.27426147 -27.71530724]
[203.66117859 -12.64630032]
[199.31906128 1.79658055]
[191.52085876 14.70544529]
[180.75677490 25.26883125]
[167.70343018 32.82271576]
[153.18138123 36.89225388]
[138.10351562 37.22163391]
[134.70053101 51.83052826]
[131.29756165 66.43942261]
[111.69490051 107.73368073]
[118.87741089 120.90226746]
[126.05992126 134.07084656]
[133.51483154 147.08715820]
[141.23890686 159.94555664]
[148.96299744 172.80395508]
[156.68708801 185.66236877]
[164.41116333 198.52076721]
[172.13525391 211.37916565]
[179.85934448 224.23756409]
[200.28681946 227.02345276]
[212.87948608 242.86230469]
[227.87217712 242.39425659]
[236.48504639 229.48696899]
[251.05136108 224.13887024]
[265.97006226 228.40638733]
[275.50460815 240.64860535]
[275.98880005 256.15814209]
[267.23641968 268.97122192]
[252.61294556 274.16101074]
[237.74140930 269.73187256]
[228.34022522 257.38696289]
[213.34751892 257.85501099]
[211.59611511 262.69662476]
[208.95458984 267.11599731]
[205.51963806 270.95132446]
[201.41705322 274.06219482]
[205.42478943 288.51687622]
[209.43252563 302.97155762]
[214.77395630 310.46298218]
[213.36993408 317.76873779]
[217.07609558 332.30368042]
[222.26051331 339.90457153]
[220.70481873 347.17956543]
[226.76609802 333.45874023]
[238.42909241 324.02612305]
[253.11407471 320.96810913]
[267.57284546 324.96109009]
[278.60726929 335.12188721]
[283.77661133 349.20300293]
[281.93746948 364.08984375]
[273.49667358 376.48953247]
[260.32122803 383.65942383]
[245.32539368 384.01358032]
[231.82615662 377.47369385]
[222.80860901 365.48443604]
[222.80860901 380.48443604]
[222.80860901 395.48443604]
[222.80860901 410.48443604]
[222.80860901 425.48443604]
[222.80860901 440.48443604]
[222.80860901 455.48443604]
[222.80860901 470.48443604]
[222.80860901 485.48443604]
[222.80860901 500.48443604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 127]
[13 126]
[14 124]
[15 123]
[16 122]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[29 98]
[30 97]
[31 96]
[32 45]
[33 44]
[34 43]
[46 66]
[47 65]
[48 64]
[49 63]
[50 62]
[67 95]
[68 94]
[69 93]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
