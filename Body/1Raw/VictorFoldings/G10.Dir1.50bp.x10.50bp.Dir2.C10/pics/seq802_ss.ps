%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAxxxxxxxxxxGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.63201761 251.19912720]
[2.07956910 266.94396973]
[-11.54900169 272.95324707]
[-20.13314247 285.25418091]
[-28.71728134 297.55508423]
[-37.30142212 309.85598755]
[-45.88556290 322.15692139]
[-54.46969986 334.45782471]
[-56.02215195 350.20269775]
[-69.65071869 356.21194458]
[-62.55089569 369.77111816]
[-62.57716751 385.07659912]
[-69.72350311 398.61132812]
[-82.34772491 407.26510620]
[-97.54887390 409.04934692]
[-111.83384705 403.55404663]
[-121.92005920 392.04202271]
[-125.48976898 377.15859985]
[-121.72268677 362.32394409]
[-111.48445129 350.94686890]
[-97.12775421 345.64181519]
[-81.95163727 347.62780762]
[-81.01318359 332.76281738]
[-66.77061462 325.87368774]
[-58.18647766 313.57278442]
[-49.60233688 301.27185059]
[-41.01819992 288.97094727]
[-32.43405914 276.67004395]
[-23.84991837 264.36911011]
[-22.91146469 249.50410461]
[-8.66889858 242.61499023]
[-32.25738907 221.06175232]
[-51.64562988 195.66381836]
[-66.21789551 167.22779846]
[-75.51139069 136.65673828]
[-79.23097992 104.92152405]
[-77.25852203 73.03001404]
[-69.65667725 41.99502563]
[-83.63463593 36.55290985]
[-97.61259460 31.11079407]
[-111.59055328 25.66867828]
[-125.66959381 20.49367332]
[-139.84460449 15.58765411]
[-154.01962280 10.68163490]
[-168.19462585 5.77561522]
[-180.25752258 15.39279461]
[-195.60722351 16.93885422]
[-209.34568787 9.92045307]
[-217.08903503 -3.42286468]
[-216.36639404 -18.83329391]
[-207.40834045 -31.39342308]
[-193.07336426 -37.09535980]
[-177.93571472 -34.11963654]
[-166.82574463 -23.41579628]
[-163.28862000 -8.39939690]
[-149.11360168 -3.49337769]
[-134.93858337 1.41264164]
[-120.76357269 6.31866121]
[-116.11567688 5.05285501]
[-110.62460327 6.72569847]
[-106.14843750 11.69071865]
[-92.17047882 17.13283348]
[-78.19252014 22.57494926]
[-64.21456146 28.01706505]
[-58.81935883 16.78716850]
[-52.65734100 5.95904589]
[-45.75825119 -4.41502333]
[-38.15540314 -14.28494930]
[-29.88550186 -23.60307693]
[-20.98848343 -32.32441711]
[-11.50729847 -40.40686035]
[-1.48772836 -47.81138611]
[9.02185154 -54.50223541]
[19.97069740 -60.44710922]
[31.30594444 -65.61730194]
[42.97286606 -69.98785400]
[54.91512680 -73.53765869]
[67.07507324 -76.24958038]
[79.39398956 -78.11051941]
[91.81239319 -79.11149597]
[104.27033234 -79.24767303]
[116.70764923 -78.51840210]
[129.06430054 -76.92719269]
[141.28062439 -74.48173523]
[153.29762268 -71.19383240]
[165.05729675 -67.07936096]
[176.50285339 -62.15818787]
[187.57904053 -56.45407104]
[195.44692993 -69.22498322]
[203.31483459 -81.99589539]
[211.06079102 -94.84113312]
[218.68411255 -107.75952911]
[226.30744934 -120.67791748]
[222.12030029 -135.91744995]
[230.00802612 -149.61268616]
[245.29098511 -153.63847351]
[258.90203857 -145.60638428]
[262.76602173 -130.28172302]
[254.59049988 -116.75634003]
[239.22583008 -113.05459595]
[231.60250854 -100.13619995]
[223.97918701 -87.21780396]
[223.28486633 -79.82546234]
[216.08573914 -74.12800598]
[208.21784973 -61.35709000]
[200.34994507 -48.58617783]
[207.92544556 -43.17842865]
[215.21009827 -37.38484955]
[222.18429565 -31.22104454]
[228.82922363 -24.70362663]
[235.12699890 -17.85016060]
[241.06062317 -10.67911339]
[246.61412048 -3.20981026]
[251.77252197 4.53762150]
[256.52194214 12.54230404]
[260.84954834 20.78266525]
[264.74371338 29.23650169]
[268.19393921 37.88102722]
[271.19088745 46.69295502]
[273.72653198 55.64852905]
[275.79403687 64.72362518]
[277.38778687 73.89378357]
[278.50354004 83.13428497]
[279.13824463 92.42024231]
[279.29022217 101.72662354]
[278.95904541 111.02835083]
[278.14559937 120.30036163]
[276.85211182 129.51766968]
[275.08203125 138.65542603]
[272.84014893 147.68902588]
[270.13250732 156.59410095]
[266.96640015 165.34667969]
[263.35034180 173.92315674]
[259.29406738 182.30043030]
[254.80856323 190.45591736]
[249.90586853 198.36764526]
[244.59921265 206.01429749]
[238.90289307 213.37525940]
[232.83227539 220.43069458]
[226.40368652 227.16160583]
[219.63446045 233.54983521]
[212.54286194 239.57818604]
[205.14796448 245.23039246]
[197.46974182 250.49124146]
[189.52883911 255.34655762]
[181.34667969 259.78323364]
[172.94531250 263.78933716]
[164.34736633 267.35406494]
[155.57601929 270.46780396]
[146.65492249 273.12216187]
[137.60807800 275.30999756]
[128.45989990 277.02542114]
[119.23503113 278.26379395]
[109.95832062 279.02178955]
[100.65478516 279.29733276]
[91.34947205 279.08972168]
[82.06748199 278.39953613]
[72.83380890 277.22854614]
[63.67334366 275.58001709]
[54.61077118 273.45831299]
[45.67051315 270.86917114]
[36.87665939 267.81958008]
[28.25291252 264.31774902]
[19.82250786 260.37310791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 22]
[38 64]
[39 63]
[40 62]
[41 61]
[42 58]
[43 57]
[44 56]
[45 55]
[88 106]
[89 105]
[90 104]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
