%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUxxxxxxxxxxCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 287.31802368]
[92.50000000 272.31802368]
[92.50000000 257.31802368]
[92.50000000 242.31802368]
[92.50000000 227.31802368]
[92.50000000 212.31802368]
[92.50000000 197.31802368]
[92.50000000 182.31802368]
[92.50000000 167.31802368]
[92.50000000 152.31802368]
[67.86292267 152.14590454]
[42.85059357 139.82003784]
[31.97176933 150.14723206]
[21.09294510 160.47444153]
[10.21411991 170.80165100]
[-0.66470569 181.12886047]
[-0.82507473 196.93232727]
[-12.17153358 207.93385315]
[-27.97243118 207.60639954]
[-38.85337067 196.14425659]
[-38.35889053 180.34771729]
[-26.78235054 169.58856201]
[-10.99191093 170.25003052]
[-0.11308537 159.92282104]
[10.76573944 149.59561157]
[21.64456558 139.26841736]
[32.52339172 128.94120789]
[30.29498291 121.77990723]
[15.97238541 126.23672485]
[1.64978778 130.69354248]
[-12.67288303 135.15011597]
[-17.12922287 120.82736969]
[-2.80702782 116.37094116]
[11.51556969 111.91413116]
[25.83816719 107.45731354]
[23.60975838 100.29601288]
[8.79200077 97.96491241]
[-6.02575731 95.63380432]
[-18.65288925 105.13806915]
[-34.29026031 102.84717560]
[-43.66049194 90.12026215]
[-41.20439529 74.50798798]
[-28.37912941 65.27283478]
[-12.79369450 67.89385986]
[-3.69465327 80.81604767]
[11.12310505 83.14714813]
[25.94086266 85.47825623]
[29.60041618 78.93167877]
[16.50726128 71.61257172]
[3.41422820 64.29325104]
[10.73376846 51.20033646]
[23.82636642 58.51941681]
[36.91952133 65.83852386]
[40.57907486 59.29194641]
[30.83142281 47.89092636]
[21.08377075 36.48990631]
[5.45047379 31.53691673]
[2.18796515 15.46557331]
[14.65243340 4.80869484]
[30.02150154 10.52916336]
[32.48479080 26.74225235]
[42.23244476 38.14327240]
[51.98009491 49.54429245]
[84.61911011 37.82041550]
[115.91098785 43.75389099]
[137.68722534 62.94466400]
[149.76721191 54.05231476]
[161.84721375 45.15996552]
[173.92720032 36.26761627]
[186.00718689 27.37526512]
[178.48927307 14.37741470]
[172.44686890 0.63140845]
[167.95335388 -13.69589043]
[165.06326294 -28.43056297]
[163.81167603 -43.39374161]
[164.21379089 -58.40378952]
[166.26470947 -73.27849579]
[169.93955994 -87.83729553]
[175.19372559 -101.90345764]
[181.96342468 -115.30623627]
[190.16647339 -127.88292694]
[199.70329285 -139.48086548]
[210.45811462 -149.95927429]
[222.30039978 -159.19093323]
[235.08638000 -167.06378174]
[248.66085815 -173.48226929]
[262.85903931 -178.36845398]
[277.50857544 -181.66305542]
[292.43164062 -183.32604980]
[307.44705200 -183.33726501]
[322.37258911 -181.69656372]
[337.02700806 -178.42385864]
[351.23248291 -173.55886841]
[364.81652832 -167.16067505]
[377.61425781 -159.30693054]
[389.47030640 -150.09297180]
[400.24078369 -139.63066101]
[409.79492188 -128.04698181]
[418.01675415 -115.48255157]
[424.80645752 -102.08989716]
[430.08163452 -88.03160095]
[433.77822876 -73.47830200]
[435.85137939 -58.60667801]
[436.27590942 -43.59725189]
[435.04666138 -28.63221931]
[432.17858887 -13.89324570]
[427.70648193 0.44074994]
[421.68463135 14.19576740]
[414.18612671 27.20483398]
[405.30203247 39.31002808]
[395.14013672 50.36441040]
[383.82385254 60.23378372]
[371.49050903 68.79834747]
[358.28982544 75.95413208]
[344.38204956 81.61428070]
[329.93603516 85.71007538]
[315.12710571 88.19180298]
[300.13504028 89.02932739]
[285.14184570 88.21249390]
[270.32949829 85.75122070]
[255.87785339 81.67536926]
[241.96228027 76.03442383]
[228.75173950 68.89686584]
[216.40658569 60.34933853]
[205.07666016 50.49559402]
[194.89953613 39.45525360]
[182.81954956 48.34760284]
[170.73956299 57.23995209]
[158.65956116 66.13230133]
[146.57957458 75.02465057]
[150.20994568 83.49585724]
[152.31355286 92.46891022]
[152.82644653 101.67096710]
[151.73301697 110.82221222]
[149.06652832 119.64438629]
[144.90803528 127.86921692]
[139.38401794 135.24662781]
[132.66242981 141.55226135]
[124.94766235 146.59440613]
[116.47430420 150.21974182]
[107.50000000 152.31802368]
[107.50000000 167.31802368]
[107.50000000 182.31802368]
[107.50000000 197.31802368]
[107.50000000 212.31802368]
[107.50000000 227.31802368]
[107.50000000 242.31802368]
[107.50000000 257.31802368]
[107.50000000 272.31802368]
[107.50000000 287.31802368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[36 47]
[37 46]
[38 45]
[54 63]
[55 62]
[56 61]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
