%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAxxxxxxxxxxCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.69679260 267.35180664]
[101.69679260 252.35179138]
[101.69679260 237.35179138]
[101.69679260 222.35179138]
[101.69679260 207.35179138]
[101.69679260 192.35179138]
[101.69679260 177.35179138]
[101.69679260 162.35179138]
[101.69679260 147.35179138]
[101.69679260 132.35179138]
[77.44924164 116.89830780]
[77.38523102 92.07575226]
[65.49285126 82.93401337]
[53.50601959 73.91648865]
[41.42603302 65.02413940]
[29.34604263 56.13178635]
[17.26605415 47.23943710]
[5.18606663 38.34708786]
[-4.74535847 49.60161591]
[-15.63260555 59.93435287]
[-27.39046478 69.26443481]
[-39.92691422 77.51882935]
[-53.14383316 84.63294220]
[-66.93778992 90.55109406]
[-81.20081329 95.22695923]
[-95.82128143 98.62395477]
[-110.68476105 100.71547699]
[-125.67493439 101.48517609]
[-140.67446899 100.92700958]
[-155.56597900 99.04536438]
[-170.23291016 95.85494995]
[-184.56047058 91.38074493]
[-198.43653870 85.65776062]
[-211.75250244 78.73079681]
[-224.40414429 70.65406799]
[-236.29243469 61.49077225]
[-247.32435608 51.31264114]
[-257.41354370 40.19932938]
[-266.48107910 28.23781013]
[-274.45593262 15.52170753]
[-281.27569580 2.15053988]
[-286.88705444 -11.77104187]
[-291.24603271 -26.13408089]
[-294.31854248 -40.82616425]
[-296.08053589 -55.73230743]
[-296.51818848 -70.73583984]
[-295.62811279 -85.71934509]
[-293.41729736 -100.56555176]
[-289.90298462 -115.15826416]
[-285.11270142 -129.38327026]
[-279.08395386 -143.12924194]
[-271.86389160 -156.28860474]
[-263.50909424 -168.75834656]
[-254.08486938 -180.44088745]
[-243.66500854 -191.24479675]
[-232.33108521 -201.08549500]
[-220.17176819 -209.88600159]
[-207.28224182 -217.57740784]
[-193.76338196 -224.09951782]
[-179.72099304 -229.40130615]
[-165.26498413 -233.44126892]
[-150.50848389 -236.18778992]
[-135.56698608 -237.61936951]
[-120.55744171 -237.72479248]
[-105.59731293 -236.50325012]
[-90.80368805 -233.96430969]
[-76.29234314 -230.12782288]
[-62.17686462 -225.02381897]
[-48.56771851 -218.69224548]
[-35.57141495 -211.18267822]
[-23.28967667 -202.55384827]
[-11.81862068 -192.87333679]
[-1.24802744 -182.21687317]
[8.33937263 -170.66786194]
[16.86854172 -158.31672668]
[24.27272987 -145.26008606]
[30.49398613 -131.60015869]
[35.48361969 -117.44384766]
[39.20257950 -102.90194702]
[41.62176132 -88.08826447]
[42.72222519 -73.11874390]
[42.49536514 -58.11053848]
[40.94295502 -43.18111801]
[38.07714081 -28.44732094]
[33.92035675 -14.02446461]
[28.50513268 -0.02542990]
[21.87385368 13.44022083]
[14.07841587 26.26709938]
[26.15840530 35.15944672]
[38.23839188 44.05179596]
[50.31838226 52.94414902]
[62.39836884 61.83649826]
[69.69679260 63.27825928]
[74.63459015 71.04163361]
[86.52696991 80.18337250]
[98.83695221 73.95470428]
[113.70367432 75.37686920]
[126.42658997 85.20156097]
[132.36769104 101.36016846]
[147.36688232 101.20413208]
[158.38607788 90.19435883]
[173.59960938 90.24977875]
[184.02783203 100.82274628]
[199.02702332 100.66670990]
[214.02621460 100.51067352]
[229.02540588 100.35463715]
[234.99417114 97.27546692]
[240.74574280 97.66362000]
[244.64866638 100.51716614]
[259.64135742 100.98520660]
[274.63406372 101.45324707]
[287.26409912 91.56076050]
[302.83917236 95.40750122]
[309.41137695 110.04257965]
[301.93908691 124.23922729]
[286.15441895 127.10697937]
[274.16601562 116.44594574]
[259.17333984 115.97790527]
[244.18063354 115.50986481]
[229.18144226 115.35382843]
[214.18225098 115.50986481]
[199.18305969 115.66590118]
[184.18386841 115.82193756]
[173.97785950 126.60955811]
[158.76876831 126.98146820]
[147.52291870 116.20331573]
[132.52372742 116.35935211]
[145.76156616 123.41341400]
[158.99940491 130.46746826]
[173.83195496 132.70248413]
[185.87445068 141.64553833]
[192.30186462 155.19871521]
[191.60641479 170.18257141]
[183.95123291 183.08212280]
[171.13214111 190.87126160]
[156.15632629 191.72276306]
[142.53694153 185.43687439]
[133.46891785 173.48818970]
[131.07955933 158.67927551]
[123.88817596 145.51553345]
[116.69679260 132.35179138]
[116.69679260 147.35179138]
[116.69679260 162.35179138]
[116.69679260 177.35179138]
[116.69679260 192.35179138]
[116.69679260 207.35179138]
[116.69679260 222.35179138]
[116.69679260 237.35179138]
[116.69679260 252.35179138]
[116.69679260 267.35180664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 95]
[13 94]
[14 92]
[15 91]
[16 90]
[17 89]
[18 88]
[99 127]
[100 126]
[103 123]
[104 122]
[105 121]
[106 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
