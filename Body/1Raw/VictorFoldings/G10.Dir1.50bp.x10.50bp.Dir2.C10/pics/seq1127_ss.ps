%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.12042999 272.23165894]
[96.12042999 257.23165894]
[96.12042999 242.23164368]
[96.12042999 227.23164368]
[96.12042999 212.23164368]
[96.12042999 197.23164368]
[96.12042999 182.23164368]
[96.12042999 167.23164368]
[96.12042999 152.23164368]
[96.12042999 137.23164368]
[84.37830353 131.97137451]
[75.67926788 123.37751770]
[70.82101440 112.85433197]
[70.02657318 101.92941284]
[72.96199799 92.03770447]
[78.82942200 84.33404541]
[69.81188965 72.34721375]
[60.79436111 60.36038208]
[45.59944153 62.11016464]
[31.66086578 56.05931091]
[22.68212700 43.92470551]
[20.99409103 29.02482414]
[26.95060539 15.37251472]
[17.93307495 3.38568211]
[8.91554451 -8.60115051]
[-0.10198487 -20.58798218]
[-9.11951447 -32.57481384]
[-16.83110809 -37.59310150]
[-18.19686890 -44.90612793]
[-26.96307564 -57.07796478]
[-35.72928238 -69.24980164]
[-51.13278580 -69.44535828]
[-63.32505798 -78.56686401]
[-67.75598907 -92.94847870]
[-62.92660904 -107.01316071]
[-71.69281769 -119.18499756]
[-80.45902252 -131.35682678]
[-89.22522736 -143.52867126]
[-97.99143982 -155.70050049]
[-109.49324036 -165.32902527]
[-123.01743317 -171.81719971]
[-136.54162598 -178.30535889]
[-150.06581116 -184.79353333]
[-163.58999634 -191.28169250]
[-177.11419678 -197.76985168]
[-190.63838196 -204.25802612]
[-206.93969727 -202.46937561]
[-216.41986084 -215.85064697]
[-209.32650757 -230.63632202]
[-192.95664978 -231.61618042]
[-184.15022278 -217.78221130]
[-170.62602234 -211.29405212]
[-157.10183716 -204.80587769]
[-143.57765198 -198.31771851]
[-130.05345154 -191.82954407]
[-116.52926636 -185.34138489]
[-103.00507355 -178.85322571]
[-111.19531250 -191.41984558]
[-116.20449829 -205.55873108]
[-117.75231171 -220.47865295]
[-115.75213623 -235.34469604]
[-110.31589508 -249.32495117]
[-101.74781799 -261.63705444]
[-90.52737427 -271.59204102]
[-77.28246307 -278.63278198]
[-62.75427628 -282.36532593]
[-47.75582504 -282.58078003]
[-33.12642670 -279.26705933]
[-19.68475151 -272.60961914]
[-8.18300438 -262.98104858]
[0.73517048 -250.92010498]
[6.57070732 -237.10176086]
[8.99704647 -222.29930115]
[7.87840748 -207.34106445]
[3.27739120 -193.06413269]
[-4.54852724 -180.26745605]
[-15.16140556 -169.66714478]
[-27.96734047 -161.85636902]
[-42.24970245 -157.27226257]
[-57.20924759 -156.17132568]
[-72.00882721 -158.61518860]
[-85.81960297 -164.46670532]
[-77.05339050 -152.29487610]
[-68.28718567 -140.12303162]
[-59.52098083 -127.95120239]
[-50.75477219 -115.77936554]
[-35.88457108 -115.90240479]
[-23.64855576 -107.14204407]
[-18.86122704 -92.68746948]
[-23.55744553 -78.01600647]
[-14.79123878 -65.84416962]
[-6.02503157 -53.67233276]
[2.86731791 -41.59234619]
[11.88484764 -29.60551262]
[20.90237808 -17.61868095]
[29.91990662 -5.63184786]
[38.93743896 6.35498476]
[53.70587158 4.41619873]
[67.55398560 10.16822338]
[76.72425079 22.15874481]
[78.67432404 37.22838211]
[72.78119659 51.34285355]
[81.79872131 63.32968521]
[90.81625366 75.31652069]
[119.40311432 74.69849396]
[137.26860046 103.50697327]
[151.97654724 106.45245361]
[163.16426086 99.94944000]
[175.38638306 102.74919891]
[182.17727661 112.80857086]
[196.82078552 116.05940247]
[211.46427917 119.31022644]
[226.10778809 122.56105042]
[240.75128174 125.81187439]
[255.39479065 129.06269836]
[268.59014893 120.36456299]
[284.05419922 123.62638092]
[292.61233521 136.91297913]
[289.18719482 152.34165955]
[275.81085205 160.75885010]
[260.41925049 157.17079163]
[252.14396667 143.70620728]
[237.50045776 140.45538330]
[222.85696411 137.20455933]
[208.21345520 133.95372009]
[193.56996155 130.70289612]
[178.92645264 127.45207214]
[162.53311157 133.63739014]
[149.03106689 121.16041565]
[134.32310486 118.21493530]
[128.52244568 122.96911621]
[140.01774597 132.60539246]
[154.68272400 135.75791931]
[163.29151917 148.04159546]
[161.25068665 162.90211487]
[149.64913940 172.41023254]
[134.67723083 171.49264526]
[124.32363129 160.63894653]
[124.11248016 145.64120483]
[116.92109680 132.47747803]
[111.12042999 137.23164368]
[111.12042999 152.23164368]
[111.12042999 167.23164368]
[111.12042999 182.23164368]
[111.12042999 197.23164368]
[111.12042999 212.23164368]
[111.12042999 227.23164368]
[111.12042999 242.23164368]
[111.12042999 257.23165894]
[111.12042999 272.23165894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 104]
[17 103]
[18 102]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[29 92]
[30 91]
[31 90]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[106 130]
[107 129]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
