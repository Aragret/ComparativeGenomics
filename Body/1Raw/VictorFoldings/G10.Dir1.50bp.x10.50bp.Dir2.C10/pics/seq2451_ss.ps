%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUxxxxxxxxxxGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.66610718 453.96441650]
[80.66610718 438.96441650]
[80.66610718 423.96441650]
[80.66610718 408.96441650]
[80.66610718 393.96441650]
[80.66610718 378.96441650]
[80.66610718 363.96441650]
[80.66610718 348.96441650]
[80.66610718 333.96441650]
[80.66610718 318.96441650]
[67.46489716 316.46987915]
[54.91016388 311.67636108]
[43.39899063 304.73400879]
[33.29570389 295.86093140]
[24.92036057 285.33642578]
[18.53859901 273.49203491]
[14.35321903 260.70126343]
[12.49773693 247.36775208]
[13.03212643 233.91247559]
[15.94087887 220.76052856]
[21.13345337 208.32766724]
[28.44709015 197.00714111]
[37.65192032 187.15730286]
[48.45817566 179.09022522]
[60.52532959 173.06184387]
[73.47280884 169.26380920]
[86.89201355 167.81742859]
[88.12262726 152.86799622]
[89.35324097 137.91854858]
[81.56652832 134.80484009]
[74.61556244 130.11312866]
[68.81549835 124.05612946]
[64.42929840 116.90844727]
[61.65583038 108.99416351]
[60.62083435 100.67208862]
[45.84872055 98.06736755]
[31.07660294 95.46264648]
[16.30448532 92.85792542]
[1.53236985 90.25319672]
[-11.26836014 99.52233124]
[-26.86069298 96.94265747]
[-35.99397278 84.04463959]
[-33.24958420 68.48045349]
[-20.25572968 59.48405075]
[-4.72142887 62.39283752]
[4.13709259 75.48108673]
[18.90920830 78.08580780]
[33.68132401 80.69052887]
[48.45344162 83.29524994]
[63.22555923 85.89997101]
[68.11512756 76.88019562]
[75.16844940 69.42935181]
[83.90687561 64.05307007]
[93.73739624 61.11619568]
[103.99290466 60.81802750]
[113.97744751 63.17879486]
[121.87393188 50.42553711]
[129.77041626 37.67227936]
[137.66690063 24.91902161]
[127.75611877 16.55330086]
[123.50053406 1.31744492]
[128.96955872 -16.63450813]
[132.62826538 -31.18146324]
[136.28697205 -45.72841644]
[139.94567871 -60.27537155]
[143.60438538 -74.82232666]
[147.26309204 -89.36927795]
[141.79740906 -106.92368317]
[154.42869568 -119.06843567]
[157.78796387 -133.68743896]
[161.14721680 -148.30645752]
[147.88616943 -155.52082825]
[137.06410217 -166.04627991]
[129.48406982 -179.10177612]
[125.70857239 -193.71847534]
[126.01776886 -208.81175232]
[130.38873291 -223.26158142]
[138.49708557 -235.99566650]
[149.74114990 -246.06907654]
[163.28652954 -252.73429871]
[178.12808228 -255.49670410]
[193.16445923 -254.15133667]
[207.27986145 -248.79800415]
[219.42683411 -239.83398438]
[228.70397949 -227.92443848]
[234.42288208 -213.95317078]
[236.15916443 -198.95689392]
[233.78398132 -184.04847717]
[227.47357178 -170.33419800]
[217.69622803 -158.83175659]
[205.17749023 -150.39469910]
[190.84634399 -145.64913940]
[175.76622009 -144.94718933]
[172.40696716 -130.32818604]
[169.04769897 -115.70917511]
[175.21081543 -105.25554657]
[172.48725891 -93.01816559]
[161.81004333 -85.71057129]
[158.15133667 -71.16362000]
[154.49263000 -56.61666489]
[150.83392334 -42.06970978]
[147.17521667 -27.52275658]
[143.51651001 -12.97580338]
[148.27818298 -7.18127871]
[163.07626343 -9.63423634]
[157.80152893 4.40776968]
[162.56318665 10.20229340]
[177.54342651 9.43263340]
[192.52368164 8.66297340]
[207.50392151 7.89331341]
[222.48416138 7.12365341]
[235.94508362 -2.24307632]
[250.67027283 4.97500086]
[251.51171875 21.35254669]
[237.60382080 30.04174614]
[223.25381470 22.10389519]
[208.27357483 22.87355423]
[193.29333496 23.64321518]
[178.31309509 24.41287422]
[163.33285522 25.18253517]
[150.42015076 32.81550598]
[142.52366638 45.56876373]
[134.62718201 58.32201767]
[126.73070526 71.07527924]
[138.12847900 90.13141632]
[137.40696716 112.32432556]
[124.79549408 130.59989929]
[104.30267334 139.14916992]
[103.07205963 154.09860229]
[101.84144592 169.04803467]
[117.81076050 173.86201477]
[132.33840942 182.04316711]
[144.72488403 193.19439697]
[154.37445068 206.77571106]
[160.82377625 222.13027954]
[163.76425171 238.51631165]
[163.05673218 255.14274597]
[158.73806763 271.20761108]
[151.01927185 285.93655396]
[140.27513123 298.62030029]
[127.02610016 308.64865112]
[111.91300964 315.54000854]
[95.66610718 318.96441650]
[95.66610718 333.96441650]
[95.66610718 348.96441650]
[95.66610718 363.96441650]
[95.66610718 378.96441650]
[95.66610718 393.96441650]
[95.66610718 408.96441650]
[95.66610718 423.96441650]
[95.66610718 438.96441650]
[95.66610718 453.96441650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[27 130]
[28 129]
[29 128]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[56 124]
[57 123]
[58 122]
[59 121]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[69 95]
[70 94]
[71 93]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
