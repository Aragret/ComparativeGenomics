%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUxxxxxxxxxxACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.00267792 281.47927856]
[116.00267792 266.47927856]
[116.00267792 251.47926331]
[116.00267792 236.47926331]
[116.00267792 221.47926331]
[116.00267792 206.47926331]
[116.00267792 191.47926331]
[116.00267792 176.47926331]
[116.00267792 161.47926331]
[116.00267792 146.47926331]
[103.12722778 146.22642517]
[91.50614166 142.67001343]
[81.91989899 136.44392395]
[74.90768433 128.34713745]
[62.93742752 137.38665771]
[50.96716690 146.42616272]
[38.99691010 155.46568298]
[27.02665138 164.50520325]
[15.05639267 173.54472351]
[13.12143326 189.23011780]
[0.61073911 198.88714600]
[-15.05331707 196.78645325]
[-24.57752991 184.17436218]
[-22.31134987 168.53338623]
[-9.59926510 159.14305115]
[6.01687288 161.57446289]
[17.98713112 152.53495789]
[29.95738983 143.49543762]
[41.92764664 134.45591736]
[53.89790726 125.41638947]
[65.86816406 116.37686920]
[60.81851959 111.22678375]
[56.60851669 104.82514191]
[41.67250443 103.44111633]
[26.73649216 102.05709076]
[17.92813683 114.63916016]
[4.00206709 121.11682129]
[-11.29567337 119.74762726]
[-23.85007095 110.89987946]
[-30.28405380 96.95357513]
[-28.86691284 81.66019440]
[-19.97985458 69.13359833]
[-6.01345015 62.74335861]
[9.27540684 64.20842743]
[21.77408981 73.13471222]
[28.12051773 87.12107849]
[43.05653000 88.50510406]
[57.99254227 89.88912964]
[63.98083878 76.13629913]
[52.79254150 66.14520264]
[41.60424423 56.15410233]
[30.41594887 46.16300583]
[19.22765350 36.17190933]
[3.19348288 35.63809967]
[-6.27034473 22.68373871]
[-1.90399158 7.24629927]
[12.94305038 1.16806674]
[26.88140106 9.11174011]
[29.21875000 24.98361397]
[40.40704727 34.97470856]
[51.59534454 44.96580887]
[62.78363800 54.95690536]
[73.97193909 64.94799805]
[94.50115967 55.30353546]
[117.81092834 57.14595795]
[137.73048401 70.68149567]
[148.64620972 92.93213654]
[158.28802490 81.44147491]
[167.92982483 69.95080566]
[177.57164001 58.46014023]
[187.21345520 46.96947479]
[177.12559509 35.83624268]
[168.64772034 23.43303871]
[161.93778992 9.99092484]
[157.12077332 -4.23968267]
[154.28643799 -18.99367523]
[153.48756409 -33.99619293]
[154.73905945 -48.96775055]
[158.01757812 -63.62943649]
[163.26206970 -77.70811462]
[170.37481689 -90.94149780]
[179.22331238 -103.08306885]
[189.64273071 -113.90663910]
[201.43894958 -123.21055603]
[214.39222717 -130.82150269]
[228.26123047 -136.59770203]
[242.78759766 -140.43153381]
[257.70071411 -142.25157166]
[272.72277832 -142.02392578]
[287.57388306 -139.75282288]
[301.97741699 -135.48057556]
[315.66503906 -129.28677368]
[328.38174438 -121.28681183]
[339.89059448 -111.62971497]
[349.97726440 -100.49539948]
[358.45379639 -88.09127808]
[365.16229248 -74.64843750]
[369.97775269 -60.41730499]
[372.81048584 -45.66300583]
[373.60772705 -30.66040230]
[372.35464478 -15.68898010]
[369.07452393 -1.02764952]
[363.82852173 13.05045795]
[356.71432495 26.28307724]
[347.86450195 38.42369080]
[337.44390869 49.24612808]
[325.64669800 58.54877090]
[312.69259644 66.15831757]
[298.82296753 71.93300629]
[284.29617310 75.76526642]
[269.38287354 77.58369446]
[254.36083984 77.35441589]
[239.50996399 75.08171082]
[225.10688782 70.80790710]
[211.41995239 64.61262512]
[198.70413208 56.61128616]
[189.06231689 68.10195160]
[179.42050171 79.59262085]
[169.77868652 91.08329010]
[160.13687134 102.57395172]
[163.19526672 117.25885010]
[176.62271118 123.94492340]
[190.05017090 130.63099670]
[205.65728760 126.91651154]
[218.20297241 136.91577148]
[218.06324768 152.95822144]
[205.34530640 162.73745728]
[189.80525208 158.75167847]
[183.36408997 144.05845642]
[169.93664551 137.37237549]
[156.50918579 130.68629456]
[150.13256836 134.63453674]
[158.71078491 146.93959045]
[167.28900146 159.24462891]
[175.86721802 171.54968262]
[185.84622192 182.74876404]
[179.52554321 196.35203552]
[164.53100586 195.94732666]
[158.95346069 182.02223206]
[151.76206970 168.85850525]
[144.57069397 155.69476318]
[137.37930298 142.53102112]
[131.00267029 146.47926331]
[131.00267029 161.47926331]
[131.00267029 176.47926331]
[131.00267029 191.47926331]
[131.00267029 206.47926331]
[131.00267029 221.47926331]
[131.00267029 236.47926331]
[131.00267029 251.47926331]
[131.00267029 266.47927856]
[131.00267029 281.47927856]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[33 48]
[34 47]
[35 46]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[67 120]
[68 119]
[69 118]
[70 117]
[71 116]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
