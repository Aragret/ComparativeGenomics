%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGxxxxxxxxxxCUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.86533356 607.41485596]
[119.86533356 592.41485596]
[119.86533356 577.41485596]
[119.86533356 562.41485596]
[119.86533356 547.41485596]
[119.86533356 532.41485596]
[119.86533356 517.41485596]
[119.86533356 502.41488647]
[119.86533356 487.41488647]
[119.86533356 472.41488647]
[104.04306030 469.24981689]
[89.19963074 462.90908813]
[75.96524811 453.65960693]
[64.90228271 441.89172363]
[56.48136520 428.10293579]
[51.06138611 412.87673950]
[48.87418747 396.85803223]
[50.01463318 380.72567749]
[54.43652725 365.16384888]
[61.95446014 350.83294678]
[72.25157928 338.34158325]
[84.89296722 328.22079468]
[99.34397125 320.90133667]
[114.99285126 316.69549561]
[114.05722809 301.72470093]
[100.99329376 291.17996216]
[99.53804016 274.11636353]
[111.07255554 261.00558472]
[109.82568359 246.05751038]
[108.57881165 231.10942078]
[107.02123260 216.19050598]
[105.15361786 201.30722046]
[103.28600311 186.42395020]
[101.41838837 171.54066467]
[99.55077362 156.65739441]
[97.68316650 141.77410889]
[83.28078461 138.35246277]
[70.97146606 130.12951660]
[62.29619980 118.13469696]
[58.34102631 103.86960602]
[59.60109711 89.12008667]
[65.91866302 75.73261261]
[76.50283051 65.38314056]
[70.43981171 51.66308975]
[64.37680054 37.94303513]
[55.23506927 26.05065727]
[43.53544235 16.66349411]
[31.83582115 7.27633286]
[20.13619614 -2.11082911]
[8.43657303 -11.49799061]
[-3.26305032 -20.88515282]
[-19.30305862 -20.57263184]
[-29.43688583 -33.00988007]
[-25.89072609 -48.65610123]
[-11.38488960 -55.50885773]
[2.95298648 -48.31129837]
[6.12411118 -32.58477783]
[17.82373428 -23.19761467]
[29.52335930 -13.81045246]
[41.22298050 -4.42329073]
[52.92260742 4.96387100]
[64.62223053 14.35103226]
[71.35021210 11.03678322]
[84.80617523 4.40828466]
[91.53415680 1.09403551]
[91.22210693 -13.90271854]
[90.91004944 -28.89947128]
[90.59799194 -43.89622498]
[90.28593445 -58.89297867]
[76.56020355 -65.66518402]
[67.56324768 -78.04716492]
[65.36250305 -93.19362640]
[70.46369171 -107.62402344]
[81.69459534 -118.02236176]
[96.47442627 -121.99917603]
[111.40689850 -118.64062500]
[123.06063843 -108.71847534]
[128.75769043 -94.51277161]
[127.18892670 -79.28787231]
[118.71482849 -66.54235077]
[105.28269196 -59.20503616]
[105.59474182 -44.20828247]
[105.90679932 -29.21152878]
[106.21885681 -14.21477413]
[106.53091431 0.78197932]
[78.09685516 31.88002205]
[84.15986633 45.60007477]
[90.22288513 59.32012939]
[109.49165344 59.25257874]
[126.74713135 67.82804871]
[138.24893188 58.19952011]
[149.64996338 48.45186615]
[160.94895935 38.58614349]
[163.46315002 22.74131966]
[177.48919678 14.95355797]
[192.26754761 21.19696045]
[196.46150208 36.68212509]
[186.85380554 49.53015900]
[170.81468201 49.88515091]
[159.51568604 59.75087357]
[156.52645874 66.56337738]
[147.87747192 69.70132446]
[136.37565613 79.32984924]
[140.83297729 90.88344574]
[141.71299744 103.23573303]
[138.93859863 115.30454254]
[132.75286865 126.03254700]
[123.69771576 134.47987366]
[112.56644440 139.90649414]
[114.43405914 154.78977966]
[116.30166626 169.67304993]
[118.16928101 184.55633545]
[120.03689575 199.43962097]
[121.90451050 214.32289124]
[125.64505768 219.90104675]
[125.91614532 225.65933228]
[123.52689362 229.86254883]
[124.77377319 244.81063843]
[126.02064514 259.75872803]
[137.26451111 267.24423218]
[142.05473328 279.66525269]
[138.84384155 292.38394165]
[129.02801514 300.78906250]
[129.96363831 315.75985718]
[143.78654480 317.47058105]
[157.08779907 321.59027100]
[169.45114136 327.98861694]
[180.48991394 336.46405029]
[189.85914612 346.75006104]
[197.26629639 358.52349854]
[202.48048401 371.41491699]
[205.33958435 385.01998901]
[205.75531006 398.91229248]
[203.71598816 412.65661621]
[199.28677368 425.82263184]
[192.60765076 437.99832153]
[183.88900757 448.80294800]
[173.40496826 457.89889526]
[161.48478699 465.00219727]
[148.50253296 469.89147949]
[134.86534119 472.41488647]
[134.86534119 487.41488647]
[134.86534119 502.41488647]
[134.86534119 517.41485596]
[134.86534119 532.41485596]
[134.86534119 547.41485596]
[134.86534119 562.41485596]
[134.86534119 577.41485596]
[134.86534119 592.41485596]
[134.86534119 607.41485596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 124]
[25 123]
[28 119]
[29 118]
[30 117]
[31 114]
[32 113]
[33 112]
[34 111]
[35 110]
[36 109]
[43 88]
[44 87]
[45 86]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[90 103]
[91 102]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
