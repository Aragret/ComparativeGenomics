%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.32229614]
[92.50000000 241.32231140]
[92.50000000 226.32231140]
[92.50000000 211.32231140]
[92.50000000 196.32231140]
[92.50000000 181.32231140]
[92.50000000 166.32231140]
[92.50000000 151.32231140]
[92.50000000 136.32231140]
[92.50000000 121.32231140]
[78.84375763 115.11690521]
[67.54475403 124.98262787]
[56.24575043 134.84834290]
[44.94674301 144.71406555]
[33.64773941 154.57980347]
[36.69014740 169.63433838]
[31.78246689 184.18804932]
[20.24484062 194.32603455]
[5.18083334 197.32122803]
[-9.35741425 192.36796570]
[-19.45918655 180.79861450]
[-22.40715599 165.72529602]
[-17.40833473 151.20263672]
[-5.80738163 141.13717651]
[9.27510643 138.23648071]
[23.78201675 143.28079224]
[35.08102036 133.41506958]
[46.38002777 123.54934692]
[57.67903137 113.68362427]
[68.97803497 103.81790161]
[68.27688599 96.35074615]
[53.63119507 99.59169769]
[39.30441284 104.03504944]
[29.79965591 92.43075562]
[36.97795868 79.25988007]
[51.88157272 80.95850372]
[66.87458038 81.41643524]
[66.17343140 73.94928741]
[53.23537445 66.35937500]
[40.29731750 58.76946640]
[27.35926056 51.17955780]
[14.42120457 43.58964920]
[1.48314869 35.99974060]
[-11.45490742 28.40983391]
[-24.39296341 20.81992531]
[-37.33102036 13.23001766]
[-50.26907349 5.64010906]
[-65.49773407 9.86662865]
[-79.21330261 2.01432562]
[-83.27857971 -13.25816822]
[-75.28170776 -26.88995361]
[-59.96708679 -30.79353333]
[-46.42061234 -22.65298271]
[-42.67916870 -7.29794693]
[-29.74111176 0.29196131]
[-16.80305481 7.88186979]
[-3.86499906 15.47177792]
[9.07305717 23.06168556]
[22.01111221 30.65159416]
[34.94916916 38.24150467]
[47.88722610 45.83140945]
[60.82527924 53.42131805]
[73.76333618 61.01122665]
[99.90441895 70.22533417]
[106.94239044 89.53894043]
[118.24139404 79.67321777]
[129.54039001 69.80749512]
[140.83940125 59.94177628]
[152.13841248 50.07605362]
[163.43740845 40.21032715]
[157.34136963 28.68317413]
[153.81909180 16.13531685]
[153.02662659 3.13357067]
[154.99676514 -9.73539829]
[159.63774109 -21.89153290]
[166.73744202 -32.78754044]
[175.97315979 -41.93352509]
[186.92620850 -48.91901779]
[199.10092163 -53.43139648]
[211.94708252 -55.26987457]
[224.88482666 -54.35444260]
[237.33074951 -50.72932434]
[248.72424316 -44.56087875]
[258.55279541 -36.12994003]
[270.63278198 -45.02228928]
[282.71276855 -53.91463852]
[294.79275513 -62.80698776]
[306.87274170 -71.69934082]
[311.97097778 -79.35831451]
[319.29782104 -80.64792633]
[331.56018066 -89.28704071]
[343.82254028 -97.92615509]
[356.08489990 -106.56526947]
[368.34729004 -115.20439148]
[380.60964966 -123.84350586]
[383.06176758 -139.45640564]
[395.88467407 -148.69483948]
[411.47076416 -146.07778931]
[420.57312012 -133.15792847]
[417.79144287 -117.60035706]
[404.77606201 -108.63512421]
[389.24874878 -111.58113861]
[376.98638916 -102.94202423]
[364.72402954 -94.30290222]
[352.46166992 -85.66378784]
[340.19927979 -77.02467346]
[327.93692017 -68.38555908]
[315.76507568 -59.61935043]
[303.68508911 -50.72700119]
[291.60510254 -41.83464813]
[279.52511597 -32.94229889]
[267.44512939 -24.04994965]
[273.67800903 -8.13314342]
[275.24917603 8.90110302]
[272.02801514 25.71477127]
[264.26071167 40.98517609]
[252.55122375 53.50901031]
[237.81459045 62.29717636]
[221.20524597 66.65289307]
[204.02665710 66.22693634]
[187.62901306 61.04562759]
[173.30313110 51.50933456]
[162.00413513 61.37505722]
[150.70512390 71.24077606]
[139.40611267 81.10650635]
[128.10711670 90.97222900]
[116.80811310 100.83795166]
[128.88134766 91.93643188]
[143.48529053 88.51231384]
[158.25695801 91.11962128]
[170.80618286 99.33648682]
[179.10244751 111.83337402]
[181.80334473 126.58821106]
[178.47186279 141.21357727]
[169.64706421 153.34300232]
[156.75685120 161.01387024]
[141.88691711 162.98500061]
[127.44333649 158.93743896]
[115.76313782 149.52610779]
[108.73625946 136.27383423]
[107.50000000 121.32231140]
[107.50000000 136.32231140]
[107.50000000 151.32231140]
[107.50000000 166.32231140]
[107.50000000 181.32231140]
[107.50000000 196.32231140]
[107.50000000 211.32231140]
[107.50000000 226.32231140]
[107.50000000 241.32231140]
[107.50000000 256.32229614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
