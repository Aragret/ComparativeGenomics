%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACxxxxxxxxxxUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.74620819 255.25230408]
[93.74620819 240.25230408]
[93.74620819 225.25230408]
[93.74620819 210.25230408]
[93.74620819 195.25230408]
[93.74620819 180.25230408]
[93.74620819 165.25230408]
[93.74620819 150.25230408]
[93.74620819 135.25230408]
[93.74620819 120.25230408]
[89.38004303 118.14630890]
[85.64019775 115.12390900]
[82.71292114 111.35852051]
[80.73870087 107.05988312]
[65.87565613 109.08221436]
[51.01260376 111.10455322]
[36.14955902 113.12688446]
[21.28651237 115.14921570]
[6.42346478 117.17155457]
[-8.43958187 119.19388580]
[-16.21647835 134.17961121]
[-31.23360825 141.52586365]
[-47.51161575 138.52711487]
[-58.69869995 126.55404663]
[-73.51645660 128.88514709]
[-88.33422089 131.21626282]
[-91.52232361 146.05540466]
[-99.85892487 158.73867798]
[-112.21657562 167.55076599]
[-126.92400360 171.29991150]
[-141.99214172 169.47904968]
[-155.38316345 162.33447266]
[-165.28602600 150.83239746]
[-170.36146545 136.52839661]
[-169.92304993 121.35697174]
[-164.03009033 107.36992645]
[-153.47955322 96.45889282]
[-139.69830322 90.09951019]
[-124.55016327 89.15181732]
[-110.08377838 93.74399567]
[-98.25560760 103.25498199]
[-90.66532135 116.39849854]
[-75.84756470 114.06739044]
[-61.02980423 111.73628998]
[-56.06566238 99.30434418]
[-45.51203156 90.89409637]
[-32.07139969 88.79647827]
[-19.25419044 93.66805267]
[-10.46191692 104.33084106]
[4.40113020 102.30850983]
[19.26417732 100.28617096]
[34.12722397 98.26383972]
[48.99027252 96.24150085]
[63.85331726 94.21916962]
[78.71636200 92.19683075]
[87.09851074 79.75739288]
[83.39234924 65.22245789]
[79.68618774 50.68752289]
[64.59868622 50.51508713]
[50.07017136 46.44265747]
[37.09121704 38.74790573]
[26.54675865 27.95546532]
[19.15572739 14.80118465]
[15.42205811 0.18194655]
[15.60031891 -14.90548611]
[19.67835617 -29.43242836]
[27.37812042 -42.40840530]
[38.17462921 -52.94869995]
[51.33176422 -60.33465195]
[65.95244598 -64.06267548]
[81.03980255 -63.87858963]
[95.56517029 -59.79494476]
[108.53817749 -52.09016800]
[119.07430267 -41.28958893]
[126.45516968 -28.12960625]
[130.17755127 -13.50748920]
[129.98764038 1.57980168]
[125.89838409 16.10359001]
[118.18859863 29.07361794]
[107.38395691 39.60557175]
[94.22112274 46.98136139]
[97.92728424 61.51629639]
[101.63344574 76.05123138]
[105.34940338 61.51879883]
[105.40357971 46.51889420]
[114.05607605 34.26596451]
[128.17364502 29.19702530]
[142.64405823 33.14764404]
[152.22727966 44.68722153]
[153.45304871 59.63705063]
[145.87748718 72.58351898]
[132.24342346 78.83850098]
[120.55013275 88.23354340]
[135.31619263 85.59468079]
[150.08224487 82.95581818]
[164.84829712 80.31695557]
[179.61436462 77.67808533]
[184.90887451 63.32833862]
[196.59797668 53.61948013]
[211.47839355 51.08190918]
[225.53698730 56.29841614]
[235.03294373 67.77414703]
[249.79899597 65.13528442]
[264.56506348 62.49641800]
[279.33111572 59.85755539]
[294.09716797 57.21869278]
[304.41149902 44.93073273]
[320.44525146 45.47741699]
[329.89868164 58.43937683]
[325.51992798 73.87330627]
[310.66799927 79.93961334]
[296.73602295 71.98474884]
[281.96997070 74.62361145]
[267.20391846 77.26247406]
[252.43786621 79.90133667]
[237.67181396 82.54020691]
[232.73838806 96.59463501]
[221.35679626 106.35758972]
[206.51853943 109.13109589]
[192.19021606 104.07184601]
[182.25321960 92.44414520]
[167.48716736 95.08300781]
[152.72111511 97.72187042]
[137.95506287 100.36074066]
[123.18900299 102.99960327]
[137.41256714 107.76300049]
[151.63613892 112.52640533]
[166.63513184 112.35191345]
[180.43460083 118.23193359]
[190.69808960 129.17089844]
[195.68783569 143.31665039]
[194.55899048 158.27410889]
[187.50268555 171.51075745]
[175.71366882 180.78540039]
[161.18800354 184.52770996]
[146.38510132 182.10406494]
[133.81132507 173.92480469]
[125.59561157 161.37481689]
[123.12897491 146.57978821]
[115.93759155 133.41604614]
[108.74620819 120.25230408]
[108.74620819 135.25230408]
[108.74620819 150.25230408]
[108.74620819 165.25230408]
[108.74620819 180.25230408]
[108.74620819 195.25230408]
[108.74620819 210.25230408]
[108.74620819 225.25230408]
[108.74620819 240.25230408]
[108.74620819 255.25230408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[24 44]
[25 43]
[26 42]
[56 83]
[57 82]
[58 81]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
