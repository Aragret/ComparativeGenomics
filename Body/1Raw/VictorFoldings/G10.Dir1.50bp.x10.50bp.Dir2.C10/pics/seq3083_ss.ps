%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCxxxxxxxxxxCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-14.02718353 238.76264954]
[-24.98082352 228.98475647]
[-35.85964966 239.31195068]
[-46.73847198 249.63916016]
[-57.61729813 259.96636963]
[-68.49612427 270.29357910]
[-79.37494659 280.62078857]
[-90.25377655 290.94796753]
[-101.13259888 301.27517700]
[-112.01142120 311.60238647]
[-116.69309235 326.71505737]
[-131.25057983 329.86602783]
[-142.12940979 340.19320679]
[-137.41561890 354.71020508]
[-139.47584534 369.83364868]
[-147.90101624 382.56076050]
[-161.01829529 390.36456299]
[-176.22326660 391.69561768]
[-190.49694824 386.28964233]
[-201.00531006 375.22000122]
[-205.66189575 360.68453979]
[-203.54212952 345.56933594]
[-195.06690979 332.87551880]
[-181.91899109 325.12341309]
[-166.70890808 323.85223389]
[-152.45661926 329.31439209]
[-141.57778931 318.98718262]
[-137.67425537 304.61318970]
[-122.33863068 300.72357178]
[-111.45980072 290.39636230]
[-100.58097839 280.06915283]
[-89.70215607 269.74194336]
[-78.82332611 259.41473389]
[-67.94450378 249.08753967]
[-57.06567764 238.76033020]
[-46.18685150 228.43313599]
[-35.30802917 218.10592651]
[-42.03037262 209.93019104]
[-48.25942993 201.37265015]
[-53.97357178 192.46302795]
[-59.15294266 183.23228455]
[-63.77956390 173.71246338]
[-67.83736420 163.93663025]
[-71.31224823 153.93873596]
[-74.19214630 143.75350952]
[-76.46705627 133.41632080]
[-78.12908173 122.96307373]
[-79.17244720 112.43007660]
[-79.59352875 101.85390472]
[-79.39086151 91.27130127]
[-78.56515503 80.71900940]
[-77.11927795 70.23368073]
[-75.05824280 59.85173416]
[-72.38921356 49.60923004]
[-69.12146759 39.54173279]
[-65.26634216 29.68421555]
[-60.83722687 20.07091331]
[-55.84951019 10.73521042]
[-50.32051086 1.70953357]
[-44.26943588 -6.97477102]
[-37.71730042 -15.28754139]
[-30.68685722 -23.19990730]
[-23.20252800 -30.68438721]
[-15.29030228 -37.71498871]
[-6.97766352 -44.26729202]
[1.70651984 -50.31854248]
[10.73208618 -55.84772110]
[20.06768799 -60.83562469]
[29.68090248 -65.26493073]
[39.53834152 -69.12025452]
[49.60577393 -72.38820648]
[59.84822464 -75.05744171]
[70.23013306 -77.11868286]
[80.71543121 -78.56477356]
[91.26770020 -79.39068604]
[101.85030365 -79.59356689]
[112.42648315 -79.17269135]
[122.95950317 -78.12953949]
[133.41278076 -76.46772766]
[143.75001526 -74.19302368]
[153.93530273 -71.31332397]
[163.93325806 -67.83864594]
[173.70916748 -63.78104401]
[183.22909546 -59.15461349]
[192.45994568 -53.97542191]
[200.71223450 -66.50138855]
[208.96452332 -79.02735138]
[209.38998413 -95.42097473]
[223.92723083 -103.01049805]
[237.62156677 -93.98846436]
[236.38545227 -77.63597107]
[221.49047852 -70.77505493]
[213.23818970 -58.24909592]
[204.98590088 -45.72313309]
[227.66955566 -26.32400703]
[246.82727051 -3.43609023]
[261.92993164 22.30850220]
[272.56045532 50.19876480]
[278.42523193 79.46442413]
[293.38546753 78.37311554]
[308.34573364 77.28179932]
[323.30596924 76.19049072]
[338.26623535 75.09918213]
[353.22647095 74.00787354]
[357.97323608 59.56707001]
[367.88870239 48.04527283]
[381.46084595 41.19947052]
[396.62002563 40.07359695]
[411.05459595 44.83934402]
[422.56332397 54.76996613]
[429.39126587 68.35111237]
[430.49719238 83.51176453]
[425.71246338 97.94003296]
[415.76672363 109.43569946]
[402.17660522 116.24577332]
[387.01449585 117.33175659]
[372.59255981 112.52805328]
[361.10998535 102.56718445]
[354.31777954 88.96811676]
[339.35754395 90.05943298]
[324.39727783 91.15074158]
[309.43704224 92.24205017]
[294.47677612 93.33335876]
[279.51654053 94.42467499]
[279.37207031 109.10692596]
[278.02874756 123.72831726]
[275.49560547 138.19113159]
[271.78955078 152.39868164]
[266.93533325 166.25602722]
[260.96545410 179.67056274]
[253.91972351 192.55262756]
[245.84530640 204.81611633]
[236.79612732 216.37907410]
[226.83268738 227.16423035]
[216.02157593 237.09947205]
[204.43502808 246.11843872]
[192.15049744 254.16081238]
[179.25009155 261.17288208]
[165.82002258 267.10772705]
[151.95004272 271.92575073]
[137.73286438 275.59472656]
[123.26348877 278.09008789]
[108.63864136 279.39523315]
[93.95605469 279.50137329]
[79.31386566 278.40783691]
[64.80993652 276.12191772]
[50.54118729 272.65890503]
[36.60300064 268.04193115]
[23.08852005 262.30187988]
[10.08807373 255.47706604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[12 27]
[13 26]
[85 94]
[86 93]
[87 92]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
