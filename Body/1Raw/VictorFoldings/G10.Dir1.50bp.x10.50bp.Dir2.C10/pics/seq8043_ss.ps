%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCxxxxxxxxxxCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.53444672 271.54016113]
[91.53444672 256.54016113]
[91.53444672 241.54016113]
[91.53444672 226.54016113]
[91.53444672 211.54016113]
[91.53444672 196.54016113]
[91.53444672 181.54016113]
[91.53444672 166.54016113]
[91.53444672 151.54016113]
[91.53444672 136.54016113]
[78.48429871 127.75868225]
[70.96116638 115.10741425]
[69.68857574 101.45622253]
[74.07389069 89.53324127]
[82.46870422 81.38333893]
[75.84020996 67.92737579]
[69.21170807 54.47140884]
[55.34609604 60.20788193]
[41.13499069 65.02521515]
[26.63924026 68.90277863]
[11.92092228 71.82396698]
[-2.95693898 73.77627563]
[-17.93063354 74.75133514]
[-32.93603897 74.74498749]
[-47.90890121 73.75724030]
[-62.78510284 71.79233551]
[-77.50094604 68.85868835]
[-91.99340820 64.96884918]
[-106.20043182 60.13948822]
[-120.06118011 54.39127731]
[-133.51629639 47.74883652]
[-146.50816345 40.24060440]
[-158.98115540 31.89873886]
[-170.88185120 22.75895691]
[-182.15930176 12.86039925]
[-192.76519775 2.24545121]
[-202.65414429 -9.04043102]
[-211.78378296 -20.94891930]
[-220.11500549 -33.42901611]
[-227.61215210 -46.42728806]
[-234.24311829 -59.88806534]
[-239.97950745 -73.75370789]
[-244.79675293 -87.96484375]
[-248.67424011 -102.46061707]
[-251.59533691 -117.17895508]
[-253.54756165 -132.05682373]
[-254.52253723 -147.03051758]
[-254.51609802 -162.03593445]
[-253.52825928 -177.00878906]
[-251.56327820 -191.88497925]
[-248.62953186 -206.60079956]
[-244.73960876 -221.09324646]
[-239.91017151 -235.30023193]
[-234.16188049 -249.16094971]
[-227.51934814 -262.61602783]
[-220.01104736 -275.60784912]
[-211.66911316 -288.08081055]
[-202.52925110 -299.98144531]
[-192.63063049 -311.25881958]
[-182.01562500 -321.86465454]
[-170.72967529 -331.75354004]
[-158.82113647 -340.88311768]
[-146.34098816 -349.21426392]
[-133.34268188 -356.71133423]
[-119.88185883 -363.34222412]
[-106.01618195 -369.07852173]
[-91.80501556 -373.89569092]
[-77.30921936 -377.77307129]
[-62.59086609 -380.69409180]
[-47.71298218 -382.64624023]
[-32.73927689 -383.62112427]
[-17.73387337 -383.61459351]
[-2.76102138 -382.62667847]
[12.11515808 -380.66159058]
[26.83096313 -377.72775269]
[41.32337952 -373.83776855]
[55.53034592 -369.00823975]
[69.39102173 -363.25985718]
[82.84606171 -356.61724854]
[95.83784485 -349.10885620]
[108.31074524 -340.76684570]
[120.21133423 -331.62692261]
[131.48866272 -321.72824097]
[142.09443665 -311.11315918]
[151.98324585 -299.82717896]
[161.11273193 -287.91857910]
[169.44381714 -275.43838501]
[176.94081116 -262.44003296]
[183.57162476 -248.97917175]
[189.30784607 -235.11344910]
[194.12492371 -220.90226746]
[198.00224304 -206.40644836]
[200.92317200 -191.68807983]
[202.87521362 -176.81018066]
[203.85000610 -161.83647156]
[203.84338379 -146.83105469]
[202.85537720 -131.85821533]
[200.89021301 -116.98204803]
[197.95629883 -102.26625824]
[194.06620789 -87.77386475]
[189.23660278 -73.56693268]
[183.48814392 -59.70628357]
[176.84545898 -46.25128174]
[169.33700562 -33.25954437]
[160.99491882 -20.78669930]
[151.85491943 -8.88616180]
[141.95616150 2.39110970]
[131.34103394 12.99682331]
[120.05496979 22.88556290]
[108.14632416 32.01498413]
[95.66607666 40.34599304]
[82.66767120 47.84291077]
[89.29617310 61.29887772]
[95.92466736 74.75484467]
[122.27073669 77.66651154]
[137.04528809 105.87332153]
[150.94784546 111.50527954]
[164.85040283 117.13723755]
[178.75296021 122.76919556]
[192.65551758 128.40115356]
[208.81350708 125.59918976]
[219.10987854 138.36308289]
[212.95259094 153.56240845]
[196.67575073 155.56143188]
[187.02355957 142.30371094]
[173.12100220 136.67175293]
[159.21844482 131.03979492]
[145.31588745 125.40783691]
[131.41333008 119.77587891]
[125.19361115 123.96694946]
[134.69415283 135.57469177]
[144.19468689 147.18244934]
[157.83007812 153.43351746]
[162.16850281 167.79241943]
[154.27581787 180.54801941]
[139.48995972 183.07353210]
[127.81080627 173.66091919]
[127.13693237 158.67657471]
[119.94554901 145.51283264]
[112.75416565 132.34909058]
[106.53444672 136.54016113]
[106.53444672 151.54016113]
[106.53444672 166.54016113]
[106.53444672 181.54016113]
[106.53444672 196.54016113]
[106.53444672 211.54016113]
[106.53444672 226.54016113]
[106.53444672 241.54016113]
[106.53444672 256.54016113]
[106.53444672 271.54016113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 114]
[16 113]
[17 112]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
