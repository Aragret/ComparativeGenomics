%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGxxxxxxxxxxCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.86981201 265.37490845]
[73.86981201 250.37489319]
[73.86981201 235.37489319]
[73.86981201 220.37489319]
[73.86981201 205.37489319]
[73.86981201 190.37489319]
[73.86981201 175.37489319]
[73.86981201 160.37489319]
[73.86981201 145.37489319]
[73.86981201 130.37489319]
[67.04623413 117.01679230]
[54.89290619 108.22495270]
[42.73957062 99.43311310]
[28.64418221 94.30281067]
[13.68290138 93.22573853]
[-1.27837932 92.14866638]
[-16.23966026 91.07159424]
[-31.20094109 89.99452972]
[-46.16222000 88.91745758]
[-60.98470306 91.21833038]
[-74.91542053 96.78027344]
[-88.84613800 102.34220886]
[-102.77685547 107.90414429]
[-116.70756531 113.46607971]
[-119.54033661 128.63113403]
[-130.13888550 139.84159851]
[-145.12123108 143.52024841]
[-159.70660400 138.49324036]
[-169.24082947 126.36467743]
[-170.68157959 111.00473785]
[-163.56912231 97.31472015]
[-150.17301941 89.66306305]
[-134.76789856 90.49138641]
[-122.26950836 99.53536987]
[-108.33879089 93.97342682]
[-94.40807343 88.41149139]
[-80.47735596 82.84955597]
[-66.54663849 77.28762054]
[-81.35247040 74.88192749]
[-95.06080627 68.79246521]
[-106.77148438 59.41909027]
[-115.71550751 47.37731552]
[-121.30558014 33.45786667]
[-123.17461395 18.57476425]
[-121.19989014 3.70531726]
[-115.51107788 -10.17406845]
[-106.48171997 -22.15199852]
[-94.70475006 -31.44193840]
[-80.95350647 -37.43386078]
[-66.13095093 -39.73430252]
[-51.21043396 -38.19220352]
[-37.17170334 -32.90883255]
[-24.93661880 -24.23111725]
[-15.30860424 -12.72888565]
[-8.91988468 0.84256494]
[-6.18997860 15.59206009]
[-7.29814577 30.55106926]
[-12.17161846 44.73730469]
[-20.49037743 57.21922302]
[-31.70816803 67.17719269]
[-45.08515167 73.95617676]
[-30.12387085 75.03324890]
[-15.16259003 76.11031342]
[-0.20130953 77.18738556]
[14.75997162 78.26445770]
[29.72125244 79.34152985]
[17.51576996 70.62223053]
[7.42509651 59.52365494]
[-0.09631074 46.54565430]
[-4.70970964 32.27272415]
[-6.20732546 17.34767342]
[-4.52170992 2.44268465]
[0.27122137 -11.77096367]
[7.95560837 -24.65312958]
[18.18536758 -35.62363815]
[30.49978065 -44.18840408]
[44.34424210 -49.96169662]
[59.09523392 -52.68350601]
[74.08841705 -52.23124695]
[88.64852905 -48.62528610]
[102.11984253 -42.02803040]
[113.89563751 -32.73659897]
[123.44556427 -21.16944885]
[130.33952332 -7.84753704]
[134.26702881 6.62915802]
[135.05119324 21.60864639]
[132.65670776 36.41629410]
[127.19141388 50.38520813]
[118.90145111 62.88626480]
[108.16016388 73.35646057]
[95.45133209 81.32423401]
[81.34730530 86.43074799]
[66.48329926 88.44601440]
[51.53141403 87.27977753]
[63.68474579 96.07161713]
[75.83808136 104.86346436]
[82.53207397 76.75761414]
[115.48390198 70.28993988]
[129.82395935 65.88964081]
[144.11808777 61.34235382]
[158.36479187 56.64855194]
[172.61148071 51.95475006]
[179.83651733 46.26313019]
[187.19911194 47.31409073]
[201.53916931 42.91379166]
[212.30885315 30.54666138]
[228.34989929 33.95505524]
[233.16064453 49.63270569]
[221.79220581 61.45179367]
[205.93946838 57.25385284]
[191.59941101 61.65415192]
[177.30528259 66.20144653]
[163.05859375 70.89524078]
[148.81188965 75.58904266]
[143.40979004 80.70074463]
[134.22425842 80.22970581]
[119.88420105 84.63000488]
[119.26837921 99.61735535]
[133.19909668 105.17929840]
[147.12980652 110.74123383]
[161.06053162 116.30316925]
[176.31028748 111.32077789]
[189.63403320 120.25707245]
[190.81091309 136.25689697]
[178.93814087 147.04655457]
[163.12347412 144.34915161]
[155.49859619 130.23388672]
[141.56787109 124.67195129]
[127.63716125 119.11000824]
[113.70644379 113.54807281]
[107.49728394 117.75477600]
[117.05610657 129.31457520]
[126.61492157 140.87437439]
[136.17373657 152.43417358]
[147.96377563 161.70751953]
[147.43121338 176.69807434]
[135.01283264 185.11137390]
[120.89350891 180.04728699]
[116.65312195 165.65940857]
[109.46173859 152.49566650]
[102.27035522 139.33192444]
[95.07897186 126.16819000]
[88.86981201 130.37489319]
[88.86981201 145.37489319]
[88.86981201 160.37489319]
[88.86981201 175.37489319]
[88.86981201 190.37489319]
[88.86981201 205.37489319]
[88.86981201 220.37489319]
[88.86981201 235.37489319]
[88.86981201 250.37489319]
[88.86981201 265.37490845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 96]
[12 95]
[13 94]
[14 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[98 117]
[99 116]
[100 114]
[101 113]
[102 112]
[104 111]
[105 110]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
