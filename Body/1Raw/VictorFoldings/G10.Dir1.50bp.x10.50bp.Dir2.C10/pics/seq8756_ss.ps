%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUxxxxxxxxxxAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.15876007 514.59020996]
[110.15876007 499.59020996]
[110.15876007 484.59020996]
[110.15876007 469.59020996]
[110.15876007 454.59020996]
[110.15876007 439.59020996]
[110.15876007 424.59020996]
[110.15876007 409.59020996]
[110.15876007 394.59020996]
[110.15876007 379.59020996]
[93.33793640 375.53103638]
[78.08496094 367.33981323]
[65.39658356 355.54629517]
[56.10335922 340.91580200]
[50.81528854 324.39962769]
[49.88177490 307.07305908]
[53.36853409 290.06549072]
[61.05301285 274.48672485]
[72.43856812 261.35464478]
[86.78656006 251.52857971]
[103.16430664 245.65319824]
[101.60672760 230.73428345]
[100.04914856 215.81536865]
[96.91921234 212.13040161]
[96.11363220 206.42230225]
[98.75038910 200.24533081]
[97.81476593 185.27453613]
[96.87913513 170.30374146]
[95.94350433 155.33294678]
[95.00788116 140.36216736]
[84.21702576 137.48229980]
[74.61643219 131.77577209]
[66.93009949 123.67291260]
[61.73768616 113.78479767]
[59.43077087 102.85711670]
[60.18333054 91.71397400]
[63.93860626 81.19570923]
[70.41340637 72.09554291]
[79.11943054 65.09975433]
[73.92401886 51.02823257]
[68.72859955 36.95671463]
[63.53318787 22.88519287]
[58.33777237 8.81367397]
[53.14235687 -5.25784540]
[37.98178101 -5.91564989]
[24.26502991 -12.31046963]
[14.06915569 -23.43961143]
[8.92488861 -37.58613586]
[9.58686924 -52.58369064]
[15.92311192 -66.14825439]
[26.93985748 -76.22598267]
[21.74444199 -90.29750061]
[16.54902649 -104.36901855]
[1.63068485 -102.30573273]
[-13.38238430 -103.49813843]
[-27.78799248 -107.89046478]
[-40.91236115 -115.27728271]
[-52.14164352 -125.31307983]
[-60.95062256 -137.52847290]
[-66.92729187 -151.35214233]
[-69.79209900 -166.13749695]
[-69.41106415 -181.19302368]
[-65.80200958 -195.81454468]
[-59.13372803 -209.31817627]
[-49.71811295 -221.07234192]
[-37.99554825 -230.52725220]
[-24.51432037 -237.24072266]
[-9.90497112 -240.89871216]
[5.14919519 -241.33016968]
[19.94406700 -238.51487732]
[33.78766251 -232.58453369]
[46.03248978 -223.81651306]
[56.10583878 -212.62089539]
[63.53655624 -199.52134705]
[67.97709656 -185.13052368]
[69.21977234 -170.12153625]
[67.20645142 -155.19636536]
[62.03130722 -141.05310059]
[53.93638992 -128.35324097]
[43.30031586 -117.69078827]
[30.62054634 -109.56443787]
[35.81595993 -95.49291992]
[41.01137543 -81.42139435]
[55.93379974 -80.92079926]
[69.56462097 -74.72837067]
[79.81383514 -63.75939560]
[85.09686279 -49.66410446]
[84.57950592 -34.57947540]
[78.30947113 -20.80523682]
[67.21387482 -10.45326042]
[72.40929413 3.61825848]
[77.60470581 17.68977737]
[82.80012512 31.76129723]
[87.99553680 45.83281708]
[93.19095612 59.90433502]
[102.34802246 59.39812469]
[111.38568878 60.95654297]
[119.84439087 64.50034332]
[127.29399872 69.84932709]
[133.35568237 76.73148346]
[137.72120667 84.79685974]
[152.42916870 81.85137939]
[167.13713074 78.90589905]
[171.97909546 64.33020020]
[183.47085571 54.14025116]
[198.52119446 51.07710648]
[213.08164978 55.96472549]
[223.23551941 67.48837280]
[226.25148010 82.54824066]
[221.31823730 97.09329987]
[209.76281738 107.21099854]
[194.69357300 110.17974091]
[180.16404724 105.20093536]
[170.08262634 93.61386108]
[155.37466431 96.55934143]
[140.66670227 99.50482178]
[132.24397278 124.78610992]
[109.97866821 139.42652893]
[110.91429901 154.39732361]
[111.84992981 169.36811829]
[112.78555298 184.33891296]
[113.72118378 199.30969238]
[114.96805573 214.25778198]
[116.52564240 229.17669678]
[118.08322144 244.09561157]
[130.87847900 245.41487122]
[143.19325256 249.11352539]
[154.58934021 255.05802917]
[164.66160583 263.03497314]
[173.05236816 272.75878906]
[179.46409607 283.88180542]
[183.66993713 296.00686646]
[185.52182007 308.70141602]
[184.95555115 321.51293945]
[181.99317932 333.98510742]
[176.74198914 345.67401123]
[169.39073181 356.16400146]
[160.20283508 365.08236694]
[149.50686646 372.11279297]
[137.68487549 377.00625610]
[125.15876007 379.59020996]
[125.15876007 394.59020996]
[125.15876007 409.59020996]
[125.15876007 424.59020996]
[125.15876007 439.59020996]
[125.15876007 454.59020996]
[125.15876007 469.59020996]
[125.15876007 484.59020996]
[125.15876007 499.59020996]
[125.15876007 514.59020996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 125]
[22 124]
[23 123]
[26 122]
[27 121]
[28 120]
[29 119]
[30 118]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[51 83]
[52 82]
[53 81]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
