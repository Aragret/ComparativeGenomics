%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCxxxxxxxxxxCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[11.78332520 229.74046326]
[2.76579547 241.72729492]
[-6.25173426 253.71412659]
[-15.26926422 265.70095825]
[-24.28679466 277.68780518]
[-33.05300140 289.85961914]
[-41.56409073 302.21121216]
[-50.07518005 314.56277466]
[-58.58627319 326.91433716]
[-67.09735870 339.26593018]
[-75.60845184 351.61749268]
[-84.11954498 363.96905518]
[-84.88597107 380.35028076]
[-99.57794952 387.63574219]
[-113.08163452 378.33078003]
[-111.50558472 362.00753784]
[-96.47111511 355.45797729]
[-87.96002197 343.10641479]
[-79.44893646 330.75482178]
[-70.93784332 318.40325928]
[-62.42675400 306.05169678]
[-53.91566467 293.70010376]
[-45.40457535 281.34854126]
[-45.38888550 276.51373291]
[-42.29180908 271.65170288]
[-36.27362823 268.67025757]
[-27.25609589 256.68344116]
[-18.23856735 244.69659424]
[-9.22103691 232.70976257]
[-0.20350732 220.72293091]
[-11.37712479 210.49844360]
[-21.51279640 199.24420166]
[-30.51606750 187.06506348]
[-38.30303192 174.07456970]
[-44.80112076 160.39375305]
[-49.94978333 146.15011597]
[-53.70103073 131.47639465]
[-56.01990891 116.50933075]
[-56.88480377 101.38842010]
[-56.28766251 86.25457001]
[-54.23404312 71.24881744]
[-50.74308395 56.51100540]
[-45.84732056 42.17847443]
[-39.59237671 28.38479233]
[-32.03654480 15.25850773]
[-23.25023842 2.92194581]
[-13.31533718 -8.50992680]
[-2.32442832 -18.93057251]
[9.62006283 -28.24288177]
[22.40682220 -36.36006927]
[35.91668701 -43.20648956]
[50.02375793 -48.71834183]
[64.59657288 -52.84425735]
[79.49931335 -55.54578781]
[78.25243378 -70.49387360]
[77.00556183 -85.44196320]
[75.75868988 -100.39004517]
[74.51181030 -115.33813477]
[60.96457291 -126.35674286]
[59.57271194 -143.42562866]
[70.70911407 -155.98901367]
[69.15152740 -170.90791321]
[67.59394836 -185.82682800]
[52.76194763 -188.74284363]
[39.44918823 -195.90258789]
[28.83943176 -206.66940308]
[21.87609291 -220.08593750]
[19.17834473 -234.95918274]
[20.98607063 -249.96662903]
[27.13852692 -263.77383423]
[37.08864594 -275.15304565]
[49.95166397 -283.09246826]
[64.58380890 -286.88607788]
[79.68401337 -286.19659424]
[93.90956116 -281.08532715]
[105.99553680 -272.00674438]
[114.86725616 -259.76812744]
[119.73586273 -245.45770264]
[120.16843414 -230.34796143]
[116.12650299 -215.78244019]
[107.96949005 -203.05632019]
[96.42269897 -193.30116272]
[82.51286316 -187.38441467]
[84.07044220 -172.46549988]
[85.62802124 -157.54658508]
[96.70071411 -150.88383484]
[101.97439575 -138.87289429]
[99.30822754 -125.82990265]
[89.45989990 -116.58500671]
[90.70677185 -101.63692474]
[91.95365143 -86.68883514]
[93.20052338 -71.74074554]
[94.44739532 -56.79265976]
[116.74205780 -55.99510574]
[138.69821167 -52.04347229]
[159.87193298 -45.01766205]
[179.83508301 -35.05972290]
[198.18405151 -22.37100410]
[214.54782104 -7.20805311]
[228.59553528 10.12254620]
[240.04318237 29.27038574]
[248.65927124 49.84831238]
[254.26960754 71.44026184]
[269.13265991 69.41792297]
[283.99569702 67.39559174]
[298.85873413 65.37326050]
[307.04998779 52.05269241]
[321.90341187 47.16285706]
[336.40563965 53.01258469]
[343.70916748 66.83980560]
[340.36553955 82.11573792]
[327.95346069 91.62754822]
[312.33355713 90.88404846]
[300.88107300 80.23630524]
[286.01803589 82.25863647]
[271.15499878 84.28097534]
[256.29193115 86.30330658]
[256.84954834 96.39598846]
[256.75610352 106.50363159]
[256.01196289 116.58428192]
[254.62023926 126.59608459]
[252.58670044 136.49749756]
[249.91979980 146.24740601]
[246.63059998 155.80535889]
[242.73274231 165.13165283]
[238.24243164 174.18760681]
[233.17828369 182.93560791]
[227.56132507 191.33935547]
[221.41487122 199.36396790]
[214.76445007 206.97612000]
[207.63764954 214.14424133]
[200.06404114 220.83856201]
[192.07510376 227.03128052]
[183.70394897 232.69671631]
[174.98536682 237.81134033]
[165.95552063 242.35392761]
[156.65190125 246.30561829]
[147.11312866 249.65000916]
[137.37878418 252.37321472]
[127.48929596 254.46394348]
[117.48570251 255.91349792]
[107.40952301 256.71588135]
[97.30258942 256.86776733]
[87.20685577 256.36849976]
[77.16422272 255.22015381]
[67.21637726 253.42752075]
[57.40460968 250.99801636]
[47.76965714 247.94174194]
[38.35150146 244.27139282]
[29.18924522 240.00216675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[54 93]
[55 92]
[56 91]
[57 90]
[58 89]
[61 85]
[62 84]
[63 83]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
