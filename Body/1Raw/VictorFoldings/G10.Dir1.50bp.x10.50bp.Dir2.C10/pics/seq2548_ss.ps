%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUxxxxxxxxxxCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.61131287 411.33724976]
[93.20231628 392.12951660]
[93.51436615 377.13278198]
[93.82642365 362.13601685]
[94.13848114 347.13928223]
[94.45053864 332.14251709]
[94.76259613 317.14575195]
[95.07465363 302.14901733]
[95.38670349 287.15225220]
[95.69876099 272.15548706]
[96.01081848 257.15875244]
[79.97996521 251.43473816]
[66.83149719 240.58557129]
[58.14270401 225.89112854]
[54.96321487 209.09382629]
[57.68824768 192.19203186]
[66.00953674 177.20231628]
[78.95011902 165.91883850]
[94.97902679 159.69863892]
[94.35504913 144.71160889]
[93.73107147 129.72459412]
[93.10709381 114.73758698]
[83.75213623 100.84586334]
[91.61402130 86.05783844]
[90.67839813 71.08704376]
[89.74276733 56.11625290]
[88.80713654 41.14546204]
[87.87151337 26.17466927]
[79.28849030 12.88398552]
[86.21685791 -0.30111971]
[71.21105957 -0.42368013]
[56.25128937 -1.60443342]
[41.41207123 -3.83749700]
[26.76733971 -7.11174583]
[12.39004898 -11.41086769]
[-1.64817047 -16.71344376]
[-15.27738094 -22.99305916]
[-28.42968178 -30.21842575]
[-41.03954697 -38.35354614]
[-53.04415512 -47.35789490]
[-64.38369751 -57.18661118]
[-75.00168610 -67.79072571]
[-84.84522247 -79.11740875]
[-93.86525726 -91.11023712]
[-102.01685333 -103.70945740]
[-109.25940704 -116.85230255]
[-115.55683899 -130.47328186]
[-120.87776184 -144.50456238]
[-125.19567871 -158.87622070]
[-128.48907471 -173.51666260]
[-130.74153137 -188.35295105]
[-131.94183350 -203.31115723]
[-132.08401489 -218.31678772]
[-131.16735840 -233.29505920]
[-129.19642639 -248.17135620]
[-126.18103027 -262.87158203]
[-122.13621521 -277.32247925]
[-117.08210754 -291.45205688]
[-111.04390717 -305.18991089]
[-104.05168915 -318.46762085]
[-96.14028931 -331.21905518]
[-87.34911346 -343.38064575]
[-77.72196960 -354.89181519]
[-67.30681610 -365.69522095]
[-56.15554810 -375.73703003]
[-44.32371140 -384.96722412]
[-31.87025642 -393.33981323]
[-18.85722542 -400.81311035]
[-5.34945011 -407.34985352]
[8.58577442 -412.91748047]
[22.87902260 -417.48825073]
[37.45908356 -421.03939819]
[52.25332642 -423.55322266]
[67.18803406 -425.01724243]
[82.18881226 -425.42410278]
[97.18093109 -424.77182007]
[112.08968353 -423.06362915]
[126.84080505 -420.30804443]
[141.36080933 -416.51876831]
[155.57734680 -411.71472168]
[169.41960144 -405.91983032]
[182.81860352 -399.16293335]
[195.70759583 -391.47769165]
[208.02238464 -382.90243530]
[219.70159912 -373.47985840]
[230.68705750 -363.25692749]
[240.92402649 -352.28454590]
[250.36151123 -340.61737061]
[258.95251465 -328.31356812]
[266.65417480 -315.43438721]
[273.42819214 -302.04403687]
[279.24078369 -288.20919800]
[284.06301880 -273.99880981]
[287.87081909 -259.48364258]
[290.64526367 -244.73606873]
[292.37249756 -229.82949829]
[293.04394531 -214.83824158]
[292.65621948 -199.83694458]
[291.21130371 -184.90037537]
[288.71636963 -170.10293579]
[285.18386841 -155.51835632]
[280.63134766 -141.21926880]
[275.08154297 -127.27694702]
[268.56207275 -113.76083374]
[261.10540771 -100.73825836]
[252.74873352 -88.27411652]
[243.53366089 -76.43049622]
[233.50610352 -65.26640320]
[222.71600342 -54.83745956]
[211.21714783 -45.19561386]
[199.06680298 -36.38891220]
[186.32550049 -28.46122169]
[173.05673218 -21.45204163]
[159.32659912 -15.39629173]
[145.20347595 -10.32414150]
[130.75776672 -6.26085949]
[116.06141663 -3.22668958]
[101.18764496 -1.23674822]
[109.70375061 10.98312473]
[102.84230042 25.23904037]
[103.77793121 40.20983124]
[104.71356201 55.18062592]
[105.64918518 70.15141296]
[106.58481598 85.12220764]
[114.85993195 93.37497711]
[115.46753693 105.04616547]
[108.09410858 114.11360931]
[108.71808624 129.10061646]
[109.34206390 144.08764648]
[109.96604156 159.07466125]
[122.67150879 162.25346375]
[134.09764099 168.62702942]
[143.45817566 177.74867249]
[150.11112976 188.98291016]
[153.60276794 201.54969788]
[153.69857788 214.57862854]
[150.39903259 227.16917419]
[143.93898010 238.45295715]
[134.77104187 247.65364075]
[123.53385162 254.14031982]
[111.00757599 257.47079468]
[110.69551849 272.46755981]
[110.38346100 287.46429443]
[110.07140350 302.46105957]
[109.75934601 317.45782471]
[109.44728851 332.45455933]
[109.13523865 347.45132446]
[108.82318115 362.44808960]
[108.51112366 377.44482422]
[108.19906616 392.44158936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[19 130]
[20 129]
[21 128]
[22 127]
[24 124]
[25 123]
[26 122]
[27 121]
[28 120]
[30 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
