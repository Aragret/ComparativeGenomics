%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACxxxxxxxxxxCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[196.12135315 454.75057983]
[195.50552368 439.76321411]
[194.88969421 424.77587891]
[194.27388000 409.78851318]
[193.65805054 394.80114746]
[193.04222107 379.81381226]
[192.42639160 364.82644653]
[191.81057739 349.83911133]
[188.60157776 335.18637085]
[182.89691162 321.31350708]
[177.19224548 307.44061279]
[162.35530090 309.39370728]
[147.50698853 307.43811035]
[133.66024780 301.70117188]
[121.76126099 292.56848145]
[112.62480164 280.65771484]
[106.87844086 266.77722168]
[104.91943359 251.87084961]
[106.88727570 236.95394897]
[112.65377808 223.04411316]
[121.83141327 211.09185791]
[133.79931641 201.91555786]
[128.09466553 188.04267883]
[122.38999939 174.16979980]
[116.68533325 160.29692078]
[110.98066711 146.42404175]
[105.27600861 132.55116272]
[99.57134247 118.67827606]
[82.94769287 107.63417053]
[85.78260803 87.87863159]
[79.23473358 74.38324738]
[72.68686676 60.88785934]
[66.13899231 47.39247513]
[59.59112549 33.89709091]
[53.04325485 20.40170860]
[50.19565201 35.12893295]
[40.92958450 46.92469788]
[27.29553986 53.17871857]
[12.31058502 52.50704956]
[-0.70926493 45.05832291]
[-8.88285351 32.48086548]
[-10.40145111 17.55793381]
[-4.92900896 3.59181905]
[6.32347965 -6.32692575]
[20.86595726 -10.00338650]
[35.48032379 -6.62400007]
[46.93431091 3.06578040]
[43.57505035 -11.55322742]
[40.21579361 -26.17223549]
[36.85653305 -40.79124069]
[29.35653305 -53.78162384]
[18.37573051 -64.00032806]
[7.39492798 -74.21903992]
[-3.58587432 -84.43774414]
[-19.68096542 -87.58100128]
[-24.74973106 -103.17714691]
[-13.57785797 -115.18219757]
[2.34198689 -111.24639130]
[6.63283300 -95.41854858]
[17.61363602 -85.19983673]
[28.59443855 -74.98113251]
[39.57524109 -64.76242828]
[35.63274765 -79.23504639]
[34.62758255 -94.20133209]
[36.59938049 -109.07116699]
[41.47039032 -123.25824738]
[49.04855347 -136.20318604]
[59.03507233 -147.39556885]
[71.03617859 -156.39408875]
[84.57868195 -162.84394836]
[99.12860107 -166.49082947]
[114.11225891 -167.19093323]
[128.93884277 -164.91665649]
[143.02375793 -159.75767517]
[155.81164551 -151.91740417]
[166.79829407 -141.70498657]
[175.55049133 -129.52307129]
[181.72315979 -115.85199738]
[185.07292175 -101.23081207]
[185.46766663 -86.23600769]
[182.89186096 -71.45881653]
[177.44705200 -57.48190689]
[169.34791565 -44.85637283]
[158.91381836 -34.08002853]
[146.55616760 -25.57777596]
[132.76219177 -19.68485832]
[118.07581329 -16.63362885]
[103.07607269 -16.54439163]
[88.35442352 -19.42066956]
[74.49131775 -25.14904976]
[62.03337479 -33.50366974]
[51.47554016 -44.15050125]
[54.83480072 -29.53149414]
[58.19405746 -14.91248608]
[61.55331802 -0.29347840]
[66.53863525 13.85383797]
[73.08650970 27.34922218]
[79.63437653 40.84460449]
[86.18225098 54.33998871]
[92.73011780 67.83537292]
[99.27799225 81.33075714]
[107.90298462 83.07059479]
[114.77519226 88.56516266]
[118.37045288 96.59582520]
[117.89138031 105.38149261]
[113.44422150 112.97361755]
[119.14888763 126.84649658]
[124.85355377 140.71937561]
[130.55821228 154.59225464]
[136.26287842 168.46513367]
[141.96754456 182.33801270]
[147.67221069 196.21090698]
[162.63334656 194.31370544]
[177.56416321 196.35232544]
[191.44769287 202.18186951]
[203.33985901 211.39941406]
[212.43368530 223.37188721]
[218.11407471 237.27951050]
[219.99937439 252.17199707]
[217.96701050 267.03341675]
[212.16148376 280.85153198]
[202.98408508 292.68673706]
[191.06512451 301.73596191]
[196.76979065 315.60882568]
[202.47445679 329.48171997]
[204.95680237 314.68853760]
[212.02850342 301.46011353]
[222.95063782 291.17871094]
[236.58189392 284.91864014]
[251.49797058 283.33401489]
[266.14022827 286.59045410]
[278.97866821 294.34762573]
[288.67184448 305.79504395]
[294.20681763 319.73648071]
[295.00527954 334.71520996]
[290.98379517 349.16607666]
[282.56256104 361.57910156]
[270.62155151 370.65719604]
[256.40844727 375.45178223]
[241.40846252 375.46191406]
[227.18891907 370.68646240]
[215.23567200 361.62448120]
[206.79792786 349.22326660]
[207.41375732 364.21063232]
[208.02957153 379.19796753]
[208.64540100 394.18533325]
[209.26123047 409.17269897]
[209.87705994 424.16003418]
[210.49287415 439.14739990]
[211.10870361 454.13473511]
[217.80021667 469.71228027]
[204.68385315 480.45458984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 125]
[10 124]
[11 123]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
