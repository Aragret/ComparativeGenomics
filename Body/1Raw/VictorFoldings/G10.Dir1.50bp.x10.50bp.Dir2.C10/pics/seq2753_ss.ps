%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGUACCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAxxxxxxxxxxACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.78829193 250.40280151]
[82.48030853 235.40596008]
[82.17233276 220.40911865]
[81.86435699 205.41229248]
[81.55638123 190.41545105]
[81.24839783 175.41860962]
[80.94042206 160.42176819]
[80.63244629 145.42492676]
[80.32447052 130.42810059]
[72.29747009 117.75657654]
[58.87002182 111.07050323]
[45.44257355 104.38442993]
[32.01512527 97.69835663]
[18.58767319 91.01227570]
[5.73894787 104.38234711]
[-18.68050575 103.35794067]
[-33.67971420 103.20394135]
[-48.67892456 103.04994965]
[-63.67813492 102.89595032]
[-78.67734528 102.74195099]
[-93.29634857 106.10121155]
[-106.72380066 112.78728485]
[-120.15125275 119.47336578]
[-123.63342285 134.71830750]
[-136.13131714 144.11706543]
[-151.74383545 143.23181152]
[-163.09919739 132.48052979]
[-164.83575439 116.93967438]
[-156.13356018 103.94714355]
[-141.10153198 99.63761139]
[-126.83732605 106.04591370]
[-113.40987396 99.35984039]
[-99.98242950 92.67376709]
[-114.93559265 91.48932648]
[-129.14694214 86.68957520]
[-141.75616455 78.56507874]
[-151.99993896 67.60765839]
[-159.25814819 54.48064804]
[-163.09140015 39.97871017]
[-163.26763916 24.97974586]
[-159.77618408 10.39174366]
[-152.82843018 -2.90218782]
[-142.84494019 -14.09727573]
[-130.43009949 -22.51580620]
[-116.33544922 -27.64814949]
[-101.41424561 -29.18360901]
[-86.56976318 -27.02923584]
[-72.70063782 -21.31544495]
[-60.64646530 -12.38813305]
[-51.13696289 -0.78772944]
[-44.74780655 12.78351402]
[-41.86577225 27.50403976]
[-42.66532898 42.48271561]
[-47.09807968 56.81277847]
[-54.89567566 69.62673950]
[-65.58607483 80.14887238]
[-78.52334595 87.74274445]
[-63.52413940 87.89674377]
[-48.52492905 88.05073547]
[-33.52571869 88.20473480]
[-18.52651024 88.35873413]
[-13.41715622 82.86833191]
[-17.81775284 68.52835846]
[-3.19844890 71.88752747]
[1.91090477 66.39712524]
[0.68029225 51.44769287]
[-0.55032015 36.49825668]
[-15.03470993 31.88622093]
[-26.64836693 22.07849884]
[-33.62029266 8.57069683]
[-34.88731766 -6.57734203]
[-30.25622940 -21.05565262]
[-20.43323898 -32.65639877]
[-6.91627741 -39.61054611]
[8.23341560 -40.85764313]
[22.70562172 -36.20751572]
[34.29343414 -26.36927223]
[41.22979736 -12.84317589]
[42.45696640 2.30814457]
[37.78780365 16.77422142]
[27.93432426 28.34908295]
[14.39911461 35.26764679]
[15.62972641 50.21707916]
[16.86034012 65.16651154]
[25.27375031 77.58483124]
[38.70119858 84.27090454]
[52.12864685 90.95697784]
[65.55609894 97.64305878]
[78.98354340 104.32913208]
[81.49562836 81.23991394]
[106.72279358 69.48841095]
[118.31184387 59.96506882]
[129.90089417 50.44173431]
[141.48994446 40.91839600]
[153.07899475 31.39505768]
[156.06599426 15.63252640]
[170.31871033 8.26778984]
[184.90370178 14.95044327]
[188.63258362 30.55412674]
[178.64489746 43.10903168]
[162.60232544 42.98410416]
[151.01327515 52.50744247]
[139.42422485 62.03078079]
[127.83518219 71.55411530]
[116.24613190 81.07745361]
[120.20274353 95.54622650]
[135.02522278 97.84709930]
[149.84770203 100.14797211]
[156.26377869 86.47278595]
[166.27372742 75.16007233]
[179.06610107 67.12689209]
[193.60386658 63.02447510]
[208.70852661 63.18537903]
[223.15560913 67.59655762]
[235.77395630 75.90041351]
[245.54064941 87.42379761]
[251.66394043 101.23255920]
[253.64746094 116.20728302]
[251.33039856 131.13403320]
[244.90060425 144.80276489]
[234.87928772 156.10542297]
[222.07885742 164.12574768]
[207.53697205 168.21356201]
[192.43247986 168.03747559]
[177.98983765 163.61178589]
[165.37983704 155.29525757]
[155.62472534 143.76206970]
[149.51530457 129.94715881]
[147.54682922 114.97045898]
[132.72434998 112.66957855]
[117.90187073 110.36870575]
[112.25672913 115.30655670]
[124.16158295 124.43204498]
[136.06643677 133.55752563]
[149.63787842 139.94625854]
[154.60690308 154.09930420]
[148.00785828 167.56973267]
[133.77923584 172.31802368]
[120.41307831 165.51025391]
[115.88673401 151.20889282]
[108.42658997 138.19557190]
[100.96644592 125.18226624]
[95.32130432 130.12011719]
[95.62928772 145.11695862]
[95.93726349 160.11380005]
[96.24523926 175.11062622]
[96.55321503 190.10746765]
[96.86119843 205.10430908]
[97.16917419 220.10115051]
[97.47714996 235.09797668]
[97.78512573 250.09481812]
[100.37090302 269.30325317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[16 61]
[17 60]
[18 59]
[19 58]
[20 57]
[21 33]
[22 32]
[23 31]
[65 84]
[66 83]
[67 82]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[106 131]
[107 130]
[108 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
