%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACxxxxxxxxxxACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.33382416 587.51647949]
[99.33382416 572.51647949]
[99.33382416 557.51647949]
[99.33382416 542.51647949]
[99.33382416 527.51647949]
[99.33382416 512.51647949]
[99.33382416 497.51647949]
[99.33382416 482.51647949]
[99.33382416 467.51647949]
[99.33382416 452.51647949]
[85.38685608 449.82974243]
[72.17675018 444.59988403]
[60.16299820 437.00714111]
[49.76380539 427.31390381]
[41.34151459 415.85577393]
[35.18999863 403.02981567]
[31.52439117 389.28094482]
[30.47357368 375.08636475]
[32.07563782 360.93908691]
[36.27651596 347.33074951]
[42.93178558 334.73455811]
[51.81165314 323.58883667]
[62.60889053 314.28179932]
[74.94944000 307.13796997]
[88.40539551 302.40686035]
[102.50982666 300.25439453]
[103.13380432 285.26736450]
[103.75778198 270.28036499]
[93.51535797 259.52731323]
[93.93466187 244.31944275]
[105.28290558 233.64915466]
[105.90688324 218.66213989]
[106.53086090 203.67512512]
[107.15483856 188.68811035]
[92.93479156 168.93693542]
[109.48815918 146.06433105]
[104.58660889 131.88777161]
[99.68505096 117.71121979]
[96.42854309 132.35345459]
[84.19409943 141.03207397]
[69.29839325 139.26628113]
[59.43211746 127.96775818]
[59.68924332 112.96996307]
[69.93701935 102.01628876]
[84.88646698 100.76271057]
[71.50018311 93.99459839]
[58.11389923 87.22648621]
[41.25060272 85.47561646]
[38.26482391 68.78665161]
[53.47502899 61.29759216]
[64.88201141 73.84020233]
[78.26830292 80.60831451]
[91.65458679 87.37642670]
[100.79631805 75.48404694]
[90.81359100 64.28828430]
[74.94347382 61.93906403]
[67.01022339 47.99477386]
[73.09956360 33.15228271]
[88.54026031 28.79747772]
[101.48754120 38.27099228]
[102.00936127 54.30555725]
[111.99208832 65.50131989]
[126.40430450 61.34343338]
[128.88941956 46.55072784]
[131.37454224 31.75802040]
[117.36732483 26.23608780]
[104.81449890 17.92222977]
[94.26481628 7.17989492]
[86.17945099 -5.52131033]
[80.91187286 -19.62614250]
[78.69235229 -34.51800156]
[79.61791992 -49.54587555]
[83.64811707 -64.05281067]
[90.60675049 -77.40463257]
[100.18962860 -89.01764679]
[111.97782898 -98.38419342]
[125.45600891 -105.09479523]
[140.03497314 -108.85610199]
[155.07739258 -109.50367737]
[169.92567444 -107.00922394]
[183.93070984 -101.48178101]
[196.48027039 -93.16298676]
[207.02572632 -82.41650391]
[215.10609436 -69.71212006]
[220.36811829 -55.60521317]
[222.58178711 -40.71248627]
[221.65029907 -25.68497658]
[217.61439514 -11.17962551]
[210.65051270 2.16945481]
[201.06306458 13.77869987]
[189.27117920 23.14060402]
[175.79035950 29.84590530]
[161.20991516 33.60147476]
[146.16725159 34.24313736]
[143.68212891 49.03584671]
[141.19700623 63.82855225]
[113.86161041 112.80966949]
[118.76316071 126.98622894]
[123.66471100 141.16278076]
[136.75787354 148.48188782]
[151.40136719 145.23106384]
[166.04487610 141.98023987]
[180.68836975 138.72941589]
[185.92150879 124.21673584]
[198.18392944 114.85529327]
[213.56272888 113.63228607]
[227.15061951 120.93797302]
[234.61172485 134.44113159]
[233.56524658 149.83296204]
[224.34510803 162.20198059]
[209.89341736 167.60128784]
[194.82167053 164.30796814]
[183.93919373 153.37290955]
[169.29570007 156.62373352]
[154.65219116 159.87457275]
[140.00869751 163.12539673]
[138.66777039 175.79728699]
[131.79049683 185.16424561]
[122.14185333 189.31208801]
[121.51787567 204.29910278]
[120.89389801 219.28611755]
[120.26992035 234.27313232]
[130.69192505 245.84982300]
[129.84562683 261.03988647]
[118.74479675 270.90432739]
[118.12081909 285.89135742]
[117.49684143 300.87835693]
[132.86924744 304.72293091]
[147.11582947 311.64782715]
[159.62707520 321.35427856]
[169.86822510 333.42462158]
[177.40216064 347.34014893]
[181.90800476 362.50347900]
[183.19482422 378.26422119]
[181.20971680 393.94683838]
[176.03996277 408.87960815]
[167.90922546 422.42330933]
[157.16783142 433.99877930]
[144.27769470 443.11148071]
[129.79249573 449.37280273]
[114.33382416 452.51647949]
[114.33382416 467.51647949]
[114.33382416 482.51647949]
[114.33382416 497.51647949]
[114.33382416 512.51647949]
[114.33382416 527.51647949]
[114.33382416 542.51647949]
[114.33382416 557.51647949]
[114.33382416 572.51647949]
[114.33382416 587.51647949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 127]
[27 126]
[28 125]
[31 122]
[32 121]
[33 120]
[34 119]
[36 99]
[37 98]
[38 97]
[45 53]
[46 52]
[47 51]
[54 62]
[55 61]
[63 96]
[64 95]
[65 94]
[100 116]
[101 115]
[102 114]
[103 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
