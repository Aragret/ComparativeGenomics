%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUxxxxxxxxxxGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[254.50744629 97.51999664]
[251.22698975 83.80147552]
[236.40924072 86.13257599]
[221.59147644 88.46368408]
[206.77371216 90.79478455]
[191.95596313 93.12589264]
[177.13819885 95.45699310]
[162.32044983 97.78810120]
[147.50268555 100.11920166]
[132.68492126 102.45030212]
[117.86717224 104.78141022]
[108.17332458 116.59199524]
[92.90169525 117.07956696]
[82.02287292 127.40677643]
[71.14404297 137.73397827]
[60.26522064 148.06118774]
[49.38639450 158.38838196]
[45.25287628 174.25804138]
[29.37288284 178.35168457]
[18.08239365 166.45812988]
[22.99609184 150.81243896]
[39.05918884 147.50956726]
[49.93801498 137.18235779]
[60.81684113 126.85515594]
[71.69566345 116.52794647]
[82.57449341 106.20074463]
[82.33939362 105.49551392]
[82.13282776 104.78141022]
[67.29788971 110.28006744]
[55.92768097 100.65885925]
[41.10992432 98.32775879]
[26.29216385 95.99665070]
[11.47440624 93.66555023]
[4.16102457 106.94298553]
[-7.25449896 116.91603088]
[-21.39368439 122.38039398]
[-36.54915237 122.67622375]
[-50.89081573 117.76779938]
[-62.68683624 108.24784088]
[-70.51279449 95.26593018]
[-73.42367554 80.38968658]
[-71.06796265 65.41548920]
[-63.73012161 52.15155792]
[-52.29623795 42.19956589]
[-38.14700699 36.76126862]
[-22.99101639 36.49336624]
[-8.65842724 41.42821121]
[3.12003231 50.96989441]
[10.92205524 63.96620941]
[13.80551052 78.84779358]
[28.62326813 81.17889404]
[43.44102478 83.51000214]
[58.25878525 85.84110260]
[72.03385925 80.17571259]
[84.46393585 89.96365356]
[100.00000000 81.50411987]
[115.53606415 89.96365356]
[130.35382080 87.63254547]
[145.17158508 85.30144501]
[159.98933411 82.97033691]
[174.80709839 80.63923645]
[189.62486267 78.30813599]
[204.44261169 75.97702789]
[219.26037598 73.64592743]
[234.07812500 71.31481934]
[248.89588928 68.98371887]
[247.74032593 52.98662567]
[247.97021484 36.94989777]
[249.58377075 20.99329376]
[252.56886292 5.23597145]
[256.90313721 -10.20440769]
[262.55416870 -25.21255493]
[269.47967529 -39.67641068]
[277.62789917 -53.48799133]
[286.93789673 -66.54418945]
[297.34008789 -78.74752808]
[308.75677490 -90.00693512]
[321.10263062 -100.23836517]
[334.28540039 -109.36546326]
[348.20660400 -117.32012939]
[362.76226807 -124.04300690]
[377.84362793 -129.48396301]
[393.33801270 -133.60241699]
[409.12976074 -136.36770630]
[425.10089111 -137.75920105]
[441.13211060 -137.76661682]
[457.10372925 -136.38996887]
[472.89645386 -133.63957214]
[488.39236450 -129.53605652]
[503.47576904 -124.11013031]
[518.03399658 -117.40238190]
[531.95843506 -109.46296692]
[545.14508057 -100.35122681]
[557.49548340 -90.13527679]
[568.91748047 -78.89144897]
[579.32586670 -66.70377350]
[588.64282227 -53.66330338]
[596.79895020 -39.86746979]
[603.73339844 -25.41933441]
[617.75012207 -30.76084709]
[631.76684570 -36.10235977]
[645.78356934 -41.44387054]
[655.70947266 -54.49792480]
[671.94122314 -52.16072464]
[677.78094482 -36.83658218]
[667.22125244 -24.28966141]
[651.12506104 -27.42715836]
[637.10833740 -22.08564758]
[623.09161377 -16.74413490]
[609.07489014 -11.40262127]
[613.04943848 2.11939836]
[615.98565674 15.90447426]
[617.86645508 29.87299156]
[618.68103027 43.94427490]
[618.42462158 58.03705215]
[617.09869385 72.06992340]
[614.71075439 85.96183777]
[611.27465820 99.63253784]
[606.81018066 113.00305939]
[601.34307861 125.99615479]
[594.90490723 138.53677368]
[587.53271484 150.55245972]
[579.26922607 161.97377014]
[570.16198730 172.73474121]
[560.26361084 182.77319336]
[549.63128662 192.03108215]
[538.32635498 200.45492554]
[526.41412354 207.99604797]
[513.96331787 214.61083984]
[501.04583740 220.26104736]
[487.73635864 224.91403198]
[474.11166382 228.54286194]
[460.25045776 231.12652588]
[446.23281860 232.65007019]
[432.13967896 233.10467529]
[418.05242920 232.48764038]
[404.05249023 230.80250549]
[390.22067261 228.05895996]
[376.63690186 224.27282715]
[363.37966919 219.46591187]
[350.52551270 213.66595459]
[338.14874268 206.90640259]
[326.32083130 199.22628784]
[315.11013794 190.66992188]
[304.58142090 181.28669739]
[294.79553223 171.13076782]
[285.80902100 160.26077271]
[277.67382812 148.73948669]
[270.43698120 136.63340759]
[264.14031982 124.01245880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 55]
[30 53]
[31 52]
[32 51]
[33 50]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
