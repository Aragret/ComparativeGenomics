%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCxxxxxxxxxxUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-24.76176453 239.49340820]
[-35.20157623 250.26422119]
[-45.64138794 261.03503418]
[-56.08119965 271.80584717]
[-66.40840912 282.68466187]
[-76.62188721 293.67031860]
[-86.83536530 304.65600586]
[-97.04884338 315.64166260]
[-107.26232910 326.62731934]
[-117.47580719 337.61297607]
[-121.20569611 352.98825073]
[-135.53829956 357.04110718]
[-145.75178528 368.02676392]
[-141.82637024 382.94635010]
[-146.61196899 397.61270142]
[-158.58152771 407.34579468]
[-173.91560364 409.03985596]
[-187.72113037 402.15432739]
[-195.59283447 388.88632202]
[-195.01887512 373.46963501]
[-186.18240356 360.82366943]
[-171.90310669 354.98373413]
[-156.73745728 357.81329346]
[-146.52397156 346.82760620]
[-143.52461243 332.23812866]
[-128.46147156 327.39950562]
[-118.24799347 316.41384888]
[-108.03450775 305.42819214]
[-97.82102966 294.44250488]
[-87.60755157 283.45684814]
[-77.39407349 272.47119141]
[-75.12841034 265.38510132]
[-66.85201263 261.36602783]
[-56.41219711 250.59521484]
[-45.97238541 239.82440186]
[-35.53257370 229.05360413]
[-51.15034866 210.35162354]
[-64.20602417 189.77912903]
[-74.47830200 167.68479919]
[-81.79305267 144.44319153]
[-86.02629089 120.44821930]
[-87.10625458 96.10664368]
[-85.01464844 71.83106232]
[-79.78692627 48.03296661]
[-71.51168823 25.11574554]
[-60.32921219 3.46786261]
[-46.42905045 -16.54373741]
[-30.04682159 -34.57984161]
[-40.02954865 -45.77560806]
[-50.01227570 -56.97137451]
[-60.11092377 -68.06269073]
[-70.32440186 -79.04835510]
[-80.53787994 -90.03401947]
[-95.92533112 -88.03249359]
[-109.53436279 -95.48728180]
[-116.13202667 -109.53186798]
[-113.18138885 -124.76582336]
[-101.81703186 -135.33137512]
[-86.40877533 -137.16586304]
[-72.88141632 -129.56388855]
[-66.43650055 -115.44854736]
[-69.55221558 -100.24749756]
[-59.33873749 -89.26183319]
[-49.12525940 -78.27616882]
[-42.22280121 -75.50097656]
[-38.81650925 -66.95410156]
[-28.83378220 -55.75833511]
[-18.85105515 -44.56256866]
[-7.71040249 -53.04371643]
[4.03315210 -60.66821289]
[16.31387520 -67.39337921]
[29.06302452 -73.18156433]
[42.20923996 -78.00038910]
[55.67893600 -81.82286072]
[69.39671326 -84.62759399]
[83.28578949 -86.39888763]
[97.26843262 -87.12682343]
[111.26635742 -86.80733490]
[125.20121765 -85.44219971]
[138.99501038 -83.03906250]
[152.57054138 -79.61138153]
[165.85182190 -75.17832947]
[178.76448059 -69.76473999]
[191.23626709 -63.40089417]
[203.19737244 -56.12242889]
[211.96357727 -68.29426575]
[220.72978210 -80.46610260]
[217.94544983 -96.02319336]
[227.04559326 -108.94461060]
[242.63125610 -111.56430054]
[255.45573425 -102.32805634]
[257.91049194 -86.71557617]
[248.53918457 -73.98946381]
[232.90162659 -71.69989777]
[224.13542175 -59.52805710]
[215.36920166 -47.35622025]
[223.61437988 -40.51118851]
[231.45425415 -33.20544815]
[238.86309814 -25.46294594]
[245.81663513 -17.30907249]
[252.29206848 -8.77056408]
[258.26815796 0.12458456]
[263.72531128 9.34720707]
[268.64566040 18.86706543]
[273.01303101 28.65294456]
[276.81311035 38.67275620]
[280.03347778 48.89365387]
[282.66351318 59.28211594]
[284.69467163 69.80408478]
[286.12020874 80.42506409]
[286.93551636 91.11022186]
[287.13787842 101.82453156]
[286.72662354 112.53285980]
[285.70315552 123.20009613]
[284.07080078 133.79125977]
[281.83489990 144.27162170]
[279.00280762 154.60684204]
[275.58377075 164.76300049]
[271.58905029 174.70681763]
[267.03170776 184.40568542]
[261.92669678 193.82778931]
[256.29074097 202.94226074]
[250.14236450 211.71920776]
[243.50167847 220.12983704]
[236.39048767 228.14657593]
[228.83209229 235.74314880]
[220.85127258 242.89465332]
[212.47419739 249.57762146]
[203.72834778 255.77015686]
[194.64237976 261.45193481]
[185.24610901 266.60433960]
[175.57032776 271.21051025]
[165.64675903 275.25527954]
[155.50794983 278.72543335]
[145.18714905 281.60955811]
[134.71817017 283.89822388]
[124.13536835 285.58392334]
[113.47342682 286.66113281]
[102.76730347 287.12631226]
[92.05211639 286.97790527]
[81.36298370 286.21646118]
[70.73495483 284.84445190]
[60.20288849 282.86633301]
[49.80130386 280.28866577]
[39.56431580 277.11984253]
[29.52548409 273.37026978]
[19.71772766 269.05224609]
[10.17320251 264.17996216]
[0.92320341 258.76931763]
[-8.00193977 252.83811951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
