%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUxxxxxxxxxxAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.98584747 74.22354889]
[7.20346642 68.30358887]
[-6.57891512 62.38362503]
[-20.36129570 56.46366119]
[-34.14367676 50.54369736]
[-48.04623413 44.91173935]
[-62.06294632 39.57022858]
[-76.07965851 34.22871399]
[-90.09637451 28.88720322]
[-104.11308289 23.54569054]
[-118.12979889 18.20417786]
[-132.66473389 14.49801731]
[-147.52778625 12.47568226]
[-162.39082336 10.45334816]
[-177.25387573 8.43101311]
[-192.11692810 6.40867901]
[-207.01882935 4.69598913]
[-221.95314026 3.29368567]
[-236.88743591 1.89138210]
[-251.82174683 0.48907852]
[-254.78268433 8.10187626]
[-259.57525635 14.88917065]
[-265.97103882 20.41040993]
[-273.63583374 24.28789711]
[-282.14682007 26.23208618]
[-291.01593018 26.06221581]
[-299.71768188 23.72080803]
[-307.72036743 19.28099442]
[-314.51849365 12.94598675]
[-319.66452026 5.04050255]
[-334.59884644 6.44280624]
[-349.53314209 7.84510994]
[-364.46743774 9.24741364]
[-377.52032471 19.17486763]
[-392.53753662 12.58579254]
[-394.07061768 -3.74153519]
[-380.54251099 -13.01096058]
[-365.86975098 -5.68689394]
[-350.93545532 -7.08919764]
[-336.00112915 -8.49150085]
[-321.06683350 -9.89380455]
[-318.12133789 -24.60176659]
[-331.36392212 -31.64690208]
[-344.60650635 -38.69203568]
[-357.59078979 -30.48813057]
[-372.93811035 -29.89151382]
[-386.52008057 -37.06267548]
[-394.68322754 -50.07260513]
[-395.23175049 -65.42169952]
[-388.01803589 -78.98113251]
[-374.98260498 -87.10347748]
[-359.63186646 -87.60386658]
[-346.09509277 -80.34770203]
[-338.01367188 -67.28684998]
[-337.56137085 -51.93462372]
[-324.31878662 -44.88948822]
[-311.07620239 -37.84435272]
[-285.03448486 -47.22952271]
[-260.79730225 -37.06311417]
[-250.41944885 -14.44522953]
[-235.48513794 -13.04292583]
[-220.55082703 -11.64062214]
[-205.61651611 -10.23831844]
[-201.38868713 -12.58371639]
[-195.63352966 -12.25273705]
[-190.09458923 -8.45436764]
[-175.23153687 -6.43203354]
[-160.36849976 -4.40969896]
[-145.50544739 -2.38736439]
[-130.64239502 -0.36502996]
[-141.30535889 -10.91497231]
[-145.96644592 -25.17240143]
[-143.59466553 -39.98370361]
[-134.71464539 -52.07275772]
[-121.29055786 -58.76557159]
[-106.29168701 -58.58176422]
[-93.03564453 -51.56198502]
[-84.45454407 -39.25894928]
[-82.44644928 -24.39397049]
[-87.45552826 -10.25504875]
[-98.37382507 0.03041773]
[-112.78828430 4.18746519]
[-98.77157593 9.52897739]
[-84.75485992 14.87049007]
[-70.73814392 20.21200371]
[-56.72143555 25.55351448]
[-42.70472336 30.89502716]
[-38.00393295 29.76449966]
[-32.54643631 31.62112236]
[-28.22371483 36.76131439]
[-14.44133377 42.68127823]
[-0.65895212 48.60124207]
[13.12342930 54.52120590]
[26.90581131 60.44116974]
[41.08712006 41.37462616]
[60.08406067 27.10021019]
[82.34378815 18.78473091]
[106.04676056 17.10791206]
[129.25546265 22.20681381]
[150.07276917 33.66464996]
[166.79707336 50.54483414]
[178.06126404 71.46755981]
[192.55686951 67.61039734]
[207.05245972 63.75323868]
[221.54804993 59.89608002]
[235.29978943 49.98012161]
[248.63508606 60.44942093]
[242.26651001 76.16175842]
[225.40521240 74.39167786]
[210.90962219 78.24884033]
[196.41401672 82.10599518]
[181.91842651 85.96315765]
[182.81101990 92.92922974]
[183.11231995 99.94578552]
[182.82017517 106.96273804]
[181.93667603 113.92996216]
[180.46810913 120.79772949]
[194.59291077 125.84648895]
[208.71771240 130.89524841]
[224.74517822 127.42356110]
[235.56358337 139.74809265]
[230.04389954 155.19039917]
[213.86428833 157.86477661]
[203.66896057 145.02005005]
[189.54415894 139.97129822]
[175.41934204 134.92253113]
[170.85839844 143.43672180]
[165.34043884 151.36427307]
[158.94000244 158.59809875]
[151.74353027 165.04051208]
[143.84822083 170.60449219]
[135.36071777 175.21490479]
[126.39561462 178.80947876]
[117.07402802 181.33966064]
[107.52184296 182.77127075]
[97.86806488 183.08499146]
[88.24308777 182.27658081]
[78.77688599 180.35696411]
[69.59732819 177.35205078]
[60.82838440 173.30242920]
[52.58848572 168.26280212]
[44.98891830 162.30122375]
[38.13232040 155.49821472]
[32.11130142 147.94566345]
[27.00717545 139.74555969]
[22.88887787 131.00865173]
[19.81203270 121.85295105]
[17.81819344 112.40211487]
[16.93428993 102.78376770]
[17.17225838 93.12783051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 90]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 63]
[18 62]
[19 61]
[20 60]
[30 41]
[31 40]
[32 39]
[33 38]
[42 57]
[43 56]
[44 55]
[102 112]
[103 111]
[104 110]
[105 109]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
