%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACxxxxxxxxxxUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-14.69379520 201.63995361]
[-26.39341927 211.02711487]
[-32.31512070 225.69831848]
[-47.08415985 227.62828064]
[-58.78378296 237.01544189]
[-70.48340607 246.40260315]
[-76.72362518 263.69537354]
[-94.12374878 265.75338745]
[-105.62555695 275.38189697]
[-117.12735748 285.01043701]
[-128.62916565 294.63897705]
[-140.13096619 304.26748657]
[-134.68814087 318.39739990]
[-134.13069153 333.52908325]
[-138.51907349 348.02117920]
[-147.37728882 360.30169678]
[-159.74444580 369.03851318]
[-174.27906799 373.28393555]
[-189.40452576 372.57745361]
[-203.48014832 366.99569702]
[-214.97908020 357.14416504]
[-222.65403748 344.09143066]
[-225.67248535 329.25338745]
[-223.70701599 314.23953247]
[-216.97080994 300.67846680]
[-206.19456482 290.04122925]
[-192.54721069 283.48159790]
[-177.50912476 281.71115112]
[-162.71150208 284.92196655]
[-149.75949097 292.76568604]
[-138.25769043 283.13714600]
[-126.75588226 273.50863647]
[-115.25408173 263.88009644]
[-103.75228119 254.25158691]
[-102.35615540 242.19512939]
[-92.79605865 234.08195496]
[-79.87056732 234.70297241]
[-68.17094421 225.31581116]
[-56.47132111 215.92864990]
[-51.38645554 201.92889404]
[-35.78058243 199.32749939]
[-24.08095741 189.94033813]
[-33.84997559 174.62928772]
[-41.73901367 158.27005005]
[-47.63726807 141.09237671]
[-51.46189499 123.33755493]
[-53.15917587 105.25494385]
[-52.70526886 87.09851837]
[-50.10655212 69.12330627]
[-45.39952469 51.58176804]
[-38.65029907 34.72028351]
[-29.95367432 18.77568245]
[-19.43179321 3.97191072]
[-7.23244095 -9.48310661]
[6.47303581 -21.40038681]
[21.49213791 -31.61254692]
[37.61391830 -39.97615433]
[54.61193466 -46.37373734]
[72.24744415 -50.71543503]
[90.27275848 -52.94027328]
[108.43468475 -53.01700211]
[109.99227142 -67.93591309]
[111.54985046 -82.85482788]
[113.10742950 -97.77374268]
[114.66500854 -112.69264984]
[100.43914032 -117.66470337]
[87.74368286 -125.78395081]
[77.26329803 -136.61253357]
[69.56317902 -149.56648254]
[65.05857849 -163.94720459]
[63.99242401 -178.97917175]
[66.42221069 -193.85173035]
[72.21691132 -207.76281738]
[81.06401825 -219.96221924]
[92.48641968 -229.79203796]
[105.86812592 -236.72216797]
[120.48746490 -240.37889099]
[135.55604553 -240.56498718]
[150.26123047 -237.27041626]
[163.80999756 -230.67286682]
[175.47166443 -221.12811279]
[184.61735535 -209.15092468]
[190.75382996 -195.38719177]
[193.55015564 -180.57917786]
[192.85556030 -165.52546692]
[188.70747375 -151.03787231]
[181.32960510 -137.89772034]
[171.11982727 -126.81361389]
[158.62876892 -118.38332367]
[144.53001404 -113.06147766]
[129.58392334 -111.13507080]
[128.02633667 -96.21615601]
[126.46876526 -81.29724884]
[124.91117859 -66.37833405]
[123.35359955 -51.45942307]
[137.37324524 -48.62229919]
[151.06730652 -44.49040604]
[164.31646729 -39.09974289]
[177.00532532 -32.49726868]
[189.02333069 -24.74050331]
[200.26577759 -15.89702511]
[210.63473511 -6.04387379]
[220.03985596 4.73311138]
[228.39921570 16.34004211]
[235.63998413 28.67580223]
[241.69908142 41.63292694]
[246.52374268 55.09852982]
[250.07189941 68.95530701]
[252.31266785 83.08254242]
[253.22650146 97.35715485]
[252.80548096 111.65480042]
[251.05322266 125.85089874]
[265.69671631 129.10173035]
[280.34024048 132.35255432]
[291.87515259 121.97348785]
[307.31124878 120.39020538]
[320.71301270 128.21150208]
[326.92718506 142.42991638]
[323.56430054 157.57821655]
[311.91744995 167.83152771]
[296.46508789 169.24726868]
[283.14895630 161.28105164]
[277.08941650 146.99604797]
[262.44589233 143.74522400]
[247.80239868 140.49440002]
[244.11474609 152.11802673]
[239.51455688 163.41163635]
[234.03097534 174.30372620]
[227.69873047 184.72534180]
[220.55789185 194.61047363]
[212.65370178 203.89654541]
[204.03619385 212.52474976]
[194.75993347 220.44044495]
[184.88366699 227.59353638]
[174.46992493 233.93870544]
[163.58464050 239.43579102]
[152.29673767 244.04998779]
[140.67770386 247.75205994]
[128.80110168 250.51858521]
[116.74213409 252.33203125]
[104.57715607 253.18092346]
[92.38319397 253.05989075]
[80.23745728 251.96969604]
[68.21685791 249.91723633]
[56.39751053 246.91552734]
[44.85425186 242.98353577]
[33.66016769 238.14620972]
[22.88614082 232.43412781]
[12.60039520 225.88349915]
[2.86805701 218.53578186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[4 39]
[5 38]
[6 37]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
