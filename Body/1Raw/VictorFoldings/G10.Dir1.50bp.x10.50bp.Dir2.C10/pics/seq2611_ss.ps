%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAxxxxxxxxxxAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.70904541 283.79190063]
[82.70904541 268.79190063]
[82.70904541 253.79188538]
[82.70904541 238.79188538]
[82.70904541 223.79188538]
[82.70904541 208.79188538]
[82.70904541 193.79188538]
[82.70904541 178.79188538]
[82.70904541 163.79188538]
[82.70904541 148.79188538]
[76.66905212 144.34571838]
[69.47766876 157.50944519]
[66.30860138 172.17086792]
[52.27899933 177.47843933]
[40.19917679 168.58586121]
[41.09911346 153.61288452]
[54.15651321 146.23120117]
[64.58906555 135.45336914]
[58.54906845 131.00718689]
[44.22647095 135.46400452]
[29.90387344 139.92082214]
[22.58279037 145.49339294]
[15.23676205 144.31802368]
[0.82454568 148.47590637]
[-1.22869706 163.56578064]
[-9.24754906 176.51251221]
[-21.84269714 185.07301331]
[-36.83195496 187.76411438]
[-51.61834335 184.11958313]
[-63.64002991 174.77084351]
[-70.81418610 161.33761597]
[-71.89784241 146.14730835]
[-66.70325470 131.83172607]
[-56.13041306 120.87110901]
[-42.01112747 115.16448212]
[-26.79165077 115.70053101]
[-13.10884476 122.38639069]
[-3.33334184 134.06369019]
[11.07887459 129.90580750]
[25.44705772 125.59822083]
[39.76965714 121.14141083]
[54.09225464 116.68459320]
[54.27921677 90.02068329]
[68.13682556 68.58045959]
[90.31033325 58.41365051]
[113.34873962 61.60231400]
[120.80364990 48.58600616]
[128.25856018 35.56969452]
[116.88973236 23.17545319]
[110.02997589 7.84624195]
[108.36808014 -8.84069252]
[112.05888367 -25.17377663]
[120.70900726 -39.48265839]
[133.41871643 -50.30904388]
[148.87545776 -56.55529785]
[147.62858582 -71.50338745]
[146.38171387 -86.45146942]
[142.52821350 -94.80625916]
[145.26770020 -101.72296906]
[144.33206177 -116.69375610]
[143.39643860 -131.66455078]
[134.23524475 -140.80383301]
[133.79801941 -153.33489990]
[141.77288818 -162.48416138]
[141.14891052 -177.47117615]
[140.52493286 -192.45819092]
[139.90095520 -207.44520569]
[125.61529541 -212.64024353]
[114.40850067 -222.91040039]
[107.98952484 -236.68955994]
[107.33720398 -251.87648010]
[112.55103302 -266.15530396]
[122.83592224 -277.34857178]
[136.62350464 -283.74942017]
[151.81129456 -284.38174438]
[166.08323669 -279.14916992]
[177.26296997 -268.84954834]
[183.64567566 -255.05355835]
[184.25802612 -239.86495972]
[179.00665283 -225.59991455]
[168.69235229 -214.43373108]
[154.88796997 -208.06918335]
[155.51194763 -193.08216858]
[156.13592529 -178.09515381]
[156.75990295 -163.10813904]
[166.95268250 -148.85656738]
[158.36723328 -132.60017395]
[159.30285645 -117.62938690]
[160.23849487 -102.65859222]
[161.32980347 -87.69834900]
[162.57667542 -72.75025940]
[163.82354736 -57.80217361]
[178.37574768 -54.78113556]
[191.48049927 -47.76980591]
[202.06889343 -37.34008026]
[209.27726746 -24.34267044]
[223.92077637 -27.59349632]
[238.56427002 -30.84432220]
[253.20777893 -34.09514618]
[254.88265991 -49.14418411]
[261.35543823 -62.83292389]
[271.92404175 -73.67651367]
[285.44204712 -80.49872589]
[300.44311523 -82.55953217]
[315.30001831 -79.63539886]
[328.40124512 -72.04351044]
[338.32562256 -60.60737228]
[343.99667358 -46.56749725]
[344.79922485 -31.44682884]
[340.64617920 -16.88554001]
[331.98809814 -4.46312952]
[319.76412964 4.47291088]
[305.30020142 8.95326614]
[290.16528320 8.49194145]
[276.00106812 3.13897705]
[264.34402466 -6.52497625]
[256.45858765 -19.45164680]
[241.81509399 -16.20082092]
[227.17160034 -12.94999409]
[212.52809143 -9.69916916]
[211.90570068 3.41033006]
[208.02033997 15.96401882]
[201.11070251 27.16194725]
[191.60850525 36.28834152]
[180.11149597 42.75735474]
[167.34584045 46.15068054]
[154.12026978 46.24457550]
[141.27487183 43.02460480]
[133.81996155 56.04091644]
[126.36504364 69.05722809]
[133.21902466 75.29808807]
[138.58677673 83.05961609]
[142.13104248 91.98580933]
[143.60032654 101.64611053]
[142.84521484 111.55606842]
[139.82974243 121.20171356]
[134.63705444 130.06610107]
[127.46868896 137.65704346]
[118.63748169 143.53414917]
[108.55429077 147.33398438]
[97.70904541 148.79188538]
[97.70904541 163.79188538]
[97.70904541 178.79188538]
[97.70904541 193.79188538]
[97.70904541 208.79188538]
[97.70904541 223.79188538]
[97.70904541 238.79188538]
[97.70904541 253.79188538]
[97.70904541 268.79190063]
[97.70904541 283.79190063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 42]
[20 41]
[21 40]
[23 39]
[24 38]
[46 130]
[47 129]
[48 128]
[55 92]
[56 91]
[57 90]
[59 89]
[60 88]
[61 87]
[64 85]
[65 84]
[66 83]
[67 82]
[96 120]
[97 119]
[98 118]
[99 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
