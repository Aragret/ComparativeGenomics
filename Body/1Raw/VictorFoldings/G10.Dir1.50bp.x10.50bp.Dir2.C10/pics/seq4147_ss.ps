%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAxxxxxxxxxxUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.02732849 300.19372559]
[68.02732849 285.19372559]
[68.02732849 270.19372559]
[68.02732849 255.19374084]
[68.02732849 240.19374084]
[68.02732849 225.19374084]
[68.02732849 210.19374084]
[68.02732849 195.19374084]
[68.02732849 180.19374084]
[68.02732849 165.19374084]
[55.59948730 126.06472015]
[69.68335724 98.38648987]
[92.57836914 94.50677490]
[83.07001495 82.90543365]
[73.56165314 71.30409241]
[64.05329132 59.70275116]
[51.79084396 68.35318756]
[38.93615723 76.09623718]
[25.55625725 82.89153290]
[11.72089958 88.70364380]
[-2.49778295 93.50227356]
[-17.02565956 97.26239777]
[-31.78698921 99.96441650]
[-46.70481110 101.59424591]
[-61.70135117 102.14337921]
[-76.69842529 101.60896301]
[-91.61783600 99.99377441]
[-106.38181305 97.30624390]
[-120.91336823 93.56037903]
[-135.13674927 88.77570343]
[-148.97781372 82.97717285]
[-162.36437988 76.19500732]
[-175.22665405 68.46457672]
[-187.49758911 59.82618332]
[-199.11320496 50.32485962]
[-210.01293945 40.01013947]
[-220.13998413 28.93580437]
[-229.44151306 17.15958977]
[-237.86904907 4.74289227]
[-245.37864685 -8.24955273]
[-251.93116760 -21.75000763]
[-257.49243164 -35.68808746]
[-262.03344727 -49.99112320]
[-265.53057861 -64.58454895]
[-267.96551514 -79.39227295]
[-269.32562256 -94.33709717]
[-269.60382080 -109.34111023]
[-268.79861450 -124.32608032]
[-266.91421509 -139.21389771]
[-263.96044922 -153.92691040]
[-259.95272827 -168.38844299]
[-254.91191101 -182.52308655]
[-248.86433411 -196.25715637]
[-241.84149170 -209.51902771]
[-233.87998962 -222.23957825]
[-225.02136230 -234.35247803]
[-215.31179810 -245.79458618]
[-204.80187988 -256.50625610]
[-193.54643250 -266.43161011]
[-181.60414124 -275.51892090]
[-169.03724670 -283.72079468]
[-155.91128540 -290.99450684]
[-142.29467773 -297.30212402]
[-128.25842285 -302.61071777]
[-113.87569427 -306.89266968]
[-99.22148895 -310.12561035]
[-84.37220001 -312.29269409]
[-69.40524292 -313.38265991]
[-54.39865494 -313.38980103]
[-39.43067169 -312.31405640]
[-24.57932854 -310.16104126]
[-9.92205811 -306.94201660]
[4.46472549 -302.67373657]
[18.50601387 -297.37844849]
[32.12860489 -291.08380127]
[45.26147079 -283.82257080]
[57.83614349 -275.63259888]
[69.78707123 -266.55664062]
[81.05193329 -256.64196777]
[91.57201385 -245.94030762]
[101.29244995 -234.50741577]
[110.16257477 -222.40293884]
[118.13614655 -209.68995667]
[125.17157745 -196.43475342]
[131.23220825 -182.70643616]
[136.28642273 -168.57658386]
[140.30787659 -154.11886597]
[143.27561951 -139.40866089]
[145.17414856 -124.52264404]
[145.99359131 -109.53844452]
[145.72966003 -94.53417206]
[144.38374329 -79.58806610]
[141.96284485 -64.77803040]
[138.47959900 -50.18129349]
[133.95216370 -35.87395096]
[128.40412903 -21.93059731]
[121.86444092 -8.42392540]
[114.36717987 4.57564449]
[105.95143890 17.00033951]
[96.66108704 28.78538132]
[86.54457855 39.86932755]
[75.65463257 50.19439316]
[85.16299438 61.79573441]
[94.67135620 73.39707947]
[104.17971039 84.99842072]
[118.02292633 90.77468872]
[132.95722961 89.37238312]
[147.89154053 87.97008514]
[159.19161987 76.58203125]
[175.12442017 78.45962524]
[183.46766663 92.16254425]
[177.82112122 107.17906952]
[162.51634216 111.98981476]
[149.29385376 102.90438843]
[134.35954285 104.30669403]
[119.42523193 105.70899963]
[116.94001007 120.50236511]
[114.45499420 135.29441833]
[128.11123657 141.49981689]
[141.76747131 147.70523071]
[155.42372131 153.91062927]
[171.68429565 151.78324890]
[181.44079590 164.96440125]
[174.65657043 179.89445496]
[158.31063843 181.21464539]
[149.21830750 167.56687927]
[135.56207275 161.36146545]
[121.90583038 155.15606689]
[108.24958801 148.95065308]
[101.94402313 153.01142883]
[110.95347595 165.00433350]
[119.96292114 176.99723816]
[128.97236633 188.99014282]
[138.63760376 200.46112061]
[132.35241699 214.08082581]
[117.35268402 214.16949463]
[110.90704346 200.62417603]
[103.71566010 187.46044922]
[96.52427673 174.29670715]
[89.33289337 161.13296509]
[83.02732849 165.19374084]
[83.02732849 180.19374084]
[83.02732849 195.19374084]
[83.02732849 210.19374084]
[83.02732849 225.19374084]
[83.02732849 240.19374084]
[83.02732849 255.19374084]
[83.02732849 270.19372559]
[83.02732849 285.19372559]
[83.02732849 300.19372559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 105]
[14 104]
[15 103]
[16 102]
[106 116]
[107 115]
[108 114]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
