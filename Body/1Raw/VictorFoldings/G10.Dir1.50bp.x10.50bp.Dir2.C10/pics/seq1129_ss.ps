%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.99293518]
[92.50000000 234.99293518]
[92.50000000 219.99293518]
[92.50000000 204.99293518]
[92.50000000 189.99293518]
[92.50000000 174.99293518]
[92.50000000 159.99293518]
[92.50000000 144.99293518]
[92.50000000 129.99293518]
[92.50000000 114.99292755]
[79.33142090 107.81041718]
[66.72029114 115.93196106]
[54.10916138 124.05350494]
[50.98316193 143.83921814]
[34.62349701 154.86547852]
[15.70018482 150.47470093]
[3.62019634 159.36705017]
[-8.45979214 168.25941467]
[-20.53977966 177.15176392]
[-32.61977005 186.04411316]
[-38.69701385 201.27561951]
[-54.96313095 203.36022949]
[-64.68492889 190.15345764]
[-57.86145401 175.24131775]
[-41.51211929 173.96411133]
[-29.43213081 165.07176208]
[-17.35214233 156.17941284]
[-5.27215338 147.28706360]
[6.80783510 138.39471436]
[5.55477619 128.09475708]
[8.74747562 118.13703918]
[15.86566257 110.36633301]
[25.65544319 106.25186157]
[36.34983063 106.60980988]
[45.98761749 111.44237518]
[58.59874725 103.32083130]
[71.20987701 95.19929504]
[84.90068054 85.54025269]
[97.38677979 87.64842987]
[102.58219147 73.57691193]
[107.77761078 59.50539017]
[112.97302246 45.43387222]
[109.33992767 40.94992065]
[106.90568542 35.89575577]
[105.73513794 30.57432747]
[105.81990051 25.28744507]
[107.08243561 20.31878090]
[109.38389587 15.91865826]
[112.53511810 12.29146004]
[116.31009674 9.58626556]
[117.55696869 -5.36182117]
[118.80384827 -20.30990791]
[120.05072021 -35.25799561]
[121.29759216 -50.20608139]
[120.51775360 -65.18579865]
[117.72542572 -79.92359924]
[114.93309784 -94.66140747]
[111.43595123 -98.70980072]
[110.02785492 -103.24518585]
[110.53721619 -107.37340546]
[112.45652008 -110.40387726]
[110.58891296 -125.28715515]
[108.72129822 -140.17044067]
[93.86023712 -142.99957275]
[80.60175323 -150.28434753]
[70.24478912 -161.31106567]
[63.80399704 -174.99943542]
[61.91039658 -190.00840759]
[64.74949646 -204.86756897]
[72.04314423 -218.12117004]
[83.07679749 -228.47074890]
[96.76947784 -234.90235901]
[111.77972412 -236.78590393]
[126.63697815 -233.93684387]
[139.88568115 -226.63432312]
[150.22787476 -215.59373474]
[156.65029907 -201.89674377]
[158.52378845 -186.88523865]
[155.66477966 -172.02990723]
[148.35337830 -158.78608704]
[137.30586243 -148.45130920]
[123.60457611 -142.03805542]
[125.47219086 -127.15476990]
[127.33980560 -112.27149200]
[129.67091370 -97.45373535]
[132.46322632 -82.71592712]
[135.25555420 -67.97811890]
[141.31625366 -81.69919586]
[152.35754395 -91.85252380]
[166.53747559 -96.74430084]
[181.49052429 -95.55847168]
[194.72219849 -88.49285126]
[204.02513123 -76.72615051]
[207.84741211 -62.22131729]
[205.55139160 -47.39808273]
[197.52008057 -34.72929764]
[185.09330750 -26.32839584]
[170.34411621 -23.59683800]
[155.73301697 -26.99031067]
[143.69744873 -35.94270325]
[136.24568176 -48.95920944]
[134.99880981 -34.01111984]
[133.75193787 -19.06303406]
[132.50506592 -4.11494684]
[131.25817871 10.83314037]
[133.36868286 -4.01764345]
[143.45898438 -15.11655235]
[158.04216003 -18.62810707]
[172.07865906 -13.33881474]
[180.71786499 -1.07650626]
[180.97430420 13.92130184]
[172.75933838 26.47178078]
[158.91186523 32.23782730]
[144.21685791 29.22669220]
[158.71244812 33.08385086]
[173.20805359 36.94100952]
[187.70364380 40.79817200]
[203.38705444 36.00622177]
[215.19250488 47.38881302]
[210.97557068 63.23650742]
[195.07426453 67.24655914]
[183.84648132 55.29376602]
[169.35089111 51.43660736]
[154.85530090 47.57944870]
[140.35969543 43.72229004]
[127.04454041 50.62928772]
[121.84912872 64.70080566]
[116.65370941 78.77232361]
[111.45829773 92.84384918]
[121.81378937 81.99194336]
[135.93502808 76.93321228]
[150.82568359 78.74103546]
[163.32620239 87.03182220]
[170.78414917 100.04639435]
[171.61706543 115.02324677]
[165.64822388 128.78453064]
[154.14411926 138.41030884]
[139.54573059 141.85812378]
[124.95065308 138.39640808]
[113.45571136 128.75968933]
[107.50000000 114.99292755]
[107.50000000 129.99293518]
[107.50000000 144.99293518]
[107.50000000 159.99293518]
[107.50000000 174.99293518]
[107.50000000 189.99293518]
[107.50000000 204.99293518]
[107.50000000 219.99293518]
[107.50000000 234.99293518]
[107.50000000 249.99293518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[39 129]
[40 128]
[41 127]
[42 126]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 87]
[56 86]
[57 85]
[61 84]
[62 83]
[63 82]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
