%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCxxxxxxxxxxGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.25711060 133.67962646]
[164.01042175 128.98582458]
[149.76373291 124.29202271]
[135.51702881 119.59822845]
[121.00777435 122.96433258]
[110.32181549 111.29725647]
[95.49932861 113.59812927]
[83.34600067 122.38997650]
[71.19266510 131.18182373]
[59.03933334 139.97366333]
[53.87971497 147.58773804]
[46.54499435 148.81822205]
[34.21371078 157.35867310]
[21.88242722 165.89913940]
[9.55114269 174.43959045]
[-2.78014088 182.98005676]
[-15.11142445 191.52050781]
[-27.35437775 200.18711853]
[-39.50771332 208.97895813]
[-51.66104507 217.77079773]
[-63.81437683 226.56265259]
[-73.10369873 240.74520874]
[-89.30353546 235.74504089]
[-88.98333740 218.79411316]
[-72.60621643 214.40931702]
[-60.45288849 205.61747742]
[-48.29955292 196.82562256]
[-36.14622116 188.03378296]
[-32.54795456 181.52496338]
[-23.65188408 179.18922424]
[-11.32059956 170.64877319]
[1.01068401 162.10830688]
[13.34196758 153.56785583]
[25.67325211 145.02738953]
[38.00453568 136.48693848]
[50.24748993 127.82032776]
[62.40082169 119.02848053]
[74.55415344 110.23664093]
[86.70748901 101.44480133]
[86.03413391 99.50001526]
[85.65629578 97.39228058]
[74.26522064 87.63300323]
[62.87414932 77.87373352]
[51.48307419 68.11445618]
[40.09200287 58.35518265]
[31.48215485 55.12001419]
[28.56989861 48.27669907]
[17.38160324 38.28559875]
[6.19330597 28.29450417]
[-7.67607117 34.58419800]
[-22.90467072 34.68244553]
[-36.85404587 28.57222176]
[-47.10737991 17.31216049]
[-51.88822937 2.85313606]
[-50.36827087 -12.29973888]
[-42.81085587 -25.52113724]
[-30.52535057 -34.52037048]
[-15.64029026 -37.73826981]
[-0.73460346 -34.61731339]
[11.60921001 -25.69822311]
[19.25251007 -12.52628803]
[20.87104797 2.61637425]
[16.18440247 17.10620689]
[27.37269974 27.09730339]
[38.56099701 37.08840179]
[49.85127640 46.96410751]
[61.24235153 56.72338104]
[72.63342285 66.48265839]
[84.02449799 76.24192810]
[95.41557312 86.00120544]
[86.85868835 73.68131256]
[83.17328644 59.14109802]
[84.82882690 44.23273849]
[91.61441803 30.85530472]
[102.66568756 20.71285057]
[116.57490540 15.09735584]
[131.57025146 14.72413635]
[145.74160767 19.64073372]
[157.28375244 29.22085953]
[164.72642517 42.24416733]
[167.12156677 57.05170822]
[164.16406250 71.75725555]
[156.23065186 84.48757935]
[144.33192444 93.62104034]
[129.98356628 97.99420166]
[115.01561737 97.05056763]
[130.54388428 94.02018738]
[140.21083069 105.35153198]
[154.45753479 110.04533386]
[168.70422363 114.73913574]
[182.95091248 119.43293762]
[198.01197815 98.49500275]
[221.10212708 85.82455444]
[247.94325256 84.30465698]
[273.32711792 94.70044708]
[292.12606812 115.41923523]
[305.55352783 108.73316193]
[318.98095703 102.04708862]
[332.40841675 95.36100769]
[345.83587646 88.67493439]
[350.62005615 73.61216736]
[364.69219971 66.41840363]
[379.70355225 71.36158752]
[386.74813843 85.50900269]
[381.64651489 100.46724701]
[367.42541504 107.36186218]
[352.52194214 102.10238647]
[339.09448242 108.78845978]
[325.66705322 115.47453308]
[312.23959351 122.16060638]
[298.81213379 128.84667969]
[298.88912964 136.34628296]
[313.88833618 136.19229126]
[328.88757324 136.03829956]
[343.88677979 135.88453674]
[344.04031372 150.88374329]
[329.04156494 151.03750610]
[314.04235840 151.19149780]
[299.04315186 151.34550476]
[299.12014771 158.84510803]
[312.68203735 165.25407410]
[326.24392700 171.66305542]
[341.03628540 166.09869385]
[355.39593506 172.69985962]
[360.80358887 187.55020142]
[354.05099487 201.83927917]
[339.14428711 207.08963013]
[324.92739868 200.18630981]
[319.83496094 185.22494507]
[306.27307129 178.81597900]
[292.71115112 172.40699768]
[288.55032349 179.23765564]
[283.58935547 185.46835327]
[277.91265869 191.00657654]
[271.61517334 195.77153015]
[264.80068970 199.69515991]
[257.58029175 202.72325134]
[250.07052612 204.81605530]
[242.39141846 205.94885254]
[234.66461182 206.11219788]
[227.01152039 205.31195068]
[219.55130005 203.56903076]
[212.39906311 200.91899109]
[205.66406250 197.41125488]
[199.44807434 193.10833740]
[193.84382629 188.08464050]
[188.93359375 182.42526245]
[184.78805542 176.22448730]
[181.46527100 169.58425903]
[179.00982666 162.61254883]
[177.45233154 155.42149353]
[176.80895996 148.12573242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[6 86]
[7 39]
[8 38]
[9 37]
[10 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 30]
[18 28]
[19 27]
[20 26]
[21 25]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[47 65]
[48 64]
[49 63]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
