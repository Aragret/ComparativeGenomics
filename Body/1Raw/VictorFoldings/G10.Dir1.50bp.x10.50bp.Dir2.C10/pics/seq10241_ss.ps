%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACxxxxxxxxxxCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.95767975 252.11166382]
[90.95767975 237.11166382]
[90.95767975 222.11166382]
[90.95767975 207.11166382]
[90.95767975 192.11166382]
[90.95767975 177.11166382]
[90.95767975 162.11166382]
[90.95767975 147.11166382]
[90.95767975 132.11166382]
[90.95767975 117.11166382]
[89.86656952 110.90081787]
[91.17251587 105.52290344]
[76.17332458 105.36686707]
[61.17332458 105.36686707]
[46.17413712 105.52290344]
[35.15494537 116.53267670]
[19.94141197 116.47725677]
[9.51318169 105.90428925]
[-5.48600674 106.06032562]
[-20.48519516 106.21636200]
[-26.73187256 118.77124023]
[-37.73472977 127.35774994]
[-51.30174255 130.33787537]
[-64.76118469 127.18334961]
[-75.48775482 118.56825256]
[-81.41463470 106.22599030]
[-96.41381836 106.06995392]
[-111.41300964 105.91391754]
[-125.29292297 113.50724030]
[-137.93902588 105.63796997]
[-152.93820190 105.48193359]
[-167.93739319 105.32588959]
[-182.93658447 105.16985321]
[-191.32568359 118.11692047]
[-205.39216614 124.45236206]
[-220.64744568 122.15456390]
[-232.22363281 111.95674133]
[-236.42680359 97.11299133]
[-231.91574097 82.35989380]
[-220.12991333 72.40511322]
[-204.83012390 70.42517853]
[-190.89849854 77.05187988]
[-182.78054810 90.17066956]
[-167.78135681 90.32670593]
[-152.78216553 90.48274231]
[-137.78298950 90.63877869]
[-124.97591400 83.03429413]
[-111.25697327 90.91472626]
[-96.25778198 91.07076263]
[-81.25859833 91.22679901]
[-73.40039825 77.14133453]
[-59.44022751 68.87721252]
[-43.12408066 68.76152039]
[-28.88558006 76.91999054]
[-20.64123154 91.21717072]
[-5.64204311 91.06113434]
[9.35714531 90.90509796]
[19.56316185 80.11747742]
[34.77224731 79.74556732]
[46.01810074 90.52371979]
[61.01728821 90.36768341]
[67.71636200 87.13224030]
[76.32936096 90.36768341]
[91.32855225 90.52371979]
[105.40007019 85.32830048]
[116.69907379 75.46257782]
[127.99807739 65.59685516]
[113.22077942 68.17198181]
[98.28919983 66.74090576]
[84.27002716 61.40585327]
[72.16475677 52.54795074]
[62.83816528 40.79998398]
[56.95652008 27.00120544]
[54.93999863 12.13737011]
[56.93265152 -2.72968554]
[62.79212952 -16.53788948]
[72.09984589 -28.30081558]
[84.19087982 -37.17814636]
[98.20146942 -42.53570175]
[113.13072968 -43.99075317]
[127.91214752 -41.43935394]
[141.48977661 -35.06377029]
[152.89364624 -25.31946182]
[161.30911255 -12.90253735]
[166.13497925 1.29996419]
[167.02648926 16.27344704]
[163.91996765 30.94824028]
[157.03733826 44.27600479]
[146.87449646 55.30113602]
[161.28671265 51.14324570]
[175.69892883 46.98535919]
[190.11114502 42.82747269]
[204.43374634 38.37065506]
[218.66052246 33.61684036]
[232.88729858 28.86302757]
[237.65072632 14.21325111]
[249.98289490 5.28177977]
[265.03155518 5.32403135]
[277.02615356 14.11422539]
[291.25292969 9.36041069]
[305.47970581 4.60659552]
[319.70648193 -0.14721927]
[333.93328857 -4.90103388]
[344.39361572 -17.53088570]
[360.51409912 -14.52049160]
[365.71133423 1.03331149]
[354.63885498 13.13010502]
[338.68710327 9.32574463]
[324.46029663 14.07956028]
[310.23352051 18.83337402]
[296.00674438 23.58718872]
[281.77996826 28.34100533]
[277.47921753 42.57622147]
[265.47888184 51.65676880]
[250.25466919 51.93314362]
[237.64111328 43.08980560]
[223.41433716 47.84362030]
[209.18756104 52.59743500]
[206.26849365 56.45159912]
[200.87065125 58.47509766]
[194.26902771 57.23968887]
[179.85681152 61.39757538]
[165.44459534 65.55546570]
[151.03237915 69.71334839]
[137.86380005 76.89585876]
[126.56479645 86.76158142]
[115.26579285 96.62730408]
[127.33902740 87.72579193]
[141.94297791 84.30166626]
[156.71464539 86.90898132]
[169.26387024 95.12584686]
[177.56011963 107.62273407]
[180.26101685 122.37756348]
[176.92955017 137.00292969]
[168.10475159 149.13235474]
[155.21453857 156.80322266]
[140.34460449 158.77435303]
[125.90101624 154.72679138]
[114.22081757 145.31547546]
[107.19393921 132.06318665]
[105.95767975 117.11166382]
[105.95767975 132.11166382]
[105.95767975 147.11166382]
[105.95767975 162.11166382]
[105.95767975 177.11166382]
[105.95767975 192.11166382]
[105.95767975 207.11166382]
[105.95767975 222.11166382]
[105.95767975 237.11166382]
[105.95767975 252.11166382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 64]
[13 63]
[14 61]
[15 60]
[18 57]
[19 56]
[20 55]
[26 50]
[27 49]
[28 48]
[30 46]
[31 45]
[32 44]
[33 43]
[65 127]
[66 126]
[67 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 118]
[94 117]
[95 116]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
