%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUAxxxxxxxxxxUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.40596008 442.30813599]
[95.40596008 427.30813599]
[95.40596008 412.30813599]
[95.40596008 397.30813599]
[95.40596008 382.30813599]
[95.40596008 367.30813599]
[95.40596008 352.30813599]
[95.40596008 337.30813599]
[95.40596008 322.30813599]
[95.40596008 307.30813599]
[80.36296844 303.71014404]
[66.60374451 296.62557983]
[54.92365646 286.45938110]
[45.99897766 273.79458618]
[40.34777069 259.35919189]
[38.29979324 243.98414612]
[39.97725677 228.55549622]
[45.28756332 213.96343994]
[53.92837906 201.05088806]
[65.40486908 190.56475830]
[79.05802155 183.11282349]
[94.10247803 179.12847900]
[93.79847717 164.13156128]
[93.49447632 149.13464355]
[85.07112885 147.26165771]
[77.10029602 143.95610046]
[69.82359314 139.31817627]
[63.46156693 133.48847961]
[58.20707321 126.64368439]
[54.21937561 118.99129486]
[51.61935043 110.76325226]
[50.48580551 102.20896149]
[50.85310364 93.58771515]
[52.71010590 85.16083527]
[56.00053024 77.18374634]
[60.62463379 69.89824677]
[66.44226074 63.52517700]
[73.27706146 58.25770187]
[80.92187500 54.25549316]
[77.30943298 39.69697952]
[73.69699860 25.13846779]
[70.08455658 10.57995510]
[66.47212219 -3.97855759]
[59.06005478 -17.01931190]
[48.39984512 -27.57203484]
[37.52795410 -37.90653610]
[26.44884682 -48.01857758]
[15.36973953 -58.13061905]
[4.29063177 -68.24266052]
[-6.78847599 -78.35469818]
[-18.16984749 -88.12528992]
[-29.84296417 -97.54539490]
[-41.51608276 -106.96549225]
[-57.79255676 -108.96757507]
[-63.94697571 -124.16807556]
[-53.64820099 -136.93002319]
[-37.49072647 -134.12501526]
[-32.09597778 -118.63861084]
[-20.42286110 -109.21850586]
[-8.74974442 -99.79840851]
[-5.16836357 -99.83311462]
[-1.39658487 -98.09757996]
[1.71608651 -94.52386475]
[3.32356524 -89.43380737]
[14.40267277 -79.32176971]
[25.48178101 -69.20972443]
[36.56088638 -59.09768677]
[47.63999557 -48.98564529]
[52.42219925 -48.31174469]
[56.81360245 -44.58867645]
[58.95256805 -38.23224258]
[69.61277771 -27.67952347]
[65.95581055 -42.22691345]
[65.45170593 -57.21844101]
[68.12319183 -71.97863007]
[73.84988403 -85.84243011]
[82.37375641 -98.18518829]
[93.31075287 -108.45075989]
[106.16809082 -116.17662811]
[120.36643982 -121.01467133]
[135.26608276 -122.74691772]
[150.19567871 -121.29530334]
[164.48254395 -116.72524261]
[177.48295593 -109.24263763]
[188.61116028 -99.18464661]
[197.36573792 -87.00444794]
[203.35224915 -73.25084686]
[206.30096436 -58.54352951]
[206.07899475 -43.54516983]
[202.69638062 -28.93155289]
[196.30549622 -15.36111927]
[187.19432068 -3.44531393]
[175.77336121 6.27897215]
[162.55722046 13.37359142]
[148.14137268 17.51888275]
[133.17535400 18.52807236]
[118.33350372 16.35568619]
[104.28453064 11.09960747]
[91.66144562 2.99665928]
[81.03063202 -7.59099531]
[84.64307404 6.96751738]
[88.25550842 21.52602959]
[91.86795044 36.08454132]
[95.48038483 50.64305496]
[127.90031433 59.03529358]
[147.58291626 86.12914276]
[162.45292664 84.15869141]
[177.32295227 82.18824005]
[192.19296265 80.21778870]
[200.43064880 66.92588806]
[215.30102539 62.08792496]
[229.78274536 67.98822784]
[237.03800964 81.84085846]
[233.64106750 97.10502625]
[221.19587708 106.57345581]
[205.57867432 105.77545166]
[194.16340637 95.08780670]
[179.29339600 97.05825806]
[164.42338562 99.02870941]
[149.55337524 100.99916077]
[148.94602966 107.79881287]
[147.41009521 114.45051575]
[144.97473145 120.82807159]
[141.68612671 126.81048584]
[137.60665894 132.28425598]
[132.81375122 137.14555359]
[127.39831543 141.30215454]
[121.46308136 144.67517090]
[115.12066650 147.20063782]
[108.49139404 148.83064270]
[108.79539490 163.82756042]
[109.09940338 178.82447815]
[123.34958649 181.87113953]
[136.55204773 188.02140808]
[148.04074097 196.96127319]
[157.23692322 208.23611450]
[163.67828369 221.27383423]
[167.04220581 235.41378784]
[167.16186523 249.94035339]
[164.03460693 264.11911011]
[157.82179260 277.23394775]
[148.84056091 288.62332153]
[137.54762268 297.71347046]
[124.51599121 304.04745483]
[110.40596008 307.30813599]
[110.40596008 322.30813599]
[110.40596008 337.30813599]
[110.40596008 352.30813599]
[110.40596008 367.30813599]
[110.40596008 382.30813599]
[110.40596008 397.30813599]
[110.40596008 412.30813599]
[110.40596008 427.30813599]
[110.40596008 442.30813599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 132]
[23 131]
[24 130]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 72]
[45 71]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 60]
[52 59]
[53 58]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
