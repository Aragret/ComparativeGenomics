%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGxxxxxxxxxxGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUUCUUCUCACAUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[163.05554199 359.99963379]
[162.43156433 345.01260376]
[161.80758667 330.02560425]
[161.18360901 315.03857422]
[160.55963135 300.05157471]
[159.93565369 285.06454468]
[159.31167603 270.07754517]
[158.68769836 255.09051514]
[155.28471375 240.48162842]
[149.22171021 226.76158142]
[143.15869141 213.04151917]
[127.21011353 212.83435059]
[112.88950348 205.68061829]
[103.07439423 192.96128845]
[99.76150513 177.18121338]
[103.66074371 161.47587585]
[114.04380798 148.98843384]
[107.69667816 135.39749146]
[101.34954834 121.80653381]
[103.98267365 136.57360840]
[96.03374481 149.29425049]
[81.60679626 153.40074158]
[68.15050507 146.77290344]
[62.61238098 132.83270264]
[67.85176849 118.77748871]
[81.16559601 111.86378479]
[66.52209473 115.11460876]
[51.87859726 118.36544037]
[37.23509598 121.61626434]
[28.95979691 135.08084106]
[13.56819630 138.66891479]
[0.19185783 130.25170898]
[-3.23327470 114.82304382]
[5.32486916 101.53643799]
[20.78889465 98.27462006]
[33.98426819 106.97276306]
[48.62776947 103.72193909]
[63.27127075 100.47110748]
[77.91477203 97.22028351]
[86.68097687 85.04844666]
[85.12339783 70.12953186]
[83.56581879 55.21062088]
[80.79176331 51.67988586]
[79.46140289 47.83265305]
[79.49241638 44.17465973]
[80.64270020 41.12985611]
[82.55234528 38.99430466]
[82.24029541 23.99755287]
[81.92823792 9.00079918]
[81.61618042 -5.99595451]
[81.30412292 -20.99270821]
[68.20156860 -26.38102150]
[58.18127060 -36.33476257]
[52.73931122 -49.32107162]
[52.67029953 -63.35795975]
[57.95155334 -76.31677246]
[67.75154877 -86.24501038]
[80.56066895 -91.66047668]
[72.82337189 -105.46065521]
[80.56066895 -118.18792725]
[80.56066895 -133.18792725]
[80.56066895 -148.18792725]
[80.56066895 -163.18792725]
[65.92145538 -166.78747559]
[52.56938171 -173.78645325]
[41.28072739 -183.77793884]
[32.71179581 -196.18103027]
[27.36077881 -210.27464294]
[25.53877068 -225.23939514]
[27.35170555 -240.20524597]
[32.69417953 -254.30210876]
[41.25558853 -266.71038818]
[52.53818130 -276.70874023]
[65.88600922 -283.71578979]
[80.52304077 -287.32421875]
[95.59829712 -287.32421875]
[110.23532867 -283.71578979]
[123.58315277 -276.70874023]
[134.86575317 -266.71038818]
[143.42715454 -254.30210876]
[148.76963806 -240.20524597]
[150.58256531 -225.23939514]
[148.76055908 -210.27464294]
[143.40954590 -196.18103027]
[134.84060669 -183.77793884]
[123.55195618 -173.78645325]
[110.19988251 -166.78747559]
[95.56066895 -163.18792725]
[95.56066895 -148.18792725]
[95.56066895 -133.18792725]
[95.56066895 -118.18792725]
[103.29796600 -105.46065521]
[95.56066895 -91.66047668]
[110.06462097 -85.02455139]
[120.27171326 -72.69284821]
[124.10813904 -57.09158707]
[120.76001740 -41.31893921]
[110.84539032 -28.52980804]
[96.30088043 -21.30476379]
[96.61293030 -6.30801058]
[96.92498779 8.68874264]
[97.23704529 23.68549728]
[97.54910278 38.68225098]
[98.48473358 53.65304184]
[100.04231262 68.57195282]
[101.59989166 83.49086761]
[109.21211243 85.03982544]
[115.68302917 90.09030914]
[119.41983032 97.89061737]
[119.29279327 106.97984314]
[114.94049835 115.45940399]
[121.28762817 129.05035400]
[127.63475800 142.64131165]
[141.79724121 142.27377319]
[154.98580933 147.32794189]
[165.21249390 157.00650024]
[170.94934082 169.81771851]
[171.35668945 183.80545044]
[166.40592957 196.84768677]
[156.87875366 206.97850037]
[162.94175720 220.69856262]
[169.00477600 234.41860962]
[171.06286621 219.56047058]
[177.53305054 206.02767944]
[187.80503845 195.09669495]
[200.90991211 187.79858398]
[215.61155701 184.82176208]
[230.52325439 186.44699097]
[244.23844910 192.52099609]
[255.46345520 202.47082520]
[263.13949585 215.35797119]
[266.54248047 229.96685791]
[265.35147095 244.91950989]
[259.67880249 258.80548096]
[250.05953979 270.31503296]
[237.40101624 278.36251831]
[222.89724731 282.18881226]
[207.91629028 281.43304443]
[193.87124634 276.16650391]
[182.08689880 266.88592529]
[173.67471313 254.46653748]
[174.29869080 269.45355225]
[174.92266846 284.44058228]
[175.54664612 299.42758179]
[176.17062378 314.41461182]
[176.79460144 329.40161133]
[177.41857910 344.38864136]
[178.04255676 359.37567139]
[184.74255371 374.94955444]
[171.63201904 385.69900513]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 122]
[10 121]
[11 120]
[17 113]
[18 112]
[19 111]
[26 39]
[27 38]
[28 37]
[29 36]
[40 106]
[41 105]
[42 104]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[58 93]
[60 91]
[61 90]
[62 89]
[63 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
