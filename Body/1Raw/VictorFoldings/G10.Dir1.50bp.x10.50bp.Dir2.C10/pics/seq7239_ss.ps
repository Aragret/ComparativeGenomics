%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUxxxxxxxxxxUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 289.31002808]
[92.50000000 274.31002808]
[92.50000000 259.31002808]
[92.50000000 244.31002808]
[92.50000000 229.31002808]
[92.50000000 214.31002808]
[92.50000000 199.31002808]
[92.50000000 184.31002808]
[92.50000000 169.31002808]
[92.50000000 154.31002808]
[77.55121613 150.01881409]
[64.40889740 141.70254517]
[54.13061905 130.03047180]
[47.54346848 115.94181824]
[45.17752457 100.57032013]
[47.22317123 85.15292358]
[53.51580048 70.93029022]
[63.54903412 59.04690170]
[76.51549530 50.45903397]
[91.37177277 45.85775375]
[91.05971527 30.86100006]
[90.74765778 15.86424637]
[90.43560028 0.86749309]
[90.12354279 -14.12926102]
[75.13096619 -14.73209476]
[60.20302582 -16.24781799]
[45.39525604 -18.67078972]
[30.76274109 -21.99200058]
[16.35992050 -26.19909096]
[2.24037194 -31.27641106]
[-11.54337978 -37.20507431]
[-24.94005775 -43.96302414]
[-37.89982224 -51.52512360]
[-50.37446594 -59.86323547]
[-62.31758118 -68.94635010]
[-73.68473816 -78.74066162]
[-84.43364716 -89.20975494]
[-94.52432251 -100.31466675]
[-103.91922760 -112.01409149]
[-112.58341217 -124.26451111]
[-120.48464966 -137.02033997]
[-127.59353638 -150.23414612]
[-133.88363647 -163.85676575]
[-139.33154297 -177.83750916]
[-143.91697693 -192.12437439]
[-147.62290955 -206.66421509]
[-150.43554688 -221.40293884]
[-152.34440613 -236.28570557]
[-153.34240723 -251.25717163]
[-153.42582703 -266.26162720]
[-152.59436035 -281.24328613]
[-150.85108948 -296.14636230]
[-148.20251465 -310.91543579]
[-144.65847778 -325.49560547]
[-140.23216248 -339.83255005]
[-134.94004822 -353.87301636]
[-128.80180359 -367.56472778]
[-121.84027863 -380.85675049]
[-114.08135986 -393.69964600]
[-105.55391693 -406.04565430]
[-96.28968048 -417.84881592]
[-86.32309723 -429.06524658]
[-75.69126129 -439.65319824]
[-64.43370819 -449.57330322]
[-52.59232712 -458.78863525]
[-40.21116257 -467.26492310]
[-27.33627892 -474.97067261]
[-14.01557159 -481.87716675]
[-0.29859138 -487.95870972]
[13.76363087 -493.19271851]
[28.11878395 -497.55969238]
[42.71346283 -501.04339600]
[57.49337769 -503.63085938]
[72.40354156 -505.31246948]
[87.38849640 -506.08197021]
[102.39248657 -505.93646240]
[117.35969543 -504.87655640]
[132.23445129 -502.90615845]
[146.96141052 -500.03259277]
[161.48579407 -496.26654053]
[175.75357056 -491.62203979]
[189.71166992 -486.11636353]
[203.30815125 -479.76995850]
[216.49243164 -472.60647583]
[229.21548462 -464.65255737]
[241.42996216 -455.93777466]
[253.09042358 -446.49456787]
[264.15350342 -436.35803223]
[274.57803345 -425.56591797]
[284.32525635 -414.15835571]
[293.35888672 -402.17776489]
[301.64532471 -389.66873169]
[309.15377808 -376.67782593]
[315.85623169 -363.25329590]
[321.72784424 -349.44512939]
[326.74673462 -335.30471802]
[330.89419556 -320.88461304]
[334.15487671 -306.23849487]
[336.51657104 -291.42083740]
[337.97052002 -276.48675537]
[338.51135254 -261.49179077]
[338.13699341 -246.49177551]
[336.84890747 -231.54246521]
[334.65179443 -216.69950867]
[331.55392456 -202.01808167]
[327.56674194 -187.55284119]
[322.70513916 -173.35757446]
[316.98715210 -159.48509216]
[310.43411255 -145.98701477]
[303.07034302 -132.91354370]
[294.92324829 -120.31330872]
[286.02316284 -108.23319244]
[276.40316772 -96.71813202]
[266.09906006 -85.81096649]
[255.14916992 -75.55227661]
[243.59423828 -65.98020935]
[231.47723389 -57.13039017]
[218.84326172 -49.03573227]
[205.73930359 -41.72634888]
[192.21411133 -35.22943115]
[178.31799316 -29.56915474]
[164.10264587 -24.76657104]
[149.62095642 -20.83954620]
[134.92678833 -17.80268860]
[120.07482147 -15.66729832]
[105.12030029 -14.44131660]
[105.43235779 0.55543685]
[105.74441528 15.55219078]
[106.05646515 30.54894447]
[106.36852264 45.54569626]
[120.28307343 49.06449127]
[132.80757141 56.07400894]
[143.08369446 66.09387970]
[150.40718079 78.43741608]
[154.27615356 92.25868988]
[154.42546082 106.61048889]
[150.84486389 120.50925446]
[143.77973938 133.00247192]
[133.71429443 143.23396301]
[121.33833313 150.50251770]
[107.50000000 154.31002808]
[107.50000000 169.31002808]
[107.50000000 184.31002808]
[107.50000000 199.31002808]
[107.50000000 214.31002808]
[107.50000000 229.31002808]
[107.50000000 244.31002808]
[107.50000000 259.31002808]
[107.50000000 274.31002808]
[107.50000000 289.31002808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
