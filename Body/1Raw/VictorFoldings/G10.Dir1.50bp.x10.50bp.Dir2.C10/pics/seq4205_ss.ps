%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAxxxxxxxxxxCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.32221985 120.09519196]
[76.22906494 127.41429901]
[63.13591003 134.73339844]
[50.04275513 142.05250549]
[36.94960022 149.37161255]
[23.85644531 156.69071960]
[12.15682220 166.07788086]
[2.17409611 177.27365112]
[-1.23512673 192.72317505]
[-15.48031807 197.07331848]
[-25.46304512 208.26908875]
[-35.44577026 219.46484375]
[-45.42849731 230.66061401]
[-55.41122437 241.85638428]
[-54.25737381 257.61849976]
[-64.65006256 269.52511597]
[-80.42349243 270.51223755]
[-92.21956635 259.99426270]
[-93.03988647 244.21127319]
[-82.39776611 232.52705383]
[-66.60698700 231.87365723]
[-56.62426376 220.67788696]
[-46.64153671 209.48211670]
[-36.65880966 198.28636169]
[-26.67608452 187.09059143]
[-23.98089218 172.44186401]
[-9.02166939 167.29092407]
[0.96105671 156.09515381]
[-5.66774321 142.63859558]
[-12.29594040 129.18322754]
[-27.25618935 130.27453613]
[-42.21643829 131.36584473]
[-51.22261047 144.14953613]
[-66.35209656 148.10336304]
[-80.46120453 141.36045837]
[-86.88806152 127.10459137]
[-82.59809113 112.06697083]
[-69.61688995 103.34788513]
[-54.07378006 105.06423187]
[-43.30774689 116.40559387]
[-28.34749985 115.31428528]
[-13.38725090 114.22297668]
[3.53229046 120.12322998]
[13.85877991 131.16224670]
[16.53734016 143.59756470]
[29.63049507 136.27845764]
[42.72364807 128.95935059]
[55.81680298 121.64025116]
[68.90995789 114.32114410]
[82.00311279 107.00203705]
[85.25393677 92.35853577]
[76.48773193 80.18669891]
[67.72152710 68.01486206]
[58.95531845 55.84302521]
[50.18910980 43.67118835]
[34.91606903 45.29286957]
[20.88491058 39.04610062]
[11.86993980 26.61123657]
[10.29614162 11.33318901]
[16.58685875 -2.67832255]
[29.04992104 -11.65427113]
[44.33282471 -13.18017292]
[58.32455063 -6.84556675]
[67.26139069 5.64556932]
[68.73937988 20.93318176]
[62.36094666 34.90498352]
[71.12715149 47.07682037]
[79.89336395 59.24865723]
[88.65956879 71.42049408]
[97.42577362 83.59233093]
[95.56819153 68.70779419]
[93.71060944 53.82325745]
[91.85303497 38.93872452]
[84.20036316 26.03769112]
[78.64103699 12.10593033]
[75.30958557 -2.51943803]
[74.28661346 -17.48451424]
[75.59687805 -32.42717743]
[79.20867920 -46.98585129]
[85.03460693 -60.80824280]
[92.93369293 -73.55988312]
[102.71480560 -84.93222046]
[114.14125061 -94.65005493]
[126.93653870 -102.47824097]
[140.79106140 -108.22735596]
[155.36955261 -111.75829315]
[170.31925964 -112.98559570]
[185.27842712 -111.87957764]
[199.88508606 -108.46699524]
[213.78576660 -102.83042145]
[226.64411926 -95.10626221]
[238.14900208 -85.48141479]
[248.02203369 -74.18878937]
[256.02426147 -61.50162506]
[261.96212769 -47.72693634]
[265.69186401 -33.19803619]
[267.12326050 -18.26649094]
[266.22171021 -3.29360962]
[263.00897217 11.35829639]
[257.56280518 25.33468437]
[250.01502991 38.29735565]
[240.54824829 49.93264771]
[229.39154053 59.95900345]
[216.81488037 68.13381958]
[203.12258911 74.25926971]
[188.64598083 78.18714142]
[173.73538208 79.82238770]
[158.75270081 79.12557983]
[144.73959351 84.47653961]
[130.72648621 89.82749939]
[116.71337891 95.17845917]
[131.57643127 97.20079041]
[146.43946838 99.22312164]
[161.30252075 101.24546051]
[176.26725769 94.53810120]
[189.39805603 104.36225128]
[187.18708801 120.61167145]
[171.90879822 126.57035065]
[159.28018188 116.10850525]
[144.41714478 114.08617401]
[129.55409241 112.06383514]
[114.69104767 110.04150391]
[126.76503754 118.94199371]
[138.83903503 127.84248352]
[153.08111572 132.55026245]
[166.06872559 140.05503845]
[177.25946045 150.04341125]
[186.18592834 162.09820557]
[192.47534180 175.71595764]
[195.86502075 190.32794189]
[196.21337891 205.32389832]
[193.50588989 220.07752991]
[187.85562134 233.97265625]
[179.49855042 246.42895508]
[168.78372192 256.92620850]
[156.15859985 265.02600098]
[142.15049744 270.39001465]
[127.34443665 272.79431152]
[112.35877991 272.13839722]
[97.81940460 268.44967651]
[84.33352661 261.88226318]
[72.46438599 252.71037292]
[62.70767975 241.31709290]
[55.47089386 228.17826843]
[51.05627060 213.84260559]
[49.64817810 198.90884399]
[51.30542374 184.00067139]
[55.95880127 169.74072266]
[63.41395950 156.72456360]
[73.35950470 145.49581909]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[30 42]
[31 41]
[32 40]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
