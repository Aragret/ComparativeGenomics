%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUxxxxxxxxxxAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.45520020 526.58587646]
[106.45520020 511.58587646]
[106.45520020 496.58587646]
[106.45520020 481.58587646]
[106.45520020 466.58587646]
[106.45520020 451.58587646]
[106.45520020 436.58587646]
[106.45520020 421.58587646]
[106.45520020 406.58587646]
[106.45520020 391.58587646]
[90.52738953 387.91473389]
[75.90993500 380.58218384]
[63.43153763 369.99960327]
[53.80065918 356.76281738]
[47.56527328 341.61846924]
[45.08168793 325.42193604]
[46.49419403 309.08892822]
[51.72668076 293.54391479]
[60.48673248 279.66754150]
[72.28197479 268.24694824]
[86.44773102 259.93099976]
[102.18448639 255.19349670]
[101.24885559 240.22270203]
[87.84963226 233.71681213]
[79.45006561 221.29493713]
[78.38892365 206.23703003]
[85.05108643 192.58007812]
[97.73734283 184.03572083]
[96.80171204 169.06492615]
[95.86608124 154.09413147]
[87.34998322 141.87425232]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[76.26782990 71.46028137]
[62.31506348 66.94933319]
[49.43905640 59.94107437]
[38.08207321 50.67797852]
[28.63387871 39.47991180]
[21.41837502 26.73313141]
[16.68247795 12.87693501]
[14.58768082 -1.61146474]
[15.20454407 -16.23338127]
[18.51031876 -30.48581505]
[24.38978577 -43.87876129]
[32.63926697 -55.95205307]
[42.97367859 -66.29117584]
[55.03639221 -74.54148865]
[68.41152954 -80.42040253]
[82.63830566 -83.72705841]
[82.01432800 -98.71407318]
[81.39035797 -113.70109558]
[80.76638031 -128.68811035]
[80.14240265 -143.67512512]
[67.99762726 -134.87145996]
[53.48701859 -138.67173767]
[47.21664810 -152.29827881]
[53.76964951 -165.79116821]
[68.35631561 -169.28820801]
[80.31465912 -160.23391724]
[81.25028992 -175.20471191]
[82.18592072 -190.17550659]
[82.80989838 -205.16252136]
[83.12194824 -220.15927124]
[83.43400574 -235.15602112]
[69.21058655 -240.34957886]
[57.44573975 -249.88200378]
[49.41563416 -262.71929932]
[45.99131393 -277.46896362]
[47.54422379 -292.53106689]
[53.90591812 -306.27178955]
[64.38632202 -317.20065308]
[77.84860229 -324.13214111]
[92.83248138 -326.31442261]
[107.71260071 -323.51074219]
[120.87489319 -316.02523804]
[130.89160156 -304.66986084]
[136.67619324 -290.67639160]
[137.60119629 -275.56271362]
[133.56628418 -260.96826172]
[125.00910950 -248.47612000]
[112.85791779 -239.44134521]
[98.43076324 -234.84396362]
[98.11870575 -219.84721375]
[97.80664825 -204.85046387]
[100.45342255 -200.80445862]
[100.54203033 -195.04048157]
[97.15670776 -189.23986816]
[96.22107697 -174.26908875]
[95.28545380 -159.29829407]
[95.12941742 -144.29910278]
[95.75339508 -129.31208801]
[96.37737274 -114.32507324]
[97.00135040 -99.33805084]
[97.62532806 -84.35103607]
[112.81241608 -82.05677795]
[127.26960754 -76.85646057]
[140.44627380 -68.94623566]
[151.84017944 -58.62549973]
[161.01663208 -46.28557205]
[167.62509155 -32.39485168]
[171.41249084 -17.48103714]
[172.23300171 -2.11107492]
[170.05363464 13.13038063]
[164.95549011 27.66321564]
[157.13082886 40.93393707]
[146.87582397 52.43674850]
[134.57923889 61.73282623]
[120.70784760 68.46707153]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[117.76524353 139.97340393]
[110.83687592 153.15850830]
[111.77250671 168.12928772]
[112.70812988 183.10008240]
[126.35951233 189.99842834]
[134.67022705 202.71961975]
[135.49215698 217.79248047]
[128.70457458 231.16351318]
[116.21965027 239.28706360]
[117.15527344 254.25785828]
[130.73721313 256.28033447]
[143.64591980 260.94680786]
[155.37231445 268.07098389]
[165.45437622 277.36972046]
[173.49536133 288.47412109]
[179.17945862 300.94445801]
[182.28410339 314.28726196]
[182.68875122 327.97509766]
[180.37959290 341.46734619]
[175.44992065 354.23150635]
[168.09640503 365.76419067]
[158.61129761 375.61111450]
[147.37072754 383.38485718]
[134.81983948 388.78015137]
[121.45520020 391.58587646]
[121.45520020 406.58587646]
[121.45520020 421.58587646]
[121.45520020 436.58587646]
[121.45520020 451.58587646]
[121.45520020 466.58587646]
[121.45520020 481.58587646]
[121.45520020 496.58587646]
[121.45520020 511.58587646]
[121.45520020 526.58587646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 126]
[23 125]
[28 120]
[29 119]
[30 118]
[32 116]
[33 115]
[35 113]
[36 112]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[62 92]
[63 91]
[64 90]
[65 87]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
