%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUxxxxxxxxxxAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[30.86945915 274.99133301]
[24.80644608 288.71139526]
[18.74343300 302.43142700]
[12.68041992 316.15148926]
[14.17945576 331.90151978]
[1.95800328 340.41534424]
[-4.10501003 354.13540649]
[-10.16802311 367.85546875]
[-11.03980732 384.78698730]
[-27.55097008 388.63638306]
[-35.82067490 373.83609009]
[-23.88807678 361.79244995]
[-17.82506371 348.07238770]
[-11.76205063 334.35235596]
[-13.69475460 319.58364868]
[-1.03963411 310.08847046]
[5.02337885 296.36843872]
[11.08639240 282.64837646]
[17.14940453 268.92831421]
[-3.31687284 257.24700928]
[-22.16246033 243.09902954]
[-39.09173203 226.70629883]
[-53.83912659 208.32598877]
[-66.17330933 188.24641418]
[-75.90079498 166.78254700]
[-82.86899567 144.27108765]
[-97.57695007 147.21656799]
[-112.28491211 150.16204834]
[-126.99287415 153.10752869]
[-134.33729553 166.91308594]
[-148.85678101 172.71989441]
[-163.69564819 167.78613281]
[-171.84745789 154.44139099]
[-169.46316528 138.98664856]
[-157.66856384 128.71914673]
[-142.03269958 128.48690796]
[-129.93835449 138.39956665]
[-115.23040009 135.45408630]
[-100.52243805 132.50860596]
[-85.81447601 129.56312561]
[-87.72810364 112.61570740]
[-88.09924316 95.56463623]
[-86.92483521 78.55001068]
[-84.21453857 61.71162415]
[-79.99062347 45.18784332]
[-74.28778839 29.11443520]
[-67.15290070 13.62346458]
[-58.64457321 -1.15778089]
[-48.83272552 -15.10785103]
[-37.79797363 -28.11212158]
[-25.63098717 -40.06374359]
[-12.43173695 -50.86451340]
[1.69132209 -60.42568588]
[16.62214661 -68.66870117]
[32.23805618 -75.52582550]
[48.41073990 -80.94072723]
[65.00731659 -84.86889648]
[81.89141083 -87.27806854]
[98.92430115 -88.14845276]
[115.96602631 -87.47288513]
[117.83364105 -102.35616302]
[119.54632568 -117.25807190]
[121.10391235 -132.17698669]
[122.66149139 -147.09588623]
[124.21907043 -162.01480103]
[125.77664948 -176.93371582]
[111.63412476 -182.17201233]
[99.23908997 -190.76351929]
[89.37071228 -202.16816711]
[82.64933014 -215.66903687]
[79.49744415 -230.41748047]
[80.11318970 -245.48637390]
[84.45786285 -259.92849731]
[92.25835419 -272.83596802]
[103.02431488 -283.39746094]
[116.07898712 -290.94903564]
[130.60174561 -295.01599121]
[145.67968750 -295.34271240]
[160.36497498 -291.90863037]
[173.73451233 -284.92962646]
[184.94784546 -274.84439087]
[193.30010986 -262.28689575]
[198.26628113 -248.04653931]
[199.53417969 -233.01846313]
[197.02409363 -218.14733887]
[190.89381409 -204.36798096]
[181.52870178 -192.54658508]
[169.51745605 -183.42623901]
[155.61509705 -177.58026123]
[140.69555664 -175.37612915]
[139.13798523 -160.45722961]
[137.58039856 -145.53831482]
[136.02282715 -130.61940002]
[134.46524048 -115.70048523]
[136.91462708 -108.67580414]
[132.71691895 -100.48855591]
[130.84930420 -85.60527039]
[142.10057068 -83.38085938]
[153.19540405 -80.47505951]
[164.09257507 -76.89866638]
[174.75160217 -72.66498566]
[185.13287354 -67.78972626]
[195.19781494 -62.29101562]
[204.90902710 -56.18928146]
[214.23043823 -49.50719833]
[223.12741089 -42.26959610]
[231.56687927 -34.50336075]
[239.51747131 -26.23735619]
[246.94967651 -17.50229454]
[253.83586121 -8.33062935]
[260.15045166 1.24355829]
[265.86993408 11.18469334]
[270.97314453 21.45583725]
[275.44104004 32.01882935]
[279.25704956 42.83441544]
[282.40701294 53.86241150]
[284.87921143 65.06183624]
[286.66445923 76.39109039]
[287.75610352 87.80805969]
[288.15011597 99.27033234]
[287.84500122 110.73531342]
[286.84194946 122.16040802]
[285.14462280 133.50315857]
[282.75936890 144.72143555]
[279.69503784 155.77352905]
[275.96304321 166.61837769]
[271.57717896 177.21571350]
[266.55383301 187.52612305]
[260.91159058 197.51132202]
[254.67146301 207.13420105]
[247.85662842 216.35899353]
[240.49240112 225.15144348]
[232.60614014 233.47886658]
[224.22717285 241.31031799]
[215.38661194 248.61671448]
[206.11730957 255.37089539]
[196.45370483 261.54776001]
[186.43170166 267.12438965]
[176.08856201 272.08001709]
[165.46269226 276.39624023]
[154.59358215 280.05703735]
[143.52162170 283.04879761]
[132.28796387 285.36041260]
[120.93431091 286.98330688]
[109.50288391 287.91140747]
[98.03614807 288.14126587]
[86.57670593 287.67208862]
[75.16714478 286.50555420]
[63.84984970 284.64605713]
[52.66687775 282.10043335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[6 14]
[7 13]
[8 12]
[26 40]
[27 39]
[28 38]
[29 37]
[60 97]
[61 96]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
