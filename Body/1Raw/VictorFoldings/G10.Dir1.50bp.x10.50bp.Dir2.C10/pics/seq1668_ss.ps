%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGxxxxxxxxxxCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.37865448 337.48754883]
[112.37865448 322.48754883]
[112.37865448 307.48754883]
[112.37865448 292.48754883]
[112.37865448 277.48754883]
[112.37865448 262.48754883]
[112.37865448 247.48753357]
[112.37865448 232.48753357]
[112.37865448 217.48753357]
[112.37865448 202.48753357]
[110.82107544 187.56861877]
[107.72275543 172.89210510]
[104.62442780 158.21557617]
[101.52610779 143.53904724]
[91.25592041 142.67926025]
[81.47507477 139.43101501]
[72.73093414 133.97610474]
[65.51284790 126.61980438]
[60.22475433 117.77378845]
[57.16259003 107.93309784]
[56.49772644 97.64845276]
[58.26736450 87.49540710]
[62.37247467 78.04215240]
[68.58332825 69.81771851]
[76.55233765 63.28236389]
[70.77606964 49.43914413]
[64.99979401 35.59592819]
[59.22352219 21.75270844]
[53.44725037 7.90949154]
[47.38423538 -5.81056213]
[41.03710556 -19.40151215]
[28.18718910 -28.63136673]
[29.81223106 -43.43705750]
[23.46510124 -57.02801132]
[11.59568119 -62.18268585]
[6.60486364 -73.68532562]
[10.68019772 -85.11769104]
[4.61718464 -98.83774567]
[-1.44582832 -112.55780029]
[-7.50884151 -126.27785492]
[-16.89600372 -137.97747803]
[-28.97599220 -146.86982727]
[-44.67657089 -148.81979370]
[-50.33940506 -162.59591675]
[-62.41939545 -171.48826599]
[-71.24727631 -174.08061218]
[-74.65560913 -180.69340515]
[-90.31222534 -182.96957397]
[-95.68724060 -196.86051941]
[-107.57962036 -206.00225830]
[-123.21601105 -203.70471191]
[-135.84718323 -213.20359802]
[-137.97929382 -228.86341858]
[-128.34738159 -241.39344788]
[-112.66590881 -243.35987854]
[-100.23840332 -233.59602356]
[-98.43788910 -217.89463806]
[-86.54550934 -208.75289917]
[-71.73951721 -207.13061523]
[-65.51387787 -192.58578491]
[-53.52704620 -183.56825256]
[-41.44705582 -174.67590332]
[-26.61051750 -173.36198425]
[-20.08364105 -158.94981384]
[-8.00365353 -150.05746460]
[-13.68764305 -163.93882751]
[-16.08213425 -178.74647522]
[-15.06284237 -193.71180725]
[-10.68267059 -208.05802917]
[-3.16897726 -221.04049683]
[7.08823442 -231.98533630]
[19.55655670 -240.32446289]
[33.58880997 -245.62501526]
[48.45664215 -247.61186218]
[63.38832474 -246.18188477]
[77.60881805 -241.40930176]
[90.37999725 -233.54183960]
[101.03897095 -222.98786926]
[109.03247070 -210.29519653]
[113.94557953 -196.12263489]
[115.52329254 -181.20584106]
[113.68371582 -166.31907654]
[108.52233124 -152.23503113]
[100.30703735 -139.68478394]
[89.46426392 -129.31973267]
[76.55681610 -121.67788696]
[62.25465393 -117.15592194]
[47.30015182 -115.98853302]
[32.46952438 -118.23632812]
[18.53257751 -123.78263092]
[6.21121216 -132.34086609]
[12.27422523 -118.62081146]
[18.33723831 -104.90075684]
[24.40025139 -91.18070221]
[39.09984589 -81.64540863]
[37.05605316 -63.37514114]
[43.40318298 -49.78418732]
[55.79911041 -41.52645111]
[54.62805557 -25.74864197]
[60.97518539 -12.15769196]
[65.13744354 -9.69778061]
[67.76403046 -4.56627703]
[67.29046631 2.13321900]
[73.06674194 15.97643661]
[78.84300995 29.81965446]
[84.61928558 43.66287231]
[90.39555359 57.50608826]
[110.02295685 57.60285568]
[127.61594391 66.30522919]
[139.60354614 81.84683990]
[143.55256653 101.07311249]
[158.26052856 104.01860046]
[172.96849060 106.96408081]
[187.67645264 109.90956116]
[199.77079773 99.99690247]
[215.40664673 100.22914124]
[227.20124817 110.49663544]
[229.58554077 125.95138550]
[221.43374634 139.29612732]
[206.59486389 144.22987366]
[192.07539368 138.42308044]
[184.73097229 124.61752319]
[170.02301025 121.67204285]
[155.31504822 118.72655487]
[140.60708618 115.78107452]
[130.96546936 130.64501953]
[116.20263672 140.44071960]
[119.30095673 155.11724854]
[122.39927673 169.79377747]
[125.49759674 184.47030640]
[132.22998047 171.06600952]
[144.68638611 162.70910645]
[159.64251709 161.56274414]
[173.22703552 167.92366028]
[181.92359924 180.14535522]
[183.48115540 195.06427002]
[177.49652100 208.81869507]
[165.51881409 217.84834290]
[150.64842224 219.81590271]
[136.73449707 214.21209717]
[127.37865448 202.48753357]
[127.37865448 217.48753357]
[127.37865448 232.48753357]
[127.37865448 247.48753357]
[127.37865448 262.48754883]
[127.37865448 277.48754883]
[127.37865448 292.48754883]
[127.37865448 307.48754883]
[127.37865448 322.48754883]
[127.37865448 337.48754883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[14 127]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 100]
[31 99]
[33 97]
[34 96]
[37 94]
[38 93]
[39 92]
[40 91]
[41 65]
[42 64]
[44 62]
[45 61]
[47 60]
[49 58]
[50 57]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
