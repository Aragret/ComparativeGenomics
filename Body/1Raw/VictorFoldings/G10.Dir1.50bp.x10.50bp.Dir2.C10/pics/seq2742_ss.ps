%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.98114014 496.16070557]
[154.35716248 481.17367554]
[153.73318481 466.18667603]
[153.10920715 451.19964600]
[152.48522949 436.21264648]
[151.86125183 421.22561646]
[151.23727417 406.23861694]
[150.61329651 391.25158691]
[148.43646240 376.41036987]
[144.73030090 361.87545776]
[141.02413940 347.34051514]
[137.31797791 332.80557251]
[132.58712769 327.06408691]
[133.68925476 317.92968750]
[130.28628540 303.32080078]
[126.88330078 288.71191406]
[110.96182251 288.68640137]
[95.49301147 284.88146973]
[81.36150360 277.51065063]
[69.37640381 266.99145508]
[60.22499847 253.92182922]
[54.43333435 239.04608154]
[52.33596802 223.21257019]
[54.05666351 207.32528687]
[59.50107574 192.29222107]
[68.36193085 178.97349548]
[80.13636017 168.13218689]
[94.15443420 160.39050293]
[90.14669800 145.93582153]
[86.13895416 131.48112488]
[74.05896759 122.58878326]
[59.06627274 123.05682373]
[44.07357788 123.52486420]
[29.08088112 123.99291229]
[17.09247208 134.65394592]
[1.30781007 131.78619385]
[-6.16446304 117.58954620]
[0.40774092 102.95446014]
[15.98278999 99.10771942]
[28.61283875 109.00021362]
[43.60553360 108.53217316]
[58.59823227 108.06412506]
[73.59092712 107.59608459]
[77.81147003 89.31655884]
[91.65618896 79.88888550]
[91.03221130 64.90187073]
[90.40823364 49.91485214]
[89.78425598 34.92783737]
[89.16027832 19.94082069]
[74.18872833 18.75337219]
[59.46947479 15.76991558]
[45.21717453 11.03396225]
[31.63966179 4.61457491]
[18.93493843 -3.39463234]
[7.28827953 -12.87686253]
[-3.13047504 -23.69383621]
[-12.16938877 -35.68780899]
[-19.69664764 -48.68387604]
[-25.60248184 -62.49251175]
[-29.80076599 -76.91235352]
[-32.23027802 -91.73310852]
[-32.85559082 -106.73865509]
[-31.66757965 -121.71015930]
[-28.68357468 -136.42929077]
[-23.94708824 -150.68142700]
[-17.52719307 -164.25869751]
[-9.51751041 -176.96311951]
[-0.03484523 -188.60942078]
[10.78251743 -199.02777100]
[22.77682877 -208.06623840]
[35.77317810 -215.59301758]
[49.58203506 -221.49832153]
[64.00202942 -225.69607544]
[78.82287598 -228.12503052]
[93.82844543 -228.74978638]
[108.79991150 -227.56121826]
[123.51893616 -224.57666016]
[137.77088928 -219.83963013]
[151.34791565 -213.41923523]
[164.05203247 -205.40907288]
[175.69798279 -195.92597961]
[186.11593628 -185.10823059]
[195.15394592 -173.11357117]
[202.68023682 -160.11694336]
[208.58503723 -146.30786133]
[212.78224182 -131.88771057]
[215.21064758 -117.06677246]
[215.83483887 -102.06118011]
[214.64570618 -87.08976746]
[211.66059875 -72.37084961]
[206.92304993 -58.11907959]
[200.50213623 -44.54228973]
[192.49150085 -31.83846474]
[183.00796509 -20.19286919]
[172.18983459 -9.77532768]
[160.19483948 -0.73775959]
[147.19793701 6.78804111]
[133.38862610 12.69232655]
[118.96832275 16.88899422]
[104.14729309 19.31684494]
[104.77127075 34.30385971]
[105.39524841 49.29087448]
[106.01922607 64.27789307]
[106.64320374 79.26490784]
[119.67765808 87.71073151]
[124.37087250 103.53942871]
[117.25901031 119.51652527]
[100.59364319 127.47338867]
[104.60138702 141.92808533]
[108.60912323 156.38276672]
[122.72249603 155.66862488]
[136.66548157 157.92939758]
[149.81829834 163.06185913]
[161.59684753 170.83523560]
[171.47866821 180.90155029]
[179.02606201 192.81115723]
[183.90557861 206.03286743]
[185.90266418 219.97761536]
[184.93109131 234.02474976]
[181.03675842 247.54959106]
[174.39543152 259.95126343]
[165.30488586 270.67938232]
[154.17152405 279.25842285]
[141.49220276 285.30892944]
[144.89517212 299.91781616]
[148.29815674 314.52670288]
[151.85292053 329.09942627]
[155.55908203 343.63433838]
[159.26524353 358.16928101]
[162.97140503 372.70422363]
[169.14035034 359.03146362]
[181.23834229 350.16363525]
[196.13385010 348.39611816]
[209.97119141 354.18643188]
[219.16864014 366.03576660]
[221.34545898 380.87698364]
[215.93817139 394.86846924]
[204.34645081 404.38854980]
[189.57077026 406.97299194]
[175.43577576 401.95281982]
[165.60031128 390.62762451]
[166.22428894 405.61462402]
[166.84826660 420.60165405]
[167.47224426 435.58865356]
[168.09622192 450.57568359]
[168.72019958 465.56268311]
[169.34417725 480.54971313]
[169.96815491 495.53671265]
[176.66815186 511.11062622]
[163.55761719 521.86004639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[11 128]
[12 127]
[14 126]
[15 125]
[16 124]
[28 110]
[29 109]
[30 108]
[31 43]
[32 42]
[33 41]
[34 40]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
