%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGAGGCGACAAACCUACCGAGCCUGGUGAUAxxxxxxxxxxCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAACCGUGCAAAGGUAGCAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.32923889 374.46795654]
[138.92024231 355.26022339]
[139.23228455 340.26348877]
[139.54434204 325.26672363]
[139.85639954 310.26995850]
[140.16845703 295.27322388]
[140.48051453 280.27645874]
[140.79257202 265.27972412]
[141.10462952 250.28295898]
[141.41668701 235.28620911]
[141.72874451 220.28944397]
[140.17115784 205.37054443]
[129.74822998 194.73043823]
[134.15299988 179.53475952]
[130.75003052 164.92587280]
[127.34705353 150.31698608]
[113.56466675 144.39701843]
[100.62660980 151.98692322]
[87.68856049 159.57682800]
[74.75050354 167.16674805]
[74.22608185 182.58518982]
[65.43028259 195.25947571]
[51.16981888 201.14527893]
[35.99515152 198.36447144]
[24.74845505 187.80438232]
[21.01851654 172.83471680]
[25.99554253 158.23222351]
[38.09138107 148.65650940]
[53.44630051 147.16316223]
[67.16059113 154.22868347]
[80.09864807 146.63877869]
[93.03670502 139.04887390]
[105.97476196 131.45896912]
[81.49114990 122.20455170]
[74.20770264 99.82883453]
[59.88510895 95.37202454]
[45.56251144 90.91520691]
[31.23991394 86.45838928]
[16.91731644 82.00157166]
[6.14423180 92.87351990]
[-8.45080376 97.48258972]
[-23.51395607 94.76965332]
[-35.58382416 85.35812378]
[-41.88684082 71.41070557]
[-40.97461700 56.13240433]
[-33.05677795 43.03406906]
[-19.95278168 35.12559891]
[-4.67383432 34.22430420]
[9.26907635 40.53729248]
[18.67197037 52.61388779]
[21.37413216 67.67897797]
[35.69673157 72.13579559]
[50.01932907 76.59260559]
[64.34192657 81.04942322]
[78.66452026 85.50624084]
[110.06460571 72.90160370]
[131.81155396 103.65914917]
[136.41711426 89.38368988]
[136.07809448 80.18929291]
[141.26983643 74.86092377]
[146.17138672 60.68436432]
[151.07293701 46.50780487]
[153.55804443 31.71509743]
[153.55804443 16.71509743]
[153.55804443 1.71509731]
[139.06053162 -2.52738047]
[126.34625244 -10.68359280]
[116.44590759 -22.09235191]
[110.16206360 -35.82880020]
[108.00412750 -50.77938461]
[110.14704132 -65.73213196]
[116.41708374 -79.47488403]
[126.30596161 -90.89358521]
[139.01203918 -99.06256104]
[153.50529480 -103.31960297]
[168.61080933 -103.31960297]
[183.10406494 -99.06256104]
[195.81013489 -90.89358521]
[205.69902039 -79.47488403]
[211.96905518 -65.73213196]
[214.11196899 -50.77938461]
[211.95404053 -35.82880020]
[205.67019653 -22.09235191]
[195.76985168 -10.68359280]
[183.05557251 -2.52738047]
[168.55804443 1.71509731]
[168.55804443 16.71509743]
[168.55804443 31.71509743]
[176.61143494 19.06033707]
[188.44853210 9.84711838]
[202.69302368 5.14665270]
[217.68872070 5.50545979]
[231.69210815 10.88182068]
[243.07501221 20.65063095]
[250.51393127 33.67607880]
[253.14398193 48.44371033]
[250.65934753 63.23649979]
[243.34892273 76.33450317]
[232.06268311 86.21482849]
[218.11288452 91.72869873]
[203.12142944 92.23501587]
[188.83137512 87.67491913]
[176.90422058 78.57859802]
[168.72673035 66.00368500]
[165.24949646 51.40935516]
[160.34794617 65.58591461]
[155.44639587 79.76247406]
[150.69258118 93.98925018]
[146.08700562 108.26470947]
[154.07691956 120.95964050]
[168.93997192 122.98197174]
[183.80302429 125.00431061]
[198.66606140 127.02664185]
[211.09274292 117.26174164]
[226.77438354 119.22682953]
[236.40736389 131.75604248]
[234.27659607 147.41604614]
[221.64622498 156.91601562]
[206.00962830 154.61979675]
[196.64373779 141.88969421]
[181.78068542 139.86735535]
[166.91763306 137.84501648]
[152.05459595 135.82269287]
[141.95594788 146.91400146]
[145.35891724 161.52288818]
[148.76190186 176.13179016]
[159.42823792 187.81681824]
[154.78005981 201.96755981]
[160.52337646 188.11064148]
[171.62971497 178.02851868]
[185.97598267 173.64848328]
[200.81973267 175.80781555]
[213.32347107 184.09376526]
[221.09693909 196.92236328]
[222.65420532 211.84130859]
[217.69755554 225.99868774]
[207.17451477 236.68820190]
[193.09664917 241.86642456]
[178.15510559 240.54348755]
[165.20608521 232.97227478]
[156.72549438 220.60150146]
[156.41343689 235.59826660]
[156.10137939 250.59501648]
[155.78932190 265.59176636]
[155.47726440 280.58853149]
[155.16520691 295.58526611]
[154.85316467 310.58203125]
[154.54110718 325.57879639]
[154.22904968 340.57553101]
[153.91699219 355.57229614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 128]
[14 126]
[15 125]
[16 124]
[17 33]
[18 32]
[19 31]
[20 30]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[57 109]
[58 108]
[60 107]
[61 106]
[62 105]
[63 88]
[64 87]
[65 86]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
