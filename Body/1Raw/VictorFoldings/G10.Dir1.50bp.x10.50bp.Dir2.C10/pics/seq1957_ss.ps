%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUxxxxxxxxxxGAGCUGUCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.95965004 461.74935913]
[20.95965004 446.74935913]
[20.95965004 431.74935913]
[20.95965004 416.74935913]
[20.95965004 401.74935913]
[20.95965004 386.74935913]
[20.95965004 371.74935913]
[20.95965004 356.74935913]
[20.95965004 341.74935913]
[20.95965004 326.74935913]
[6.02099514 329.95956421]
[-6.00151396 323.48336792]
[-19.23475266 330.54602051]
[-32.46799088 337.60870361]
[-37.22677231 354.41458130]
[-52.35685730 362.44598389]
[-68.30288696 357.18154907]
[-81.39215851 364.50759888]
[-85.14694214 370.05914307]
[-90.36845398 372.47583008]
[-95.15496063 371.85290527]
[-108.52686310 378.64938354]
[-121.89877319 385.44586182]
[-135.27067566 392.24237061]
[-139.93060303 407.34402466]
[-153.94299316 414.65350342]
[-168.99456787 409.83416748]
[-176.15547180 395.74526978]
[-171.17727661 380.74548340]
[-157.01345825 373.73394775]
[-142.06715393 378.87045288]
[-128.69525146 372.07397461]
[-115.32334900 365.27749634]
[-101.95144653 358.48101807]
[-88.71820831 351.41833496]
[-75.62892914 344.09228516]
[-73.88567352 331.29275513]
[-64.94249725 321.70315552]
[-51.91387939 318.99276733]
[-39.53066635 324.37545776]
[-26.29743004 317.31280518]
[-13.06419182 310.25012207]
[-7.87180424 293.51596069]
[10.02202511 287.22207642]
[26.95730972 298.62481689]
[33.07663345 284.92977905]
[39.19595718 271.23477173]
[45.31528473 257.53973389]
[50.32003021 243.39927673]
[54.17814636 228.90393066]
[58.03626633 214.40859985]
[61.89438629 199.91325378]
[65.75251007 185.41790771]
[61.54907608 171.12873840]
[72.57557678 159.78295898]
[66.77504730 149.12794495]
[69.91201782 136.99372864]
[80.82694244 130.05316162]
[84.97432709 115.63791656]
[89.12170410 101.22267151]
[89.87177277 86.24143982]
[87.18498230 71.48403168]
[72.14109039 70.42003632]
[57.83469009 65.64743042]
[45.16510010 57.46621323]
[34.92874146 46.39066696]
[27.76907539 33.11700821]
[24.13616753 18.47963142]
[24.25838470 3.39865446]
[28.12804604 -11.17792034]
[35.50189972 -24.33379745]
[45.91641998 -35.24198914]
[58.71693802 -43.21679306]
[73.09880829 -47.75690842]
[88.15796661 -48.57693863]
[102.94779205 -45.62533951]
[116.53857422 -39.08764648]
[128.07598877 -29.37482834]
[136.83479309 -17.09743881]
[142.26438904 -3.02724624]
[144.02346802 11.95128727]
[142.00144958 26.89659691]
[136.32545471 40.86920929]
[127.35227203 52.99079132]
[115.64595795 62.49937439]
[101.94239044 68.79724121]
[104.62918091 83.55464935]
[119.35897827 86.38895416]
[127.33037567 73.68238831]
[135.30177307 60.97582626]
[135.36219788 44.57678986]
[149.72688293 36.66553497]
[163.61866760 45.38048172]
[162.74688721 61.75643921]
[148.00834656 68.94722748]
[140.03694153 81.65379333]
[132.06553650 94.36035156]
[142.93409729 104.69836426]
[155.22615051 96.10154724]
[167.51821899 87.50473785]
[173.96301270 72.42505646]
[190.27488708 70.73548889]
[199.67358398 84.17411041]
[192.49052429 98.91641998]
[176.11503601 99.79679871]
[163.82296753 108.39360809]
[151.53091431 116.99042511]
[137.40484619 119.75756073]
[124.09398651 118.44706726]
[112.53229523 113.45526123]
[103.53694916 105.37005615]
[99.38956451 119.78530121]
[95.24218750 134.20054626]
[100.11088562 151.93254089]
[87.07092285 163.64106750]
[90.99839020 178.96705627]
[80.24784851 189.27603149]
[76.38973236 203.77137756]
[72.53160858 218.26670837]
[68.67349243 232.76205444]
[64.81536865 247.25740051]
[77.51526642 239.27537537]
[92.49099731 240.12826538]
[104.20254517 249.50054932]
[108.31740570 263.92510986]
[103.31336212 278.06582642]
[91.04157257 286.69152832]
[76.04178619 286.61135864]
[63.86292648 277.85488892]
[59.01031494 263.65905762]
[52.89099121 277.35409546]
[46.77166367 291.04913330]
[40.65233994 304.74414062]
[50.53268814 293.45791626]
[64.06081390 286.97796631]
[79.04777527 286.35275269]
[93.06860352 291.68344116]
[103.85464478 302.10754395]
[109.66065216 315.93829346]
[109.54718018 330.93786621]
[103.53258514 344.67922974]
[92.59007263 354.93893433]
[78.49019623 360.05688477]
[63.51440811 359.20498657]
[50.08587265 352.52111816]
[40.37740707 341.08670044]
[35.95964813 326.74935913]
[35.95964813 341.74935913]
[35.95964813 356.74935913]
[35.95964813 371.74935913]
[35.95964813 386.74935913]
[35.95964813 401.74935913]
[35.95964813 416.74935913]
[35.95964813 431.74935913]
[35.95964813 446.74935913]
[35.95964813 461.74935913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[12 42]
[13 41]
[14 40]
[17 36]
[18 35]
[21 34]
[22 33]
[23 32]
[24 31]
[45 133]
[46 132]
[47 131]
[48 130]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[55 115]
[58 113]
[59 112]
[60 111]
[61 87]
[62 86]
[88 97]
[89 96]
[90 95]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
