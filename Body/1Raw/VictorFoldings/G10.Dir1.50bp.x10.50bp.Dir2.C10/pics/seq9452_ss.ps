%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGxxxxxxxxxxAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.58289337 400.38256836]
[101.58289337 385.38256836]
[101.58289337 370.38256836]
[101.58289337 355.38256836]
[101.58289337 340.38256836]
[101.58289337 325.38256836]
[101.58289337 310.38256836]
[101.58289337 295.38256836]
[101.58289337 280.38256836]
[101.58289337 265.38256836]
[86.52450562 262.04168701]
[72.57418823 255.44476318]
[60.42655563 245.91688538]
[50.68724442 233.92913818]
[43.84267807 220.07537842]
[40.23578644 205.04273987]
[40.04882812 189.57762146]
[43.29416656 174.44859314]
[49.81352997 160.40817261]
[59.28570175 148.15548706]
[71.24236298 138.30136108]
[85.09123993 131.33789062]
[100.14543915 127.61392212]
[78.32752991 110.23703766]
[84.37134552 87.00910187]
[77.18883514 73.84052277]
[70.00632477 60.67193604]
[62.82381821 47.50335312]
[55.64130783 34.33477020]
[48.45880127 21.16618919]
[34.67393112 27.10774231]
[20.39964485 31.75202942]
[5.75772715 35.05942535]
[-9.12690163 37.00170898]
[-24.12724686 37.56231689]
[-39.11532974 36.73645782]
[-53.96327209 34.53118515]
[-68.54439545 30.96530724]
[-82.73429871 26.06925201]
[-96.41191101 19.88478851]
[-109.46053314 12.46468449]
[-121.76885223 3.87224555]
[-133.23184204 -5.81921911]
[-143.75170898 -16.52702332]
[-153.23869324 -28.15980911]
[-161.61186218 -40.61832809]
[-168.79977417 -53.79628754]
[-174.74108887 -67.58125305]
[-179.38514709 -81.85562134]
[-182.69229126 -96.49759674]
[-184.63433838 -111.38225555]
[-185.19468689 -126.38260651]
[-184.36857605 -141.37068176]
[-182.16305542 -156.21858215]
[-178.59693909 -170.79965210]
[-173.70065308 -184.98947144]
[-167.51596069 -198.66697693]
[-160.09564209 -211.71548462]
[-151.50299072 -224.02365112]
[-141.81134033 -235.48648071]
[-131.10336304 -246.00616455]
[-119.47041321 -255.49296570]
[-107.01174927 -263.86593628]
[-93.83367157 -271.05361938]
[-80.04860687 -276.99468994]
[-65.77416992 -281.63851929]
[-51.13213730 -284.94543457]
[-36.24744415 -286.88720703]
[-21.24707985 -287.44732666]
[-6.25902557 -286.62097168]
[8.58884335 -284.41519165]
[23.16984940 -280.84881592]
[37.35958481 -275.95230103]
[51.03699112 -269.76739502]
[64.08537292 -262.34683228]
[76.39340210 -253.75399780]
[87.85607147 -244.06214905]
[98.37557983 -233.35398865]
[107.86217499 -221.72088623]
[116.23493195 -209.26210022]
[123.42240143 -196.08389282]
[129.36326599 -182.29873657]
[134.00683594 -168.02421570]
[137.31350708 -153.38212585]
[139.25505066 -138.49740601]
[139.81489563 -123.49702454]
[138.98829651 -108.50898743]
[136.78227234 -93.66115570]
[133.21566772 -79.08020782]
[128.31890869 -64.89055634]
[122.13375854 -51.21324921]
[114.71300507 -38.16499329]
[106.11994934 -25.85710716]
[96.42790985 -14.39459991]
[85.71958160 -3.87526965]
[74.08631897 5.61113596]
[61.62738419 13.98367977]
[68.80989075 27.15226173]
[75.99240112 40.32084656]
[83.17491150 53.48942947]
[90.35741425 66.65801239]
[97.53992462 79.82659149]
[110.27888489 79.70076752]
[121.95452118 87.66209412]
[127.53016663 102.15408325]
[142.46447754 103.55638123]
[157.39877319 104.95868683]
[172.33308411 106.36099243]
[186.79615784 99.94771576]
[198.74435425 108.84095764]
[213.67866516 110.24326324]
[228.61297607 111.64556885]
[240.62268066 101.37218475]
[256.37249756 102.68323517]
[266.51834106 114.80089569]
[265.04083252 130.53596497]
[252.81658936 140.55311584]
[237.09800720 138.90934753]
[227.21066284 126.57987213]
[212.27635193 125.17757416]
[197.34205627 123.77526855]
[183.94717407 130.28884888]
[170.93078613 121.29529572]
[155.99647522 119.89299774]
[141.06216431 118.49069214]
[126.12786102 117.08838654]
[115.14219666 127.30186462]
[129.47731018 130.12384033]
[142.90126038 135.87527466]
[154.82292175 144.30009460]
[164.71789551 155.02464294]
[172.15156555 167.57412720]
[176.79821777 181.39367676]
[178.45530701 195.87290955]
[177.05226135 210.37284851]
[172.65348816 224.25416565]
[165.45544434 236.90527344]
[155.77784729 247.76943970]
[144.04948425 256.36907959]
[130.78916931 262.32696533]
[116.58289337 265.38256836]
[116.58289337 280.38256836]
[116.58289337 295.38256836]
[116.58289337 310.38256836]
[116.58289337 325.38256836]
[116.58289337 340.38256836]
[116.58289337 355.38256836]
[116.58289337 370.38256836]
[116.58289337 385.38256836]
[116.58289337 400.38256836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[105 126]
[106 125]
[107 124]
[108 123]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
