%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAAxxxxxxxxxxUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 279.07821655]
[92.50000000 264.07821655]
[92.50000000 249.07821655]
[92.50000000 234.07821655]
[92.50000000 219.07821655]
[92.50000000 204.07821655]
[92.50000000 189.07821655]
[92.50000000 174.07821655]
[92.50000000 159.07821655]
[92.50000000 144.07821655]
[81.92747498 140.89649963]
[72.45696259 135.22102356]
[61.36564636 145.31967163]
[50.27433395 155.41831970]
[39.28866959 165.63180542]
[28.40984344 175.95899963]
[17.53101730 186.28620911]
[13.39749813 202.15586853]
[-2.48249364 206.24951172]
[-13.77298450 194.35594177]
[-8.85928440 178.71025085]
[7.20381260 175.40737915]
[18.08263779 165.08018494]
[28.96146393 154.75297546]
[31.66470718 147.82202148]
[40.17568207 144.32701111]
[51.26699829 134.22836304]
[62.35831451 124.12970734]
[58.21922684 115.92189026]
[55.84614944 107.04107666]
[40.84696198 106.88504028]
[25.84777260 106.72900391]
[10.84858322 106.57295990]
[-4.15060520 106.41692352]
[-14.18825245 118.40774536]
[-29.59403610 121.09024811]
[-43.09381485 113.19785309]
[-48.31340790 98.45709229]
[-42.78828430 83.82811737]
[-29.12723351 76.21827698]
[-13.78059006 79.22069550]
[-3.99456859 91.41773987]
[11.00461960 91.57377625]
[26.00380898 91.72981262]
[41.00299835 91.88584900]
[56.00218582 92.04188538]
[68.02449036 68.74770355]
[91.03758240 56.19572449]
[117.13128662 58.70038223]
[125.12120056 46.00545502]
[133.11111450 33.31052399]
[141.10102844 20.61559486]
[129.89660645 9.17440796]
[121.73146057 -4.59155226]
[117.06859589 -19.89386559]
[116.17059326 -35.85721207]
[119.08476257 -51.56944656]
[125.64073181 -66.13372803]
[135.46034241 -78.71968079]
[147.97952271 -88.61077881]
[162.48060608 -95.24510193]
[178.13359070 -98.24727631]
[194.04350281 -97.44971466]
[209.30168152 -92.90194702]
[216.75659180 -105.91825104]
[224.07569885 -119.01140594]
[231.25820923 -132.17999268]
[238.44071960 -145.34857178]
[225.46527100 -137.82273865]
[211.08508301 -133.55540466]
[196.10485840 -132.78536987]
[181.36291504 -135.55572510]
[167.68420410 -141.71144104]
[155.83419800 -150.90803528]
[146.47602844 -162.63085938]
[140.13339233 -176.22390747]
[137.16120911 -190.92649841]
[137.72583008 -205.91586304]
[141.79563904 -220.35321045]
[149.14289856 -233.43058777]
[159.35644531 -244.41618347]
[171.86471558 -252.69525146]
[185.96775818 -257.80450439]
[200.87634277 -259.45797729]
[215.75619507 -257.56317139]
[229.77459717 -252.22612000]
[242.14710999 -243.74549866]
[252.18133545 -232.59587097]
[259.31576538 -219.40116882]
[263.15112305 -204.89979553]
[263.47283936 -189.90324402]
[260.26284790 -175.25073242]
[253.70123291 -161.76286316]
[266.31234741 -169.88439941]
[278.92349243 -178.00593567]
[279.66021729 -193.50552368]
[289.39288330 -205.59082031]
[304.37911987 -209.61480713]
[318.85638428 -204.03016663]
[327.25790405 -190.98431396]
[326.35308838 -175.49363708]
[316.48986816 -163.51461792]
[301.46087646 -159.65345764]
[287.04504395 -165.39480591]
[274.43389893 -157.27326965]
[261.82278442 -149.15173340]
[251.60929871 -138.16606140]
[244.42678833 -124.99748230]
[237.24427795 -111.82889557]
[236.79966736 -104.40273285]
[229.77290344 -98.46334076]
[222.31799316 -85.44703674]
[232.72570801 -76.01023865]
[240.92646790 -64.59535217]
[246.55328369 -51.70856476]
[249.35345459 -37.92205811]
[249.19979858 -23.84854889]
[246.09649658 -10.11409283]
[240.17898560 2.66978693]
[231.70809937 13.93331718]
[221.05848694 23.17387009]
[208.70214844 29.97839928]
[195.18742371 34.04188919]
[181.11470032 35.18104553]
[167.10978699 33.34253693]
[153.79595947 28.60551071]
[145.80604553 41.30044174]
[137.81613159 53.99536896]
[129.82621765 66.69029999]
[135.49613953 72.81243896]
[139.92974854 79.88150024]
[142.97264099 87.65126801]
[144.51882935 95.85114288]
[144.51446533 104.19551086]
[142.95968628 112.39376068]
[139.90864563 120.16033936]
[135.46762085 127.22474670]
[129.79129028 133.34094238]
[123.07734680 138.29588318]
[115.55963898 141.91702271]
[107.50000000 144.07821655]
[107.50000000 159.07821655]
[107.50000000 174.07821655]
[107.50000000 189.07821655]
[107.50000000 204.07821655]
[107.50000000 219.07821655]
[107.50000000 234.07821655]
[107.50000000 249.07821655]
[107.50000000 264.07821655]
[107.50000000 279.07821655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 28]
[13 27]
[14 26]
[15 24]
[16 23]
[17 22]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[49 129]
[50 128]
[51 127]
[52 126]
[64 112]
[65 111]
[66 109]
[67 108]
[68 107]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
