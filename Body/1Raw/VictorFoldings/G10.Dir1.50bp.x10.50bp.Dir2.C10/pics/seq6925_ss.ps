%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAxxxxxxxxxxGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.46564484 255.59881592]
[94.46564484 240.59881592]
[94.46564484 225.59881592]
[94.46564484 210.59881592]
[94.46564484 195.59881592]
[94.46564484 180.59881592]
[94.46564484 165.59881592]
[94.46564484 150.59881592]
[94.46564484 135.59881592]
[94.46564484 120.59881592]
[88.03644562 116.73677826]
[80.84506226 129.90051270]
[76.95465088 144.38722229]
[61.99737930 145.51855469]
[55.97220993 131.78184509]
[66.93419647 121.54421234]
[75.17804718 109.01268768]
[68.74884033 105.15065002]
[55.50625610 112.19578552]
[42.26367188 119.24092102]
[42.41318130 134.54570007]
[35.42276382 148.16159058]
[22.89876556 156.95977783]
[7.71910715 158.91848755]
[-6.62803602 153.58763123]
[-16.84579468 142.19218445]
[-20.58620453 127.35076141]
[-16.98974419 112.47380066]
[-6.88285589 100.97991180]
[7.41197252 95.51031494]
[22.60989380 97.32188416]
[35.21853638 105.99832916]
[48.46112061 98.95319366]
[61.70370865 91.90805817]
[70.08103943 85.43571472]
[78.99771118 82.38833618]
[87.33957672 82.56980133]
[94.13571167 85.46153259]
[89.53014374 71.18607330]
[84.92458344 56.91061401]
[80.31901550 42.63515472]
[75.71345520 28.35969353]
[71.10788727 14.08423328]
[67.13388824 10.50276089]
[65.17206573 6.17799234]
[65.16347504 2.01847219]
[66.69052124 -1.22738612]
[61.50610733 -8.82828426]
[63.06180573 -16.10327148]
[59.65882874 -30.71216393]
[48.99248886 -42.39719009]
[53.64067459 -56.54793549]
[50.23769760 -71.15682983]
[46.68293381 -85.72953033]
[42.97677231 -100.26446533]
[27.93282509 -99.65348816]
[13.09065819 -102.18406677]
[-0.90088832 -107.74556732]
[-13.43016624 -116.09487152]
[-23.94944954 -126.86698151]
[-31.99887848 -139.59098816]
[-37.22657013 -153.71064758]
[-39.40398788 -168.60871887]
[-38.43594742 -183.63392639]
[-34.36476517 -198.12940979]
[-27.36841583 -211.46150208]
[-17.75275421 -223.04739380]
[-5.93812990 -232.38058472]
[7.55896902 -239.05305481]
[22.14850807 -242.77314758]
[37.19269562 -243.37820435]
[52.03386688 -240.84179688]
[66.02322388 -235.27478027]
[78.54921722 -226.92054749]
[89.06426239 -216.14430237]
[97.10868073 -203.41712952]
[102.33081818 -189.29541016]
[104.50237274 -174.39648438]
[103.52841949 -159.37167358]
[99.45153809 -144.87777710]
[92.44994354 -131.54843140]
[82.82972717 -119.96633911]
[71.01142883 -110.63780212]
[57.51170731 -103.97062683]
[61.21786880 -89.43569183]
[65.94871521 -83.69419861]
[64.84658813 -74.55980682]
[68.24956512 -59.95091629]
[78.67250061 -49.31081772]
[74.26772308 -34.11514282]
[77.67070007 -19.50625038]
[81.22546387 -4.93354750]
[85.38334656 9.47866917]
[89.98891449 23.75412941]
[94.59447479 38.02959061]
[99.20004272 52.30504990]
[103.80560303 66.58051300]
[108.41117096 80.85597229]
[121.26956940 88.58005524]
[136.03562927 85.94119263]
[150.80168152 83.30233002]
[165.56773376 80.66346741]
[170.94387817 76.63796997]
[176.68028259 76.06787109]
[181.00202942 78.23536682]
[195.86506653 76.21303558]
[210.72811890 74.19069672]
[221.54469299 62.34243774]
[237.54180908 63.55562973]
[246.44784546 76.89962006]
[241.43086243 92.13803864]
[226.33944702 97.58127594]
[212.75045776 89.05374908]
[197.88740540 91.07608032]
[183.02436829 93.09841919]
[168.20660400 95.42951965]
[153.44055176 98.06838226]
[138.67449951 100.70724487]
[123.90843964 103.34611511]
[138.13200378 108.10951233]
[152.35557556 112.87291718]
[166.57914734 117.63632202]
[181.50749207 116.17187500]
[196.15370178 119.41046906]
[209.07281494 127.03256989]
[218.99026489 138.28620911]
[224.92758179 152.06112671]
[226.29902649 166.99829102]
[222.96929932 181.62405396]
[215.26687622 194.49545288]
[203.95169067 204.34260559]
[190.14007568 210.19403076]
[175.19465637 211.47244263]
[160.58992004 208.05168152]
[147.76673889 200.26925659]
[137.99023438 188.89295959]
[132.22492981 175.04518127]
[131.03979492 160.09002686]
[123.84841156 146.92630005]
[116.65702820 133.76255798]
[109.46564484 120.59881592]
[109.46564484 135.59881592]
[109.46564484 150.59881592]
[109.46564484 165.59881592]
[109.46564484 180.59881592]
[109.46564484 195.59881592]
[109.46564484 210.59881592]
[109.46564484 225.59881592]
[109.46564484 240.59881592]
[109.46564484 255.59881592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 34]
[19 33]
[20 32]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[47 92]
[49 91]
[50 90]
[52 88]
[53 87]
[54 85]
[55 84]
[99 119]
[100 118]
[101 117]
[102 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
