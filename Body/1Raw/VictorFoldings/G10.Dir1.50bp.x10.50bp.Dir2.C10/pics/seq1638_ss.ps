%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUxxxxxxxxxxCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.94404602 353.94531250]
[142.94404602 338.94531250]
[142.94404602 323.94531250]
[142.94404602 308.94531250]
[142.94404602 293.94531250]
[142.94404602 278.94531250]
[142.94404602 263.94531250]
[142.94404602 248.94529724]
[142.94404602 233.94529724]
[142.94404602 218.94529724]
[139.69320679 204.30180359]
[133.34608459 190.71084595]
[120.95015717 182.45310974]
[122.12120819 166.67530823]
[115.77407837 153.08435059]
[109.42694855 139.49340820]
[103.70999146 134.73294067]
[103.09243774 125.55304718]
[96.19026184 127.70100403]
[88.41889954 127.87388611]
[80.36521912 125.78067780]
[72.70323944 121.30784607]
[66.14035034 114.54331970]
[52.61616135 121.03148651]
[39.09197235 127.51965332]
[27.42651939 139.82223511]
[12.37540722 132.01837158]
[15.70773411 115.39513397]
[32.60380554 113.99546051]
[46.12799835 107.50729370]
[59.65218735 101.01912689]
[57.32108307 86.20137024]
[42.45803452 84.17903900]
[27.59498978 82.15670013]
[12.73194218 80.13436890]
[-2.13110495 78.11203003]
[-16.99415207 76.08969879]
[-28.44664001 86.73744965]
[-44.06653976 87.48094177]
[-56.47860718 77.96913147]
[-59.82225037 62.69320297]
[-52.51869965 48.86597824]
[-38.01646805 43.01625443]
[-23.16306686 47.90608597]
[-14.97181702 61.22665405]
[-0.10877044 63.24898529]
[14.75427628 65.27132416]
[29.61732292 67.29365540]
[44.48036957 69.31598663]
[59.34341812 71.33832550]
[71.60578156 62.69920731]
[74.70410919 48.02268219]
[77.80242920 33.34615707]
[80.90074921 18.66963196]
[83.99906921 3.99310637]
[87.09739685 -10.68341923]
[90.19571686 -25.35994530]
[92.37255096 -40.20114899]
[93.61943054 -55.14923859]
[94.86630249 -70.09732056]
[96.11317444 -85.04541016]
[82.96678925 -77.82236481]
[69.04225159 -83.39975739]
[64.51728058 -97.70096588]
[72.69925690 -110.27296448]
[87.60782623 -111.92664337]
[98.34579468 -101.45391083]
[101.13811493 -116.19171143]
[103.93044281 -130.92951965]
[90.40074158 -137.62651062]
[79.18035126 -147.72628784]
[71.10191345 -160.47938538]
[66.76489258 -174.93942261]
[66.49111938 -190.03338623]
[70.30092621 -204.64118958]
[77.91158295 -217.67884827]
[88.75833130 -228.17887878]
[102.03627777 -235.36209106]
[116.76010895 -238.69548035]
[131.83721924 -237.93165588]
[146.14877319 -233.12730408]
[158.63278198 -224.63894653]
[168.36283875 -213.09646606]
[174.61689758 -199.35641479]
[176.93087769 -184.43836975]
[175.13307190 -169.44935608]
[169.35687256 -155.50166321]
[160.03091431 -143.63029480]
[147.84725952 -134.71620178]
[133.71002197 -129.42085266]
[118.66824341 -128.13719177]
[115.87592316 -113.39939117]
[113.08359528 -98.66158295]
[111.06126404 -83.79853821]
[109.81439209 -68.85044861]
[108.56751251 -53.90236282]
[107.32064056 -38.95427704]
[119.68965912 -47.43999481]
[134.47019958 -44.88356018]
[143.27056885 -32.73639679]
[141.09431458 -17.89510536]
[129.17700195 -8.78589058]
[114.28475189 -10.58054447]
[104.87223816 -22.26162338]
[101.77391815 -7.58509731]
[98.67559814 7.09142828]
[95.57727814 21.76795387]
[92.47895813 36.44448090]
[89.38063049 51.12100601]
[86.28231049 65.79753113]
[117.48497772 71.83969879]
[129.35360718 97.70394135]
[116.81249237 119.49002838]
[123.01789856 133.14627075]
[129.36503601 146.73722839]
[135.71215820 160.32817078]
[148.56207275 169.55802917]
[146.93704224 184.36372375]
[153.28416443 197.95466614]
[154.90609741 183.04261780]
[160.42002869 169.09283447]
[169.43202209 157.10183716]
[181.29832458 147.92626953]
[195.17118835 142.22158813]
[210.05960083 140.39533997]
[224.89996338 142.57798767]
[238.63209534 148.61358643]
[250.27500916 158.07099915]
[258.99697876 170.27458191]
[264.17489624 184.35253906]
[265.43887329 199.29919434]
[262.69863892 214.04676819]
[256.14990234 227.54173279]
[246.26054382 238.82005310]
[233.73699951 247.07601929]
[219.47393799 251.71983337]
[204.49028015 252.41976929]
[189.85643005 249.12580872]
[176.61778259 242.07327271]
[165.72007751 231.76599121]
[157.94404602 218.94529724]
[157.94404602 233.94529724]
[157.94404602 248.94529724]
[157.94404602 263.94531250]
[157.94404602 278.94531250]
[157.94404602 293.94531250]
[157.94404602 308.94531250]
[157.94404602 323.94531250]
[157.94404602 338.94531250]
[157.94404602 353.94531250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[14 116]
[15 115]
[16 114]
[18 113]
[23 31]
[24 30]
[25 29]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 97]
[59 96]
[60 95]
[61 94]
[67 93]
[68 92]
[69 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
