%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUxxxxxxxxxxACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.20149231 257.47253418]
[98.59361267 242.48486328]
[97.98572540 227.49719238]
[97.37784576 212.50950623]
[96.76995850 197.52183533]
[96.16207886 182.53416443]
[95.55419159 167.54647827]
[94.94631195 152.55880737]
[81.98133850 145.01496887]
[68.65091705 151.89245605]
[55.32049942 158.76994324]
[41.99007797 165.64744568]
[28.65965652 172.52493286]
[28.91764832 184.08546448]
[24.83449554 194.84889221]
[17.04382896 203.25399780]
[6.71398878 208.09718323]
[-4.62708712 208.70480347]
[-15.31783676 205.02655029]
[-23.80650902 197.63723755]
[-37.53022385 203.69197083]
[-51.25393677 209.74668884]
[-64.97764587 215.80142212]
[-66.55488586 231.07911682]
[-75.57266235 243.51194763]
[-89.60522461 249.75555420]
[-104.87789917 248.13043213]
[-117.28240967 239.07373047]
[-123.48200226 225.02166748]
[-121.80901337 209.75416565]
[-112.71347809 197.37809753]
[-98.64204407 191.22259521]
[-83.37985992 192.94342041]
[-71.03237152 202.07769775]
[-57.30866241 196.02297974]
[-43.58494568 189.96826172]
[-29.86123466 183.91352844]
[-27.03329468 165.49929810]
[-13.62030315 152.35598755]
[5.14293814 149.86332703]
[21.78216553 159.19450378]
[35.11258698 152.31701660]
[48.44300461 145.43952942]
[61.77342606 138.56204224]
[75.10384369 131.68453979]
[68.10191345 92.05034637]
[95.50589752 74.94788361]
[97.32555389 60.05866623]
[99.14521027 45.16944504]
[100.96486664 30.28022766]
[102.78452301 15.39100838]
[95.45191956 4.73325348]
[97.31138611 -7.66301012]
[106.81952667 -15.20048237]
[108.94057465 -30.04976463]
[111.06161499 -44.89904785]
[113.18265533 -59.74832916]
[115.30370331 -74.59761047]
[113.41286469 -83.59571838]
[117.62115479 -89.72515106]
[120.04270935 -104.52839661]
[122.46427155 -119.33164215]
[124.88582611 -134.13488770]
[115.22861481 -122.65715790]
[103.06066132 -113.88555908]
[89.11890411 -108.35134888]
[74.24772644 -106.38969421]
[59.34779358 -108.11940002]
[45.32150269 -113.43571472]
[33.01835632 -122.01665497]
[23.18348122 -133.34251404]
[16.41252327 -146.72737122]
[13.11556339 -161.36054993]
[13.49227905 -176.35581970]
[17.51985359 -190.80499268]
[24.95436287 -203.83296204]
[35.34553528 -214.65071106]
[48.06403732 -222.60304260]
[62.33958054 -227.20835876]
[77.30757904 -228.18771362]
[92.06149292 -225.48181152]
[105.70777130 -219.25451660]
[117.41992950 -209.88299561]
[126.48862457 -197.93482971]
[132.36462402 -184.13365173]
[134.69204712 -169.31532288]
[133.32916260 -154.37371826]
[135.18109131 -170.08615112]
[148.92160034 -175.83486938]
[157.73837280 -187.97012329]
[156.65896606 -203.97682190]
[168.59722900 -214.69396973]
[184.39517212 -211.90028381]
[191.93395996 -197.73884583]
[185.43046570 -183.07308960]
[169.87364197 -179.15333557]
[161.05685425 -167.01808167]
[159.83555603 -152.17362976]
[145.46441650 -145.55693054]
[139.68907166 -131.71333313]
[137.26751709 -116.91007996]
[134.84596252 -102.10683441]
[132.42440796 -87.30358887]
[130.15298462 -72.47657013]
[128.03193665 -57.62728500]
[125.91089630 -42.77800369]
[123.78985596 -27.92872238]
[121.66881561 -13.07944012]
[129.08868408 2.79611969]
[117.67374420 17.21066666]
[115.85408783 32.09988403]
[114.03443146 46.98910522]
[112.21476746 61.87832260]
[110.39511108 76.76753998]
[130.95024109 88.91995239]
[136.06181335 117.97982788]
[150.72340393 121.14804840]
[165.38500977 124.31626892]
[178.53112793 115.54388428]
[194.01330566 118.71846771]
[202.64620972 131.95661926]
[199.30812073 147.40435791]
[185.97944641 155.89682007]
[170.56785583 152.39558411]
[162.21678162 138.97787476]
[147.55519104 135.80964661]
[132.89358521 132.64141846]
[127.15369415 137.46879578]
[138.50152588 147.27832031]
[149.84936523 157.08782959]
[161.19718933 166.89735413]
[172.54502869 176.70687866]
[186.70184326 181.66514587]
[195.56761169 193.76464844]
[196.02975464 208.75752258]
[187.92601013 221.38009644]
[174.10144043 227.20085144]
[159.40954590 224.17625427]
[149.00833130 213.36816406]
[146.54966736 198.56950378]
[138.83071899 185.70800781]
[131.11177063 172.84652710]
[123.39282990 159.98503113]
[115.67388916 147.12355042]
[109.93399048 151.95091248]
[110.54187012 166.93859863]
[111.14975739 181.92626953]
[111.75763702 196.91395569]
[112.36552429 211.90162659]
[112.97340393 226.88931274]
[113.58129120 241.87698364]
[114.18917084 256.86465454]
[120.87243652 272.44573975]
[107.75037384 283.18109131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[20 37]
[21 36]
[22 35]
[23 34]
[47 114]
[48 113]
[49 112]
[50 111]
[51 110]
[54 108]
[55 107]
[56 106]
[57 105]
[58 104]
[60 103]
[61 102]
[62 101]
[63 100]
[87 99]
[89 97]
[90 96]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
