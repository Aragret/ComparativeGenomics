%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCxxxxxxxxxxUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.37394714 241.85165405]
[95.06994629 226.85473633]
[94.76594543 211.85780334]
[94.46193695 196.86088562]
[94.15793610 181.86396790]
[93.85392761 166.86705017]
[93.54992676 151.87013245]
[93.24591827 136.87321472]
[92.94191742 121.87629700]
[78.77294159 116.95286560]
[69.23502350 128.52992249]
[59.69711304 140.10697937]
[64.50813293 154.76499939]
[60.60858536 169.69139099]
[49.24279785 180.12318420]
[34.03755188 182.73164368]
[19.84478951 176.68441772]
[11.19336510 163.91114807]
[10.84391880 148.48774719]
[18.90795708 135.33575439]
[32.81227493 128.65193176]
[48.12005615 130.56906128]
[57.65797043 118.99200439]
[67.19588470 107.41495514]
[69.91696167 92.66382599]
[65.13737488 78.44568634]
[60.35778809 64.22754669]
[55.57820129 50.00940323]
[50.79861450 35.79125977]
[46.01902771 21.57311821]
[39.96430206 7.84940577]
[32.68477249 -5.26579332]
[25.40524483 -18.38099289]
[18.12571526 -31.49619102]
[5.92904520 -35.80850220]
[0.14704296 -46.93025589]
[3.40887594 -58.61694336]
[-3.60335326 -71.87698364]
[-16.89447784 -80.45932770]
[-16.00445366 -95.32731628]
[-23.01668358 -108.58735657]
[-30.02891350 -121.84738922]
[-40.25270844 -132.82345581]
[-52.98237228 -140.75791931]
[-65.71203613 -148.69238281]
[-78.44170380 -156.62683105]
[-91.17136383 -164.56129456]
[-103.90103149 -172.49575806]
[-116.63069153 -180.43022156]
[-131.96731567 -176.61399841]
[-145.46716309 -184.83161926]
[-149.12103271 -200.20773315]
[-140.76113892 -213.61994934]
[-125.34725189 -217.11105347]
[-112.02416992 -208.60981750]
[-108.69623566 -193.15988159]
[-95.96656799 -185.22541809]
[-83.23690796 -177.29095459]
[-70.50724030 -169.35650635]
[-57.77757645 -161.42204285]
[-45.04791260 -153.48757935]
[-32.31824875 -145.55311584]
[-39.13611603 -158.91413879]
[-42.86995316 -173.44198608]
[-43.33932877 -188.43464661]
[-40.52156448 -203.16760254]
[-34.55281830 -216.92892456]
[-25.72152519 -229.05361938]
[-14.45443916 -238.95578003]
[-1.29602420 -246.15690613]
[13.11786175 -250.30900574]
[28.09069061 -251.21142578]
[42.89892578 -248.82058716]
[56.82698822 -243.25199890]
[69.20182037 -234.77476501]
[79.42543793 -223.79853821]
[87.00379181 -210.85371399]
[91.57067871 -196.56582642]
[92.90541077 -181.62533569]
[90.94348907 -166.75419617]
[85.77971649 -152.67102051]
[77.66362762 -140.05639648]
[66.98741150 -129.51985168]
[54.26698685 -121.57059479]
[40.11704636 -116.59272766]
[25.22135735 -114.82681274]
[10.29973125 -116.35817719]
[-3.92676950 -121.11283112]
[-16.76887321 -128.85961914]
[-9.75664425 -115.59957886]
[-2.74441504 -102.33954620]
[10.04514885 -94.70565033]
[9.65668583 -78.88921356]
[16.66891479 -65.62917328]
[32.00314331 -57.14686966]
[31.24091530 -38.77572250]
[38.52044296 -25.66052246]
[45.79997253 -12.54532337]
[53.07950211 0.56987631]
[56.04533005 -14.13399601]
[66.38569641 -25.00031281]
[80.92446899 -28.69139481]
[95.19593811 -24.07349205]
[104.81651306 -12.56503391]
[106.83113861 2.29905939]
[100.62101746 15.95315647]
[88.09363556 24.20328522]
[73.09687805 24.51535034]
[60.23717117 16.79353142]
[65.01675415 31.01167297]
[69.79634094 45.22981644]
[74.57592773 59.44795609]
[79.35551453 73.66609955]
[84.13510132 87.88423920]
[87.99515533 80.17871094]
[95.52224731 73.99835968]
[105.98094177 71.01512909]
[117.91070557 72.51396179]
[129.32981873 79.09445953]
[138.05532837 90.47643280]
[152.01313782 95.97002411]
[165.97094727 101.46361542]
[180.36082458 94.92856598]
[195.12742615 100.56091309]
[201.50996399 115.01908112]
[195.72181702 129.72529602]
[181.19697571 135.95462036]
[166.55278015 130.01130676]
[160.47735596 115.42142487]
[146.51954651 109.92783356]
[132.56173706 104.43424225]
[126.40601349 108.71875763]
[136.02137756 120.23156738]
[145.63673401 131.74436951]
[155.25210571 143.25718689]
[168.65466309 149.99302673]
[172.77053833 164.41729736]
[164.94081116 177.21163940]
[150.22361755 180.11067200]
[138.12655640 171.24156189]
[136.46464539 156.33364868]
[129.00794983 143.31835938]
[121.55125427 130.30307007]
[114.09455872 117.28778076]
[107.93883514 121.57228851]
[108.24283600 136.56921387]
[108.54684448 151.56613159]
[108.85084534 166.56304932]
[109.15485382 181.55996704]
[109.45885468 196.55688477]
[109.76286316 211.55380249]
[110.06686401 226.55072021]
[110.37087250 241.54763794]
[112.95155334 260.75674438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 24]
[11 23]
[12 22]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 99]
[32 98]
[33 97]
[34 96]
[37 94]
[38 93]
[40 91]
[41 90]
[42 89]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
