%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUxxxxxxxxxxACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[138.75942993 372.72250366]
[138.44737244 357.72573853]
[138.13533020 342.72900391]
[137.82327271 327.73223877]
[137.51121521 312.73547363]
[137.19915771 297.73873901]
[136.88710022 282.74197388]
[136.57504272 267.74523926]
[136.26298523 252.74847412]
[133.77786255 237.95576477]
[129.17230225 223.68029785]
[124.56674194 209.40484619]
[119.96117401 195.12937927]
[108.78778839 193.70245361]
[98.92408752 188.15702820]
[91.83419037 179.27183533]
[88.58711243 168.32449341]
[89.69571686 156.90791321]
[95.03610992 146.69847107]
[103.86018372 139.20993042]
[100.15402222 124.67499542]
[96.44786072 110.14005280]
[90.68270874 110.26697540]
[84.58895874 107.13990021]
[69.65464783 105.73759460]
[54.72034073 104.33528900]
[45.81793594 106.65887451]
[39.49104309 102.74530029]
[50.79171371 112.60912323]
[57.20591736 126.16854858]
[57.66362381 141.16156006]
[52.08847809 155.08699036]
[41.41053772 165.62178040]
[27.41112137 171.00846863]
[12.42564964 170.34843445]
[-1.04596651 163.75180054]
[-10.75635910 152.31903076]
[-15.08561707 137.95736694]
[-13.31152248 123.06264496]
[-5.73003435 110.11965179]
[6.39408493 101.28756714]
[21.03684044 98.03979492]
[7.13428402 92.40783691]
[-6.76827192 86.77588654]
[-22.04291153 91.68148804]
[-35.32152176 82.67826080]
[-36.41789246 66.67271423]
[-24.49098015 55.94293213]
[-8.69009113 58.71988297]
[-1.13631523 72.87332916]
[12.76624107 78.50528717]
[26.66879654 84.13723755]
[41.20373154 87.84339905]
[56.12264633 89.40098572]
[71.05695343 90.80328369]
[85.99125671 92.20558929]
[99.08441162 84.88648224]
[105.71291351 71.43051910]
[112.34141541 57.97455215]
[118.96990967 44.51858902]
[125.59841156 31.06262207]
[132.22691345 17.60665703]
[138.85540771 4.15069151]
[143.31222534 -10.17190552]
[145.48905945 -25.01311111]
[147.66589355 -39.85431671]
[133.65916443 -45.41383743]
[121.31245422 -54.05416870]
[111.29158783 -65.30934906]
[104.13700104 -78.57239532]
[100.23451233 -93.12805939]
[99.79458618 -108.19136810]
[102.84095001 -122.94997406]
[109.20931244 -136.60795593]
[118.55624390 -148.42877197]
[130.37767029 -157.77493286]
[144.03607178 -164.14241028]
[158.79486084 -167.18782043]
[173.85813904 -166.74693298]
[188.41355896 -162.84349060]
[201.67614746 -155.68804932]
[212.93067932 -145.66645813]
[221.57020569 -133.31918335]
[227.12881470 -119.31209564]
[229.30674744 -104.40057373]
[227.98652649 -89.38878632]
[223.23936462 -75.08629608]
[215.32127380 -62.26442337]
[204.65925598 -51.61462402]
[191.82830811 -43.71123886]
[177.52038574 -38.98048401]
[162.50709534 -37.67747879]
[160.33026123 -22.83627510]
[158.15342712 -7.99506903]
[170.50500488 0.51602119]
[183.59815979 -6.80308437]
[196.69131470 -14.12219048]
[209.78446960 -21.44129562]
[215.51724243 -36.42510986]
[230.84944153 -41.14778137]
[244.01948547 -31.98647881]
[244.92445374 -15.96897030]
[232.87013245 -5.38251734]
[217.10357666 -8.34814167]
[204.01042175 -1.02903557]
[190.91726685 6.29007006]
[177.82411194 13.60917568]
[167.80703735 16.17123032]
[158.88871765 14.90857124]
[152.31137085 10.77919006]
[145.68287659 24.23515511]
[139.05438232 37.69112015]
[132.42587280 51.14708710]
[125.79737854 64.60305023]
[119.16887665 78.05902100]
[112.54038239 91.51498413]
[110.98279572 106.43389130]
[114.68895721 120.96883392]
[118.39511871 135.50376892]
[136.41513062 141.74649048]
[147.01330566 157.42179871]
[146.10716248 176.17291260]
[134.23663330 190.52381897]
[138.84219360 204.79928589]
[143.44776917 219.07473755]
[148.05332947 233.35020447]
[152.14297485 218.91847229]
[161.36003113 207.08436584]
[174.35108948 199.58554077]
[189.20861816 197.52308655]
[203.75102234 201.19982910]
[215.84295654 210.07591248]
[223.70893860 222.84802246]
[226.19392395 237.64074707]
[222.93305969 252.28201294]
[214.40515137 264.62197876]
[201.86238098 272.84869385]
[187.14646912 275.75421143]
[172.41822815 272.91186523]
[159.84027100 264.73907471]
[151.25973511 252.43641663]
[151.57179260 267.43316650]
[151.88385010 282.42993164]
[152.19590759 297.42666626]
[152.50796509 312.42343140]
[152.82002258 327.42019653]
[153.13208008 342.41693115]
[153.44413757 357.41369629]
[153.75619507 372.41046143]
[156.34718323 391.61816406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[12 124]
[13 123]
[20 119]
[21 118]
[22 117]
[24 56]
[25 55]
[26 54]
[28 53]
[42 52]
[43 51]
[44 50]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[64 94]
[65 93]
[66 92]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
