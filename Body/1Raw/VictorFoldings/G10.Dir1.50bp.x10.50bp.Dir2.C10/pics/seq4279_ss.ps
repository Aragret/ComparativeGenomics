%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCxxxxxxxxxxUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.00852203 114.38643646]
[114.26716614 101.27415466]
[106.38473511 112.82227325]
[92.41891479 112.15328979]
[78.99146271 118.83937073]
[65.84983063 126.07106781]
[53.01617813 133.83621216]
[40.18252563 141.60133362]
[27.34887123 149.36647034]
[14.51521683 157.13160706]
[1.68156290 164.89674377]
[-2.16302514 181.93218994]
[-16.83404732 190.76919556]
[-33.03982162 186.37873840]
[-45.71133423 194.40574646]
[-58.38285065 202.43273926]
[-71.05436707 210.45973206]
[-83.72588348 218.48674011]
[-96.39739990 226.51373291]
[-95.68667603 241.85617065]
[-102.75664520 255.49108887]
[-115.70551300 263.75076294]
[-131.05010986 264.41339111]
[-144.66279602 257.30072021]
[-152.88185120 244.32603455]
[-153.49638367 228.97944641]
[-146.34107971 215.38909912]
[-133.34068298 207.21076965]
[-117.99223328 206.64434814]
[-104.42440033 213.84220886]
[-91.75288391 205.81521606]
[-79.08136749 197.78822327]
[-66.40985107 189.76123047]
[-53.73833466 181.73422241]
[-41.06681824 173.70722961]
[-40.02111435 160.82861328]
[-31.60851097 150.76596069]
[-18.74214172 147.35455322]
[-6.08357239 152.06309509]
[6.75008106 144.29795837]
[19.58373451 136.53282166]
[32.41738892 128.76768494]
[45.25104141 121.00254822]
[58.08469772 113.23741913]
[58.86698914 110.48441315]
[60.82088470 107.88603973]
[63.88917160 105.90302277]
[67.84442902 104.96522522]
[72.30538940 105.41191864]
[85.73283386 98.72584534]
[93.61526489 87.17772675]
[107.58108521 87.84671021]
[101.93335724 74.17334747]
[97.25045013 60.14046860]
[93.55502319 45.81604004]
[90.86494446 31.26946831]
[89.19321442 16.57121658]
[88.54790497 1.79248834]
[88.93212128 -12.99512577]
[90.34396362 -27.71999741]
[92.77656555 -42.31079865]
[96.21811676 -56.69685745]
[100.65192413 -70.80849457]
[106.05648041 -84.57736206]
[112.40557861 -97.93676758]
[119.66843414 -110.82202148]
[127.80984497 -123.17070770]
[136.79034424 -134.92303467]
[146.56642151 -146.02209473]
[157.09068298 -156.41412354]
[168.31213379 -166.04882812]
[180.17640686 -174.87954712]
[192.62600708 -182.86351013]
[205.60061646 -189.96209717]
[219.03736877 -196.14093018]
[232.87117004 -201.37010193]
[247.03498840 -205.62431335]
[261.46020508 -208.88299561]
[276.07696533 -211.13037109]
[290.81442261 -212.35559082]
[305.60122681 -212.55276489]
[320.36569214 -211.72093201]
[335.03634644 -209.86418152]
[349.54214478 -206.99151611]
[363.81277466 -203.11688232]
[377.77914429 -198.25907898]
[391.37359619 -192.44168091]
[404.53030396 -185.69285583]
[417.18554688 -178.04536438]
[429.27804565 -169.53623962]
[440.74923706 -160.20674133]
[451.54354858 -150.10208130]
[461.60873413 -139.27122498]
[470.89602661 -127.76666260]
[479.36050415 -115.64413452]
[486.96118164 -102.96237946]
[493.66125488 -89.78284454]
[507.47485352 -95.62963104]
[521.28839111 -101.47641754]
[535.10198975 -107.32321167]
[548.91558838 -113.16999817]
[553.32965088 -128.17166138]
[566.38244629 -136.78320312]
[581.91082764 -134.93850708]
[592.58282471 -123.50858307]
[593.35937500 -107.89029694]
[583.87384033 -95.45812225]
[568.60504150 -92.08214569]
[554.76239014 -99.35641479]
[540.94879150 -93.50962830]
[527.13519287 -87.66283417]
[513.32165527 -81.81604767]
[499.50805664 -75.96926117]
[504.43154907 -61.57003021]
[508.31164551 -46.85505295]
[511.12835693 -31.89982986]
[512.86718750 -16.78110695]
[513.51922607 -1.57646632]
[513.08111572 13.63606644]
[511.55496216 28.77842331]
[508.94866943 43.77289200]
[505.27554321 58.54251480]
[500.55438232 73.01149750]
[494.80941772 87.10556793]
[488.07006836 100.75238800]
[480.37094116 113.88191986]
[471.75146484 126.42675018]
[462.25588989 138.32250977]
[451.93289185 149.50810242]
[440.83541870 159.92611694]
[429.02041626 169.52307129]
[416.54852295 178.24967957]
[403.48364258 186.06114197]
[389.89288330 192.91732788]
[375.84594727 198.78305054]
[361.41491699 203.62815857]
[346.67382812 207.42774963]
[331.69830322 210.16232300]
[316.56524658 211.81777954]
[301.35223389 212.38562012]
[286.13742065 211.86288452]
[270.99880981 210.25221252]
[256.01416016 207.56185913]
[241.26033020 203.80558777]
[226.81306458 199.00265503]
[212.74650574 193.17765808]
[199.13285828 186.36045837]
[186.04199219 178.58604431]
[173.54109192 169.89425659]
[161.69436646 160.32968140]
[150.56260681 149.94137573]
[140.20295715 138.78262329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[4 50]
[5 49]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
