%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAAxxxxxxxxxxUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-19.72444725 246.41772461]
[-27.61533928 239.59376526]
[-38.16735458 250.25466919]
[-48.71937180 260.91558838]
[-59.27138519 271.57647705]
[-63.48025131 286.82757568]
[-77.93258667 290.43026733]
[-88.48460388 301.09118652]
[-92.69346619 316.34228516]
[-107.14579773 319.94494629]
[-117.69781494 330.60586548]
[-111.46924591 344.44671631]
[-110.66506958 359.60314941]
[-115.39405823 374.02542114]
[-125.01665497 385.76296997]
[-138.23147583 393.22842407]
[-153.25131226 395.41213989]
[-168.04487610 392.01879883]
[-180.61146545 383.50729370]
[-189.25152588 371.02874756]
[-192.79656982 356.27081299]
[-190.76716614 341.22933960]
[-183.43777466 327.93856812]
[-171.79963684 318.19598389]
[-157.42669678 313.31918335]
[-142.26280212 313.96771240]
[-128.35871887 320.05383301]
[-117.80670929 309.39294434]
[-114.35259247 294.90438843]
[-99.14550781 290.53915405]
[-88.59349060 279.87826538]
[-85.13938141 265.38967896]
[-69.93229675 261.02447510]
[-59.38027954 250.36357117]
[-48.82826233 239.70265198]
[-38.27624893 229.04174805]
[-58.47341537 203.23890686]
[-73.91394043 174.33731079]
[-84.13437653 143.20443726]
[-88.82795715 110.77478790]
[-87.85379791 78.02172089]
[-81.24113464 45.92834091]
[-69.18845367 15.45794010]
[-82.33008575 8.22623730]
[-95.47171783 0.99453509]
[-108.57071686 9.01400089]
[-123.92491913 9.39352131]
[-137.40412903 2.03100657]
[-145.38249207 -11.09306335]
[-145.71388245 -26.44837952]
[-138.30915833 -39.90444183]
[-125.16014099 -47.84163284]
[-109.80385590 -48.12488937]
[-96.37107849 -40.67801666]
[-88.47513580 -27.50418854]
[-88.24002075 -12.14709663]
[-75.09838867 -4.91539383]
[-61.95675659 2.31630874]
[-56.40533829 -6.34596157]
[-50.39110565 -14.69354439]
[-43.93185043 -22.70173645]
[-37.04668808 -30.34684372]
[-29.75598907 -37.60623932]
[-22.08132935 -44.45844650]
[-14.04541874 -50.88318634]
[-5.67203760 -56.86145020]
[3.01403761 -62.37554169]
[11.98710442 -67.40914917]
[21.22060966 -71.94738007]
[30.68723106 -75.97679901]
[40.35895538 -79.48548889]
[50.20716476 -82.46305847]
[60.20271301 -84.90070343]
[70.31602478 -86.79120636]
[80.51718140 -88.12898254]
[90.77598572 -88.91006470]
[101.06208038 -89.13214111]
[111.34503937 -88.79455566]
[121.59442139 -87.89830780]
[131.77990723 -86.44605255]
[141.87135315 -84.44208527]
[151.83889771 -81.89234161]
[161.65304565 -78.80435181]
[171.28474426 -75.18727112]
[180.70552063 -71.05178833]
[189.88748169 -66.41014099]
[198.80343628 -61.27607727]
[207.42704773 -55.66478348]
[215.73275757 -49.59285736]
[225.37457275 -61.08352280]
[235.01638794 -72.57418823]
[237.32965088 -88.80936432]
[252.64517212 -94.67169952]
[265.20764160 -84.13053131]
[262.09387207 -68.02970886]
[246.50704956 -62.93237686]
[236.86523438 -51.44171143]
[227.22341919 -39.95104218]
[234.74635315 -32.72344971]
[241.85932922 -25.09205627]
[248.54072571 -17.08008575]
[254.77020264 -8.71191311]
[260.52880859 -0.01299528]
[265.79901123 8.99020100]
[270.56478882 18.27028465]
[274.81164551 27.79902077]
[278.52667236 37.54742050]
[281.69851685 47.48582458]
[284.31759644 57.58399963]
[286.37591553 67.81121826]
[287.86718750 78.13636780]
[288.78689575 88.52803802]
[289.13223267 98.95461273]
[288.90216064 109.38436127]
[288.09738159 119.78556061]
[286.72033691 130.12657166]
[284.77520752 140.37591553]
[282.26794434 150.50242615]
[279.20611572 160.47528076]
[275.59909058 170.26416016]
[271.45782471 179.83924866]
[266.79492188 189.17144775]
[261.62457275 198.23236084]
[255.96246338 206.99440002]
[249.82588196 215.43092346]
[243.23347473 223.51626587]
[236.20527649 231.22581482]
[228.76271057 238.53613281]
[220.92837524 245.42495728]
[212.72615051 251.87135315]
[204.18095398 257.85571289]
[195.31880188 263.35977173]
[186.16665649 268.36685181]
[176.75236511 272.86169434]
[167.10455322 276.83062744]
[157.25257874 280.26156616]
[147.22642517 283.14410400]
[137.05659485 285.46942139]
[126.77402496 287.23046875]
[116.40998840 288.42187500]
[105.99603271 289.04003906]
[95.56383514 289.08309937]
[85.14513397 288.55087280]
[74.77162170 287.44497681]
[64.47486877 285.76882935]
[54.28619385 283.52749634]
[44.23660278 280.72781372]
[34.35666275 277.37826538]
[24.67643547 273.48907471]
[15.22537136 269.07205200]
[6.03222513 264.14065552]
[-2.87503409 258.70986938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[5 33]
[7 31]
[8 30]
[10 28]
[11 27]
[43 58]
[44 57]
[45 56]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
