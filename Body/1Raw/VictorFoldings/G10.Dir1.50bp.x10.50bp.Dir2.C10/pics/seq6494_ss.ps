%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCCACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.06115723]
[92.50000000 270.06115723]
[92.50000000 255.06117249]
[92.50000000 240.06117249]
[92.50000000 225.06117249]
[92.50000000 210.06117249]
[92.50000000 195.06117249]
[92.50000000 180.06117249]
[92.50000000 165.06117249]
[92.50000000 150.06117249]
[65.92051697 137.42939758]
[50.85922623 112.14721680]
[35.92491913 113.54952240]
[20.99061203 114.95182800]
[10.92474270 126.83946991]
[-4.24074554 128.04885864]
[-15.51176262 118.37932587]
[-30.44606972 119.78163147]
[-45.38037872 121.18393707]
[-60.31468582 122.58624268]
[-75.24899292 123.98854065]
[-90.18330383 125.39084625]
[-105.11760712 126.79315186]
[-120.05191803 128.19544983]
[-134.95381165 129.90814209]
[-149.81686401 131.93048096]
[-162.44787598 141.45770264]
[-176.10211182 135.50697327]
[-190.96514893 137.52931213]
[-205.82820129 139.55163574]
[-220.69125366 141.57397461]
[-235.55429077 143.59631348]
[-248.18290710 154.05815125]
[-263.46121216 148.09947205]
[-265.67218018 131.85005188]
[-252.54136658 122.02590179]
[-237.57662964 128.73326111]
[-222.71357727 126.71092987]
[-207.85054016 124.68859100]
[-192.98748779 122.66625977]
[-178.12445068 120.64392090]
[-166.55653381 111.26134491]
[-151.83920288 117.06742859]
[-136.97615051 115.04509735]
[-133.39064026 111.80170441]
[-127.71045685 110.81841278]
[-121.45422363 113.26114655]
[-106.51991272 111.85884094]
[-91.58560181 110.45654297]
[-76.65129852 109.05423737]
[-61.71698761 107.65193176]
[-46.78268051 106.24962616]
[-31.84837341 104.84732819]
[-16.91406631 103.44502258]
[-7.64009285 91.84635925]
[7.48544264 90.21147919]
[19.58830833 100.01751709]
[34.52261734 98.61521149]
[49.45692444 97.21291351]
[51.80850220 84.50967407]
[57.29907608 72.81541443]
[65.57100677 62.89184570]
[76.08550262 55.38534927]
[88.15768433 50.78485870]
[101.00122833 49.39004135]
[113.77954865 51.29174042]
[125.66033936 56.36609650]
[135.86972046 64.28257751]
[147.94970703 55.39022827]
[160.02969360 46.49787903]
[145.04106140 45.91387939]
[132.27966309 38.03056717]
[125.04873657 24.88850594]
[125.21999359 9.88948345]
[132.74909973 -3.08404994]
[145.68716431 -10.67393494]
[160.68522644 -10.91555309]
[173.86105347 -3.74636149]
[181.80415344 8.97791576]
[182.45846558 23.96363831]
[175.65469360 37.33171844]
[189.31092834 31.12631035]
[202.96716309 24.92090416]
[206.68353271 -2.25920177]
[236.03158569 -16.79814911]
[244.79779053 -28.96998596]
[253.56399536 -41.14182281]
[262.33020020 -53.31365967]
[263.43725586 -69.67539978]
[278.27761841 -76.65361786]
[291.58480835 -67.06973267]
[289.66952515 -50.78281403]
[274.50204468 -44.54745102]
[265.73583984 -32.37561417]
[256.96963501 -20.20377731]
[248.20341492 -8.03194141]
[252.13214111 -1.64326262]
[264.90948486 -9.50068855]
[277.68698120 -17.35790253]
[285.54397583 -4.58028412]
[272.76690674 3.27666903]
[259.98956299 11.13409424]
[263.91827393 17.52277374]
[278.73602295 15.19166946]
[293.55380249 12.86056519]
[300.49258423 -1.01865518]
[314.27966309 -8.13876343]
[329.61361694 -5.76193285]
[340.59823608 5.19789743]
[343.00970459 20.52644920]
[335.92074585 34.32957840]
[322.05725098 41.29970551]
[306.74996948 38.75667191]
[295.88488770 27.67832375]
[281.06713867 30.00942802]
[266.24938965 32.34053040]
[259.78567505 41.94945145]
[251.08673096 48.79550171]
[241.18278503 52.45820618]
[231.14129639 52.86945724]
[221.95420837 50.29486084]
[214.44035339 45.28115082]
[209.17257690 38.57714462]
[195.51634216 44.78255081]
[181.86009216 50.98796082]
[168.92204285 58.57786942]
[156.84205627 67.47021484]
[144.76206970 76.36256409]
[147.73753357 83.16259003]
[149.68659973 90.32464600]
[150.56733704 97.69472504]
[150.36083984 105.11437225]
[149.07151794 112.42404938]
[146.72709656 119.46659851]
[143.37800598 126.09059906]
[139.09623718 132.15362549]
[133.97384644 137.52529907]
[128.12098694 142.09014893]
[121.66349030 145.75001526]
[114.74021149 148.42619324]
[107.50000000 150.06117249]
[107.50000000 165.06117249]
[107.50000000 180.06117249]
[107.50000000 195.06117249]
[107.50000000 210.06117249]
[107.50000000 225.06117249]
[107.50000000 240.06117249]
[107.50000000 255.06117249]
[107.50000000 270.06115723]
[107.50000000 285.06115723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 59]
[13 58]
[14 57]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[68 128]
[69 127]
[70 126]
[81 125]
[82 124]
[83 123]
[85 96]
[86 95]
[87 94]
[88 93]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
