%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUxxxxxxxxxxUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.39431763]
[92.50000000 242.39431763]
[92.50000000 227.39431763]
[92.50000000 212.39431763]
[92.50000000 197.39431763]
[92.50000000 182.39431763]
[92.50000000 167.39431763]
[92.50000000 152.39431763]
[92.50000000 137.39431763]
[92.50000000 122.39431763]
[78.77994537 116.33130646]
[67.68862915 126.42995453]
[62.53920746 144.07827759]
[45.30133057 147.21763611]
[34.42250443 157.54483032]
[23.54367828 167.87203979]
[12.66485310 178.19924927]
[8.53133392 194.06890869]
[-7.34865808 198.16255188]
[-18.63914871 186.26898193]
[-13.72544861 170.62329102]
[2.33764815 167.32041931]
[13.21647358 156.99320984]
[24.09529877 146.66601562]
[34.97412491 136.33880615]
[35.61550522 124.21874237]
[44.65092850 115.52506256]
[57.58998108 115.33863831]
[68.68129730 105.23999023]
[72.08427429 90.63109589]
[66.59724426 76.67070770]
[46.94013977 70.85486603]
[36.69376373 53.38912582]
[41.09811020 33.88063049]
[31.35045624 22.47961044]
[20.15468979 12.49688435]
[7.71525049 4.11474085]
[-4.72418976 -4.26740265]
[-17.16362953 -12.64954567]
[-29.60307121 -21.03168869]
[-42.04251099 -29.41383171]
[-54.48195267 -37.79597473]
[-66.92139435 -46.17811966]
[-79.36083221 -54.56026077]
[-91.80027008 -62.94240570]
[-104.68896484 -54.83059311]
[-119.76366425 -52.66881180]
[-134.41259766 -56.83160782]
[-146.09773254 -66.59774780]
[-152.79455566 -80.27519226]
[-153.34280396 -95.49423218]
[-147.64749146 -109.61808777]
[-136.69535828 -120.19971466]
[-122.38394165 -125.40577698]
[-107.19276428 -124.33428955]
[-93.75379944 -117.17090607]
[-84.39542389 -105.15671539]
[-80.73903656 -90.37325287]
[-83.41812897 -75.38184357]
[-70.97869110 -66.99970245]
[-58.53924942 -58.61755753]
[-46.09980774 -50.23541641]
[-33.66036606 -41.85327148]
[-21.22092819 -33.47113037]
[-8.78148746 -25.08898544]
[3.65795326 -16.70684242]
[16.09739304 -8.32469940]
[28.53683472 0.05744367]
[23.04744720 -13.90202045]
[23.59736633 -28.89193726]
[30.09485245 -42.41165161]
[41.45598221 -52.20577240]
[55.78545761 -56.64041901]
[70.69280243 -54.97579575]
[83.69114685 -47.48959351]
[92.61206055 -35.43068695]
[95.96734619 -20.81076622]
[93.19725800 -6.06876421]
[84.76391602 6.33602285]
[72.07418823 14.33419800]
[57.24500656 16.59148598]
[42.75147629 12.73195839]
[52.49913025 24.13297844]
[63.12168503 21.71746826]
[73.83552551 23.68900681]
[83.10047150 11.89236641]
[92.36542511 0.09572628]
[94.80434418 -15.53636456]
[108.75045013 -20.76658821]
[110.53717041 -37.06811142]
[125.65496826 -43.42295837]
[138.55195618 -33.29380798]
[135.96081543 -17.10066032]
[120.54709625 -11.50163841]
[118.77086639 3.28667760]
[104.16206360 9.36067581]
[94.89711761 21.15731621]
[85.63216400 32.95395660]
[90.22407532 42.35812759]
[90.92661285 52.89833450]
[87.56146240 63.01515579]
[80.55763245 71.18367767]
[86.04466248 85.14406586]
[93.97556305 76.50173950]
[107.02051544 72.75614929]
[121.94466400 76.69675446]
[134.15007019 88.97649384]
[148.79357910 92.22731781]
[163.43707275 95.47814178]
[178.08058167 98.72897339]
[192.72407532 101.97979736]
[207.40060425 105.07811737]
[222.10856628 108.02359772]
[232.76119995 96.86452484]
[247.76116943 93.25836945]
[262.32205200 98.35585022]
[271.79751587 110.53038025]
[273.16397095 125.89710236]
[265.98541260 139.55256653]
[252.55244446 147.13935852]
[237.15151978 146.23654175]
[224.69700623 137.13223267]
[219.16308594 122.73155975]
[204.45512390 119.78607941]
[197.23222351 121.56802368]
[189.47325134 116.62329865]
[174.82975769 113.37247467]
[160.18624878 110.12165070]
[145.54275513 106.87081909]
[130.89924622 103.61999512]
[125.04943848 108.31357574]
[136.34178162 118.18691254]
[147.63414001 128.06025696]
[159.72576904 136.93675232]
[160.04768372 151.93330383]
[148.34809875 161.32051086]
[133.77770996 157.75630188]
[127.73257446 144.02821350]
[120.54119110 130.86447144]
[113.34981537 117.70073700]
[107.50000000 122.39431763]
[107.50000000 137.39431763]
[107.50000000 152.39431763]
[107.50000000 167.39431763]
[107.50000000 182.39431763]
[107.50000000 197.39431763]
[107.50000000 212.39431763]
[107.50000000 227.39431763]
[107.50000000 242.39431763]
[107.50000000 257.39431763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 29]
[12 28]
[14 25]
[15 24]
[16 23]
[17 22]
[30 103]
[31 102]
[34 83]
[35 82]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[85 98]
[86 97]
[87 96]
[89 94]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
