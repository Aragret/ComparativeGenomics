%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCxxxxxxxxxxCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.67257690 436.52163696]
[86.67257690 421.52163696]
[86.67257690 406.52163696]
[86.67257690 391.52163696]
[86.67257690 376.52163696]
[86.67257690 361.52163696]
[86.67257690 346.52163696]
[86.67257690 331.52163696]
[86.67257690 316.52163696]
[86.67257690 301.52163696]
[71.18753815 298.14739990]
[56.82203674 291.43795776]
[44.28491974 281.72106934]
[34.19554138 269.47305298]
[27.05314636 255.29528809]
[23.21219254 239.88481140]
[22.86474419 223.99996948]
[26.03087044 208.42314148]
[32.55751801 193.92216492]
[42.12590790 181.21253967]
[54.26708984 170.92207336]
[68.38494873 163.55989075]
[83.78545380 159.49127197]
[83.17756653 144.50358582]
[82.56968689 129.51591492]
[74.10581970 105.35798645]
[84.95713043 89.04851532]
[77.15207672 76.23909760]
[69.34703064 63.42967987]
[61.54197693 50.62026215]
[53.73692703 37.81084442]
[53.82192230 52.81060410]
[50.62751007 67.46651459]
[44.30805588 81.07035828]
[35.16893387 92.96474457]
[23.65178108 102.57490540]
[10.31313992 109.43643951]
[-4.20241976 113.21777344]
[-19.19345856 113.73619080]
[-33.93555832 110.96663666]
[-47.71633530 105.04293823]
[-59.86985397 96.25135040]
[-69.80881500 85.01671600]
[-77.05294037 71.88192749]
[-81.25215912 57.48169708]
[-82.20356750 42.51190186]
[-79.86117554 27.69592285]
[-74.33818054 13.74972153]
[-65.90146637 1.34722412]
[-54.95873642 -8.91224003]
[-42.03877258 -16.53289986]
[-27.76590538 -21.14649963]
[-12.82985306 -22.53009605]
[2.04762697 -20.61682510]
[16.14760399 -15.49914742]
[28.78872299 -7.42436361]
[39.36011887 3.21732616]
[47.34996414 15.90964127]
[47.04595947 0.91272175]
[46.74195480 -14.08419704]
[46.43795013 -29.08111572]
[34.12736893 -20.51084518]
[19.69341278 -24.59262466]
[13.69424343 -38.34071350]
[20.51813507 -51.69865417]
[35.17354584 -54.89536285]
[46.94010544 -45.59295654]
[48.15487671 -60.54368591]
[49.36964417 -75.49441528]
[50.58441162 -90.44514465]
[36.61569595 -96.25291443]
[25.12667465 -106.09454346]
[17.24292755 -119.00584412]
[13.73682022 -133.72190857]
[14.95184803 -148.80099487]
[20.76897430 -162.76580811]
[30.61829567 -174.24822998]
[43.53487778 -182.12333679]
[58.25328064 -185.61956787]
[73.33155060 -184.39443970]
[87.29247284 -178.56796265]
[98.76829529 -168.71095276]
[106.63473511 -155.78909302]
[110.12111664 -141.06834412]
[108.88587952 -125.99089813]
[103.05004120 -112.03388977]
[93.18534088 -100.56467438]
[80.25821686 -92.70689392]
[65.53514099 -89.23037720]
[64.32037354 -74.27964783]
[63.10560608 -59.32891846]
[61.89083481 -44.37818909]
[61.43486786 -29.38512039]
[61.73887253 -14.38820171]
[62.04287720 0.60871744]
[62.34688187 15.60563660]
[66.54634094 30.00579262]
[74.35139465 42.81521225]
[82.15644836 55.62462997]
[89.96149445 68.43404388]
[97.76654816 81.24346161]
[94.22605896 66.66728973]
[100.34888458 52.97382355]
[113.57272339 45.89356232]
[128.36361694 48.38948059]
[138.53179932 59.41707993]
[139.82206726 74.36148071]
[131.69447327 86.96870422]
[117.54898834 91.96283722]
[132.54205322 91.50686646]
[147.53512573 91.05090332]
[162.52819824 90.59493256]
[173.17475891 78.91476440]
[188.96577454 78.26735687]
[200.53273010 89.03681183]
[201.01315308 104.83380127]
[190.12200928 116.28624725]
[174.32081604 116.59961700]
[162.98416138 105.58799744]
[147.99108887 106.04396820]
[132.99803162 106.49993896]
[118.00495911 106.95590210]
[112.89305878 112.44393158]
[126.49123383 118.77557373]
[124.67152405 133.66479492]
[109.94871521 136.53514099]
[102.66925812 123.41999817]
[97.55736542 128.90803528]
[98.16524506 143.89570618]
[98.77313232 158.88337708]
[112.77877808 161.21609497]
[126.04633331 166.25839233]
[138.05728149 173.81103516]
[148.34269714 183.57673645]
[156.50143433 195.17184448]
[162.21591187 208.14141846]
[165.26432800 221.97706604]
[165.52938843 236.13690186]
[163.00276184 250.06674194]
[157.78532410 263.22183228]
[150.08317566 275.08807373]
[140.19943237 285.20223999]
[128.52235413 293.16992188]
[115.51005554 298.68096924]
[101.67257690 301.52163696]
[101.67257690 316.52163696]
[101.67257690 331.52163696]
[101.67257690 346.52163696]
[101.67257690 361.52163696]
[101.67257690 376.52163696]
[101.67257690 391.52163696]
[101.67257690 406.52163696]
[101.67257690 421.52163696]
[101.67257690 436.52163696]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[23 130]
[24 129]
[25 128]
[27 101]
[28 100]
[29 99]
[30 98]
[31 97]
[58 96]
[59 95]
[60 94]
[61 93]
[67 92]
[68 91]
[69 90]
[70 89]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
