%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCxxxxxxxxxxAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.36418152 83.42405701]
[146.70794678 89.62946320]
[133.05169678 95.83486938]
[124.66545868 108.14422607]
[108.90068817 106.80911255]
[97.20106506 116.19627380]
[88.18353271 128.18310547]
[86.07035065 143.86254883]
[72.23606873 149.38177490]
[63.21853638 161.36860657]
[54.20100784 173.35543823]
[45.18347549 185.34226990]
[47.64355850 200.95391846]
[38.27657318 213.68322754]
[22.63978958 215.97810364]
[10.01023102 206.47706604]
[7.88079309 190.81689453]
[17.51483345 178.28849792]
[33.19664383 176.32473755]
[42.21417618 164.33790588]
[51.23170471 152.35107422]
[60.24923325 140.36424255]
[61.71742249 125.54217529]
[76.19670105 119.16557312]
[85.21423340 107.17874146]
[82.25424957 100.28755188]
[68.59382629 106.48374939]
[54.93341064 112.67995453]
[43.31583786 122.16847992]
[30.51585770 114.34796143]
[33.65704727 99.68054962]
[48.53677368 97.78781891]
[62.43553162 92.14649963]
[76.33428955 86.50517273]
[73.37430573 79.61398315]
[58.47240448 77.90129089]
[43.57049942 76.18859863]
[31.34966278 86.20990753]
[15.63053036 84.57148743]
[5.73898649 72.24538422]
[7.54350948 56.54444885]
[19.97350693 46.78377914]
[35.65448380 48.75419998]
[45.28319168 61.28669739]
[60.18509293 62.99938583]
[75.08699799 64.71207428]
[87.70572662 68.04693604]
[96.97741699 74.90410614]
[102.07607269 83.81471252]
[102.69528198 93.15287018]
[112.05830383 80.39965820]
[126.84629059 82.17862701]
[140.50253296 75.97322083]
[154.15876770 69.76781464]
[149.72888184 57.14926910]
[146.36666870 44.20563889]
[144.09548950 31.02709770]
[142.93112183 17.70543861]
[142.88159180 4.33344841]
[143.94720459 -8.99573994]
[146.12046814 -22.18929482]
[149.38618469 -35.15533829]
[153.72155762 -47.80357742]
[159.09632874 -60.04594421]
[165.47299194 -71.79719543]
[172.80711365 -82.97550964]
[181.04753113 -93.50307465]
[190.13682556 -103.30660248]
[200.01164246 -112.31785583]
[210.60314941 -120.47412109]
[221.83757019 -127.71862793]
[233.63659668 -134.00099182]
[245.91804504 -139.27749634]
[258.59634399 -143.51144409]
[271.58316040 -146.67343140]
[284.78805542 -148.74145508]
[298.11904907 -149.70120239]
[311.48327637 -149.54605103]
[324.78765869 -148.27711487]
[337.93954468 -145.90332031]
[350.84732056 -142.44125366]
[363.42114258 -137.91508484]
[375.57345581 -132.35638428]
[387.21960449 -125.80393219]
[398.27856445 -118.30342102]
[408.67327881 -109.90713501]
[418.33145142 -100.67359924]
[427.18582153 -90.66717529]
[435.17480469 -79.95758820]
[442.24276733 -68.61946869]
[448.34051514 -56.73181915]
[453.42572021 -44.37745285]
[457.46292114 -31.64244461]
[460.42413330 -18.61550713]
[475.28717041 -20.63784218]
[490.15023804 -22.66017723]
[505.01327515 -24.68251038]
[519.87634277 -26.70484543]
[525.76318359 -40.82192993]
[537.84600830 -50.03613663]
[552.81915283 -51.95250702]
[566.64855957 -46.15570068]
[575.65893555 -34.29488373]
[590.52197266 -36.31721878]
[605.38500977 -38.33955383]
[620.24804688 -40.36188507]
[635.11114502 -42.38422012]
[645.92767334 -54.23248291]
[661.92480469 -53.01929092]
[670.83087158 -39.67530441]
[665.81384277 -24.43688583]
[650.72247314 -18.99364662]
[637.13342285 -27.52117538]
[622.27038574 -25.49884033]
[607.40734863 -23.47650528]
[592.54431152 -21.45417023]
[577.68127441 -19.43183708]
[572.16748047 -5.59479713]
[560.38958740 3.68625522]
[545.44879150 5.84010792]
[531.34332275 0.18920153]
[521.89868164 -11.84179878]
[507.03561401 -9.81946373]
[492.17254639 -7.79712963]
[477.30950928 -5.77479506]
[462.44647217 -3.75246072]
[463.05279541 13.20092201]
[461.86157227 30.12398720]
[458.88601685 46.82666397]
[454.15939331 63.12134933]
[447.73461914 78.82499695]
[439.68377686 93.76119232]
[430.09707642 107.76211548]
[419.08209229 120.67044067]
[406.76242065 132.34111023]
[393.27627563 142.64294434]
[378.77505493 151.46011353]
[363.42153931 158.69348145]
[347.38809204 164.26167297]
[330.85473633 168.10200500]
[314.00708008 170.17120361]
[297.03433228 170.44587708]
[280.12713623 168.92279053]
[263.47534180 165.61891174]
[247.26600647 160.57116699]
[231.68121338 153.83613586]
[216.89605713 145.48928833]
[203.07666016 135.62425232]
[190.37828064 124.35167694]
[178.94366455 111.79806519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[5 50]
[6 25]
[7 24]
[9 22]
[10 21]
[11 20]
[12 19]
[35 46]
[36 45]
[37 44]
[94 126]
[95 125]
[96 124]
[97 123]
[98 122]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
