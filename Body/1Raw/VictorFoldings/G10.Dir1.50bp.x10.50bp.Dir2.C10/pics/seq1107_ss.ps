%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUxxxxxxxxxxCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.39269257 407.48019409]
[118.39269257 392.48019409]
[118.39269257 377.48019409]
[118.39269257 362.48019409]
[118.39269257 347.48019409]
[118.39269257 332.48019409]
[118.39269257 317.48019409]
[118.39269257 302.48019409]
[118.39269257 287.48019409]
[118.39269257 272.48019409]
[98.48948669 264.79415894]
[83.70352936 249.35539246]
[76.85758209 229.06050110]
[79.28010559 207.73786926]
[90.54768372 189.42552185]
[108.55849457 177.60639954]
[105.50009918 162.92150879]
[102.44170380 148.23660278]
[99.38330841 133.55171204]
[96.32491302 118.86681366]
[83.90659332 110.45339966]
[69.13448334 113.05812073]
[54.36236572 115.66284943]
[43.81460953 132.69531250]
[24.45743179 136.51936340]
[8.71580410 125.13200378]
[-5.86794472 128.64117432]
[-20.45169449 132.15034485]
[-35.03544235 135.65950012]
[-49.61919403 139.16867065]
[-61.12978363 150.84934998]
[-76.93057251 146.45993042]
[-80.76706696 130.51585388]
[-68.69260406 119.41903687]
[-53.12836075 124.58492279]
[-38.54460907 121.07575226]
[-23.96086121 117.56658936]
[-9.37711239 114.05741882]
[5.20663738 110.54825592]
[8.04601669 100.57369995]
[14.84709358 92.63721466]
[24.41636658 88.23568726]
[35.03048325 88.23641205]
[44.74651718 92.70701599]
[51.75764084 100.89073181]
[66.52975464 98.28601074]
[81.30187225 95.68128204]
[66.32141876 96.44680023]
[52.40156937 90.85772705]
[42.11011505 79.94507599]
[37.34552383 65.72190094]
[38.98671341 50.81195450]
[46.73094177 37.96567154]
[59.14962387 29.55280495]
[73.95188904 27.12527466]
[88.40716553 31.13088989]
[99.84889221 40.83073044]
[106.16641235 54.43547058]
[106.19432831 69.43544769]
[99.92934418 83.06117249]
[107.82582855 70.30791473]
[115.72231293 57.55465698]
[123.61878967 44.80139923]
[131.51527405 32.04814148]
[139.41175842 19.29488373]
[127.70978546 9.87981415]
[117.25354767 -0.90196264]
[108.20155334 -12.88699627]
[100.69103241 -25.89359665]
[94.83583832 -39.72458649]
[90.72473145 -54.17029190]
[88.42004395 -69.01172638]
[87.95670319 -84.02388000]
[89.34174347 -98.97919464]
[92.55416107 -113.65093231]
[97.54526520 -127.81668854]
[104.23937988 -141.26170349]
[112.53503418 -153.78215027]
[122.30646515 -165.18823242]
[133.40553284 -175.30703735]
[145.66398621 -183.98516846]
[158.89599609 -191.09104919]
[172.90095520 -196.51698303]
[187.46656799 -200.18069458]
[202.37200928 -202.02664185]
[217.39131165 -202.02685547]
[232.29679871 -200.18132019]
[246.86250305 -196.51802063]
[260.86761475 -191.09248352]
[274.09982300 -183.98696899]
[286.35852051 -175.30918884]
[297.45788574 -165.19068909]
[307.22961426 -153.78488159]
[315.52563477 -141.26464844]
[322.22012329 -127.81983185]
[327.21160889 -113.65421295]
[330.42446899 -98.98256683]
[331.80990601 -84.02729797]
[331.34698486 -69.01512146]
[329.04272461 -54.17362976]
[324.93200684 -39.72780609]
[319.07720947 -25.89665222]
[311.56704712 -12.88984203]
[302.51538086 -0.90455496]
[292.05944824 9.87751389]
[280.35775757 19.29291153]
[267.58767700 27.19890404]
[253.94281006 33.47563553]
[239.63002014 38.02795792]
[224.86627197 40.78684998]
[209.87539673 41.71049881]
[194.88462830 40.78489304]
[180.12124634 38.02407074]
[165.80905151 33.46988297]
[152.16500854 27.19136620]
[144.26853943 39.94462204]
[136.37205505 52.69787979]
[128.47557068 65.45114136]
[120.57908630 78.20439148]
[112.68260193 90.95764923]
[116.73429871 98.45437622]
[116.35408020 107.60304260]
[111.00981140 115.80841827]
[114.06820679 130.49331665]
[117.12660217 145.17820740]
[120.18499756 159.86311340]
[123.24339294 174.54800415]
[132.63992310 174.97445679]
[141.78002930 177.16711426]
[150.33505249 181.04447937]
[157.99781799 186.46453857]
[164.49374390 193.22994995]
[169.59068298 201.09521484]
[173.10713196 209.77558899]
[174.91880798 218.95738220]
[174.96292114 228.30934143]
[173.24046326 237.49450684]
[169.81597900 246.18247986]
[164.81524658 254.06120300]
[158.42056274 260.84817505]
[150.86416626 266.30068970]
[142.41978455 270.22436523]
[133.39270020 272.48019409]
[133.39270020 287.48019409]
[133.39270020 302.48019409]
[133.39270020 317.48019409]
[133.39270020 332.48019409]
[133.39270020 347.48019409]
[133.39270020 362.48019409]
[133.39270020 377.48019409]
[133.39270020 392.48019409]
[133.39270020 407.48019409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[21 47]
[22 46]
[23 45]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[60 120]
[61 119]
[62 118]
[63 117]
[64 116]
[65 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
