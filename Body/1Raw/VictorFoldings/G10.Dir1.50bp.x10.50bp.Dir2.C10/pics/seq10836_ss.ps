%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCAxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.91156006 152.75732422]
[142.13420105 144.89990234]
[129.35684204 137.04248047]
[116.57948303 129.18504333]
[102.21129608 133.49263000]
[95.86416626 147.08358765]
[89.51704407 160.67453003]
[83.16991425 174.26548767]
[85.12802887 190.54731750]
[71.84609985 200.16616821]
[56.98743439 193.22700500]
[55.83734894 176.86822510]
[69.57895660 167.91836548]
[75.92608643 154.32740784]
[82.27321625 140.73645020]
[88.62034607 127.14550781]
[84.77356720 121.17881012]
[82.92472076 115.00926971]
[69.02216339 120.64122772]
[59.13673019 132.99391174]
[44.43554688 130.60131836]
[30.53299332 136.23327637]
[16.63043594 141.86523438]
[2.72788048 147.49719238]
[-11.17467594 153.12915039]
[-17.10487366 167.77865601]
[-31.68931961 173.86714172]
[-46.27531815 167.78237915]
[-52.20925522 153.13438416]
[-45.97063446 138.61354065]
[-31.26071358 132.83479309]
[-16.80663300 139.22659302]
[-2.90407634 133.59463501]
[10.99847984 127.96267700]
[24.90103531 122.33071899]
[38.80359268 116.69876862]
[47.69462204 104.74891663]
[63.39020920 106.73867035]
[77.29276276 101.10671234]
[79.50257111 90.16645813]
[86.65277863 81.59633636]
[82.34519196 67.22814941]
[78.03760529 52.85996628]
[58.66805649 49.54754257]
[46.15409088 28.37864876]
[33.21603394 20.78874016]
[20.27797890 13.19883156]
[5.04931831 17.42535210]
[-8.66625214 9.57304859]
[-12.73152924 -5.69944572]
[-4.73465586 -19.33123016]
[10.57996464 -23.23480988]
[24.12644005 -15.09426022]
[27.86788559 0.26077566]
[40.80594254 7.85068417]
[53.74399948 15.44059181]
[60.36529160 11.91802502]
[49.57280350 1.50062633]
[56.14529800 -11.98278236]
[70.99978638 -9.89854717]
[73.60787964 4.87289000]
[80.22917175 1.35032237]
[81.16479492 -13.62046909]
[82.10042572 -28.59126091]
[83.03605652 -43.56205368]
[71.23127747 -56.43002319]
[72.33123016 -73.52020264]
[85.17296600 -84.33444214]
[85.79694366 -99.32145691]
[71.99256134 -105.68600464]
[61.67825699 -116.85218811]
[56.42688370 -131.11723328]
[57.03924179 -146.30583191]
[63.42194748 -160.10182190]
[74.60168457 -170.40142822]
[88.87362671 -175.63403320]
[104.06140137 -175.00169373]
[117.84899139 -168.60084534]
[128.13388062 -157.40757751]
[133.34770203 -143.12876892]
[132.69538879 -127.94182587]
[126.27641296 -114.16267395]
[115.06961823 -103.89251709]
[100.78395844 -98.69747925]
[100.15998077 -83.71046448]
[110.14853668 -75.51134491]
[113.62332916 -62.86222839]
[109.09255981 -50.34423828]
[98.00684357 -42.62642288]
[97.07122040 -27.65563202]
[96.13558960 -12.68484116]
[95.19995880 2.28595090]
[106.78761292 29.76222610]
[92.40579224 48.55237961]
[96.71337891 62.92056656]
[101.02095795 77.28874969]
[123.28779602 88.24989319]
[124.43691254 116.40769196]
[137.21426392 124.26512146]
[149.99162292 132.12254333]
[162.76898193 139.97996521]
[172.11997986 128.22767639]
[182.81939697 117.68824768]
[194.71122742 108.51536560]
[207.62203979 100.84280396]
[221.36357117 94.78245544]
[235.73541260 90.42268372]
[250.52798462 87.82707977]
[265.52557373 87.03349304]
[280.50946045 88.05348969]
[295.26113892 90.87220764]
[309.56549072 95.44853210]
[323.21392822 101.71572113]
[336.00738525 109.58239746]
[347.75933838 118.93383026]
[358.29837036 129.63365173]
[367.47079468 141.52581787]
[375.14288330 154.43692017]
[381.20272827 168.17868042]
[385.56195068 182.55067444]
[388.15701294 197.34335327]
[388.95004272 212.34095764]
[387.92947388 227.32481384]
[385.11019897 242.07640076]
[380.53335571 256.38058472]
[374.26565552 270.02877808]
[366.39849854 282.82196045]
[357.04663086 294.57354736]
[346.34640503 305.11218262]
[334.45388794 314.28414917]
[321.54251099 321.95574951]
[307.80053711 328.01507568]
[293.42834473 332.37377930]
[278.63558960 334.96826172]
[263.63793945 335.76074219]
[248.65412903 334.73962402]
[233.90266418 331.91979980]
[219.59864807 327.34240723]
[205.95068359 321.07418823]
[193.15780640 313.20657349]
[181.40657043 303.85424805]
[170.86833191 293.15365601]
[161.69677734 281.26080322]
[154.02566528 268.34912109]
[147.96685791 254.60690308]
[143.60870361 240.23457336]
[141.01475525 225.44171143]
[140.22285461 210.44404602]
[141.24453735 195.46026611]
[144.06489563 180.70889282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 16]
[6 15]
[7 14]
[8 13]
[18 39]
[19 38]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[41 96]
[42 95]
[43 94]
[45 56]
[46 55]
[47 54]
[62 92]
[63 91]
[64 90]
[65 89]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
