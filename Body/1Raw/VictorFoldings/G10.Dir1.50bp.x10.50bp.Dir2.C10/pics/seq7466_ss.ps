%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCxxxxxxxxxxCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[184.11679077 110.93630981]
[178.31323242 98.72011566]
[164.27125549 103.99485779]
[150.22927856 109.26959991]
[141.03569031 120.98826599]
[125.39609528 118.59796143]
[113.90542603 128.23977661]
[106.27246094 141.15246582]
[98.63948822 154.06517029]
[91.00651550 166.97785950]
[93.59075928 182.81141663]
[82.71646881 194.60671997]
[66.72546387 193.31544495]
[57.88468170 179.92813110]
[62.97601318 164.71438599]
[78.09381866 159.34489441]
[85.72679138 146.43220520]
[93.35975647 133.51950073]
[100.99272919 120.60680389]
[91.64647675 116.53717804]
[86.32688904 109.09882355]
[71.42244720 110.78922272]
[56.51799774 112.47962189]
[41.61354828 114.17002106]
[26.70910072 115.86042023]
[18.47535133 119.95933533]
[11.48171234 117.42927551]
[-3.45430040 118.81330109]
[-18.39031219 120.19732666]
[-23.23439217 134.63528442]
[-33.53691101 145.85037231]
[-47.51289368 151.89949036]
[-62.74091721 151.73458862]
[-76.58263397 145.38426208]
[-86.63988495 133.94871521]
[-91.17018890 119.40924072]
[-89.38864136 104.28488922]
[-81.60391235 91.19604492]
[-69.16474915 82.41043091]
[-54.22630692 79.45020294]
[-39.37677002 82.82823944]
[-27.18890762 91.95928192]
[-19.77433777 105.26131439]
[-4.83832550 103.87728882]
[10.09768677 102.49326324]
[25.01870346 100.95597076]
[39.92314911 99.26557159]
[54.82759857 97.57517242]
[69.73204803 95.88477325]
[84.63648987 94.19438171]
[96.30993652 82.55998230]
[113.69245911 86.50006104]
[120.12135315 104.55598450]
[130.31932068 92.46002960]
[144.95452881 95.22762299]
[158.99650574 89.95288086]
[173.03848267 84.67813873]
[168.63243103 68.47322845]
[165.84606934 51.91335678]
[164.70648193 35.16000748]
[165.22463989 18.37652397]
[167.39538574 1.72653639]
[171.19743347 -14.62763691]
[176.59362793 -30.52657318]
[183.53121948 -45.81530380]
[191.94248962 -60.34480667]
[201.74530029 -73.97348785]
[212.84400940 -86.56854248]
[225.13031006 -98.00724030]
[238.48434448 -108.17815399]
[252.77583313 -116.98219299]
[267.86538696 -124.33363342]
[283.60583496 -130.16090393]
[299.84368896 -134.40728760]
[316.42056274 -137.03149414]
[333.17486572 -138.00807190]
[349.94320679 -137.32760620]
[366.56210327 -134.99682617]
[382.86956787 -131.03860474]
[398.70663452 -125.49160767]
[413.91894531 -118.41005707]
[428.35818481 -109.86307526]
[441.88366699 -99.93411255]
[454.36355591 -88.72005463]
[465.67633057 -76.33032990]
[477.64657593 -85.36984253]
[489.61682129 -94.40936279]
[501.58709717 -103.44888306]
[513.55737305 -112.48840332]
[518.55957031 -120.20681000]
[525.86743164 -121.58763123]
[538.02081299 -130.37947083]
[550.17413330 -139.17131042]
[562.32745361 -147.96316528]
[574.48077393 -156.75500488]
[586.63415527 -165.54684448]
[588.89074707 -181.18919373]
[601.59704590 -190.58731079]
[617.21466064 -188.16546631]
[626.47796631 -175.36047363]
[623.89111328 -159.76933289]
[610.98889160 -150.64198303]
[595.42596436 -153.39350891]
[583.27264404 -144.60166931]
[571.11932373 -135.80982971]
[558.96594238 -127.01798248]
[546.81262207 -118.22614288]
[534.65930176 -109.43429565]
[522.59686279 -100.51814270]
[510.62661743 -91.47863007]
[498.65634155 -82.43910980]
[486.68609619 -73.39958954]
[474.71585083 -64.36006927]
[481.92932129 -52.93486404]
[488.21231079 -40.97233200]
[493.52502441 -28.54809570]
[497.83380127 -15.74070549]
[501.11138916 -2.63113475]
[503.33700562 10.69772816]
[504.49652100 24.16160393]
[504.58251953 37.67535400]
[503.59445190 51.15352249]
[501.53851318 64.51087189]
[498.42764282 77.66293335]
[494.28143311 90.52651978]
[489.12612915 103.02027130]
[482.99420166 115.06516266]
[475.92446899 126.58500671]
[467.96151733 137.50692749]
[459.15573120 147.76181030]
[449.56268311 157.28480530]
[439.24307251 166.01564026]
[428.26208496 173.89906311]
[416.68914795 180.88519287]
[404.59741211 186.92979431]
[392.06332397 191.99461365]
[379.16610718 196.04756165]
[365.98733521 199.06295776]
[352.61032104 201.02171326]
[339.11962891 201.91136169]
[325.60061646 201.72624207]
[312.13873291 200.46748352]
[298.81912231 198.14297485]
[285.72604370 194.76737976]
[272.94229126 190.36199951]
[260.54867554 184.95463562]
[248.62367249 178.57945251]
[237.24266052 171.27668762]
[226.47766113 163.09251404]
[216.39677429 154.07864380]
[207.06376648 144.29202271]
[198.53770447 133.79450989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[6 53]
[7 19]
[8 18]
[9 17]
[10 16]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[27 45]
[28 44]
[29 43]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
