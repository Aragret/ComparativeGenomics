%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAxxxxxxxxxxAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[242.69990540 75.81814575]
[227.93385315 78.45700836]
[213.16780090 81.09587860]
[198.40174866 83.73474121]
[183.63568115 86.37360382]
[168.99218750 89.62442780]
[154.49659729 93.48159027]
[140.00099182 97.33874512]
[125.50539398 101.19590759]
[111.00980377 105.05307007]
[125.03918457 110.36122131]
[135.46295166 121.14756012]
[140.28849792 135.35017395]
[138.59336853 150.25407410]
[130.70161438 163.01025391]
[118.12181854 171.18025208]
[103.25872803 173.20225525]
[88.95356750 168.68977356]
[77.94092560 158.50538635]
[72.32595825 144.59596252]
[73.18202972 129.62040710]
[80.34549713 116.44146729]
[92.44563293 107.57899475]
[77.44644165 107.73503113]
[66.42725372 118.74480438]
[51.21371841 118.68937683]
[40.78548813 108.11641693]
[25.78629875 108.27245331]
[10.78711033 108.42848969]
[-4.21207809 108.58452606]
[-19.21126747 108.74056244]
[-34.21045685 108.89659882]
[-41.68111801 122.31616211]
[-54.86891556 130.18875122]
[-70.22640228 130.39665222]
[-83.62248230 122.88396454]
[-91.45368958 109.67155457]
[-91.61345673 94.31349182]
[-84.05881500 80.94102478]
[-70.82192230 73.15126801]
[-55.46343613 73.03964233]
[-42.11471558 80.63616180]
[-34.36649323 93.89740753]
[-19.36730385 93.74137115]
[-4.36811495 93.58533478]
[10.63107395 93.42929840]
[25.63026237 93.27326202]
[40.62945175 93.11722565]
[50.83546829 82.32960510]
[66.04455566 81.95768738]
[77.29040527 92.73583984]
[92.28959656 92.57980347]
[107.15264130 90.55747223]
[121.64823914 86.70030975]
[136.14382935 82.84315491]
[150.63943481 78.98599243]
[165.13502502 75.12882996]
[168.19175720 71.83978271]
[171.78550720 69.92769623]
[175.40386963 69.38985443]
[178.59045410 70.05297852]
[180.99682617 71.60755157]
[195.76287842 68.96868134]
[210.52893066 66.32981873]
[225.29499817 63.69095612]
[240.06105042 61.05208969]
[238.49362183 46.12758255]
[238.00721741 31.12887764]
[238.60435486 16.13417244]
[240.28192139 1.22164381]
[243.03118896 -13.53096104]
[246.83779907 -28.04672623]
[251.68191528 -42.24997711]
[257.53826904 -56.06665802]
[264.37637329 -69.42473602]
[272.16052246 -82.25457001]
[280.85015869 -94.48927307]
[290.39999390 -106.06504822]
[300.76022339 -116.92155457]
[311.87680054 -127.00218201]
[323.69183350 -136.25437927]
[336.14364624 -144.62991333]
[349.16738892 -152.08511353]
[362.69512939 -158.58110046]
[376.65634155 -164.08403015]
[390.97827148 -168.56520081]
[405.58618164 -172.00123596]
[420.40396118 -174.37423706]
[435.35433960 -175.67182922]
[450.35937500 -175.88725281]
[465.34085083 -175.01937866]
[480.22064209 -173.07272339]
[494.92120361 -170.05744934]
[509.36584473 -165.98927307]
[523.47924805 -160.88940430]
[537.18792725 -154.78443909]
[550.42028809 -147.70619202]
[563.10748291 -139.69155884]
[575.18322754 -130.78234863]
[586.58459473 -121.02500153]
[597.25219727 -110.47038269]
[607.13043213 -99.17353058]
[616.16766357 -87.19332886]
[624.31695557 -74.59223938]
[631.53570557 -61.43596649]
[637.78631592 -47.79310226]
[643.03613281 -33.73476791]
[647.25787354 -19.33426094]
[650.42950439 -4.66665936]
[652.53448486 10.19156551]
[653.56182861 25.16294861]
[653.50622559 40.16943741]
[652.36785889 55.13278961]
[650.15277100 69.97499847]
[646.87249756 84.61867523]
[642.54406738 98.98748016]
[637.19012451 113.00650024]
[630.83850098 126.60264587]
[623.52239990 139.70503235]
[615.27996826 152.24534607]
[606.15405273 164.15820312]
[596.19238281 175.38150024]
[585.44677734 185.85671997]
[573.97338867 195.52926636]
[561.83190918 204.34867859]
[549.08569336 212.26901245]
[535.80114746 219.24894714]
[522.04760742 225.25210571]
[507.89675903 230.24717712]
[493.42233276 234.20812988]
[478.69982910 237.11431885]
[463.80603027 238.95057678]
[448.81851196 239.70733643]
[433.81549072 239.38066101]
[418.87515259 237.97224426]
[404.07534790 235.48942566]
[389.49331665 231.94515991]
[375.20504761 227.35792542]
[361.28500366 221.75163269]
[347.80581665 215.15550232]
[334.83770752 207.60392761]
[322.44833374 199.13630676]
[310.70223999 189.79675293]
[299.66070557 179.63395691]
[289.38125610 168.70092773]
[279.91754150 157.05465698]
[271.31884766 144.75585938]
[263.63006592 131.86866760]
[256.89120483 118.46024323]
[251.13745117 104.60051727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 62]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[23 52]
[24 51]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
