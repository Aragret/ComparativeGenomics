%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACxxxxxxxxxxCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.28359222 415.87463379]
[125.28359222 400.87463379]
[125.28359222 385.87463379]
[125.28359222 370.87463379]
[125.28359222 355.87463379]
[125.28359222 340.87463379]
[125.28359222 325.87463379]
[125.28359222 310.87463379]
[125.28359222 295.87463379]
[125.28359222 280.87463379]
[103.63808441 274.07943726]
[85.89626312 259.90145874]
[74.47046661 240.24632263]
[70.92223358 217.76586914]
[75.74893188 195.50039673]
[88.31410217 176.46740723]
[106.93134308 163.25274658]
[102.37865448 148.96034241]
[97.82595825 134.66793823]
[93.27326965 120.37551880]
[83.35308838 98.02687073]
[71.72932434 88.54593658]
[60.10556412 79.06500244]
[65.51101685 93.05718231]
[61.22040176 107.43044281]
[49.02928162 116.16980743]
[34.03943253 115.61799622]
[22.52387047 106.00592804]
[19.30166817 91.35610199]
[25.72126389 77.79923248]
[39.09741592 71.00846863]
[24.11482430 70.28598785]
[9.13223362 69.56350708]
[-5.85035753 68.84103394]
[-15.59695721 80.77040863]
[-30.32689667 84.62815857]
[-44.33824539 79.13761902]
[-52.33413315 66.59952545]
[-67.31672668 65.87704468]
[-82.29931641 65.15456390]
[-98.41128540 70.43099213]
[-107.94174194 56.40933990]
[-97.10636139 43.36975479]
[-81.57683563 50.17197418]
[-66.59424591 50.89445496]
[-51.61165237 51.61693192]
[-42.44646454 39.90636826]
[-27.97183228 35.78945541]
[-13.68142509 41.04660797]
[-5.12787819 53.85844040]
[9.85471249 54.58091736]
[24.83730316 55.30339813]
[39.81989288 56.02587891]
[43.44461060 57.46738052]
[46.89048004 59.23556137]
[42.61408234 44.85806656]
[38.33768463 30.48056793]
[34.06128693 16.10307121]
[29.78489113 1.72557318]
[25.50849342 -12.65192413]
[10.48808861 -11.55578041]
[-4.41672039 -13.71465492]
[-18.50881004 -19.02757263]
[-31.12906647 -27.24604034]
[-41.68721771 -37.98566437]
[-49.68944168 -50.74412918]
[-54.76145554 -64.92470551]
[-56.66603851 -79.86413574]
[-55.31410217 -94.86368561]
[-50.76888657 -109.22178650]
[-43.24297333 -122.26689148]
[-33.08836746 -133.38885498]
[-20.78001595 -142.06747437]
[-6.89360428 -147.89685059]
[7.92137623 -150.60432434]
[22.97200203 -150.06326294]
[37.55432510 -146.29898071]
[50.98630905 -139.48753357]
[62.63971329 -129.94749451]
[71.96948242 -118.12508392]
[78.53925323 -104.57324982]
[82.04174805 -89.92584229]
[82.31313324 -74.86793518]
[79.34073639 -60.10382843]
[73.26356506 -46.32405853]
[64.36586761 -34.17313004]
[53.06380081 -24.21936607]
[39.88599014 -16.92832184]
[44.16238785 -2.55082417]
[48.43878555 11.82667255]
[52.71518326 26.20417023]
[56.99158096 40.58166885]
[61.26797867 54.95916367]
[69.58650208 67.44123840]
[81.21025848 76.92217255]
[92.83402252 86.40311432]
[107.69771576 88.42070770]
[121.42819214 82.38134003]
[130.94517517 69.74259949]
[145.71049500 71.70075226]
[159.44097900 65.66139221]
[165.46330261 49.26170731]
[181.16452026 42.40435028]
[196.66519165 48.87284470]
[210.27673340 42.56998444]
[223.88825989 36.26712418]
[230.39894104 29.79042816]
[237.82341003 29.97678375]
[251.55387878 23.93742180]
[260.81103516 10.40090752]
[277.13973999 11.91920280]
[283.74243164 26.93041420]
[273.82684326 39.99229431]
[257.59326172 37.66790009]
[243.86276245 43.70726395]
[230.19111633 49.87866211]
[216.57958984 56.18152237]
[202.96804810 62.48438263]
[200.25244141 75.10863495]
[190.60757446 83.98522949]
[177.41526794 85.69624329]
[165.48034668 79.39186859]
[151.74986267 85.43122864]
[143.21498108 97.63799286]
[127.46755981 96.11182404]
[113.73707581 102.15118408]
[107.56568146 115.82283020]
[112.11837006 130.11523438]
[116.67106628 144.40765381]
[121.22375488 158.70005798]
[129.81468201 157.70523071]
[138.45773315 157.91394043]
[146.98518372 159.32138062]
[155.23164368 161.89947510]
[163.03729248 165.59745789]
[170.25094604 170.34286499]
[176.73300171 176.04295349]
[182.35816956 182.58650208]
[187.01785278 189.84599304]
[190.62223816 197.68014526]
[193.10206604 205.93656921]
[194.40994263 214.45478821]
[194.52124023 223.06935120]
[193.43457031 231.61303711]
[191.17176819 239.92013550]
[187.77749634 247.82960510]
[183.31832886 255.18823242]
[177.88150024 261.85357666]
[171.57310486 267.69677734]
[164.51611328 272.60491943]
[156.84793091 276.48345947]
[148.71774292 279.25772095]
[140.28358459 280.87463379]
[140.28358459 295.87463379]
[140.28358459 310.87463379]
[140.28358459 325.87463379]
[140.28358459 340.87463379]
[140.28358459 355.87463379]
[140.28358459 370.87463379]
[140.28358459 385.87463379]
[140.28358459 400.87463379]
[140.28358459 415.87463379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[3 160]
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[17 130]
[18 129]
[19 128]
[20 127]
[21 96]
[22 95]
[23 94]
[31 53]
[32 52]
[33 51]
[34 50]
[38 46]
[39 45]
[40 44]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[97 126]
[98 125]
[100 123]
[101 122]
[104 118]
[105 117]
[106 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
