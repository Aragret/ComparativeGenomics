%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGxxxxxxxxxxCGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.48095703 279.01400757]
[113.48095703 264.01400757]
[113.48095703 249.01400757]
[113.48095703 234.01400757]
[113.48095703 219.01400757]
[113.48095703 204.01400757]
[113.48095703 189.01400757]
[113.48095703 174.01400757]
[113.48095703 159.01400757]
[113.48095703 144.01400757]
[102.31868744 145.42411804]
[91.28383636 144.08078003]
[81.03724670 140.13059998]
[72.17638397 133.87422180]
[65.20053101 125.74456024]
[60.48280334 116.27723694]
[58.25051880 106.07559204]
[58.57493591 95.77232361]
[61.37076950 85.99028778]
[66.40531921 77.30484772]
[55.74369431 66.75355530]
[45.08206558 56.20226669]
[34.42044067 45.65097809]
[23.75881386 35.09968567]
[13.09718800 24.54839706]
[2.43556142 13.99710655]
[-10.34179592 6.13968039]
[-24.56857491 1.38586569]
[-28.90626526 7.85959673]
[-34.68362808 13.26661873]
[-41.63827133 17.28717041]
[-49.43699265 19.66604233]
[-57.69164658 20.22819901]
[-65.97845459 18.89047050]
[-73.85974121 15.66862583]
[-80.90706635 10.67927170]
[-86.72441864 4.13637972]
[-90.97029877 -3.65752935]
[-93.37748718 -12.32520676]
[-107.87308502 -16.18236732]
[-122.36868286 -20.03952599]
[-136.86427307 -23.89668465]
[-153.72557068 -22.12660217]
[-160.09414673 -37.83893967]
[-146.75885010 -48.30823898]
[-133.00712585 -38.39228058]
[-118.51152039 -34.53512192]
[-104.01592255 -30.67796326]
[-89.52033234 -26.82080269]
[-82.47519684 -40.06338882]
[-93.77420044 -49.92911148]
[-105.07320404 -59.79483414]
[-121.11232758 -60.14982605]
[-130.72001648 -72.99785614]
[-126.52606201 -88.48302460]
[-111.74771881 -94.72642517]
[-97.72166443 -86.93866730]
[-95.20748138 -71.09384155]
[-83.90847778 -61.22811890]
[-72.60947418 -51.36239243]
[-45.12732697 -53.21166992]
[-24.42336464 -37.20494461]
[-19.81476021 -12.84091377]
[-5.58798122 -8.08709908]
[-15.29370213 -19.52383614]
[-21.77513885 -33.05125427]
[-24.60691071 -47.78152847]
[-23.60316277 -62.74790955]
[-18.82977676 -76.96813202]
[-10.60002995 -89.50891876]
[0.54595047 -99.54720306]
[13.87664509 -106.42416382]
[28.51714897 -109.68845367]
[43.50659561 -109.12585449]
[57.86121368 -104.77326965]
[70.63889313 -96.91637421]
[81.00102997 -86.07081604]
[88.26755524 -72.94840240]
[91.96154022 -58.41036987]
[91.84056854 -43.41085815]
[87.91255951 -28.93429756]
[80.43532562 -15.93079853]
[69.89960480 -5.25379086]
[56.99685287 2.39598441]
[42.57389832 6.51646614]
[27.57732964 6.83722401]
[12.98685169 3.33547997]
[23.64847755 13.88677025]
[34.31010437 24.43806076]
[44.97172928 34.98934937]
[55.63335800 45.54064178]
[66.29498291 56.09193039]
[76.95661163 66.64321899]
[87.94353485 60.57374573]
[100.46108246 58.08779907]
[113.35105133 59.54516220]
[125.38117218 64.93460846]
[135.36288452 73.86314392]
[142.26846313 85.58227539]
[145.33604431 99.04983521]
[144.15185547 113.02237701]
[159.15104675 112.86634064]
[174.15023804 112.71030426]
[185.16943359 101.70053101]
[200.38296509 101.75595093]
[210.81118774 112.32891846]
[225.81037903 112.17288208]
[240.80957031 112.01684570]
[255.80876160 111.86080933]
[265.59478760 99.66376495]
[280.94140625 96.66134644]
[294.60247803 104.27118683]
[300.12759399 118.90016937]
[294.90798950 133.64091492]
[281.40823364 141.53332520]
[266.00244141 138.85081482]
[255.96479797 126.86000061]
[240.96560669 127.01603699]
[225.96641541 127.17207336]
[210.96722412 127.32810974]
[200.76121521 138.11573792]
[185.55212402 138.48764038]
[174.30627441 127.70948792]
[159.30708313 127.86552429]
[144.30789185 128.02156067]
[157.54573059 135.07562256]
[170.78356934 142.12968445]
[185.78211975 142.33720398]
[199.36123657 148.70962524]
[209.10557556 160.11347961]
[213.28190613 174.52035522]
[211.14738464 189.36770630]
[203.08168030 202.01461792]
[190.51945496 210.21159363]
[175.69512939 212.50061035]
[161.24554443 208.47453308]
[149.74082947 198.84948730]
[143.22734070 185.33746338]
[142.86372375 170.34147644]
[135.67234802 157.17774963]
[128.48095703 144.01400757]
[128.48095703 159.01400757]
[128.48095703 174.01400757]
[128.48095703 189.01400757]
[128.48095703 204.01400757]
[128.48095703 219.01400757]
[128.48095703 234.01400757]
[128.48095703 249.01400757]
[128.48095703 264.01400757]
[128.48095703 279.01400757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 64]
[28 63]
[39 49]
[40 48]
[41 47]
[42 46]
[50 60]
[51 59]
[52 58]
[101 125]
[102 124]
[103 123]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
