%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUxxxxxxxxxxGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-26.44068527 328.74023438]
[-37.46599960 322.28909302]
[-45.71828842 334.81506348]
[-46.84934616 350.59579468]
[-60.31243134 356.96716309]
[-68.56472015 369.49313354]
[-76.81700897 382.01910400]
[-85.06929779 394.54504395]
[-93.32158661 407.07101440]
[-101.57387543 419.59698486]
[-109.82616425 432.12295532]
[-108.01548004 448.06347656]
[-119.45088196 459.31564331]
[-135.36010742 457.24774170]
[-143.53895569 443.44607544]
[-137.71331787 428.49810791]
[-122.35212708 423.87066650]
[-114.09983826 411.34469604]
[-105.84754944 398.81872559]
[-97.59526062 386.29275513]
[-89.34297180 373.76681519]
[-81.09068298 361.24084473]
[-72.83839417 348.71487427]
[-72.29759216 333.83010864]
[-58.24425125 326.56277466]
[-49.99196243 314.03680420]
[-67.84918976 300.33969116]
[-84.46187592 285.15710449]
[-99.70683289 268.60165405]
[-113.47103119 250.79608154]
[-125.65241241 231.87240601]
[-136.16064453 211.97093201]
[-144.91783142 191.23922729]
[-151.85902405 169.83100891]
[-156.93276978 147.90502930]
[-160.10144043 125.62384033]
[-161.34153748 103.15266418]
[-160.64387512 80.65811157]
[-158.01362610 58.30696869]
[-153.47029114 36.26496887]
[-147.04754639 14.69554138]
[-138.79302979 -6.24137974]
[-152.31721497 -12.72954464]
[-165.84141541 -19.21771049]
[-179.43023682 -11.72614288]
[-194.82302856 -13.68604851]
[-206.10096741 -24.34380150]
[-208.92744446 -39.60128021]
[-202.21562195 -53.59167099]
[-188.54634094 -60.93538666]
[-173.17570496 -58.80861282]
[-162.01403809 -48.02914429]
[-159.35324097 -32.74190140]
[-145.82905579 -26.25373459]
[-132.30487061 -19.76556969]
[-126.17561340 -30.97302437]
[-119.50608063 -41.86761856]
[-112.31221008 -52.42332077]
[-104.61116791 -62.61492157]
[-96.42135620 -72.41807556]
[-87.76234436 -81.80936432]
[-78.65481567 -90.76634979]
[-69.12051392 -99.26763916]
[-59.18223190 -107.29293060]
[-48.86370087 -114.82304382]
[-38.18956757 -121.83999634]
[-27.18533134 -128.32702637]
[-15.87728214 -134.26864624]
[-4.29242849 -139.65065002]
[7.54155493 -144.46017456]
[19.59639931 -148.68574524]
[31.84330940 -152.31727600]
[44.25302887 -155.34606934]
[56.79591370 -157.76490784]
[69.44200134 -159.56800842]
[82.16109467 -160.75105286]
[94.92279053 -161.31123352]
[107.69661713 -161.24720764]
[120.45205688 -160.55911255]
[133.15864563 -159.24861145]
[145.78602600 -157.31883240]
[158.30403137 -154.77436829]
[170.68276978 -151.62132263]
[182.89265442 -147.86720276]
[194.90452576 -143.52099609]
[206.68969727 -138.59306335]
[218.22001648 -133.09519958]
[229.46794128 -127.04051208]
[240.40658569 -120.44348907]
[251.00982666 -113.31987762]
[261.25234985 -105.68669891]
[271.10968018 -97.56217957]
[280.55828857 -88.96573639]
[289.57556152 -79.91789246]
[298.13998413 -70.44026947]
[306.23110962 -60.55550766]
[313.82958984 -50.28721619]
[320.91729736 -39.65992355]
[327.47726440 -28.69901848]
[333.49383545 -17.43067932]
[338.95266724 -5.88182783]
[343.84069824 5.91995096]
[348.14624023 17.94646454]
[351.85903931 30.16898346]
[354.97018433 42.55831528]
[357.47225952 55.08485794]
[359.35931396 67.71869659]
[360.62683105 80.42964172]
[361.27175903 93.18733978]
[361.29257202 105.96131134]
[360.68920898 118.72103882]
[359.46313477 131.43605042]
[357.61724854 144.07597351]
[355.15600586 156.61059570]
[352.08523560 169.00999451]
[348.41229248 181.24455261]
[344.14596558 193.28503418]
[339.29641724 205.10267639]
[333.87524414 216.66925049]
[327.89541626 227.95713806]
[321.37118530 238.93936157]
[314.31814575 249.58969116]
[306.75317383 259.88269043]
[298.69430542 269.79376221]
[290.16079712 279.29922485]
[281.17303467 288.37640381]
[271.75250244 297.00360107]
[261.92169189 305.16018677]
[251.70410156 312.82669067]
[241.12411499 319.98483276]
[230.20703125 326.61746216]
[218.97889709 332.70874023]
[207.46655273 338.24417114]
[195.69750977 343.21044922]
[183.69984436 347.59579468]
[171.50225830 351.38967896]
[159.13386536 354.58303833]
[146.62422180 357.16827393]
[134.00318909 359.13919067]
[121.30094910 360.49108887]
[108.54781342 361.22073364]
[95.77426147 361.32638550]
[83.01080322 360.80780029]
[70.28793335 359.66619873]
[57.63603592 357.90432739]
[45.08533478 355.52636719]
[32.66580963 352.53802490]
[20.40713310 348.94641113]
[8.33858490 344.76013184]
[-3.51100707 339.98919678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
