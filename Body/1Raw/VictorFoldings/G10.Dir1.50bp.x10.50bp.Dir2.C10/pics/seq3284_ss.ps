%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAxxxxxxxxxxUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.01189423 273.87890625]
[95.01189423 258.87890625]
[95.01189423 243.87890625]
[95.01189423 228.87890625]
[95.01189423 213.87890625]
[95.01189423 198.87890625]
[95.01189423 183.87890625]
[95.01189423 168.87890625]
[95.01189423 153.87890625]
[95.01189423 138.87890625]
[89.26656342 134.05799866]
[82.07518005 147.22174072]
[74.88379669 160.38548279]
[70.65242767 174.77629089]
[57.42908096 181.85748291]
[43.10582352 177.40278625]
[36.23117447 164.07089233]
[40.90811920 149.81866455]
[54.34593201 143.15217590]
[66.06091309 133.78417969]
[77.77589417 124.41619110]
[72.03056335 119.59528351]
[57.25844574 122.20000458]
[42.48633194 124.80473328]
[27.71421432 127.40945435]
[12.94209766 130.01417542]
[-1.83001876 132.61889648]
[-5.47326660 147.40560913]
[-14.82096004 159.42810059]
[-28.25355530 166.60342407]
[-43.44377136 167.68841553]
[-57.75981522 162.49507141]
[-68.72134399 151.92318726]
[-74.42920685 137.80439758]
[-73.89447784 122.58486938]
[-67.20980835 108.90148163]
[-55.53335953 99.12496185]
[-40.88813782 94.94915009]
[-25.81152153 97.09753418]
[-12.91562557 105.19789124]
[-4.43474150 117.84677887]
[10.33737469 115.24205780]
[25.10949135 112.63733673]
[39.88160706 110.03261566]
[54.65372467 107.42788696]
[69.42584229 104.82316589]
[72.63483429 90.17044067]
[60.30355072 81.62998199]
[47.97226715 73.08952332]
[35.64098358 64.54906464]
[23.30970001 56.00860596]
[6.84601068 51.96098709]
[6.17784691 35.02021027]
[22.27160454 29.68848419]
[31.85016060 43.67732239]
[44.18144226 52.21778107]
[56.51272583 60.75823975]
[68.84400940 69.29869843]
[81.17529297 77.83915710]
[94.86592102 71.70998383]
[96.70924377 56.82367706]
[98.55256653 41.93737030]
[90.97108459 25.18769073]
[102.01418304 11.58274937]
[103.55147552 -3.33826756]
[104.47489166 -18.30981827]
[104.78286743 -33.30665588]
[105.09084320 -48.30349350]
[105.39882660 -63.30033112]
[91.35041046 -69.04545593]
[80.32872009 -79.48033905]
[73.82434845 -93.19374847]
[72.71696472 -108.33106232]
[77.15631866 -122.84506989]
[86.54203796 -134.77288818]
[99.60477448 -142.50135803]
[114.57790375 -144.98529053]
[129.43643188 -141.88873291]
[142.17085266 -133.63047791]
[151.05895996 -121.32739258]
[154.89871216 -106.64336395]
[153.17079163 -91.56427765]
[146.10890198 -78.12947083]
[134.66810608 -68.15587616]
[120.39566040 -62.99235535]
[120.08768463 -47.99551773]
[119.77970886 -32.99867630]
[119.47173309 -18.00184059]
[121.37875366 -15.86775970]
[122.52817535 -12.82669830]
[122.56141663 -9.17353058]
[121.23705292 -5.33040714]
[118.47249603 -1.80097508]
[116.93520355 13.12004089]
[124.33621979 22.73706436]
[123.13713837 35.21638870]
[113.43887329 43.78069305]
[111.59555054 58.66700363]
[109.75222778 73.55330658]
[114.80494690 79.09587860]
[119.35214996 64.80171967]
[134.00483704 61.59254074]
[144.11047363 72.67749023]
[139.56353760 86.97173309]
[124.91037750 90.18100739]
[129.96310425 95.72357941]
[144.95597839 95.26165009]
[159.94886780 94.79972839]
[174.94175720 94.33779907]
[182.79043579 81.05616760]
[196.58401489 74.14669800]
[211.92100525 75.81416321]
[223.90742493 85.52649689]
[228.71844482 100.18451691]
[224.81890869 115.11090851]
[213.45312500 125.54270935]
[198.24787903 128.15116882]
[184.05511475 122.10395050]
[175.40368652 109.33068848]
[160.41079712 109.79261017]
[145.41790771 110.25453949]
[130.42501831 110.71646118]
[143.80397034 117.49905396]
[157.18293762 124.28165436]
[170.56188965 131.06423950]
[185.56184387 131.02627563]
[199.79713440 135.75454712]
[211.79350281 144.75936890]
[220.30857849 157.10820007]
[224.46051025 171.52212524]
[223.81930542 186.50842285]
[218.45137024 200.51502991]
[208.91262817 212.09140015]
[196.19094849 220.03865051]
[181.60380554 223.53372192]
[166.66192627 222.21466064]
[152.91270447 216.21806335]
[141.78007507 206.16497803]
[134.41697693 193.09651184]
[131.58604431 178.37013245]
[124.39466095 165.20639038]
[117.20327759 152.04264832]
[110.01189423 138.87890625]
[110.01189423 153.87890625]
[110.01189423 168.87890625]
[110.01189423 183.87890625]
[110.01189423 198.87890625]
[110.01189423 213.87890625]
[110.01189423 228.87890625]
[110.01189423 243.87890625]
[110.01189423 258.87890625]
[110.01189423 273.87890625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[60 99]
[61 98]
[62 97]
[64 94]
[65 93]
[66 88]
[67 87]
[68 86]
[69 85]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
