%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.40722656 239.79312134]
[95.09516907 224.79637146]
[94.78311157 209.79962158]
[94.47106171 194.80285645]
[94.15900421 179.80610657]
[93.84694672 164.80935669]
[93.53488922 149.81260681]
[93.22283173 134.81584167]
[92.91077423 119.81909180]
[80.64840698 111.17997742]
[66.42163086 115.93379211]
[52.19485092 120.68760681]
[37.96807098 125.44142151]
[27.33138466 137.15344238]
[12.80806541 133.84852600]
[-1.41871345 138.60234070]
[0.17807385 153.57780457]
[-1.48220158 168.54635620]
[-6.32188559 182.80789185]
[-14.11461735 195.69538879]
[-24.49591637 206.60604858]
[-36.98023224 215.02958679]
[-50.98364639 220.57200623]
[-65.85120392 222.97407532]
[-80.88750458 222.12345886]
[-95.38928986 218.05992126]
[-108.67828369 210.97354126]
[-120.13292694 201.19573975]
[-129.21746826 189.18386841]
[-135.50700378 175.49972534]
[-138.70736694 160.78335571]
[-138.66886902 145.72305298]
[-135.39332581 131.02322388]
[-129.03390503 117.37141418]
[-119.88807678 105.40613556]
[-108.38359833 95.68702698]
[-95.05855560 88.66867065]
[-80.53619385 84.67932892]
[-65.49573517 83.90557861]
[-50.64065170 86.38362885]
[-36.66575241 91.99755859]
[-24.22466278 100.48480988]
[-13.89927578 111.44840240]
[-6.17252827 124.37556458]
[8.05425072 119.62174988]
[17.67334366 108.24974823]
[33.21425629 111.21464539]
[47.44103622 106.46083069]
[61.66781616 101.70701599]
[75.89459229 96.95320129]
[79.68408966 91.45738220]
[84.49996948 87.71096802]
[89.70346069 85.82215118]
[94.68286133 85.69207001]
[98.91541290 87.03964233]
[102.01733398 89.44367218]
[110.52842712 77.09210205]
[119.03951263 64.74052429]
[127.55060577 52.38895416]
[136.06169128 40.03738022]
[137.52081299 24.28360176]
[151.11352539 18.19367218]
[159.62461853 5.84209919]
[161.08372498 -9.91168022]
[174.67645264 -16.00161171]
[160.94752502 -9.95870876]
[146.25273132 -6.94819212]
[131.25357056 -7.10557890]
[116.62518311 -10.42378330]
[103.02608490 -16.75343895]
[91.06842804 -25.80961990]
[81.29047394 -37.18466568]
[74.13237762 -50.36653519]
[69.91635895 -64.76184845]
[68.83219147 -79.72261810]
[70.92868805 -94.57538605]
[76.11147308 -108.65156555]
[84.14723969 -121.31752014]
[94.67427063 -132.00309753]
[107.21868896 -140.22731018]
[121.21582794 -145.61991882]
[136.03559875 -147.93820190]
[151.01089478 -147.07778931]
[165.46762085 -143.07742310]
[178.75502014 -136.11717224]
[190.27496338 -126.51034546]
[199.50886536 -114.68939209]
[206.04109192 -101.18643188]
[209.57759094 -86.60928345]
[209.95916748 -71.61413574]
[207.16865540 -56.87599182]
[201.33164978 -43.05826950]
[192.70939636 -30.78125954]
[206.49177551 -36.70122528]
[220.27416992 -42.62118530]
[229.90048218 -55.17684937]
[244.64825439 -53.09061813]
[258.43063354 -59.01058197]
[272.21301270 -64.93054199]
[275.50744629 -80.09387207]
[287.10784912 -90.39970398]
[302.55364990 -91.88523865]
[315.90560913 -83.97926331]
[322.02966309 -69.72177887]
[318.57092285 -54.59508133]
[306.85940552 -44.41569901]
[291.39840698 -43.09780884]
[278.13296509 -51.14816284]
[264.35058594 -45.22820282]
[250.56822205 -39.30823898]
[241.92770386 -27.17601013]
[226.19412231 -28.83880615]
[212.41174316 -22.91884232]
[198.62936401 -16.99887848]
[187.02801514 -7.49052048]
[186.17767334 7.37979174]
[171.97619629 14.35318947]
[163.46510315 26.70476151]
[162.61476135 41.57507324]
[148.41326904 48.54847336]
[139.90217590 60.90004349]
[131.39108276 73.25161743]
[122.87999725 85.60318756]
[114.36890411 97.95476532]
[124.22770691 86.64971924]
[137.28823853 79.27254486]
[152.05989075 76.66519928]
[166.85678101 79.12525940]
[179.99015808 86.37195587]
[189.96109009 97.57822418]
[195.63160706 111.46509552]
[196.35452271 126.44766998]
[192.04734802 140.81597900]
[183.20164490 152.93016052]
[170.82699585 161.40765381]
[156.33567810 165.28089905]
[141.38162231 164.10784912]
[127.67150879 158.02238464]
[116.77008057 147.71903992]
[109.92151642 134.37373352]
[107.90753174 119.50704193]
[108.21958923 134.50379944]
[108.53164673 149.50054932]
[108.84369659 164.49729919]
[109.15575409 179.49404907]
[109.46781158 194.49081421]
[109.77986908 209.48756409]
[110.09192657 224.48431396]
[110.40398407 239.48106384]
[112.99497986 258.68878174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 50]
[11 49]
[12 48]
[13 47]
[15 45]
[16 44]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[62 118]
[63 117]
[65 115]
[93 114]
[94 113]
[95 112]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
