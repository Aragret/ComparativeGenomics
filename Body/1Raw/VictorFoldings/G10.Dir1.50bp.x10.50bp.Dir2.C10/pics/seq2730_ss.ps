%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGxxxxxxxxxxAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.84375000 571.54425049]
[109.84375000 556.54425049]
[109.84375000 541.54425049]
[109.84375000 526.54425049]
[109.84375000 511.54425049]
[109.84375000 496.54425049]
[109.84375000 481.54425049]
[109.84375000 466.54425049]
[109.84375000 451.54425049]
[109.84375000 436.54425049]
[94.30718231 431.79061890]
[80.96980286 422.47933960]
[71.13046265 409.50335693]
[65.75164795 394.11303711]
[65.36529541 377.79586792]
[70.02026367 362.13265991]
[79.27642822 348.64434814]
[92.24632263 338.64431763]
[107.68019867 333.11059570]
[107.05622101 318.12359619]
[106.43224335 303.13656616]
[105.80826569 288.14953613]
[105.18428802 273.16253662]
[92.34255219 262.34829712]
[91.24260712 245.25811768]
[103.04737854 232.39015198]
[102.11175537 217.41935730]
[101.02043915 202.45910645]
[99.77356720 187.51101685]
[98.52669525 172.56292725]
[97.27981567 157.61483765]
[96.03294373 142.66676331]
[94.78607178 127.71867371]
[79.54434204 119.41844177]
[72.04774475 103.76579285]
[57.18470001 101.74346161]
[42.32165146 99.72112274]
[27.45860481 97.69879150]
[13.86960793 106.22631836]
[-1.22180390 100.78308105]
[-6.23879099 85.54466248]
[2.66724968 72.20067596]
[18.66436577 70.98748016]
[29.48093796 82.83574677]
[44.34398651 84.85807800]
[59.20703125 86.88041687]
[74.07007599 88.90274811]
[83.04416656 77.46092987]
[96.52517700 72.01008606]
[98.70201874 57.16887665]
[100.87885284 42.32767487]
[102.90119171 27.46462631]
[104.76879883 12.58134651]
[91.33332062 19.25127220]
[77.65285492 13.09946823]
[73.72670746 -1.37759495]
[82.42457581 -13.59835625]
[97.38903046 -14.63042736]
[107.68205261 -3.72007418]
[111.08502960 -18.32896614]
[114.48800659 -32.93785858]
[117.89098358 -47.54675293]
[121.14181519 -62.19025421]
[124.24013519 -76.86677551]
[122.94821167 -85.97626495]
[127.55859375 -91.81493378]
[123.15381622 -107.01061249]
[133.57675171 -117.65071106]
[136.97972107 -132.25959778]
[123.59945679 -139.21798706]
[112.37057495 -149.28591919]
[103.99895477 -161.83050537]
[99.01082611 -176.06318665]
[97.71976471 -191.08929443]
[100.20690918 -205.96427917]
[106.31592560 -219.75306702]
[115.66279602 -231.58889771]
[127.65997314 -240.72775269]
[141.55329895 -246.59515381]
[156.46942139 -248.82228088]
[171.47070312 -247.26913452]
[185.61415100 -242.03334045]
[198.01071167 -233.44403076]
[207.88110352 -222.04113770]
[214.60487366 -208.54144287]
[217.75936890 -193.79356384]
[217.14628601 -178.72456360]
[212.80416870 -164.28167725]
[205.00596619 -151.37281799]
[194.24186707 -140.80941772]
[181.18853760 -133.25553894]
[166.66648865 -129.18600464]
[151.58862305 -128.85662842]
[148.18563843 -114.24773407]
[152.83381653 -100.09698486]
[142.16748047 -88.41195679]
[138.91665649 -73.76845551]
[135.81834412 -59.09193039]
[137.52505493 -51.85088348]
[132.49987793 -44.14377213]
[129.09690857 -29.53488159]
[125.69392395 -14.92598915]
[122.29094696 -0.31709620]
[119.65208435 14.44895935]
[117.78446960 29.33223915]
[120.08718109 36.40635681]
[115.72006226 44.50450897]
[113.54322052 59.34571457]
[111.36638641 74.18692017]
[121.91134644 82.24042511]
[127.60708618 94.22431946]
[127.19306946 107.48643494]
[120.76092529 119.09172058]
[109.73415375 126.47179413]
[110.98103333 141.41987610]
[112.22790527 156.36796570]
[113.47477722 171.31605530]
[114.72165680 186.26414490]
[115.96852875 201.21223450]
[119.82202148 209.56701660]
[117.08254242 216.48371887]
[118.01817322 231.45451355]
[129.10388184 239.17233276]
[133.63465881 251.69032288]
[130.15986633 264.33944702]
[120.17130280 272.53854370]
[120.79528046 287.52557373]
[121.41925812 302.51257324]
[122.04323578 317.49960327]
[122.66721344 332.48663330]
[136.11235046 335.72448730]
[148.24024963 342.34381104]
[158.21823120 351.88256836]
[165.36318970 363.67852783]
[169.18840027 376.91519165]
[169.43661499 390.67846680]
[166.09739685 404.01962280]
[159.40734863 416.02078247]
[149.83337402 425.85809326]
[138.04010010 432.85815430]
[124.84375000 436.54425049]
[124.84375000 451.54425049]
[124.84375000 466.54425049]
[124.84375000 481.54425049]
[124.84375000 496.54425049]
[124.84375000 511.54425049]
[124.84375000 526.54425049]
[124.84375000 541.54425049]
[124.84375000 556.54425049]
[124.84375000 571.54425049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[26 122]
[27 121]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[35 47]
[36 46]
[37 45]
[38 44]
[49 109]
[50 108]
[51 107]
[52 105]
[53 104]
[59 103]
[60 102]
[61 101]
[62 100]
[63 98]
[64 97]
[66 96]
[68 94]
[69 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
