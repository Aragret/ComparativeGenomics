%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACxxxxxxxxxxUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.38435364 424.04364014]
[87.38435364 409.04364014]
[87.38435364 394.04364014]
[87.38435364 379.04364014]
[87.38435364 364.04364014]
[87.38435364 349.04364014]
[87.38435364 334.04364014]
[87.38435364 319.04364014]
[87.38435364 304.04364014]
[87.38435364 289.04364014]
[73.66297913 286.02740479]
[60.87361145 280.19781494]
[49.58625793 271.81173706]
[40.30458832 261.24011230]
[33.44347763 248.95140076]
[29.31043816 235.49095154]
[28.09186363 221.45672607]
[29.84460831 207.47277832]
[34.49334717 194.16145325]
[41.83380508 182.11576843]
[51.54172897 171.87292480]
[63.18722916 163.89036560]
[76.25378418 158.52537537]
[90.16117859 156.01905823]
[90.78515625 141.03204346]
[91.40913391 126.04502106]
[77.49863434 119.43329620]
[68.43792725 105.50053406]
[67.94641876 87.66787720]
[77.42219543 71.12982178]
[62.92660141 67.27265930]
[48.43100357 63.41550064]
[33.93540955 59.55834198]
[29.64827728 60.89325333]
[25.57949829 60.76639938]
[22.17233658 59.43480682]
[19.73674583 57.27567291]
[18.42121315 54.73073196]
[4.29641056 49.68197632]
[-6.18843174 60.72679138]
[-20.26162529 66.54616547]
[-35.48490524 66.13185120]
[-49.22074509 59.55564117]
[-59.08932877 47.95689392]
[-63.38086319 33.34516525]
[-61.35181427 18.25202370]
[-53.35372543 5.29245234]
[-40.77231979 -3.28822803]
[-25.78739548 -6.00336218]
[-10.99518490 -2.38253689]
[1.04147398 6.94691849]
[8.23715687 20.36861801]
[9.34516716 35.55717468]
[23.46997070 40.60593033]
[37.79256821 45.06274414]
[52.28816223 48.91990662]
[66.78376007 52.77706528]
[81.27935791 56.63422394]
[92.57836151 46.76850128]
[90.71074677 31.88522148]
[88.84313202 17.00194168]
[86.97552490 2.11866140]
[85.10791016 -12.76461887]
[70.24684906 -15.59375954]
[56.98836899 -22.87852859]
[46.63139725 -33.90523911]
[40.19060898 -47.59360886]
[38.29700851 -62.60258865]
[41.13610458 -77.46175385]
[48.42975998 -90.71534729]
[59.46340942 -101.06492615]
[73.15608978 -107.49653625]
[88.16633606 -109.38008881]
[103.02359009 -106.53102875]
[116.27230072 -99.22850037]
[126.61447906 -88.18791962]
[133.03691101 -74.49092865]
[134.91040039 -59.47942734]
[132.05139160 -44.62408066]
[124.73999023 -31.38027191]
[113.69247437 -21.04549026]
[99.99118805 -14.63223171]
[101.85880280 0.25104824]
[103.72641754 15.13432789]
[105.59403229 30.01760864]
[107.46163940 44.90088654]
[112.95808411 30.94420052]
[112.07308197 15.97033024]
[118.67459106 2.50110626]
[131.05175781 -5.97273207]
[145.99684143 -7.25507069]
[159.63662720 -1.01357329]
[168.43615723 11.13418865]
[170.11492920 26.03994942]
[164.23785400 39.84067154]
[152.32806396 48.95970535]
[137.46929932 51.03338623]
[124.86365509 59.16342545]
[139.82389832 58.07211685]
[154.78414917 56.98080444]
[169.74440002 55.88949585]
[184.70465088 54.79818344]
[197.90533447 46.07736969]
[211.16178894 52.86820602]
[226.12203979 51.77689362]
[231.67846680 37.56110001]
[242.85848999 27.17024422]
[257.44229126 22.66744041]
[272.53427124 24.94672394]
[285.13787842 33.55554199]
[292.75067139 46.78460312]
[293.86114502 62.00727081]
[288.24877930 76.20107269]
[277.02792358 86.54782104]
[262.42648315 90.99316406]
[247.34361267 88.65446472]
[234.77398682 79.99607849]
[227.21334839 66.73714447]
[212.25309753 67.82845306]
[200.12248230 76.47120667]
[185.79595947 69.75843048]
[170.83570862 70.84973907]
[155.87545776 71.94105530]
[140.91520691 73.03236389]
[125.95496368 74.12367249]
[130.82733154 108.72330475]
[106.39614868 126.66899872]
[105.77217102 141.65602112]
[105.14819336 156.64303589]
[120.55707550 161.00263977]
[134.48402405 168.89007568]
[146.13539124 179.85130310]
[154.84832764 193.25724792]
[160.12843323 208.33993530]
[161.67782593 224.23641968]
[159.41195679 240.03822327]
[153.46421814 254.84321594]
[144.17805481 267.80712891]
[132.08718872 278.19171143]
[117.88491058 285.40676880]
[102.38435364 289.04364014]
[102.38435364 304.04364014]
[102.38435364 319.04364014]
[102.38435364 334.04364014]
[102.38435364 349.04364014]
[102.38435364 364.04364014]
[102.38435364 379.04364014]
[102.38435364 394.04364014]
[102.38435364 409.04364014]
[102.38435364 424.04364014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[26 127]
[30 58]
[31 57]
[32 56]
[33 55]
[38 54]
[39 53]
[59 86]
[60 85]
[61 84]
[62 83]
[63 82]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
