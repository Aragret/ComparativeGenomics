%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACxxxxxxxxxxUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.73736668 158.09527588]
[2.79729962 165.68174744]
[-10.14276791 173.26823425]
[-18.13451958 186.92262268]
[-33.02722931 186.68489075]
[-45.81290817 194.52876282]
[-58.43908310 202.62689209]
[-71.06525421 210.72502136]
[-83.69142914 218.82315063]
[-91.13047791 232.78636169]
[-106.02077484 233.14466858]
[-118.64694214 241.24279785]
[-122.13649750 256.42373657]
[-135.05659485 264.45654297]
[-149.50778198 261.03622437]
[-162.13395691 269.13436890]
[-174.76013184 277.23248291]
[-187.13758850 285.70590210]
[-199.25518799 294.54693604]
[-211.37277222 303.38796997]
[-213.56593323 319.03936768]
[-226.23405457 328.48892212]
[-241.86137390 326.13040161]
[-251.17646790 313.36306763]
[-248.65286255 297.76156616]
[-235.78776550 288.58197021]
[-220.21380615 291.27038574]
[-208.09622192 282.42935181]
[-195.97863770 273.58831787]
[-195.08578491 270.12258911]
[-192.43672180 266.93032837]
[-188.18496704 264.84744263]
[-182.85826111 264.60632324]
[-170.23210144 256.50817871]
[-157.60592651 248.41004944]
[-154.68740845 233.84921265]
[-141.99803162 225.45669556]
[-126.74507904 228.61663818]
[-114.11890411 220.51849365]
[-107.58296204 207.13452148]
[-91.78955841 206.19699097]
[-79.16339111 198.09884644]
[-66.53721619 190.00071716]
[-53.91104126 181.90258789]
[-52.02754974 177.45835876]
[-47.30189514 174.17619324]
[-40.61370850 173.74482727]
[-33.54751587 160.63305664]
[-17.72924614 160.32815552]
[-4.78917933 152.74168396]
[8.15088749 145.15519714]
[1.42462683 127.53447723]
[-1.95408118 108.97870636]
[-1.87049747 90.11801910]
[1.67253935 71.59291840]
[8.55471039 54.03250122]
[18.54230118 38.03311157]
[31.29614067 24.13807678]
[46.38311768 12.81925869]
[63.29088593 4.46104050]
[81.44527435 -0.65273893]
[100.22976685 -2.34841967]
[119.00645447 -0.56841731]
[122.86457062 -15.06375790]
[126.72269440 -29.55909920]
[130.58081055 -44.05443954]
[116.86076355 -50.19905853]
[104.30412292 -58.46507263]
[93.23613739 -68.63836670]
[83.94351196 -80.45543671]
[76.66692352 -93.61019135]
[71.59487152 -107.76188660]
[68.85872650 -122.54396057]
[68.52935791 -137.57351685]
[70.61530304 -152.46127319]
[75.06253815 -166.82156372]
[81.75585175 -180.28247070]
[90.52188110 -192.49528503]
[101.13356018 -203.14367676]
[113.31603241 -211.95184326]
[126.75373077 -218.69160461]
[141.09858704 -223.18840027]
[155.97903442 -225.32575989]
[171.00964355 -225.04829407]
[185.80108643 -222.36322021]
[199.97021484 -217.34007263]
[213.15000916 -210.10897827]
[224.99911499 -200.85720825]
[235.21057129 -189.82443237]
[243.51991272 -177.29641724]
[249.71186829 -163.59767151]
[253.62608337 -149.08302307]
[255.16116333 -134.12843323]
[254.27734375 -119.12126160]
[250.99751282 -104.45024109]
[245.40663147 -90.49537659]
[237.64952087 -77.61813354]
[227.92709351 -66.15206909]
[216.49119568 -56.39417648]
[203.63804626 -48.59720993]
[189.70057678 -42.96313095]
[175.03977966 -39.63787460]
[160.03543091 -38.70757294]
[145.07615662 -40.19631958]
[141.21803284 -25.70097923]
[137.35990906 -11.20563889]
[133.50180054 3.28970265]
[149.98567200 10.68771172]
[164.91180420 20.86903000]
[177.81503296 33.51637268]
[188.29324341 48.23559570]
[196.01991272 64.56799316]
[200.75424194 82.00458527]
[202.34867859 100.00198364]
[200.75354004 117.99932098]
[215.28675842 121.71222687]
[229.81997681 125.42512512]
[236.36669922 123.99044800]
[241.81562805 125.83806610]
[244.85447693 129.58827209]
[259.22750854 133.87966919]
[273.60052490 138.17106628]
[288.34255981 131.84236145]
[302.41339111 139.54893494]
[305.01910400 155.37895203]
[294.16079712 167.18899536]
[278.16806030 165.91940308]
[269.30914307 152.54409790]
[254.93611145 148.25268555]
[240.56307983 143.96128845]
[226.10707092 139.95834351]
[211.57385254 136.24543762]
[197.04063416 132.53254700]
[193.78219604 140.98963928]
[189.78837585 149.12533569]
[185.09049988 156.87580872]
[179.72540283 164.18031311]
[173.73513794 170.98155212]
[167.16670227 177.22619629]
[160.07157898 182.86529541]
[152.50543213 187.85461426]
[144.52755737 192.15502930]
[136.20053101 195.73281860]
[127.58963776 198.55995178]
[118.76241302 200.61422729]
[109.78806305 201.87956238]
[100.73696136 202.34602356]
[91.68007660 202.00994873]
[82.68843842 200.87399292]
[73.83254242 198.94703674]
[65.18183899 196.24420166]
[56.80414963 192.78669739]
[48.76517487 188.60160828]
[41.12795258 183.72177124]
[33.95236588 178.18542480]
[27.29467964 172.03602600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[5 47]
[6 44]
[7 43]
[8 42]
[9 41]
[11 39]
[12 38]
[15 35]
[16 34]
[17 33]
[18 29]
[19 28]
[20 27]
[63 107]
[64 106]
[65 105]
[66 104]
[115 133]
[116 132]
[117 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
