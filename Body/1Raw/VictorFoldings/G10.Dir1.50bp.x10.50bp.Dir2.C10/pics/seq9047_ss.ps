%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGUCCxxxxxxxxxxAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.37812805 283.00930786]
[116.06607056 268.01257324]
[115.75401306 253.01580811]
[115.44195557 238.01905823]
[115.12990570 223.02229309]
[114.81784821 208.02554321]
[114.50579071 193.02879333]
[114.19373322 178.03204346]
[113.88167572 163.03527832]
[110.93619537 148.32731628]
[105.44916534 134.36692810]
[99.96213531 120.40653992]
[87.52960968 117.33345795]
[78.86999512 107.12778473]
[77.76760864 93.20896149]
[85.30976868 80.77756500]
[99.22724152 74.87217712]
[92.32024384 61.55702591]
[85.41324615 48.24186707]
[78.50624847 34.92671204]
[71.59925079 21.61155701]
[64.69225311 8.29640102]
[57.78525162 -5.01875448]
[56.42069244 9.91904926]
[43.45285797 17.45796585]
[29.79660034 11.25259399]
[26.94620705 -3.47409153]
[37.30089188 -14.32686520]
[22.72818947 -10.77210331]
[8.15548611 -7.21734095]
[-5.79955912 2.41038251]
[-18.91416931 -8.33407402]
[-12.22009373 -23.91052246]
[4.60072374 -21.79004478]
[19.17342758 -25.34480667]
[33.74612808 -28.89956856]
[39.72863388 -27.30671501]
[45.66551590 -25.56235695]
[51.55388641 -23.66741371]
[49.06876755 -38.46012115]
[46.58364868 -53.25282669]
[44.09852982 -68.04553223]
[38.43313980 -54.15657043]
[28.81990814 -42.64197922]
[16.16560173 -34.58787918]
[1.66383994 -30.75396729]
[-13.31750298 -31.50187874]
[-27.36531258 -36.76106644]
[-39.15452957 -46.03545761]
[-47.57313919 -58.45024872]
[-51.82705307 -72.83441162]
[-51.51502609 -87.83116913]
[-46.66648865 -102.02594757]
[-37.73877716 -114.07982635]
[-25.57399559 -122.85581970]
[-11.31958961 -127.52614594]
[3.67989659 -127.65026093]
[18.00963783 -123.21647644]
[30.31798553 -114.64299011]
[39.44395065 -102.73851013]
[44.52676773 -88.62573242]
[47.62509155 -103.30225372]
[50.72341156 -117.97878265]
[53.82173538 -132.65530396]
[49.10177994 -147.75605774]
[59.30110550 -158.61068726]
[62.39942551 -173.28721619]
[65.49774933 -187.96374512]
[51.91773224 -194.50946045]
[40.29926682 -204.11544800]
[31.31784248 -216.22319031]
[25.49562073 -230.12876892]
[23.17110062 -245.02372742]
[24.47942543 -260.04211426]
[29.34453201 -274.31076050]
[37.48357010 -287.00009155]
[48.42334366 -297.37240601]
[61.52783203 -304.82464600]
[76.03515625 -308.92355347]
[91.10187531 -309.43081665]
[105.85203552 -306.31695557]
[119.42808533 -299.76296997]
[131.04072571 -290.14996338]
[140.01480103 -278.03677368]
[145.82859802 -264.12768555]
[148.14408875 -249.23130798]
[146.82666016 -234.21371460]
[141.95289612 -219.94802856]
[133.80616760 -207.26361084]
[122.86010742 -196.89794922]
[109.75110626 -189.45365906]
[95.24130249 -185.36354065]
[80.17427063 -184.86541748]
[77.07595062 -170.18888855]
[73.97763062 -155.51235962]
[78.91919708 -141.46138000]
[68.49826050 -129.55697632]
[65.39994049 -114.88045502]
[62.30161667 -100.20393372]
[59.20329285 -85.52740479]
[58.89123917 -70.53065491]
[61.37635803 -55.73794556]
[63.86147690 -40.94524002]
[66.34659576 -26.15253258]
[71.10041046 -11.92575264]
[78.00740814 1.38940287]
[84.91440582 14.70455837]
[91.82140350 28.01971436]
[98.72840118 41.33486938]
[105.63539886 54.65002441]
[112.54239655 67.96517944]
[124.98184204 76.34732819]
[139.91615295 77.74962616]
[154.58891296 70.42556000]
[168.11701965 79.69498444]
[166.58392334 96.02231598]
[151.56672668 102.61138916]
[138.51383972 92.68393707]
[123.57953644 91.28163147]
[122.15829468 105.25601959]
[113.92252350 114.91950989]
[119.40955353 128.87989807]
[124.89658356 142.84028625]
[127.65373993 128.09587097]
[134.96926880 115.00071716]
[146.07914734 104.92248535]
[159.82305908 98.91374207]
[174.76559448 97.60204315]
[189.34617615 101.12436676]
[202.04200745 109.11285400]
[211.52714539 120.73318481]
[216.81095886 134.77174377]
[217.34162903 149.76235962]
[213.06372070 164.13940430]
[204.42402649 176.40136719]
[192.32484436 185.26759338]
[178.02984619 189.81211853]
[163.03195190 189.56030273]
[148.89756775 184.53846741]
[137.10284424 175.27105713]
[128.87843323 162.72322083]
[129.19049072 177.71998596]
[129.50254822 192.71673584]
[129.81460571 207.71348572]
[130.12666321 222.71023560]
[130.43870544 237.70700073]
[130.75076294 252.70375061]
[131.06282043 267.70050049]
[131.37487793 282.69726562]
[133.96588135 301.90496826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 123]
[11 122]
[12 121]
[17 111]
[18 110]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[28 36]
[29 35]
[30 34]
[39 104]
[40 103]
[41 102]
[42 101]
[61 100]
[62 99]
[63 98]
[64 97]
[66 95]
[67 94]
[68 93]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
