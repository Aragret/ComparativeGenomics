%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGxxxxxxxxxxAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.41254425 287.09280396]
[108.41254425 272.09280396]
[108.41254425 257.09280396]
[108.41254425 242.09280396]
[108.41254425 227.09280396]
[108.41254425 212.09280396]
[108.41254425 197.09280396]
[108.41254425 182.09280396]
[108.41254425 167.09280396]
[108.41254425 152.09280396]
[75.42472839 138.45091248]
[62.92949295 110.39100647]
[71.83309937 86.20166016]
[60.33129501 76.57313538]
[48.82949066 66.94461060]
[37.32768631 57.31608582]
[26.79934502 68.01189423]
[15.44448090 77.82582855]
[3.33673835 86.69425201]
[-9.44535828 94.55963898]
[-22.81891060 101.37098694]
[-36.69718552 107.08410645]
[-50.99017715 111.66196442]
[-65.60518646 115.07485962]
[-80.44742584 117.30065918]
[-95.42064667 118.32492065]
[-110.42772675 118.14102173]
[-125.37134552 116.75013733]
[-140.15458679 114.16128540]
[-154.68156433 110.39127350]
[-168.85809326 105.46453857]
[-182.59219360 99.41303253]
[-195.79481506 92.27600861]
[-208.38032532 84.09975433]
[-220.26710510 74.93729401]
[-231.37806702 64.84804535]
[-241.64114380 53.89744568]
[-250.98977661 42.15651703]
[-259.36334229 29.70140648]
[-266.70751953 16.61288452]
[-272.97467041 2.97584248]
[-278.12417603 -11.12127972]
[-282.12265015 -25.58705521]
[-284.94412231 -40.32766724]
[-286.57031250 -55.24751282]
[-286.99066162 -70.24983215]
[-286.20245361 -85.23732758]
[-284.21081543 -100.11280060]
[-281.02865601 -114.77977753]
[-276.67657471 -129.14312744]
[-271.18286133 -143.10971069]
[-264.58309937 -156.58892822]
[-256.92010498 -169.49337769]
[-248.24356079 -181.73936462]
[-238.60977173 -193.24745178]
[-228.08119202 -203.94303894]
[-216.72610474 -213.75672913]
[-204.61817932 -222.62487793]
[-191.83590698 -230.48999023]
[-178.46220398 -237.30102539]
[-164.58380127 -243.01385498]
[-150.29071045 -247.59138489]
[-135.67562866 -251.00396729]
[-120.83333588 -253.22943115]
[-105.86009216 -254.25337219]
[-90.85301971 -254.06913757]
[-75.90942383 -252.67791748]
[-61.12624359 -250.08874512]
[-46.59934235 -246.31842041]
[-32.42293549 -241.39137268]
[-18.68896294 -235.33955383]
[-5.48649836 -228.20223999]
[7.09883451 -220.02571106]
[18.98541451 -210.86299133]
[30.09615135 -200.77349854]
[40.35898590 -189.82267761]
[49.70735931 -178.08154297]
[58.08064270 -165.62623596]
[65.42453003 -152.53755188]
[71.69139862 -138.90037537]
[76.84059906 -124.80313873]
[80.83873749 -110.33728027]
[83.65988922 -95.59660339]
[85.28574371 -80.67671967]
[85.70577240 -65.67439270]
[84.91724396 -50.68691254]
[82.92527008 -35.81148148]
[79.74277496 -21.14458084]
[75.39039612 -6.78132439]
[69.89635468 7.18513155]
[63.29629517 20.66420937]
[55.63301468 33.56848907]
[46.95621490 45.81428146]
[58.45801544 55.44280624]
[69.95982361 65.07133484]
[81.46162415 74.69985962]
[98.05281830 61.54998016]
[123.11508179 60.65397644]
[147.33245850 76.67468262]
[161.34916687 71.33316803]
[165.27149963 56.32001495]
[177.29057312 46.50566101]
[192.78480530 45.66393280]
[205.79634094 54.11849213]
[211.32199097 68.61838531]
[207.23701477 83.58810425]
[195.11218262 93.27149963]
[179.60974121 93.94509125]
[166.69067383 85.34988403]
[152.67396545 90.69139862]
[152.75198364 98.19099426]
[152.90802002 113.19017792]
[152.98603821 120.68977356]
[167.11083984 125.73853302]
[181.23564148 130.78729248]
[195.36044312 135.83604431]
[209.48526001 140.88479614]
[223.61006165 145.93354797]
[237.78573608 138.94602966]
[252.72331238 144.10784912]
[259.56057739 158.35661316]
[254.24110413 173.23878479]
[239.92085266 179.92501831]
[225.09576416 174.44850159]
[218.56129456 160.05836487]
[204.43649292 155.00959778]
[190.31169128 149.96084595]
[176.18688965 144.91209412]
[162.06208801 139.86332703]
[147.93728638 134.81457520]
[141.80610657 139.13414001]
[151.78128052 150.33662415]
[161.75645447 161.53912354]
[174.09719849 170.06590271]
[174.16549683 185.06573486]
[161.90290833 193.70454407]
[147.80149841 188.59078979]
[143.92649841 174.10072327]
[136.73510742 160.93699646]
[129.54373169 147.77325439]
[123.41254425 152.09280396]
[123.41254425 167.09280396]
[123.41254425 182.09280396]
[123.41254425 197.09280396]
[123.41254425 212.09280396]
[123.41254425 227.09280396]
[123.41254425 242.09280396]
[123.41254425 257.09280396]
[123.41254425 272.09280396]
[123.41254425 287.09280396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 96]
[14 95]
[15 94]
[16 93]
[99 110]
[100 109]
[113 130]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
