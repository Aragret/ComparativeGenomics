%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGxxxxxxxxxxUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.54225922 388.42794800]
[82.54225922 373.42794800]
[82.54225922 358.42794800]
[82.54225922 343.42794800]
[82.54225922 328.42794800]
[82.54225922 313.42794800]
[82.54225922 298.42794800]
[82.54225922 283.42794800]
[82.54225922 268.42794800]
[82.54225922 253.42794800]
[68.07740021 249.59161377]
[55.08854294 242.13600159]
[44.46407318 231.56408691]
[36.93246460 218.59230042]
[33.01231766 204.10186768]
[32.97665024 189.07894897]
[36.83390045 174.54763794]
[44.32694244 161.49998474]
[54.95020294 150.82843018]
[67.98378754 143.26463318]
[82.54225922 139.32939148]
[70.10282135 130.94723511]
[56.20026398 136.57919312]
[42.29770660 142.21115112]
[28.39514923 147.84310913]
[14.49259377 153.47506714]
[4.84040403 166.73278809]
[-11.43645000 164.73377991]
[-17.59373665 149.53443909]
[-7.29736614 136.77055359]
[8.86063766 139.57250977]
[22.76319313 133.94055176]
[36.66574860 128.30859375]
[50.56830597 122.67664337]
[64.47086334 117.04468536]
[62.07483673 103.10252380]
[64.77300262 89.71538544]
[71.85816193 78.61799622]
[82.07886505 71.11933899]
[77.17731476 56.94277954]
[72.27576447 42.76622391]
[67.37421417 28.58966446]
[62.47266006 14.41310692]
[57.57110977 0.23654848]
[46.78424454 0.08061057]
[36.49504852 -3.09072995]
[27.52738571 -9.01111889]
[20.59580803 -17.19458771]
[16.24862671 -26.97542381]
[14.82455349 -37.56232834]
[16.42633057 -48.10241318]
[20.91342354 -57.74993515]
[27.91425705 -65.73413086]
[36.85696411 -71.42082214]
[33.45398331 -86.02971649]
[28.42881584 -93.73682404]
[30.13552475 -100.97786713]
[27.03720284 -115.65439606]
[23.93888283 -130.33091736]
[8.87161350 -131.13082886]
[-5.47491837 -135.80409241]
[-18.12254524 -144.03208923]
[-28.20892906 -155.25381470]
[-35.04636383 -168.70417786]
[-38.16866302 -183.46606445]
[-37.36294174 -198.53303528]
[-32.68413544 -212.87776184]
[-24.45125580 -225.52220154]
[-13.22562981 -235.60424805]
[0.22735810 -242.43649292]
[14.99046135 -245.55310059]
[30.05710793 -244.74156189]
[44.40002823 -240.05720520]
[57.04129410 -231.81944275]
[67.11901093 -220.58993530]
[73.94606018 -207.13430786]
[77.05695343 -192.36999512]
[76.23960114 -177.30366516]
[71.54972076 -162.96255493]
[63.30707550 -150.32447815]
[52.07366943 -140.25109863]
[38.61540604 -133.42924500]
[41.71372986 -118.75271606]
[44.81204987 -104.07619476]
[48.06287766 -89.43269348]
[51.46585464 -74.82379913]
[70.45713806 -70.38273621]
[84.68865204 -56.93301010]
[90.23840332 -38.07345200]
[85.52283478 -18.90812683]
[71.74766541 -4.66500235]
[76.64921570 9.51155567]
[81.55076599 23.68811417]
[86.45232391 37.86467361]
[91.35387421 52.04122925]
[96.25542450 66.21778870]
[106.47750092 66.63382721]
[116.11273193 70.07276154]
[124.28819275 76.22304535]
[130.26318359 84.52746582]
[133.49639893 94.23366547]
[148.47612000 95.01351166]
[163.45582581 95.79335785]
[178.43554688 96.57320404]
[193.41526794 97.35305023]
[208.39497375 98.13289642]
[214.29011536 84.16782379]
[224.60833740 73.06331635]
[238.10366821 66.16030121]
[253.14649963 64.29234314]
[267.92031860 67.68500519]
[280.64111328 75.92861938]
[289.77279663 88.02771759]
[294.21264648 102.52128601]
[293.42459106 117.65914154]
[287.50372314 131.61332703]
[277.16503906 142.69879150]
[263.65701294 149.57693481]
[248.61077881 151.41716003]
[233.84323120 147.99728394]
[221.13764954 139.73023987]
[212.02828979 127.61432648]
[207.61512756 113.11260986]
[192.63542175 112.33276367]
[177.65570068 111.55291748]
[162.67599487 110.77307129]
[147.69627380 109.99322510]
[132.71655273 109.21338654]
[121.23115540 129.93246460]
[97.54225922 139.32939148]
[112.10073090 143.26463318]
[125.13431549 150.82843018]
[135.75756836 161.49998474]
[143.25061035 174.54763794]
[147.10786438 189.07894897]
[147.07220459 204.10186768]
[143.15205383 218.59230042]
[135.62043762 231.56408691]
[124.99597168 242.13600159]
[112.00711060 249.59161377]
[97.54225922 253.42794800]
[97.54225922 268.42794800]
[97.54225922 283.42794800]
[97.54225922 298.42794800]
[97.54225922 313.42794800]
[97.54225922 328.42794800]
[97.54225922 343.42794800]
[97.54225922 358.42794800]
[97.54225922 373.42794800]
[97.54225922 388.42794800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[54 86]
[55 85]
[57 84]
[58 83]
[59 82]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[106 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
