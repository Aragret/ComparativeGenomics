%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUxxxxxxxxxxAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.33955383 262.58270264]
[121.33955383 247.58270264]
[121.33955383 232.58270264]
[121.33955383 217.58270264]
[121.33955383 202.58270264]
[121.33955383 187.58270264]
[121.33955383 172.58270264]
[121.33955383 157.58270264]
[121.33955383 142.58270264]
[121.33955383 127.58270264]
[114.51143646 124.47999573]
[102.30945587 133.20419312]
[100.85519409 118.27458954]
[94.02707672 115.17189026]
[82.72807312 125.03761292]
[71.42906189 134.90333557]
[60.13006210 144.76905823]
[48.83105469 154.63478088]
[44.04096222 170.31875610]
[28.00442505 173.74826050]
[17.21846199 161.39532471]
[22.77874565 145.96759033]
[38.96533203 143.33576965]
[50.26433945 133.47004700]
[61.56334305 123.60433197]
[72.86235046 113.73860168]
[84.16135406 103.87287903]
[77.53285217 90.41691589]
[62.82489014 93.36239624]
[48.11693192 96.30788422]
[38.06045914 108.80775452]
[22.01881790 108.59475708]
[12.29778576 95.83226776]
[16.35450363 80.31058502]
[31.07700539 73.93661499]
[45.17144775 81.59992218]
[59.87940979 78.65443420]
[74.58737183 75.70895386]
[85.78313446 65.72622681]
[90.38870239 51.45076752]
[94.99426270 37.17530823]
[99.59983063 22.89984703]
[90.59090424 23.51300240]
[80.94409180 20.17875481]
[68.00603485 12.58884621]
[55.06797791 4.99893761]
[42.12992096 -2.59097052]
[29.19186401 -10.18087864]
[12.79828739 -9.75347328]
[4.46324444 -23.87647247]
[12.76111317 -38.02134323]
[29.15575790 -37.63705826]
[36.78177261 -23.11893463]
[49.71982956 -15.52902699]
[62.65788651 -7.93911839]
[75.59593964 -0.34920999]
[88.53399658 7.24069834]
[77.06819916 -2.43067408]
[73.92164612 -17.09693527]
[80.41113281 -30.62049484]
[93.82089996 -37.34196091]
[108.53918457 -34.44850540]
[118.40662384 -23.15100098]
[119.29385376 -8.17726231]
[110.82856750 4.20719671]
[121.26837921 -6.56361198]
[131.70819092 -17.33442116]
[122.18641663 -28.94620705]
[114.05038452 -41.56772614]
[107.40615845 -55.03442383]
[102.34036255 -69.17074585]
[98.91903687 -83.79238129]
[97.18678284 -98.70871735]
[97.16619873 -113.72528839]
[98.85753632 -128.64631653]
[102.23875427 -143.27728271]
[107.26576996 -157.42742920]
[113.87304688 -170.91230774]
[121.97444153 -183.55607605]
[131.46434021 -195.19393921]
[142.21902466 -205.67413330]
[154.09826660 -214.86006165]
[166.94721985 -222.63194275]
[180.59835815 -228.88847351]
[194.87371826 -233.54806519]
[209.58720398 -236.54998779]
[224.54695129 -237.85508728]
[239.55798340 -237.44638062]
[254.42456055 -235.32916260]
[268.95288086 -231.53105164]
[282.95352173 -226.10156250]
[296.24401855 -219.11148071]
[308.65100098 -210.65193176]
[320.01281738 -200.83320618]
[330.18127441 -189.78332520]
[339.02383423 -177.64631653]
[346.42520142 -164.58042908]
[352.28890991 -150.75599670]
[356.53851318 -136.35327148]
[359.11856079 -121.55998993]
[359.99545288 -106.56903076]
[359.15777588 -91.57583618]
[356.61642456 -76.77585602]
[352.40451050 -62.36205292]
[346.57699585 -48.52233887]
[339.20983887 -35.43713760]
[330.39904785 -23.27704430]
[320.25952148 -12.20059013]
[308.92343140 -2.35217977]
[296.53860474 6.13979197]
[283.26647949 13.16461563]
[269.28005981 18.63070679]
[254.76173401 22.46680641]
[239.90074158 24.62290192]
[224.89083862 25.07088089]
[209.92771912 23.80490875]
[195.20643616 20.84148598]
[180.91894531 16.21924782]
[167.25148010 9.99845505]
[154.38223267 2.26020861]
[142.47900391 -6.89460802]
[132.03918457 3.87620044]
[121.59937286 14.64700890]
[113.87528992 27.50541115]
[109.26972961 41.78087234]
[104.66416168 56.05633163]
[100.05859375 70.33179474]
[106.37599945 56.72699738]
[116.75607300 45.89860916]
[130.08175659 39.01194000]
[144.91897583 36.80810928]
[159.67100525 39.52429199]
[172.75027466 46.86817551]
[182.74925232 58.04943848]
[188.59185791 71.86479187]
[189.64933777 86.82746887]
[185.80790710 101.32723999]
[177.48094177 113.80368805]
[165.56457520 122.91413116]
[151.34120178 127.67814636]
[136.33955383 127.58270264]
[136.33955383 142.58270264]
[136.33955383 157.58270264]
[136.33955383 172.58270264]
[136.33955383 187.58270264]
[136.33955383 202.58270264]
[136.33955383 217.58270264]
[136.33955383 232.58270264]
[136.33955383 247.58270264]
[136.33955383 262.58270264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[28 38]
[29 37]
[30 36]
[39 127]
[40 126]
[41 125]
[42 124]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[65 123]
[66 122]
[67 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
