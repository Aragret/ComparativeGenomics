%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCxxxxxxxxxxCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[245.56053162 217.59559631]
[254.25088501 205.33760071]
[243.37207031 195.01039124]
[232.49324036 184.68318176]
[221.61441040 174.35598755]
[210.73559570 164.02877808]
[198.38401794 155.51768494]
[184.85983276 149.02952576]
[171.33563232 142.54135132]
[157.81144714 136.05319214]
[144.28726196 129.56503296]
[130.76306152 123.07685852]
[117.23887634 116.58869934]
[103.71469116 110.10053253]
[88.94863129 107.46166992]
[74.01432800 108.86396790]
[59.08001709 110.26627350]
[44.19673538 112.13388824]
[29.37897873 114.46498871]
[14.56122112 116.79609680]
[-0.25653732 119.12719727]
[13.26874733 125.61308289]
[23.07261276 136.96580505]
[27.51955414 151.29147339]
[25.86772156 166.20024109]
[18.39267731 179.20500183]
[6.34142923 188.13626099]
[-8.27560711 191.50408936]
[-23.01997948 188.74664307]
[-35.43199921 180.32395935]
[-43.44105911 167.64109802]
[-45.71107101 152.81385803]
[-41.86334610 138.31575012]
[-32.53976822 126.56539154]
[-19.29708481 119.52339935]
[-34.19898605 117.81070709]
[-49.10089111 116.09802246]
[-61.32172775 126.11933136]
[-77.04086304 124.48091125]
[-86.93240356 112.15480042]
[-85.12788391 96.45387268]
[-72.69788361 86.69319916]
[-57.01690674 88.66362000]
[-47.38819885 101.19612122]
[-32.48629761 102.90880585]
[-17.58439445 104.62149811]
[-2.58764124 104.30944061]
[12.23011684 101.97834015]
[27.04787445 99.64723206]
[41.86563492 97.31613159]
[44.24533844 94.63201141]
[48.07060242 92.99829865]
[52.81857300 93.09403992]
[57.67771149 95.33197021]
[72.61202240 93.92966461]
[87.54632568 92.52735901]
[74.08100891 85.91788483]
[62.38417435 76.52725220]
[53.02051544 64.80880737]
[46.44208527 51.32829285]
[42.96647644 36.73650742]
[42.76147461 21.73790932]
[45.83698654 7.05658674]
[52.04452515 -6.59868526]
[61.08441162 -18.56866646]
[72.52022552 -28.27547646]
[85.79987335 -35.25049591]
[100.28225708 -39.15699387]
[115.26818848 -39.80637360]
[130.03421021 -37.16728210]
[143.86743164 -31.36712837]
[156.10005188 -22.68592834]
[166.14147949 -11.54278946]
[173.50697327 1.52432883]
[177.84092712 15.88458157]
[178.93411255 30.84469223]
[176.73374939 45.68243027]
[171.34608459 59.68146515]
[163.03118896 72.16596222]
[152.19052124 82.53320312]
[139.34741211 90.28269196]
[125.12189484 95.04029083]
[110.20285034 96.57633972]
[123.72704315 103.06450653]
[137.25123596 109.55267334]
[150.77542114 116.04084015]
[164.29960632 122.52899933]
[177.82380676 129.01716614]
[191.34799194 135.50532532]
[204.87217712 141.99349976]
[197.06719971 129.18403625]
[194.31707764 114.43829346]
[196.97993469 99.67655182]
[204.70899963 86.82114410]
[216.49777222 77.54617310]
[230.81103516 73.05948639]
[245.78485107 73.94534302]
[259.46926880 80.08839417]
[270.08218384 90.68865967]
[276.24157715 104.36571503]
[277.14532471 119.33846283]
[272.67575073 133.65707397]
[263.41485596 145.45692444]
[250.56871033 153.20133972]
[235.81015015 155.88183594]
[221.06278992 153.14994812]
[231.94161987 163.47715759]
[242.82044983 173.80436707]
[253.69926453 184.13156128]
[264.57809448 194.45877075]
[276.36770630 185.14288330]
[289.36315918 177.59971619]
[303.29983521 171.98286438]
[317.89407349 168.40666199]
[332.84872437 166.94390869]
[347.85931396 167.62440491]
[362.62023926 170.43428040]
[376.83102417 175.31634521]
[390.20233154 182.17118835]
[402.46194458 190.85926819]
[413.36026001 201.20370483]
[422.67541504 212.99389648]
[430.21777344 225.98979187]
[435.83377075 239.92684937]
[439.40908813 254.52130127]
[440.87091064 269.47601318]
[440.18948364 284.48657227]
[437.37869263 299.24734497]
[432.49572754 313.45782471]
[425.64007568 326.82870483]
[416.95123291 339.08776855]
[406.60610962 349.98544312]
[394.81536865 359.29989624]
[381.81896973 366.84143066]
[367.88159180 372.45657349]
[353.28692627 376.03097534]
[338.33209229 377.49185181]
[323.32159424 376.80950928]
[308.56100464 373.99780273]
[294.35083008 369.11398315]
[280.98037720 362.25747681]
[268.72183228 353.56787109]
[257.82479858 343.22210693]
[248.51109314 331.43075562]
[240.97033691 318.43392944]
[235.35607910 304.49618530]
[231.78257751 289.90127563]
[230.32260132 274.94638062]
[231.00588989 259.93591309]
[233.81851196 245.17550659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[5 107]
[6 106]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[13 84]
[14 83]
[15 56]
[16 55]
[17 54]
[18 50]
[19 49]
[20 48]
[21 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
