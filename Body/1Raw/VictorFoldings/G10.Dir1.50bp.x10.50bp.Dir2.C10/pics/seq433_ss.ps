%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUxxxxxxxxxxUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[228.66596985 310.13235474]
[219.64843750 298.14550781]
[210.63090515 286.15869141]
[196.79663086 280.63946533]
[194.68344116 264.96002197]
[185.66590881 252.97317505]
[176.64837646 240.98634338]
[167.63084412 228.99951172]
[158.61332703 217.01268005]
[149.59579468 205.02584839]
[140.57826233 193.03901672]
[131.56072998 181.05218506]
[124.01837158 182.03802490]
[116.58406830 180.42863464]
[106.60134125 191.62440491]
[103.80129242 207.78274536]
[88.31654358 213.18223572]
[76.07646942 202.26835632]
[79.67262268 186.26835632]
[95.40557098 181.64167786]
[105.38829803 170.44590759]
[103.01325989 164.89936829]
[102.19738007 158.85444641]
[103.03490448 152.74575806]
[105.49989319 147.02204895]
[109.44559479 142.11322021]
[103.66932678 128.27000427]
[97.89305115 114.42678833]
[86.69728851 104.44406891]
[72.28507233 100.28617859]
[57.87285614 96.12828827]
[42.46873093 99.73709869]
[32.38490677 88.77508545]
[17.97268867 84.61719513]
[11.37107754 85.85260773]
[5.97323084 83.82910156]
[3.05416417 79.97494507]
[-11.17261505 75.22113037]
[-25.39939499 70.46731567]
[-39.62617493 65.71350098]
[-51.07183838 75.95519257]
[-66.10820007 79.08621979]
[-80.69055939 74.26435089]
[-90.89632416 62.78664017]
[-93.98020935 47.74053955]
[-89.11265564 33.17336655]
[-77.60301208 23.00362396]
[-62.54731369 19.96692085]
[-47.99547195 24.88011169]
[-37.86185455 36.42157745]
[-34.87236023 51.48671722]
[-20.64558029 56.24053192]
[-6.41880035 60.99434662]
[7.80797911 65.74816132]
[22.13057709 70.20497894]
[36.54279327 74.36286926]
[50.91606140 70.45665741]
[62.03074265 81.71607208]
[76.44296265 85.87396240]
[90.85517883 90.03185272]
[92.88405609 89.34225464]
[94.89923096 89.02485657]
[96.83683014 89.05793762]
[101.44239807 74.78247833]
[106.04795837 60.50701904]
[110.50477600 46.18442154]
[114.66266632 31.77220345]
[118.67040253 17.31751633]
[122.67814636 2.86282730]
[126.68588257 -11.59186077]
[114.79466248 -2.44862366]
[100.03898621 0.24768750]
[85.68268585 -4.09932661]
[74.90122986 -14.52814579]
[70.07939148 -28.73201370]
[72.28369904 -43.56916046]
[81.02659607 -55.75775528]
[94.37422943 -62.60178375]
[109.37422180 -62.58741379]
[122.70871735 -55.71782303]
[131.42825317 -43.51250458]
[133.60394287 -28.66918564]
[140.78645325 -41.83776855]
[147.96896362 -55.00635147]
[143.26933289 -70.09571838]
[150.68984985 -84.04962158]
[165.82804871 -88.58946228]
[179.70272827 -81.02183533]
[184.08226013 -65.83647156]
[176.36836243 -52.04258728]
[161.13754272 -47.82384109]
[153.95504761 -34.65525818]
[146.77253723 -21.48667717]
[141.14057922 -7.58412075]
[137.13282776 6.87056780]
[133.12509155 21.32525635]
[129.11735535 35.77994537]
[130.36907959 43.11334991]
[124.87296295 50.49200439]
[125.97185516 57.84986496]
[120.32342529 65.11257935]
[115.71785736 79.38804626]
[111.11229706 93.66350555]
[111.73627472 108.65052032]
[117.51254272 122.49373627]
[123.28881836 136.33695984]
[144.70050049 148.22184753]
[143.54756165 172.03465271]
[152.56509399 184.02148438]
[161.58262634 196.00831604]
[170.60015869 207.99514771]
[179.61769104 219.98197937]
[188.63520813 231.96881104]
[197.65274048 243.95565796]
[206.67027283 255.94248962]
[221.14955139 262.31909180]
[222.61773682 277.14114380]
[231.63526917 289.12799072]
[240.65280151 301.11480713]
[254.13002014 294.43054199]
[268.60604858 290.33676147]
[283.58786011 288.97286987]
[298.56515503 290.38534546]
[313.02783203 294.52606201]
[326.48327637 301.25399780]
[338.47323608 310.34002686]
[348.58932495 321.47463989]
[356.48696899 334.27862549]
[361.89718628 348.31585693]
[364.63574219 363.10824585]
[364.60931396 378.15197754]
[361.81881714 392.93466187]
[356.35931396 406.95281982]
[348.41674805 419.72897339]
[338.26159668 430.82797241]
[326.23980713 439.87179565]
[312.76080322 446.55242920]
[298.28366089 450.64233398]
[283.30148315 452.00219727]
[268.32458496 450.58566284]
[253.86300659 446.44104004]
[240.40936279 439.70947266]
[228.42185974 430.62023926]
[218.30877686 419.48291016]
[210.41458130 406.67678833]
[205.00813293 392.63809204]
[202.27359009 377.84497070]
[202.30406189 362.80123901]
[205.09854126 348.01931763]
[210.56182861 334.00262451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[5 115]
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[14 21]
[15 20]
[26 106]
[27 105]
[28 104]
[29 60]
[30 59]
[31 58]
[33 56]
[34 55]
[37 54]
[38 53]
[39 52]
[40 51]
[63 103]
[64 102]
[65 101]
[66 99]
[67 97]
[68 96]
[69 95]
[70 94]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
