%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAxxxxxxxxxxUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 304.35678101]
[92.50000000 289.35678101]
[92.50000000 274.35678101]
[92.50000000 259.35678101]
[92.50000000 244.35676575]
[92.50000000 229.35676575]
[92.50000000 214.35676575]
[92.50000000 199.35676575]
[92.50000000 184.35676575]
[92.50000000 169.35676575]
[74.02433777 164.74470520]
[57.48416901 155.30836487]
[44.11194992 141.75090027]
[34.90406418 125.08247375]
[20.40846634 128.93963623]
[5.91287041 132.79679871]
[-8.58272648 136.65394592]
[-23.07832336 140.51110840]
[-37.57392120 144.36827087]
[-37.28804398 159.44081116]
[-40.61825943 174.14364624]
[-47.37095261 187.62194824]
[-57.15352631 199.09211731]
[-69.39723206 207.88728333]
[-83.39025116 213.49610901]
[-98.31903076 215.59252930]
[-113.31563568 214.05462646]
[-127.50819397 208.97181702]
[-140.07156372 200.63963318]
[-150.27531433 189.54248047]
[-157.52622986 176.32553101]
[-161.40274048 161.75720215]
[-161.67947388 146.68449402]
[-158.34034729 131.98368835]
[-151.57948303 118.50948334]
[-141.78996277 107.04524994]
[-129.54090881 98.25749969]
[-115.54450226 92.65715027]
[-100.61445618 90.56979370]
[-85.61878204 92.11679077]
[-71.42931366 97.20819092]
[-58.87100220 105.54799652]
[-48.67397690 116.65132904]
[-41.43107986 129.87268066]
[-26.93548203 126.01551056]
[-12.43988609 122.15835571]
[2.05571079 118.30119324]
[16.55130768 114.44403839]
[31.04690361 110.58687592]
[30.39254379 95.37252045]
[33.05513382 80.37867737]
[38.90779114 66.31983948]
[47.67162704 53.86592484]
[58.92902756 43.61040497]
[72.14354706 36.04197311]
[86.68548584 31.52128029]
[101.86189270 30.26374817]
[116.94957733 32.32930374]
[131.22958374 37.61951447]
[144.02142334 45.88229370]
[154.68304443 35.33100510]
[165.34466553 24.77971268]
[176.00630188 14.22842312]
[181.78256226 0.38520521]
[181.78256226 -14.61479473]
[181.78256226 -29.61479568]
[181.78256226 -44.61479568]
[167.52989197 -49.77591705]
[155.90397644 -59.50286865]
[148.30867004 -72.62107086]
[145.66116333 -87.54643250]
[148.28115845 -102.47665405]
[155.85226440 -115.60883331]
[167.46025085 -125.35719299]
[181.70338440 -130.54457092]
[196.86175537 -130.54457092]
[211.10488892 -125.35719299]
[222.71286011 -115.60883331]
[230.28398132 -102.47665405]
[232.90397644 -87.54643250]
[230.25646973 -72.62107086]
[222.66116333 -59.50286865]
[211.03523254 -49.77591705]
[196.78256226 -44.61479568]
[196.78256226 -29.61479568]
[196.78256226 -14.61479473]
[196.78256226 0.38520521]
[202.58323669 5.13938427]
[208.04138184 -8.83232307]
[223.01591492 -7.95862293]
[226.81219482 6.55304003]
[214.18458557 14.64774323]
[219.98524475 19.40192223]
[222.99111938 4.52776861]
[231.43992615 -8.02853298]
[244.01837158 -16.37098694]
[258.79248047 -19.25428581]
[273.50494385 -16.26962471]
[285.92001343 -7.90233660]
[294.16320801 4.54671001]
[308.87118530 1.60122764]
[323.57913208 -1.34425473]
[338.28710938 -4.28973722]
[343.12905884 -18.86543655]
[354.62081909 -29.05538177]
[369.67114258 -32.11853027]
[384.23159790 -27.23090744]
[394.38546753 -15.70726109]
[397.40142822 -0.64739448]
[392.46820068 13.89766407]
[380.91278076 24.01536751]
[365.84353638 26.98410416]
[351.31402588 22.00529861]
[341.23257446 10.41822433]
[326.52462769 13.36370659]
[311.81665039 16.30918884]
[297.10870361 19.25467110]
[294.29513550 33.91799927]
[286.05960083 46.42086411]
[273.63110352 54.84090042]
[258.88604736 57.86923981]
[244.06509399 55.01391220]
[231.43260193 46.67944336]
[222.93074036 34.10988235]
[199.98069763 36.05121994]
[186.55758667 24.89004898]
[175.89596558 35.44133759]
[165.23432922 45.99263000]
[154.57270813 56.54391861]
[161.40362549 66.89099884]
[166.29496765 78.28389740]
[169.09222412 90.36275482]
[169.70703125 102.74603271]
[168.11997986 115.04256439]
[164.38121033 126.86394501]
[158.60879517 137.83676147]
[150.98509216 147.61441040]
[141.75090027 155.88804626]
[131.19789124 162.39633179]
[119.65944672 166.93368530]
[107.50000000 169.35676575]
[107.50000000 184.35676575]
[107.50000000 199.35676575]
[107.50000000 214.35676575]
[107.50000000 229.35676575]
[107.50000000 244.35676575]
[107.50000000 259.35678101]
[107.50000000 274.35678101]
[107.50000000 289.35678101]
[107.50000000 304.35678101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[60 129]
[61 128]
[62 127]
[63 126]
[64 87]
[65 86]
[66 85]
[67 84]
[93 124]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
