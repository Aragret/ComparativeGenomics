%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.54669189 263.31652832]
[99.54669189 248.31654358]
[99.54669189 233.31654358]
[99.54669189 218.31654358]
[99.54669189 203.31654358]
[99.54669189 188.31654358]
[99.54669189 173.31654358]
[99.54669189 158.31654358]
[99.54669189 143.31654358]
[99.54669189 128.31654358]
[88.01490784 121.96180725]
[81.92552185 112.04160309]
[81.68233490 101.91464996]
[66.68315125 101.75861359]
[51.68395996 101.60257721]
[48.41606140 115.84265900]
[42.24857712 129.08061218]
[33.45585632 140.73359680]
[22.42778015 150.28910828]
[9.65246201 157.32757568]
[-4.30535030 161.54077148]
[-18.82924080 162.74525452]
[-33.27834320 160.89045715]
[-47.01563644 156.06068420]
[-59.43599701 148.47140503]
[-69.99288940 138.45951843]
[-78.22239685 126.46852875]
[-83.76361084 113.02877808]
[-86.37445068 98.73406982]
[-101.36714172 98.26602936]
[-116.35984039 97.79798126]
[-131.35253906 97.32994080]
[-146.34523010 96.86190033]
[-154.36766052 109.95908356]
[-167.87153625 117.27626038]
[-183.22436523 116.84513855]
[-196.29634094 108.78169250]
[-203.57115173 95.25495148]
[-203.09191895 79.90354156]
[-194.98753357 66.85691071]
[-181.43806458 59.62453461]
[-166.08822632 60.15188980]
[-153.06706238 68.29711914]
[-145.87719727 81.86920166]
[-130.88449097 82.33724213]
[-115.89179993 82.80529022]
[-100.89910126 83.27333069]
[-85.90640259 83.74137115]
[-82.09729004 68.79457092]
[-75.06829834 55.05687714]
[-65.16601562 43.21245956]
[-52.88021851 33.85194397]
[-38.81962967 27.44298744]
[-23.68176651 24.30691338]
[-8.21834469 24.60259819]
[6.80205965 28.31842613]
[20.63220787 35.27271271]
[32.58337021 45.12259293]
[42.05962372 57.38091278]
[48.58757782 71.44032288]
[51.83999634 86.60339355]
[66.83918762 86.75942993]
[81.83837128 86.91546631]
[92.50000000 76.36417389]
[92.50000000 61.36417389]
[92.50000000 46.36417389]
[92.50000000 31.36417389]
[78.24732971 26.20305061]
[66.62139893 16.47610092]
[59.02610016 3.35789919]
[56.37859344 -11.56746674]
[58.99858856 -26.49768448]
[66.56970215 -39.62985992]
[78.17768860 -49.37821960]
[92.42082214 -54.56560135]
[107.57917786 -54.56560135]
[121.82231140 -49.37821960]
[133.43029785 -39.62985992]
[141.00140381 -26.49768448]
[143.62139893 -11.56746674]
[140.97390747 3.35789919]
[133.37860107 16.47610092]
[121.75267029 26.20305061]
[107.50000000 31.36417389]
[107.50000000 46.36417389]
[107.50000000 61.36417389]
[107.50000000 76.36417389]
[112.93941498 81.52777863]
[120.13079834 68.36403656]
[126.36744690 54.72203445]
[141.09384155 51.87018585]
[151.97233582 62.19774628]
[149.88899231 77.05236816]
[136.59030151 83.98894501]
[123.81823730 91.85498047]
[129.25764465 97.01858521]
[144.23736572 96.23873901]
[159.21707153 95.45889282]
[172.59632874 87.01458740]
[185.70864868 94.07974243]
[199.08789062 85.63543701]
[212.20021057 92.70058441]
[227.17993164 91.92074585]
[242.15965271 91.14089966]
[257.13937378 90.36105347]
[260.80953979 87.77430725]
[264.72073364 86.64576721]
[268.37216187 86.86691284]
[271.35305786 88.17394257]
[273.38644409 90.19203186]
[288.37911987 90.66007233]
[301.00918579 80.76758575]
[316.58422852 84.61432648]
[323.15643311 99.24940491]
[315.68417358 113.44605255]
[299.89950562 116.31380463]
[287.91110229 105.65277100]
[272.91839600 105.18473053]
[257.91921997 105.34076691]
[242.93948364 106.12061310]
[227.95977783 106.90045929]
[212.98005676 107.68029785]
[200.67225647 116.06882477]
[186.48849487 109.05945587]
[174.18069458 117.44797516]
[159.99691772 110.43860626]
[145.01721191 111.21845245]
[130.03749084 111.99829865]
[143.55731201 118.49557495]
[158.53747559 117.72440338]
[172.20372009 123.90776062]
[181.51350403 135.66903687]
[184.39421082 150.38983154]
[180.20449829 164.79281616]
[169.87712097 175.67147827]
[155.71125793 180.60388184]
[140.86068726 178.49191284]
[128.63157654 169.80578613]
[121.74651337 156.47927856]
[121.73806763 141.48027039]
[114.54669189 128.31654358]
[114.54669189 143.31654358]
[114.54669189 158.31654358]
[114.54669189 173.31654358]
[114.54669189 188.31654358]
[114.54669189 203.31654358]
[114.54669189 218.31654358]
[114.54669189 233.31654358]
[114.54669189 248.31654358]
[114.54669189 263.31652832]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 63]
[14 62]
[15 61]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[64 87]
[65 86]
[66 85]
[67 84]
[96 128]
[97 127]
[98 126]
[100 124]
[102 122]
[103 121]
[104 120]
[105 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
