%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCxxxxxxxxxxCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.81317139 522.06793213]
[166.81317139 507.06796265]
[166.81317139 492.06796265]
[166.81317139 477.06796265]
[166.81317139 462.06796265]
[166.81317139 447.06796265]
[166.81317139 432.06796265]
[166.81317139 417.06796265]
[166.81317139 402.06796265]
[166.81317139 387.06796265]
[147.76454163 376.00842285]
[138.99499512 355.66748047]
[144.08775330 333.98220825]
[161.18511963 319.51071167]
[158.73217773 304.71264648]
[156.27925110 289.91455078]
[153.82632446 275.11648560]
[151.37339783 260.31838989]
[148.92047119 245.52030945]
[146.46754456 230.72224426]
[129.83743286 216.22801208]
[135.03840637 194.10264587]
[128.76899719 180.47567749]
[122.49959564 166.84869385]
[116.23019409 153.22171021]
[109.96078491 139.59472656]
[94.61064148 142.50997925]
[78.53972626 139.40759277]
[64.12059021 130.19444275]
[53.67648315 115.71233368]
[49.11531830 97.68056488]
[51.60270691 78.49665833]
[36.64142609 77.41959381]
[21.68014717 76.34252167]
[13.66683197 89.38266754]
[0.50541407 97.19519806]
[-14.77971077 97.98485565]
[-28.67613029 91.57017517]
[-37.99055099 79.42521667]
[-40.58258820 64.34078979]
[-35.85660934 49.78318787]
[-24.89860916 39.09764481]
[-10.22665596 34.73962021]
[4.78774214 37.71055603]
[16.69438553 47.32774734]
[22.75721741 61.38124084]
[37.71849823 62.45830917]
[52.67977905 63.53538132]
[59.22764969 50.03999710]
[44.21260071 45.05413055]
[41.35622406 30.43597984]
[31.25078964 19.35084534]
[21.14535522 8.26571178]
[11.03992081 -2.81942225]
[0.93448657 -13.90455627]
[-14.86252880 -14.38399601]
[-25.63269615 -25.95028305]
[-24.98626900 -41.74134827]
[-13.30675793 -52.38862610]
[2.47658801 -51.57528305]
[12.99979115 -39.78385544]
[12.01961994 -24.00999069]
[22.12505531 -12.92485714]
[32.23048782 -1.83972323]
[42.33592606 9.24541092]
[52.44136047 20.33054352]
[66.73359680 24.52352715]
[70.31278229 39.93456268]
[77.80922699 39.70359802]
[74.25537109 25.13067627]
[70.70151520 10.55775166]
[67.14765167 -4.01517153]
[57.85197830 -15.78761292]
[56.11157608 -30.68630409]
[62.44358444 -44.28430557]
[74.96653748 -52.54116058]
[89.95941162 -53.00345993]
[102.96728516 -45.53383636]
[110.12504578 -32.35178375]
[109.30586243 -17.37416840]
[100.75209045 -5.05051327]
[98.10209656 9.71354866]
[95.45210266 24.47761154]
[92.80210876 39.24167252]
[100.29855347 39.01071167]
[109.70240784 27.32450104]
[119.10626984 15.63829327]
[128.51013184 3.95208454]
[137.91398621 -7.73412418]
[134.70562744 -23.03904152]
[142.13124084 -36.80110550]
[156.68466187 -42.52228928]
[171.49421692 -37.50122452]
[179.56727600 -24.10870743]
[177.09201050 -8.66827202]
[165.23715210 1.52957928]
[149.60018921 1.66973305]
[140.19633484 13.35594177]
[130.79248047 25.04215050]
[121.38861847 36.72835922]
[111.98476410 48.41456604]
[132.07856750 60.95431900]
[143.85565186 80.22721100]
[145.65135193 101.63979340]
[138.05491638 120.56171417]
[123.58776855 133.32533264]
[129.85717773 146.95230103]
[136.12657166 160.57928467]
[142.39598083 174.20626831]
[148.66539001 187.83325195]
[158.92840576 189.80070496]
[166.98179626 196.13539124]
[171.14225769 205.27558899]
[186.00886536 207.27165222]
[200.87545776 209.26770020]
[215.74206543 211.26376343]
[232.24491882 207.37892151]
[240.54638672 222.16140747]
[228.63967896 234.23065186]
[213.74600220 226.13035583]
[198.87940979 224.13430786]
[184.01280212 222.13824463]
[169.14620972 220.14219666]
[165.76248169 224.74543762]
[161.26562500 228.26930237]
[163.71855164 243.06738281]
[166.17147827 257.86547852]
[168.62440491 272.66354370]
[171.07733154 287.46163940]
[173.53025818 302.25970459]
[175.98318481 317.05776978]
[184.42143250 318.54330444]
[192.25036621 321.98529053]
[199.02445984 327.17956543]
[204.36012268 333.82260132]
[207.95747375 341.52896118]
[209.61723328 349.85397339]
[209.25166321 358.31906128]
[206.88923645 366.43957520]
[202.67253113 373.75225830]
[196.84970093 379.84188843]
[189.75981140 384.36474609]
[181.81317139 387.06796265]
[181.81317139 402.06796265]
[181.81317139 417.06796265]
[181.81317139 432.06796265]
[181.81317139 447.06796265]
[181.81317139 462.06796265]
[181.81317139 477.06796265]
[181.81317139 492.06796265]
[181.81317139 507.06796265]
[181.81317139 522.06793213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 131]
[15 130]
[16 129]
[17 128]
[18 127]
[19 126]
[20 125]
[22 110]
[23 109]
[24 108]
[25 107]
[26 106]
[32 48]
[33 47]
[34 46]
[49 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[113 123]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
