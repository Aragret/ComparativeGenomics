%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUxxxxxxxxxxAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.80335999 227.53494263]
[97.17938232 212.54792786]
[96.55540466 197.56091309]
[95.93142700 182.57389832]
[95.30744934 167.58688354]
[94.68347168 152.59986877]
[94.05949402 137.61285400]
[93.43551636 122.62583160]
[79.02330017 118.46794891]
[70.51221466 130.81951904]
[62.00112152 143.17109680]
[53.49003220 155.52265930]
[52.72360611 171.90388489]
[38.03162766 179.18934631]
[24.52794266 169.88436890]
[26.10398674 153.56112671]
[41.13845825 147.01156616]
[49.64954758 134.66000366]
[58.16064072 122.30842590]
[66.67173004 109.95685577]
[67.29570770 94.96984100]
[59.84079742 81.95352936]
[52.38588715 68.93721771]
[36.48247910 71.08615875]
[21.00576782 66.99043274]
[8.30818558 57.30305099]
[0.30806896 43.52461243]
[-1.80014908 27.77091789]
[2.27581382 12.44808483]
[11.88597107 -0.11494391]
[4.16188622 -12.97334671]
[-10.91009712 -16.90692902]
[-18.56024551 -30.05721092]
[-14.71729088 -44.40180206]
[-22.44137573 -57.26020432]
[-30.16546059 -70.11860657]
[-37.88954544 -82.97700500]
[-45.61363220 -95.83541107]
[-53.33771515 -108.69381714]
[-61.06180191 -121.55221558]
[-74.87344360 -115.64017487]
[-89.36148834 -111.66395569]
[-104.25602722 -109.69762421]
[-119.27958679 -109.77782440]
[-134.15228271 -111.90305328]
[-148.59706116 -116.03372192]
[-162.34480286 -122.09287262]
[-175.13940430 -129.96763611]
[-186.74250793 -139.51130676]
[-196.93795776 -150.54609680]
[-205.53582764 -162.86642456]
[-212.37593079 -176.24276733]
[-217.33085632 -190.42594910]
[-220.30827332 -205.15173340]
[-221.25273132 -220.14578247]
[-220.14663696 -235.12878418]
[-217.01057434 -249.82160950]
[-211.90299988 -263.95053101]
[-204.91903687 -277.25231934]
[-196.18881226 -289.47921753]
[-185.87493896 -300.40341187]
[-174.16958618 -309.82141113]
[-161.29081726 -317.55773926]
[-147.47853088 -323.46826172]
[-132.99005127 -327.44293213]
[-118.09529877 -329.40765381]
[-103.07174683 -329.32580566]
[-88.19927979 -327.19897461]
[-73.75495911 -323.06674194]
[-60.00787354 -317.00610352]
[-47.21412277 -309.12997437]
[-35.61204529 -299.58502197]
[-25.41778564 -288.54913330]
[-16.82125282 -276.22787476]
[-9.98259544 -262.85079956]
[-5.02921486 -248.66708374]
[-2.05338812 -233.94097900]
[-1.11055350 -218.94682312]
[-2.21827555 -203.96394348]
[-5.35591793 -189.27145386]
[-10.46502781 -175.14309692]
[-17.45042801 -161.84204102]
[-26.18198013 -149.61608887]
[-36.49702454 -138.69302368]
[-48.20339966 -129.27630615]
[-40.47931290 -116.41790009]
[-32.75522995 -103.55949402]
[-25.03114319 -90.70109558]
[-17.30705833 -77.84268951]
[-9.58297348 -64.98429108]
[-1.85888875 -52.12588501]
[12.61001873 -48.78129196]
[20.62651253 -35.85107422]
[17.02028847 -20.69743156]
[24.74437332 -7.83902884]
[38.56824112 -10.43989754]
[52.47744751 -8.15064335]
[64.79074860 -1.22722530]
[74.01273346 9.51300621]
[79.01538849 22.78776169]
[79.17607880 37.00288773]
[74.45494080 50.44380188]
[65.40219879 61.48231125]
[72.85710907 74.49861908]
[80.31201935 87.51493073]
[86.30605316 77.74154663]
[97.18341064 71.18315125]
[111.09452820 70.22505188]
[125.07567596 76.16618347]
[135.67893982 88.73193359]
[150.17454529 92.58909607]
[164.67013550 96.44625092]
[179.16572571 100.30341339]
[193.66133118 104.16057587]
[202.82566833 103.34400177]
[208.41674805 108.25169373]
[222.82896423 112.40958405]
[237.24118042 116.56746674]
[254.13563538 115.14854431]
[260.17596436 130.98997498]
[246.62576294 141.17958069]
[233.08328247 130.97969055]
[218.67106628 126.82180023]
[204.25885010 122.66390991]
[189.80416870 118.65616608]
[175.30857849 114.79901123]
[160.81297302 110.94184875]
[146.31738281 107.08469391]
[131.82177734 103.22753143]
[125.97196960 107.92111206]
[136.84382629 118.25564575]
[147.71569824 128.59017944]
[161.52543640 134.44604492]
[166.58425903 148.56724548]
[159.63441467 161.86009216]
[145.15142822 165.76432800]
[132.46197510 157.76573181]
[129.73783875 143.01466370]
[122.00509644 130.16146851]
[114.27234650 117.30827332]
[108.42253113 122.00185394]
[109.04650879 136.98887634]
[109.67048645 151.97589111]
[110.29446411 166.96290588]
[110.91844177 181.94992065]
[111.54241943 196.93693542]
[112.16639709 211.92395020]
[112.79037476 226.91096497]
[119.49036407 242.48487854]
[106.37983704 253.23431396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 20]
[10 19]
[11 18]
[12 17]
[21 105]
[22 104]
[23 103]
[30 95]
[31 94]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
