%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUxxxxxxxxxxCUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[150.80445862 84.26444244]
[137.57122803 91.32712555]
[124.33798218 98.38980103]
[111.10474396 105.45247650]
[100.87599182 116.42391968]
[94.75666809 130.11895752]
[88.63734436 143.81398010]
[82.51801300 157.50901794]
[84.74771118 173.75587463]
[71.62823486 183.59515381]
[56.65577698 176.90502930]
[55.23272324 160.56774902]
[68.82298279 151.38969421]
[74.94230652 137.69465637]
[81.06163788 123.99962616]
[87.18096161 110.30459595]
[75.80905151 100.52299500]
[63.18287659 108.62112427]
[50.55670547 116.71925354]
[37.93053055 124.81739044]
[25.30435753 132.91551208]
[12.67818260 141.01365662]
[7.86277866 156.31697083]
[-7.15546751 161.95893860]
[-20.85584259 153.61152649]
[-22.72859192 137.67814636]
[-11.33710194 126.38153839]
[4.58005142 128.38748169]
[17.20622444 120.28934479]
[29.83239937 112.19121552]
[42.45857239 104.09308624]
[55.08474731 95.99494934]
[67.71092224 87.89682007]
[64.14344025 73.32653809]
[60.57629395 58.75754929]
[45.63706589 57.40868759]
[30.69783592 56.05982971]
[20.58698273 67.83056641]
[5.48073387 71.37751770]
[-8.81225109 65.33680725]
[-16.79602623 52.03120422]
[-15.40066910 36.57699585]
[-5.16272163 24.91663361]
[9.98111629 21.53376579]
[24.20772934 27.72917557]
[32.04669571 41.12059784]
[46.98592377 42.46945953]
[61.92515564 43.81832123]
[97.76949310 61.74691772]
[104.04206848 92.21923828]
[117.27530670 85.15656281]
[130.50854492 78.09388733]
[143.74177551 71.03120422]
[144.14219666 68.62076569]
[144.84217834 66.33847046]
[145.81559753 64.22042084]
[136.37968445 52.56008530]
[126.94375610 40.89974976]
[111.20229340 39.49197006]
[101.13109589 27.31221199]
[102.70522308 11.58651066]
[114.99078369 1.64464641]
[130.69895935 3.38494992]
[140.51037598 15.77493000]
[138.60409546 31.46383095]
[148.04000854 43.12416840]
[157.47593689 54.78450394]
[154.78540039 40.02777863]
[152.09486389 25.27104950]
[149.40432739 10.51432133]
[140.96586609 -1.88698280]
[134.12632751 -15.23691750]
[128.99079895 -29.33040047]
[125.63815308 -43.95092773]
[124.11990356 -58.87389374]
[124.45937347 -73.87004852]
[126.65134430 -88.70903015]
[130.66215515 -103.16286469]
[136.43017578 -117.00952911]
[143.86679077 -130.03628540]
[152.85778809 -142.04304504]
[163.26501465 -152.84533691]
[174.92861938 -162.27722168]
[187.66941833 -170.19380188]
[201.29167175 -176.47346497]
[215.58612061 -181.01972961]
[230.33317566 -183.76278687]
[245.30628967 -184.66047668]
[260.27545166 -183.69900513]
[275.01068115 -180.89314270]
[289.28564453 -176.28601074]
[302.88101196 -169.94836426]
[315.58795166 -161.97758484]
[327.21127319 -152.49609375]
[337.57238770 -141.64956665]
[346.51214600 -129.60461426]
[353.89318848 -116.54627991]
[359.60217285 -102.67517090]
[363.55136108 -88.20437622]
[365.68008423 -73.35620117]
[365.95568848 -58.35873032]
[364.37387085 -43.44236755]
[360.95895386 -28.83625793]
[355.76342773 -14.76478100]
[348.86706543 -1.44410682]
[340.37585449 10.92113304]
[330.42019653 22.14098167]
[319.15304565 32.04307938]
[306.74752808 40.47530746]
[293.39413452 47.30812836]
[279.29806519 52.43657684]
[264.67587280 55.78187180]
[249.75213623 57.29261780]
[234.75616455 56.94561005]
[219.90686035 54.74375534]
[205.44982910 58.74303818]
[190.99281311 62.74232483]
[176.53578186 66.74160767]
[191.14036560 70.16297913]
[205.74496460 73.58434296]
[220.34956360 77.00570679]
[235.88244629 71.74627686]
[248.02345276 82.77025604]
[244.28295898 98.73712158]
[228.50885010 103.22152710]
[216.92820740 91.61030579]
[202.32360840 88.18894196]
[187.71900940 84.76757050]
[173.11441040 81.34620667]
[184.29086304 91.35055542]
[198.72982788 95.41453552]
[212.00057983 102.40649414]
[223.51693726 112.01760101]
[232.77026367 123.82335663]
[239.35185242 137.30232239]
[242.97102356 151.85917664]
[243.46789551 166.85093689]
[240.82055664 181.61547852]
[235.14590454 195.50065613]
[226.69459534 207.89321899]
[215.83988953 218.24577332]
[203.06124878 226.10110474]
[188.92304993 231.11222839]
[174.04975891 233.05783081]
[159.09831238 231.85197449]
[144.72906494 227.54792786]
[131.57670593 220.33576965]
[120.22211456 210.53407288]
[111.16682434 198.57572937]
[104.81078339 184.98895264]
[101.43472290 170.37380981]
[101.18776703 155.37583923]
[104.08081055 140.65747070]
[109.98607635 126.86879730]
[118.64275360 114.61881256]
[129.66847229 104.44858551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 16]
[6 15]
[7 14]
[8 13]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[35 48]
[36 47]
[37 46]
[56 67]
[57 66]
[58 65]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
