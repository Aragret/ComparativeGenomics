%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.76248169 251.89390564]
[96.65195465 241.14447021]
[103.35194397 225.57057190]
[103.97592163 210.58355713]
[104.59989929 195.59654236]
[105.22387695 180.60952759]
[105.84784698 165.62249756]
[106.47182465 150.63548279]
[107.09580231 135.64846802]
[107.71977997 120.66145325]
[98.53459930 120.25808716]
[91.06678009 116.27499390]
[86.49895477 110.03161621]
[71.73289490 112.67048645]
[56.96683884 115.30934906]
[42.20078278 117.94821167]
[27.43472862 120.58707428]
[12.98004055 124.59481812]
[-1.03667235 129.93632507]
[-15.05338573 135.27784729]
[-21.57714653 149.42274475]
[-35.86817932 154.64012146]
[-49.31298065 148.33354187]
[-63.32969284 153.67506409]
[-77.34640503 159.01657104]
[-82.30210114 173.84812927]
[-95.65888977 181.98017883]
[-111.11009216 179.57302856]
[-121.36012268 167.76325989]
[-121.56924438 152.12707520]
[-111.63870239 140.04740906]
[-96.25740051 137.22790527]
[-82.68791962 144.99986267]
[-68.67120361 139.65834045]
[-54.65449142 134.31683350]
[-48.81662750 120.66197968]
[-34.67778015 115.04525757]
[-20.39489746 121.26113129]
[-6.37818480 115.91961670]
[7.63852835 110.57810211]
[-6.47660732 105.50238037]
[-15.72406292 93.69202423]
[-17.26591301 78.77147675]
[-10.62898159 65.31966400]
[2.14993930 57.46478653]
[17.14916229 57.61739349]
[29.76561928 65.73065186]
[36.12747574 79.31472015]
[34.28236389 94.20080566]
[24.79586411 105.82102203]
[39.56192017 103.18215942]
[54.32797623 100.54328918]
[69.09403229 97.90442657]
[83.86008453 95.26556396]
[100.88961792 80.58210754]
[121.64376068 95.75283813]
[134.08320618 87.37069702]
[126.63899231 74.34030914]
[120.17744446 60.79573059]
[114.73384094 46.81093597]
[110.33792877 32.46230698]
[107.01371002 17.82821083]
[104.77933502 2.98857522]
[103.64701843 -11.97555065]
[103.62293243 -26.98243713]
[104.70722198 -41.95012283]
[106.89395142 -56.79685211]
[110.17118073 -71.44154358]
[114.52101898 -85.80420685]
[119.91970825 -99.80640411]
[126.33775330 -113.37165070]
[133.74009705 -126.42585754]
[142.08633423 -138.89773560]
[151.33084106 -150.71916199]
[161.42317200 -161.82556152]
[172.30816650 -172.15629578]
[183.92639160 -181.65492249]
[196.21440125 -190.26957703]
[209.10507202 -197.95320129]
[222.52798462 -204.66381836]
[236.40985107 -210.36479187]
[250.67483521 -215.02497864]
[265.24502563 -218.61894226]
[280.04086304 -221.12702942]
[294.98153687 -222.53553772]
[309.98541260 -222.83680725]
[324.97058105 -222.02917480]
[339.85516357 -220.11703491]
[354.55789185 -217.11085510]
[368.99844360 -213.02703857]
[383.09796143 -207.88790894]
[396.77944946 -201.72151184]
[409.96813965 -194.56155396]
[422.59204102 -186.44711304]
[434.58221436 -177.42251587]
[445.87313843 -167.53704834]
[456.40316772 -156.84472656]
[466.11474609 -145.40391541]
[474.95489502 -133.27713013]
[482.87530518 -120.53058624]
[489.83270264 -107.23390198]
[495.78912354 -93.45970917]
[500.71200562 -79.28323364]
[504.57446289 -64.78189850]
[507.35540771 -50.03491211]
[509.03964233 -35.12281799]
[509.61798096 -20.12706184]
[509.08728027 -5.12954378]
[507.45037842 9.78782368]
[504.71627808 24.54356575]
[500.89990234 39.05709076]
[496.02206421 53.24913025]
[490.10943604 67.04216766]
[483.19427490 80.36087799]
[475.31439209 93.13250732]
[466.51281738 105.28730774]
[456.83758545 116.75889587]
[446.34158325 127.48461151]
[435.08209229 137.40586853]
[423.12066650 146.46850586]
[410.52258301 154.62298584]
[397.35665894 161.82479858]
[383.69485474 168.03460693]
[369.61172485 173.21849060]
[355.18420410 177.34814453]
[340.49108887 180.40100098]
[325.61264038 182.36038208]
[310.63012695 183.21560669]
[295.62536621 182.96199036]
[280.68032837 181.60092163]
[265.87658691 179.13983154]
[251.29505920 175.59216309]
[237.01533508 170.97729492]
[223.11544800 165.32043457]
[209.67127991 158.65246582]
[196.75628662 151.00982666]
[184.44097900 142.43424988]
[172.79264832 132.97256470]
[161.87489319 122.67644501]
[151.74736023 111.60214233]
[142.46534729 99.81013489]
[130.02590942 108.19227600]
[122.70680237 121.28543091]
[122.08282471 136.27244568]
[121.45884705 151.25946045]
[120.83486938 166.24647522]
[120.21089172 181.23348999]
[119.58691406 196.22052002]
[118.96293640 211.20753479]
[118.33895874 226.19454956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 40]
[19 39]
[20 38]
[23 35]
[24 34]
[25 33]
[56 142]
[57 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
