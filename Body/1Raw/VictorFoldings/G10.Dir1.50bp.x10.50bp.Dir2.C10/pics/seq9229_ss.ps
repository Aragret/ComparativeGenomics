%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.74794769 267.36160278]
[75.74794769 252.36161804]
[75.74794769 237.36161804]
[75.74794769 222.36161804]
[75.74794769 207.36161804]
[75.74794769 192.36161804]
[75.74794769 177.36161804]
[75.74794769 162.36161804]
[75.74794769 147.36161804]
[75.74794769 132.36161804]
[65.42073822 121.48278809]
[50.44102478 120.70294189]
[35.46131134 119.92309570]
[29.31209946 122.62397003]
[23.59593391 121.87781525]
[19.87860298 118.78637695]
[4.94429636 117.38407135]
[-9.99001122 115.98177338]
[-24.92431831 114.57946777]
[-39.87240601 113.33259583]
[-54.83265305 112.24127960]
[-64.05442047 128.90133667]
[-81.45403290 138.43598938]
[-102.05349731 137.14808655]
[-119.42736816 124.58750153]
[-133.74996948 129.04432678]
[-148.07255554 133.50112915]
[-162.39515686 137.95794678]
[-173.11599731 150.36746216]
[-189.17034912 147.02235413]
[-194.04287720 131.36378479]
[-182.72114563 119.49996185]
[-166.85197449 123.63535309]
[-152.52937317 119.17853546]
[-138.20677185 114.72172546]
[-123.88417816 110.26490784]
[-124.04022217 95.26571655]
[-138.45243835 91.10783386]
[-152.86465454 86.94994354]
[-163.87437439 97.65889740]
[-178.76747131 101.41270447]
[-193.53778076 97.20161438]
[-204.21217346 86.15838623]
[-207.91928101 71.25358582]
[-203.66191101 56.49654388]
[-192.58528137 45.85681915]
[-177.66894531 42.19644928]
[-162.92530823 46.50005341]
[-152.32035828 57.60998535]
[-148.70675659 72.53772736]
[-134.29454041 76.69561768]
[-119.88233185 80.85350037]
[-108.30421448 70.48254395]
[-93.94856262 65.61083221]
[-79.21569824 66.73578644]
[-66.44804382 73.37738037]
[-57.55773163 84.20247650]
[-53.74134445 97.28103638]
[-38.78109741 98.37234497]
[-31.83626175 95.70496368]
[-23.52201462 99.64515686]
[-8.58770752 101.04746246]
[6.34659958 102.44976807]
[21.28090668 103.85207367]
[36.24115753 104.94338226]
[51.22087097 105.72322845]
[66.20058441 106.50307465]
[53.42852783 98.63703918]
[39.07913971 94.26724243]
[26.88978004 85.52541351]
[18.14875221 73.33548737]
[13.77989960 58.98581314]
[14.24497032 43.99302292]
[19.49481010 29.94171715]
[28.97455788 18.31698799]
[41.68229675 10.34745789]
[56.27493286 6.87543535]
[71.21016693 8.26787949]
[84.90946960 14.37762165]
[95.92497253 24.55891991]
[103.09128571 37.73245621]
[101.54376221 52.65241623]
[110.05485535 40.30084229]
[118.56594086 27.94927025]
[127.07703400 15.59769630]
[121.02799988 1.40570128]
[123.63452911 -13.79987526]
[134.06488037 -25.16699028]
[148.99076843 -29.06843567]
[163.64939880 -24.25927734]
[173.36326599 -12.27409840]
[175.03268433 3.06267309]
[168.12496948 16.85713005]
[154.84434509 24.70750999]
[139.42860413 24.10878754]
[130.91751099 36.46035767]
[122.40642548 48.81193161]
[113.89533997 61.16350555]
[122.14762878 73.68946838]
[136.85559082 70.74398041]
[151.56355286 67.79850006]
[166.20704651 64.54767609]
[180.77975464 60.99291229]
[195.35246277 57.43815231]
[209.92515564 53.88338852]
[221.39915466 42.16676712]
[237.21360779 46.50675201]
[241.09994507 62.43874741]
[229.06024170 73.57328033]
[213.47991943 68.45609283]
[198.90721130 72.01085663]
[184.33451843 75.56562042]
[169.76181030 79.12037659]
[166.53247070 82.71855164]
[160.98510742 84.28635406]
[154.50903320 82.50646210]
[139.80107117 85.45194244]
[125.09310913 88.39743042]
[123.07077026 103.26047516]
[136.45706177 110.02858734]
[149.84333801 116.79670715]
[163.22962952 123.56481934]
[179.56462097 122.11569214]
[188.76435852 135.69128418]
[181.36494446 150.32620239]
[164.97825623 150.96528625]
[156.46151733 136.95111084]
[143.07522583 130.18298340]
[129.68894958 123.41487122]
[116.30265808 116.64675903]
[109.91397858 120.57546997]
[118.41674042 132.93278503]
[126.91950989 145.29008484]
[139.51522827 153.43550110]
[139.34507751 168.43453979]
[126.56781769 176.29212952]
[113.10545349 169.67663574]
[111.51938629 154.76037598]
[104.32800293 141.59663391]
[97.13661957 128.43289185]
[90.74794769 132.36161804]
[90.74794769 147.36161804]
[90.74794769 162.36161804]
[90.74794769 177.36161804]
[90.74794769 192.36161804]
[90.74794769 207.36161804]
[90.74794769 222.36161804]
[90.74794769 237.36161804]
[90.74794769 252.36161804]
[90.74794769 267.36160278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 67]
[12 66]
[13 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 59]
[21 58]
[25 36]
[26 35]
[27 34]
[28 33]
[37 52]
[38 51]
[39 50]
[82 98]
[83 97]
[84 96]
[85 95]
[99 118]
[100 117]
[101 116]
[102 113]
[103 112]
[104 111]
[105 110]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
