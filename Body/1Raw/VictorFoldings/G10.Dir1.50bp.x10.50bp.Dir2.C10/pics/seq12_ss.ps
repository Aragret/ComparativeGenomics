%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGxxxxxxxxxxACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 285.78784180]
[92.50000000 270.78784180]
[92.50000000 255.78785706]
[92.50000000 240.78785706]
[92.50000000 225.78785706]
[92.50000000 210.78785706]
[92.50000000 195.78785706]
[92.50000000 180.78785706]
[92.50000000 165.78785706]
[92.50000000 150.78785706]
[86.79239655 149.61064148]
[81.25498199 147.79414368]
[75.95911407 145.36178589]
[70.97303772 142.34490967]
[66.36099243 138.78237915]
[62.18241119 134.72010803]
[58.49114227 130.21043396]
[45.20380020 137.17079163]
[31.91645813 144.13114929]
[33.31501770 159.26760864]
[28.80987167 173.78561401]
[19.08802223 185.47123718]
[5.63197708 192.54254150]
[-9.50631142 193.92118835]
[-24.01836395 189.39695740]
[-35.69120026 179.65972900]
[-42.74479294 166.19439697]
[-44.10352707 151.05430603]
[-39.56019974 136.54821777]
[-29.80764008 124.88820648]
[-16.33303833 117.85233307]
[-1.19117451 116.51351166]
[13.30892563 121.07592010]
[24.95610237 130.84381104]
[38.24344254 123.88345337]
[51.53078461 116.92309570]
[49.19075394 107.35367584]
[48.72161102 97.51347351]
[34.00608826 94.60600281]
[21.93739510 104.54988098]
[6.30098963 104.35803223]
[-5.52009869 94.12104797]
[-7.94431210 78.67251587]
[0.17298847 65.30675507]
[14.99906254 60.33467865]
[29.53349113 66.10394287]
[36.91355896 79.89048004]
[51.62908173 82.79795074]
[68.12772369 59.75308990]
[94.34009552 48.97430420]
[122.27744293 53.74665833]
[130.69085693 41.32834625]
[139.10426331 28.91003227]
[147.51766968 16.49171638]
[155.93109131 4.07340288]
[164.34449768 -8.34491158]
[172.75790405 -20.76322556]
[181.17131042 -33.18154144]
[166.37504578 -30.71768188]
[153.36982727 -38.19190979]
[148.04978943 -52.21678925]
[152.82608032 -66.43604279]
[165.53399658 -74.40528870]
[180.41412354 -72.51274872]
[190.72257996 -61.61614990]
[191.78788757 -46.65570068]
[201.89331055 -57.74083710]
[211.99874878 -68.82596588]
[202.94851685 -80.83969116]
[196.26179504 -94.30831146]
[192.16497803 -108.77249146]
[190.79618835 -123.73921967]
[192.20060730 -138.69863892]
[196.32890320 -153.14141846]
[203.03910828 -166.57608032]
[212.10136414 -178.54573059]
[223.20587158 -188.64363098]
[235.97344971 -196.52693176]
[249.96852112 -201.92842102]
[264.71392822 -204.66548157]
[279.70721436 -204.64637756]
[294.43774414 -201.87318420]
[308.40414429 -196.44181824]
[321.13125610 -188.53862000]
[331.23669434 -199.62374878]
[341.34213257 -210.70887756]
[351.44754028 -221.79402161]
[361.55297852 -232.87915039]
[355.80416870 -247.01823425]
[356.76797485 -262.25088501]
[364.25299072 -275.55267334]
[376.77310181 -284.28247070]
[391.84243774 -286.70700073]
[406.46893311 -282.34487915]
[417.74850464 -272.06216431]
[423.44158936 -257.90054321]
[422.41781616 -242.67181396]
[414.88046265 -229.39961243]
[402.32608032 -220.71919250]
[387.24734497 -218.35401917]
[372.63812256 -222.77371216]
[362.53268433 -211.68858337]
[352.42724609 -200.60345459]
[342.32180786 -189.51831055]
[332.21636963 -178.43318176]
[341.26019287 -166.48957825]
[347.95703125 -153.08390808]
[352.07754517 -138.67208862]
[353.47998047 -123.74452209]
[352.11514282 -108.80947876]
[348.02798462 -94.37571716]
[341.35635376 -80.93521881]
[332.32614136 -68.94636536]
[321.24371338 -58.81835175]
[308.48547363 -50.89718246]
[294.48522949 -45.45387650]
[279.71920776 -42.67517853]
[264.69003296 -42.65716553]
[249.90954590 -45.40191650]
[235.88140869 -50.81739426]
[223.08389282 -58.72053528]
[212.97845459 -47.63539886]
[202.87301636 -36.55026627]
[193.58963013 -24.76812935]
[185.17622375 -12.34981537]
[176.76281738 0.06849874]
[168.34939575 12.48681259]
[159.93598938 24.90512657]
[151.52258301 37.32344055]
[143.10917664 49.74175644]
[134.69575500 62.16006851]
[141.14855957 69.30062866]
[146.15527344 77.52007294]
[149.53991699 86.52953339]
[151.18354797 96.01240540]
[151.02841187 105.63540649]
[149.07995605 115.06036377]
[145.40664673 123.95604706]
[140.13760376 132.00982666]
[133.45797729 138.93867493]
[125.60251617 144.49906921]
[116.84729767 148.49562073]
[107.50000000 150.78785706]
[107.50000000 165.78785706]
[107.50000000 180.78785706]
[107.50000000 195.78785706]
[107.50000000 210.78785706]
[107.50000000 225.78785706]
[107.50000000 240.78785706]
[107.50000000 255.78785706]
[107.50000000 270.78784180]
[107.50000000 285.78784180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 36]
[18 35]
[19 34]
[38 48]
[39 47]
[51 131]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[58 124]
[66 123]
[67 122]
[68 121]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
