%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCxxxxxxxxxxCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.39448547 275.09942627]
[95.39448547 260.09942627]
[95.39448547 245.09944153]
[95.39448547 230.09944153]
[95.39448547 215.09944153]
[95.39448547 200.09944153]
[95.39448547 185.09944153]
[95.39448547 170.09944153]
[95.39448547 155.09944153]
[95.39448547 140.09944153]
[86.51778412 136.92726135]
[78.84807587 131.88130188]
[72.75742340 125.34371185]
[68.50794220 117.76411438]
[66.24141693 109.62988281]
[65.97660828 101.43540192]
[67.61413574 93.65225220]
[70.94826508 86.70214844]
[75.68465424 80.93406677]
[81.46271515 76.60691833]
[75.39970398 62.88686371]
[69.05257416 49.29591370]
[62.42407227 35.83995056]
[55.79557419 22.38398361]
[49.16707611 8.92801762]
[42.53857803 -4.52794743]
[35.91007996 -17.98391342]
[29.28157997 -31.43987846]
[22.65308189 -44.89584351]
[4.48860359 -46.19090271]
[-9.71370602 -59.37226868]
[-12.70926952 -79.69590759]
[-27.28197289 -83.25067139]
[-41.85467529 -86.80543518]
[-56.42737961 -90.36019135]
[-71.00008392 -93.91495514]
[-64.53968811 -80.37747955]
[-69.36206818 -66.17378998]
[-82.72928619 -59.36809921]
[-97.05205536 -63.82435989]
[-104.19857025 -77.01251221]
[-100.11135864 -91.44493103]
[-87.10942841 -98.92776489]
[-101.12614441 -104.26927185]
[-117.22235870 -101.13177490]
[-127.78203583 -113.67869568]
[-121.94228363 -129.00283813]
[-105.71054077 -131.34004211]
[-95.78462982 -118.28598785]
[-81.76791382 -112.94447327]
[-67.44532013 -108.48765564]
[-52.87261581 -104.93289948]
[-38.29991531 -101.37813568]
[-23.72721100 -97.82337189]
[-9.15450764 -94.26860809]
[2.73787165 -103.41034698]
[3.04992795 -118.40709686]
[3.36198425 -133.40385437]
[3.67404032 -148.40060425]
[3.98609662 -163.39735413]
[-10.72690773 -166.54759216]
[-24.57773781 -172.42561340]
[-37.06569290 -180.81890869]
[-47.73934555 -191.42407227]
[-56.21284485 -203.85775757]
[-62.17988205 -217.67047119]
[-65.42475128 -232.36288452]
[-65.83015442 -247.40390015]
[-63.38143539 -262.24978638]
[-58.16711044 -276.36386108]
[-50.37567902 -289.23593140]
[-40.28879547 -300.40066528]
[-28.27109337 -309.45446777]
[-14.75700474 -316.07006836]
[-0.23505656 -320.00827026]
[14.76979256 -321.12673950]
[29.71512794 -319.38504028]
[44.06068039 -314.84616089]
[57.28787613 -307.67413330]
[68.91854858 -298.12826538]
[78.53226471 -286.55358887]
[85.78149414 -273.36856079]
[90.40418243 -259.04977417]
[92.23321533 -244.11488342]
[91.20247650 -229.10374451]
[87.34923553 -214.55902100]
[80.81277466 -201.00648499]
[71.82939148 -188.93606567]
[60.72381592 -178.78407288]
[47.89752197 -170.91752625]
[33.81416321 -165.62077332]
[18.98285103 -163.08529663]
[18.67079353 -148.08854675]
[18.35873795 -133.09179688]
[18.04668236 -118.09503937]
[17.73462486 -103.09828949]
[35.16378403 -96.56644440]
[45.32831573 -81.92462158]
[45.34789276 -64.88905334]
[36.10904694 -51.52434158]
[42.73754501 -38.06837845]
[49.36604309 -24.61241150]
[55.99454117 -11.15644646]
[62.62303925 2.29951930]
[69.25154114 15.75548458]
[75.88003540 29.21145058]
[82.50853729 42.66741562]
[86.72106171 45.04020309]
[89.45384216 50.11595535]
[89.11975098 56.82385254]
[95.18276978 70.54390717]
[125.38777161 75.75463104]
[139.49197388 108.34024811]
[153.71875000 113.09406281]
[167.94554138 117.84787750]
[183.48645020 114.88298798]
[193.10554504 126.25498199]
[206.33998108 117.92529297]
[221.82525635 120.10250854]
[232.24969482 131.75862122]
[232.69119263 147.38996887]
[222.94129944 159.61590576]
[207.60360718 162.66372681]
[193.92010498 155.09432983]
[188.35173035 140.48176575]
[173.82839966 143.78668213]
[163.19172668 132.07466125]
[148.96493530 127.32083893]
[134.73815918 122.56702423]
[128.65223694 126.95013428]
[138.85832214 137.94267273]
[149.06439209 148.93522644]
[162.63847351 155.31832886]
[167.07243347 169.64802551]
[159.47550964 182.58195496]
[144.80056763 185.68777466]
[132.61503601 176.94062805]
[130.86317444 162.04380798]
[123.67179108 148.88008118]
[116.48040771 135.71633911]
[110.39448547 140.09944153]
[110.39448547 155.09944153]
[110.39448547 170.09944153]
[110.39448547 185.09944153]
[110.39448547 200.09944153]
[110.39448547 215.09944153]
[110.39448547 230.09944153]
[110.39448547 245.09944153]
[110.39448547 260.09942627]
[110.39448547 275.09942627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 111]
[21 110]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[43 50]
[44 49]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[113 129]
[114 128]
[115 127]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
