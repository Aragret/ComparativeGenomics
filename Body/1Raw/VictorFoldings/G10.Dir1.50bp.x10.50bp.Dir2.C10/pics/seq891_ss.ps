%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.24595642]
[92.50000000 234.24595642]
[92.50000000 219.24595642]
[92.50000000 204.24595642]
[92.50000000 189.24595642]
[92.50000000 174.24595642]
[92.50000000 159.24595642]
[92.50000000 144.24595642]
[92.50000000 129.24595642]
[92.50000000 114.24595642]
[85.73790741 111.00186920]
[72.21371460 104.51370239]
[65.45162201 101.26962280]
[53.75199509 110.65678406]
[58.03713608 125.24122620]
[56.40989304 140.35481262]
[49.11841202 153.69284058]
[37.27458572 163.22132874]
[22.68451881 167.48728943]
[7.57308483 165.84016418]
[-5.75533009 158.53114319]
[-15.26823997 146.67478943]
[-19.51499367 132.07911682]
[-17.84799385 116.96987152]
[-10.52144623 103.65107727]
[1.34740603 94.15377808]
[15.94864750 89.92622375]
[31.05569458 91.61309814]
[44.36483383 98.95716095]
[56.06445694 89.56999969]
[77.32325745 82.74263763]
[94.29576111 89.62874603]
[96.47259521 74.78753662]
[98.64943695 59.94633102]
[91.44501495 43.03254700]
[102.78717041 29.67757034]
[104.65478516 14.79429054]
[106.52239990 -0.08898909]
[108.39001465 -14.97226906]
[93.77062988 -20.01020050]
[80.51502991 -27.96141243]
[69.19583130 -38.47969818]
[60.30146027 -51.10802078]
[54.21503830 -65.29835510]
[51.19789505 -80.43549347]
[51.37835693 -95.86370087]
[54.74628067 -110.91512299]
[61.15358734 -124.93870544]
[70.32079315 -137.32833862]
[81.84917450 -147.54905701]
[95.23812866 -155.16017151]
[109.90689087 -159.83424377]
[125.21976471 -161.37112427]
[126.77734375 -176.29003906]
[128.33493042 -191.20893860]
[129.42623901 -206.16918945]
[130.05021667 -221.15620422]
[130.67419434 -236.14321899]
[131.29817200 -251.13024902]
[131.92214966 -266.11724854]
[132.54612732 -281.10427856]
[123.62433624 -297.17852783]
[133.51841736 -311.63906860]
[133.83047485 -326.63580322]
[133.98651123 -341.63500977]
[133.98651123 -356.63500977]
[133.98651123 -371.63500977]
[133.98651123 -386.63500977]
[119.92932892 -392.41979980]
[109.15945435 -403.14724731]
[103.31922150 -417.18151855]
[103.29922485 -432.38244629]
[109.10251617 -446.43200684]
[119.84412384 -457.18774414]
[133.88604736 -463.00952148]
[149.08697510 -463.00952148]
[163.12890625 -457.18774414]
[173.87051392 -446.43200684]
[179.67379761 -432.38244629]
[179.65380859 -417.18151855]
[173.81356812 -403.14724731]
[163.04370117 -392.41979980]
[148.98651123 -386.63500977]
[148.98651123 -371.63500977]
[148.98651123 -356.63500977]
[148.98651123 -341.63500977]
[152.15208435 -334.90264893]
[148.82722473 -326.32376099]
[148.51516724 -311.32699585]
[156.67864990 -302.34564209]
[156.50221252 -289.80819702]
[147.53314209 -280.48028564]
[146.90916443 -265.49328613]
[146.28518677 -250.50627136]
[145.66120911 -235.51924133]
[145.03723145 -220.53222656]
[144.41325378 -205.54521179]
[146.57781982 -202.68476868]
[147.42857361 -198.61317444]
[146.40235901 -193.97645569]
[143.25382996 -189.65136719]
[141.69625854 -174.73245239]
[140.13867188 -159.81353760]
[154.04806519 -155.47203064]
[166.84082031 -148.48559570]
[178.01956177 -139.12365723]
[187.14920044 -127.74800873]
[193.87391663 -114.79891968]
[197.93101501 -100.77799988]
[199.16116333 -86.22882843]
[197.51467896 -71.71585846]
[193.05352783 -57.80252457]
[185.94895935 -45.02936935]
[176.47499084 -33.89303970]
[164.99778748 -24.82697678]
[151.96153259 -18.18454361]
[137.87127686 -14.22525978]
[123.27329254 -13.10465622]
[121.40567780 1.77862406]
[119.53806305 16.66190338]
[117.67044830 31.54518318]
[124.85718536 41.32568359]
[123.37982941 53.77704239]
[113.49063873 62.12316895]
[111.31380463 76.96437073]
[109.13696289 91.80558014]
[116.98630524 79.02325439]
[129.02165222 70.07057190]
[143.52120972 66.22831726]
[158.41064453 68.04615784]
[171.55987549 75.26404572]
[181.08773804 86.84936523]
[185.63117981 101.14472198]
[184.54020691 116.10499573]
[177.97088623 129.58995056]
[166.86305237 139.67042542]
[152.80577087 144.90426636]
[137.81013489 144.54275513]
[124.02141571 138.63757324]
[113.41223907 128.03355408]
[107.50000000 114.24595642]
[107.50000000 129.24595642]
[107.50000000 144.24595642]
[107.50000000 159.24595642]
[107.50000000 174.24595642]
[107.50000000 189.24595642]
[107.50000000 204.24595642]
[107.50000000 219.24595642]
[107.50000000 234.24595642]
[107.50000000 249.24595642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 30]
[14 29]
[32 126]
[33 125]
[34 124]
[36 121]
[37 120]
[38 119]
[39 118]
[53 103]
[54 102]
[55 101]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[61 92]
[63 89]
[64 88]
[65 86]
[66 85]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
