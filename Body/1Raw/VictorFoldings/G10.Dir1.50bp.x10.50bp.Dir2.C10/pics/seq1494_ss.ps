%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUxxxxxxxxxxACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-30.50628853 507.04541016]
[-30.50628853 492.04541016]
[-30.50628853 477.04541016]
[-30.50628853 462.04541016]
[-30.50628853 447.04541016]
[-30.50628853 432.04541016]
[-30.50628853 417.04541016]
[-30.50628853 402.04541016]
[-30.50628853 387.04541016]
[-30.50628853 372.04541016]
[-36.54628372 367.59924316]
[-43.73766708 380.76296997]
[-50.92905045 393.92672729]
[-53.03690720 408.77786255]
[-65.38240814 417.29776001]
[-80.01536560 413.99981689]
[-87.51252747 401.00778198]
[-83.04592133 386.68823242]
[-69.49137115 380.26257324]
[-59.05882263 369.48474121]
[-48.62627029 358.70687866]
[-54.66626358 354.26071167]
[-68.98886108 358.71752930]
[-83.31146240 363.17434692]
[-94.18949890 374.66253662]
[-108.64092255 371.05621338]
[-122.96351624 375.51303101]
[-137.28611755 379.96984863]
[-148.00694275 392.37933350]
[-164.06129456 389.03424072]
[-168.93383789 373.37567139]
[-157.61210632 361.51184082]
[-141.74293518 365.64724731]
[-127.42033386 361.19042969]
[-113.09773254 356.73361206]
[-103.24414062 345.56417847]
[-87.76827240 348.85174561]
[-73.44567871 344.39492798]
[-59.12308121 339.93811035]
[-61.61540222 316.72860718]
[-53.82991409 295.38540649]
[-37.87850952 280.09698486]
[-17.41302299 273.60351562]
[3.20056725 276.71484375]
[10.10756588 263.39968872]
[17.01456451 250.08451843]
[7.99010944 236.71624756]
[6.91397905 220.52908325]
[14.17270851 205.91604614]
[27.87800217 196.89050293]
[44.35699081 195.98408508]
[50.98548889 182.52812195]
[57.61398697 169.07215881]
[64.24248505 155.61619568]
[70.87098694 142.16023254]
[77.49948120 128.70426941]
[65.27503204 114.30081940]
[61.66283035 95.19680786]
[68.13990021 76.28167725]
[83.52850342 62.67074203]
[104.17101288 58.32400513]
[105.72859192 43.40509033]
[107.28617096 28.48617935]
[108.84375000 13.56726742]
[106.61289978 4.64117479]
[110.59207153 -1.64466679]
[112.45968628 -16.52794647]
[114.32730103 -31.41122627]
[100.47080994 -37.42574310]
[88.87097931 -47.10151291]
[80.46813965 -59.65416336]
[75.94348907 -74.06610870]
[75.66381073 -89.16903687]
[79.65177155 -103.73862457]
[87.58409882 -116.59377289]
[98.81774902 -126.69237518]
[112.44205475 -133.21578979]
[127.35256195 -135.63519287]
[142.34054565 -133.75444031]
[156.19097900 -127.72600555]
[167.78108215 -118.03858185]
[176.17131042 -105.47750092]
[180.68148804 -91.06101227]
[180.94598389 -75.95780945]
[176.94338989 -61.39223862]
[168.99815369 -48.54506683]
[157.75436401 -38.45775223]
[144.12350464 -31.94802856]
[129.21058655 -29.54361343]
[127.34296417 -14.66033363]
[125.47535706 0.22294635]
[123.76266479 15.12484837]
[122.20508575 30.04376030]
[120.64749908 44.96267319]
[119.08992004 59.88158417]
[131.35229492 68.52069855]
[144.87648010 62.03253555]
[158.33244324 55.40403748]
[171.71873474 48.63592148]
[185.10501099 41.86780930]
[196.51200867 29.32520294]
[211.72221375 36.81426239]
[208.73641968 53.50322342]
[191.87312317 55.25409317]
[178.48684692 62.02220917]
[165.10055542 68.79032135]
[160.52079773 74.65303802]
[151.36463928 75.55672455]
[137.84045410 82.04489136]
[140.68145752 93.43559265]
[140.22457886 104.97566986]
[136.61277771 115.74472046]
[130.23638916 124.91355133]
[121.69390106 131.80796814]
[111.73707581 135.95797729]
[101.20538330 137.12898254]
[90.95545197 135.33276367]
[84.32695007 148.78872681]
[77.69845581 162.24468994]
[71.06995392 175.70065308]
[64.44145203 189.15661621]
[57.81295776 202.61259460]
[66.19861603 213.85209656]
[68.89681244 227.54556274]
[65.43479156 240.99766541]
[56.54662704 251.58578491]
[44.01844406 257.27117920]
[30.32971954 256.99151611]
[23.42272186 270.30667114]
[16.51572227 283.62182617]
[24.71141434 290.57937622]
[31.13974380 299.37985229]
[35.38867188 309.57574463]
[37.15911102 320.62820435]
[36.28497696 331.93542480]
[32.74612427 342.86532593]
[26.67321777 352.79101562]
[18.34407425 361.12655640]
[8.17148113 367.36151123]
[-3.31699920 371.09182739]
[-15.50628853 372.04541016]
[-15.50628853 387.04541016]
[-15.50628853 402.04541016]
[-15.50628853 417.04541016]
[-15.50628853 432.04541016]
[-15.50628853 447.04541016]
[-15.50628853 462.04541016]
[-15.50628853 477.04541016]
[-15.50628853 492.04541016]
[-15.50628853 507.04541016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 39]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[44 130]
[45 129]
[46 128]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[61 95]
[62 94]
[63 93]
[64 92]
[66 91]
[67 90]
[68 89]
[96 109]
[97 108]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
