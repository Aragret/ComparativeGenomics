%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCxxxxxxxxxxCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.08988953 342.74011230]
[101.08988953 327.74011230]
[101.08988953 312.74011230]
[101.08988953 297.74011230]
[101.08988953 282.74011230]
[101.08988953 267.74011230]
[101.08988953 252.74011230]
[101.08988953 237.74011230]
[101.08988953 222.74011230]
[101.08988953 207.74011230]
[98.91305542 192.89891052]
[94.60546875 178.53073120]
[90.29788208 164.16253662]
[85.99030304 149.79435730]
[81.68271637 135.42617798]
[84.70991516 95.05461121]
[75.20156097 83.45326996]
[65.69319916 71.85192871]
[56.18484497 60.25058746]
[64.65299225 72.63163757]
[67.14649963 87.42293549]
[63.20537567 101.89592743]
[53.55664444 113.38078308]
[39.98020554 119.75890350]
[24.98050499 119.85369873]
[11.32453537 113.64768982]
[1.53141272 102.28570557]
[-2.59232712 87.86368561]
[-0.28597796 73.04205322]
[8.02500820 60.55495834]
[20.80750465 52.70589447]
[35.70048141 50.94247818]
[20.70778465 51.41051865]
[5.71508932 51.87856293]
[-6.27331972 62.53959274]
[-22.05798149 59.67184067]
[-29.53025436 45.47519684]
[-22.95804977 30.84011269]
[-7.38300180 26.99337196]
[5.24704695 36.88586426]
[20.23974228 36.41782379]
[35.23244095 35.94977951]
[43.87155533 23.68741226]
[39.26599121 9.41195202]
[34.66042709 -4.86350822]
[23.05968666 -15.62145329]
[26.51550293 -30.10960770]
[21.90993881 -44.38506699]
[17.30437469 -58.66053009]
[9.44694805 -71.43788910]
[-1.21467805 -81.98917389]
[-11.87630463 -92.54046631]
[-22.53793144 -103.09175873]
[-38.33871460 -102.75893402]
[-49.68891907 -113.75659180]
[-49.85466385 -129.56001282]
[-38.73762131 -140.79330444]
[-22.93333435 -140.79196167]
[-11.81820297 -129.55677795]
[-11.98663998 -113.75337982]
[-1.32501411 -103.20209503]
[9.33661175 -92.65080261]
[19.99823761 -82.09951019]
[16.34913635 -96.64888000]
[16.36218834 -111.64887238]
[20.03660583 -126.19186401]
[27.15005493 -139.39788818]
[37.27210999 -150.46783447]
[49.79029846 -158.73191833]
[63.94716263 -163.69006348]
[78.88609314 -165.04226685]
[93.70314789 -162.70669556]
[107.50177002 -156.82469177]
[119.44702911 -147.75216675]
[128.81613159 -136.03807068]
[135.04216003 -122.39122009]
[137.74838257 -107.63735962]
[136.77107239 -92.66922760]
[132.16932678 -78.39253235]
[124.22163391 -65.67113495]
[113.40886688 -55.27478027]
[100.38530731 -47.83255005]
[85.93898773 -43.79475403]
[70.94403076 -43.40571976]
[56.30776978 -46.68898392]
[42.91581726 -53.44588089]
[31.57983398 -63.26609421]
[36.18539810 -48.99063110]
[40.79096222 -34.71517181]
[52.06228256 -24.97830200]
[48.93588638 -9.46907234]
[53.54145050 4.80638790]
[58.14701462 19.08184814]
[63.05577850 22.30881119]
[66.99359131 26.81873322]
[69.62679291 32.32091904]
[70.70837402 38.43855667]
[70.09996033 44.73444748]
[67.78618622 50.74222946]
[77.29454041 62.34357071]
[86.80290222 73.94490814]
[96.31125641 85.54624939]
[110.27165222 91.03328705]
[125.13469696 89.01094818]
[139.99774170 86.98861694]
[154.86079407 84.96627808]
[163.05203247 71.64571381]
[177.90544128 66.75588226]
[192.40766907 72.60560608]
[199.71122742 86.43283081]
[196.36758423 101.70876312]
[183.95550537 111.22057343]
[168.33561707 110.47707367]
[156.88311768 99.82933044]
[142.02008057 101.85166168]
[127.15702820 103.87400055]
[112.29398346 105.89633179]
[108.23321533 112.20189667]
[120.84420776 120.32364655]
[112.72224426 132.93450928]
[100.11167145 124.81302643]
[96.05090332 131.11859131]
[100.35848236 145.48677063]
[104.66606903 159.85494995]
[108.97365570 174.22314453]
[113.28123474 188.59132385]
[117.67023468 174.24780273]
[127.13148499 162.60800171]
[140.27572632 155.38105774]
[155.17295837 153.62814331]
[169.63572693 157.60664368]
[181.54039001 166.73236084]
[189.13894653 179.66532898]
[191.31565857 194.50656128]
[187.75091553 209.07682800]
[178.96812439 221.23669434]
[166.25692749 229.20069885]
[151.48374939 231.79943848]
[136.81782532 228.65132141]
[124.41262054 220.21859741]
[116.08988953 207.74011230]
[116.08988953 222.74011230]
[116.08988953 237.74011230]
[116.08988953 252.74011230]
[116.08988953 267.74011230]
[116.08988953 282.74011230]
[116.08988953 297.74011230]
[116.08988953 312.74011230]
[116.08988953 327.74011230]
[116.08988953 342.74011230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[16 102]
[17 101]
[18 100]
[19 99]
[32 42]
[33 41]
[34 40]
[43 93]
[44 92]
[45 91]
[47 89]
[48 88]
[49 87]
[50 63]
[51 62]
[52 61]
[53 60]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
