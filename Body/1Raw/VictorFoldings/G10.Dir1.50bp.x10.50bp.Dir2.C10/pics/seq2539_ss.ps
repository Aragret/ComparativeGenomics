%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUAxxxxxxxxxxUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.86088562 263.00064087]
[120.86088562 248.00065613]
[120.86088562 233.00065613]
[120.86088562 218.00065613]
[120.86088562 203.00065613]
[120.86088562 188.00065613]
[120.86088562 173.00065613]
[120.86088562 158.00065613]
[120.86088562 143.00065613]
[120.86088562 128.00065613]
[114.03276825 124.89794922]
[101.83062744 133.62191772]
[100.37652588 118.69254303]
[93.54840851 115.58983612]
[82.24940491 125.45555878]
[70.95039368 135.32128906]
[59.65139008 145.18701172]
[58.83375931 160.97012329]
[47.03947449 171.49012756]
[31.26587868 170.50567627]
[20.87116241 158.60083008]
[22.02232933 142.83851624]
[34.03641129 132.57025146]
[49.78566742 133.88800049]
[61.08467484 124.02227783]
[72.38367462 114.15655518]
[83.68268585 104.29083252]
[77.90641022 90.44761658]
[62.94616318 91.53892517]
[47.98591232 92.63023376]
[33.02566528 93.72154236]
[25.74181366 107.32114410]
[12.25065422 114.80393219]
[-3.14283729 113.78218079]
[-15.52665138 104.58192444]
[-20.94915962 90.13893890]
[-17.68005753 75.06192017]
[-6.76250601 64.16188812]
[8.31974602 60.91701508]
[22.75400543 66.36271667]
[31.93435287 78.76129913]
[46.89460373 77.66999054]
[61.85485077 76.57867432]
[76.81510162 75.48736572]
[89.25453949 67.10522461]
[95.88304138 53.64925766]
[96.88191986 44.50299454]
[102.79196167 39.98447037]
[102.27825928 24.17160797]
[115.00696564 16.43666840]
[121.91396332 3.12151313]
[126.37078094 -11.20108414]
[128.23838806 -26.08436394]
[130.10600281 -40.96764374]
[131.97361755 -55.85092545]
[115.94454193 -66.75814819]
[108.76367950 -85.68873596]
[113.94316864 -106.14894104]
[130.56338501 -120.50901794]
[128.38655090 -135.35021973]
[126.20970917 -150.19142151]
[111.23435974 -152.09968567]
[97.32962799 -157.97853088]
[85.52732849 -167.39173889]
[76.70328522 -179.64077759]
[71.51229095 -193.81666565]
[70.33955383 -208.86749268]
[73.27210236 -223.67637634]
[80.09231567 -237.14437866]
[90.29409790 -248.27210999]
[103.12039948 -256.23379517]
[117.61942291 -260.43865967]
[132.71525574 -260.57464600]
[147.28767395 -256.63165283]
[160.25532532 -248.90229797]
[170.65589905 -237.96015930]
[177.71762085 -224.61720276]
[180.91645813 -209.86355591]
[180.01504517 -194.79405212]
[175.08026123 -180.52693176]
[166.47830200 -168.12092590]
[154.84748840 -158.49664307]
[141.05091858 -152.36825562]
[143.22775269 -137.52705383]
[145.40458679 -122.68585205]
[159.90019226 -118.82868958]
[169.16513062 -130.62533569]
[178.43008423 -142.42196655]
[187.69503784 -154.21861267]
[189.48175049 -170.52014160]
[204.59954834 -176.87498474]
[217.49655151 -166.74583435]
[214.90541077 -150.55268860]
[199.49166870 -144.95365906]
[190.22673035 -133.15702820]
[180.96177673 -121.36038208]
[171.69682312 -109.56374359]
[178.10313416 -95.11267090]
[177.84114075 -79.79954529]
[171.37153625 -66.46247864]
[160.26792908 -57.40142059]
[146.85690308 -53.98331070]
[144.98928833 -39.10003281]
[143.12167358 -24.21675110]
[141.25405884 -9.33347130]
[155.74850464 -11.34691906]
[165.54678345 -2.32385278]
[180.53948975 -1.85581052]
[195.53218079 -1.38776839]
[210.52487183 -0.91972625]
[225.51757812 -0.45168415]
[238.14762878 -10.34417725]
[253.72267151 -6.49743652]
[260.29486084 8.13764763]
[252.82260132 22.33429146]
[237.03793335 25.20204353]
[225.04953003 14.54101181]
[210.05683899 14.07296944]
[195.06413269 13.60492802]
[180.07144165 13.13688564]
[165.07875061 12.66884327]
[150.30093384 21.07981873]
[135.22912598 10.02851200]
[128.32211304 23.34366798]
[129.32986450 38.20414352]
[116.10711670 46.89147186]
[109.33900452 60.27775574]
[102.71050262 73.73371887]
[109.51087189 60.36378860]
[120.52197266 50.17773819]
[134.38003540 44.43716049]
[149.36865234 43.85306168]
[163.63142395 48.49777985]
[175.40182495 57.79604340]
[183.22201538 70.59622192]
[186.12345886 85.31293488]
[183.74676514 100.12345123]
[176.38630676 113.19340515]
[164.95372009 122.90401459]
[150.86499023 128.05258179]
[135.86088562 128.00065613]
[135.86088562 143.00065613]
[135.86088562 158.00065613]
[135.86088562 173.00065613]
[135.86088562 188.00065613]
[135.86088562 203.00065613]
[135.86088562 218.00065613]
[135.86088562 233.00065613]
[135.86088562 248.00065613]
[135.86088562 263.00064087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 27]
[15 26]
[16 25]
[17 24]
[28 44]
[29 43]
[30 42]
[31 41]
[45 128]
[46 127]
[48 126]
[50 124]
[51 123]
[52 105]
[53 104]
[54 103]
[55 102]
[59 85]
[60 84]
[61 83]
[86 97]
[87 96]
[88 95]
[89 94]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
