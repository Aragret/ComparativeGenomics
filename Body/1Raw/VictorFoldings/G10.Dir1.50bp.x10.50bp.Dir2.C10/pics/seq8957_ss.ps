%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUxxxxxxxxxxACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.74025726 294.04882812]
[108.74025726 279.04882812]
[108.74025726 264.04882812]
[108.74025726 249.04882812]
[108.74025726 234.04882812]
[108.74025726 219.04882812]
[108.74025726 204.04882812]
[108.74025726 189.04882812]
[108.74025726 174.04882812]
[108.74025726 159.04882812]
[67.28197479 129.22023010]
[72.89953613 92.79721832]
[59.96148300 85.20730591]
[47.02342606 77.61740112]
[37.97407913 75.95573425]
[33.89750671 69.73262024]
[21.12014961 61.87519073]
[7.10343742 56.53367996]
[-7.84268236 61.72251892]
[-19.01027679 51.86685562]
[-33.77633286 49.22799301]
[-48.67823410 47.51530457]
[-63.65794754 46.73545837]
[-78.63766479 45.95561218]
[-93.61737823 45.17576599]
[-108.59709167 44.39592361]
[-123.57680511 43.61607742]
[-131.49493408 58.79077530]
[-145.18591309 68.97126770]
[-161.88952637 72.16482544]
[-178.26402283 67.78137207]
[-191.05477905 56.74182129]
[-197.74107361 41.28510666]
[-212.74026489 41.12907028]
[-227.73944092 40.97303391]
[-240.16096497 51.12614059]
[-255.81266785 47.60425186]
[-262.68789673 33.10905838]
[-255.51260376 18.76003647]
[-239.79101562 15.56452465]
[-227.58340454 25.97384644]
[-212.58422852 26.12988281]
[-197.58503723 26.28591919]
[-192.76388550 14.14973354]
[-184.06924438 4.36343288]
[-172.52867126 -1.88347197]
[-159.51737976 -3.82171917]
[-146.59432983 -1.19696295]
[-135.31546021 5.69709063]
[-127.04636383 16.05137444]
[-122.79695892 28.63636208]
[-107.81724548 29.41620827]
[-92.83753204 30.19605255]
[-77.85781860 30.97589874]
[-62.87810516 31.75574303]
[-47.89839172 32.53558731]
[-56.76592255 20.43737221]
[-54.67192841 5.58425236]
[-42.80527496 -3.59085345]
[-27.90330696 -1.87874150]
[-18.42667389 9.74852943]
[-19.75577354 24.68952942]
[-31.13746834 34.46193695]
[-16.37141228 37.10079956]
[-2.48146009 31.72321129]
[9.74230194 41.76762390]
[-1.42941248 31.75798798]
[-9.03650856 18.83003044]
[-12.36144829 4.20317841]
[-11.09060764 -10.74289036]
[-5.34385729 -24.59838867]
[4.33674002 -36.05640030]
[17.03806305 -44.03614807]
[31.56206131 -47.78494644]
[46.53876114 -46.94918442]
[60.55548477 -41.60769653]
[72.29010773 -32.26432419]
[80.63575745 -19.80037308]
[84.80524445 -5.39150620]
[84.40526581 9.60315990]
[79.47356415 23.76925659]
[70.47531128 35.77056885]
[58.25926971 44.47507095]
[43.97771835 49.06171417]
[28.97757530 49.09783554]
[41.75493240 56.95526123]
[54.61333466 64.67934418]
[67.55139160 72.26924896]
[80.48944855 79.85916138]
[101.35077667 56.15405655]
[144.09298706 59.76363373]
[155.98536682 50.62189865]
[167.87774658 41.48016739]
[179.77012634 32.33843231]
[191.66250610 23.19669724]
[197.42155457 7.84204721]
[213.64079285 5.41949511]
[223.63522339 18.42115402]
[217.12345886 33.47203445]
[200.80422974 35.08907700]
[188.91184998 44.23081207]
[177.01947021 53.37254715]
[165.12709045 62.51427841]
[153.23471069 71.65601349]
[159.01098633 85.49922943]
[173.87403870 83.47689819]
[188.73709106 81.45455933]
[199.55364990 69.60630035]
[215.55076599 70.81948853]
[224.45681763 84.16348267]
[219.43981934 99.40190125]
[204.34841919 104.84513855]
[190.75941467 96.31761169]
[175.89637756 98.33994293]
[161.03332520 100.36228180]
[159.79077148 107.75862885]
[174.58343506 110.24399567]
[172.09782410 125.03662109]
[157.30564880 122.55133820]
[156.06309509 129.94769287]
[169.44937134 136.71580505]
[184.38475037 131.54762268]
[198.56340027 138.52912903]
[203.57339478 153.51831055]
[196.44236755 167.62236023]
[181.40106201 172.47358704]
[167.37319946 165.19384766]
[162.68125916 150.10209656]
[149.29496765 143.33398438]
[142.90629578 147.26269531]
[151.40905762 159.61999512]
[159.91181946 171.97731018]
[168.41458130 184.33460999]
[178.44694519 195.48591614]
[172.11988831 209.08622742]
[157.12789917 208.59585571]
[151.70307922 194.61132812]
[144.51170349 181.44758606]
[137.32031250 168.28385925]
[130.12893677 155.12011719]
[123.74025726 159.04882812]
[123.74025726 174.04882812]
[123.74025726 189.04882812]
[123.74025726 204.04882812]
[123.74025726 219.04882812]
[123.74025726 234.04882812]
[123.74025726 249.04882812]
[123.74025726 264.04882812]
[123.74025726 279.04882812]
[123.74025726 294.04882812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 89]
[13 88]
[14 87]
[16 86]
[17 85]
[18 66]
[20 64]
[21 63]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[33 43]
[34 42]
[35 41]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[105 115]
[106 114]
[107 113]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
