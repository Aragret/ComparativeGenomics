%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGxxxxxxxxxxUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[39.41979599 390.11373901]
[39.10774231 375.11697388]
[38.79568481 360.12023926]
[38.48362732 345.12347412]
[38.17157364 330.12670898]
[37.85951614 315.12997437]
[37.54745865 300.13320923]
[37.23540497 285.13644409]
[36.92334747 270.13970947]
[23.08012962 264.36343384]
[12.20130444 274.69064331]
[1.32247972 285.01785278]
[-9.55634594 295.34503174]
[-4.84255838 309.86203003]
[-6.90277672 324.98547363]
[-15.32794285 337.71258545]
[-28.44523239 345.51638794]
[-43.65019989 346.84744263]
[-57.92388916 341.44146729]
[-68.43224335 330.37182617]
[-73.08882904 315.83636475]
[-70.96907043 300.72116089]
[-62.49385071 288.02734375]
[-49.34593201 280.27523804]
[-34.13583755 279.00405884]
[-19.88355064 284.46621704]
[-9.00472546 274.13900757]
[1.87409997 263.81179810]
[12.75292492 253.48460388]
[2.36735272 229.06338501]
[6.51015377 203.44818115]
[23.28484535 184.43098450]
[47.05121231 177.45655823]
[48.91882324 162.57327271]
[50.78643799 147.68998718]
[44.69398499 134.09840393]
[54.08930588 121.36897278]
[55.95691681 106.48568726]
[52.50323486 121.08267975]
[43.24497604 132.88456726]
[29.89000320 139.71426392]
[14.90191364 140.31188965]
[1.04555619 134.56721497]
[-9.12298775 123.53993988]
[-13.72792721 109.26427460]
[-11.91978931 94.37365723]
[-4.03212214 81.61494446]
[8.48003769 73.34174347]
[23.30857277 71.08020782]
[37.71806717 75.24752808]
[49.04856873 85.07250214]
[38.83509064 74.08683014]
[28.62161064 63.10116959]
[18.40813065 52.11550522]
[2.60717893 51.79074860]
[-8.27571392 40.33045959]
[-7.78391933 24.53382683]
[3.79078865 13.77270699]
[19.58134079 14.43148518]
[30.21948433 26.11931992]
[29.39379501 41.90202332]
[39.60727692 52.88768768]
[49.82075500 63.87335205]
[60.03423691 74.85901642]
[74.26101685 70.10520172]
[75.81859589 55.18629074]
[77.37617493 40.26737976]
[78.93375397 25.34846687]
[80.49134064 10.42955494]
[66.74885559 4.07165718]
[55.81710815 -6.40573025]
[48.88189316 -19.86609840]
[46.69549179 -34.84936905]
[49.49506378 -49.73026657]
[56.97693634 -62.89462280]
[68.32952881 -72.91446686]
[82.32140350 -78.70292664]
[97.43482208 -79.63210297]
[112.03038788 -75.60121155]
[124.52489471 -67.04750061]
[133.56301880 -54.89879608]
[138.16438293 -40.47291183]
[137.82986450 -25.33465385]
[132.59574890 -11.12611103]
[123.02979279 0.61148345]
[110.16963196 8.60492134]
[95.41024780 11.98713589]
[93.85266876 26.90604782]
[92.29508972 41.82495880]
[90.73751068 56.74387360]
[89.17992401 71.66278076]
[106.77822876 74.54668427]
[117.29931641 85.85183716]
[131.42411804 80.80307770]
[138.50704956 74.93077850]
[145.89561462 75.79955292]
[160.12239075 71.04573822]
[174.34918213 66.29192352]
[188.57595825 61.53810883]
[202.80273438 56.78429413]
[205.79223633 41.71915054]
[215.92584229 30.17768669]
[230.47769165 25.26449585]
[245.53338623 28.30119896]
[257.04302979 38.47094345]
[261.91058350 53.03811264]
[258.82669067 68.08421326]
[248.62092590 79.56192780]
[234.03857422 84.38379669]
[219.00221252 81.25276947]
[207.55654907 71.01107025]
[193.32977295 75.76488495]
[179.10299683 80.51869965]
[164.87620544 85.27251434]
[150.64942932 90.02632904]
[136.47286987 94.92787933]
[122.34806824 99.97663879]
[103.67613983 126.08259583]
[70.84019470 108.35330200]
[68.97258759 123.23657990]
[74.93144989 137.89273071]
[65.66971588 149.55760193]
[63.80210495 164.44088745]
[61.93449020 179.32417297]
[68.76215363 181.76377869]
[75.13522339 185.30622864]
[80.87587738 189.86799622]
[85.82146454 195.33691406]
[89.82910156 201.57496643]
[92.77979279 208.42170715]
[94.58193207 215.69836426]
[95.17407990 223.21258545]
[94.52696991 230.76344299]
[92.64466095 238.14683533]
[89.56476593 245.16099548]
[85.35781097 251.61203003]
[80.12564850 257.31924438]
[73.99902344 262.12017822]
[67.13434601 265.87530518]
[59.70966721 268.47192383]
[51.92010117 269.82763672]
[52.23215866 284.82440186]
[52.54421234 299.82116699]
[52.85626984 314.81790161]
[53.16832733 329.81466675]
[53.48038101 344.81140137]
[53.79243851 359.80816650]
[54.10449600 374.80493164]
[54.41654968 389.80166626]
[57.00754929 409.00939941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 29]
[11 28]
[12 27]
[13 26]
[33 124]
[34 123]
[35 122]
[37 120]
[38 119]
[51 64]
[52 63]
[53 62]
[54 61]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[93 117]
[94 116]
[96 115]
[97 114]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
