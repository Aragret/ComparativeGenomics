%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGxxxxxxxxxxUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.76121521 499.34878540]
[102.76121521 484.34878540]
[102.76121521 469.34878540]
[102.76121521 454.34878540]
[102.76121521 439.34878540]
[102.76121521 424.34878540]
[102.76121521 409.34878540]
[102.76121521 394.34878540]
[102.76121521 379.34878540]
[102.76121521 364.34878540]
[88.72434235 361.80178833]
[75.34869385 356.83032227]
[63.04965591 349.58743286]
[52.20941544 340.29669189]
[43.16508102 329.24539185]
[36.19820404 316.77560425]
[31.52601242 303.27349854]
[29.29464149 289.15756226]
[29.57455826 274.86547852]
[32.35833740 260.84069824]
[37.56085587 247.51852417]
[45.02188873 235.31268311]
[54.51105881 224.60250854]
[65.73492432 215.72108459]
[78.34608459 208.94491577]
[91.95390320 204.48533630]
[106.13662720 202.48188782]
[106.76060486 187.49487305]
[107.38458252 172.50784302]
[99.40971375 163.35859680]
[99.84693909 150.82752991]
[109.00813293 141.68824768]
[109.94376373 126.71745300]
[81.20866394 135.60504150]
[49.52013779 112.52800751]
[34.65708923 110.50567627]
[19.79404259 108.48334503]
[4.93099546 106.46100616]
[-8.65800095 114.98853302]
[-23.74941254 109.54529572]
[-28.76639938 94.30687714]
[-19.86035919 80.96289062]
[-3.86324334 79.74970245]
[6.95332956 91.59796143]
[21.81637764 93.62029266]
[36.67942429 95.64263153]
[51.54246902 97.66496277]
[54.92652893 90.97182465]
[65.07869720 70.89239502]
[54.63888931 60.12158585]
[44.19907379 49.35077667]
[33.75926208 38.57996750]
[23.31945038 27.80916023]
[7.73600197 29.10922241]
[-5.00738335 20.04610252]
[-8.89366913 4.89912939]
[-2.08787060 -9.17975998]
[12.19652271 -15.54294395]
[27.21485710 -11.18592167]
[35.87593460 1.83405340]
[34.09025955 17.36934853]
[44.53007126 28.14015579]
[54.96988297 38.91096497]
[65.40969849 49.68177414]
[75.84951019 60.45258331]
[82.91191101 57.92820358]
[97.03671265 52.87944794]
[104.09911346 50.35506821]
[105.34598541 35.40698242]
[106.59286499 20.45889473]
[93.06518555 13.52561188]
[83.22430420 1.94003797]
[78.57088470 -12.53110886]
[79.81453705 -27.68108559]
[86.76560974 -41.19963074]
[98.36411285 -51.02526093]
[112.84136963 -55.65964127]
[127.98970032 -54.39606476]
[141.49908447 -47.42721558]
[151.30944824 -35.81579208]
[155.92478943 -21.33245087]
[154.64128113 -6.18579960]
[147.65466309 7.31440973]
[136.03034973 17.10949326]
[121.54094696 21.70577049]
[120.29407501 36.65385818]
[119.04720306 51.60194397]
[133.88111877 78.25366974]
[128.46539307 101.55638123]
[142.48210144 96.21486664]
[152.62237549 84.07051086]
[167.27059937 86.76842499]
[181.28732300 81.42691040]
[195.30403137 76.08539581]
[194.10581970 61.02747726]
[197.19981384 46.24221802]
[204.33517456 32.92819214]
[214.93348694 22.16471100]
[228.13558960 14.82431984]
[242.87123108 11.50207329]
[257.94589233 12.46728897]
[272.13748169 17.64172363]
[284.29562378 26.60590553]
[293.43466187 38.63315201]
[298.81375122 52.74846649]
[299.99682617 67.80758667]
[296.88800049 82.58972931]
[289.73925781 95.89657593]
[279.13012695 106.64940643]
[265.92068481 113.97653198]
[251.18170166 117.28397369]
[236.10801697 116.30361176]
[221.92161560 111.11492157]
[209.77249146 102.13853455]
[200.64553833 90.10211182]
[186.62882996 95.44362640]
[172.61212158 100.78513336]
[163.47441101 112.54743195]
[147.82360840 110.23158264]
[133.80690002 115.57309723]
[124.91455078 127.65308380]
[123.97891998 142.62387085]
[132.56437683 158.88024902]
[122.37159729 173.13182068]
[121.74761963 188.11885071]
[121.12364197 203.10586548]
[136.47691345 206.74246216]
[150.83488464 213.27357483]
[163.65774536 222.45176697]
[174.46383667 233.93009949]
[182.84761047 247.27532959]
[188.49491882 261.98413086]
[191.19480896 277.50219727]
[190.84735107 293.24508667]
[187.46734619 308.62017822]
[181.18373108 323.04904175]
[172.23463440 335.98925781]
[160.95835876 346.95465088]
[147.78059387 355.53369141]
[133.19834900 361.40487671]
[117.76121521 364.34878540]
[117.76121521 379.34878540]
[117.76121521 394.34878540]
[117.76121521 409.34878540]
[117.76121521 424.34878540]
[117.76121521 439.34878540]
[117.76121521 454.34878540]
[117.76121521 469.34878540]
[117.76121521 484.34878540]
[117.76121521 499.34878540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 126]
[28 125]
[29 124]
[32 122]
[33 121]
[35 47]
[36 46]
[37 45]
[38 44]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[68 87]
[69 86]
[70 85]
[89 120]
[90 119]
[92 117]
[93 116]
[94 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
