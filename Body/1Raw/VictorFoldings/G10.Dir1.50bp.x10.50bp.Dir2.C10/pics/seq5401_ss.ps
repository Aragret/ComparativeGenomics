%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUGAxxxxxxxxxxUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.97863770 404.45120239]
[134.97863770 389.45120239]
[134.97863770 374.45120239]
[134.97863770 359.45120239]
[134.97863770 344.45120239]
[134.97863770 329.45120239]
[134.97863770 314.45120239]
[134.97863770 299.45120239]
[134.97863770 284.45120239]
[134.97863770 269.45120239]
[133.11102295 254.56791687]
[129.40486145 240.03297424]
[125.54769897 225.53738403]
[121.53995514 211.08270264]
[117.53221893 196.62800598]
[113.52447510 182.17332458]
[103.12565613 175.91458130]
[99.69425201 163.85455322]
[105.60682678 152.34388733]
[101.90066528 137.80895996]
[76.61730957 129.77212524]
[62.81766129 107.11360168]
[47.81847382 106.95755768]
[32.81928635 106.80152130]
[26.71223450 117.79335785]
[16.55479813 125.08217621]
[4.32869530 127.32205200]
[-7.61301184 124.14476776]
[-16.99877357 116.21871948]
[-22.07063103 105.10940552]
[-37.05034637 104.32955933]
[-52.03005981 103.54972076]
[-58.90150452 117.14027405]
[-70.71075439 126.75595856]
[-85.41179657 130.73080444]
[-100.45757294 128.37614441]
[-113.24131775 120.09992218]
[-121.54817200 107.33606720]
[-123.93891907 92.29598236]
[-119.99935150 77.58544922]
[-110.41202545 65.75316620]
[-96.83798981 58.84914017]
[-81.62904358 58.06953812]
[-67.42021942 63.54943085]
[-56.67328644 74.33939362]
[-51.25021362 88.56999969]
[-36.27050018 89.34984589]
[-21.29078484 90.12969208]
[-10.88772774 75.92250824]
[6.09596443 70.71147919]
[22.97152328 76.74454498]
[32.97532272 91.80233765]
[47.97451019 91.95837402]
[62.97369766 92.11441040]
[65.76777649 83.83570099]
[70.38542938 76.41808319]
[76.58067322 70.25668335]
[84.02348328 65.67974091]
[92.31736755 62.93105316]
[101.02051544 62.15705872]
[109.66929626 63.39898682]
[116.29779816 49.94301987]
[122.92630005 36.48705673]
[129.55479431 23.03108978]
[136.18328857 9.57512474]
[123.93998718 -8.78596783]
[127.16850281 -32.06558609]
[146.11697388 -48.27655029]
[146.11697388 -63.27655029]
[146.11697388 -78.27655029]
[132.77583313 -85.88640594]
[125.04087067 -99.15538025]
[124.99272919 -114.51419830]
[132.64436340 -127.83141327]
[145.93751526 -135.52474976]
[161.29641724 -135.52474976]
[174.58956909 -127.83141327]
[182.24121094 -114.51419830]
[182.19306946 -99.15538025]
[174.45809937 -85.88640594]
[161.11697388 -78.27655029]
[161.11697388 -63.27655029]
[161.11697388 -48.27655029]
[175.13368225 -42.93503952]
[185.11640930 -54.13080215]
[195.09913635 -65.32656860]
[198.38813782 -83.41419983]
[215.20684814 -88.32653809]
[224.95449829 -99.72756195]
[234.70214844 -111.12857819]
[237.16543579 -127.34166718]
[252.53451538 -133.06213379]
[264.99896240 -122.40525818]
[261.73648071 -106.33391571]
[246.10316467 -101.38092804]
[236.35551453 -89.97991180]
[226.60786438 -78.57888794]
[227.22848511 -66.45774078]
[219.14465332 -56.87282944]
[206.29489136 -55.34384155]
[196.31217957 -44.14807892]
[186.32945251 -32.95231247]
[190.51000977 -19.64170456]
[189.30119324 -6.13986826]
[183.18881226 5.51458216]
[173.37603760 13.67781162]
[161.55921936 17.33139801]
[149.63926697 16.20362282]
[143.01075745 29.65958977]
[136.38226318 43.11555481]
[129.75376892 56.57152176]
[123.12526703 70.02748871]
[130.74722290 77.91520691]
[135.78796387 87.65694427]
[137.82432556 98.43486786]
[136.68536377 109.34417725]
[132.46667480 119.46905518]
[125.52243805 127.95951843]
[116.43560028 134.10279846]
[120.14176178 148.63772583]
[133.30383301 161.47282410]
[127.97916412 178.16557312]
[131.98690796 192.62026978]
[135.99464417 207.07495117]
[140.00238037 221.52964783]
[145.34381104 229.02104187]
[143.93978882 236.32681274]
[147.64595032 250.86175537]
[153.09976196 236.88835144]
[163.99394226 226.57734680]
[178.24598694 221.89981079]
[193.13145447 223.74987793]
[205.80485535 231.77389526]
[213.84353638 244.43800354]
[215.71083069 259.32131958]
[211.04977417 273.57876587]
[200.75138855 284.48489380]
[186.78430176 289.95483398]
[171.81846619 288.94302368]
[158.71475220 281.64285278]
[149.97863770 269.45120239]
[149.97863770 284.45120239]
[149.97863770 299.45120239]
[149.97863770 314.45120239]
[149.97863770 329.45120239]
[149.97863770 344.45120239]
[149.97863770 359.45120239]
[149.97863770 374.45120239]
[149.97863770 389.45120239]
[149.97863770 404.45120239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 125]
[14 124]
[15 123]
[16 122]
[19 120]
[20 119]
[22 54]
[23 53]
[24 52]
[30 48]
[31 47]
[32 46]
[61 112]
[62 111]
[63 110]
[64 109]
[65 108]
[68 83]
[69 82]
[70 81]
[84 102]
[85 101]
[86 100]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
