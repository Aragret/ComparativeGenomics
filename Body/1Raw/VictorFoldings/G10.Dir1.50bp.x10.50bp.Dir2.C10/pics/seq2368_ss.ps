%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAxxxxxxxxxxCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.26412964 143.80131531]
[120.93321991 132.92601013]
[110.60231781 122.05068970]
[100.27141571 111.17537689]
[89.82940674 100.40670013]
[79.27739716 89.74578857]
[68.72537994 79.08488464]
[58.17336273 68.42397308]
[47.62134933 57.76306534]
[37.06933212 47.10215759]
[26.51731873 36.44124603]
[15.85640907 25.88923264]
[5.08773041 15.44722366]
[-6.09242487 25.45687103]
[-17.95080376 34.65294266]
[-30.42832947 42.98962784]
[-43.46283722 50.42538834]
[-56.98938751 56.92318344]
[-70.94059753 62.45063782]
[-85.24694824 66.98021698]
[-99.83718109 70.48934937]
[-114.63860321 72.96056366]
[-129.57746887 74.38153076]
[-144.57936096 74.74518585]
[-159.56953430 74.04971313]
[-174.47331238 72.29857635]
[-189.21643066 69.50049591]
[-203.72544861 65.66941833]
[-217.92808533 60.82442856]
[-231.75358582 54.98966217]
[-245.13307190 48.19419098]
[-257.99987793 40.47187042]
[-270.28991699 31.86116600]
[-281.94192505 22.40498352]
[-292.89788818 12.15043163]
[-303.10321045 1.14859712]
[-312.50704956 -10.54570770]
[-321.06253052 -22.87422180]
[-328.72708130 -35.77552414]
[-335.46249390 -49.18534088]
[-341.23519897 -63.03686905]
[-346.01644897 -77.26109314]
[-349.78244019 -91.78714752]
[-352.51437378 -106.54267120]
[-354.19866943 -121.45414734]
[-354.82690430 -136.44728088]
[-354.39599609 -151.44738770]
[-352.90805054 -166.37974548]
[-350.37048340 -181.16992188]
[-346.79595947 -195.74427795]
[-342.20227051 -210.03018188]
[-336.61233521 -223.95646667]
[-330.05392456 -237.45373535]
[-322.55981445 -250.45477295]
[-314.16723633 -262.89477539]
[-304.91809082 -274.71182251]
[-294.85839844 -285.84695435]
[-284.03833008 -296.24478149]
[-272.51174927 -305.85345459]
[-260.33605957 -314.62512207]
[-247.57199097 -322.51608276]
[-234.28306580 -329.48699951]
[-220.53553772 -335.50317383]
[-206.39787292 -340.53460693]
[-191.94052124 -344.55624390]
[-177.23548889 -347.54806519]
[-162.35604858 -349.49514771]
[-147.37632751 -350.38778687]
[-132.37094116 -350.22155762]
[-117.41467285 -348.99728394]
[-102.58202362 -346.72103882]
[-87.94687653 -343.40417480]
[-73.58216095 -339.06323242]
[-59.55943680 -333.71981812]
[-45.94856262 -327.40054321]
[-32.81734848 -320.13693237]
[-20.23121262 -311.96514893]
[-8.25286293 -302.92590332]
[3.05802679 -293.06420898]
[13.64510536 -282.42922974]
[23.45562744 -271.07394409]
[32.44071960 -259.05493164]
[40.55561447 -246.43202209]
[47.75988388 -233.26815796]
[54.01763916 -219.62890625]
[59.29770279 -205.58219910]
[63.57376862 -191.19802856]
[66.82453156 -176.54806519]
[69.03380585 -161.70529175]
[70.19056702 -146.74365234]
[70.28907013 -131.73767090]
[69.32881927 -116.76213074]
[67.31459045 -101.89163208]
[64.25643158 -87.20025635]
[60.16956711 -72.76119232]
[55.07435989 -58.64638519]
[48.99620056 -44.92615128]
[41.96536255 -31.66884041]
[34.01688004 -18.94050598]
[25.19034576 -6.80455637]
[15.52973938 4.67854452]
[26.29841805 15.12055397]
[33.33318329 17.53390884]
[37.17822647 25.88923264]
[47.73024368 36.55014038]
[58.28225708 47.21105194]
[68.83427429 57.87195969]
[79.38628387 68.53286743]
[89.93830109 79.19377899]
[100.49031830 89.85468292]
[107.99592590 92.93815613]
[111.14672852 100.84447479]
[121.47763824 111.71978760]
[131.80853271 122.59510803]
[142.13943481 133.47041321]
[154.52159119 124.94817352]
[168.08453369 118.46796417]
[182.49426270 114.18936157]
[197.39590454 112.21773529]
[212.42251587 112.60164642]
[227.20405579 115.33162689]
[241.37649536 120.34045410]
[254.59083557 127.50478363]
[266.52166748 136.64817810]
[276.87518311 147.54550171]
[285.39639282 159.92835999]
[291.87548828 173.49183655]
[296.15289307 187.90190125]
[298.12329102 202.80371094]
[297.73815918 217.83030701]
[295.00695801 232.61160278]
[289.99694824 246.78363037]
[282.83154297 259.99737549]
[273.68716431 271.92745972]
[262.78897095 282.28005981]
[250.40542603 290.80026245]
[236.84141541 297.27825928]
[222.43098450 301.55447388]
[207.52900696 303.52362061]
[192.50245667 303.13723755]
[177.72137451 300.40481567]
[163.54975891 295.39364624]
[150.33659363 288.22714233]
[138.40728760 279.08178711]
[128.05557251 268.18276978]
[119.53639221 255.79849243]
[113.05953979 242.23394775]
[108.78450012 227.82316589]
[106.81656647 212.92103577]
[107.20419312 197.89451599]
[109.93783569 183.11366272]
[114.95017242 168.94245911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 110]
[6 109]
[7 108]
[8 107]
[9 106]
[10 105]
[11 104]
[12 102]
[13 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
