%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAAxxxxxxxxxxACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.61504364 292.80453491]
[106.61504364 277.80453491]
[106.61504364 262.80453491]
[106.61504364 247.80455017]
[106.61504364 232.80455017]
[106.61504364 217.80455017]
[106.61504364 202.80455017]
[106.61504364 187.80455017]
[106.61504364 172.80455017]
[106.61504364 157.80455017]
[82.79308319 153.78915405]
[63.34891129 140.69528198]
[51.42498779 121.34864807]
[48.65041351 99.51401520]
[33.83265686 97.18290710]
[19.01489830 94.85180664]
[4.19713974 92.52070618]
[-1.05291677 99.94573975]
[-8.41618156 105.20731354]
[-17.05780792 107.74414825]
[-26.00950813 107.30191040]
[-34.27803421 103.95840454]
[-40.95538712 98.11175537]
[-45.31852722 90.43320465]
[-46.90759277 81.79014587]
[-61.40318680 77.93299103]
[-75.89878082 74.07582855]
[-90.39437866 70.21866608]
[-104.88997650 66.36151123]
[-119.38557434 62.50434875]
[-134.31988525 61.10204697]
[-149.28013611 62.19335556]
[-164.24037170 63.28466797]
[-175.77493286 74.43517303]
[-191.66522217 72.22651672]
[-199.72158813 58.35300064]
[-193.76387024 43.45718765]
[-178.36231995 38.96587753]
[-165.33169556 48.32441711]
[-150.37144470 47.23310852]
[-135.41119385 46.14179611]
[-148.61833191 39.03043747]
[-158.66833496 27.89501953]
[-164.39268494 14.03025150]
[-165.12582397 -0.95182139]
[-160.78251648 -15.30924606]
[-151.86775208 -27.37269783]
[-139.41802979 -35.73956680]
[-124.88088226 -39.43704987]
[-109.94652557 -38.03523636]
[-96.35137177 -31.69711876]
[-85.67610931 -21.15962410]
[-79.16194916 -7.64793587]
[-77.56628418 7.26695061]
[-81.07463837 21.85089493]
[-89.27909851 34.40823364]
[-101.22574615 43.47893906]
[-115.52841187 48.00875473]
[-101.03282166 51.86591339]
[-86.53722382 55.72307205]
[-72.04162598 59.58023071]
[-57.54602814 63.43738937]
[-43.05043030 67.29454803]
[-25.86105537 54.89536667]
[-4.80973959 59.13706207]
[6.52824354 77.70294189]
[21.34600067 80.03404999]
[36.16376114 82.36515045]
[50.98151779 84.69625854]
[53.56538391 78.07187653]
[57.03953171 71.86791229]
[61.33734894 66.20332336]
[66.37643433 61.18670654]
[72.06017303 56.91424561]
[78.27959442 53.46785736]
[84.91545868 50.91362000]
[91.84053802 49.30049896]
[98.92205048 48.65942764]
[106.02423096 49.00269699]
[113.01091003 50.32372284]
[119.74813843 52.59718323]
[126.10673523 55.77947998]
[131.96479797 59.80960846]
[137.21000671 64.61029053]
[149.47238159 55.97117615]
[161.73474121 47.33206177]
[173.99711609 38.69294739]
[177.16488647 32.77072144]
[182.12120056 29.82686424]
[186.95413208 29.96204185]
[199.56526184 21.84049988]
[212.17639160 13.71895790]
[209.42884827 -1.23160827]
[212.61666870 -16.09452248]
[221.25373840 -28.60330009]
[234.02294922 -36.85044098]
[248.97712708 -39.57831573]
[263.83584595 -36.37094498]
[276.33322144 -27.71742821]
[284.56356812 -14.93736553]
[287.27175903 0.02037768]
[284.04486084 14.87485409]
[275.37490845 27.36086273]
[262.58404541 35.57437897]
[247.62274170 38.26290512]
[232.77252197 35.01645279]
[220.29792786 26.33008575]
[207.68679810 34.45162964]
[195.07566833 42.57316971]
[182.63623047 50.95531464]
[170.37385559 59.59442902]
[158.11149597 68.23354340]
[145.84912109 76.87266541]
[154.76605225 100.29724121]
[151.65969849 126.76565552]
[165.67640686 132.10716248]
[179.69313049 137.44868469]
[193.70983887 142.79019165]
[207.72654724 148.13171387]
[222.89582825 142.90939331]
[236.35887146 151.63442993]
[237.78797913 167.61369324]
[226.08686829 178.58927917]
[210.23162842 176.14166260]
[202.38504028 162.14842224]
[188.36831665 156.80690002]
[174.35160828 151.46539307]
[160.33489990 146.12388611]
[146.31819153 140.78236389]
[140.14239502 145.03791809]
[149.88237000 156.44549561]
[159.62232971 167.85308838]
[173.23716736 174.14883423]
[177.60733032 188.49810791]
[169.81314087 201.31413269]
[155.06187439 204.03450012]
[143.20890808 194.84173584]
[142.17359924 179.87648010]
[134.98220825 166.71273804]
[127.79082489 153.54901123]
[121.61504364 157.80455017]
[121.61504364 172.80455017]
[121.61504364 187.80455017]
[121.61504364 202.80455017]
[121.61504364 217.80455017]
[121.61504364 232.80455017]
[121.61504364 247.80455017]
[121.61504364 262.80453491]
[121.61504364 277.80453491]
[121.61504364 292.80453491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 69]
[15 68]
[16 67]
[17 66]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 41]
[32 40]
[33 39]
[84 113]
[85 112]
[86 111]
[87 110]
[90 109]
[91 108]
[92 107]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
