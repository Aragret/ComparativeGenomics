%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAxxxxxxxxxxUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.95766449 357.04772949]
[123.95766449 342.04772949]
[123.95766449 327.04772949]
[123.95766449 312.04772949]
[123.95766449 297.04772949]
[123.95766449 282.04772949]
[123.95766449 267.04772949]
[123.95766449 252.04772949]
[123.95766449 237.04772949]
[123.95766449 222.04772949]
[121.93532562 207.18467712]
[117.92758942 192.72999573]
[113.91984558 178.27529907]
[103.06332397 168.07798767]
[106.83217621 152.71223450]
[102.82443237 138.25755310]
[98.81669617 123.80286407]
[78.40646362 110.08442688]
[80.98870850 85.62824249]
[72.47762299 73.27667236]
[63.96653366 60.92510223]
[55.20032501 48.75326538]
[46.18279648 36.76642990]
[37.16526413 24.77959824]
[28.14773560 12.79276562]
[19.13020515 0.80593318]
[10.11267567 -11.18089962]
[-2.67513037 -3.31918883]
[-16.14293480 3.31049395]
[-30.17238235 8.64988613]
[-44.64017487 12.65206337]
[-59.41917038 15.28185368]
[-74.37948608 16.51614571]
[-89.38964081 16.34409332]
[-104.31773376 14.76720810]
[-119.03256226 11.79934692]
[-133.40481567 7.46659374]
[-147.30819702 1.80702424]
[-160.62049866 -5.12962341]
[-173.22473145 -13.28238773]
[-185.01014709 -22.57962036]
[-195.87315369 -32.93961716]
[-205.71829224 -44.27132797]
[-214.45904541 -56.47517395]
[-222.01858521 -69.44389343]
[-228.33049011 -83.06352997]
[-233.33927917 -97.21437836]
[-237.00093079 -111.77207947]
[-239.28327942 -126.60870361]
[-240.16625977 -141.59385681]
[-239.64210510 -156.59585571]
[-237.71543884 -171.48283386]
[-234.40318298 -186.12399292]
[-229.73445129 -200.39064026]
[-223.75025940 -214.15740967]
[-216.50321960 -227.30331421]
[-208.05699158 -239.71282959]
[-198.48582458 -251.27687073]
[-187.87384033 -261.89385986]
[-176.31427002 -271.47042847]
[-163.90872192 -279.92245483]
[-150.76622009 -287.17568970]
[-137.00225830 -293.16632080]
[-122.73780060 -297.84173584]
[-108.09819794 -301.16085815]
[-93.21212006 -303.09451294]
[-78.21037292 -303.62570190]
[-63.22480774 -302.74975586]
[-48.38711548 -300.47436523]
[-33.82769775 -296.81951904]
[-19.67450142 -291.81738281]
[-6.05191183 -285.51187134]
[6.92035580 -277.95840454]
[19.12829590 -269.22338867]
[30.46462440 -259.38354492]
[40.82971191 -248.52540588]
[50.13247299 -236.74435425]
[58.29114532 -224.14393616]
[65.23403168 -210.83488464]
[70.90012360 -196.93417358]
[75.23961639 -182.56394958]
[78.21437836 -167.85050964]
[79.79826355 -152.92315674]
[79.97734833 -137.91308594]
[78.75007629 -122.95219421]
[76.12721252 -108.17196655]
[72.13182068 -93.70230103]
[66.79901123 -79.67034912]
[60.17564011 -66.19944000]
[52.31992722 -53.40794754]
[43.30090714 -41.40829468]
[33.19783783 -30.30593109]
[22.09950829 -20.19842911]
[31.11703873 -8.21159649]
[40.13456726 3.77523589]
[49.15209579 15.76206875]
[58.16962814 27.74890137]
[67.18715668 39.73573303]
[71.76776123 41.28286362]
[75.39764404 45.76117325]
[76.31810760 52.41400909]
[84.82919312 64.76557922]
[93.34028625 77.11715698]
[98.65044403 76.20598602]
[104.02957153 76.51087952]
[109.20276642 78.01624298]
[113.90561676 80.64514923]
[117.89778900 84.26324463]
[120.97524261 88.68560791]
[122.98069763 93.68621826]
[137.96041870 94.46606445]
[152.94012451 95.24591064]
[167.29553223 87.31781769]
[181.19752502 96.01647186]
[180.34494019 112.39344025]
[165.61483765 119.60150146]
[152.16027832 110.22562408]
[137.18057251 109.44577789]
[122.20085144 108.66593170]
[118.58856201 114.91448212]
[113.27138519 119.79512024]
[117.27912140 134.24980164]
[121.28686523 148.70449829]
[132.43005371 159.93569946]
[128.37454224 174.26756287]
[132.38227844 188.72224426]
[136.39001465 203.17694092]
[141.28916931 188.99955750]
[151.44825745 177.96356201]
[165.17248535 171.91000366]
[180.17236328 171.84875488]
[193.94555664 177.79003906]
[204.19441223 188.74270630]
[209.20918274 202.87962341]
[208.15327454 217.84240723]
[201.20286560 231.13494873]
[189.51741028 240.53974915]
[175.04632568 244.48788452]
[160.20372009 242.32070923]
[147.46563721 234.39974976]
[138.95765686 222.04772949]
[138.95765686 237.04772949]
[138.95765686 252.04772949]
[138.95765686 267.04772949]
[138.95765686 282.04772949]
[138.95765686 297.04772949]
[138.95765686 312.04772949]
[138.95765686 327.04772949]
[138.95765686 342.04772949]
[138.95765686 357.04772949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[12 126]
[13 125]
[15 123]
[16 122]
[17 121]
[19 103]
[20 102]
[21 101]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
