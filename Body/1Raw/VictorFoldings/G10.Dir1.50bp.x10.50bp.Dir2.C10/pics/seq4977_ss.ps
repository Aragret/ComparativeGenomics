%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.68596649 280.56887817]
[86.68596649 265.56887817]
[86.68596649 250.56887817]
[86.68596649 235.56887817]
[86.68596649 220.56887817]
[86.68596649 205.56887817]
[86.68596649 190.56887817]
[86.68596649 175.56887817]
[86.68596649 160.56887817]
[86.68596649 145.56887817]
[80.52032471 141.29864502]
[79.28960419 156.24807739]
[65.72761536 162.65684509]
[53.39651871 154.11611938]
[54.62756348 139.16673279]
[68.18904114 132.75819397]
[62.02339935 128.48796082]
[47.98142242 133.76269531]
[33.93944550 139.03744507]
[19.89747047 144.31217957]
[5.85549355 149.58692932]
[6.03594589 164.74420166]
[1.01849020 179.04808044]
[-8.59099102 190.77130127]
[-21.63210678 198.49819946]
[-36.53007889 201.29574585]
[-51.48590469 198.82611084]
[-64.69359589 191.38751221]
[-74.55825806 179.87820435]
[-79.88867950 165.68798828]
[-80.04119873 150.53039551]
[-74.99739075 136.23577881]
[-65.36632538 124.53030396]
[-52.31099319 116.82743835]
[-37.40789032 114.05735779]
[-22.45664215 116.55455017]
[-9.26268291 124.01747894]
[0.58075213 135.54495239]
[14.62272835 130.27020264]
[28.66470528 124.99546814]
[42.70668030 119.72072601]
[56.74865723 114.44598389]
[60.74570847 83.53580475]
[82.65565491 64.47334290]
[109.57141876 64.77566528]
[116.39498901 51.41756439]
[123.21856689 38.05946350]
[130.04214478 24.70136452]
[136.86572266 11.34326553]
[127.07265472 -0.24861413]
[122.47612762 -14.66786957]
[123.74688721 -29.70777702]
[130.66027832 -43.07911301]
[142.13513184 -52.75859833]
[156.40280151 -57.29503632]
[171.27966309 -56.02681732]
[178.10322571 -69.38491821]
[184.92680359 -82.74301910]
[191.75038147 -96.10111237]
[180.80320740 -112.36178589]
[180.25169373 -131.84414673]
[190.14692688 -148.50523376]
[207.31828308 -157.24133301]
[207.62625122 -172.23815918]
[207.78025818 -187.23738098]
[207.78025818 -202.23738098]
[207.78025818 -217.23738098]
[200.04295349 -231.03755188]
[207.78025818 -243.76481628]
[193.72306824 -249.54962158]
[182.95318604 -260.27706909]
[177.11296082 -274.31130981]
[177.09297180 -289.51223755]
[182.89625549 -303.56179810]
[193.63786316 -314.31756592]
[207.67977905 -320.13934326]
[222.88072205 -320.13934326]
[236.92263794 -314.31756592]
[247.66424561 -303.56179810]
[253.46754456 -289.51223755]
[253.44754028 -274.31130981]
[247.60731506 -260.27706909]
[236.83743286 -249.54962158]
[222.78025818 -243.76481628]
[230.51754761 -231.03755188]
[222.78025818 -217.23738098]
[222.78025818 -202.23738098]
[222.78025818 -187.23738098]
[225.94480896 -180.50701904]
[222.62309265 -171.93019104]
[222.31510925 -156.93334961]
[227.63006592 -155.16668701]
[232.58914185 -152.56340027]
[237.06170654 -149.19204712]
[240.92987061 -145.14151001]
[254.35731506 -151.82757568]
[267.78475952 -158.51365662]
[281.21221924 -165.19972229]
[294.63967896 -171.88580322]
[308.06710815 -178.57188416]
[312.85131836 -193.63464355]
[326.92346191 -200.82841492]
[341.93481445 -195.88522339]
[348.97940063 -181.73780823]
[343.87777710 -166.77955627]
[329.65667725 -159.88494873]
[314.75320435 -165.14442444]
[301.32574463 -158.45835876]
[287.89828491 -151.77227783]
[274.47085571 -145.08619690]
[261.04339600 -138.40013123]
[247.61595154 -131.71405029]
[248.28125000 -117.50012207]
[243.14289856 -104.15970612]
[233.02101135 -93.97064209]
[219.59147644 -88.69565582]
[205.10848999 -89.27754211]
[198.28491211 -75.91944122]
[191.46133423 -62.56134033]
[184.63775635 -49.20324326]
[194.38496399 -37.89301300]
[199.07203674 -23.67412949]
[197.95518494 -8.70357513]
[191.17352295 4.73505211]
[179.73268127 14.57988834]
[165.35574341 19.30713081]
[150.22381592 18.16683960]
[143.40023804 31.52494049]
[136.57666016 44.88303757]
[129.75309753 58.24113846]
[122.92951202 71.59923553]
[128.74903870 76.29800415]
[133.59178162 82.19660950]
[137.20945740 89.08899689]
[139.39791870 96.71771240]
[140.00767517 104.78341675]
[138.95248413 112.95662689]
[136.21536255 120.89119720]
[131.85173035 128.23892212]
[125.98938751 134.66474915]
[118.82540894 139.86190796]
[110.61973572 143.56619263]
[101.68596649 145.56887817]
[101.68596649 160.56887817]
[101.68596649 175.56887817]
[101.68596649 190.56887817]
[101.68596649 205.56887817]
[101.68596649 220.56887817]
[101.68596649 235.56887817]
[101.68596649 250.56887817]
[101.68596649 265.56887817]
[101.68596649 280.56887817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 42]
[18 41]
[19 40]
[20 39]
[21 38]
[45 131]
[46 130]
[47 129]
[48 128]
[49 127]
[56 120]
[57 119]
[58 118]
[59 117]
[63 91]
[64 90]
[65 88]
[66 87]
[67 86]
[69 84]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
