%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGAxxxxxxxxxxUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.40539551 290.64117432]
[104.40539551 275.64117432]
[104.40539551 260.64117432]
[104.40539551 245.64117432]
[104.40539551 230.64117432]
[104.40539551 215.64117432]
[104.40539551 200.64117432]
[104.40539551 185.64117432]
[104.40539551 170.64117432]
[104.40539551 155.64117432]
[75.74880219 147.58885193]
[56.49267578 126.62625122]
[51.39525604 99.94583130]
[36.57749557 97.61472321]
[21.75973892 95.28362274]
[6.94198036 92.95251465]
[-8.05720806 92.79647827]
[-22.92025566 94.81881714]
[-37.78330231 96.84114838]
[-52.64634705 98.86347961]
[-67.46410370 101.19458771]
[-82.23016357 103.83345032]
[-96.99621582 106.47231293]
[-103.83523560 120.27572632]
[-117.33300018 127.32296753]
[-132.21621704 125.09726715]
[-142.80818176 114.65943909]
[-157.57424927 117.29830933]
[-172.34030151 119.93717194]
[-187.10635376 122.57603455]
[-201.87240601 125.21489716]
[-214.05490112 136.19300842]
[-229.56784058 130.87504578]
[-232.45285034 114.73166656]
[-219.74208069 104.36979675]
[-204.51127625 110.44884491]
[-189.74522400 107.80998230]
[-174.97915649 105.17111206]
[-160.21310425 102.53224945]
[-145.44705200 99.89338684]
[-139.12596130 86.43300629]
[-125.93489838 79.19010162]
[-110.83173370 81.12602997]
[-99.63507843 91.70626068]
[-84.86902618 89.06739807]
[-70.10297394 86.42852783]
[-66.65547943 83.03879547]
[-61.02112198 81.82006073]
[-54.66868210 84.00043488]
[-39.80563736 81.97810364]
[-24.94258881 79.95576477]
[-10.07954216 77.93343353]
[-23.56671906 71.36867523]
[-33.59475327 60.21347427]
[-38.69118500 46.10580063]
[-38.10767365 31.11715508]
[-31.92990685 17.44838905]
[-21.06498909 7.10655308]
[-7.10827112 1.61018813]
[7.89091587 1.76635182]
[21.73016930 7.55211401]
[32.37740707 18.11792374]
[38.26924515 31.91235161]
[38.54055405 46.90989685]
[33.15149689 60.90840149]
[22.89337540 71.85239410]
[9.27308464 78.13475800]
[24.09084320 80.46585846]
[38.90859985 82.79696655]
[53.72636032 85.12806702]
[56.36419296 77.65097046]
[60.21207428 70.64055634]
[65.18755341 64.29288483]
[71.17639923 58.78946304]
[78.03515625 54.29209137]
[85.59453583 50.93816376]
[93.66361237 48.83653259]
[102.03457642 48.06412888]
[110.48815155 48.66334534]
[118.79929352 50.64035797]
[126.74319458 53.96437836]
[135.50939941 41.79254150]
[144.27560425 29.62070274]
[153.04182434 17.44886589]
[145.70802307 4.06312418]
[144.91691589 -11.17947865]
[150.82560730 -25.25251007]
[162.26089478 -35.36175919]
[176.95230103 -39.50003052]
[191.98283386 -36.84566498]
[204.36817932 -27.92568779]
[211.64921570 -14.51116943]
[212.38027954 0.73443002]
[206.41622925 14.78408432]
[194.94120789 24.84822464]
[180.23362732 28.92860985]
[165.21365356 26.21507454]
[156.44744873 38.38690948]
[147.68124390 50.55874634]
[138.91503906 62.73058319]
[147.68124390 74.90242004]
[162.00384521 70.44560242]
[176.32643127 65.98879242]
[190.64903259 61.53197479]
[203.97637939 51.05254745]
[217.73562622 60.95805740]
[212.02618408 76.92171478]
[195.10585022 75.85456848]
[180.78324890 80.31138611]
[166.46064758 84.76820374]
[152.13806152 89.22502136]
[153.84706116 98.01384735]
[154.06703186 107.07170868]
[152.75624084 116.14513397]
[149.91622925 124.97432709]
[163.81878662 130.60627747]
[177.77917480 136.09330750]
[191.79588318 141.43482971]
[205.81260681 146.77633667]
[220.98188782 141.55403137]
[234.44491577 150.27905273]
[235.87402344 166.25833130]
[224.17291260 177.23391724]
[208.31767273 174.78628540]
[200.47108459 160.79304504]
[186.45437622 155.45153809]
[172.43766785 150.11003113]
[165.01936340 150.67070007]
[158.18682861 144.50883484]
[144.28427124 138.87687683]
[138.06455994 143.06794739]
[147.56509399 154.67570496]
[157.06562805 166.28344727]
[169.49076843 174.68676758]
[169.47799683 189.68676758]
[157.03855896 198.06890869]
[143.13121033 192.44882202]
[140.00787354 177.77757263]
[132.81649780 164.61383057]
[125.62511444 151.45010376]
[119.40539551 155.64117432]
[119.40539551 170.64117432]
[119.40539551 185.64117432]
[119.40539551 200.64117432]
[119.40539551 215.64117432]
[119.40539551 230.64117432]
[119.40539551 245.64117432]
[119.40539551 260.64117432]
[119.40539551 275.64117432]
[119.40539551 290.64117432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 70]
[14 69]
[15 68]
[16 67]
[17 52]
[18 51]
[19 50]
[20 49]
[21 46]
[22 45]
[23 44]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[81 100]
[82 99]
[83 98]
[84 97]
[101 111]
[102 110]
[103 109]
[104 108]
[115 130]
[116 129]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
