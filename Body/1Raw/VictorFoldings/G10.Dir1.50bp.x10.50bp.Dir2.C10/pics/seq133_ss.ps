%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUxxxxxxxxxxUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 286.35974121]
[92.50000000 271.35974121]
[92.50000000 256.35974121]
[92.50000000 241.35975647]
[92.50000000 226.35975647]
[92.50000000 211.35975647]
[92.50000000 196.35975647]
[92.50000000 181.35975647]
[92.50000000 166.35975647]
[92.50000000 151.35975647]
[75.62173462 145.82330322]
[61.59863281 134.92004395]
[49.15919113 143.30218506]
[36.71974945 151.68432617]
[24.28030968 160.06646729]
[23.60421753 175.45637512]
[14.10671520 187.35809326]
[-0.40615496 191.33811951]
[-14.31329250 186.07223511]
[-26.75273323 194.45437622]
[-29.52911949 210.01287842]
[-42.54144669 218.98254395]
[-58.06973267 216.04182434]
[-66.90132141 202.93539429]
[-63.79658508 187.43905640]
[-50.59751129 178.74653625]
[-35.13487625 182.01493835]
[-22.69543457 173.63279724]
[-22.35442543 158.76599121]
[-13.21653271 146.80928040]
[1.38038683 142.47531128]
[15.89816666 147.62702942]
[28.33760643 139.24488831]
[40.77704620 130.86274719]
[53.21648788 122.48059845]
[48.23467636 103.79810333]
[50.43628693 84.58854675]
[59.51581192 67.51762390]
[74.21328735 54.95424652]
[92.48916626 48.64182663]
[111.80731201 49.45633698]
[117.29434204 35.49594879]
[122.63585663 21.47923470]
[127.83126831 7.40771484]
[124.27651215 -7.16498804]
[113.18519592 -17.26363754]
[102.09387970 -27.36228752]
[91.00256348 -37.46093750]
[79.91124725 -47.55958557]
[68.81993103 -57.65823746]
[57.72861481 -67.75688171]
[46.63730240 -77.85553741]
[35.54598618 -87.95418549]
[19.41765404 -90.92216492]
[14.17952824 -106.46224976]
[25.22014427 -118.58811951]
[41.18186188 -114.82572937]
[45.64463425 -99.04550171]
[56.73595047 -88.94685364]
[67.82726288 -78.84819794]
[78.91857910 -68.74954987]
[90.00989532 -58.65090179]
[101.10121155 -48.55225372]
[112.19252777 -38.45360184]
[123.28384399 -28.35495186]
[134.37515259 -18.25630379]
[129.48316956 -32.43616104]
[118.87911987 -43.04532242]
[112.67645264 -56.70280838]
[111.66535950 -71.66869354]
[115.97465515 -86.03636169]
[125.05534363 -97.97541809]
[137.75056458 -105.96486664]
[152.44300842 -108.98685455]
[167.26086426 -106.65640259]
[180.31640625 -99.27040863]
[189.94636536 -87.76981354]
[194.92395020 -73.61977386]
[194.61500549 -58.62295151]
[189.05888367 -44.68991089]
[178.96343994 -33.59568024]
[165.61123657 -26.75255585]
[156.60179138 -14.75964737]
[170.25804138 -20.96505356]
[183.91427612 -27.17046165]
[197.50523376 -33.51758957]
[211.02941895 -40.00575638]
[210.04321289 -56.02336121]
[215.25407410 -71.16107941]
[225.83958435 -83.12021637]
[240.16355896 -90.09669495]
[256.02886963 -91.05317688]
[271.01455688 -85.87322235]
[282.84512329 -75.37451935]
[296.23141479 -82.14263153]
[309.61767578 -88.91075134]
[323.00396729 -95.67886353]
[336.39025879 -102.44697571]
[349.77655029 -109.21509552]
[363.16284180 -115.98320770]
[374.56982422 -128.52581787]
[389.78002930 -121.03675842]
[386.79425049 -104.34779358]
[369.93093872 -102.59692383]
[356.54464722 -95.82881165]
[343.15838623 -89.06069183]
[329.77209473 -82.29257965]
[316.38580322 -75.52446747]
[302.99951172 -68.75634766]
[289.61325073 -61.98823547]
[291.20147705 -48.01177597]
[287.90634155 -34.30598450]
[280.10540771 -22.52901840]
[268.72271729 -14.11286926]
[255.11917114 -10.08926392]
[240.93002319 -10.96321011]
[227.86820984 -16.64971542]
[217.51757812 -26.48156548]
[203.99339294 -19.99340057]
[199.29266357 -14.22722816]
[190.11968994 -13.51422024]
[176.46343994 -7.30881310]
[162.80720520 -1.10340619]
[141.90278625 12.60313034]
[136.70738220 26.67465019]
[137.34518433 34.08672333]
[131.25473022 40.98297882]
[125.76770020 54.94336700]
[133.83480835 60.63910675]
[140.67716980 67.75962067]
[146.04710388 76.04717255]
[149.75024414 85.20175934]
[151.65252686 94.89201355]
[151.68508911 104.76715851]
[149.84677124 114.46974945]
[146.20410156 123.64856720]
[140.88896179 131.97135925]
[134.09370422 139.13685608]
[126.06434631 144.88568115]
[117.09151459 149.00973511]
[107.50000000 151.35975647]
[107.50000000 166.35975647]
[107.50000000 181.35975647]
[107.50000000 196.35975647]
[107.50000000 211.35975647]
[107.50000000 226.35975647]
[107.50000000 241.35975647]
[107.50000000 256.35974121]
[107.50000000 271.35974121]
[107.50000000 286.35974121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 35]
[13 34]
[14 33]
[15 32]
[19 28]
[20 27]
[41 128]
[42 127]
[43 125]
[44 124]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[83 123]
[84 122]
[85 121]
[86 119]
[87 118]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
