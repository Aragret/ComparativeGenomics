%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAxxxxxxxxxxUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.25440979]
[92.50000000 234.25440979]
[92.50000000 219.25440979]
[92.50000000 204.25440979]
[92.50000000 189.25440979]
[92.50000000 174.25440979]
[92.50000000 159.25440979]
[92.50000000 144.25440979]
[92.50000000 129.25440979]
[92.50000000 114.25440216]
[85.68650818 111.11970520]
[65.24604034 101.71559906]
[53.85496902 111.47486877]
[42.46389389 121.23414612]
[31.07282066 130.99342346]
[34.55086136 145.89851379]
[30.69254494 160.70973206]
[20.38448715 172.02354431]
[5.99540520 177.24014282]
[-9.16819763 175.16078186]
[-21.62183380 166.26327515]
[-28.50375175 152.59222412]
[-28.23253632 137.28912354]
[-20.87051010 123.87050629]
[-8.10941219 115.41988373]
[7.11834908 113.87915039]
[21.31354523 119.60234833]
[32.70462036 109.84307098]
[44.09569550 100.08379364]
[55.48676682 90.32452393]
[77.43781281 82.08351898]
[94.83144379 89.09414673]
[97.58768463 74.34954834]
[100.34392548 59.60494995]
[95.27414703 44.61802673]
[105.21833038 33.52918625]
[107.97457123 18.78458977]
[109.97063446 3.91799188]
[111.20124817 -11.03144264]
[108.77602386 -19.90353775]
[112.61368561 -26.27413559]
[114.15097809 -41.19515228]
[115.68827057 -56.11616898]
[117.22556305 -71.03718567]
[118.76285553 -85.95819855]
[120.14688110 -100.89421082]
[121.37749481 -115.84365082]
[114.79845428 -130.23207092]
[123.55382538 -142.28166199]
[124.78443909 -157.23110962]
[126.01505280 -172.18054199]
[125.86105347 -187.17974854]
[124.32376099 -202.10076904]
[110.40585327 -208.44418335]
[101.58997345 -220.82066345]
[100.16217041 -235.84822083]
[106.40621948 -249.48156738]
[118.55413818 -258.10092163]
[117.01684570 -273.02194214]
[115.47955322 -287.94296265]
[113.78916168 -302.84741211]
[111.94583130 -317.73373413]
[110.10250854 -332.62002563]
[108.25918579 -347.50634766]
[106.41586304 -362.39263916]
[91.63697815 -365.76315308]
[78.90383911 -373.98770142]
[69.75402832 -386.07308960]
[65.29244232 -400.55999756]
[66.05783081 -415.69900513]
[71.95776367 -429.66204834]
[82.27980804 -440.76300049]
[95.77751923 -447.66137695]
[110.82098389 -449.52416992]
[125.59363556 -446.12643433]
[138.31159973 -437.87844849]
[147.43911743 -425.77618408]
[151.87399292 -411.28109741]
[151.08071899 -396.14352417]
[145.15505981 -382.19137573]
[134.81257629 -371.10946655]
[121.30216980 -364.23596191]
[123.14549255 -349.34967041]
[124.98881531 -334.46334839]
[126.83214569 -319.57705688]
[128.67546082 -304.69073486]
[132.64312744 -298.40026855]
[130.40057373 -289.48025513]
[131.93786621 -274.55923462]
[133.47515869 -259.63821411]
[147.12532043 -253.67680359]
[156.01794434 -241.60296631]
[157.68414307 -226.59997559]
[151.57693481 -212.68598938]
[139.24478149 -203.63806152]
[140.78207397 -188.71704102]
[149.31144714 -201.05598450]
[163.10086060 -206.95954895]
[177.91651917 -204.61512756]
[189.20953369 -194.74255371]
[193.51258850 -180.37301636]
[189.50450134 -165.91841125]
[178.41587830 -155.81680298]
[163.65130615 -153.16969299]
[149.74395752 -158.78982544]
[140.96449280 -170.94992065]
[139.73387146 -156.00048828]
[138.50326538 -141.05105591]
[145.17031860 -127.73191071]
[136.32693481 -114.61303711]
[135.09631348 -99.66360474]
[137.69804382 -92.69630432]
[133.68386841 -84.42090607]
[132.14657593 -69.49989319]
[130.60928345 -54.57887650]
[129.07199097 -39.65785980]
[127.53470612 -24.73684311]
[126.15068054 -9.80082989]
[124.92006683 5.14860439]
[138.05032349 -2.10373926]
[151.98623657 3.44516039]
[156.53781128 17.73792458]
[148.37692261 30.32362747]
[133.47084045 31.99954987]
[122.71916962 21.54083252]
[119.96292877 36.28543091]
[125.22985840 50.21772003]
[115.08852386 62.36119461]
[112.33228302 77.10578918]
[109.57603455 91.85038757]
[118.49552155 79.79042053]
[131.65122986 72.58434296]
[146.61630249 71.56146240]
[160.63017273 76.91045380]
[171.10766602 87.64460754]
[176.11601257 101.78379059]
[174.73133850 116.71974182]
[167.20906067 129.69723511]
[154.93681335 138.32231140]
[140.17845154 141.00389099]
[125.65646362 137.24732971]
[114.04970551 127.74557495]
[107.50000000 114.25440216]
[107.50000000 129.25440979]
[107.50000000 144.25440979]
[107.50000000 159.25440979]
[107.50000000 174.25440979]
[107.50000000 189.25440979]
[107.50000000 204.25440979]
[107.50000000 219.25440979]
[107.50000000 234.25440979]
[107.50000000 249.25440979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 30]
[13 29]
[14 28]
[15 27]
[32 130]
[33 129]
[34 128]
[36 126]
[37 125]
[38 119]
[39 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 111]
[47 110]
[49 108]
[50 107]
[51 106]
[52 96]
[53 95]
[58 90]
[59 89]
[60 88]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
