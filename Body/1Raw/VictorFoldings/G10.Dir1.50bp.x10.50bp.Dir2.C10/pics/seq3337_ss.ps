%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAxxxxxxxxxxAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.99766541 314.61480713]
[134.68560791 299.61804199]
[134.37355042 284.62127686]
[134.06149292 269.62454224]
[133.74943542 254.62777710]
[133.43737793 239.63102722]
[133.12532043 224.63427734]
[132.81326294 209.63751221]
[132.50120544 194.64076233]
[129.09823608 180.03187561]
[122.75110626 166.44091797]
[116.40397644 152.84997559]
[110.05684662 139.25901794]
[89.43585205 141.96849060]
[68.82906342 133.86752319]
[56.74907303 142.75987244]
[44.66908646 151.65222168]
[32.58909988 160.54457092]
[32.82060623 176.05992126]
[23.86070251 188.72875977]
[9.15464687 193.67968750]
[-5.64277840 189.00894165]
[-14.84166241 176.51254272]
[-14.90484619 160.99559021]
[-5.80803490 148.42468262]
[8.95086288 143.63359070]
[23.69674873 148.46458435]
[35.77673721 139.57223511]
[47.85672379 130.67988586]
[59.93671417 121.78753662]
[55.03516388 107.61097717]
[40.04246521 108.07901764]
[25.04977036 108.54705811]
[10.05707455 109.01509857]
[-4.93562174 109.48314667]
[-20.57837868 116.02076721]
[-31.19085312 102.79912567]
[-21.42374611 88.94127655]
[-5.40366411 94.49044800]
[9.58903217 94.02240753]
[24.58172798 93.55436707]
[39.57442474 93.08631897]
[54.56711960 92.61827850]
[58.44371796 82.44618988]
[64.50638580 73.66806793]
[72.32199097 66.73014069]
[81.37271881 61.95463181]
[91.08963776 59.52553177]
[100.88811493 59.48306656]
[103.98644257 44.80654144]
[107.08476257 30.13001633]
[110.18308258 15.45349026]
[106.02519989 1.04127443]
[95.58538055 -9.72953415]
[85.14556885 -20.50034332]
[69.78013611 -27.66551590]
[72.41171265 -44.41398239]
[89.23413849 -46.52168274]
[95.91638184 -30.94015503]
[106.35619354 -20.16934586]
[116.79600525 -9.39853764]
[124.19235992 -10.64109707]
[129.43650818 -24.69452667]
[138.98506165 -13.12621593]
[146.38142395 -14.36877537]
[152.72854614 -27.95972633]
[159.07568359 -41.55067825]
[165.42280579 -55.14162827]
[171.76994324 -68.73258209]
[159.49502563 -77.42546844]
[148.96969604 -88.17057037]
[140.53231812 -100.62248993]
[134.45408630 -114.38094330]
[130.93041992 -129.00364685]
[130.07456970 -144.02055359]
[131.91404724 -158.94891357]
[136.38973999 -173.30885315]
[143.35775757 -186.63876343]
[152.59410095 -198.51014709]
[163.80189514 -208.54136658]
[176.62080383 -216.40997314]
[190.63879395 -221.86303711]
[205.40522766 -224.72523499]
[220.44543457 -224.90458679]
[235.27590942 -222.39530945]
[249.41995239 -217.27807617]
[262.42285156 -209.71737671]
[273.86663818 -199.95626831]
[283.38345337 -188.30851746]
[290.66735840 -175.14854431]
[295.48419189 -160.89941406]
[297.67913818 -146.01916504]
[297.18161011 -130.98611450]
[294.00762939 -116.28354645]
[288.25921631 -102.38407135]
[280.12115479 -89.73449707]
[269.85504150 -78.74146271]
[257.79092407 -69.75833893]
[244.31655884 -63.07390976]
[229.86514282 -58.90303802]
[214.90119934 -57.37981033]
[199.90576172 -58.55318832]
[185.36088562 -62.38544846]
[179.01376343 -48.79449844]
[172.66662598 -35.20354843]
[166.31950378 -21.61259651]
[159.97236633 -8.02164555]
[145.49285889 16.46131897]
[124.85961151 18.55181313]
[121.76128387 33.22833633]
[118.66296387 47.90486526]
[115.56464386 62.58139038]
[129.60490417 72.32402039]
[138.38093567 86.98789215]
[140.33218384 103.96553802]
[135.11170959 120.23804474]
[123.64779663 132.91189575]
[129.99491882 146.50283813]
[136.34205627 160.09379578]
[142.68917847 173.68473816]
[144.33534241 158.77534485]
[150.04150391 144.90307617]
[159.36235046 133.15054321]
[171.57044983 124.43492889]
[185.71311951 119.43640137]
[200.68659973 118.54504395]
[215.32238770 121.83042908]
[228.47828674 129.03616333]
[239.12757874 139.59989929]
[246.43920898 152.69721985]
[249.84254456 167.30603027]
[249.07202148 182.28622437]
[244.18774414 196.46875000]
[235.57089233 208.74678040]
[223.89393616 218.16212463]
[210.06816101 223.97999573]
[195.17251587 225.74638367]
[180.36950684 223.32342529]
[166.81434631 216.90020752]
[155.56489563 206.97801208]
[147.49797058 194.32870483]
[147.81001282 209.32545471]
[148.12207031 224.32221985]
[148.43412781 239.31896973]
[148.74618530 254.31571960]
[149.05824280 269.31246948]
[149.37030029 284.30923462]
[149.68235779 299.30596924]
[149.99441528 314.30273438]
[152.58541870 333.51046753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 120]
[11 119]
[12 118]
[13 117]
[15 30]
[16 29]
[17 28]
[18 27]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 112]
[50 111]
[51 110]
[52 109]
[53 61]
[54 60]
[55 59]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
