%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGxxxxxxxxxxACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.88946533 533.39636230]
[81.88946533 518.39636230]
[81.88946533 503.39636230]
[81.88946533 488.39636230]
[81.88946533 473.39636230]
[81.88946533 458.39636230]
[81.88946533 443.39636230]
[81.88946533 428.39636230]
[81.88946533 413.39636230]
[81.88946533 398.39636230]
[68.16809082 395.38012695]
[55.37872314 389.55053711]
[44.09136963 381.16448975]
[34.80970001 370.59283447]
[27.94858742 358.30413818]
[23.81554985 344.84368896]
[22.59697533 330.80944824]
[24.34972000 316.82550049]
[28.99845886 303.51419067]
[36.33891678 291.46850586]
[46.04684067 281.22564697]
[57.69234085 273.24310303]
[70.75889587 267.87811279]
[84.66629028 265.37179565]
[85.29026794 250.38476562]
[78.08909607 237.34664917]
[86.39376831 223.88027954]
[87.01774597 208.89326477]
[87.64172363 193.90625000]
[80.44055176 180.86813354]
[88.74522400 167.40177917]
[89.36920166 152.41474915]
[86.48641968 145.55653381]
[90.16526794 137.12339783]
[91.10089874 122.15259552]
[79.81391907 112.74573517]
[76.17324829 98.51090240]
[81.55792999 84.84012604]
[93.92831421 76.91177368]
[94.86393738 61.94098282]
[95.79956818 46.97018814]
[93.19933319 38.14462280]
[96.91358185 31.69869423]
[98.16045380 16.75060844]
[99.40733337 1.80252075]
[86.46318817 -9.03727722]
[82.54607391 -25.28959274]
[89.00134277 -40.53083420]
[103.11434174 -48.85721970]
[104.04996490 -63.82801056]
[93.87106323 -75.61900330]
[95.03318787 -90.78819275]
[106.33683014 -100.41955566]
[107.27245331 -115.39035034]
[108.20808411 -130.36114502]
[109.14371490 -145.33193970]
[96.15043640 -137.83695984]
[82.11288452 -143.12345886]
[77.29136658 -157.32743835]
[85.21002960 -170.06692505]
[100.08097076 -172.03041077]
[111.03448486 -161.78332520]
[113.51960754 -176.57603455]
[116.00472260 -191.36874390]
[107.10520172 -204.15295410]
[109.83619690 -219.11946106]
[122.07884216 -227.52500916]
[124.56395721 -242.31771851]
[127.04907990 -257.11044312]
[113.45478058 -263.69613647]
[102.26747894 -273.84606934]
[94.39408875 -286.73739624]
[90.47286987 -301.32510376]
[90.82169342 -316.42657471]
[95.41227722 -330.81765747]
[103.87248993 -343.33172607]
[115.51650238 -352.95428467]
[129.40039062 -358.90530396]
[144.39862061 -360.70233154]
[159.29539490 -358.19973755]
[172.88307190 -351.60037231]
[184.06016541 -341.43920898]
[191.92059326 -328.53997803]
[195.82716370 -313.94836426]
[195.46318054 -298.84722900]
[190.85812378 -284.46075439]
[182.38534546 -271.95520020]
[170.73167419 -262.34436035]
[156.84182739 -256.40728760]
[141.84178162 -254.62530518]
[139.35665894 -239.83259583]
[136.87155151 -225.03990173]
[145.69543457 -213.09524536]
[143.38589478 -198.05793762]
[130.79742432 -188.88362122]
[128.31231689 -174.09091187]
[125.82719421 -159.29820251]
[124.11450195 -144.39630127]
[123.17887878 -129.42550659]
[122.24324799 -114.45471954]
[121.30761719 -99.48393250]
[131.32412720 -88.52011871]
[130.58853149 -73.32427979]
[119.02075958 -62.89237976]
[118.08512878 -47.92158890]
[129.14576721 -40.38115311]
[135.06893921 -28.25566292]
[134.20382690 -14.67987251]
[126.67026520 -3.22305918]
[114.35541534 3.04939532]
[113.10854340 17.99748230]
[111.86167145 32.94556808]
[110.77035522 47.90581894]
[109.83473206 62.87660980]
[108.89910126 77.84740448]
[120.18608093 87.25426483]
[123.82675171 101.48909760]
[118.44207001 115.15987396]
[106.07168579 123.08822632]
[105.13606262 138.05902100]
[104.35621643 153.03872681]
[103.73223877 168.02575684]
[110.88877869 182.13583374]
[102.62873840 194.53022766]
[102.00476074 209.51724243]
[101.38078308 224.50425720]
[108.53731537 238.61434937]
[100.27728271 251.00874329]
[99.65330505 265.99575806]
[115.06218719 270.35537720]
[128.98913574 278.24279785]
[140.64050293 289.20404053]
[149.35343933 302.60998535]
[154.63354492 317.69265747]
[156.18293762 333.58914185]
[153.91706848 349.39096069]
[147.96932983 364.19595337]
[138.68316650 377.15985107]
[126.59230042 387.54443359]
[112.39002228 394.75949097]
[96.88946533 398.39636230]
[96.88946533 413.39636230]
[96.88946533 428.39636230]
[96.88946533 443.39636230]
[96.88946533 458.39636230]
[96.88946533 473.39636230]
[96.88946533 488.39636230]
[96.88946533 503.39636230]
[96.88946533 518.39636230]
[96.88946533 533.39636230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[27 126]
[28 125]
[29 124]
[31 122]
[32 121]
[34 120]
[35 119]
[39 115]
[40 114]
[41 113]
[43 112]
[44 111]
[45 110]
[49 105]
[50 104]
[53 101]
[54 100]
[55 99]
[56 98]
[62 97]
[63 96]
[64 95]
[67 92]
[68 91]
[69 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
