%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGxxxxxxxxxxCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.54067993]
[92.50000000 278.54067993]
[92.50000000 263.54067993]
[92.50000000 248.54066467]
[92.50000000 233.54066467]
[92.50000000 218.54066467]
[92.50000000 203.54066467]
[92.50000000 188.54066467]
[92.50000000 173.54066467]
[92.50000000 158.54066467]
[76.48225403 154.13110352]
[62.32804489 145.43218994]
[51.15895081 133.13325500]
[43.86001205 118.20883942]
[41.00958633 101.84156036]
[42.83354950 85.32836151]
[49.18736267 69.97773743]
[59.56755829 57.00607300]
[73.15160370 47.44123459]
[88.86311340 42.04113388]
[87.92749023 27.07034302]
[86.99185944 12.09955215]
[86.05622864 -2.87123942]
[85.12060547 -17.84203148]
[84.18497467 -32.81282425]
[68.53707886 -34.83550262]
[53.57854843 -39.84039688]
[39.87194061 -47.63745499]
[27.93237877 -57.93165588]
[18.20818138 -70.33417511]
[11.06404781 -84.37705994]
[6.76737261 -99.53089142]
[5.47823381 -115.22473907]
[7.24343491 -130.86769104]
[11.99480629 -145.87104797]
[19.55183601 -159.67057800]
[29.62852669 -171.74760437]
[41.84421921 -181.64863586]
[55.73797226 -189.00228882]
[70.78595734 -193.53326416]
[69.22837830 -208.45216370]
[67.67079926 -223.37107849]
[66.11322021 -238.28999329]
[51.09976578 -238.27395630]
[36.16423798 -239.80172729]
[21.46496391 -242.85711670]
[7.15776300 -247.40771484]
[-6.60570192 -253.40530396]
[-19.67952919 -260.78631592]
[-31.92513084 -269.47247314]
[-43.21269226 -279.37170410]
[-53.42256546 -290.37908936]
[-62.44651413 -302.37792969]
[-70.18888092 -315.24105835]
[-76.56759644 -328.83209229]
[-81.51503754 -343.00695801]
[-84.97875977 -357.61538696]
[-86.92205048 -372.50256348]
[-87.32429504 -387.51062012]
[-86.18125153 -402.48049927]
[-83.50502014 -417.25350952]
[-79.32397461 -431.67306519]
[-73.68244171 -445.58624268]
[-66.64022064 -458.84564209]
[-58.27195740 -471.31063843]
[-48.66636658 -482.84912109]
[-37.92527390 -493.33877563]
[-26.16254044 -502.66842651]
[-13.50285530 -510.73913574]
[-0.08041833 -517.46533203]
[13.96248341 -522.77581787]
[28.47698975 -526.61419678]
[43.30923462 -528.93981934]
[58.30199051 -529.72802734]
[73.29632568 -528.97045898]
[88.13329315 -526.67517090]
[102.65561676 -522.86645508]
[116.70933533 -517.58465576]
[130.14549255 -510.88589478]
[142.82164001 -502.84106445]
[154.60340881 -493.53549194]
[165.36592102 -483.06781006]
[174.99507141 -471.54895020]
[183.38877869 -459.10107422]
[190.45808411 -445.85610962]
[196.12803650 -431.95446777]
[200.33853149 -417.54351807]
[203.04495239 -402.77600098]
[204.21858215 -387.80850220]
[203.84700012 -372.79962158]
[201.93414307 -357.90853882]
[198.50027466 -343.29302979]
[193.58180237 -329.10809326]
[187.23088074 -315.50405884]
[179.51481628 -302.62515259]
[170.51539612 -290.60787964]
[160.32803345 -279.57965088]
[149.06072998 -269.65737915]
[136.83290100 -260.94619751]
[123.77418518 -253.53851318]
[110.02300262 -247.51281738]
[95.72512817 -242.93298340]
[81.03212738 -239.84757996]
[82.58971405 -224.92866516]
[84.14729309 -210.00975037]
[85.70487213 -195.09083557]
[99.93034363 -194.01518250]
[113.74991608 -190.45948792]
[126.73455811 -184.53285217]
[138.48094177 -176.41798401]
[148.62393188 -166.36558533]
[156.84799194 -154.68663025]
[162.89697266 -141.74266052]
[166.58206177 -127.93473816]
[167.78773499 -113.69087219]
[166.47531128 -99.45283508]
[162.68428040 -85.66244507]
[156.53102112 -72.74784851]
[148.20527649 -61.11022949]
[137.96430969 -51.11134338]
[126.12496185 -43.06228256]
[113.05377960 -37.21379089]
[99.15576935 -33.74845123]
[100.09139252 -18.77765846]
[101.02702332 -3.80686784]
[101.96265411 11.16392326]
[102.89827728 26.13471603]
[103.83390808 41.10550690]
[116.98210144 43.47683334]
[129.26005554 48.74466705]
[140.03858948 56.63905716]
[148.76536560 66.75546265]
[154.99317932 78.57546234]
[158.40289307 91.49336243]
[158.81976318 104.84717560]
[156.22245789 117.95260620]
[150.74404907 130.13806152]
[142.66526794 140.77909851]
[132.40014648 149.33042908]
[120.47467804 155.35383606]
[107.50000000 158.54066467]
[107.50000000 173.54066467]
[107.50000000 188.54066467]
[107.50000000 203.54066467]
[107.50000000 218.54066467]
[107.50000000 233.54066467]
[107.50000000 248.54066467]
[107.50000000 263.54067993]
[107.50000000 278.54067993]
[107.50000000 293.54067993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[25 123]
[40 106]
[41 105]
[42 104]
[43 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
