%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUxxxxxxxxxxCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[210.71391296 371.20645142]
[210.40185547 356.20971680]
[210.08979797 341.21295166]
[209.77774048 326.21621704]
[209.46569824 311.21945190]
[209.15364075 296.22268677]
[208.84158325 281.22595215]
[208.52952576 266.22918701]
[208.21746826 251.23243713]
[203.31591797 237.05587769]
[194.29838562 225.06904602]
[180.46409607 219.54981995]
[178.35092163 203.87037659]
[169.33338928 191.88354492]
[159.58573914 180.48251343]
[149.14591980 169.71171570]
[138.70611572 158.94090271]
[128.26629639 148.17008972]
[117.82648468 137.39929199]
[107.38667297 126.62847900]
[96.94686127 115.85766602]
[82.57867432 111.55008698]
[67.93517303 114.80091095]
[53.29167557 118.05173492]
[38.64817429 121.30255890]
[24.00467110 124.55339050]
[9.36116982 127.80421448]
[-5.28233147 131.05503845]
[-19.92583275 134.30586243]
[-34.56933212 137.55668640]
[-46.28460312 149.03207397]
[-62.00533295 144.36402893]
[-65.55938721 128.35462952]
[-53.29065323 117.47298431]
[-37.82015991 122.91319275]
[-23.17665863 119.66236115]
[-8.53315735 116.41153717]
[6.11034441 113.16071320]
[20.75384521 109.90988922]
[35.39734650 106.65905762]
[50.04084778 103.40823364]
[64.68434906 100.15740967]
[79.32785034 96.90658569]
[80.33901978 89.47505951]
[83.37252045 67.18048859]
[70.12993622 60.13535309]
[56.88734818 53.09022141]
[40.52574158 54.19920349]
[31.61041832 40.43515396]
[39.31269836 25.95734787]
[55.70913696 25.65930748]
[63.93248367 39.84763336]
[77.17507172 46.89276886]
[90.41765594 53.93790436]
[96.76512146 49.94294739]
[88.77539825 37.24789429]
[101.47057343 29.25836945]
[109.46005249 41.95302963]
[115.80751801 37.95807266]
[115.18354034 22.97105598]
[114.55956268 7.98403931]
[113.93558502 -7.00297642]
[113.31160736 -21.98999214]
[112.68762970 -36.97700882]
[98.02617645 -40.61273956]
[84.98361969 -48.23299789]
[74.61724854 -59.22003937]
[67.76743317 -72.68319702]
[64.98944855 -87.53107452]
[66.50849152 -102.56002045]
[72.20142365 -116.55170441]
[81.60675049 -128.37188721]
[93.96201324 -137.06234741]
[108.26562500 -141.91859436]
[123.35807037 -142.54696655]
[138.01586914 -138.89651489]
[151.05076599 -131.26315308]
[161.40608215 -120.26570129]
[168.24237061 -106.79566193]
[171.00544739 -91.94500732]
[169.47129822 -76.91759491]
[163.76431274 -62.93163681]
[154.34712219 -51.12091446]
[141.98313904 -42.44286728]
[127.67464447 -37.60098648]
[128.29861450 -22.61396980]
[128.92259216 -7.62695408]
[129.54656982 7.36006212]
[130.17054749 22.34707832]
[130.79452515 37.33409500]
[142.65525818 74.50804138]
[129.54092407 101.08460999]
[107.71766663 105.41785431]
[118.15747833 116.18866730]
[128.59729004 126.95947266]
[139.03710938 137.73028564]
[149.47691345 148.50109863]
[159.91673279 159.27189636]
[170.35653687 170.04270935]
[172.09982300 155.14434814]
[183.74688721 145.69206238]
[198.68507385 147.05239868]
[208.43316650 158.45304871]
[207.45664978 173.42123413]
[196.30993652 183.45869446]
[181.32022095 182.86601257]
[190.33775330 194.85284424]
[204.81703186 201.22944641]
[206.28521729 216.05151367]
[215.30274963 228.03834534]
[214.09329224 213.08718872]
[215.76849365 198.18101501]
[220.26637268 183.87126160]
[227.42056274 170.68727112]
[236.96638489 159.11674500]
[248.55073547 149.58769226]
[261.74508667 142.45263672]
[276.06134033 137.97549438]
[290.96990967 136.32189941]
[305.91931152 137.55300903]
[320.35650635 141.62330627]
[333.74746704 148.38220215]
[345.59677124 157.57968140]
[355.46615601 168.87548828]
[362.99047852 181.85179138]
[367.89144897 196.02856445]
[369.98770142 210.88136292]
[369.20175171 225.86074829]
[365.56265259 240.41262817]
[359.20501709 253.99865723]
[350.36404419 266.11630249]
[339.36676025 276.31726074]
[326.61999512 284.22421265]
[312.59527588 289.54464722]
[297.81137085 292.08172607]
[282.81524658 291.74166870]
[268.16156006 288.53695679]
[254.39245605 282.58621216]
[242.01722717 274.10955811]
[231.49369812 263.42053223]
[223.21421814 250.92037964]
[223.52627563 265.91714478]
[223.83833313 280.91387939]
[224.15039062 295.91064453]
[224.46244812 310.90737915]
[224.77450562 325.90414429]
[225.08656311 340.90090942]
[225.39862061 355.89764404]
[225.71066284 370.89440918]
[228.30166626 390.10214233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 110]
[11 109]
[13 107]
[14 106]
[15 99]
[16 98]
[17 97]
[18 96]
[19 95]
[20 94]
[21 93]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[45 54]
[46 53]
[47 52]
[59 90]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
