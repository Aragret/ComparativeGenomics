%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAxxxxxxxxxxAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[51.08357620 262.10607910]
[43.07980347 259.47189331]
[35.21698380 256.44281006]
[28.86985397 270.03375244]
[22.52272415 283.62472534]
[16.17559433 297.21566772]
[9.82846451 310.80661011]
[3.48133540 324.39758301]
[5.43945360 340.67938232]
[-7.84247589 350.29824829]
[-22.70114326 343.35906982]
[-23.85122490 327.00030518]
[-10.10961533 318.05044556]
[-3.76248598 304.45950317]
[2.58464360 290.86853027]
[8.93177319 277.27758789]
[15.27890301 263.68664551]
[21.62603188 250.09568787]
[4.15646458 239.58943176]
[-11.92392445 227.05993652]
[-26.38206100 212.68881226]
[-39.00838470 196.68434143]
[-49.61989212 179.27850342]
[-58.06276703 160.72358704]
[-72.28955078 165.47740173]
[-86.51632690 170.23121643]
[-100.74310303 174.98503113]
[-109.16499329 188.63975525]
[-125.10832977 190.42570496]
[-136.34274292 178.97286987]
[-134.25016785 163.06687927]
[-120.43582916 154.90945435]
[-105.49691772 160.75825500]
[-91.27014160 156.00444031]
[-77.04336548 151.25062561]
[-62.81658173 146.49681091]
[-67.31085205 126.04364777]
[-69.24607849 105.19213867]
[-68.59265900 84.26121521]
[-65.36058044 63.57101440]
[-59.59929276 43.43800354]
[-73.50184631 37.80604935]
[-87.40440369 32.17409134]
[-101.30696106 26.54213524]
[-115.20951843 20.91017914]
[-132.15998840 20.56712914]
[-136.52270508 4.18411875]
[-121.98767090 -4.54336977]
[-109.57756042 7.00762224]
[-95.67500305 12.63957882]
[-81.77244568 18.27153587]
[-67.86988831 23.90349197]
[-53.96733475 29.53544998]
[-32.06979752 -5.96585083]
[-2.15791512 -35.03686142]
[-10.66900539 -47.38843155]
[-19.18009567 -59.74000549]
[-27.69118500 -72.09157562]
[-36.20227432 -84.44315338]
[-50.16828156 -94.05496979]
[-44.79827499 -110.13599396]
[-27.85913467 -109.42751312]
[-23.85070419 -92.95423889]
[-15.33961296 -80.60266876]
[-6.82852316 -68.25109863]
[1.68256712 -55.89952469]
[10.19365692 -43.54795074]
[19.82215691 -49.13989258]
[29.79735756 -54.08692932]
[40.07612228 -58.36767960]
[50.61400604 -61.96362686]
[61.36543655 -64.85922241]
[72.28393555 -67.04194641]
[83.32227325 -68.50236511]
[94.43273163 -69.23415375]
[105.56726837 -69.23415375]
[116.67772675 -68.50236511]
[127.71606445 -67.04194641]
[138.63456726 -64.85922241]
[149.38600159 -61.96362686]
[159.92387390 -58.36767960]
[170.20263672 -54.08692932]
[180.17784119 -49.13989258]
[189.80633545 -43.54795074]
[198.31742859 -55.89952469]
[206.82852173 -68.25109863]
[215.33961487 -80.60266876]
[213.86094666 -96.57743073]
[225.52795410 -107.58926392]
[241.39071655 -105.19082642]
[249.28067017 -91.22200012]
[243.14532471 -76.39846802]
[227.69119263 -72.09157562]
[219.18009949 -59.74000549]
[210.66900635 -47.38843155]
[202.15791321 -35.03686142]
[208.74914551 -29.78758240]
[215.07107544 -24.21690750]
[221.10806274 -18.33863068]
[226.84513855 -12.16730881]
[232.26809692 -5.71822405]
[237.36352539 0.99265373]
[242.11880493 7.94870615]
[246.52214050 15.13270760]
[250.56263733 22.52686882]
[254.23030090 30.11287689]
[257.51602173 37.87195206]
[260.41171265 45.78487396]
[262.91012573 53.83205032]
[265.00515747 61.99355316]
[266.69158936 70.24917603]
[267.96520996 78.57846832]
[268.82290649 86.96080780]
[269.26254272 95.37543488]
[269.28302002 103.80151367]
[268.88430786 112.21817780]
[268.06738281 120.60459137]
[266.83425903 128.93997192]
[265.18801880 137.20370483]
[263.13269043 145.37528992]
[260.67340088 153.43452454]
[257.81625366 161.36143494]
[254.56828308 169.13638306]
[250.93754578 176.74014282]
[246.93304443 184.15385437]
[242.56469727 191.35919189]
[237.84330750 198.33827209]
[232.78056335 205.07385254]
[227.38902283 211.54922485]
[221.68202209 217.74836731]
[215.67369080 223.65592957]
[209.37892151 229.25727844]
[202.81329346 234.53854370]
[195.99305725 239.48664856]
[188.93511963 244.08934021]
[181.65695190 248.33522034]
[174.17657471 252.21376038]
[166.51249695 255.71537781]
[158.68373108 258.83139038]
[150.70964050 261.55410767]
[142.60997009 263.87673950]
[134.40478516 265.79354858]
[126.11440277 267.29983521]
[117.75935364 268.39181519]
[109.36032867 269.06677246]
[100.93811798 269.32308960]
[92.51358795 269.16012573]
[84.10759735 268.57824707]
[75.74096680 267.57891846]
[67.43440247 266.16461182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[24 36]
[25 35]
[26 34]
[27 33]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
