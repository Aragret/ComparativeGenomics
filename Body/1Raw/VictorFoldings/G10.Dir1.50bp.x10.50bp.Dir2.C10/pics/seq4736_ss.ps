%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUxxxxxxxxxxCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.50939941 284.52243042]
[72.10039520 265.31469727]
[72.41245270 250.31793213]
[72.72451019 235.32118225]
[73.03656769 220.32443237]
[73.34862518 205.32768250]
[73.66068268 190.33091736]
[73.97273254 175.33416748]
[74.28479004 160.33741760]
[74.59684753 145.34066772]
[74.90890503 130.34390259]
[68.42073822 116.81971741]
[56.52835846 107.67798615]
[44.63597870 98.53624725]
[32.74359894 89.39451599]
[20.85122108 80.25278473]
[2.75199676 82.57344055]
[-10.66615391 70.98630524]
[-25.56805611 72.69899750]
[-40.46995926 74.41168976]
[-55.37186050 76.12437439]
[-70.27376556 77.83706665]
[-85.06646729 80.32218170]
[-99.70996857 83.57301331]
[-114.35346985 86.82383728]
[-128.99697876 90.07466125]
[-143.64047241 93.32548523]
[-148.17816162 107.99876404]
[-159.45544434 118.42557526]
[-174.43879700 121.80116272]
[-189.09777832 117.21750641]
[-199.48919678 105.90759277]
[-202.81779480 90.91373444]
[-198.18821716 76.26918793]
[-186.84579468 65.91328430]
[-171.84156799 62.63169098]
[-157.21160889 67.30715179]
[-146.89129639 78.68198395]
[-132.24780273 75.43115997]
[-117.60430145 72.18033600]
[-102.96080017 68.92951202]
[-88.31729889 65.67868042]
[-99.12021637 55.27210617]
[-97.93197632 40.31924438]
[-85.62107849 31.74942970]
[-71.18579102 35.82650375]
[-65.17714691 49.57045364]
[-71.98645020 62.93516159]
[-57.08454895 61.22247314]
[-42.18264771 59.50978470]
[-27.28074646 57.79709244]
[-12.37884331 56.08440399]
[-10.19744873 50.63026428]
[-6.61742878 45.97305679]
[-1.90762675 42.46251678]
[-4.08446360 27.62130928]
[-6.26130056 12.78010464]
[-21.28983688 11.92687130]
[-35.83889389 8.06554699]
[-49.31269836 1.35425103]
[-61.15950394 -7.93219328]
[-70.89419556 -19.41351128]
[-78.11814117 -32.61955261]
[-82.53552246 -47.00953674]
[-83.96545410 -61.99420166]
[-82.34938049 -76.95993805]
[-77.75347900 -91.29389954]
[-70.36595154 -104.40913391]
[-60.48930359 -115.76856232]
[-48.52798843 -124.90704346]
[-34.97180557 -131.45034790]
[-20.37587929 -135.13053894]
[-5.33789873 -135.79690552]
[9.52633762 -133.42218018]
[23.60814857 -128.10357666]
[36.33089447 -120.05891418]
[47.17358780 -109.61760712]
[55.69222260 -97.20721436]
[61.53796768 -83.33594513]
[64.47145081 -68.57181549]
[64.37253571 -53.51940155]
[61.24527740 -38.79509735]
[55.21773911 -25.00185013]
[46.53674316 -12.70448589]
[35.55776596 -2.40657353]
[22.73039818 5.47019386]
[8.57990456 10.60326767]
[10.75674152 25.44447327]
[12.93357849 40.28567886]
[27.58147049 50.27305603]
[29.99295425 68.36040497]
[41.88533401 77.50213623]
[53.77771378 86.64386749]
[65.67009735 95.78560638]
[77.56246948 104.92733765]
[77.46414948 86.06404877]
[92.66106415 70.88963318]
[116.75669861 70.93921661]
[131.07929993 66.48239899]
[132.81817627 51.35308456]
[140.56594849 38.24233246]
[152.98027039 29.42165947]
[167.91030884 26.41930199]
[182.76931763 29.75543594]
[194.98287964 38.85205841]
[202.43495178 52.13311768]
[203.83439636 67.29759979]
[198.93875122 81.71816254]
[188.59622192 92.89634705]
[174.59870911 98.89548492]
[159.37136841 98.67617035]
[145.55242920 92.27640533]
[135.53611755 80.80500031]
[121.21351624 85.26181793]
[120.58953857 100.24883270]
[134.49209595 105.88079071]
[148.39465332 111.51274109]
[157.58934021 111.84355164]
[162.52587891 117.40919495]
[176.30825806 123.32915497]
[190.09063721 129.24911499]
[207.03030396 129.94473267]
[211.05125427 146.41494751]
[196.33779907 154.83816528]
[184.17066956 143.03149414]
[170.38829041 137.11154175]
[156.60591125 131.19157410]
[142.76269531 125.41529846]
[128.86013794 119.78334045]
[114.95758057 114.15139008]
[108.69460297 118.27753448]
[118.19513702 129.88528442]
[127.69567108 141.49302673]
[139.89993286 150.21403503]
[139.61598206 165.21134949]
[127.09036255 173.46414185]
[113.19792938 167.80726624]
[110.00057983 153.15081787]
[103.08460999 139.84031677]
[96.16864014 126.52982330]
[89.90565491 130.65596008]
[89.59360504 145.65272522]
[89.28154755 160.64947510]
[88.96949005 175.64622498]
[88.65743256 190.64297485]
[88.34537506 205.63973999]
[88.03331757 220.63648987]
[87.72126770 235.63323975]
[87.40921021 250.62998962]
[87.09715271 265.62673950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 95]
[13 94]
[14 93]
[15 92]
[16 91]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[55 89]
[56 88]
[57 87]
[98 114]
[99 113]
[115 130]
[116 129]
[117 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
