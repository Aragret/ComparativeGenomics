%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCxxxxxxxxxxAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 333.23483276]
[92.50000000 318.23483276]
[92.50000000 303.23483276]
[92.50000000 288.23483276]
[92.50000000 273.23483276]
[92.50000000 258.23483276]
[92.50000000 243.23484802]
[92.50000000 228.23484802]
[92.50000000 213.23484802]
[92.50000000 198.23484802]
[79.40567017 196.34422302]
[66.68271637 192.71620178]
[54.56058121 187.41621399]
[43.25786209 180.53984070]
[32.97838593 172.21107483]
[23.90751839 162.58010864]
[16.20884323 151.82063293]
[10.02118683 140.12664795]
[-4.10361576 145.17541504]
[-8.73854160 150.03596497]
[-14.30121708 151.54855347]
[-18.92233658 150.12701416]
[-33.24493408 154.58383179]
[-47.56753159 159.04064941]
[-54.88861465 164.61322021]
[-62.23464203 163.43785095]
[-76.64685822 167.59574890]
[-91.05907440 171.75363159]
[-100.04169464 185.04618835]
[-116.04551697 186.16738892]
[-126.79379272 174.25712585]
[-124.04135132 158.45195007]
[-109.89963531 150.87623596]
[-95.21696472 157.34141541]
[-80.80474854 153.18353271]
[-66.39253235 149.02563477]
[-52.02434540 144.71804810]
[-37.70174789 140.26124573]
[-23.37915230 135.80442810]
[-9.15237236 131.05061340]
[4.97243071 126.00185394]
[1.51415193 102.62164307]
[3.72367692 79.09055328]
[11.47384930 56.76279449]
[-1.46420705 49.17288589]
[-14.40226269 41.58297729]
[-27.34031868 33.99307251]
[-42.56897736 38.21958923]
[-56.28454971 30.36728668]
[-60.34982681 15.09479332]
[-52.35295486 1.46300864]
[-37.03833389 -2.44057107]
[-23.49185753 5.69997883]
[-19.75041008 21.05501556]
[-6.81235456 28.64492226]
[6.12570143 36.23483276]
[19.06375694 43.82474136]
[31.42623329 29.26122856]
[46.36685944 17.35726547]
[63.32391739 8.56040192]
[81.65987396 3.20136833]
[100.68536377 1.48164868]
[119.68508148 3.46589875]
[137.94471741 9.07951736]
[154.77774048 18.11145020]
[164.04269409 6.31481028]
[173.30763245 -5.48182964]
[182.57258606 -17.27846909]
[191.83753967 -29.07510948]
[177.79997253 -23.78863525]
[162.89659119 -22.08891296]
[148.02915955 -24.07879257]
[134.09730530 -29.63786697]
[121.94400787 -38.42976379]
[112.30465698 -49.92250061]
[105.76251984 -63.42066574]
[102.71344757 -78.10749817]
[103.34193420 -93.09432983]
[107.60995483 -107.47431183]
[115.25924683 -120.37734985]
[125.82698059 -131.02267456]
[138.67369080 -138.76617432]
[153.02206421 -143.13929749]
[168.00390625 -143.87741089]
[182.71264648 -140.93588257]
[196.25831604 -134.49267578]
[207.82127380 -124.93767548]
[216.70185852 -112.84903717]
[222.36271667 -98.95822144]
[224.46131897 -84.10575867]
[222.87068176 -69.19033051]
[217.68705750 -55.11446381]
[209.22540283 -42.73134995]
[222.88165283 -48.93675613]
[236.53788757 -55.14216614]
[250.19413757 -61.34757233]
[263.85037231 -67.55297852]
[277.50662231 -73.75838470]
[279.62924194 -89.03903198]
[289.69357300 -100.73145294]
[304.48809814 -105.10465240]
[319.29199219 -100.76315308]
[329.38134766 -89.09231567]
[331.53668213 -73.81625366]
[325.07025146 -59.80950928]
[312.04547119 -51.54158020]
[296.61849976 -51.65073776]
[283.71203613 -60.10214615]
[270.05578613 -53.89673615]
[256.39953613 -47.69132996]
[242.74330139 -41.48592377]
[229.08705139 -35.28051758]
[215.43081665 -29.07510948]
[203.63417053 -19.81015968]
[194.36923218 -8.01352024]
[185.10427856 3.78311944]
[175.83932495 15.57975960]
[166.57437134 27.37639999]
[173.55883789 34.46044540]
[179.79327393 42.21273804]
[185.21415710 50.55423355]
[189.76617432 59.39987946]
[193.40293884 68.65948486]
[196.08735657 78.23864746]
[197.79205322 88.03968048]
[198.49966431 97.96266937]
[198.20297241 107.90642548]
[196.90499878 117.76956940]
[194.61895752 127.45153809]
[191.36819458 136.85360718]
[187.18583679 145.87991333]
[182.11451721 154.43841553]
[176.20596313 162.44187927]
[169.52040100 169.80867004]
[162.12600708 176.46368408]
[154.09815979 182.33908081]
[145.51873779 187.37493896]
[136.47520447 191.51991272]
[127.05976868 194.73175049]
[117.36843109 196.97769165]
[107.50000000 198.23484802]
[107.50000000 213.23484802]
[107.50000000 228.23484802]
[107.50000000 243.23484802]
[107.50000000 258.23483276]
[107.50000000 273.23483276]
[107.50000000 288.23483276]
[107.50000000 303.23483276]
[107.50000000 318.23483276]
[107.50000000 333.23483276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 41]
[19 40]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[44 57]
[45 56]
[46 55]
[47 54]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
