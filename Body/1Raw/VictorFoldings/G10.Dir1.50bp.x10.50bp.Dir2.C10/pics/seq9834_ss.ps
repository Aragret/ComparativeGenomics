%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCxxxxxxxxxxUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-73.52715302 223.98036194]
[-86.03118896 232.26583862]
[-98.53522491 240.55130005]
[-111.03926086 248.83677673]
[-123.54329681 257.12225342]
[-136.04733276 265.40774536]
[-147.92416382 274.56967163]
[-159.11245728 284.56076050]
[-170.30075073 294.55184937]
[-181.48904419 304.54296875]
[-192.67733765 314.53405762]
[-203.86564636 324.52514648]
[-198.22193909 338.59371948]
[-197.73341370 353.74420166]
[-202.45907593 368.14709473]
[-211.82827759 380.06323242]
[-224.70962524 388.05361938]
[-239.54765320 391.15344238]
[-254.55058289 388.98831177]
[-267.90676880 381.81973267]
[-278.00332642 370.51330566]
[-283.62109375 356.43438721]
[-284.08169556 341.28302002]
[-279.32949829 326.88882446]
[-269.93835449 314.98999023]
[-257.04229736 307.02334595]
[-242.19859314 303.95089722]
[-227.19967651 306.14367676]
[-213.85673523 313.33685303]
[-202.66844177 303.34576416]
[-191.48014832 293.35467529]
[-180.29185486 283.36355591]
[-169.10354614 273.37246704]
[-157.91525269 263.38137817]
[-172.86560059 262.16180420]
[-183.65495300 251.74116516]
[-185.39344788 236.84225464]
[-177.29315186 224.21746826]
[-163.02523804 219.58854675]
[-149.05615234 225.05339050]
[-141.71687317 238.13525391]
[-144.33280945 252.90370178]
[-131.82876587 244.61822510]
[-119.32473755 236.33274841]
[-106.82070160 228.04727173]
[-94.31666565 219.76179504]
[-81.81262970 211.47631836]
[-88.66174316 199.44621277]
[-94.71596527 186.99710083]
[-99.94979095 174.18144226]
[-104.34115601 161.05322266]
[-107.87155914 147.66777039]
[-110.52613831 134.08148193]
[-112.29370117 120.35160065]
[-113.16680145 106.53596497]
[-113.14175415 92.69279480]
[-112.21867371 78.88040924]
[-110.40145111 65.15701294]
[-107.69773102 51.58041382]
[-104.11891174 38.20782852]
[-99.68007660 25.09559059]
[-94.39991760 12.29895115]
[-88.30069733 -0.12817481]
[-81.40809631 -12.13342857]
[-73.75116730 -23.66622734]
[-65.36215973 -34.67797852]
[-56.27643585 -45.12228775]
[-46.53226471 -54.95515060]
[-36.17070389 -64.13513184]
[-25.23541451 -72.62355804]
[-13.77246380 -80.38467407]
[-1.83015347 -87.38575745]
[10.54120064 -93.59732819]
[23.28947449 -98.99320984]
[36.36095428 -103.55066681]
[49.70056915 -107.25050354]
[63.25210953 -110.07711792]
[76.95848083 -112.01860809]
[90.76193237 -113.06680298]
[104.60430908 -113.21726990]
[118.42729187 -112.46938324]
[132.17262268 -110.82629395]
[145.78240967 -108.29492188]
[159.19929504 -104.88593292]
[172.36676025 -100.61370087]
[185.22930908 -95.49620819]
[197.73277283 -89.55503082]
[209.82444763 -82.81519318]
[221.45339966 -75.30509186]
[232.57061768 -67.05638123]
[243.12928772 -58.10380173]
[253.08489990 -48.48507690]
[262.39550781 -38.24073792]
[271.02191162 -27.41394615]
[278.92770386 -16.05031586]
[286.07965088 -4.19772911]
[292.44757080 8.09387875]
[298.00463867 20.77271652]
[302.72747803 33.78536606]
[306.59613037 47.07699585]
[321.24884033 43.86800003]
[335.90158081 40.65900421]
[350.52056885 37.29974747]
[365.10433960 33.79058075]
[379.68807983 30.28141212]
[394.27182007 26.77224541]
[403.83993530 13.89471626]
[419.87789917 13.49038696]
[430.08276367 25.86942291]
[426.62622070 41.53569031]
[412.15985107 48.47136307]
[397.78100586 41.35599518]
[383.19723511 44.86516190]
[368.61349487 48.37432861]
[354.02975464 51.88349533]
[348.22650146 56.53477097]
[339.11056519 55.31172943]
[324.45785522 58.52072525]
[309.80511475 61.72972107]
[312.13153076 78.02242279]
[313.19464111 94.44601440]
[312.98809814 110.90267181]
[311.51315308 127.29441071]
[308.77859497 143.52359009]
[304.80065918 159.49359131]
[299.60311890 175.10926819]
[293.21682739 190.27766418]
[285.67990112 204.90841675]
[277.03720093 218.91441345]
[267.34014893 232.21223450]
[256.64657593 244.72268677]
[245.02009583 256.37127686]
[232.52998352 267.08862305]
[219.25061035 276.81091309]
[205.26106262 285.48022461]
[190.64466858 293.04495239]
[175.48843384 299.46002197]
[159.88265991 304.68725586]
[143.92025757 308.69549561]
[127.69628906 311.46090698]
[111.30738831 312.96701050]
[94.85115051 313.20480347]
[78.42557526 312.17291260]
[62.12847519 309.87747192]
[46.05691910 306.33212280]
[30.30660820 301.55801392]
[14.97134495 295.58355713]
[0.14245342 288.44433594]
[-14.09175491 280.18289185]
[-27.64651108 270.84838867]
[-40.44109344 260.49642944]
[-52.39930344 249.18865967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[100 119]
[101 118]
[102 117]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
