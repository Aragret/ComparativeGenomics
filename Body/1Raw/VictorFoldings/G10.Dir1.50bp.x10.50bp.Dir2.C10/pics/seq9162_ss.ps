%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCxxxxxxxxxxCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 266.44189453]
[92.50000000 251.44187927]
[92.50000000 236.44187927]
[92.50000000 221.44187927]
[92.50000000 206.44187927]
[92.50000000 191.44187927]
[92.50000000 176.44187927]
[92.50000000 161.44187927]
[92.50000000 146.44187927]
[92.50000000 131.44187927]
[79.48368835 123.98697662]
[66.54563141 131.57688904]
[62.45547867 146.60713196]
[49.22632980 154.12007141]
[34.92248917 150.12809753]
[21.98443413 157.71801758]
[9.04637814 165.30792236]
[-3.89167762 172.89782715]
[-7.54077005 178.53623962]
[-12.72463512 181.05790710]
[-17.52960587 180.52146912]
[-30.77219009 187.56660461]
[-44.01477814 194.61174011]
[-50.05804062 209.47303772]
[-65.48516083 213.87573242]
[-78.46176147 204.44241333]
[-79.03331757 188.40954590]
[-66.76136780 178.07615662]
[-51.05990982 181.36915588]
[-37.81732559 174.32402039]
[-24.57473946 167.27888489]
[-11.48158550 159.95977783]
[1.45647013 152.36987305]
[14.39452648 144.77995300]
[27.33258247 137.19004822]
[30.82750893 122.75671387]
[43.84041595 114.87516022]
[58.95572662 118.63882446]
[71.89378357 111.04891968]
[72.12779999 103.55256653]
[58.90967560 110.64348602]
[46.15975571 102.74161530]
[46.62812424 87.74893188]
[59.84640503 80.65830231]
[72.59584808 88.55987549]
[72.82986450 81.06352234]
[60.39042664 72.68138123]
[47.95098495 64.29924011]
[32.97212982 68.79010010]
[18.63152313 62.55463409]
[11.70036411 48.53703690]
[15.45133495 33.35598755]
[28.11334038 24.17951584]
[43.70776749 25.34046936]
[54.87140656 36.29068375]
[56.33312988 51.85979843]
[68.77256775 60.24194336]
[81.21201324 68.62408447]
[88.23078156 66.87258148]
[95.18522644 66.60438538]
[101.77666473 67.72298431]
[107.74221039 70.07445526]
[112.86524963 73.45780945]
[116.98328400 77.63713837]
[124.43819427 64.62083435]
[131.89311218 51.60452271]
[139.34802246 38.58821487]
[127.53327179 29.30221748]
[117.19655609 18.39487648]
[108.55818939 6.09867764]
[101.80229950 -7.32428217]
[97.07289886 -21.58789253]
[94.47077942 -36.38812256]
[94.05142212 -51.40950775]
[95.82375336 -66.33186340]
[99.74999237 -80.83712006]
[105.74646759 -94.61609650]
[113.68534851 -107.37509155]
[123.39742279 -118.84214783]
[134.67568970 -128.77285767]
[147.27972412 -136.95552063]
[160.94088745 -143.21572876]
[175.36799622 -147.42007446]
[190.25352478 -149.47889709]
[205.28019714 -149.34835815]
[220.12771606 -147.03120422]
[234.47959900 -142.57684326]
[248.02993774 -136.08021545]
[260.48989868 -127.67980194]
[271.59393311 -117.55464935]
[281.10531616 -105.92058563]
[288.82131958 -93.02558136]
[294.57748413 -79.14450073]
[298.25109863 -64.57321930]
[299.76391602 -49.62232208]
[299.08361816 -34.61048889]
[296.22476196 -19.85770226]
[291.24822998 -5.67841434]
[284.26016235 7.62514067]
[275.40945435 19.76939774]
[264.88479614 30.49550056]
[252.91049194 39.57482147]
[239.74180603 46.81383514]
[225.65939331 52.05823898]
[210.96345520 55.19625092]
[195.96722412 56.16098404]
[180.99032593 54.93187332]
[166.35203552 51.53512192]
[152.36433411 46.04312515]
[144.90942383 59.05943298]
[137.45451355 72.07574463]
[129.99960327 85.09204865]
[135.63154602 98.99460602]
[150.04376221 103.15249634]
[164.45597839 107.31037903]
[178.86819458 111.46826935]
[191.74467468 102.59525299]
[207.30711365 104.12642670]
[218.20741272 115.33881378]
[219.29878235 130.93826294]
[210.06590271 143.55920410]
[194.86827087 147.24240112]
[180.88172913 140.24876404]
[174.71031189 125.88048553]
[160.29809570 121.72259521]
[145.88587952 117.56471252]
[131.47366333 113.40682220]
[125.48024750 117.91558838]
[136.13476562 128.47406006]
[146.78927612 139.03253174]
[157.44378662 149.59100342]
[170.31535339 157.29313660]
[174.00621033 171.83197021]
[166.36705017 184.74099731]
[151.84642029 188.50283813]
[138.90023804 180.92681885]
[135.06756592 166.42433167]
[127.87618256 153.26058960]
[120.68479919 140.09686279]
[113.49341583 126.93312073]
[107.50000000 131.44187927]
[107.50000000 146.44187927]
[107.50000000 161.44187927]
[107.50000000 176.44187927]
[107.50000000 191.44187927]
[107.50000000 206.44187927]
[107.50000000 221.44187927]
[107.50000000 236.44187927]
[107.50000000 251.44187927]
[107.50000000 266.44189453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 39]
[12 38]
[15 35]
[16 34]
[17 33]
[18 32]
[21 31]
[22 30]
[23 29]
[46 58]
[47 57]
[48 56]
[64 112]
[65 111]
[66 110]
[67 109]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
