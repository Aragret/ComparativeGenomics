%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 313.37582397]
[92.50000000 298.37582397]
[92.50000000 283.37582397]
[92.50000000 268.37582397]
[92.50000000 253.37582397]
[92.50000000 238.37582397]
[92.50000000 223.37582397]
[92.50000000 208.37582397]
[92.50000000 193.37582397]
[92.50000000 178.37582397]
[77.43047333 175.42967224]
[63.21934509 169.61466980]
[50.40711212 161.15197754]
[39.48107147 150.36346436]
[30.85677719 137.65945435]
[24.86224174 123.52311707]
[21.72546005 108.49211121]
[21.56573296 93.13813019]
[24.38913536 78.04512024]
[30.08828354 63.78713608]
[38.44641876 50.90645218]
[49.14565277 39.89297104]
[61.77905655 31.16556740]
[75.86613464 25.05617905]
[90.87110901 21.79716682]
[90.55905914 6.80041361]
[82.53633118 -6.83580685]
[90.00718689 -19.72128868]
[89.69512939 -34.71804428]
[89.38307190 -49.71479797]
[89.07101440 -64.71154785]
[74.08330536 -65.45822144]
[59.18560410 -67.26026154]
[44.45212555 -70.10868073]
[29.95627213 -73.98928833]
[15.77026272 -78.88276672]
[1.96477413 -84.76472473]
[-11.39141655 -91.60585785]
[-24.23176765 -99.37208557]
[-36.49230957 -108.02471161]
[-48.11196136 -117.52064514]
[-59.03282928 -127.81256104]
[-69.20050812 -138.84918213]
[-78.56434631 -150.57554626]
[-87.07769012 -162.93321228]
[-94.69812775 -175.86061096]
[-101.38769531 -189.29336548]
[-107.11306000 -203.16452026]
[-111.84569550 -217.40499878]
[-115.56203461 -231.94383240]
[-118.24355316 -246.70860291]
[-119.87689972 -261.62573242]
[-120.45393372 -276.62094116]
[-119.97177887 -291.61947632]
[-118.43283081 -306.54666138]
[-115.84477234 -321.32809448]
[-112.22048950 -335.89016724]
[-107.57803345 -350.16027832]
[-101.94053650 -364.06738281]
[-95.33609009 -377.54217529]
[-87.79758453 -390.51754761]
[-79.36258698 -402.92883301]
[-70.07312775 -414.71417236]
[-59.97546768 -425.81491089]
[-49.11992645 -436.17572021]
[-37.56058121 -445.74496460]
[-25.35502434 -454.47497559]
[-12.56406212 -462.32229614]
[0.74858201 -469.24777222]
[14.51658344 -475.21694946]
[28.67135048 -480.20007324]
[43.14236450 -484.17233276]
[57.85752869 -487.11389160]
[72.74353790 -489.01013184]
[87.72621918 -489.85162354]
[102.73094177 -489.63412476]
[117.68293762 -488.35876465]
[132.50773621 -486.03186035]
[147.13145447 -482.66503906]
[161.48126221 -478.27502441]
[175.48565674 -472.88375854]
[189.07487488 -466.51803589]
[202.18119812 -459.20962524]
[214.73934937 -450.99487305]
[226.68675232 -441.91476440]
[237.96388245 -432.01452637]
[248.51457214 -421.34344482]
[258.28625488 -409.95471191]
[267.23022461 -397.90505981]
[275.30197144 -385.25451660]
[282.46124268 -372.06613159]
[288.67236328 -358.40554810]
[293.90441895 -344.34091187]
[298.13131714 -329.94223022]
[301.33203125 -315.28125000]
[303.49060059 -300.43099976]
[304.59625244 -285.46548462]
[304.64349365 -270.45925903]
[303.63208008 -255.48709106]
[301.56707764 -240.62356567]
[298.45874023 -225.94271851]
[294.32260132 -211.51770020]
[289.17919922 -197.42037964]
[283.05422974 -183.72097778]
[275.97814941 -170.48776245]
[267.98620605 -157.78665161]
[259.11828613 -145.68092346]
[249.41851807 -134.23089600]
[238.93522644 -123.49359131]
[227.72064209 -113.52252197]
[215.83065796 -104.36736298]
[203.32447815 -96.07371521]
[190.26443481 -88.68290710]
[176.71557617 -82.23175812]
[162.74540710 -76.75240326]
[148.42352295 -72.27214050]
[133.82128906 -68.81329346]
[119.01144409 -66.39309692]
[104.06777191 -65.02360535]
[104.37982941 -50.02685165]
[104.69188690 -35.03009796]
[105.00393677 -20.03334618]
[113.00434113 -7.46979284]
[105.55580902 6.48835754]
[105.86786652 21.48511124]
[120.26541138 23.91890717]
[133.96594238 28.96948051]
[146.49821472 36.46311951]
[157.43121338 46.14208221]
[166.38888550 57.67346573]
[173.06314087 70.66065216]
[177.22441101 84.65695953]
[178.72959900 99.18097687]
[177.52690125 113.73316193]
[173.65769958 127.81301117]
[167.25506592 140.93623352]
[158.53923035 152.65147400]
[147.80996704 162.55578613]
[135.43629456 170.30853271]
[121.84379578 175.64303589]
[107.50000000 178.37582397]
[107.50000000 193.37582397]
[107.50000000 208.37582397]
[107.50000000 223.37582397]
[107.50000000 238.37582397]
[107.50000000 253.37582397]
[107.50000000 268.37582397]
[107.50000000 283.37582397]
[107.50000000 298.37582397]
[107.50000000 313.37582397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[28 122]
[29 121]
[30 120]
[31 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
