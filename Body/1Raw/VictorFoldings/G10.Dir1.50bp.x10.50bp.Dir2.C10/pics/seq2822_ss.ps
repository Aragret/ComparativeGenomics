%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCxxxxxxxxxxACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.18261719 289.39889526]
[110.18261719 274.39889526]
[110.18261719 259.39889526]
[110.18261719 244.39889526]
[110.18261719 229.39889526]
[110.18261719 214.39889526]
[110.18261719 199.39889526]
[110.18261719 184.39889526]
[110.18261719 169.39889526]
[110.18261719 154.39889526]
[96.40023041 148.47894287]
[85.52140808 158.80613708]
[80.83974457 173.91880798]
[66.28224945 177.06976318]
[55.40341949 187.39697266]
[44.52459717 197.72418213]
[33.64577103 208.05137634]
[29.51225090 223.92103577]
[13.63225937 228.01467896]
[2.34176874 216.12110901]
[7.25546837 200.47541809]
[23.31856537 197.17256165]
[34.19739151 186.84535217]
[45.07621765 176.51814270]
[55.95503998 166.19093323]
[59.85858154 151.81694031]
[75.19420624 147.92732239]
[86.07302856 137.60011292]
[74.77005768 128.87498474]
[67.70027161 117.19783783]
[65.43454742 104.37370300]
[67.83986664 92.21382141]
[74.15267944 82.28133392]
[64.16995239 71.08557129]
[54.18722534 59.88980484]
[41.57609558 51.76826477]
[27.25349998 47.31144714]
[12.93090248 42.85463333]
[-1.39169502 38.39781570]
[-12.16478062 49.26976395]
[-26.75981522 53.87883377]
[-41.82296753 51.16589737]
[-53.89283752 41.75436783]
[-60.19585037 27.80694771]
[-59.28363037 12.52864838]
[-51.36578751 -0.56968772]
[-38.26179504 -8.47815800]
[-22.98284721 -9.37945461]
[-9.03993607 -3.06646562]
[0.36295861 9.01012993]
[3.06512070 24.07521820]
[17.38771820 28.53203392]
[31.71031570 32.98884964]
[46.03291321 37.44566727]
[36.15122986 26.16061592]
[28.97263336 12.98990059]
[24.84368324 -1.43063235]
[23.96371651 -16.40479851]
[26.37521553 -31.20968628]
[31.96175766 -45.13055420]
[40.45364380 -57.49533844]
[51.44090271 -67.70709991]
[64.39310455 -75.27285004]
[78.68494415 -79.82732391]
[93.62645721 -81.15065002]
[108.49630737 -79.17893219]
[122.57660675 -74.00737762]
[135.18760681 -65.88564301]
[145.72048950 -55.20582199]
[153.66673279 -42.48351288]
[158.64273071 -28.33291435]
[160.40826416 -13.43717957]
[158.87806702 1.48456669]
[154.12603760 15.71194172]
[146.38157654 28.55808640]
[136.01858521 39.40282059]
[123.53733826 47.72259521]
[109.54041290 53.11574554]
[94.70354462 55.32191086]
[79.74300385 54.23458481]
[65.38298798 49.90707779]
[75.36571503 61.10284424]
[85.34844208 72.29860687]
[101.34300995 66.93801880]
[118.73398590 70.62420654]
[132.52528381 83.23262787]
[138.29458618 101.95938110]
[133.57810974 121.91436768]
[147.80488586 117.16055298]
[162.03166199 112.40673828]
[176.25845337 107.65292358]
[188.10194397 93.59192657]
[205.13784790 97.68801880]
[219.26264954 92.63926697]
[225.50437927 81.30371857]
[237.42321777 77.41010284]
[248.42453003 82.53636932]
[262.65130615 77.78255463]
[276.87808228 73.02873993]
[291.10485840 68.27492523]
[305.33163452 63.52111053]
[319.55844116 58.76729584]
[326.39083862 44.51620102]
[341.32666016 39.34929276]
[355.50473022 46.33200073]
[360.51342773 61.32160950]
[353.38122559 75.42504883]
[338.33947754 80.27500153]
[324.31225586 72.99407196]
[310.08544922 77.74788666]
[295.85867310 82.50170135]
[281.63189697 87.25551605]
[267.40512085 92.00933075]
[253.17834473 96.76314545]
[242.31059265 110.50694275]
[224.31140137 106.76406860]
[210.18659973 111.81282043]
[204.70100403 122.63943481]
[192.92257690 126.93916321]
[181.01226807 121.87969971]
[166.78547668 126.63351440]
[152.55870056 131.38732910]
[138.33192444 136.14114380]
[153.09619141 138.78996277]
[167.86047363 141.43878174]
[182.69419861 139.21150208]
[197.35971069 142.36149597]
[209.97050476 150.48356628]
[218.90434265 162.53289795]
[223.01199341 176.95951843]
[221.76507568 191.90759277]
[215.32397461 205.45426941]
[204.51727295 215.85691833]
[190.73509216 221.77737427]
[175.75036621 222.45404053]
[161.49067688 217.79988098]
[149.79035950 208.41358948]
[142.15449524 195.50259399]
[139.56538391 180.72637939]
[132.37399292 167.56263733]
[125.18261719 154.39889526]
[125.18261719 169.39889526]
[125.18261719 184.39889526]
[125.18261719 199.39889526]
[125.18261719 214.39889526]
[125.18261719 229.39889526]
[125.18261719 244.39889526]
[125.18261719 259.39889526]
[125.18261719 274.39889526]
[125.18261719 289.39889526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[14 25]
[15 24]
[16 23]
[17 22]
[33 83]
[34 82]
[35 81]
[36 54]
[37 53]
[38 52]
[39 51]
[88 123]
[89 122]
[90 121]
[91 120]
[93 117]
[94 116]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
