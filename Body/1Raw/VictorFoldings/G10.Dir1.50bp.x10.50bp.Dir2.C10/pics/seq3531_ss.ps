%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUAxxxxxxxxxxUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[153.80809021 99.12724304]
[138.99034119 101.45835114]
[124.17257690 103.78945160]
[109.35482025 106.12055969]
[94.56211090 108.60567474]
[79.79605865 111.24453735]
[65.02999878 113.88340759]
[50.26394653 116.52227020]
[35.49789047 119.16113281]
[20.73183441 121.79999542]
[8.50807381 131.84440613]
[-5.38187885 126.46681976]
[-20.14793396 129.10568237]
[-34.91399002 131.74455261]
[-35.62408447 144.76501465]
[-39.06607056 157.33514404]
[-45.08184814 168.88865662]
[-53.39744186 178.90577698]
[-63.63547897 186.93652344]
[-75.33232117 192.62095642]
[-87.95904541 195.70532227]
[-100.94539642 196.05331421]
[-113.70548248 193.65222168]
[-125.66426849 188.61322021]
[-136.28344727 181.16633606]
[-145.08570862 171.64990234]
[-151.67614746 160.49517822]
[-155.76002502 148.20686340]
[-170.69432068 149.60916138]
[-185.62863159 151.01145935]
[-191.95794678 165.00558472]
[-204.44569397 173.94715881]
[-219.73274231 175.43093872]
[-233.70695496 169.05780029]
[-242.60934448 156.54208374]
[-244.04519653 141.25045776]
[-237.62828064 127.29628754]
[-225.08473206 118.43317413]
[-209.78866577 117.04526520]
[-195.85469055 123.50588226]
[-187.03094482 136.07716370]
[-172.09663391 134.67485046]
[-157.16232300 133.27255249]
[-154.30912781 116.41869354]
[-146.88436890 101.00742340]
[-135.46510315 88.25298309]
[-120.94342041 79.16248322]
[-104.45673370 74.45638275]
[-87.29872894 74.51139832]
[-70.81781769 79.33036041]
[-56.31121063 88.54142761]
[-44.92277527 101.42676544]
[-37.55285263 116.97849274]
[-22.78679848 114.33963013]
[-8.02074337 111.70076752]
[3.14685130 101.84510040]
[18.09297180 107.03394318]
[32.85902786 104.39508057]
[47.62508011 101.75621033]
[62.39113617 99.11734772]
[77.15719604 96.47848511]
[91.92324829 93.83962250]
[98.72364044 89.40805817]
[107.02371979 91.30280304]
[121.84147644 88.97169495]
[136.65922546 86.64059448]
[151.47698975 84.30948639]
[150.76005554 68.12619019]
[151.91374207 51.96908188]
[154.92245483 36.05365753]
[159.74586487 20.59216118]
[166.31941223 5.79075813]
[174.55522156 -8.15321350]
[184.34327698 -21.05387497]
[195.55284119 -32.73928070]
[208.03424072 -43.05372238]
[221.62084961 -51.85977936]
[236.13136292 -59.04018021]
[251.37211609 -64.49934387]
[267.13973999 -68.16464996]
[283.22390747 -69.98741913]
[299.41006470 -69.94355011]
[315.48226929 -68.03384399]
[331.22619629 -64.28398895]
[346.43191528 -58.74420929]
[360.89663696 -51.48859024]
[374.42758179 -42.61410141]
[386.84436035 -32.23929596]
[397.98147583 -20.50271606]
[407.69058228 -7.56105471]
[415.84228516 6.41293955]
[422.32806396 21.23277092]
[436.65066528 16.77595520]
[450.97326660 12.31913948]
[465.29586792 7.86232424]
[479.61846924 3.40550828]
[479.56521606 -11.71033001]
[483.97137451 -26.16982651]
[492.44519043 -38.68725204]
[504.23315430 -48.14956284]
[518.28710938 -53.71538162]
[533.35736084 -54.88979721]
[548.10382080 -51.56837845]
[561.21539307 -44.04647064]
[571.52606201 -32.99290848]
[578.11907959 -19.39057350]
[580.40820312 -4.44897366]
[578.18981934 10.50329399]
[571.66125488 24.13668442]
[561.40301514 35.23892593]
[548.32727051 42.82281113]
[533.59661865 46.21399307]
[518.52099609 45.11092377]
[504.44085693 39.61169052]
[492.60824585 30.20528030]
[484.07528687 17.72810555]
[469.75268555 22.18492126]
[455.43008423 26.64173698]
[441.10748291 31.09855270]
[426.78488159 35.55537033]
[429.53378296 49.19554138]
[430.91580200 63.04176712]
[430.91726685 76.95742035]
[429.53799438 90.80516815]
[426.79147339 104.44835663]
[422.70468140 117.75232697]
[417.31784058 130.58573914]
[410.68399048 142.82192993]
[402.86849976 154.34005737]
[393.94836426 165.02641296]
[384.01156616 174.77545166]
[373.15603638 183.49087524]
[361.48880005 191.08659363]
[349.12500000 197.48753357]
[336.18652344 202.63043213]
[322.80102539 206.46441650]
[309.10058594 208.95152283]
[295.22033691 210.06709290]
[281.29727173 209.80000305]
[267.46881104 208.15275574]
[253.87138367 205.14147949]
[240.63923645 200.79579163]
[227.90296936 195.15843201]
[215.78833008 188.28494263]
[204.41491699 180.24302673]
[193.89503479 171.11195374]
[184.33259583 160.98173523]
[175.82203674 149.95225525]
[168.44744873 138.13227844]
[162.28172302 125.63838959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 62]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[12 55]
[13 54]
[14 53]
[28 43]
[29 42]
[30 41]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
