%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCxxxxxxxxxxUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.31279755 287.43933105]
[83.31279755 272.43933105]
[83.31279755 257.43933105]
[83.31279755 242.43933105]
[83.31279755 227.43933105]
[83.31279755 212.43933105]
[83.31279755 197.43933105]
[83.31279755 182.43933105]
[83.31279755 167.43933105]
[83.31279755 152.43933105]
[75.72289276 139.50128174]
[62.62973785 132.18217468]
[53.54777908 130.70913696]
[49.34262466 124.57216644]
[36.40457153 116.98226166]
[27.71066666 129.21766663]
[17.98344994 140.64880371]
[7.29695129 151.18862915]
[-4.26749611 160.75695801]
[-16.62187767 169.28096008]
[-29.67217064 176.69577026]
[-43.31904984 182.94493103]
[-57.45865250 187.98089600]
[-71.98336792 191.76535034]
[-86.78264618 194.26947021]
[-101.74386597 195.47421265]
[-116.75314331 195.37039185]
[-131.69625854 193.95883179]
[-146.45948792 191.25022888]
[-160.93046570 187.26524353]
[-174.99905396 182.03416443]
[-188.55819702 175.59683228]
[-201.50466919 168.00222778]
[-213.73995972 159.30815125]
[-225.17095947 149.58076477]
[-235.71064758 138.89411926]
[-245.27880859 127.32954407]
[-253.80264282 114.97504425]
[-261.21725464 101.92464447]
[-267.46621704 88.27767944]
[-272.50198364 74.13800812]
[-276.28625488 59.61323929]
[-278.79016113 44.81392288]
[-279.99468994 29.85268974]
[-279.89065552 14.84340858]
[-278.47888184 -0.09969137]
[-275.77008057 -14.86288071]
[-271.78488159 -29.33380127]
[-266.55361938 -43.40232086]
[-260.11608887 -56.96136093]
[-252.52130127 -69.90773773]
[-243.82705688 -82.14290619]
[-234.09951782 -93.57376099]
[-223.41271973 -104.11329651]
[-211.84800720 -113.68129730]
[-199.49339294 -122.20495605]
[-186.44288635 -129.61938477]
[-172.79583740 -135.86816406]
[-158.65608215 -140.90374756]
[-144.13127136 -144.68778992]
[-129.33190918 -147.19149780]
[-114.37066650 -148.39581299]
[-99.36138916 -148.29158020]
[-84.41830444 -146.87959290]
[-69.65515900 -144.17057800]
[-55.18429184 -140.18518066]
[-41.11584473 -134.95370483]
[-27.55689430 -128.51599121]
[-14.61062813 -120.92102814]
[-2.37557817 -112.22660828]
[9.05513763 -102.49890900]
[19.59452248 -91.81196594]
[29.16236496 -80.24711609]
[37.68584824 -67.89237976]
[45.10009766 -54.84177399]
[51.34868622 -41.19463348]
[56.38406372 -27.05481720]
[60.16790009 -12.52994442]
[62.67140198 2.26944184]
[63.87551117 17.23070717]
[63.77106857 32.23998642]
[62.35886765 47.18304825]
[59.64965439 61.94615936]
[55.66404724 76.41696930]
[50.43238449 90.48534393]
[43.99447632 104.04420471]
[56.93253326 111.63410950]
[69.94884491 119.08901978]
[83.04199982 126.40812683]
[72.10529327 110.25563812]
[73.15827179 91.83412170]
[84.49738312 78.64039612]
[100.48999023 75.27623749]
[114.27689362 81.88500977]
[126.88802338 73.76347351]
[139.49914551 65.64192963]
[152.11027527 57.52038574]
[159.12576294 42.69759750]
[175.49023438 41.63165283]
[184.36932373 55.41910172]
[176.62898254 69.87660217]
[160.23182678 70.13151550]
[147.62069702 78.25305939]
[135.00956726 86.37460327]
[122.39843750 94.49613953]
[126.65387726 105.54441071]
[124.96287537 119.02151489]
[139.60636902 122.27233887]
[154.24987793 125.52316284]
[168.89337158 128.77398682]
[183.53688049 132.02481079]
[187.76477051 130.51272583]
[191.83529663 130.47021484]
[195.29490662 131.65892029]
[197.81820679 133.71487427]
[199.23846436 136.20288086]
[213.56106567 140.65969849]
[227.43380737 133.08851624]
[242.57316589 137.62449646]
[249.99725342 151.57650757]
[245.30146790 166.66708374]
[231.27174377 173.94323730]
[216.23165894 169.08816528]
[209.10424805 154.98228455]
[194.78164673 150.52548218]
[180.28605652 146.66831970]
[165.64254761 143.41749573]
[150.99905396 140.16667175]
[136.35554504 136.91583252]
[121.71205139 133.66500854]
[115.86223602 138.35859680]
[127.15458679 148.23193359]
[138.44694519 158.10527039]
[150.53857422 166.98178101]
[150.86048889 181.97831726]
[139.16090393 191.36553955]
[124.59051514 187.80131531]
[118.54537964 174.07322693]
[111.35399628 160.90950012]
[104.16261292 147.74575806]
[98.31279755 152.43933105]
[98.31279755 167.43933105]
[98.31279755 182.43933105]
[98.31279755 197.43933105]
[98.31279755 212.43933105]
[98.31279755 227.43933105]
[98.31279755 242.43933105]
[98.31279755 257.43933105]
[98.31279755 272.43933105]
[98.31279755 287.43933105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 89]
[12 88]
[14 87]
[15 86]
[94 105]
[95 104]
[96 103]
[97 102]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
