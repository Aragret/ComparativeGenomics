%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGxxxxxxxxxxCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[204.68577576 356.62210083]
[203.75015259 341.65130615]
[202.81451416 326.68051147]
[201.87889099 311.70971680]
[200.94326782 296.73892212]
[200.00762939 281.76815796]
[199.07200623 266.79736328]
[194.31819153 252.57057190]
[186.06590271 240.04461670]
[177.81361389 227.51864624]
[169.56132507 214.99269104]
[161.30903625 202.46672058]
[152.92689514 190.02728271]
[144.41580200 177.67572021]
[135.90470886 165.32414246]
[121.25535583 162.88856506]
[112.44795227 150.48355103]
[115.10193634 135.13447571]
[106.59085083 122.78290558]
[98.07975769 110.43133545]
[88.93802643 98.53895569]
[79.19037628 87.13793182]
[66.92800140 78.49881744]
[52.91129303 73.15730286]
[38.89457703 67.81578827]
[24.87786484 62.47427750]
[10.86115265 57.13276291]
[-3.15556049 51.79125214]
[-17.17227364 46.44974136]
[-31.45515442 52.66561127]
[-45.59400177 47.04888535]
[-51.43186569 33.39403534]
[-60.63145447 33.25458145]
[-65.68270111 27.79284859]
[-79.58525848 22.16089058]
[-93.99436188 28.07828140]
[-108.01329803 22.16862869]
[-113.56582642 8.39528561]
[-127.46838379 2.76332855]
[-141.37094116 -2.86862826]
[-152.30615234 7.73047447]
[-166.60923767 12.95938683]
[-181.80210876 11.91216850]
[-195.25250244 4.77025604]
[-204.63005066 -7.22897053]
[-208.31004333 -22.00657272]
[-205.65490723 -37.00224304]
[-197.12463379 -49.61788940]
[-184.19717407 -57.66777420]
[-169.11227417 -59.75720596]
[-154.48348999 -55.52418137]
[-142.84535217 -45.70209503]
[-136.21421814 -31.99268341]
[-135.73898315 -16.77118492]
[-121.83642578 -11.13922787]
[-107.93386841 -5.50727081]
[-94.36077881 -11.53278351]
[-80.18138123 -6.01922560]
[-73.95330048 8.25833511]
[-60.05074310 13.89029217]
[-46.09035492 19.37732315]
[-32.64555359 13.07074356]
[-18.35452271 18.28812408]
[-11.83076096 32.43302536]
[2.18595219 37.77453995]
[16.20266533 43.11605072]
[30.21937752 48.45756531]
[44.23609161 53.79907608]
[58.25280380 59.14059067]
[72.26951599 64.48210144]
[63.06302261 52.63978577]
[56.89588165 38.96622086]
[54.11320877 24.22658920]
[54.87072372 9.24572945]
[59.12603760 -5.13802195]
[66.64101410 -18.11974144]
[76.99512482 -28.97296715]
[89.60893250 -37.09034348]
[103.77657318 -42.01761627]
[118.70520782 -43.47905731]
[133.55943298 -41.39287949]
[147.50798035 -35.87582779]
[159.77029419 -27.23663712]
[169.66017151 -15.95876694]
[176.62416077 -2.67332959]
[180.27256775 11.87621403]
[180.40119934 26.87566185]
[177.00286865 41.48563766]
[170.26776123 54.88855743]
[160.57276917 66.33438873]
[148.46041870 75.18261719]
[134.60853577 80.93807983]
[119.79228210 83.27871704]
[104.84077454 82.07352448]
[90.59139252 77.39028168]
[100.33904266 88.79129791]
[104.45250702 74.36634064]
[118.21157074 68.39237213]
[131.55946350 75.23588562]
[134.73997498 89.89482117]
[125.42838287 101.65468597]
[110.43132782 101.92024231]
[118.94242096 114.27181244]
[127.45351410 126.62339020]
[142.74150085 129.60919189]
[151.19700623 142.25668335]
[148.25628662 156.81304932]
[156.76737976 169.16462708]
[165.27845764 181.51618958]
[172.77462769 186.85092163]
[173.83499146 194.21443176]
[182.08728027 206.74040222]
[190.33956909 219.26635742]
[198.59185791 231.79232788]
[206.84414673 244.31828308]
[206.31996155 229.32745361]
[209.20246887 214.60700989]
[215.34208679 200.92106628]
[224.42010498 188.97998047]
[235.96533203 179.40356445]
[249.37849426 172.68888855]
[263.96337891 169.18447876]
[278.96298218 169.07225037]
[293.59866333 172.35801697]
[307.11080933 178.87124634]
[318.79803467 188.27383423]
[328.05371094 200.07774353]
[334.39743042 213.67028809]
[337.49987793 228.34594727]
[337.20007324 243.34294128]
[333.51351929 257.88287354]
[326.63162231 271.21099854]
[316.91156006 282.63555908]
[304.85784912 291.56350708]
[291.09619141 297.53146362]
[276.34085083 300.22964478]
[261.35775757 299.51800537]
[246.92457581 295.43347168]
[233.79049683 288.18807983]
[222.63725281 278.15786743]
[214.04280090 265.86172485]
[214.97842407 280.83251953]
[215.91406250 295.80331421]
[216.84968567 310.77410889]
[217.78530884 325.74490356]
[218.72094727 340.71566772]
[219.65657043 355.68646240]
[229.17190552 369.04275513]
[222.11746216 383.84704590]
[205.75024414 384.86993408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 109]
[14 108]
[15 107]
[18 104]
[19 103]
[20 102]
[21 96]
[22 95]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[32 61]
[34 60]
[35 59]
[38 56]
[39 55]
[40 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
