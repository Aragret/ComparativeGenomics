%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACxxxxxxxxxxUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.05334473 276.58190918]
[95.05334473 261.58190918]
[95.05334473 246.58189392]
[95.05334473 231.58189392]
[95.05334473 216.58189392]
[95.05334473 201.58189392]
[95.05334473 186.58189392]
[95.05334473 171.58189392]
[95.05334473 156.58189392]
[95.05334473 141.58189392]
[80.61118317 135.18215942]
[70.13347626 124.24242401]
[64.84183502 110.74290466]
[65.07916260 96.89326477]
[70.32287598 84.77493286]
[79.33300781 76.02845001]
[72.50943756 62.67034531]
[65.68585968 49.31224823]
[58.72550201 36.02490616]
[51.62910080 22.80972290]
[44.53269577 9.59454060]
[37.43629456 -3.62064242]
[23.64384460 -4.46984959]
[12.17184830 -11.97722244]
[5.97123766 -24.08333015]
[6.57321644 -37.56311417]
[13.71258926 -48.88484192]
[6.88901329 -62.24294281]
[0.06543814 -75.60104370]
[-6.75813723 -88.95913696]
[-16.20481682 -87.40992737]
[-25.73475456 -88.09917450]
[-34.82579803 -90.98071289]
[-42.98180389 -95.88847351]
[-49.75970840 -102.54606628]
[-54.79359818 -110.58229065]
[-57.81445694 -119.55187988]
[-58.66452408 -128.96014404]
[-57.30553436 -138.29023743]
[-70.86743164 -144.69921875]
[-84.42932892 -151.10818481]
[-97.99122620 -157.51716614]
[-104.70059967 -157.35342407]
[-109.70313263 -160.21044922]
[-111.97005463 -164.47779846]
[-125.25739288 -171.43815613]
[-138.54473877 -178.39851379]
[-154.22482300 -175.00523376]
[-166.56256104 -185.25997925]
[-166.09349060 -201.29617310]
[-153.17744446 -210.81222534]
[-137.72250366 -206.50822449]
[-131.58438110 -191.68585205]
[-118.29703522 -184.72549438]
[-105.00969696 -177.76513672]
[-91.58224487 -171.07905579]
[-78.02034760 -164.67008972]
[-64.45845795 -158.26110840]
[-50.89655685 -151.85212708]
[-42.91175461 -160.05632019]
[-32.93891525 -165.67842102]
[-21.78606606 -168.26292419]
[-20.24877357 -183.18394470]
[-18.71148109 -198.10496521]
[-33.06941605 -202.62542725]
[-46.22330856 -209.94390869]
[-57.63451385 -219.76068115]
[-66.83576202 -231.67378235]
[-73.45024872 -245.19537354]
[-77.20713043 -259.77175903]
[-77.95256042 -274.80603027]
[-75.65601349 -289.68252563]
[-70.41153717 -303.79211426]
[-62.43387604 -316.55697632]
[-52.04972458 -327.45443726]
[-39.68429565 -336.03820801]
[-25.84395599 -341.95678711]
[-11.09545231 -344.96786499]
[3.95727205 -344.94808960]
[18.69781685 -341.89831543]
[32.52256393 -335.94335938]
[44.86540222 -327.32714844]
[55.22090149 -316.40246582]
[63.16500473 -303.61669922]
[68.37240601 -289.49340820]
[70.62987518 -274.61090088]
[69.84496307 -259.57864380]
[66.04980469 -245.01217651]
[59.39982224 -231.50801086]
[50.16732407 -219.61911011]
[38.73036957 -209.83233643]
[25.55730057 -202.54844666]
[11.18754482 -198.06570435]
[-3.79046535 -196.56767273]
[-5.32775784 -181.64665222]
[-6.86505032 -166.72563171]
[11.67407990 -155.18136597]
[21.51231956 -135.57807922]
[19.67352486 -113.62751007]
[6.59996223 -95.78271484]
[13.42353725 -82.42461395]
[20.24711227 -69.06652069]
[27.07068825 -55.70841599]
[43.33396149 -53.69444656]
[55.32762146 -42.28550720]
[58.20844650 -25.81646347]
[50.65147781 -10.71704578]
[57.74787903 2.49813724]
[64.84428406 15.71331978]
[71.94068909 28.92850304]
[77.91279602 33.36089706]
[79.04396057 42.48867416]
[85.86753082 55.84677124]
[92.69110870 69.20487213]
[115.41961670 68.51425934]
[135.01358032 84.07035828]
[140.45190430 110.82436371]
[154.38262939 116.38629913]
[168.31333923 121.94823456]
[182.24406433 127.51017761]
[196.17477417 133.07211304]
[211.42454529 128.08972168]
[224.74827576 137.02601624]
[225.92517090 153.02584839]
[214.05238342 163.81550598]
[198.23773193 161.11808777]
[190.61283875 147.00282288]
[176.68211365 141.44088745]
[162.75140381 135.87895203]
[148.82069397 130.31701660]
[134.88996887 124.75508118]
[128.68081665 128.96179199]
[138.23963928 140.52159119]
[147.79844666 152.08139038]
[161.42890930 158.34323120]
[165.77516174 172.69976807]
[157.90649414 185.47019958]
[143.12884521 188.04328918]
[131.40693665 178.68395996]
[130.64526367 163.70266724]
[123.45388031 150.53894043]
[116.26249695 137.37519836]
[110.05334473 141.58189392]
[110.05334473 156.58189392]
[110.05334473 171.58189392]
[110.05334473 186.58189392]
[110.05334473 201.58189392]
[110.05334473 216.58189392]
[110.05334473 231.58189392]
[110.05334473 246.58189392]
[110.05334473 261.58190918]
[110.05334473 276.58190918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 114]
[17 113]
[18 112]
[19 110]
[20 109]
[21 108]
[22 107]
[27 103]
[28 102]
[29 101]
[30 100]
[39 59]
[40 58]
[41 57]
[42 56]
[45 55]
[46 54]
[47 53]
[62 96]
[63 95]
[64 94]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
