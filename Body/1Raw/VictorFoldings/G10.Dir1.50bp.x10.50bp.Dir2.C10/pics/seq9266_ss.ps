%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAxxxxxxxxxxGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.97038269 346.97341919]
[162.97038269 331.97341919]
[162.97038269 316.97341919]
[162.97038269 301.97341919]
[162.97038269 286.97341919]
[162.97038269 271.97341919]
[162.97038269 256.97341919]
[162.97038269 241.97343445]
[162.97038269 226.97343445]
[162.97038269 211.97343445]
[145.45480347 206.73292542]
[132.46228027 194.94598389]
[126.11141968 179.38998413]
[127.06157684 163.35534668]
[134.49418640 149.95516968]
[124.51145935 138.75941467]
[114.52873230 127.56364441]
[106.69393158 132.71527100]
[97.10174561 135.50978088]
[86.49549103 135.37243652]
[75.79854584 131.97023010]
[66.03452301 125.26589203]
[51.80774689 130.01971436]
[37.58096695 134.77352905]
[23.35418892 139.52734375]
[9.12740898 144.28115845]
[3.55902886 158.89372253]
[-10.12447357 166.46311951]
[-25.46216774 163.41529846]
[-35.21206284 151.18936157]
[-34.77055740 135.55801392]
[-24.34611511 123.90190125]
[-8.86083984 121.72467804]
[4.37359428 130.05436707]
[18.60037422 125.30056000]
[32.82715225 120.54674530]
[47.05393219 115.79293060]
[61.28071213 111.03911591]
[62.05950165 103.57965851]
[49.91795349 94.77154541]
[63.61708069 88.66074371]
[64.39587402 81.20128632]
[51.45781708 73.61138153]
[38.51976013 66.02147675]
[25.58170509 58.43156433]
[12.64364910 50.84165573]
[-0.29440719 43.25174713]
[-15.52306652 47.47826767]
[-29.23863792 39.62596512]
[-33.30391312 24.35347176]
[-25.30704117 10.72168636]
[-9.99242020 6.81810617]
[3.55405498 14.95865631]
[7.29550123 30.31369209]
[20.23355675 37.90359879]
[33.17161179 45.49350739]
[46.10966873 53.08341599]
[59.04772568 60.67332458]
[71.98577881 68.26323700]
[81.23124695 66.26159668]
[89.95295715 66.59526825]
[97.61400604 68.93320465]
[100.09912109 54.14049911]
[102.58424377 39.34779358]
[105.06935883 24.55508423]
[99.72532654 9.66375065]
[109.46427917 -1.60576296]
[111.94940186 -16.39846992]
[114.43451691 -31.19117737]
[116.91963959 -45.98388290]
[103.49699402 -52.96154404]
[92.88895416 -63.74694061]
[86.13479614 -77.28343201]
[83.89622498 -92.24484253]
[86.39254761 -107.16542053]
[93.37919617 -120.58338928]
[104.17169952 -131.18418884]
[117.71271515 -137.92927551]
[132.67562866 -140.15782166]
[147.59452820 -137.65150452]
[161.00781250 -130.65586853]
[171.60137939 -119.85626984]
[178.33738708 -106.31073761]
[180.55590820 -91.34633636]
[178.03959656 -76.42911530]
[171.03497314 -63.02052307]
[160.22827148 -52.43419266]
[146.67823792 -45.70726013]
[131.71234131 -43.49876785]
[129.22723389 -28.70605850]
[126.74211121 -13.91335201]
[124.25698853 0.87935555]
[129.77877808 14.71261692]
[119.86206818 27.04020309]
[117.37694550 41.83290863]
[114.89183044 56.62561798]
[112.40670776 71.41832733]
[129.93733215 91.36315918]
[125.72450256 117.58091736]
[135.70722961 128.77668762]
[145.68995667 139.97244263]
[164.36355591 133.69709778]
[184.59593201 138.86489868]
[199.58882141 155.05326843]
[203.61285400 177.95031738]
[218.37890625 180.58918762]
[233.14495850 183.22804260]
[247.91101074 185.86691284]
[256.97576904 184.29138184]
[262.95544434 188.71733093]
[272.05099487 187.33071899]
[277.93731689 191.88011169]
[292.58081055 195.13093567]
[307.22430420 198.38175964]
[318.75924683 188.00270081]
[334.19534302 186.41941833]
[347.59707642 194.24070740]
[353.81124878 208.45913696]
[350.44836426 223.60742188]
[338.80151367 233.86074829]
[323.34918213 235.27648926]
[310.03305054 227.31027222]
[303.97348022 213.02526855]
[289.32998657 209.77444458]
[274.68649292 206.52362061]
[260.00994873 203.42529297]
[245.27215576 200.63296509]
[230.50610352 197.99411011]
[215.74003601 195.35523987]
[200.97398376 192.71636963]
[195.22308350 197.53063965]
[206.91638184 206.92568970]
[221.59481812 210.01493835]
[230.28143311 222.24369812]
[228.36529541 237.12081909]
[216.86349487 246.74934387]
[201.88131714 246.01837158]
[191.37145996 235.31590271]
[190.91265869 220.32290649]
[183.72128296 207.15916443]
[177.97038269 211.97343445]
[177.97038269 226.97343445]
[177.97038269 241.97343445]
[177.97038269 256.97341919]
[177.97038269 271.97341919]
[177.97038269 286.97341919]
[177.97038269 301.97341919]
[177.97038269 316.97341919]
[177.97038269 331.97341919]
[177.97038269 346.97341919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 101]
[16 100]
[17 99]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[62 97]
[63 96]
[64 95]
[65 94]
[67 92]
[68 91]
[69 90]
[70 89]
[105 130]
[106 129]
[107 128]
[108 127]
[110 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
