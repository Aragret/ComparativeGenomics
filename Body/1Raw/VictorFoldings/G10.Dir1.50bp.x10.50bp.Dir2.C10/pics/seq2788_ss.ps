%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCUUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAxxxxxxxxxxAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.42899323 287.40039062]
[96.42899323 272.40039062]
[96.42899323 257.40039062]
[96.42899323 242.40039062]
[96.42899323 227.40039062]
[96.42899323 212.40039062]
[96.42899323 197.40039062]
[96.42899323 182.40039062]
[96.42899323 167.40039062]
[96.42899323 152.40039062]
[82.83804321 146.05325317]
[71.33624268 155.68177795]
[65.72103882 170.47299194]
[50.99534607 172.70979309]
[39.49354172 182.33831787]
[42.80110550 197.28216553]
[38.77386475 212.04833984]
[28.33725166 223.24368286]
[13.88952160 228.29559326]
[-1.24934053 226.04315186]
[-13.60053635 217.00399780]
[-20.32585144 203.25521851]
[-19.87985611 187.95620728]
[-12.36503983 174.62255859]
[0.49175018 166.31825256]
[15.73611641 164.95155334]
[29.86501694 170.83651733]
[41.36682129 161.20799255]
[46.15933990 147.10546875]
[61.70771790 144.17997742]
[73.20951843 134.55145264]
[64.42921448 96.45140839]
[87.65297699 75.12178802]
[84.86064911 60.38397980]
[82.06832886 45.64617538]
[79.27600098 30.90836906]
[63.00862503 26.90398979]
[50.46980667 14.89045143]
[45.42726517 -2.36519194]
[49.81034470 -20.43071938]
[36.56775665 -27.47585297]
[23.32517242 -34.52098846]
[10.08258724 -41.56612396]
[-3.15999866 -48.61125946]
[-16.40258408 -55.65639496]
[-29.64517021 -62.70152664]
[-44.68482971 -57.84517670]
[-58.71517181 -65.12014008]
[-63.41224289 -80.21030426]
[-55.98935318 -94.16294098]
[-40.85037231 -98.70021057]
[-26.97698975 -91.13021851]
[-22.60003471 -75.94411469]
[-9.35744953 -68.89897919]
[3.88513613 -61.85384369]
[17.12772179 -54.80870819]
[30.37030792 -47.76357269]
[43.61289215 -40.71843719]
[56.85548019 -33.67330551]
[70.37966919 -40.16146851]
[73.17198944 -54.89927673]
[75.96431732 -69.63707733]
[61.87480545 -74.89005280]
[48.87580490 -82.44875336]
[37.34131241 -92.09569550]
[27.60320663 -103.55332184]
[19.94166946 -116.49198151]
[14.57713985 -130.53939819]
[11.66396332 -145.29139709]
[11.28596020 -160.32353210]
[13.45400524 -175.20330811]
[18.10572052 -189.50257874]
[25.10726547 -202.80996704]
[34.25719452 -214.74256897]
[45.29224014 -224.95704651]
[57.89490891 -233.15953064]
[71.70259094 -239.11401367]
[86.31801605 -242.64916992]
[101.32067108 -243.66329956]
[116.27889252 -242.12719727]
[130.76231384 -238.08508301]
[144.35420227 -231.65324402]
[156.66349792 -223.01675415]
[167.33604431 -212.42407227]
[176.06477356 -200.17999268]
[182.59852600 -186.63681030]
[186.74932861 -172.18417358]
[188.39775085 -157.23789978]
[187.49635315 -142.22805786]
[184.07109070 -127.58648682]
[178.22050476 -113.73446655]
[170.11291504 -101.07053375]
[159.98161316 -89.95906830]
[148.11808777 -80.71975708]
[134.86367798 -73.61844635]
[120.59973907 -68.85944366]
[105.73667908 -66.57968903]
[90.70212555 -66.84475708]
[87.90979767 -52.10694885]
[85.11747742 -37.36914444]
[99.60826874 -31.53954506]
[110.06355286 -20.39950562]
[114.74836731 -6.21692276]
[113.06381989 8.28029442]
[105.60832214 20.42814445]
[94.01380920 28.11604309]
[96.80612946 42.85385132]
[99.59845734 57.59165573]
[102.39078522 72.32946014]
[122.21859741 75.47969818]
[137.75274658 92.95057678]
[139.07092285 119.62132263]
[153.56651306 123.47847748]
[168.06210327 127.33563995]
[183.38781738 123.40715027]
[193.69752502 134.15701294]
[208.19311523 138.01417542]
[223.87652588 133.22222900]
[235.68197632 144.60481262]
[231.46502686 160.45251465]
[215.56372070 164.46255493]
[204.33595276 152.50976562]
[189.84036255 148.65260315]
[175.55146790 152.85697937]
[164.20495605 141.83123779]
[149.70935059 137.97407532]
[135.21376038 134.11691284]
[129.26756287 138.68778992]
[140.13943481 149.02232361]
[151.01129150 159.35685730]
[161.88314819 169.69139099]
[174.68167114 177.51429749]
[178.35086060 192.05860901]
[170.79484558 205.01647949]
[156.32968140 208.98626709]
[143.21801758 201.70036316]
[138.94934082 187.32073975]
[131.75794983 174.15699768]
[124.56656647 160.99325562]
[117.37518311 147.82951355]
[111.42899323 152.40039062]
[111.42899323 167.40039062]
[111.42899323 182.40039062]
[111.42899323 197.40039062]
[111.42899323 212.40039062]
[111.42899323 227.40039062]
[111.42899323 242.40039062]
[111.42899323 257.40039062]
[111.42899323 272.40039062]
[111.42899323 287.40039062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 31]
[12 30]
[14 28]
[15 27]
[33 109]
[34 108]
[35 107]
[36 106]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[60 100]
[61 99]
[62 98]
[112 127]
[113 126]
[114 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
