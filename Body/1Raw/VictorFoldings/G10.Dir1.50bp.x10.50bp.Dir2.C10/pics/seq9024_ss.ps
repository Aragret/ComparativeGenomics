%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACxxxxxxxxxxCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.11589813 137.52964783]
[84.67608643 148.30046082]
[74.23627472 159.07127380]
[63.79646301 169.84207153]
[53.35665131 180.61288452]
[42.91683960 191.38369751]
[32.70335770 202.36935425]
[22.72063255 213.56512451]
[12.73790646 224.76089478]
[2.75517964 235.95666504]
[-7.22754669 247.15242004]
[-1.32334912 261.22732544]
[-2.11930227 276.46969604]
[-9.45736885 289.85308838]
[-21.88057137 298.72027588]
[-36.92227173 301.31063843]
[-51.59593201 297.10986328]
[-62.98808670 286.95202637]
[-68.83680725 272.85397339]
[-67.98084259 257.61486816]
[-60.59012604 244.26046753]
[-48.13210297 235.44229126]
[-33.08031464 232.91117859]
[-18.42331314 237.16969299]
[-8.44058609 225.97393799]
[1.54214036 214.77816772]
[11.52486706 203.58239746]
[21.50759315 192.38662720]
[22.12512970 187.59141541]
[25.80346489 183.15281677]
[32.14603043 180.94387817]
[42.58584213 170.17308044]
[53.02565384 159.40226746]
[63.46546936 148.63145447]
[73.90528107 137.86065674]
[84.34509277 127.08984375]
[83.25667572 119.66923523]
[69.81451416 126.32569885]
[59.33001328 115.59838867]
[66.29241943 102.31211853]
[81.07983398 104.82803345]
[79.99141693 97.40743256]
[66.89826202 90.08832550]
[57.81630325 88.61528015]
[53.61115265 82.47831726]
[40.67309570 74.88840485]
[27.73504066 67.29850006]
[14.79698467 59.70859146]
[-1.59659255 60.13599777]
[-9.93163586 46.01299667]
[-1.63376737 31.86812592]
[14.76087666 32.25241089]
[22.38689232 46.77053452]
[35.32494736 54.36044312]
[48.26300430 61.95035172]
[61.20106125 69.54026031]
[74.21736908 76.99517059]
[87.31052399 84.31427765]
[93.57350159 80.18813324]
[106.09946442 71.93584442]
[112.36244965 67.80970001]
[110.80487061 52.89078522]
[109.24728394 37.97187424]
[107.68970490 23.05296135]
[92.93032074 19.67074585]
[80.07016754 11.67730808]
[70.50420380 -0.06028596]
[65.27008820 -14.26882935]
[64.93556213 -29.40708733]
[69.53693390 -43.83296967]
[78.57505798 -55.98167419]
[91.06956482 -64.53539276]
[105.66513824 -68.56627655]
[120.77854919 -67.63710022]
[134.77043152 -61.84864426]
[146.12301636 -51.82879639]
[153.60488892 -38.66444016]
[156.40446472 -23.78354263]
[154.21806335 -8.80027390]
[147.28285217 4.66009474]
[136.35110474 15.13748169]
[122.60861969 21.49538040]
[124.16619873 36.41429138]
[125.72377777 51.33320236]
[127.28135681 66.25211334]
[133.90264893 69.77468109]
[139.68824768 55.93536377]
[145.47386169 42.09604263]
[147.05685425 27.17980385]
[160.30543518 20.14594650]
[173.54801941 27.19107246]
[175.11831665 42.10865021]
[163.63293457 51.75677490]
[155.38908386 64.28829956]
[147.14523315 76.81981659]
[153.76652527 80.34238434]
[167.00912476 73.29724884]
[180.25170898 66.25211334]
[184.62866211 51.06600952]
[198.50204468 43.49601746]
[213.64102173 48.03328705]
[221.06391907 61.98592758]
[216.36683655 77.07609558]
[202.33650208 84.35105133]
[187.29684448 79.49470520]
[174.05424500 86.53983307]
[160.81166077 93.58496857]
[175.53457642 90.71516418]
[190.50016785 89.69960022]
[205.47579956 90.55407715]
[220.22874451 93.26530457]
[234.52967834 97.79114532]
[248.15634155 104.06125641]
[260.89691162 111.97817993]
[272.55337524 121.41886902]
[282.94458008 132.23658752]
[291.90899658 144.26319885]
[299.30728149 157.31176758]
[305.02447510 171.17948914]
[308.97167969 185.65083313]
[311.08758545 200.50083923]
[311.33929443 215.49873352]
[309.72286987 230.41137695]
[306.26342773 245.00701904]
[301.01480103 259.05877686]
[294.05850220 272.34823608]
[285.50268555 284.66885376]
[275.48031616 295.82916260]
[264.14718628 305.65567017]
[251.67942810 313.99563599]
[238.27082825 320.71945190]
[224.12980652 325.72259521]
[209.47615051 328.92730713]
[194.53761292 330.28381348]
[179.54638672 329.77096558]
[164.73545837 327.39678955]
[150.33506775 323.19818115]
[136.56900024 317.24035645]
[123.65124512 309.61596680]
[111.78256226 300.44348145]
[101.14744568 289.86547852]
[91.91117096 278.04635620]
[84.21731567 265.16986084]
[78.18544769 251.43606567]
[73.90933228 237.05848694]
[71.45542145 222.26057434]
[70.86186981 207.27232361]
[72.13788605 192.32669067]
[75.26364899 177.65599060]
[80.19057465 163.48822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[42 58]
[43 57]
[45 56]
[46 55]
[47 54]
[48 53]
[61 85]
[62 84]
[63 83]
[64 82]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
