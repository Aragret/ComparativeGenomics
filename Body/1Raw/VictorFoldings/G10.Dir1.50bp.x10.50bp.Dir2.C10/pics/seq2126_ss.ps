%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUxxxxxxxxxxUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[241.69277954 555.80438232]
[241.06880188 540.81738281]
[240.44482422 525.83038330]
[239.82084656 510.84335327]
[239.19686890 495.85635376]
[238.57289124 480.86932373]
[237.94891357 465.88232422]
[237.32493591 450.89529419]
[233.77017212 436.32260132]
[227.42303467 422.73162842]
[215.02711487 414.47390747]
[216.19816589 398.69610596]
[209.85102844 385.10513306]
[203.50390625 371.51419067]
[191.10797119 363.25646973]
[192.27903748 347.47863770]
[185.93190002 333.88769531]
[179.58477783 320.29675293]
[173.23764038 306.70578003]
[162.89215088 305.91189575]
[153.75524902 300.82601929]
[147.53359985 292.32049561]
[145.42160034 281.91339111]
[147.87258911 271.49749756]
[154.50360107 262.99630737]
[149.01657104 249.03590393]
[143.52954102 235.07551575]
[138.04249573 221.11512756]
[132.55546570 207.15473938]
[127.06844330 193.19435120]
[121.58140564 179.23396301]
[110.58889771 174.08886719]
[105.92374420 162.45033264]
[110.60910797 150.38793945]
[105.41369629 136.31642151]
[100.21827698 122.24490356]
[87.31046295 118.27181244]
[79.07957458 107.56434631]
[78.55924988 94.06891632]
[66.29688263 85.42980194]
[54.03451538 76.79068756]
[41.77214432 68.15156555]
[44.79162598 82.84452057]
[38.74467087 96.57165527]
[25.86551285 104.26107788]
[10.91274166 103.07170105]
[-0.58889115 93.44297028]
[-4.38976049 78.93251038]
[0.91447914 64.90165710]
[13.36401653 56.53451538]
[28.35816765 56.92229843]
[17.69654274 46.37100983]
[2.40567517 49.01089859]
[-11.50168419 42.12867737]
[-18.67787361 28.37070084]
[-16.36350060 13.02719116]
[-5.44849014 1.99804044]
[9.87011433 -0.47581691]
[23.70199776 6.55686760]
[30.72851562 20.39188385]
[28.24783325 35.70938492]
[38.90945816 46.26067352]
[50.41126251 55.88920212]
[62.67362976 64.52831268]
[74.93599701 73.16743469]
[87.19836426 81.80654907]
[92.51236725 79.05199432]
[98.36841583 77.81393433]
[102.37615967 63.35924911]
[106.38389587 48.90456009]
[93.30466461 41.39559555]
[82.50431824 30.86928177]
[74.66178131 17.98730278]
[70.27002716 3.55943537]
[69.60514069 -11.50737381]
[72.70891571 -26.26601219]
[79.38623810 -39.78874207]
[89.21736908 -51.22550583]
[101.58432007 -59.85738754]
[115.70969391 -65.14177704]
[130.70555115 -66.74649048]
[145.62924194 -64.57065582]
[159.54264832 -58.75104904]
[171.57116699 -49.65349197]
[180.95867920 -37.84986877]
[187.11506653 -24.08216667]
[189.65333557 -9.21582890]
[188.41394043 5.81463051]
[183.47477722 20.06438446]
[175.14633179 32.63768387]
[163.95213318 42.74415588]
[150.59587097 49.74850082]
[135.91711426 53.21042252]
[120.83858490 52.91230011]
[116.83084869 67.36698914]
[112.82310486 81.82167816]
[122.22672272 99.07460022]
[114.28980255 117.04949188]
[119.48521423 131.12101746]
[124.68063354 145.19253540]
[139.10432434 156.59150696]
[135.54179382 173.74693298]
[141.02882385 187.70732117]
[146.51585388 201.66770935]
[152.00289917 215.62809753]
[157.48992920 229.58848572]
[162.97695923 243.54887390]
[168.46398926 257.50927734]
[187.25065613 264.45965576]
[194.84976196 282.66598511]
[186.82859802 300.35867310]
[193.17572021 313.94961548]
[199.52285767 327.54055786]
[205.86997986 341.13153076]
[218.71989441 350.36135864]
[217.09484863 365.16705322]
[223.44198608 378.75802612]
[229.78910828 392.34896851]
[242.63903809 401.57882690]
[241.01399231 416.38452148]
[247.36111450 429.97546387]
[249.04864502 415.07067871]
[254.97792053 401.29232788]
[264.64135742 389.81982422]
[277.21176147 381.63537598]
[291.61297607 377.43951416]
[306.61218262 377.59152222]
[320.92541504 382.07830811]
[333.32736206 390.51583862]
[342.75634766 402.18179321]
[348.40521240 416.07748413]
[349.79034424 431.01339722]
[346.79321289 445.71090698]
[339.67037964 458.91186523]
[329.03158569 469.48617554]
[315.78756714 476.52862549]
[301.07208252 479.43634033]
[286.14486694 477.96038818]
[272.28378296 472.22717285]
[260.67538452 462.72741699]
[252.31195068 450.27133179]
[252.93592834 465.25833130]
[253.55990601 480.24536133]
[254.18388367 495.23236084]
[254.80786133 510.21939087]
[255.43183899 525.20642090]
[256.05581665 540.19342041]
[256.67977905 555.18041992]
[263.37979126 570.75433350]
[250.26925659 581.50378418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 121]
[10 120]
[12 118]
[13 117]
[14 116]
[16 114]
[17 113]
[18 112]
[19 111]
[25 108]
[26 107]
[27 106]
[28 105]
[29 104]
[30 103]
[31 102]
[34 100]
[35 99]
[36 98]
[39 66]
[40 65]
[41 64]
[42 63]
[51 62]
[52 61]
[68 96]
[69 95]
[70 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
