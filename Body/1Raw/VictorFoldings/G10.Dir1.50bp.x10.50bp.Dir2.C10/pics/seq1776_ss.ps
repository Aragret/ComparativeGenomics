%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGUGUACUGGAAAGUGCACUUGGACGAACCAGAGUGUAGCUUAACACAAAGCACCCAACxxxxxxxxxxCAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.97265625]
[92.50000000 239.97265625]
[92.50000000 224.97265625]
[92.50000000 209.97265625]
[92.50000000 194.97265625]
[92.50000000 179.97265625]
[92.50000000 164.97265625]
[92.50000000 149.97265625]
[92.50000000 134.97265625]
[92.50000000 119.97264862]
[78.97580719 113.48448181]
[67.27618408 122.87164307]
[55.57656097 132.25880432]
[43.87693787 141.64596558]
[32.17731476 151.03312683]
[20.47769165 160.42028809]
[8.77806854 169.80744934]
[-2.92155528 179.19461060]
[-14.62117863 188.58177185]
[-20.05955696 204.05291748]
[-36.22487640 206.81236267]
[-46.48763657 194.02143860]
[-40.29039764 178.83834839]
[-24.00834084 176.88215637]
[-12.30871677 167.49499512]
[-0.60909355 158.10783386]
[11.09053040 148.72067261]
[22.79015350 139.33351135]
[34.48977661 129.94635010]
[46.18939972 120.55918121]
[57.88902283 111.17201996]
[69.58864594 101.78485870]
[74.04546356 87.46226501]
[69.73787689 73.09407806]
[65.43029785 58.72589493]
[60.97348022 44.40329742]
[56.36791611 30.12783813]
[51.76235199 15.85237694]
[39.11344528 11.11287689]
[31.63023376 0.10244971]
[31.87198448 -13.01303291]
[39.52503586 -23.42589188]
[35.21744919 -37.79407501]
[30.90986443 -52.16225815]
[26.60227966 -66.53044128]
[22.29469681 -80.89862823]
[17.90569687 -66.55510712]
[8.44445133 -54.91530991]
[-4.69979954 -47.68836594]
[-19.59702301 -45.93544769]
[-34.05978775 -49.91394043]
[-45.96446228 -59.03966141]
[-53.56301880 -71.97264099]
[-55.73973083 -86.81386566]
[-52.17497635 -101.38412476]
[-43.39219284 -113.54400635]
[-30.68099022 -121.50801086]
[-15.90781879 -124.10674286]
[-1.24189377 -120.95862579]
[11.16331768 -112.52590942]
[19.48604393 -100.04741669]
[19.48604393 -115.04741669]
[19.48604393 -130.04742432]
[19.48604393 -145.04742432]
[19.48604393 -160.04742432]
[4.98852396 -164.28990173]
[-7.72575474 -172.44610596]
[-17.62610435 -183.85487366]
[-23.90994644 -197.59130859]
[-26.06787872 -212.54190063]
[-23.92496681 -227.49464417]
[-17.65492630 -241.23739624]
[-7.76604462 -252.65609741]
[4.94003391 -260.82507324]
[19.43328476 -265.08212280]
[34.53880310 -265.08212280]
[49.03205109 -260.82507324]
[61.73813248 -252.65609741]
[71.62701416 -241.23739624]
[77.89704895 -227.49464417]
[80.03996277 -212.54190063]
[77.88203430 -197.59130859]
[71.59819031 -183.85487366]
[61.69784164 -172.44610596]
[48.98356247 -164.28990173]
[34.48604202 -160.04742432]
[34.48604202 -145.04742432]
[34.48604202 -130.04742432]
[34.48604202 -115.04741669]
[34.48604202 -100.04741669]
[36.66287994 -85.20621490]
[40.97046280 -70.83802795]
[45.27804947 -56.46984482]
[49.58563232 -42.10166168]
[53.89321899 -27.73347664]
[69.00875854 -20.42742538]
[74.29720306 -4.13888884]
[66.03781128 11.24681187]
[70.64337158 25.52227211]
[75.24893951 39.79773331]
[80.32870483 45.23295593]
[79.79847717 54.41831207]
[84.10606384 68.78649139]
[88.41365051 83.15467834]
[107.00128937 73.39093781]
[131.08493042 84.84104156]
[145.54800415 78.42776489]
[157.49620056 87.32101440]
[172.43051147 88.72331238]
[187.36482239 90.12561798]
[196.18856812 77.55433655]
[210.12255859 71.09371948]
[225.41860962 72.48163605]
[237.96215820 81.34474945]
[244.37907410 95.29891205]
[242.94322205 110.59054565]
[234.04083252 123.10626221]
[220.06661987 129.47940063]
[204.77957153 127.99562073]
[192.29182434 119.05404663]
[185.96250916 105.05992889]
[171.02821350 103.65762329]
[156.09390259 102.25531769]
[142.69903564 108.76889801]
[129.68263245 99.77535248]
[124.13697052 104.82467651]
[136.57075500 113.21520233]
[149.00454712 121.60572815]
[161.43833923 129.99624634]
[175.59580994 134.95266724]
[184.59814453 146.95091248]
[185.39802551 161.92956543]
[177.72470093 174.81832886]
[164.17559814 181.25431824]
[149.33712769 179.05892944]
[138.23213196 168.97532654]
[134.61981201 154.41453552]
[127.42842102 141.25080872]
[120.23703766 128.08706665]
[113.04565430 114.92332458]
[107.50000000 119.97264862]
[107.50000000 134.97265625]
[107.50000000 149.97265625]
[107.50000000 164.97265625]
[107.50000000 179.97265625]
[107.50000000 194.97265625]
[107.50000000 209.97265625]
[107.50000000 224.97265625]
[107.50000000 239.97265625]
[107.50000000 254.97265625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[33 104]
[34 103]
[35 102]
[36 100]
[37 99]
[38 98]
[42 95]
[43 94]
[44 93]
[45 92]
[46 91]
[61 90]
[62 89]
[63 88]
[64 87]
[65 86]
[106 125]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
