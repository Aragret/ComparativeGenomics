%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACxxxxxxxxxxCAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.00629425 315.79919434]
[94.00629425 300.79919434]
[94.00629425 285.79919434]
[94.00629425 270.79919434]
[94.00629425 255.79920959]
[94.00629425 240.79920959]
[94.00629425 225.79920959]
[94.00629425 210.79920959]
[94.00629425 195.79920959]
[94.00629425 180.79920959]
[91.82946014 165.95799255]
[87.52187347 151.58981323]
[83.21428680 137.22163391]
[83.20846558 152.22163391]
[73.14563751 163.34545898]
[58.22126770 164.84985352]
[46.14084244 155.95809937]
[43.14151001 141.26101685]
[50.77183533 128.34675598]
[65.09430695 123.88311005]
[50.09511948 124.03914642]
[35.09593201 124.19518280]
[20.09674263 124.35121918]
[5.27898502 126.68231964]
[-9.04361248 131.13912964]
[-23.36620903 135.59594727]
[-37.68880844 140.05276489]
[-52.01140594 144.50958252]
[-62.73223877 156.91908264]
[-78.78659058 153.57397461]
[-83.65912628 137.91542053]
[-72.33738708 126.05158997]
[-56.46821976 130.18698120]
[-42.14562225 125.73017120]
[-27.82302475 121.27335358]
[-13.50042820 116.81653595]
[0.82216913 112.35972595]
[0.19819173 97.37270355]
[-14.44530964 94.12187958]
[-26.74325562 103.78079224]
[-42.37089920 103.22331238]
[-53.94934464 92.71266937]
[-56.01160431 77.21166229]
[-47.58393860 64.03939819]
[-32.64564133 59.41541672]
[-18.25011253 65.52301788]
[-11.19448376 79.47837830]
[3.44901752 82.72920227]
[12.15280151 87.93176270]
[17.86433411 94.91191101]
[20.38245201 102.44240570]
[19.94070625 109.35202789]
[34.93989563 109.19599152]
[49.93908310 109.03995514]
[64.93827057 108.88391876]
[97.98359680 77.36480713]
[103.17901611 63.29328918]
[108.37442780 49.22176743]
[113.56984711 35.15024948]
[118.76525879 21.07872963]
[118.01342010 14.40473270]
[120.42427063 9.16840839]
[124.48059082 6.53748369]
[130.25686646 -7.30573416]
[136.03314209 -21.14895248]
[141.80940247 -34.99216843]
[147.58567810 -48.83538818]
[135.09890747 -40.52392578]
[120.40300751 -37.51883698]
[105.65585327 -40.26137161]
[93.02284241 -48.34883499]
[84.35894012 -60.59370041]
[80.93630219 -75.19799805]
[83.25749969 -90.01731110]
[90.98169708 -102.87564850]
[102.97470856 -111.88496399]
[117.47554779 -115.72235870]
[132.35498047 -113.82439423]
[145.42820740 -106.46974182]
[154.77560425 -94.73831940]
[159.02465820 -80.35272217]
[157.55165100 -65.42587280]
[167.05999756 -77.02721405]
[176.56835938 -88.62855530]
[185.83331299 -100.42520142]
[194.85084534 -112.41203308]
[203.86836243 -124.39886475]
[200.16232300 -139.59094238]
[207.13491821 -153.58796692]
[221.49391174 -159.78099060]
[236.45942688 -155.24583435]
[244.96519470 -142.12387085]
[242.99505615 -126.61088562]
[231.47926331 -116.03164673]
[215.85520935 -115.38133240]
[206.83767700 -103.39450073]
[197.82014465 -91.40766907]
[197.60334778 -86.57770538]
[194.30670166 -81.84870911]
[188.16970825 -79.12020111]
[178.66134644 -67.51885986]
[169.15298462 -55.91751862]
[161.42889404 -43.05911636]
[155.65263367 -29.21589661]
[149.87635803 -15.37267971]
[144.10008240 -1.52946162]
[138.32380676 12.31375599]
[132.83677673 26.27414513]
[127.64136505 40.34566498]
[122.44594574 54.41718292]
[117.25053406 68.48870087]
[112.05511475 82.56022644]
[119.64502716 95.49827576]
[134.46278381 97.82938385]
[149.28054810 100.16048431]
[165.86688232 96.64911652]
[173.83258057 111.61521149]
[161.65649414 123.41263580]
[146.94943237 114.97824860]
[132.13168335 112.64714050]
[117.31391907 110.31604004]
[112.38105774 115.96553802]
[102.51533508 127.26454163]
[97.58247375 132.91404724]
[101.89006042 147.28222656]
[106.19764709 161.65042114]
[110.58664703 147.30688477]
[120.04788971 135.66709900]
[133.19213867 128.44015503]
[148.08935547 126.68723297]
[162.55212402 130.66572571]
[174.45680237 139.79144287]
[182.05535889 152.72442627]
[184.23207092 167.56564331]
[180.66731262 182.13591003]
[171.88453674 194.29579163]
[159.17332458 202.25979614]
[144.40016174 204.85853577]
[129.73423767 201.71041870]
[117.32902527 193.27769470]
[109.00629425 180.79920959]
[109.00629425 195.79920959]
[109.00629425 210.79920959]
[109.00629425 225.79920959]
[109.00629425 240.79920959]
[109.00629425 255.79920959]
[109.00629425 270.79919434]
[109.00629425 285.79919434]
[109.00629425 300.79919434]
[109.00629425 315.79919434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[20 55]
[21 54]
[22 53]
[23 52]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[38 48]
[39 47]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[82 102]
[83 101]
[84 100]
[85 97]
[86 96]
[87 95]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
