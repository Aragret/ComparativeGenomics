%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUAxxxxxxxxxxUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.19728088 401.79333496]
[102.19728088 386.79333496]
[102.19728088 371.79333496]
[102.19728088 356.79333496]
[102.19728088 341.79333496]
[102.19728088 326.79333496]
[102.19728088 311.79333496]
[102.19728088 296.79333496]
[102.19728088 281.79333496]
[102.19728088 266.79333496]
[85.48527527 261.32324219]
[71.59661102 250.49983215]
[62.18412781 235.59089661]
[58.37481308 218.35166931]
[60.63488388 200.81811523]
[68.71279907 185.06649780]
[81.66712189 172.96749878]
[97.97625732 165.96409607]
[96.72938538 151.01600647]
[95.48251343 136.06791687]
[89.08567047 134.67247009]
[83.04292297 132.15214539]
[77.55030823 128.58869934]
[72.78602600 124.09777069]
[68.90464783 118.82502747]
[66.03208923 112.94155884]
[64.26155090 106.63821411]
[63.65046692 100.11951447]
[64.21866608 93.59693909]
[50.31611252 87.96498108]
[36.41355896 82.33302307]
[20.71796989 84.32277679]
[11.82693863 72.37293243]
[-2.07561755 66.74097443]
[-15.97817326 61.10902023]
[-29.88072968 55.47706223]
[-43.78328705 49.84510422]
[-55.98599625 54.15180588]
[-67.47328949 49.12577057]
[-72.27288818 37.97807312]
[-86.05527496 32.05810928]
[-99.83765411 26.13814735]
[-113.62003326 20.21818542]
[-126.88545227 28.26854134]
[-142.34646606 26.95065117]
[-154.05798340 16.77126694]
[-157.51670837 1.64457238]
[-151.39266968 -12.61291122]
[-138.04069519 -20.51889038]
[-122.59489441 -19.03335381]
[-110.99449158 -8.72752190]
[-107.70007324 6.43580341]
[-93.91768646 12.35576630]
[-80.13530731 18.27573013]
[-66.35292816 24.19569206]
[-49.09470367 21.17019463]
[-38.15132904 35.94255066]
[-24.24877357 41.57450485]
[-10.34621716 47.20646286]
[3.55633926 52.83842087]
[17.45889473 58.47037506]
[32.16007996 56.07778931]
[42.04551315 68.43047333]
[55.94807053 74.06242371]
[69.85062408 79.69438171]
[92.49179077 64.43415070]
[119.36918640 69.24065399]
[129.80900574 58.46984482]
[140.24880981 47.69903564]
[150.68862915 36.92822647]
[142.82238770 24.65815353]
[137.89949036 10.94764614]
[136.16572571 -3.50876141]
[137.70544434 -17.97954941]
[142.43742371 -31.73322678]
[150.11917114 -44.07530975]
[160.35934448 -54.38338852]
[172.63763428 -62.13851166]
[186.33132935 -66.95131683]
[200.74671936 -68.58158112]
[215.15441895 -66.95018768]
[228.82612610 -62.14299774]
[241.07153320 -54.40630341]
[251.73315430 -64.95759583]
[262.39477539 -75.50888824]
[273.05639648 -86.06017303]
[283.71804810 -96.61146545]
[284.73590088 -100.98473358]
[286.90408325 -104.43001556]
[289.77664185 -106.69504547]
[292.87136841 -107.70332336]
[295.73211670 -107.55029297]
[307.23391724 -117.17881775]
[308.37973022 -132.94151306]
[320.39031982 -143.21388245]
[336.14001465 -141.90148926]
[346.28482056 -129.78295898]
[344.80596924 -114.04801178]
[332.58087158 -104.03190613]
[316.86245728 -105.67701721]
[305.36065674 -96.04848480]
[294.26931763 -85.94983673]
[283.60769653 -75.39855194]
[272.94607544 -64.84725952]
[262.28445435 -54.29596710]
[251.62281799 -43.74467850]
[259.64590454 -30.52406502]
[264.28909302 -15.76382351]
[265.28079224 -0.31357604]
[262.55963135 14.93629932]
[256.27844238 29.10597992]
[246.79548645 41.37696075]
[234.65414429 51.03932571]
[220.55172729 57.53283691]
[205.29945374 60.47939682]
[189.77574158 59.70506668]
[174.87570190 55.25034332]
[161.45942688 47.36804199]
[151.01962280 58.13884735]
[140.57980347 68.90966034]
[130.13999939 79.68046570]
[134.92379761 89.91875458]
[136.33212280 101.13141632]
[134.22885132 112.23472595]
[128.81727600 122.15552521]
[120.62044525 129.93492126]
[110.43059540 134.82104492]
[111.67747498 149.76913452]
[112.92434692 164.71722412]
[125.28117371 167.07177734]
[136.69140625 172.34074402]
[146.47961426 180.20629883]
[154.06779480 190.19711304]
[159.00958252 201.71652222]
[161.01638794 214.07823181]
[159.97433472 226.54721069]
[155.95068359 238.38328552]
[149.18949890 248.88525391]
[140.09686279 257.43225098]
[129.21650696 263.52059937]
[117.19728088 266.79333496]
[117.19728088 281.79333496]
[117.19728088 296.79333496]
[117.19728088 311.79333496]
[117.19728088 326.79333496]
[117.19728088 341.79333496]
[117.19728088 356.79333496]
[117.19728088 371.79333496]
[117.19728088 386.79333496]
[117.19728088 401.79333496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 129]
[19 128]
[20 127]
[29 65]
[30 64]
[31 63]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[40 55]
[41 54]
[42 53]
[43 52]
[67 121]
[68 120]
[69 119]
[70 118]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
