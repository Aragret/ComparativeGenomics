%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACxxxxxxxxxxAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.27521515 267.92422485]
[102.27521515 252.92422485]
[102.27521515 237.92422485]
[102.27521515 222.92422485]
[102.27521515 207.92422485]
[102.27521515 192.92422485]
[102.27521515 177.92422485]
[102.27521515 162.92422485]
[102.27521515 147.92422485]
[102.27521515 132.92422485]
[76.57440186 116.90731812]
[77.07860565 90.59284210]
[65.57680511 80.96431732]
[54.07499695 71.33579254]
[42.57319641 61.70726395]
[30.97185326 52.19890594]
[19.27223015 42.81174469]
[8.93313503 53.69152832]
[-2.28010297 63.66799164]
[-14.28882980 72.67115784]
[-27.00881004 80.63787842]
[-40.35082245 87.51226807]
[-54.22128296 93.24610901]
[-68.52289581 97.79917908]
[-83.15534210 101.13954926]
[-98.01598358 103.24377441]
[-113.00058746 104.09711456]
[-128.00404358 103.69356537]
[-142.92111206 102.03596497]
[-157.64715576 99.13593292]
[-172.07888794 95.01383209]
[-186.11506653 89.69855499]
[-199.65724182 83.22739410]
[-212.61042786 75.64573669]
[-224.88377380 67.00677490]
[-236.39115906 57.37108994]
[-247.05191040 46.80627823]
[-256.79119873 35.38644409]
[-265.54074097 23.19169426]
[-273.23916626 10.30756474]
[-279.83248901 -3.17557120]
[-285.27441406 -17.16313553]
[-289.52679443 -31.55701637]
[-292.55978394 -46.25624847]
[-294.35214233 -61.15772247]
[-294.89129639 -76.15692139]
[-294.17343140 -91.14862823]
[-292.20361328 -106.02767944]
[-288.99563599 -120.68972015]
[-284.57202148 -135.03190613]
[-278.96377563 -148.95362854]
[-272.21026611 -162.35722351]
[-264.35885620 -175.14869690]
[-255.46459961 -187.23831177]
[-245.58988953 -198.54125977]
[-234.80400085 -208.97827148]
[-223.18258667 -218.47613525]
[-210.80717468 -226.96821594]
[-197.76455688 -234.39495850]
[-184.14620972 -240.70426941]
[-170.04768372 -245.85189819]
[-155.56785583 -249.80172729]
[-140.80828857 -252.52604675]
[-125.87253571 -254.00575256]
[-110.86533356 -254.23046875]
[-95.89196014 -253.19862366]
[-81.05744934 -250.91743469]
[-66.46585083 -247.40292358]
[-52.21951675 -242.67973328]
[-38.41837692 -236.78100586]
[-25.15923500 -229.74809265]
[-12.53510094 -221.63035583]
[-0.63452274 -212.48471069]
[10.45902443 -202.37532043]
[20.66772652 -191.37309265]
[29.91997337 -179.55520630]
[38.15086746 -167.00456238]
[45.30267715 -153.80917358]
[51.32522964 -140.06161499]
[56.17628860 -125.85831451]
[59.82182312 -111.29889679]
[62.23625946 -96.48548889]
[63.40266418 -81.52199554]
[63.31285477 -66.51338196]
[61.96746445 -51.56492233]
[59.37592697 -36.78147125]
[55.55642319 -22.26672173]
[50.53573990 -8.12248993]
[44.34909821 5.55201244]
[37.03989029 18.66086578]
[28.65939140 31.11212158]
[40.35901642 40.49928284]
[47.59114456 42.24340057]
[52.20172119 50.20546341]
[63.70352554 59.83398819]
[75.20532990 69.46251678]
[86.70713043 79.09104156]
[96.64933777 73.79140472]
[108.61502838 73.28774261]
[120.27732849 78.28244019]
[129.11430359 88.35301208]
[132.94610596 101.93259430]
[147.94529724 101.77655792]
[162.94448853 101.62052155]
[177.94367981 101.46448517]
[192.94287109 101.30844879]
[207.92257690 100.52860260]
[222.85688782 99.12630463]
[234.15696716 87.73825073]
[250.08976746 89.61584473]
[258.43301392 103.31876373]
[252.78646851 118.33528900]
[237.48168945 123.14603424]
[224.25918579 114.06060791]
[209.32489014 115.46291351]
[207.42134094 117.60391235]
[204.52778625 119.09432220]
[200.89726257 119.54280090]
[196.92329407 118.66041565]
[193.09890747 116.30764008]
[178.09971619 116.46367645]
[163.10052490 116.61971283]
[148.10133362 116.77574921]
[133.10214233 116.93178558]
[146.33998108 123.98584747]
[159.57781982 131.03990173]
[172.81564331 138.09396362]
[187.55061340 140.90122986]
[199.75178528 149.62657166]
[207.17178345 162.66281128]
[208.44387817 177.60876465]
[203.33377075 191.71150208]
[192.78271484 202.37335205]
[178.73413086 207.63047791]
[163.77571106 206.51457214]
[150.66265869 199.23114014]
[141.81036377 187.12178040]
[138.84936523 172.41543579]
[131.65797424 159.25170898]
[124.46659851 146.08796692]
[117.27521515 132.92422485]
[117.27521515 147.92422485]
[117.27521515 162.92422485]
[117.27521515 177.92422485]
[117.27521515 192.92422485]
[117.27521515 207.92422485]
[117.27521515 222.92422485]
[117.27521515 237.92422485]
[117.27521515 252.92422485]
[117.27521515 267.92422485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 97]
[13 96]
[14 95]
[15 94]
[16 92]
[17 91]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
