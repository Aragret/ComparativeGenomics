%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.31860352 75.12143707]
[121.57094574 86.52246094]
[111.82329559 97.92347717]
[120.70436096 127.97661591]
[113.79736328 141.29176331]
[106.89036560 154.60691833]
[99.98336792 167.92207336]
[93.07637024 181.23722839]
[86.16937256 194.55238342]
[87.44849396 210.90158081]
[73.77793121 219.95959473]
[59.22078323 212.40834045]
[58.75219727 196.01588440]
[72.85420990 187.64538574]
[79.76121521 174.33023071]
[86.66821289 161.01507568]
[93.57521057 147.69992065]
[100.48220825 134.38476562]
[107.38920593 121.06961060]
[96.51038361 110.74240875]
[83.57232666 118.33231354]
[70.63426971 125.92222595]
[65.21443939 141.02206421]
[49.98382568 146.06268311]
[36.62604141 137.17733765]
[35.38803864 121.18212891]
[47.21950912 110.34719086]
[63.04436111 112.98416901]
[75.98241425 105.39426422]
[88.92047119 97.80435181]
[100.42227936 88.17582703]
[110.16992950 76.77480316]
[119.91757965 65.37378693]
[110.95300293 56.65091324]
[102.51277924 47.41987991]
[94.62565613 37.71215820]
[87.31850433 27.56083870]
[80.61621857 17.00052071]
[74.54161835 6.06720066]
[69.11540222 -5.20185614]
[64.35605621 -16.76823997]
[60.27977371 -28.59252930]
[56.90044022 -40.63442230]
[54.22956085 -52.85288239]
[52.27622223 -65.20626068]
[51.04707336 -77.65246582]
[50.54628372 -90.14907074]
[50.77555466 -102.65349579]
[51.73408508 -115.12313080]
[53.41859436 -127.51546478]
[55.82333755 -139.78828430]
[58.94009781 -151.89976501]
[62.75824738 -163.80862427]
[67.26476288 -175.47430420]
[72.44426727 -186.85702515]
[78.27909851 -197.91802979]
[84.74936676 -208.61961365]
[91.83300781 -218.92530823]
[99.50587463 -228.80001831]
[107.74179840 -238.21008301]
[116.51271820 -247.12344360]
[125.78871918 -255.50975037]
[135.53819275 -263.34042358]
[145.72789001 -270.58877563]
[156.32308960 -277.23013306]
[167.28768921 -283.24188232]
[178.58428955 -288.60351562]
[190.17440796 -293.29678345]
[202.01853943 -297.30572510]
[214.07629395 -300.61666870]
[226.30661011 -303.21832275]
[238.66778564 -305.10189819]
[251.11770630 -306.26095581]
[263.61392212 -306.69152832]
[276.11386108 -306.39218140]
[288.57495117 -305.36398315]
[300.95468140 -303.61041260]
[313.21087646 -301.13745117]
[325.30175781 -297.95358276]
[337.18618774 -294.06964111]
[348.82360840 -289.49884033]
[360.17437744 -284.25683594]
[371.19982910 -278.36148071]
[381.86239624 -271.83285522]
[392.12573242 -264.69320679]
[401.95489502 -256.96694946]
[411.31637573 -248.68034363]
[420.17828369 -239.86169434]
[428.51040649 -230.54103088]
[436.28442383 -220.75015259]
[443.47378540 -210.52239990]
[450.05401611 -199.89266968]
[456.00274658 -188.89717102]
[461.29965210 -177.57337952]
[465.92672729 -165.95989990]
[469.86822510 -154.09632874]
[473.11068726 -142.02307129]
[475.64312744 -129.78129578]
[477.45690918 -117.41271973]
[478.54583740 -104.95948792]
[478.90621948 -92.46404266]
[478.53686523 -79.96897125]
[493.47119141 -78.56666565]
[508.40548706 -77.16436768]
[523.33978271 -75.76206207]
[538.27410889 -74.35975647]
[544.25671387 -88.25448608]
[554.24176025 -99.61908722]
[567.25097656 -107.34017944]
[582.00988770 -110.66132355]
[597.07250977 -109.25715637]
[610.96325684 -103.26522827]
[622.32116699 -93.27257538]
[630.03356934 -80.25818634]
[633.34478760 -65.49706268]
[631.93054199 -50.43535233]
[625.92932129 -36.54865265]
[615.92901611 -25.19744110]
[602.90948486 -17.49378967]
[588.14611816 -14.19242668]
[573.08538818 -15.61678505]
[559.20269775 -21.62732124]
[547.85821533 -31.63518333]
[540.16326904 -44.65990067]
[536.87182617 -59.42544937]
[521.93750000 -60.82775497]
[507.00320435 -62.23005676]
[492.06887817 -63.63236237]
[477.13458252 -65.03466797]
[473.72109985 -45.65326309]
[468.54257202 -26.66658401]
[461.64263916 -8.23501301]
[453.07949829 9.48574162]
[442.92538452 26.34596443]
[431.26599121 42.20320129]
[418.19967651 56.92346573]
[403.83679199 70.38236237]
[388.29852295 82.46614838]
[371.71606445 93.07268524]
[354.22943115 102.11230469]
[335.98626709 109.50857544]
[317.14062500 115.19893646]
[297.85165405 119.13523102]
[278.28222656 121.28412628]
[258.59765625 121.62737274]
[238.96418762 120.16197205]
[219.54762268 116.90020752]
[200.51200867 111.86952972]
[182.01814270 105.11234283]
[164.22224426 96.68562317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[20 30]
[21 29]
[22 28]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
