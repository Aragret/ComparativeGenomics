%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGxxxxxxxxxxUCUUUAUCUGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.80984497 286.58541870]
[82.80984497 271.58541870]
[82.80984497 256.58541870]
[82.80984497 241.58540344]
[82.80984497 226.58540344]
[82.80984497 211.58540344]
[82.80984497 196.58540344]
[82.80984497 181.58540344]
[82.80984497 166.58540344]
[82.80984497 151.58540344]
[68.90728760 145.95344543]
[58.46747589 156.72425842]
[48.02766418 167.49507141]
[52.31094742 182.24461365]
[48.63003159 197.15589905]
[37.97505569 208.21786499]
[23.21215820 212.45489502]
[8.31248379 208.72724915]
[-2.71602845 198.03765869]
[-6.90676546 183.26155090]
[-3.13244009 168.37362671]
[7.59167337 157.37867737]
[22.38084221 153.23428345]
[37.25685501 157.05525208]
[47.69666672 146.28443909]
[58.13647842 135.51364136]
[51.22948074 122.19847870]
[36.41172409 124.52958679]
[21.59396362 126.86068726]
[6.77620649 129.19178772]
[-8.04155159 131.52290344]
[-18.60929489 143.59361267]
[-34.62818909 142.71348572]
[-43.80990601 129.55767822]
[-39.11102295 114.21817780]
[-24.13611603 108.46215820]
[-10.37265587 116.70513916]
[4.44510269 114.37403870]
[19.26286125 112.04293060]
[34.08061981 109.71183014]
[48.89837646 107.38072205]
[58.73251724 76.14166260]
[83.83092499 59.39719772]
[111.31244659 61.90428925]
[118.21944427 48.58913422]
[125.12644196 35.27397919]
[132.03344727 21.95882416]
[138.94044495 8.64366722]
[145.84744263 -4.67148829]
[151.91046143 -18.39154243]
[157.10586548 -32.46306229]
[162.30128479 -46.53458023]
[167.49670410 -60.60609818]
[172.69212341 -74.67761993]
[177.88752747 -88.74913788]
[176.32995605 -103.66805267]
[168.34004211 -116.36298370]
[160.35011292 -129.05790710]
[152.36019897 -141.75283813]
[144.37028503 -154.44776917]
[130.81620789 -164.63223267]
[136.85050964 -180.47595215]
[153.74551392 -179.06344604]
[157.06521606 -162.43768311]
[165.05513000 -149.74275208]
[173.04504395 -137.04782104]
[181.03495789 -124.35289764]
[189.02488708 -111.65796661]
[196.34663391 -110.03255463]
[195.42109680 -125.00397491]
[194.49555969 -139.97538757]
[193.57002258 -154.94680786]
[186.60543823 -168.23194885]
[186.17903137 -183.22587585]
[192.37731934 -196.88534546]
[203.94226074 -206.43794250]
[218.52658081 -209.94479370]
[233.17010498 -206.69412231]
[244.90072632 -197.34571838]
[251.33749390 -183.79699707]
[251.17396545 -168.79788208]
[244.44332886 -155.39271545]
[232.51103210 -146.30198669]
[225.33740234 -133.12857056]
[218.16375732 -119.95514679]
[210.99012756 -106.78173065]
[218.31188965 -105.15631866]
[230.92300415 -113.27785492]
[236.48904419 -120.60391235]
[243.88206482 -121.43400574]
[256.65942383 -129.29142761]
[269.43676758 -137.14884949]
[266.66467285 -152.07131958]
[269.47424316 -166.98677063]
[277.48547363 -179.87802124]
[289.61495972 -189.00164795]
[304.22222900 -193.12373352]
[319.33181763 -191.68679810]
[332.90026855 -184.88519287]
[343.09255981 -173.63877869]
[348.53024292 -159.46852112]
[348.47793579 -144.29086304]
[342.94271851 -130.15841675]
[332.67315674 -118.98251343]
[319.05816650 -112.27458954]
[303.93902588 -110.94183350]
[289.36050415 -115.16449738]
[277.29418945 -124.37149811]
[264.51684570 -116.51406860]
[251.73948669 -108.65664673]
[239.04455566 -100.66673279]
[226.43342590 -92.54518890]
[191.95904541 -83.55372620]
[186.76364136 -69.48220062]
[181.56822205 -55.41068268]
[176.37280273 -41.33916473]
[171.17738342 -27.26764488]
[165.98197937 -13.19612598]
[180.16856384 -18.06856728]
[193.72874451 -11.65596104]
[198.96366882 2.40090823]
[192.90118408 16.12119675]
[178.98329163 21.71515656]
[165.11193848 16.00679207]
[159.16259766 2.23551059]
[152.25559998 15.55066586]
[145.34860229 28.86582184]
[138.44160461 42.18097687]
[131.53460693 55.49613190]
[124.62760162 68.81128693]
[131.90193176 74.53208160]
[137.82084656 81.96215820]
[141.98129272 90.77396393]
[144.06085205 100.54496002]
[143.83993530 110.77772522]
[141.21910095 120.92526245]
[136.22994995 130.42022705]
[129.03897095 138.70651245]
[119.94374084 145.27137756]
[109.36138153 149.67642212]
[97.80984497 151.58540344]
[97.80984497 166.58540344]
[97.80984497 181.58540344]
[97.80984497 196.58540344]
[97.80984497 211.58540344]
[97.80984497 226.58540344]
[97.80984497 241.58540344]
[97.80984497 256.58541870]
[97.80984497 271.58541870]
[97.80984497 286.58541870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 26]
[12 25]
[13 24]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
[50 118]
[51 117]
[52 116]
[53 115]
[54 114]
[55 113]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[87 112]
[88 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
