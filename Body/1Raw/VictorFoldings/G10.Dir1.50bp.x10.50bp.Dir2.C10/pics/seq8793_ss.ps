%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAAxxxxxxxxxxCACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.04548645]
[92.50000000 234.04548645]
[92.50000000 219.04548645]
[92.50000000 204.04548645]
[92.50000000 189.04548645]
[92.50000000 174.04548645]
[92.50000000 159.04548645]
[92.50000000 144.04548645]
[92.50000000 129.04548645]
[92.50000000 114.04547882]
[87.72041321 99.82733917]
[78.65950012 87.87326813]
[69.59858704 75.91919708]
[71.43288422 90.80661774]
[60.35876465 100.92411804]
[45.69715881 97.75593567]
[39.78854752 83.96868134]
[47.60619354 71.16686249]
[34.41790009 78.31311035]
[21.22960281 85.45935822]
[22.00998306 100.70250702]
[16.09140778 114.77138519]
[4.64901590 124.87259674]
[-10.04529762 129.00053406]
[-25.07396698 126.33560181]
[-37.45303726 117.40692139]
[-44.72463608 103.98728943]
[-45.44498444 88.74118042]
[-39.47105408 74.69571686]
[-27.98897171 64.63964844]
[-13.27851677 60.56960297]
[1.73954165 63.29369736]
[14.08335590 72.27105713]
[27.27165222 65.12480927]
[40.45994949 57.97856522]
[44.95039749 43.66647720]
[38.20834732 30.26704407]
[31.46629906 16.86761284]
[24.72425079 3.46817994]
[17.98220253 -9.93125248]
[2.36918092 -19.64277458]
[3.99043012 -37.09154129]
[-3.02179909 -50.35158157]
[-10.03402805 -63.61162186]
[-15.49831104 -67.50019836]
[-17.78965187 -72.78180695]
[-17.04935837 -77.55418396]
[-23.51845551 -91.08750916]
[-29.98755455 -104.62082672]
[-44.47531509 -100.58649445]
[-59.44355011 -99.12940979]
[-74.43738556 -100.29386139]
[-89.00118256 -104.04445648]
[-102.69235992 -110.26721954]
[-115.09485626 -118.77304840]
[-125.83177948 -129.30346680]
[-134.57684326 -141.53845215]
[-141.06430054 -155.10621643]
[-145.09698486 -169.59443665]
[-146.55236816 -184.56283569]
[-145.38621521 -199.55653381]
[-141.63397217 -214.11990356]
[-135.40965271 -227.81037903]
[-126.90242004 -240.21191406]
[-116.37078857 -250.94764709]
[-104.13480377 -259.69131470]
[-90.56631470 -266.17721558]
[-76.07763672 -270.20828247]
[-61.10906982 -271.66195679]
[-46.11549759 -270.49411011]
[-31.55255127 -266.74020386]
[-17.86278725 -260.51434326]
[-5.46221733 -252.00570679]
[5.27231550 -241.47285461]
[14.01460266 -229.23588562]
[20.49897575 -215.66664124]
[24.52838135 -201.17752075]
[25.98037148 -186.20878601]
[24.81082153 -171.21534729]
[21.05527115 -156.65283203]
[14.82784939 -142.96376038]
[6.31779957 -130.56416321]
[-4.21626711 -119.83082581]
[-16.45423317 -111.08992767]
[-9.98513508 -97.55660248]
[-3.51603723 -84.02328491]
[3.22601128 -70.62384796]
[10.23824024 -57.36381149]
[17.25046921 -44.10377121]
[28.74579620 -40.22102356]
[34.68323135 -29.18146706]
[31.38163567 -16.67329979]
[38.12368393 -3.27386832]
[44.86573029 10.12556362]
[51.60778046 23.52499580]
[58.34982681 36.92442703]
[58.71214676 21.92880440]
[64.58540344 8.12645531]
[75.13965607 -2.53223848]
[88.88350677 -8.54111576]
[103.87483215 -9.05107403]
[117.99524689 -3.99005222]
[129.24942017 5.92678642]
[136.04704285 19.29811287]
[137.42755127 34.23445129]
[133.19587708 48.62517548]
[123.94998932 60.43675995]
[110.99639893 68.00013733]
[96.16556549 70.24652863]
[81.55265808 66.85828400]
[90.61357117 78.81235504]
[99.67448425 90.76642609]
[111.37302399 78.93669891]
[133.03105164 79.95804596]
[147.80900574 82.52949524]
[162.58694458 85.10094452]
[177.36488342 87.67238617]
[192.14283752 90.24383545]
[207.34573364 84.09534454]
[220.10365295 94.39910126]
[217.29235840 110.55548096]
[201.80384827 115.94419098]
[189.57138062 105.02178192]
[174.79344177 102.45033264]
[160.01548767 99.87888336]
[145.23754883 97.30743408]
[130.45960999 94.73598480]
[124.71970367 99.56336212]
[136.45574951 108.90494537]
[148.19180298 118.24652863]
[159.92785645 127.58811188]
[171.66389465 136.92968750]
[185.37158203 143.02062988]
[193.52029419 155.61422729]
[193.45947266 170.61410522]
[185.20892334 183.14120483]
[171.45231628 189.12080383]
[156.66430664 186.60789490]
[145.65504456 176.41986084]
[142.00543213 161.87306213]
[134.81405640 148.70932007]
[127.62266541 135.54557800]
[120.43128204 122.38184357]
[113.23989868 109.21810913]
[107.50000000 114.04547882]
[107.50000000 129.04548645]
[107.50000000 144.04548645]
[107.50000000 159.04548645]
[107.50000000 174.04548645]
[107.50000000 189.04548645]
[107.50000000 204.04548645]
[107.50000000 219.04548645]
[107.50000000 234.04548645]
[107.50000000 249.04548645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 112]
[12 111]
[13 110]
[18 35]
[19 34]
[20 33]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[42 89]
[43 88]
[44 87]
[47 86]
[48 85]
[49 84]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
