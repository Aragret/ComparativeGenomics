%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAACCGUGCAAAGGUAGCAxxxxxxxxxxUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.38912964 268.84689331]
[80.38912964 253.84690857]
[80.38912964 238.84690857]
[80.38912964 223.84690857]
[80.38912964 208.84690857]
[80.38912964 193.84690857]
[80.38912964 178.84690857]
[80.38912964 163.84690857]
[80.38912964 148.84690857]
[80.38912964 133.84690857]
[68.03755951 125.33581543]
[54.02084351 130.67732239]
[40.00413132 136.01884460]
[25.98741722 141.36035156]
[11.97070408 146.70185852]
[5.96613884 158.16481018]
[-5.86911964 162.30554199]
[-16.97469139 157.40925598]
[-31.09949303 162.45800781]
[-45.22429657 167.50675964]
[-44.76548386 182.62776184]
[-49.00371933 197.14990234]
[-57.52378464 209.65045166]
[-69.49096680 218.90472412]
[-83.73284912 224.00610352]
[-98.85415649 224.45478821]
[-113.37345123 220.20681763]
[-125.86828613 211.67837524]
[-135.11454773 199.70500183]
[-140.20637512 185.45970154]
[-140.64491272 170.33808899]
[-136.38722229 155.82165527]
[-127.85041809 143.33253479]
[-115.87084198 134.09429932]
[-101.62213898 129.01202393]
[-86.50024414 128.58360291]
[-71.98664856 132.85102844]
[-59.50325775 141.39619446]
[-50.27305222 153.38195801]
[-36.14825058 148.33320618]
[-22.02344704 143.28445435]
[-11.44396687 129.31753540]
[6.62919188 132.68515015]
[20.64590454 127.34364319]
[34.66261673 122.00212860]
[48.67932892 116.66061401]
[62.69604492 111.31909943]
[64.76493835 76.16768646]
[96.00410461 54.08078384]
[93.82727051 39.23957825]
[91.65042877 24.39837265]
[89.47359467 9.55716705]
[81.45944977 22.23681450]
[67.92565918 28.70492935]
[53.02556992 26.97652817]
[41.33182907 17.58203506]
[36.43310165 3.40450191]
[39.83273697 -11.20516872]
[50.48743820 -21.76345444]
[65.12740326 -25.03015137]
[79.25982666 -20.00275230]
[88.54793549 -8.22336102]
[89.17191315 -23.21037674]
[89.79589081 -38.19739532]
[90.41986847 -53.18441010]
[91.04384613 -68.17142487]
[91.66782379 -83.15843964]
[92.29180145 -98.14545441]
[78.26616669 -103.89500427]
[67.05492401 -114.09715271]
[60.01189423 -127.51995087]
[57.98755646 -142.54252625]
[61.22635651 -157.35084534]
[69.33719635 -170.15670776]
[81.34064484 -179.41374207]
[95.78723907 -184.00415039]
[110.93247986 -183.37358093]
[124.94749451 -177.59820557]
[136.13992310 -167.37539673]
[143.15820312 -153.93965149]
[145.15484619 -138.91336060]
[141.88876343 -124.11104584]
[133.75433350 -111.32015991]
[121.73384857 -102.08524323]
[107.27881622 -97.52147675]
[106.65483856 -82.53446198]
[106.03086090 -67.54744720]
[105.40688324 -52.56043243]
[104.78290558 -37.57341766]
[104.15892792 -22.58639908]
[103.53495789 -7.59938383]
[104.31479645 7.38033056]
[106.49163818 22.22153664]
[108.66847229 37.06274033]
[110.84531403 51.90394592]
[123.62266541 59.76137161]
[123.47853088 44.63409805]
[128.01795959 30.20327377]
[136.79623413 17.88268089]
[148.95335388 8.87936687]
[163.29827881 4.07538557]
[178.42565918 3.94138145]
[192.85343933 8.49048328]
[205.16813660 17.27701569]
[214.16329956 29.44016457]
[218.95767212 43.78830719]
[219.08154297 58.91576004]
[214.52278137 73.34049225]
[205.72799683 85.64930725]
[193.55882263 94.63632202]
[179.20745850 99.42107391]
[164.07992554 99.53480530]
[149.65826416 94.96636963]
[137.35534668 86.16334534]
[128.37648010 73.98815155]
[127.98655701 81.47801208]
[127.20671844 96.45772552]
[126.81679535 103.94757843]
[140.47303772 110.15298462]
[154.12927246 116.35839844]
[167.78552246 122.56380463]
[184.04609680 120.43641663]
[193.80259705 133.61756897]
[187.01835632 148.54762268]
[170.67243958 149.86781311]
[161.58010864 136.22004700]
[147.92387390 130.01463318]
[134.26762390 123.80922699]
[120.61138153 117.60382080]
[114.30582428 121.66459656]
[123.31526947 133.65750122]
[132.32472229 145.65040588]
[141.33416748 157.64331055]
[150.99940491 169.11428833]
[144.71421814 182.73399353]
[129.71447754 182.82266235]
[123.26884460 169.27734375]
[116.07746124 156.11361694]
[108.88607788 142.94987488]
[101.69469452 129.78613281]
[95.38912964 133.84690857]
[95.38912964 148.84690857]
[95.38912964 163.84690857]
[95.38912964 178.84690857]
[95.38912964 193.84690857]
[95.38912964 208.84690857]
[95.38912964 223.84690857]
[95.38912964 238.84690857]
[95.38912964 253.84690857]
[95.38912964 268.84689331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 47]
[12 46]
[13 45]
[14 44]
[15 43]
[18 41]
[19 40]
[20 39]
[49 95]
[50 94]
[51 93]
[52 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[96 115]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
