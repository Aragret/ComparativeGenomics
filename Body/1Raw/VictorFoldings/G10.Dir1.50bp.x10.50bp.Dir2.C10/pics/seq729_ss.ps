%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUAxxxxxxxxxxUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.88646698 123.70970917]
[76.36227417 130.19787598]
[62.83808517 136.68603516]
[49.31389236 143.17420959]
[35.78970337 149.66236877]
[22.26551437 156.15054321]
[10.66417217 165.65888977]
[1.64664257 177.64572144]
[-7.37088728 189.63256836]
[-16.38841629 201.61940002]
[-25.40594673 213.60623169]
[-34.42347717 225.59306335]
[-31.96339607 241.20471191]
[-41.33037949 253.93400574]
[-56.96716690 256.22888184]
[-69.59672546 246.72785950]
[-71.72615814 231.06767273]
[-62.09212112 218.53927612]
[-46.41030884 216.57553101]
[-37.39278030 204.58869934]
[-28.37524986 192.60186768]
[-19.35771942 180.61503601]
[-10.34018993 168.62820435]
[-1.32266021 156.64137268]
[-15.24720764 162.21873474]
[-30.11200905 164.22813416]
[-45.01761627 162.54797363]
[-59.06210709 157.27993774]
[-71.39567566 148.74278259]
[-81.27202606 137.45306396]
[-88.09356689 124.09392548]
[-91.44751740 109.47370148]
[-91.13095093 94.47704315]
[-87.16301727 80.01137543]
[-79.78380585 66.95200348]
[-69.43982697 56.08912659]
[-56.75697708 48.08004379]
[-42.50268555 43.40937424]
[-27.53945732 42.35973358]
[-12.77269363 44.99463272]
[0.90408653 51.15464020]
[12.66331959 60.46702194]
[21.79347038 72.36829376]
[27.74208450 86.13833618]
[30.14922142 100.94393158]
[28.86922836 115.88922119]
[23.97955704 130.06988525]
[15.77734852 142.62634277]
[29.30153847 136.13818359]
[42.82572937 129.65002441]
[56.34991837 123.16184998]
[69.87410736 116.67368317]
[83.39830017 110.18552399]
[86.64912415 95.54202271]
[77.14076233 83.94068146]
[67.63240814 72.33934021]
[51.87374878 69.33197784]
[44.52742767 55.06975174]
[51.22891998 40.49341202]
[66.83740997 36.78468704]
[79.37939453 46.78858566]
[79.23374939 62.83097839]
[88.74210358 74.43231964]
[98.25046539 86.03366089]
[105.74884033 85.87763214]
[102.96645355 71.13794708]
[100.18405914 56.39826584]
[97.40167236 41.65858078]
[94.61927795 26.91889572]
[85.66234589 14.88671875]
[84.27772522 -0.04923877]
[90.87017822 -13.52290154]
[103.51259613 -21.59564972]
[118.50934601 -21.90765762]
[131.47659302 -14.36772251]
[138.62373352 -1.17991447]
[137.86154175 13.80070782]
[129.41293335 26.19490051]
[127.24609375 41.03757095]
[125.07926178 55.88023758]
[122.91242981 70.72290802]
[120.74559784 85.56557465]
[128.24397278 85.40954590]
[137.26150513 73.42271423]
[146.27903748 61.43588257]
[155.29655457 49.44905090]
[149.84312439 35.01771164]
[153.07992554 19.93372154]
[163.97410583 9.01033497]
[179.04937744 5.73316002]
[193.49526978 11.14793301]
[202.70214844 23.52681923]
[203.73214722 38.91976166]
[196.25657654 52.41492844]
[182.66088867 59.70605850]
[167.28340149 58.46658325]
[158.26586914 70.45341492]
[149.24833679 82.44024658]
[140.23080444 94.42707825]
[154.74302673 90.63296509]
[169.58493042 88.46087646]
[184.57579041 87.93725586]
[199.53306580 89.06848907]
[214.27465820 91.84078979]
[228.62104797 96.22041321]
[242.39755249 102.15402222]
[255.43644714 109.56938171]
[267.57894897 118.37618256]
[278.67718506 128.46720886]
[288.59606934 139.71957397]
[297.21481323 151.99627686]
[304.42846680 165.14782715]
[310.14916992 179.01409912]
[314.30731201 193.42623901]
[316.85223389 208.20877075]
[317.75292969 223.18170166]
[316.99847412 238.16271973]
[314.59805298 252.96940613]
[310.58087158 267.42147827]
[304.99584961 281.34295654]
[297.91098022 294.56433105]
[289.41253662 306.92462158]
[279.60403442 318.27331543]
[268.60482788 328.47222900]
[256.54891968 337.39718628]
[243.58308411 344.93951416]
[229.86517334 351.00738525]
[215.56224060 355.52691650]
[200.84843445 358.44305420]
[185.90290833 359.72027588]
[170.90765381 359.34307861]
[156.04524231 357.31604004]
[141.49665833 353.66384888]
[127.43903351 348.43093872]
[114.04354858 341.68103027]
[101.47330475 333.49636841]
[89.88136292 323.97656250]
[79.40885925 313.23751831]
[70.18331909 301.41003418]
[62.31707001 288.63812256]
[55.90589523 275.07727051]
[51.02785873 260.89257812]
[47.74235535 246.25683594]
[46.08938980 231.34819031]
[46.08908844 216.34819031]
[47.74145889 201.43948364]
[51.02637863 186.80358887]
[55.90385056 172.61872864]
[62.31448364 159.05761719]
[70.18022156 146.28536987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[54 64]
[55 63]
[56 62]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
