%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUxxxxxxxxxxUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.84699249 271.92730713]
[108.84699249 256.92730713]
[108.84699249 241.92730713]
[108.84699249 226.92730713]
[108.84699249 211.92730713]
[108.84699249 196.92730713]
[108.84699249 181.92730713]
[108.84699249 166.92730713]
[108.84699249 151.92730713]
[108.84699249 136.92730713]
[88.97044373 132.88725281]
[75.75035858 119.95207214]
[62.22617340 126.44023895]
[48.70198059 132.92840576]
[35.17779160 139.41656494]
[22.65183067 147.66885376]
[11.35282612 157.53457642]
[0.05382093 167.40029907]
[-4.73627424 183.08427429]
[-20.77280998 186.51379395]
[-31.55877304 174.16085815]
[-25.99848938 158.73310852]
[-9.81190205 156.10130310]
[1.48710263 146.23558044]
[12.78610706 136.36985779]
[-2.11550593 138.08505249]
[-16.45994949 133.69906616]
[-27.85424805 123.94355774]
[-34.39757538 110.44596863]
[-34.99836349 95.45800781]
[-29.55637932 81.47999573]
[-18.97947311 70.84378052]
[-5.03210974 65.32372284]
[9.95897865 65.84069061]
[23.49294281 72.30844116]
[33.31201172 83.64801025]
[37.77814484 97.96770477]
[36.14629364 112.87867737]
[28.68962669 125.89237976]
[42.21381760 119.40421295]
[55.73800659 112.91605377]
[69.26219940 106.42788696]
[68.59902954 100.33063507]
[69.13365936 94.22077942]
[70.84570312 88.33136749]
[73.66983795 82.88706207]
[77.49834442 78.09553528]
[82.18518829 74.13955688]
[87.55157471 71.17003632]
[85.06645966 56.37732697]
[82.58133698 41.58461761]
[72.66462708 29.25703239]
[78.18641663 15.42377090]
[68.26970673 3.09618449]
[73.79149628 -10.73707676]
[71.30637360 -25.52978325]
[59.25677490 -39.41456223]
[65.95059967 -55.60692596]
[63.15827560 -70.34473419]
[60.36595154 -85.08253479]
[45.32418060 -86.36618805]
[31.18693161 -91.66153717]
[19.00327873 -100.57563782]
[9.67732906 -112.44699860]
[3.90113258 -126.39469147]
[2.10331988 -141.38369751]
[4.41730118 -156.30174255]
[10.67136383 -170.04180908]
[20.40141296 -181.58428955]
[32.88541794 -190.07264709]
[47.19697952 -194.87698364]
[62.27408600 -195.64082336]
[76.99791718 -192.30743408]
[90.27586365 -185.12422180]
[101.12261963 -174.62419128]
[108.73327637 -161.58653259]
[112.54307556 -146.97872925]
[112.26931000 -131.88476562]
[107.93228149 -117.42472839]
[99.85384369 -104.67163849]
[88.63346100 -94.57185364]
[75.10375977 -87.87486267]
[77.89608002 -73.13705444]
[80.68840790 -58.39925003]
[90.53098297 -51.29777145]
[92.94802094 -38.99423981]
[86.09908295 -28.01490211]
[88.58419800 -13.22219467]
[98.32315826 -1.95268178]
[92.97912598 12.93865299]
[102.71808624 24.20816612]
[97.37404633 39.09949875]
[99.85916138 53.89220810]
[102.34428406 68.68491364]
[127.03137207 78.26229858]
[137.59266663 105.35602570]
[152.52696228 103.95372009]
[167.46127319 102.55141449]
[173.15342712 98.98674774]
[178.91737366 98.89546204]
[183.04397583 101.41470337]
[198.02369690 100.63485718]
[213.00341797 99.85501099]
[221.47436523 96.26408386]
[228.30223083 99.21804810]
[243.29492188 98.75000763]
[258.28762817 98.28196716]
[265.47747803 84.70988464]
[278.49865723 76.56465149]
[293.84848022 76.03729248]
[307.39797974 83.26966858]
[315.50234985 96.31629944]
[315.98159790 111.66771698]
[308.70678711 125.19445801]
[295.63479614 133.25790405]
[280.28195190 133.68902588]
[266.77810669 126.37184906]
[258.75567627 113.27466583]
[243.76296997 113.74270630]
[228.77027893 114.21074677]
[213.78324890 114.83472443]
[198.80354309 115.61457062]
[183.82382202 116.39441681]
[168.86357117 117.48572540]
[153.92927551 118.88803101]
[138.99496460 120.29032898]
[152.77334595 126.21958160]
[166.55174255 132.14883423]
[181.51919556 133.13648987]
[194.57664490 140.51910400]
[203.13908386 152.83512878]
[205.51141357 167.64634705]
[201.22396851 182.02053833]
[191.12553406 193.11206055]
[177.21531677 198.72506714]
[162.24714661 197.74838257]
[149.18429565 190.37532043]
[140.61283875 178.06556702]
[138.22975159 163.25477600]
[131.03837585 150.09104919]
[123.84699249 136.92730713]
[123.84699249 151.92730713]
[123.84699249 166.92730713]
[123.84699249 181.92730713]
[123.84699249 196.92730713]
[123.84699249 211.92730713]
[123.84699249 226.92730713]
[123.84699249 241.92730713]
[123.84699249 256.92730713]
[123.84699249 271.92730713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 42]
[13 41]
[14 40]
[15 39]
[16 25]
[17 24]
[18 23]
[49 94]
[50 93]
[51 92]
[53 90]
[55 88]
[56 87]
[58 84]
[59 83]
[60 82]
[96 126]
[97 125]
[98 124]
[101 123]
[102 122]
[103 121]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
