%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAxxxxxxxxxxCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.41555023 437.23733521]
[78.41555023 422.23733521]
[78.41555023 407.23733521]
[78.41555023 392.23733521]
[78.41555023 377.23733521]
[78.41555023 362.23733521]
[78.41555023 347.23733521]
[78.41555023 332.23733521]
[78.41555023 317.23733521]
[78.41555023 302.23733521]
[65.88942719 299.65338135]
[54.06744766 294.75991821]
[43.37147522 287.72952271]
[34.18356705 278.81112671]
[26.83232117 268.32113647]
[21.58113289 256.63223267]
[18.61874771 244.16007996]
[18.05249023 231.34854126]
[19.90436363 218.65399170]
[24.11021042 206.52893066]
[30.52193069 195.40591431]
[38.91269302 185.68211365]
[48.98496628 177.70515442]
[60.38105774 171.76065063]
[72.69582367 168.06201172]
[85.49108887 166.74273682]
[87.04866791 151.82382202]
[88.60624695 136.90492249]
[90.16382599 121.98600769]
[83.57302856 117.61502838]
[78.75321198 111.34498596]
[76.22400665 103.85184479]
[61.38906479 109.35049438]
[50.01885223 99.72929382]
[35.20109558 97.39819336]
[20.38333702 95.06708527]
[5.56557989 92.73598480]
[-5.29949474 103.81433105]
[-20.60676765 106.35736847]
[-34.47027969 99.38723755]
[-41.55922699 85.58410645]
[-39.14776611 70.25555420]
[-28.16315269 59.29572678]
[-12.82919407 56.91889572]
[0.95789003 64.03900146]
[7.89668369 77.91822815]
[22.71444130 80.24932861]
[37.53219986 82.58042908]
[52.34995651 84.91153717]
[66.12503052 79.24614716]
[78.55510712 89.03408813]
[83.54851532 82.40785980]
[90.49412537 77.86918640]
[98.56773376 75.95663452]
[106.81130219 76.89717102]
[115.32239532 64.54559326]
[123.83348083 52.19402313]
[132.34457397 39.84244919]
[140.85566711 27.49087715]
[149.36674500 15.13930511]
[157.87783813 2.78773260]
[158.06379700 -1.69856942]
[159.55273438 -5.48725224]
[161.95343018 -8.24742508]
[164.80636597 -9.81417847]
[167.64559937 -10.19636822]
[177.15396118 -21.79770851]
[168.95880127 -32.16806412]
[162.98770142 -43.95369339]
[159.47622681 -56.68457031]
[158.56199646 -69.85348511]
[160.27911377 -82.93622589]
[164.55703735 -95.41246796]
[171.22340393 -106.78645325]
[180.01098633 -116.60669708]
[190.56840515 -124.48390198]
[202.47418213 -130.10641479]
[215.25360107 -133.25250244]
[228.39755249 -133.79916382]
[241.38288879 -131.72688293]
[253.69322205 -127.12035370]
[264.83944702 -120.16498566]
[275.27926636 -130.93579102]
[285.71908569 -141.70660400]
[289.76803589 -157.00093079]
[304.18185425 -160.75474548]
[314.62167358 -171.52554321]
[325.06146240 -182.29635620]
[335.50128174 -193.06716919]
[331.88711548 -208.06520081]
[336.97677612 -222.62881470]
[349.14624023 -232.11079407]
[364.51223755 -233.48548889]
[378.17153931 -226.31422424]
[385.76550293 -212.88533020]
[384.87094116 -197.48393250]
[375.77331543 -185.02453613]
[361.37561035 -179.48291016]
[346.27209473 -182.62734985]
[335.83227539 -171.85655212]
[325.39245605 -161.08573914]
[314.95266724 -150.31492615]
[311.65042114 -135.79100037]
[296.48989868 -131.26679993]
[286.05007935 -120.49598694]
[275.61026001 -109.72517395]
[284.59579468 -95.40741730]
[289.64425659 -79.26471710]
[290.41833496 -62.35877609]
[286.86199951 -45.80285263]
[279.20452881 -30.68842506]
[267.94577026 -18.01326752]
[253.82347107 -8.61556339]
[237.76495361 -3.11848545]
[220.82627869 -1.88887274]
[204.12271118 -5.01275444]
[188.75531006 -12.28935051]
[179.24694824 -0.68800974]
[170.22941589 11.29882240]
[161.71832275 23.65039635]
[153.20722961 36.00196838]
[144.69615173 48.35354233]
[136.18505859 60.70511246]
[127.67396545 73.05668640]
[119.16287231 85.40825653]
[122.59509277 108.34244537]
[105.08274078 123.54358673]
[103.52516174 138.46249390]
[101.96757507 153.38140869]
[100.40999603 168.30032349]
[116.78774261 174.17572021]
[131.13574219 184.00177002]
[142.52128601 197.13386536]
[150.20576477 212.71261597]
[153.69253540 229.72018433]
[152.75901794 247.04675293]
[147.47094727 263.56292725]
[138.17771912 278.19342041]
[125.48934174 289.98693848]
[110.23636627 298.17816162]
[93.41555023 302.23733521]
[93.41555023 317.23733521]
[93.41555023 332.23733521]
[93.41555023 347.23733521]
[93.41555023 362.23733521]
[93.41555023 377.23733521]
[93.41555023 392.23733521]
[93.41555023 407.23733521]
[93.41555023 422.23733521]
[93.41555023 437.23733521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 130]
[27 129]
[28 128]
[29 127]
[32 51]
[34 49]
[35 48]
[36 47]
[37 46]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 120]
[61 119]
[66 118]
[67 117]
[82 106]
[83 105]
[84 104]
[86 102]
[87 101]
[88 100]
[89 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
