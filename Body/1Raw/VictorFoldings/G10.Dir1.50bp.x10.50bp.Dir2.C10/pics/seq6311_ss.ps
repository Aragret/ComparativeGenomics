%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAAxxxxxxxxxxCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.16924286 482.39065552]
[111.16924286 467.39065552]
[111.16924286 452.39065552]
[111.16924286 437.39065552]
[111.16924286 422.39065552]
[111.16924286 407.39065552]
[111.16924286 392.39065552]
[111.16924286 377.39065552]
[111.16924286 362.39065552]
[111.16924286 347.39065552]
[95.00511169 344.20739746]
[79.82366943 337.79614258]
[66.26239014 328.42379761]
[54.89118958 316.48175049]
[46.18843079 302.46932983]
[40.52085876 286.97311401]
[38.12809753 270.64227295]
[39.11256027 254.16131592]
[43.43502808 238.22157288]
[50.91624451 223.49203491]
[61.24431610 210.59135437]
[73.98773956 200.06185913]
[88.61342621 192.34671021]
[104.50897980 187.77131653]
[103.26210022 172.82322693]
[101.39448547 157.93994141]
[98.90937042 143.14723206]
[94.67215729 137.03236389]
[96.52976990 128.02119446]
[94.35292816 113.17999268]
[89.15751648 99.10847473]
[81.16760254 86.41354370]
[73.17768097 73.71861267]
[65.18776703 61.02368546]
[57.19784927 48.32875443]
[49.20793533 35.63382339]
[31.39885330 31.90195274]
[22.18861771 16.78429031]
[7.42256117 14.14542675]
[-7.34349394 11.50656223]
[-23.99929237 14.67211342]
[-31.65191650 -0.45645845]
[-19.23303223 -11.99802017]
[-4.70462990 -3.25949311]
[10.06142521 -0.62062895]
[24.82748032 2.01823545]
[26.84697342 -0.89714807]
[29.30903816 -3.44980359]
[23.82200623 -17.41019249]
[18.33497620 -31.37058258]
[12.84794426 -45.33097458]
[7.36091232 -59.29136276]
[-7.48990297 -56.81205368]
[-22.53165245 -57.47497559]
[-37.10677338 -61.25114822]
[-50.57810974 -67.97549438]
[-62.35674667 -77.35404968]
[-71.92778015 -88.97683716]
[-78.87279510 -102.33574677]
[-82.88819122 -116.84678650]
[-83.79843140 -131.87559509]
[-81.56372833 -146.76518250]
[-76.28176880 -160.86463928]
[-68.18345642 -173.55758667]
[-57.62281799 -184.28915405]
[-45.06151962 -192.59020996]
[-31.04868507 -198.09785461]
[-16.19689560 -200.57131958]
[-1.15540862 -199.90248108]
[13.41822720 -196.12057495]
[26.88691521 -189.39093018]
[38.66186142 -180.00773621]
[48.22831726 -168.38119507]
[55.16807938 -155.01954651]
[59.17776871 -140.50692749]
[60.08209610 -125.47776794]
[57.84153366 -110.58905792]
[52.55402756 -96.49168396]
[44.45072556 -83.80191803]
[33.88586807 -73.07450104]
[21.32130241 -64.77839661]
[26.80833435 -50.81800461]
[32.29536438 -36.85761642]
[37.78239822 -22.89722443]
[43.26942825 -8.93683529]
[58.82891083 -3.61018252]
[66.58638763 11.23883533]
[61.90286255 27.64390945]
[69.89278412 40.33883667]
[77.88269806 53.03376770]
[85.87261200 65.72869873]
[93.86252594 78.42362976]
[101.85244751 91.11855316]
[105.60809326 86.93834686]
[111.01708984 84.08428955]
[124.91964722 78.45233154]
[124.65813446 63.27682495]
[129.89997864 49.03296661]
[139.93626404 37.64712524]
[153.40966797 30.65913582]
[168.49801636 29.01407433]
[183.16073608 32.93441772]
[195.41481018 41.88997269]
[203.60298157 54.66957092]
[206.61787415 69.54488373]
[204.05174255 84.50414276]
[196.25163269 97.52423096]
[184.27244568 106.84428406]
[169.73425293 111.20384979]
[154.60325623 110.01332855]
[140.92578125 103.43373108]
[130.55160522 92.35488892]
[116.64904785 97.98684692]
[109.19413757 111.00315857]
[111.37097168 125.84436035]
[113.70207977 140.66212463]
[116.18719482 155.45481873]
[119.17607880 158.80564880]
[120.74382019 162.56240845]
[120.94104004 166.21522522]
[119.98291779 169.32585144]
[118.21018982 171.57635498]
[119.45706177 186.52444458]
[133.01383972 187.82405090]
[146.15644836 191.38191223]
[158.51153564 197.09584045]
[169.72837830 204.80239868]
[179.48870850 214.28160095]
[187.51583862 225.26321411]
[193.58247375 237.43438721]
[197.51713562 250.44865417]
[199.20903015 263.93572998]
[198.61114502 277.51208496]
[195.74157715 290.79183960]
[190.68296814 303.39770508]
[183.58013916 314.97177124]
[174.63594055 325.18554688]
[164.10546875 333.74942017]
[152.28874207 340.42083740]
[139.52224731 345.01107788]
[126.16924286 347.39065552]
[126.16924286 362.39065552]
[126.16924286 377.39065552]
[126.16924286 392.39065552]
[126.16924286 407.39065552]
[126.16924286 422.39065552]
[126.16924286 437.39065552]
[126.16924286 452.39065552]
[126.16924286 467.39065552]
[126.16924286 482.39065552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 123]
[25 122]
[26 117]
[27 116]
[29 115]
[30 114]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[38 46]
[39 45]
[40 44]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[95 113]
[96 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
