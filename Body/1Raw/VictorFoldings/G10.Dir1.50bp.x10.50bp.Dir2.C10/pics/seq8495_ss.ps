%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[203.72891235 174.41204834]
[190.95155334 166.55461121]
[178.17419434 158.69718933]
[165.39683533 150.83976746]
[152.53843689 143.11567688]
[139.60037231 135.52577209]
[126.66232300 127.93586731]
[113.72426605 120.34595490]
[100.78620911 112.75605011]
[86.02015686 110.11718750]
[71.25409698 112.75605011]
[56.48804474 115.39491272]
[41.72198868 118.03377533]
[55.63793945 123.63255310]
[67.04161835 133.37709045]
[74.74204254 146.24967957]
[77.93496704 160.90591431]
[76.28693390 175.81510925]
[69.97006226 189.42015076]
[59.64408112 200.30014038]
[46.38743210 207.31877136]
[31.58463097 209.74304199]
[16.78167152 207.31973267]
[3.52456617 200.30195618]
[-6.80211926 189.42263794]
[-13.11987305 175.81800842]
[-14.76887321 160.90892029]
[-11.57689762 146.25248718]
[-3.87731576 133.37939453]
[7.52573299 123.63411713]
[21.44425964 118.03377533]
[6.67820501 115.39491272]
[-8.11450195 112.90979767]
[-22.93226051 110.57868958]
[-37.75001907 108.24758911]
[-52.63329697 106.37997437]
[-67.56760406 104.97766876]
[-80.79010773 114.06309509]
[-96.09488678 109.25234985]
[-101.74142456 94.23582458]
[-93.39818573 80.53290558]
[-77.46538544 78.65531158]
[-66.16530609 90.04336548]
[-51.23099518 91.44566345]
[-48.26188660 89.43273926]
[-44.15156555 88.79480743]
[-39.57445908 90.06069946]
[-35.41891479 93.42983246]
[-20.60115623 95.76093292]
[-5.78339863 98.09203339]
[1.35912645 96.01117706]
[9.31706905 100.62886047]
[24.08312416 103.26772308]
[39.08312607 103.26772308]
[53.84917831 100.62886047]
[68.61523438 97.98999023]
[83.38129425 95.35112762]
[69.29669189 90.19128418]
[65.34587860 75.72093201]
[74.85420990 64.11956787]
[89.81864166 65.15190125]
[97.64382935 77.94911957]
[97.33177185 62.95236206]
[97.01971436 47.95560837]
[96.70765686 32.95885468]
[82.16938019 28.82002640]
[69.49784851 20.57844543]
[59.81980515 8.96694756]
[53.99581528 -4.98197794]
[52.54374313 -20.02800369]
[55.59270477 -34.83324814]
[62.87159348 -48.08123779]
[73.73316956 -58.59396744]
[87.21163177 -65.43666077]
[102.10848999 -68.00086212]
[117.09911346 -66.05856323]
[130.85055542 -59.78248215]
[142.14004517 -49.73067474]
[149.96372986 -36.79694366]
[153.62593079 -22.13134766]
[152.80101013 -7.03794098]
[147.56231689 7.14118004]
[138.37567139 19.14521790]
[126.05793762 27.90678215]
[111.70441437 32.64680099]
[112.01647186 47.64355469]
[112.32852936 62.64030838]
[112.64057922 77.63706207]
[114.91775513 84.71144104]
[114.61803436 91.25689697]
[112.20949554 96.48414612]
[108.37612152 99.81799316]
[121.31417847 107.40789795]
[134.25222778 114.99781036]
[147.19029236 122.58771515]
[160.12834167 130.17762756]
[169.17768860 131.83929443]
[173.25425720 138.06240845]
[186.03161621 145.91983032]
[198.80897522 153.77726746]
[211.58633423 161.63468933]
[219.37478638 161.55291748]
[225.25489807 165.42446899]
[240.25408936 165.26843262]
[255.25328064 165.11239624]
[270.25247192 164.95635986]
[285.24923706 164.64430237]
[300.24191284 164.17625427]
[315.23461914 163.70822144]
[325.87176514 152.01947021]
[341.66226196 151.35935974]
[353.23788452 162.11949158]
[353.73101807 177.91607666]
[342.84912109 189.37730408]
[327.04818726 189.70339966]
[315.70266724 178.70091248]
[300.70996094 179.16896057]
[285.71725464 179.63699341]
[279.08694458 183.01110840]
[270.40850830 179.95555115]
[255.40931702 180.11158752]
[240.41012573 180.26762390]
[225.41093445 180.42366028]
[238.36596680 187.98455811]
[249.50068665 198.03533936]
[258.34429932 210.15104675]
[264.52294922 223.81941223]
[267.77536011 238.46257019]
[267.96405029 253.46138000]
[265.08099365 268.18170166]
[259.24813843 282.00119019]
[250.71208191 294.33551025]
[239.83372498 304.66320801]
[227.07299805 312.54760742]
[212.96942139 317.65536499]
[198.11930847 319.77053833]
[183.15049744 318.80364990]
[168.69587708 314.79565430]
[155.36660767 307.91595459]
[143.72621155 298.45544434]
[134.26687622 286.81408691]
[127.38851929 273.48410034]
[123.38197327 259.02908325]
[122.41662598 244.06019592]
[124.53328705 229.21028137]
[129.64247131 215.10722351]
[137.52816772 202.34729004]
[147.85696411 191.46998596]
[160.19215393 182.93516541]
[174.01222229 177.10371399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 98]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[10 57]
[11 56]
[12 55]
[13 54]
[31 53]
[32 52]
[33 50]
[34 49]
[35 48]
[36 44]
[37 43]
[62 88]
[63 87]
[64 86]
[65 85]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
