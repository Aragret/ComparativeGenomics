%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUxxxxxxxxxxGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.53167725 281.43511963]
[114.91584778 266.44775391]
[114.30002594 251.46040344]
[113.68419647 236.47305298]
[113.06837463 221.48568726]
[112.45254517 206.49833679]
[111.83672333 191.51098633]
[111.22089386 176.52363586]
[97.02313995 171.68382263]
[87.38133240 183.17448425]
[77.73951721 194.66514587]
[68.09770203 206.15582275]
[58.45588684 217.64648438]
[61.34932709 233.01405334]
[53.64272308 246.62074280]
[38.97490311 252.04191589]
[24.27156258 246.71784973]
[16.47516632 233.16239929]
[19.26693535 217.77603149]
[31.32868385 207.82374573]
[46.96522141 208.00466919]
[56.60703278 196.51400757]
[66.24884796 185.02333069]
[75.89066315 173.53266907]
[85.53247833 162.04200745]
[53.33641815 134.08448792]
[48.29997253 95.85596466]
[67.68847656 67.33571625]
[59.02186966 55.09276581]
[50.35525894 42.84981155]
[41.68865204 30.60685730]
[33.02204514 18.36390495]
[19.31017876 22.76043510]
[4.56509829 21.93109322]
[-9.24074268 15.72320938]
[-20.16723251 4.72056341]
[-26.57812691 -9.80278587]
[-41.53940964 -10.87985516]
[-57.77180862 -5.98644638]
[-66.96755981 -20.22984886]
[-55.82643127 -33.00919342]
[-40.46233749 -25.84113503]
[-25.50105667 -24.76406670]
[-20.37075615 -38.85945511]
[-32.52408981 -47.65129852]
[-41.37032700 -50.16920090]
[-44.83419800 -56.75052261]
[-56.80445480 -65.79004669]
[-68.77471161 -74.82955933]
[-80.74497223 -83.86907959]
[-95.94383240 -80.19093323]
[-109.92803955 -87.18921661]
[-116.09468079 -101.55954742]
[-111.53205872 -116.51670837]
[-98.39450836 -124.99837494]
[-82.88516998 -122.99976349]
[-72.32707977 -111.46456146]
[-71.70545197 -95.83934021]
[-59.73519516 -86.79981995]
[-47.76493454 -77.76029968]
[-35.79467773 -68.72077942]
[-23.73224640 -59.80463028]
[-11.57891273 -51.01278687]
[-4.52668476 -53.65488815]
[2.57448220 -54.93409348]
[9.47553825 -54.91293716]
[9.47553825 -69.91293335]
[9.47553825 -84.91293335]
[9.47553825 -99.91293335]
[-4.58164930 -105.69773865]
[-15.35152245 -116.42519379]
[-21.19175339 -130.45944214]
[-21.21175003 -145.66036987]
[-15.40846157 -159.70993042]
[-4.66684914 -170.46568298]
[9.37507057 -176.28744507]
[24.57600594 -176.28744507]
[38.61792374 -170.46568298]
[49.35953903 -159.70993042]
[55.16282654 -145.66036987]
[55.14282990 -130.45944214]
[49.30259705 -116.42519379]
[38.53272629 -105.69773865]
[24.47553825 -99.91293335]
[24.47553825 -84.91293335]
[24.47553825 -69.91293335]
[24.47553825 -54.91293716]
[42.70296860 -45.99338531]
[53.90560532 -28.95827293]
[54.88277054 -8.49723053]
[45.26499939 9.69729710]
[53.93160629 21.94025040]
[62.59821320 34.18320465]
[71.26482391 46.42615891]
[79.93142700 58.66911316]
[88.52648926 53.84454346]
[98.26630402 50.85578918]
[108.74877167 49.96976852]
[119.51078796 51.36344910]
[130.04869080 55.11018372]
[139.84164429 61.17075729]
[148.37709045 69.38976288]
[155.17663574 79.49770355]
[159.82159424 91.11892700]
[161.97639465 103.78523254]
[161.40896606 116.95458221]
[176.40185547 116.49265289]
[191.39474487 116.03073120]
[198.02943420 102.23799133]
[210.32086182 93.11773682]
[225.44458008 90.76572418]
[239.92524719 95.72243500]
[250.43530273 106.84884644]
[254.55964661 121.58819580]
[251.35049438 136.55348206]
[241.54531860 148.30581665]
[227.39726257 154.14456177]
[212.15744019 152.72804260]
[199.32786560 144.38174438]
[191.85667419 131.02362061]
[176.86378479 131.48553467]
[161.87089539 131.94746399]
[158.51164246 146.56646729]
[171.79898071 153.52682495]
[188.15316772 152.31329346]
[197.15628052 166.02008057]
[189.54667664 180.54682922]
[173.15248108 180.94964600]
[164.83862305 166.81416321]
[151.55128479 159.85382080]
[145.21553040 163.86730957]
[153.53929138 176.34588623]
[161.86305237 188.82446289]
[170.18682861 201.30303955]
[183.07853699 208.97140503]
[183.28930664 223.96992493]
[170.61814880 231.99748230]
[157.14704895 225.39979553]
[155.72128296 210.46650696]
[147.99552917 197.60910034]
[140.26976013 184.75170898]
[132.54400635 171.89430237]
[126.20825195 175.90780640]
[126.82407379 190.89515686]
[127.43990326 205.88250732]
[128.05572510 220.86987305]
[128.67155457 235.85722351]
[129.28736877 250.84457397]
[129.90319824 265.83193970]
[130.51902771 280.81927490]
[137.21054077 296.39682007]
[124.09416962 307.13912964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[37 43]
[38 42]
[44 63]
[45 62]
[47 61]
[48 60]
[49 59]
[50 58]
[66 87]
[67 86]
[68 85]
[69 84]
[106 122]
[107 121]
[108 120]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
