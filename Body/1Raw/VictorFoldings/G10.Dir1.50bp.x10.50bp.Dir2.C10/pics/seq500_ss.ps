%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCxxxxxxxxxxCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.12966919 80.36775208]
[135.35232544 88.22517395]
[122.57495880 96.08260345]
[109.79760742 103.94002533]
[98.60183716 113.92275238]
[89.33689117 125.71939087]
[80.07193756 137.51603699]
[70.80699158 149.31266785]
[61.54204178 161.10931396]
[52.27709198 172.90596008]
[43.01214218 184.70259094]
[48.16416931 199.24426270]
[44.61426544 214.25764465]
[33.49519730 224.95202637]
[18.35501480 227.91487122]
[4.02489805 222.20074463]
[-4.92246628 209.63299561]
[-5.63200712 194.22196960]
[2.12268853 180.88523865]
[15.86712551 173.87852478]
[31.21550369 175.43763733]
[40.48045349 163.64100647]
[49.74540329 151.84436035]
[59.01034927 140.04772949]
[68.27529907 128.25108337]
[77.54025269 116.45444489]
[86.80519867 104.65780640]
[79.62268829 91.48921967]
[64.68838501 92.89152527]
[51.67198563 101.88507843]
[38.27711487 95.37149048]
[23.34280777 96.77379608]
[8.40849972 98.17610168]
[-4.64438200 108.10355377]
[-19.66157722 101.51448059]
[-21.19468117 85.18714905]
[-7.66657114 75.91772461]
[7.00619555 83.24179077]
[21.94050407 81.83949280]
[36.87480927 80.43718719]
[48.82300949 71.54393768]
[63.28607941 77.95721436]
[78.22038269 76.55491638]
[94.60005951 80.19902039]
[101.94017792 91.16266632]
[114.71753693 83.30524445]
[127.49489594 75.44781494]
[140.27224731 67.59039307]
[134.60401917 55.83942413]
[130.06867981 43.60707092]
[126.70648956 31.00226593]
[124.54729462 18.13723755]
[123.61019897 5.12652302]
[123.90345001 -7.91404867]
[125.42433167 -20.86839485]
[128.15919495 -33.62121201]
[132.08361816 -46.05899811]
[137.16253662 -58.07106781]
[143.35067749 -69.55052948]
[150.59281921 -80.39524078]
[158.82444763 -90.50872803]
[167.97219849 -99.80102539]
[177.95454407 -108.18949127]
[188.68258667 -115.59952545]
[200.06074524 -121.96524811]
[211.98770142 -127.23009491]
[224.35723877 -131.34729004]
[237.05918884 -134.28027344]
[249.98048401 -136.00303650]
[263.00607300 -136.50036621]
[276.02001953 -135.76791382]
[288.90649414 -133.81231689]
[301.55075073 -130.65107727]
[313.84027100 -126.31244659]
[325.66571045 -120.83512878]
[336.92184448 -114.26799774]
[347.50851440 -106.66957855]
[357.33154297 -98.10761261]
[366.30355835 -88.65838623]
[374.34475708 -78.40608978]
[381.38363647 -67.44204712]
[387.35766602 -55.86391830]
[392.21371460 -43.77481461]
[406.62591553 -47.93270111]
[421.03814697 -52.09059143]
[428.71511841 -65.64424896]
[443.39038086 -69.65563202]
[456.26443481 -62.25328064]
[470.67663574 -66.41117096]
[485.08886719 -70.56905365]
[499.50106812 -74.72694397]
[513.91326904 -78.88483429]
[528.32550049 -83.04271698]
[542.73773193 -87.20060730]
[557.14996338 -91.35848999]
[571.47253418 -95.81530762]
[585.69934082 -100.56912231]
[596.33599854 -112.28114319]
[610.85931396 -108.97622681]
[625.08612061 -113.73004150]
[639.31286621 -118.48385620]
[653.53967285 -123.23767090]
[667.76641846 -127.99148560]
[678.22680664 -140.62133789]
[694.34722900 -137.61094666]
[699.54449463 -122.05714417]
[688.47204590 -109.96035004]
[672.52026367 -113.76470947]
[658.29345703 -109.01089478]
[644.06671143 -104.25708008]
[629.83990479 -99.50326538]
[615.61315918 -94.74945068]
[605.99401855 -83.37744904]
[590.45312500 -86.34234619]
[576.22637939 -81.58853149]
[573.30731201 -77.73436737]
[567.90942383 -75.71086884]
[561.30780029 -76.94627380]
[546.89562988 -72.78839111]
[532.48339844 -68.63050079]
[518.07116699 -64.47261810]
[503.65896606 -60.31472778]
[489.24673462 -56.15684128]
[474.83453369 -51.99895096]
[460.42230225 -47.84106445]
[453.46960449 -34.71874619]
[438.91278076 -30.29674911]
[425.19604492 -37.67837524]
[410.78381348 -33.52048492]
[396.37161255 -29.36259842]
[399.20532227 -12.26822758]
[399.87591553 5.04760599]
[398.37246704 22.31224442]
[394.71844482 39.25379562]
[388.97100830 55.60542679]
[381.22048950 71.10955048]
[371.58859253 85.52189636]
[360.22677612 98.61534882]
[347.31375122 110.18354797]
[333.05264282 120.04409790]
[317.66784668 128.04150391]
[301.40151978 134.04956055]
[284.50970459 137.97340393]
[267.25827026 139.75093079]
[249.91893005 139.35389709]
[232.76466370 136.78823853]
[216.06565857 132.09408569]
[200.08496094 125.34506989]
[185.07432556 116.64719391]
[171.27027893 106.13717651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[28 43]
[29 42]
[31 40]
[32 39]
[33 38]
[83 130]
[84 129]
[85 128]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 115]
[97 114]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
