%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUxxxxxxxxxxGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-11.41004753 291.09622192]
[-19.39996338 303.79113770]
[-27.38987923 316.48608398]
[-35.37979507 329.18099976]
[-43.36971283 341.87591553]
[-50.95962143 354.81399536]
[-58.14212799 367.98257446]
[-65.32463837 381.15115356]
[-72.50714874 394.31973267]
[-79.68965912 407.48831177]
[-81.96585846 424.28875732]
[-98.73985291 426.75234985]
[-105.75067139 411.31588745]
[-92.85823822 400.30581665]
[-85.67572784 387.13723755]
[-78.49321747 373.96862793]
[-71.31071472 360.80004883]
[-64.12820435 347.63146973]
[-64.80593109 344.10894775]
[-63.76987839 340.08050537]
[-60.80032730 336.37457275]
[-56.06464386 333.88601685]
[-48.07472610 321.19107056]
[-40.08480835 308.49615479]
[-32.09489441 295.80120850]
[-24.10497665 283.10629272]
[-41.20918655 270.26428223]
[-56.99315643 255.83038330]
[-71.30931854 239.93954468]
[-84.02382660 222.74034119]
[-95.01779175 204.39358521]
[-104.18844604 185.07078552]
[-111.45003510 164.95262146]
[-116.73466492 144.22718811]
[-119.99293518 123.08824158]
[-121.19438171 101.73343658]
[-120.32776642 80.36242676]
[-117.40119934 59.17501450]
[-112.44203186 38.36929703]
[-105.49663544 18.13979721]
[-96.62994385 -1.32434928]
[-109.72309875 -8.64345455]
[-122.81625366 -15.96256065]
[-138.63745117 -15.94251060]
[-145.97145081 -28.90637207]
[-159.06460571 -36.22547531]
[-172.15776062 -43.54458237]
[-185.25091553 -50.86368942]
[-202.02677917 -53.31452942]
[-204.31573486 -70.11325073]
[-188.80717468 -76.96310425]
[-177.93180847 -63.95684433]
[-164.83865356 -56.63773727]
[-151.74549866 -49.31863022]
[-138.65234375 -41.99952698]
[-123.76766205 -42.54308701]
[-115.49715424 -29.05571556]
[-102.40399933 -21.73660851]
[-89.31084442 -14.41750336]
[-82.27301025 -25.32561684]
[-74.60741425 -35.80210114]
[-66.34046173 -45.81087494]
[-57.50062180 -55.31746292]
[-48.11833572 -64.28913116]
[-38.22592545 -72.69497681]
[-27.85745049 -80.50604248]
[-17.04862976 -87.69544220]
[-5.83668375 -94.23840332]
[5.73976994 -100.11238861]
[17.64086151 -105.29718018]
[29.82560539 -109.77490997]
[42.25203323 -113.53016663]
[54.87734985 -116.55001068]
[67.65807343 -118.82403564]
[80.55017853 -120.34442139]
[93.50927734 -121.10592651]
[106.49072266 -121.10592651]
[119.44982147 -120.34442139]
[132.34193420 -118.82403564]
[145.12265015 -116.55001068]
[157.74797058 -113.53016663]
[170.17439270 -109.77490997]
[182.35913086 -105.29718018]
[194.26022339 -100.11238861]
[205.83668518 -94.23840332]
[217.04862976 -87.69544220]
[227.85745239 -80.50604248]
[238.22592163 -72.69497681]
[248.11833191 -64.28913116]
[257.50061035 -55.31746292]
[266.34045410 -45.81087494]
[274.60742188 -35.80210114]
[282.27301025 -25.32561684]
[289.31085205 -14.41750336]
[302.40399170 -21.73660851]
[315.49716187 -29.05571556]
[328.59030151 -36.37482071]
[341.68347168 -43.69392776]
[347.41625977 -58.67774200]
[362.74844360 -63.40041351]
[375.91848755 -54.23910904]
[376.82345581 -38.22159958]
[364.76913452 -27.63514900]
[349.00256348 -30.60077095]
[335.90942383 -23.28166580]
[322.81625366 -15.96256065]
[309.72311401 -8.64345455]
[296.62994385 -1.32434928]
[302.21856689 10.34730339]
[307.11514282 22.32578850]
[311.30282593 34.57011032]
[314.76736450 47.03836060]
[317.49688721 59.68787003]
[319.48202515 72.47534943]
[320.71597290 85.35702515]
[321.19454956 98.28881836]
[320.91610718 111.22646332]
[319.88159180 124.12569427]
[318.09451294 136.94235229]
[315.56106567 149.63258362]
[312.28982544 162.15293884]
[308.29205322 174.46058655]
[303.58142090 186.51338196]
[298.17404175 198.27011108]
[292.08840942 209.69050598]
[285.34536743 220.73548889]
[277.96798706 231.36726379]
[269.98150635 241.54943848]
[261.41329956 251.24716187]
[252.29266357 260.42727661]
[242.65080261 269.05828857]
[232.52072144 277.11074829]
[221.93710327 284.55703735]
[210.93615723 291.37170410]
[199.55554199 297.53140259]
[187.83421326 303.01504517]
[175.81225586 307.80389404]
[163.53085327 311.88156128]
[151.03199768 315.23403931]
[138.35850525 317.84991455]
[125.55372620 319.72021484]
[112.66149139 320.83850098]
[99.72592926 321.20101929]
[86.79129791 320.80645752]
[73.90187836 319.65618896]
[61.10177231 317.75418091]
[48.43479538 315.10693359]
[35.94429779 311.72348022]
[23.67302895 307.61538696]
[11.66298580 302.79678345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[5 22]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[41 59]
[42 58]
[43 57]
[45 55]
[46 54]
[47 53]
[48 52]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
