%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCAAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAxxxxxxxxxxCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.91526794 369.04373169]
[132.91526794 354.04373169]
[132.91526794 339.04373169]
[132.91526794 324.04373169]
[132.91526794 309.04373169]
[132.91526794 294.04373169]
[132.91526794 279.04373169]
[132.91526794 264.04373169]
[132.91526794 249.04374695]
[132.91526794 234.04374695]
[130.58415222 219.22598267]
[125.97859192 204.95053101]
[114.70727539 195.21365356]
[117.83367157 179.70442200]
[113.22810364 165.42897034]
[108.62254333 151.15350342]
[104.01697540 136.87803650]
[99.41141510 122.60258484]
[80.38341522 115.12174988]
[73.79046631 93.82677460]
[87.31136322 73.82875824]
[76.01235962 63.96303940]
[64.71335602 54.09731674]
[53.41435242 44.23159409]
[40.63699722 36.37416840]
[26.73443985 30.74221039]
[12.83188343 25.11025238]
[-1.07067263 19.47829628]
[-15.47977543 25.39568710]
[-29.49871445 19.48603439]
[-35.05124283 5.71269083]
[-48.95380020 0.08073403]
[-58.65842438 8.07678032]
[-70.77813721 11.14481640]
[-82.97623444 8.75711727]
[-92.92803955 1.43174601]
[-98.76393127 -9.37830067]
[-99.42046356 -21.57295418]
[-113.07670593 -27.77836037]
[-126.73294067 -33.98376846]
[-140.38919067 -40.18917465]
[-154.04542542 -46.39458084]
[-169.81019592 -45.05946350]
[-178.19644165 -57.36882019]
[-191.85267639 -63.57422638]
[-207.31816101 -59.30827332]
[-220.21075439 -68.85607147]
[-220.64038086 -84.89337158]
[-208.27743530 -95.11772919]
[-192.60574341 -91.68589020]
[-185.64727783 -77.23046875]
[-171.99102783 -71.02506256]
[-157.20304871 -72.80403137]
[-147.84001160 -60.05082321]
[-134.18377686 -53.84541702]
[-120.52753448 -47.64000702]
[-106.87129211 -41.43460083]
[-93.21505737 -35.22919464]
[-78.33598328 -44.64625931]
[-60.62318420 -43.28345490]
[-47.12413406 -31.49540901]
[-43.32184219 -13.82182217]
[-29.41928673 -8.18986511]
[-15.84619713 -14.21537781]
[-1.66679859 -8.70182037]
[4.56128407 5.57574034]
[18.46384048 11.20769691]
[32.36639786 16.83965302]
[46.26895142 22.47161102]
[37.56380844 10.25602818]
[33.46905136 -4.17425156]
[34.46077728 -19.14143181]
[40.42367935 -32.90529251]
[50.66445160 -43.86551666]
[63.99241257 -50.74777222]
[78.85793304 -52.75186539]
[93.53260040 -49.64477921]
[106.31021881 -41.78777313]
[115.70513916 -30.09437561]
[120.62501526 -15.92416763]
[120.49782562 -0.92470676]
[115.33834839 13.16003132]
[105.74649048 24.69242668]
[92.83747101 32.33161926]
[78.11221313 35.18939972]
[63.28007507 32.93258667]
[74.57907867 42.79830933]
[85.87808228 52.66403198]
[97.17709351 62.52975845]
[87.40631104 51.14854813]
[84.31474304 36.47060013]
[88.66471100 22.11518860]
[99.38359833 11.62207127]
[113.82833862 7.57863379]
[128.43716431 10.98190689]
[139.60783386 20.99271202]
[144.58587646 35.14258957]
[142.14382935 49.94246674]
[132.88383484 61.74299622]
[119.09043121 67.63422394]
[133.58602905 63.77706528]
[136.91253662 48.83742142]
[146.80966187 37.16242599]
[161.00311279 31.43490601]
[176.23133850 32.97100067]
[188.99501038 41.41773224]
[196.36112976 54.83410263]
[196.63700867 70.13712311]
[189.75924683 83.81027985]
[177.30833435 92.71157074]
[162.14535522 94.79555511]
[147.75468445 89.58334351]
[137.44319153 78.27265930]
[122.94758606 82.12982178]
[126.49971771 92.77769470]
[125.63123322 103.33743286]
[120.96535492 112.14474487]
[113.68687439 117.99701691]
[118.29243469 132.27247620]
[122.89800262 146.54794312]
[127.50357056 160.82339478]
[132.10913086 175.09886169]
[143.70986938 185.85681152]
[140.25405884 200.34495544]
[144.85961914 214.62042236]
[148.77616882 200.14076233]
[157.57717896 187.99406433]
[170.11654663 179.76214600]
[184.76130676 176.51699829]
[199.60435486 178.68122864]
[212.71275330 185.97299194]
[222.37945557 197.44273376]
[227.34562683 211.59678650]
[226.96452332 226.59193420]
[221.28579712 240.47544861]
[211.04893494 251.43934631]
[197.58706665 258.05584717]
[182.65324402 259.46328735]
[168.19223022 255.47843933]
[156.08721924 246.62017822]
[147.91526794 234.04374695]
[147.91526794 249.04374695]
[147.91526794 264.04373169]
[147.91526794 279.04373169]
[147.91526794 294.04373169]
[147.91526794 309.04373169]
[147.91526794 324.04373169]
[147.91526794 339.04373169]
[147.91526794 354.04373169]
[147.91526794 369.04373169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[14 122]
[15 121]
[16 120]
[17 119]
[18 118]
[21 89]
[22 88]
[23 87]
[24 86]
[25 69]
[26 68]
[27 67]
[28 66]
[31 63]
[32 62]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[44 52]
[45 51]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
