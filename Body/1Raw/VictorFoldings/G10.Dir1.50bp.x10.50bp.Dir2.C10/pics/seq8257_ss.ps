%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACxxxxxxxxxxCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-41.80017471 328.86782837]
[-50.05246353 341.39379883]
[-58.30475235 353.91976929]
[-66.55704498 366.44573975]
[-74.80933380 378.97167969]
[-75.94039154 394.75241089]
[-89.40347290 401.12380981]
[-97.65576172 413.64978027]
[-105.90805054 426.17572021]
[-114.16033936 438.70169067]
[-109.51390839 453.63302612]
[-115.59986115 468.03771973]
[-129.54460144 475.11431885]
[-144.76383972 471.52145386]
[-154.07153320 458.95559692]
[-153.07286072 443.34994507]
[-142.23937988 432.07299805]
[-126.68630219 430.44940186]
[-118.43401337 417.92343140]
[-110.18172455 405.39749146]
[-101.92943573 392.87152100]
[-101.38863373 377.98672485]
[-87.33529663 370.71939087]
[-79.08300781 358.19345093]
[-70.83071899 345.66748047]
[-62.57842636 333.14151001]
[-54.32613754 320.61553955]
[-65.91461182 312.03802490]
[-77.02730560 302.85244751]
[-87.63235474 293.08514404]
[-97.69934845 282.76419067]
[-107.19940948 271.91909790]
[-116.10531616 260.58105469]
[-124.39150238 248.78248596]
[-132.03422546 236.55728149]
[-139.01156616 223.94049072]
[-145.30352783 210.96827698]
[-150.89202881 197.67785645]
[-155.76109314 184.10733032]
[-159.89671326 170.29562378]
[-163.28706360 156.28233337]
[-165.92240906 142.10763550]
[-167.79518127 127.81220245]
[-168.90002441 113.43701172]
[-169.23376465 99.02328491]
[-168.79545593 84.61236572]
[-167.58634949 70.24556732]
[-165.60989380 55.96409225]
[-162.87178040 41.80889511]
[-159.37985229 27.82056999]
[-155.14411926 14.03922653]
[-150.17674255 0.50438529]
[-144.49194336 -12.74514103]
[-138.10604858 -25.67135811]
[-131.03733826 -38.23719788]
[-123.30612183 -50.40662766]
[-114.93453979 -62.14474869]
[-105.94661713 -73.41790009]
[-96.36811066 -84.19376373]
[-86.22650146 -94.44142151]
[-75.55086517 -104.13150024]
[-64.37181854 -113.23621368]
[-52.72141647 -121.72944641]
[-40.63307190 -129.58683777]
[-28.14144135 -136.78587341]
[-15.28235340 -143.30589294]
[-2.09267902 -149.12820435]
[11.38975716 -154.23611450]
[25.12629318 -158.61497498]
[39.07753754 -162.25222778]
[53.20348358 -165.13743591]
[67.46362305 -167.26234436]
[81.81707001 -168.62084961]
[96.22264862 -169.20904541]
[110.63906860 -169.02525330]
[125.02497864 -168.07000732]
[139.33912659 -166.34603882]
[153.54045105 -163.85829163]
[167.58825684 -160.61390686]
[181.44224548 -156.62217712]
[195.06268311 -151.89454651]
[208.41052246 -146.44459534]
[221.44747925 -140.28791809]
[234.13618469 -133.44219971]
[246.44021606 -125.92706299]
[258.32434082 -117.76405334]
[269.75442505 -108.97657776]
[280.69772339 -99.58984375]
[291.12286377 -89.63076019]
[300.99993896 -79.12788391]
[310.30062866 -68.11134338]
[318.99826050 -56.61272812]
[331.43768311 -64.99487305]
[343.87713623 -73.37701416]
[356.31655884 -81.75915527]
[357.77828979 -97.32826996]
[368.94192505 -108.27848816]
[384.53634644 -109.43943787]
[397.19836426 -100.26296997]
[400.94934082 -85.08191681]
[394.01818848 -71.06432343]
[379.67758179 -64.82885742]
[364.69869995 -69.31971741]
[352.25927734 -60.93757248]
[339.81982422 -52.55542755]
[327.38040161 -44.17328644]
[335.41952515 -30.63467979]
[342.65350342 -16.64927673]
[349.05755615 -2.26491284]
[354.60977173 12.46921635]
[359.29119873 27.50271797]
[363.08578491 42.78417206]
[365.98056030 58.26131821]
[367.96563721 73.88121796]
[369.03424072 89.59044647]
[369.18267822 105.33528137]
[368.41046143 121.06185913]
[366.72024536 136.71641541]
[364.11776733 152.24537659]
[360.61196899 167.59567261]
[356.21484375 182.71475220]
[350.94140625 197.55094910]
[344.80969238 212.05349731]
[337.84069824 226.17280579]
[330.05825806 239.86058044]
[321.48895264 253.07000732]
[312.16210938 265.75588989]
[302.10964966 277.87487793]
[291.36590576 289.38549805]
[279.96768188 300.24838257]
[267.95394897 310.42636108]
[255.36575317 319.88464355]
[242.24618530 328.59091187]
[228.64010620 336.51531982]
[214.59405518 343.63082886]
[200.15608215 349.91305542]
[185.37554932 355.34054565]
[170.30300903 359.89471436]
[154.99002075 363.55999756]
[139.48896790 366.32385254]
[123.85284424 368.17684937]
[108.13514709 369.11260986]
[92.38961792 369.12796021]
[76.67012787 368.22283936]
[61.03042221 366.40036011]
[45.52400208 363.66671753]
[30.20390129 360.03131104]
[15.12251472 355.50653076]
[0.33142596 350.10787964]
[-14.11877823 343.85382080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[7 21]
[8 20]
[9 19]
[10 18]
[92 106]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
