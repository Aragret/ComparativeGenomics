%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACxxxxxxxxxxUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.63914490 404.70852661]
[133.63914490 389.70852661]
[133.63914490 374.70852661]
[133.63914490 359.70852661]
[133.63914490 344.70852661]
[133.63914490 329.70852661]
[133.63914490 314.70852661]
[133.63914490 299.70852661]
[133.63914490 284.70852661]
[133.63914490 269.70852661]
[129.69479370 265.04714966]
[128.55625916 258.29766846]
[131.24952698 251.20449829]
[127.43885803 236.69660950]
[123.62818909 222.18872070]
[119.81752014 207.68083191]
[116.00685120 193.17294312]
[111.24054718 187.47212219]
[112.26723480 178.34074402]
[108.74394226 163.76040649]
[105.22064972 149.18005371]
[101.69735718 134.59971619]
[98.17407227 120.01937103]
[100.29021454 134.86935425]
[94.39873505 148.66394043]
[82.20780182 157.40356445]
[67.25200653 158.55430603]
[53.86758804 151.78250122]
[45.93517303 139.05155945]
[45.75466919 124.05264282]
[53.37840652 111.13449097]
[66.59598541 104.04254913]
[81.57282257 104.83225250]
[66.73722076 102.61755371]
[51.90161514 100.40285492]
[37.06601334 98.18815613]
[22.23040962 95.97345734]
[7.39480686 93.75875854]
[-2.10141563 105.83010101]
[-16.36701202 111.52117920]
[-31.56460571 109.30111694]
[-43.60612488 99.76710510]
[-49.25245667 85.48374176]
[-46.98476791 70.29317474]
[-37.41305923 58.28160095]
[-23.11206436 52.68006897]
[-7.92868614 54.99536133]
[4.05282640 64.60467529]
[9.60950565 78.92315674]
[24.44510841 81.13785553]
[39.28071213 83.35255432]
[54.11631393 85.56725311]
[68.95191956 87.78195190]
[83.78752136 89.99665070]
[71.82983398 80.94049835]
[57.64428711 76.06503296]
[46.50291061 66.02163696]
[40.18706512 52.41612244]
[39.70656204 37.42382050]
[45.13823318 23.44179726]
[55.61362839 12.70559025]
[69.45787048 6.93177176]
[84.45745087 7.04349661]
[98.21414948 13.02290249]
[108.52845001 23.91396141]
[113.75123596 37.97534561]
[113.04746246 52.95882416]
[106.53175354 66.46598053]
[104.55348206 81.33495331]
[113.41814423 69.23463440]
[122.28280640 57.13431931]
[131.14747620 45.03400040]
[120.29103088 34.65167236]
[110.88268280 22.94108391]
[103.08340454 10.10261154]
[97.02667236 -3.64405870]
[92.81610870 -18.06370354]
[90.52376556 -32.90958405]
[90.18887329 -47.92766953]
[91.81715393 -62.86097717]
[95.38075256 -77.45397949]
[100.81868744 -91.45697784]
[108.03791809 -104.63035583]
[116.91489410 -116.74869537]
[127.29773712 -127.60464478]
[139.00877380 -137.01243591]
[151.84762573 -144.81109619]
[165.59457397 -150.86718750]
[180.01441956 -155.07705688]
[194.86041260 -157.36869812]
[209.87850952 -157.70286560]
[224.81175232 -156.07388306]
[239.40458679 -152.50958252]
[253.40731812 -147.07098389]
[266.58035278 -139.85113525]
[278.69827271 -130.97357178]
[289.55371094 -120.59020996]
[298.96096802 -108.87872314]
[306.75900269 -96.03951263]
[312.81445312 -82.29226685]
[317.02362061 -67.87221527]
[319.31454468 -53.02611923]
[319.64801025 -38.00800323]
[318.01831055 -23.07484818]
[314.45333862 -8.48218346]
[309.01406860 5.52029324]
[301.79357910 18.69298172]
[292.91543579 30.81047821]
[282.53155518 41.66543579]
[270.81964111 51.07211685]
[257.98004150 58.86955643]
[244.23251343 64.92433167]
[229.81227112 69.13283539]
[214.96606445 71.42305756]
[199.94792175 71.75580597]
[185.01484680 70.12538910]
[170.42234802 66.55970764]
[156.42013550 61.11977005]
[143.24778748 53.89866257]
[134.38313293 65.99898529]
[125.51846313 78.09930420]
[116.65380096 90.19962311]
[119.72474670 103.80084229]
[112.75441742 116.49607849]
[116.27770233 131.07641602]
[119.80099487 145.65676880]
[123.32428741 160.23710632]
[126.84757996 174.81745911]
[130.51473999 189.36227417]
[134.32540894 203.87016296]
[138.13607788 218.37805176]
[141.94674683 232.88594055]
[145.75741577 247.39382935]
[150.50395203 233.16461182]
[159.94515991 221.50857544]
[172.87840271 213.91046143]
[187.65620422 211.33818054]
[202.39611816 214.11935425]
[215.22053528 221.89974976]
[224.49583435 233.68824768]
[229.04051208 247.98321533]
[228.27565002 262.96368408]
[222.29867554 276.72143555]
[211.87095642 287.50396729]
[198.32080078 293.93774414]
[183.37428284 295.20321655]
[168.93531799 291.13919067]
[156.84318542 282.26336670]
[148.63914490 269.70852661]
[148.63914490 284.70852661]
[148.63914490 299.70852661]
[148.63914490 314.70852661]
[148.63914490 329.70852661]
[148.63914490 344.70852661]
[148.63914490 359.70852661]
[148.63914490 374.70852661]
[148.63914490 389.70852661]
[148.63914490 404.70852661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[69 122]
[70 121]
[71 120]
[72 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
