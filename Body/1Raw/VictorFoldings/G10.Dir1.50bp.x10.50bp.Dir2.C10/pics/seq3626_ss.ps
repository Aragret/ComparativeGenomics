%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.71446991 252.52560425]
[102.41810608 237.52853394]
[102.12174988 222.53146362]
[101.82539368 207.53437805]
[101.52903748 192.53730774]
[101.23268127 177.54023743]
[100.93632507 162.54316711]
[100.63996887 147.54609680]
[100.34360504 132.54902649]
[86.23139954 127.46516418]
[76.43907166 138.82783508]
[66.64673615 150.19050598]
[56.85440445 161.55317688]
[61.33914948 176.31428528]
[57.10951233 191.15052795]
[45.51515961 201.32768250]
[30.25580215 203.59826660]
[16.20064735 197.23774719]
[7.83464479 184.27574158]
[7.82735491 168.84837341]
[16.18110275 155.87847900]
[30.23023987 149.50468445]
[45.49173737 151.76084900]
[55.28406906 140.39817810]
[65.07640076 129.03550720]
[74.86872864 117.67283630]
[71.05474854 111.21501160]
[63.42678070 98.29935455]
[59.61279678 91.84152985]
[44.93445206 94.93120575]
[30.25610352 98.02088928]
[21.83331299 111.39369965]
[6.40320492 114.81237030]
[-6.87981033 106.24866486]
[-10.13515568 90.78327942]
[-1.43149292 77.59154510]
[14.06744957 74.49989319]
[27.16642380 83.34253693]
[41.84477234 80.25286102]
[56.52311707 77.16317749]
[64.77950287 64.63991547]
[61.83498383 49.93176270]
[58.89046478 35.22360992]
[55.80078506 20.54526329]
[52.56624985 5.89815474]
[49.33171082 -8.74895287]
[38.80062866 -20.55602264]
[43.61144638 -34.65230942]
[40.37690735 -49.29941559]
[37.14237213 -63.94652557]
[24.10342598 -72.46847534]
[21.03179932 -87.36880493]
[29.23653030 -99.74692535]
[26.00199318 -114.39403534]
[22.76745605 -129.04113770]
[19.53291893 -143.68824768]
[16.29838371 -158.33535767]
[1.26800442 -157.76309204]
[-13.62298298 -159.88398743]
[-27.89589691 -164.62991333]
[-41.09192276 -171.84826660]
[-52.78685760 -181.30703735]
[-62.60476303 -192.70214844]
[-70.23003387 -205.66729736]
[-75.41754913 -219.78570557]
[-78.00054932 -234.60353088]
[-77.89599609 -249.64442444]
[-75.10726929 -264.42492676]
[-69.72399139 -278.46984863]
[-61.91923141 -291.32772827]
[-51.94387054 -302.58526611]
[-40.11857605 -311.88055420]
[-26.82348442 -318.91476440]
[-12.48597717 -323.46182251]
[2.43305516 -325.37551880]
[17.45402527 -324.59436035]
[32.09407425 -321.14346313]
[45.88258362 -315.13372803]
[58.37630844 -306.75836182]
[69.17362976 -296.28662109]
[77.92745209 -284.05508423]
[84.35638428 -270.45697021]
[88.25376129 -255.92941284]
[89.49429321 -240.93939209]
[88.03810883 -225.96878052]
[83.93201447 -211.49880981]
[77.30800629 -197.99465942]
[68.37901306 -185.89041138]
[57.43207169 -175.57516479]
[44.81908035 -167.38050842]
[30.94549179 -161.56990051]
[34.18002701 -146.92279053]
[37.41456604 -132.27568054]
[40.64910126 -117.62857056]
[43.88363647 -102.98146057]
[56.53809357 -95.20969391]
[60.02702713 -80.40151978]
[51.78947830 -67.18106079]
[55.02401733 -52.53395462]
[58.25855255 -37.88684464]
[68.55828094 -27.12743568]
[63.97882080 -11.98348999]
[67.21335602 2.66361785]
[70.44789124 17.31072617]
[74.98525238 23.19539833]
[73.59861755 32.27909088]
[76.54313660 46.98724365]
[79.48766327 61.69539642]
[93.21721649 57.71721649]
[107.28543091 58.43809128]
[120.15141296 63.64332581]
[130.45031738 72.63448334]
[137.13790894 84.31999207]
[139.59579468 97.34637451]
[154.47225952 99.26753235]
[169.34872437 101.18869019]
[184.22518921 103.10984802]
[193.48106384 90.85324097]
[207.63143921 84.88142395]
[222.86993408 86.80079651]
[235.09745789 96.09503937]
[241.02488708 110.26406097]
[239.05776978 125.49645996]
[229.72523499 137.69480896]
[215.53770447 143.57778931]
[200.31155396 141.56292725]
[188.14251709 132.19221497]
[182.30403137 117.98631287]
[167.42756653 116.06515503]
[152.55110168 114.14399719]
[137.67463684 112.22283936]
[132.09115601 117.23029327]
[144.22543335 126.04842377]
[156.35969543 134.86656189]
[168.49397278 143.68469238]
[180.62825012 152.50282288]
[194.38406372 158.48425293]
[202.71823120 170.95588684]
[202.98170471 185.95356750]
[195.09072876 198.71023560]
[181.55349731 205.17112732]
[166.67285156 203.28263855]
[155.17866516 193.64501953]
[150.72439575 179.32156372]
[143.27433777 166.30247498]
[135.82427979 153.28338623]
[128.37422180 140.26429749]
[120.92417145 127.24520874]
[115.34068298 132.25267029]
[115.63703918 147.24974060]
[115.93339539 162.24681091]
[116.22975159 177.24388123]
[116.52610779 192.24095154]
[116.82246399 207.23802185]
[117.11882782 222.23510742]
[117.41518402 237.23217773]
[117.71154022 252.22924805]
[120.28243256 271.43966675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 26]
[11 25]
[12 24]
[13 23]
[29 40]
[30 39]
[31 38]
[41 108]
[42 107]
[43 106]
[44 104]
[45 103]
[46 102]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
