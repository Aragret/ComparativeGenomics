%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUxxxxxxxxxxUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.88203430 95.77259064]
[170.14114380 81.29663086]
[156.12442017 86.63814545]
[142.10771179 91.97965240]
[128.09100342 97.32116699]
[114.07428741 102.66268158]
[105.10076904 113.38497162]
[91.26722717 111.35403442]
[77.25051117 116.69554901]
[63.23379898 122.03705597]
[49.21708679 127.37857056]
[63.95958710 130.14601135]
[77.27007294 137.06201172]
[88.00909424 147.53451538]
[95.25733185 160.66703796]
[98.39430237 175.33534241]
[97.15145874 190.28376770]
[91.63520050 204.23263550]
[82.31774139 215.98785400]
[69.99671936 224.54309082]
[55.72686386 229.16601562]
[40.72976303 229.46083069]
[26.28924370 225.40234375]
[13.64149189 217.33795166]
[3.86922359 205.95802307]
[-2.19100237 192.23674011]
[-4.02039862 177.34870911]
[-1.46235836 162.56843567]
[5.26413584 149.16119385]
[15.58325958 138.27470398]
[28.61482620 130.83967590]
[13.62212944 130.37162781]
[-1.37056673 129.90359497]
[-16.36326218 129.43554688]
[-31.35595894 128.96749878]
[-42.70148087 139.96998596]
[-58.50240707 139.64389038]
[-69.38432312 128.18267822]
[-68.89118195 112.38607788]
[-57.31556320 101.62594604]
[-41.52506638 102.28607178]
[-30.88791656 113.97480774]
[-15.89522076 114.44284821]
[-0.90252459 114.91088867]
[14.09017181 115.37893677]
[29.08286667 115.84697723]
[43.87557602 113.36185455]
[57.89228821 108.02034760]
[71.90900421 102.67883301]
[85.92571259 97.33731842]
[94.89923096 86.61502838]
[108.73277283 88.64596558]
[122.74948883 83.30445099]
[136.76620483 77.96294403]
[150.78291321 72.62142944]
[164.79962158 67.27991486]
[160.65179443 53.70350266]
[157.40213013 39.88472748]
[155.06457520 25.88294220]
[153.64913940 11.75828648]
[153.16188049 -2.42858171]
[153.60487366 -16.61673355]
[154.97619629 -30.74523735]
[157.26992798 -44.75342178]
[160.47621155 -58.58112717]
[164.58123779 -72.16897583]
[169.56736755 -85.45862579]
[175.41316223 -98.39300537]
[182.09350586 -110.91657257]
[189.57968140 -122.97556305]
[197.83952332 -134.51818848]
[206.83753967 -145.49490356]
[216.53506470 -155.85858154]
[226.89044189 -165.56471252]
[237.85919189 -174.57165527]
[249.39419556 -182.84071350]
[261.44589233 -190.33642578]
[273.96249390 -197.02659607]
[286.89028931 -202.88252258]
[300.17370605 -207.87907410]
[313.75567627 -211.99481201]
[327.57791138 -215.21208191]
[341.58105469 -217.51710510]
[355.70489502 -218.89997864]
[369.88882446 -219.35478210]
[384.07192993 -218.87962341]
[398.19329834 -217.47651672]
[412.19226074 -215.15155029]
[426.00872803 -211.91470337]
[439.58337402 -207.77989197]
[452.85787964 -202.76493835]
[465.77526855 -196.89134216]
[478.28005981 -190.18440247]
[490.31857300 -182.67289734]
[501.83911133 -174.38912964]
[512.79223633 -165.36868286]
[523.13085938 -155.65032959]
[532.81066895 -145.27578735]
[541.79003906 -134.28965759]
[550.03051758 -122.73912048]
[557.49664307 -110.67379761]
[564.15637207 -98.14551544]
[569.98120117 -85.20808411]
[574.94610596 -71.91707611]
[579.02972412 -58.32957840]
[582.21466064 -44.50395203]
[584.48712158 -30.49957466]
[599.42144775 -31.90187836]
[614.35571289 -33.30418015]
[629.56024170 -40.80479050]
[640.97674561 -28.27085495]
[632.09307861 -13.83076572]
[615.75805664 -18.36987305]
[600.82373047 -16.96756935]
[585.88940430 -15.56526661]
[586.24560547 0.38993689]
[585.42547607 16.32828140]
[583.43341064 32.16315460]
[580.28021240 47.80850220]
[575.98303223 63.17930222]
[570.56512451 78.19201660]
[564.05584717 92.76506042]
[556.49066162 106.81921387]
[547.91058350 120.27809906]
[538.36212158 133.06855774]
[527.89727783 145.12106323]
[516.57287598 156.37008667]
[504.45031738 166.75448608]
[491.59552002 176.21780396]
[478.07833862 184.70858765]
[463.97216797 192.18066406]
[449.35363770 198.59338379]
[434.30221558 203.91188049]
[418.89962769 208.10722351]
[403.22961426 211.15655518]
[387.37725830 213.04328918]
[371.42877197 213.75714111]
[355.47076416 213.29417419]
[339.58996582 211.65687561]
[323.87268066 208.85411072]
[308.40432739 204.90106201]
[293.26898193 199.81919861]
[278.54885864 193.63606262]
[264.32400513 186.38525391]
[250.67173767 178.10612488]
[237.66624451 168.84364319]
[225.37821960 158.64810181]
[213.87445068 147.57487488]
[203.21751404 135.68409729]
[193.46530151 123.04039001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[8 50]
[9 49]
[10 48]
[11 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
