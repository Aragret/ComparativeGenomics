%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGxxxxxxxxxxAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.69774628 280.36456299]
[114.69774628 265.36456299]
[114.69774628 250.36456299]
[114.69774628 235.36456299]
[114.69774628 220.36456299]
[114.69774628 205.36456299]
[114.69774628 190.36456299]
[114.69774628 175.36456299]
[114.69774628 160.36456299]
[114.69774628 145.36456299]
[111.59942627 130.68803406]
[105.53641510 116.96797943]
[91.69319153 111.19170380]
[77.67648315 116.53321838]
[67.53620148 128.67756653]
[52.88797760 125.97966003]
[42.74769974 138.12402344]
[28.09947205 135.42610168]
[14.08275795 140.76762390]
[0.06604522 146.10913086]
[-13.95066738 151.45063782]
[-27.79388618 157.22691345]
[-41.45012665 163.43232727]
[-55.10636902 169.63772583]
[-68.76261139 175.84313965]
[-77.85494232 189.49090576]
[-94.20086670 188.17071533]
[-100.98509216 173.24066162]
[-91.22859192 160.05950928]
[-74.96801758 162.18688965]
[-61.31177521 155.98149109]
[-47.65553284 149.77607727]
[-33.99929428 143.57067871]
[-32.42325211 140.34832764]
[-29.17354965 137.75195312]
[-24.57260895 136.57563782]
[-19.29218102 137.43392944]
[-5.27546740 132.09242249]
[8.74124527 126.75090790]
[22.75795937 121.40939331]
[31.89566803 109.64710236]
[47.54646301 111.96295166]
[56.68417358 100.20065308]
[72.33496857 102.51650238]
[86.35168457 97.17498779]
[96.45033264 86.08367920]
[100.45806885 71.62899017]
[104.46581268 57.17429733]
[108.47354889 42.71961212]
[112.48129272 28.26492310]
[108.71244049 12.89916992]
[119.56896973 2.70185947]
[123.57670593 -11.75282860]
[122.22852325 -16.92989159]
[122.96955872 -21.62065506]
[125.25074768 -25.09884834]
[128.31164551 -26.96923637]
[133.21319580 -41.14579391]
[138.11476135 -55.32235336]
[143.01631165 -69.49890900]
[130.47619629 -82.94685364]
[126.45686340 -100.80319977]
[131.97428894 -118.16635895]
[145.43850708 -130.31408691]
[163.11056519 -133.98780823]
[167.11830139 -148.44248962]
[171.12605286 -162.89718628]
[159.77127075 -153.09568787]
[145.56388855 -148.28424072]
[130.59001160 -149.16929626]
[117.04836273 -155.62092590]
[106.92729187 -166.69178772]
[101.71294403 -180.75630188]
[102.17095947 -195.74931335]
[108.23409271 -209.46931458]
[119.01205444 -219.90173340]
[132.92227173 -225.51473999]
[147.92224121 -225.48414612]
[161.80944824 -219.81443787]
[172.54475403 -209.33813477]
[178.55186462 -195.59350586]
[178.94882202 -180.59941101]
[186.93873596 -193.29434204]
[194.92864990 -205.98927307]
[202.78607178 -218.76663208]
[210.51016235 -231.62503052]
[210.25331116 -248.02217102]
[224.46224976 -256.20983887]
[238.52003479 -247.76528931]
[237.96522522 -231.37551880]
[223.36856079 -223.90093994]
[215.64448547 -211.04254150]
[214.89134216 -203.64129639]
[207.62358093 -197.99935913]
[199.63366699 -185.30442810]
[191.64375305 -172.60949707]
[185.58073425 -158.88943481]
[181.57299805 -144.43475342]
[177.56524658 -129.98005676]
[186.99017334 -122.74391937]
[193.41845703 -112.70922089]
[196.06712341 -101.05450439]
[194.59873962 -89.15811920]
[189.16416931 -78.43524170]
[180.38755798 -70.16948700]
[169.29461670 -65.35929871]
[157.19285583 -64.59735870]
[152.29130554 -50.42080307]
[147.38975525 -36.24424362]
[142.48820496 -22.06768608]
[138.03138733 -7.74508858]
[134.02365112 6.70959949]
[138.07916260 21.04145622]
[126.93598175 32.27266312]
[122.92823792 46.72735214]
[118.92050171 61.18204117]
[114.91275787 75.63672638]
[110.90502167 90.09141541]
[119.25646210 110.90496063]
[125.31948090 124.62501526]
[127.27545929 109.75308990]
[133.26898193 96.00254059]
[142.83229065 84.44645691]
[155.21908569 75.98670197]
[169.46266174 71.28347778]
[184.45146179 70.70381927]
[199.01573181 74.29297638]
[212.01887512 81.77083588]
[222.44609070 92.55382538]
[229.48367310 105.80043793]
[232.58235168 120.47688293]
[231.50035095 135.43780518]
[226.32208252 149.51564026]
[217.45166016 161.61175537]
[205.58135986 170.78213501]
[191.63754272 176.31112671]
[176.70837402 177.76724243]
[161.95896912 175.03684998]
[148.54037476 168.33302307]
[137.49978638 158.17895508]
[129.69775391 145.36456299]
[129.69775391 160.36456299]
[129.69775391 175.36456299]
[129.69775391 190.36456299]
[129.69775391 205.36456299]
[129.69775391 220.36456299]
[129.69775391 235.36456299]
[129.69775391 250.36456299]
[129.69775391 265.36456299]
[129.69775391 280.36456299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[13 45]
[14 44]
[16 42]
[18 40]
[19 39]
[20 38]
[21 37]
[22 33]
[23 32]
[24 31]
[25 30]
[46 118]
[47 117]
[48 116]
[49 115]
[50 114]
[52 112]
[53 111]
[57 110]
[58 109]
[59 108]
[60 107]
[65 99]
[66 98]
[67 97]
[82 96]
[83 95]
[84 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
