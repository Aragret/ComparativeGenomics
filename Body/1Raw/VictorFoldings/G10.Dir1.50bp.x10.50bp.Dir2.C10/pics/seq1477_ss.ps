%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUxxxxxxxxxxAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.62378693 298.69631958]
[86.62378693 283.69631958]
[86.62378693 268.69631958]
[86.62378693 253.69631958]
[86.62378693 238.69631958]
[86.62378693 223.69631958]
[86.62378693 208.69631958]
[86.62378693 193.69631958]
[86.62378693 178.69631958]
[86.62378693 163.69631958]
[72.39700317 158.94250488]
[63.37947464 170.92933655]
[54.36194611 182.91616821]
[52.91474915 199.25132751]
[37.93242264 205.91931152]
[24.82749939 196.06065369]
[27.08120155 179.81710815]
[42.37511063 173.89863586]
[51.39264297 161.91180420]
[60.41017151 149.92497253]
[50.25843811 139.26213074]
[42.87441635 126.61817932]
[38.62277222 112.69090271]
[37.69649887 98.23915863]
[40.10842514 84.04157257]
[45.69253922 70.85453796]
[54.11482620 59.37197876]
[64.89305878 50.18879700]
[77.42427826 43.77011871]
[91.01850128 40.42781067]
[104.93664551 40.30549622]
[108.03496552 25.62897110]
[111.13328552 10.95244598]
[114.23160553 -3.72407961]
[117.32993317 -18.40060425]
[120.27541351 -33.10856628]
[123.06774139 -47.84637070]
[125.86006165 -62.58417892]
[128.65238953 -77.32198334]
[131.44471741 -92.05979156]
[124.95011139 -109.25862885]
[136.83799744 -122.13022614]
[139.32312012 -136.92292786]
[141.80824280 -151.71563721]
[144.29335022 -166.50834656]
[135.14700317 -154.61952209]
[120.38953400 -151.93304443]
[107.64026642 -159.83596802]
[103.48166656 -174.24798584]
[110.06084442 -187.72813416]
[123.98094177 -193.31658936]
[138.05651855 -188.12667847]
[128.07380676 -199.32243347]
[118.09107208 -210.51820374]
[102.46703339 -209.86752319]
[90.11169434 -219.45289612]
[86.85885620 -234.74842834]
[94.24443054 -248.53201294]
[108.78115845 -254.29548645]
[123.60524750 -249.31748962]
[131.71720886 -235.94850159]
[129.28683472 -220.50093079]
[139.26956177 -209.30516052]
[149.25228882 -198.10940552]
[164.20037842 -199.35627747]
[172.19029236 -212.05120850]
[180.18020630 -224.74613953]
[184.93402100 -238.97291565]
[186.18090820 -253.92100525]
[187.42778015 -268.86907959]
[173.90010071 -275.80236816]
[164.05921936 -287.38793945]
[159.40579224 -301.85910034]
[160.64944458 -317.00906372]
[167.60052490 -330.52761841]
[179.19902039 -340.35324097]
[193.67628479 -344.98760986]
[208.82461548 -343.72406006]
[222.33399963 -336.75518799]
[232.14436340 -325.14376831]
[236.75970459 -310.66043091]
[235.47619629 -295.51379395]
[228.48957825 -282.01358032]
[216.86526489 -272.21847534]
[202.37586975 -267.62222290]
[201.12898254 -252.67411804]
[199.88211060 -237.72604370]
[206.22958374 -233.73107910]
[219.49636841 -240.73052979]
[218.92451477 -225.74116516]
[225.27197266 -221.74620056]
[238.21002197 -229.33612061]
[251.14808655 -236.92602539]
[249.02484131 -251.97793579]
[252.82817078 -266.69537354]
[261.97811890 -278.83404541]
[275.07934570 -286.54287720]
[290.13406372 -288.64630127]
[304.84646606 -284.82360840]
[316.97308350 -275.65771484]
[324.66467285 -262.54635620]
[326.74832153 -247.48889160]
[322.90628052 -232.78150940]
[313.72442627 -220.66696167]
[300.60293579 -212.99263000]
[285.54275513 -210.92880249]
[270.84045410 -214.79019165]
[258.73800659 -223.98796082]
[245.79994202 -216.39805603]
[232.86187744 -208.80815125]
[192.87513733 -216.75621033]
[184.88522339 -204.06129456]
[176.89530945 -191.36636353]
[159.08605957 -164.02322388]
[156.60095215 -149.23052979]
[154.11582947 -134.43782043]
[151.63070679 -119.64511108]
[158.40437317 -109.57411957]
[156.41032410 -97.19499207]
[146.18251038 -89.26746368]
[143.39019775 -74.52966309]
[140.59786987 -59.79185486]
[137.80554199 -45.05404663]
[135.01321411 -30.31624222]
[136.87020874 -23.11226654]
[132.00645447 -15.30228329]
[128.90814209 -0.62575775]
[125.80981445 14.05076790]
[122.71149445 28.72729301]
[119.61316681 43.40382004]
[133.34530640 49.82426834]
[145.09985352 59.53438568]
[154.10002136 71.94931030]
[159.73692322 86.30381775]
[161.61062622 101.69939423]
[159.55827332 117.16051483]
[153.66717529 131.69639587]
[144.27198792 144.36456299]
[131.93606567 154.33183289]
[117.41774750 160.92913818]
[101.62378693 163.69631958]
[101.62378693 178.69631958]
[101.62378693 193.69631958]
[101.62378693 208.69631958]
[101.62378693 223.69631958]
[101.62378693 238.69631958]
[101.62378693 253.69631958]
[101.62378693 268.69631958]
[101.62378693 283.69631958]
[101.62378693 298.69631958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 20]
[12 19]
[13 18]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[36 124]
[37 123]
[38 122]
[39 121]
[40 120]
[42 117]
[43 116]
[44 115]
[45 114]
[52 64]
[53 63]
[54 62]
[65 113]
[66 112]
[67 111]
[68 87]
[69 86]
[70 85]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
