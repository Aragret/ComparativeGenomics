%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUxxxxxxxxxxGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[64.63219452 457.99160767]
[67.22319794 438.78387451]
[67.53525543 423.78710938]
[67.84730530 408.79037476]
[68.15936279 393.79360962]
[68.47142029 378.79687500]
[68.78347778 363.80010986]
[69.09553528 348.80334473]
[69.40759277 333.80661011]
[69.71964264 318.80984497]
[57.30154800 316.22689819]
[45.49753952 311.57537842]
[34.64958572 304.98880005]
[25.07216263 296.65667725]
[17.04316139 286.81912231]
[10.79581451 275.76007080]
[6.51192141 263.79885864]
[4.31655979 251.28114319]
[4.27443361 238.56889343]
[6.38796711 226.02987671]
[10.59719849 214.02711487]
[16.78148270 202.90824890]
[24.76294899 192.99557495]
[34.31160736 184.57662964]
[45.15199661 177.89590454]
[56.97110748 173.14770508]
[69.42743683 170.47055054]
[82.16084290 169.94306946]
[84.33767700 155.10185242]
[86.51451111 140.26065063]
[69.09805298 129.11784363]
[59.00941849 111.07026672]
[58.64093399 90.39758301]
[44.85855484 84.47762299]
[31.07617188 78.55766296]
[17.29379082 72.63769531]
[3.51140928 66.71773529]
[-10.27097225 60.79777145]
[-24.05335426 54.87780762]
[-34.42054367 65.93661499]
[-47.94625092 72.77993011]
[-62.99718094 74.58140564]
[-77.75585938 71.12348938]
[-90.44010925 62.82374954]
[-99.51824188 50.68441772]
[-103.89402008 36.17137909]
[-103.03906250 21.03715134]
[-97.05660248 7.10926771]
[-86.66905212 -3.93041348]
[-73.13075256 -10.74879646]
[-58.07653046 -12.52252769]
[-43.32424927 -9.03742123]
[-30.65531731 -0.71432048]
[-21.59957314 11.44172001]
[-17.25054359 25.96279907]
[-18.13339043 41.09542465]
[-4.35100937 47.01538849]
[9.43137264 52.93535233]
[23.21375275 58.85531616]
[36.99613571 64.77527618]
[50.77851486 70.69524384]
[64.56089783 76.61520386]
[81.23731232 61.91141891]
[103.05826569 57.65114212]
[106.76442719 43.11620712]
[110.47058868 28.58127022]
[114.17675018 14.04633522]
[100.67702484 7.37916422]
[88.85873413 -1.94937313]
[79.23851013 -13.53147316]
[72.23691559 -26.86081696]
[68.16003418 -41.35470200]
[67.18608093 -56.37951660]
[69.35764313 -71.27844238]
[74.57977295 -85.40016937]
[82.62419891 -98.12734222]
[93.13924408 -108.90358734]
[105.66523743 -117.25782013]
[119.65459442 -122.82482910]
[134.49575806 -125.36123657]
[149.53994751 -124.75617981]
[164.12948608 -121.03609467]
[177.62658691 -114.36360931]
[189.44120789 -105.03042603]
[199.05686951 -93.44454193]
[206.05322266 -80.11244965]
[210.12440491 -65.61695862]
[211.09243774 -50.59175873]
[208.91502380 -35.69368744]
[203.68733215 -21.57402229]
[195.63790894 -8.85001564]
[185.11862183 1.92209566]
[172.58934021 10.27139950]
[158.59779358 15.83290195]
[143.75563049 18.36347580]
[128.71168518 17.75249672]
[125.00552368 32.28743362]
[121.29936218 46.82236862]
[117.59320068 61.35730362]
[122.90129852 64.24655151]
[127.74542236 67.86014557]
[132.02743530 72.12487793]
[135.66058350 76.95435333]
[138.57125854 82.25072479]
[140.70050049 87.90669250]
[142.00515747 93.80766296]
[156.99786377 94.27570343]
[171.99055481 94.74375153]
[186.98324585 95.21179199]
[201.97595215 95.67983246]
[212.26087952 83.90043640]
[227.71913147 81.53900146]
[241.05180359 89.71054077]
[245.96359253 104.55669403]
[240.13533020 119.06755829]
[226.31892395 126.39155579]
[211.03807068 123.07051849]
[201.50790405 110.67253113]
[186.51521301 110.20448303]
[171.52250671 109.73644257]
[156.52981567 109.26840210]
[141.53712463 108.80036163]
[138.58575439 117.71773529]
[133.74595642 125.76798248]
[127.25460052 132.55711365]
[119.42935944 137.75286865]
[110.65322876 141.10093689]
[101.35572052 142.43748474]
[99.17887878 157.27870178]
[97.00204468 172.11990356]
[113.38594818 178.38035583]
[127.85926819 188.27433777]
[139.63070679 201.25679016]
[148.05763245 216.61389160]
[152.68118286 233.50231934]
[153.25125122 250.99559021]
[149.74000549 268.13482666]
[142.34323120 283.98138428]
[131.46940613 297.66821289]
[117.71717834 308.44729614]
[101.84235382 315.73052979]
[84.71640015 319.12191772]
[84.40434265 334.11865234]
[84.09228516 349.11541748]
[83.78022766 364.11215210]
[83.46817780 379.10891724]
[83.15612030 394.10568237]
[82.84406281 409.10241699]
[82.53200531 424.09918213]
[82.21994781 439.09594727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[28 130]
[29 129]
[30 128]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[64 99]
[65 98]
[66 97]
[67 96]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
