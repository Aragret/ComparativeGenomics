%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUAxxxxxxxxxxACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 264.59561157]
[92.50000000 249.59559631]
[92.50000000 234.59559631]
[92.50000000 219.59559631]
[92.50000000 204.59559631]
[92.50000000 189.59559631]
[92.50000000 174.59559631]
[92.50000000 159.59559631]
[92.50000000 144.59559631]
[92.50000000 129.59559631]
[85.63997650 126.56409454]
[79.57675171 140.28405762]
[65.85688019 134.22061157]
[71.91992188 120.50108337]
[65.05989075 117.46957397]
[53.96857834 127.56822205]
[42.87726212 137.66687012]
[40.69325638 153.56057739]
[26.83225060 161.63844299]
[11.92721748 155.70384216]
[7.41202593 140.30928040]
[16.75034332 127.26414490]
[32.77861404 126.57556152]
[43.86992645 116.47691345]
[54.96124268 106.37825775]
[52.65846252 99.24053192]
[38.38293076 103.84587097]
[33.77780533 89.57027435]
[48.05289459 84.96507263]
[45.75011444 77.82733917]
[30.84821129 76.11464691]
[15.94630909 74.40196228]
[1.35294855 80.51296234]
[-10.40764904 71.37307739]
[-25.00101089 77.48407745]
[-36.76160812 68.34419250]
[-51.66350937 66.63150024]
[-66.56541443 64.91880798]
[-81.38737488 71.93604279]
[-94.71971893 62.38718796]
[-92.84727478 46.09528732]
[-77.69625092 39.82005310]
[-64.85272217 50.01690674]
[-49.95082092 51.72959518]
[-35.04891968 53.44228745]
[-21.52144051 47.20877838]
[-8.69495964 56.47117233]
[4.83251762 50.23766327]
[17.65899849 59.50005722]
[32.56090164 61.21274567]
[47.46280289 62.92543793]
[69.14653015 56.36263657]
[88.45241547 59.01100540]
[102.09947968 68.34345245]
[108.26161194 80.83744049]
[110.43844604 65.99623108]
[112.61528015 51.15502930]
[99.56852722 44.99047089]
[88.80584717 35.40275192]
[81.19757080 23.17923927]
[77.35552979 9.31995296]
[77.58386230 -5.04425478]
[81.85496521 -18.74397278]
[89.81248474 -30.66642952]
[100.80101776 -39.84588242]
[113.92008209 -45.54183960]
[128.09791565 -47.29878998]
[130.58303833 -62.09149551]
[133.06814575 -76.88420105]
[135.55326843 -91.67691040]
[122.13062286 -98.65457153]
[111.52258301 -109.43996429]
[104.76843262 -122.97645569]
[102.52985382 -137.93786621]
[105.02617645 -152.85844421]
[112.01283264 -166.27641296]
[122.80532837 -176.87722778]
[136.34634399 -183.62229919]
[151.30924988 -185.85086060]
[166.22814941 -183.34454346]
[179.64143372 -176.34889221]
[190.23501587 -165.54928589]
[196.97102356 -152.00376892]
[199.18954468 -137.03936768]
[196.67323303 -122.12214661]
[189.66859436 -108.71354675]
[178.86190796 -98.12722015]
[165.31185913 -91.40028381]
[150.34597778 -89.19179535]
[147.86085510 -74.39908600]
[145.37573242 -59.60637665]
[142.89062500 -44.81367111]
[156.83073425 -37.73745728]
[167.92279053 -26.69333839]
[175.07699585 -12.74949551]
[177.58529663 2.74018383]
[175.19132996 18.26756477]
[168.11668396 32.31710434]
[157.04034424 43.51377487]
[143.03361511 50.75762939]
[127.45648956 53.33186722]
[125.27964783 68.17307281]
[123.10281372 83.01427460]
[132.12034607 95.00110626]
[146.98339844 97.02344513]
[161.84643555 99.04577637]
[176.70948792 101.06811523]
[185.70083618 99.11686707]
[191.85946655 103.29023743]
[200.88946533 101.52646637]
[206.95993042 105.82705688]
[221.72598267 108.46592712]
[236.49203491 111.10478973]
[247.58523560 100.25487518]
[262.94210815 98.03083801]
[276.65759277 105.28786469]
[283.45785522 119.23548889]
[280.72802734 134.51055908]
[269.51779175 145.23948669]
[254.13769531 147.29679871]
[240.50172424 139.89141846]
[233.85317993 125.87084198]
[219.08711243 123.23197937]
[204.32106018 120.59311676]
[189.52835083 118.10799408]
[174.68714905 115.93115997]
[159.82409668 113.90882111]
[144.96105957 111.88648987]
[130.09800720 109.86415863]
[124.44850922 114.79701996]
[136.52250671 123.69750977]
[148.59649658 132.59799194]
[161.99963379 139.33267212]
[166.74511719 153.56224060]
[160.06732178 166.99380493]
[145.85800171 171.79957581]
[132.39825439 165.17877197]
[127.53227234 150.99021912]
[120.34088898 137.82647705]
[113.14950562 124.66274261]
[107.50000000 129.59559631]
[107.50000000 144.59559631]
[107.50000000 159.59559631]
[107.50000000 174.59559631]
[107.50000000 189.59559631]
[107.50000000 204.59559631]
[107.50000000 219.59559631]
[107.50000000 234.59559631]
[107.50000000 249.59559631]
[107.50000000 264.59561157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 25]
[16 24]
[17 23]
[30 51]
[31 50]
[32 49]
[34 47]
[36 45]
[37 44]
[38 43]
[55 103]
[56 102]
[57 101]
[67 92]
[68 91]
[69 90]
[70 89]
[104 129]
[105 128]
[106 127]
[107 126]
[109 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
