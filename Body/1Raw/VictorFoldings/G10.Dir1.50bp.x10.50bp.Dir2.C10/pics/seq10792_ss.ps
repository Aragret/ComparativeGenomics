%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAxxxxxxxxxxCUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.78587341 379.47091675]
[123.78587341 364.47091675]
[123.78587341 349.47091675]
[123.78587341 334.47091675]
[123.78587341 319.47091675]
[123.78587341 304.47091675]
[123.78587341 289.47091675]
[123.78587341 274.47091675]
[123.78587341 259.47091675]
[123.78587341 244.47093201]
[121.13339996 241.64694214]
[119.45149231 237.78428650]
[119.12959290 233.24215698]
[120.41833496 228.51914978]
[114.35532379 214.79910278]
[108.29231262 201.07904053]
[93.59272003 191.54374695]
[95.63651276 173.27348328]
[89.28938293 159.68252563]
[82.94225311 146.09158325]
[68.81745148 141.04281616]
[55.29325867 147.53099060]
[41.76906967 154.01914978]
[38.06339264 169.21131897]
[25.42881393 178.42552185]
[9.83099174 177.31108093]
[-1.36525750 166.39421082]
[-2.87340760 150.82952881]
[6.01864386 137.96618652]
[21.11234093 133.87786865]
[35.28090286 140.49496460]
[48.80509186 134.00679016]
[62.32928467 127.51863098]
[59.38380051 112.81066895]
[44.40408707 112.03082275]
[33.87632751 123.59371185]
[18.37229156 125.63303375]
[5.21250868 117.18589783]
[0.61062688 102.24077606]
[6.73951387 87.85430145]
[20.70529747 80.81932068]
[35.91376114 84.45754242]
[45.18393326 97.05110931]
[60.16364670 97.83095551]
[67.90900421 83.35174561]
[79.92324066 74.55797577]
[93.07722473 72.18195343]
[93.38927460 57.18520355]
[93.70133209 42.18844986]
[94.01338959 27.19169426]
[84.75913239 11.30652523]
[94.35024261 -3.35671473]
[94.35024261 -18.35671425]
[94.35024261 -33.35671616]
[94.35024261 -48.35671616]
[94.35024261 -63.35671616]
[94.35024261 -78.35671234]
[90.34249878 -92.81140137]
[82.61841583 -105.66980743]
[74.89433289 -118.52820587]
[60.29766464 -126.00278473]
[59.74285507 -142.39254761]
[73.80064392 -150.83711243]
[88.00958252 -142.64942932]
[87.75273132 -126.25229645]
[95.47682190 -113.39389038]
[103.20090485 -100.53548431]
[103.33573914 -115.53488159]
[106.74305725 -130.14276123]
[113.25835419 -143.65390015]
[122.56710052 -155.41601562]
[134.21987915 -164.86126709]
[147.65412903 -171.53366089]
[162.22129822 -175.11105347]
[177.21809387 -175.42077637]
[191.92053223 -172.44784546]
[205.61882019 -166.33580017]
[217.65161133 -157.37969971]
[227.43803406 -146.01193237]
[234.50559998 -132.78131104]
[238.51312256 -118.32656097]
[239.26712036 -103.34552765]
[236.73118591 -88.56144714]
[231.02775574 -74.68805695]
[222.43217468 -62.39513016]
[211.35942078 -52.27613831]
[198.34403992 -44.81959534]
[184.01440430 -40.38548660]
[169.06228638 -39.18787766]
[154.20954895 -41.28458405]
[140.17323303 -46.57438278]
[127.63098907 -54.80189896]
[117.18830872 -65.56993103]
[109.35024261 -78.35671234]
[109.35024261 -63.35671616]
[109.35024261 -48.35671616]
[109.35024261 -33.35671616]
[109.35024261 -18.35671425]
[109.35024261 -3.35671473]
[117.69879913 5.45287561]
[117.78322601 17.99129105]
[109.01014709 27.50374985]
[108.69808960 42.50050354]
[108.38603210 57.49725723]
[108.07397461 72.49401093]
[123.70931244 80.16474152]
[132.96469116 96.42433167]
[131.39369202 116.36663055]
[118.10334015 133.01152039]
[96.53320312 139.74444580]
[102.88033295 153.33540344]
[109.22746277 166.92634583]
[121.09688568 172.08102417]
[126.08769989 183.58366394]
[122.01236725 195.01603699]
[128.07537842 208.73608398]
[134.13839722 222.45614624]
[135.64312744 207.53179932]
[140.74206543 193.42503357]
[149.12728882 180.98767090]
[160.29244995 170.97073364]
[173.56335449 163.97909546]
[188.13864136 160.43495178]
[203.13818359 160.55232239]
[217.65623474 164.32409668]
[230.81611633 171.52252197]
[241.82318115 181.71295166]
[250.01275635 194.27999878]
[254.89031982 208.46482849]
[256.16134644 223.41088867]
[253.74908447 238.21563721]
[247.79919434 251.98513794]
[238.67095947 263.88787842]
[226.91558838 273.20513916]
[213.24291992 279.37426758]
[198.47859192 282.02276611]
[183.51414490 280.99072266]
[169.25318909 276.34042358]
[156.55688477 268.35269165]
[146.19189453 257.50985718]
[138.78587341 244.47093201]
[138.78587341 259.47091675]
[138.78587341 274.47091675]
[138.78587341 289.47091675]
[138.78587341 304.47091675]
[138.78587341 319.47091675]
[138.78587341 334.47091675]
[138.78587341 349.47091675]
[138.78587341 364.47091675]
[138.78587341 379.47091675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 117]
[15 116]
[16 115]
[18 112]
[19 111]
[20 110]
[21 33]
[22 32]
[23 31]
[34 44]
[35 43]
[47 105]
[48 104]
[49 103]
[50 102]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
