%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCCGGCCUGCUxxxxxxxxxxCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.34027100 263.40908813]
[116.34027100 248.40910339]
[116.34027100 233.40910339]
[116.34027100 218.40910339]
[116.34027100 203.40910339]
[116.34027100 188.40910339]
[116.34027100 173.40910339]
[116.34027100 158.40910339]
[116.34027100 143.40910339]
[116.34027100 128.40910339]
[110.07729340 124.28295898]
[102.88591003 137.44670105]
[95.69452667 150.61042786]
[95.38268280 165.60719299]
[83.88096619 175.23582458]
[69.06320190 172.90476990]
[61.07329941 160.20983887]
[65.38097382 145.84167480]
[79.03733826 139.63642883]
[88.29433441 127.83354950]
[97.55133057 116.03067017]
[91.28834534 111.90452576]
[77.50596619 117.82448578]
[63.72358322 123.74444580]
[49.94120407 129.66441345]
[42.68350601 143.97193909]
[26.94380760 147.07701111]
[14.79625702 136.59767151]
[15.55941391 120.57277679]
[28.64785194 111.29525757]
[44.02124023 115.88202667]
[57.80362320 109.96206665]
[71.58600616 104.04210663]
[85.36838531 98.12213898]
[94.99691010 86.62033844]
[98.39988708 72.01144409]
[101.80286407 57.40255356]
[105.20584106 42.79365921]
[99.92181396 39.10190964]
[95.56337738 34.39831543]
[92.31830597 28.90638733]
[90.32195282 22.88305473]
[89.65162659 16.60666275]
[90.32369995 10.36410904]
[76.79951477 3.87594390]
[63.27532196 -2.61222124]
[46.97400665 -0.82357943]
[37.49383926 -14.20485020]
[44.58719635 -28.99052811]
[60.95704651 -29.97037697]
[69.76348877 -16.13641167]
[83.28767395 -9.64824581]
[96.81186676 -3.16008091]
[105.54171753 -10.13276386]
[116.24378967 -13.34124565]
[127.36981201 -12.32136059]
[135.09390259 -25.17976189]
[142.81797791 -38.03816605]
[143.29161072 -53.85227966]
[156.47799683 -60.77820206]
[164.20208740 -73.63660431]
[171.92616272 -86.49501038]
[179.65025330 -99.35340881]
[187.37434387 -112.21181488]
[182.06451416 -130.34478760]
[191.47552490 -146.36135864]
[209.28077698 -150.40745544]
[216.46327209 -163.57603455]
[223.64578247 -176.74462891]
[212.23287964 -186.55911255]
[203.11361694 -198.52749634]
[196.68470764 -212.12513733]
[193.22494507 -226.75663757]
[192.88317871 -241.78189087]
[195.67193604 -256.54406738]
[201.46693420 -270.39837646]
[210.01260376 -282.74017334]
[220.93342590 -293.03134155]
[233.75036621 -300.82382202]
[247.90193176 -305.77911377]
[262.76873779 -307.68289185]
[277.70062256 -306.45434570]
[292.04513550 -302.14962769]
[299.22766113 -315.31820679]
[294.52801514 -330.40756226]
[301.94851685 -344.36148071]
[317.08673096 -348.90130615]
[330.96139526 -341.33367920]
[335.34094238 -326.14831543]
[327.62704468 -312.35443115]
[312.39624023 -308.13568115]
[305.21371460 -294.96710205]
[316.59951782 -285.23782349]
[325.71707153 -273.34912109]
[332.16592407 -259.81921387]
[335.66198730 -245.23841858]
[336.05004883 -230.24354553]
[333.31076050 -215.48994446]
[327.56143188 -201.62295532]
[319.05117798 -189.24963379]
[308.14990234 -178.91223145]
[295.33251953 -171.06434631]
[281.15795898 -166.05108643]
[266.24499512 -164.09390259]
[251.24519348 -165.28071594]
[236.81437683 -169.56211853]
[229.63186646 -156.39352417]
[222.44935608 -143.22494507]
[227.99200439 -133.16664124]
[227.96110535 -121.56204987]
[222.24775696 -111.32331848]
[212.18374634 -105.07636261]
[200.23274231 -104.48772430]
[192.50865173 -91.62932587]
[184.78457642 -78.77091980]
[177.06048584 -65.91252136]
[169.33639526 -53.05411530]
[169.41525269 -38.15972137]
[155.67639160 -30.31408119]
[147.95230103 -17.45567703]
[140.22821045 -4.59727573]
[148.86279297 15.94914341]
[140.59019470 36.89899826]
[119.81473541 46.19663620]
[116.41175842 60.80553055]
[113.00878143 75.41442108]
[109.60580444 90.02331543]
[113.11717224 75.44009399]
[121.63617706 63.09398270]
[134.02389526 54.63557816]
[148.62414551 51.19571304]
[163.48497009 53.23428345]
[176.61956787 60.47874069]
[186.27194214 71.96054840]
[191.15159607 86.14465332]
[190.60617065 101.13473511]
[184.70858765 114.92670441]
[174.24731445 125.67666626]
[160.62095642 131.94741821]
[145.65127563 132.90058899]
[131.34027100 128.40910339]
[131.34027100 143.40910339]
[131.34027100 158.40910339]
[131.34027100 173.40910339]
[131.34027100 188.40910339]
[131.34027100 203.40910339]
[131.34027100 218.40910339]
[131.34027100 233.40910339]
[131.34027100 248.40910339]
[131.34027100 263.40908813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 34]
[23 33]
[24 32]
[25 31]
[35 127]
[36 126]
[37 125]
[38 124]
[44 53]
[45 52]
[46 51]
[56 121]
[57 120]
[58 119]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[67 108]
[68 107]
[69 106]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
