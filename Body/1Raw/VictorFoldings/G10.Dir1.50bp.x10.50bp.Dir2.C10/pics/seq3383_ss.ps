%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCxxxxxxxxxxUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 306.38662720]
[92.50000000 291.38662720]
[92.50000000 276.38662720]
[92.50000000 261.38662720]
[92.50000000 246.38662720]
[92.50000000 231.38662720]
[92.50000000 216.38662720]
[92.50000000 201.38662720]
[92.50000000 186.38662720]
[92.50000000 171.38662720]
[71.23438263 165.76351929]
[52.67011261 153.96464539]
[38.55052567 137.09802246]
[30.20157623 116.74757385]
[28.40730286 94.82438660]
[13.64124680 92.18552399]
[-1.15146017 89.70040131]
[-15.96921825 87.36930084]
[-30.85249901 85.50168610]
[-45.78680420 84.09938049]
[-60.72111511 82.69707489]
[-75.65541840 81.29477692]
[-66.39508057 93.09503174]
[-66.71128082 108.09169769]
[-76.46077728 119.49113464]
[-91.22695923 122.12929535]
[-104.32060242 114.81105042]
[-109.81015015 100.85165405]
[-105.20878601 86.57483673]
[-92.60058594 78.44805145]
[-107.17328644 74.89328766]
[-121.74599457 71.33852386]
[-136.31869507 67.78376770]
[-150.89140320 64.22900391]
[-165.46409607 60.67424011]
[-180.03680420 57.11948013]
[-194.68029785 53.86865234]
[-209.38825989 50.92317200]
[-224.09622192 47.97768784]
[-238.80418396 45.03220749]
[-254.15815735 50.79307938]
[-266.65060425 40.16902161]
[-263.43038940 24.08915138]
[-247.81016541 19.09506416]
[-235.85870361 30.32424545]
[-221.15074158 33.26972580]
[-206.44277954 36.21520996]
[-191.73481750 39.16069412]
[-187.28630066 37.26698685]
[-181.59661865 38.19378281]
[-176.48204041 42.54677582]
[-161.90933228 46.10153961]
[-147.33663940 49.65629959]
[-132.76393127 53.21106339]
[-118.19123077 56.76582336]
[-103.61853027 60.32058716]
[-89.04582214 63.87534714]
[-74.25312042 66.36046600]
[-59.31880951 67.76277161]
[-44.38450241 69.16507721]
[-29.45019531 70.56737518]
[-26.48108673 68.55445099]
[-22.37076569 67.91651917]
[-17.79365921 69.18241119]
[-13.63811398 72.55154419]
[1.17964375 74.88264465]
[8.32216835 72.80178070]
[16.28011131 77.41946411]
[31.04616737 80.05832672]
[36.35836792 66.80294800]
[44.18946457 54.86148834]
[54.22949982 44.70657730]
[66.08110046 36.74014282]
[79.27519226 31.27748871]
[93.28955078 28.53482437]
[107.56951141 28.62070465]
[121.54987335 31.53172684]
[134.67730713 37.15267944]
[146.43223572 45.26108170]
[156.34941101 55.53601456]
[164.03630066 67.57080078]
[178.05302429 62.22929001]
[192.06973267 56.88777924]
[185.66265869 38.38949966]
[198.42582703 15.23497295]
[209.51713562 5.13632345]
[220.60845947 -4.96232605]
[231.69976807 -15.06097603]
[226.51327515 -29.34973335]
[227.19462585 -44.53539276]
[233.63995361 -58.30224609]
[244.86637878 -68.55094910]
[259.16192627 -73.71865082]
[274.34667969 -73.01731873]
[288.10504150 -66.55389404]
[298.33898926 -55.31399918]
[303.48788452 -41.01164627]
[302.76657104 -25.82783318]
[296.28503418 -12.07798386]
[285.03170776 -1.85885012]
[270.72259521 3.27122450]
[255.53973389 2.52994084]
[241.79841614 -3.96966028]
[230.70710754 6.12898922]
[219.61579895 16.22763824]
[208.52447510 26.32628822]
[210.37756348 33.59375763]
[224.91249084 29.88759422]
[239.44749451 26.18167496]
[243.15316772 40.71673584]
[228.61865234 44.42253113]
[214.08372498 48.12869263]
[215.93679810 55.39616013]
[230.50950623 58.95092392]
[245.08219910 62.50568390]
[259.65490723 66.06044769]
[274.05593872 58.99008179]
[288.50054932 65.97097015]
[291.90808105 81.64796448]
[281.66455078 93.99502563]
[265.62792969 93.54054260]
[256.10015869 80.63314819]
[241.52743530 77.07838440]
[226.95474243 73.52362823]
[212.38203430 69.96886444]
[197.41123962 70.90449524]
[183.39453125 76.24600220]
[169.37782288 81.58751678]
[171.20434570 90.93120575]
[171.77821350 100.43443298]
[171.08935547 109.93002319]
[169.14985657 119.25091553]
[165.99386597 128.23313904]
[161.67689514 136.71868896]
[156.27488708 144.55827332]
[149.88285828 151.61396790]
[142.61329651 157.76165771]
[134.59407043 162.89317322]
[125.96623993 166.91827393]
[116.88161469 169.76612854]
[107.50000000 171.38662720]
[107.50000000 186.38662720]
[107.50000000 201.38662720]
[107.50000000 216.38662720]
[107.50000000 231.38662720]
[107.50000000 246.38662720]
[107.50000000 261.38662720]
[107.50000000 276.38662720]
[107.50000000 291.38662720]
[107.50000000 306.38662720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 69]
[16 68]
[17 66]
[18 65]
[19 61]
[20 60]
[21 59]
[22 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 48]
[38 47]
[39 46]
[40 45]
[81 128]
[82 127]
[83 126]
[85 106]
[86 105]
[87 104]
[88 103]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
