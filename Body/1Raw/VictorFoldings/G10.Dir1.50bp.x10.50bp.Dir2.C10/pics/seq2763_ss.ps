%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCxxxxxxxxxxCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.25679016 310.89840698]
[130.94473267 295.90164185]
[130.63267517 280.90490723]
[130.32061768 265.90814209]
[130.00856018 250.91139221]
[129.69650269 235.91462708]
[129.38446045 220.91787720]
[129.07240295 205.92112732]
[128.76034546 190.92437744]
[125.50951385 176.28086853]
[119.44650269 162.56082153]
[113.38349152 148.84075928]
[107.32047272 135.12071228]
[101.25746155 121.40065765]
[89.07997894 119.60339355]
[79.37895203 111.14859772]
[75.61816406 98.25865936]
[79.56290436 84.83994293]
[90.54350281 75.30017090]
[80.33002472 64.31450653]
[70.11653900 53.32884216]
[60.60986710 56.59737396]
[49.98563385 55.37159729]
[40.37940216 49.35042953]
[33.94748306 39.24288940]
[19.23952103 42.18836975]
[4.53155899 45.13385391]
[-10.17640305 48.07933426]
[-24.88436508 51.02481842]
[-39.59232712 53.97030258]
[-49.64879990 66.47017670]
[-65.69043732 66.25717163]
[-75.41146851 53.49468613]
[-71.35475159 37.97300339]
[-56.63225174 31.59903336]
[-42.53780746 39.26234055]
[-27.82984734 36.31685638]
[-13.12188530 33.37137604]
[1.58607626 30.42589188]
[16.29403687 27.48040962]
[31.00199890 24.53492737]
[38.32110596 11.44177246]
[33.12569046 -2.62974715]
[27.93027306 -16.70126724]
[22.73485756 -30.77278519]
[10.69664478 -41.03884506]
[13.54678535 -55.65821457]
[8.35136986 -69.72973633]
[-6.07232714 -81.12871552]
[-2.50979781 -98.28413391]
[-7.99682951 -112.24452209]
[-13.48386097 -126.20491791]
[-20.39085960 -139.52006531]
[-28.64314842 -152.04603577]
[-36.89543915 -164.57199097]
[-45.53455353 -176.83436584]
[-54.55208206 -188.82119751]
[-70.17200470 -192.48149109]
[-76.91867065 -207.03697205]
[-69.61663055 -221.32191467]
[-53.86737442 -224.37814331]
[-41.75238800 -213.86117554]
[-42.56525040 -197.83872986]
[-33.54772186 -185.85189819]
[-30.06038666 -185.01165771]
[-26.82144547 -182.40188599]
[-24.67596436 -178.16522217]
[-24.36947632 -172.82427979]
[-16.11718750 -160.29832458]
[-7.86489725 -147.77235413]
[-6.50243473 -162.71035767]
[2.03368020 -175.04464722]
[15.53390026 -181.58253479]
[30.50373459 -180.63172913]
[43.06828690 -172.43830872]
[49.97526169 -159.12313843]
[49.43680954 -144.13281250]
[41.59230423 -131.34751892]
[28.47227859 -124.07669067]
[13.47280407 -124.20236969]
[0.47652909 -131.69194031]
[5.96356058 -117.73155975]
[11.45059204 -103.77116394]
[22.44310188 -98.62606812]
[27.10825348 -86.98754120]
[22.42288971 -74.92514801]
[27.61830521 -60.85363007]
[39.28490829 -51.59405899]
[36.80637741 -35.96820068]
[42.00179291 -21.89668274]
[47.19720840 -7.82516289]
[52.39262390 6.24635649]
[80.49085999 16.53067780]
[81.10221100 43.11536407]
[91.31568909 54.10102844]
[101.52916718 65.08669281]
[116.02476501 68.94385529]
[130.34736633 64.48703766]
[144.52392578 59.58548737]
[158.54063416 54.24397278]
[172.55734253 48.90246201]
[178.79103088 34.37948608]
[193.49897766 28.59574127]
[207.95523071 34.98262024]
[213.58316040 49.75089645]
[207.04379272 64.13881683]
[192.21684265 69.61029053]
[177.89886475 62.91917419]
[163.88214111 68.26068878]
[149.86543274 73.60219574]
[148.09146118 76.71997070]
[144.68614197 79.10858917]
[140.02078247 79.99562073]
[134.80418396 78.80963135]
[120.48158264 83.26644897]
[123.90517426 101.34312439]
[114.97751617 115.33764648]
[121.04052734 129.05769348]
[127.10354614 142.77775574]
[133.16654968 156.49780273]
[139.22956848 170.21784973]
[141.22680664 155.35140991]
[147.44143677 141.69937134]
[157.34147644 130.43041992]
[170.07939148 122.50922394]
[184.56477356 118.61389160]
[199.55760193 119.07788849]
[213.77439880 123.86149597]
[225.99812317 132.55519104]
[235.18237305 144.41477966]
[240.54090881 158.42498779]
[241.61503601 173.38647461]
[238.31278992 188.01846313]
[230.91685486 201.06838989]
[220.06037903 211.41906738]
[206.67271423 218.18446350]
[191.89993286 220.78541565]
[177.00665283 218.99925232]
[163.26783752 212.97889709]
[151.85957336 203.23971558]
[143.75709534 190.61231995]
[144.06915283 205.60906982]
[144.38121033 220.60581970]
[144.69326782 235.60256958]
[145.00532532 250.59933472]
[145.31738281 265.59606934]
[145.62942505 280.59283447]
[145.94148254 295.58959961]
[146.25354004 310.58633423]
[148.84454346 329.79406738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[19 96]
[20 95]
[21 94]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 92]
[43 91]
[44 90]
[45 89]
[47 87]
[48 86]
[50 83]
[51 82]
[52 81]
[53 70]
[54 69]
[55 68]
[56 64]
[57 63]
[97 115]
[98 114]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
