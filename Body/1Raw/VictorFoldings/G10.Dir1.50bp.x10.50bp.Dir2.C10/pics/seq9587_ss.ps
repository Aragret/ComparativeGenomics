%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUxxxxxxxxxxUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.93139648 264.21151733]
[103.30741882 249.22451782]
[102.68344879 234.23750305]
[102.05947113 219.25048828]
[101.43549347 204.26347351]
[100.81151581 189.27644348]
[100.18753815 174.28942871]
[99.56356049 159.30241394]
[85.97261047 152.95529175]
[74.08023071 162.09703064]
[62.18784714 171.23875427]
[50.29546738 180.38049316]
[55.58096313 194.54223633]
[56.45573044 209.63282776]
[52.84198380 224.31044006]
[45.06105804 237.26994324]
[33.80482483 247.35897827]
[20.07418442 253.68045044]
[5.09005356 255.67224121]
[-9.81518841 253.15724182]
[-23.31617737 246.35910034]
[-34.21241379 235.88230896]
[-41.53501511 222.65841675]
[-44.63285446 207.86332703]
[-43.23048019 192.81259155]
[-37.45258713 178.84451294]
[-27.81294441 167.20111084]
[-15.16869926 158.91772461]
[-0.64417011 154.73091125]
[14.46913052 155.01293945]
[28.82733917 159.73873901]
[41.15373230 168.48811340]
[53.04611206 159.34637451]
[64.93849182 150.20465088]
[76.83087158 141.06291199]
[59.23807907 112.79260254]
[65.49794769 83.38103485]
[87.78615570 68.40913391]
[85.60932159 53.56793213]
[83.43247986 38.72672653]
[81.25564575 23.88552094]
[79.07881165 9.04431534]
[57.38777161 11.19626522]
[50.36701202 -7.02774525]
[39.06800461 -16.89346886]
[27.76900101 -26.75919151]
[16.46999741 -36.62491608]
[5.17099190 -46.49063873]
[-6.33081150 -56.11916351]
[-18.03043556 -65.50632477]
[-33.33075714 -62.27612305]
[-47.10340881 -69.68207550]
[-52.84536362 -84.22731018]
[-47.84545135 -99.04402161]
[-34.46447372 -107.13620758]
[-19.02052116 -104.68298340]
[-8.80575371 -92.84268951]
[-8.64327335 -77.20594788]
[3.05635047 -67.81878662]
[7.87719393 -67.45138550]
[12.50102425 -64.00878906]
[15.03671551 -57.78964233]
[26.33572006 -47.92391968]
[37.63472366 -38.05819702]
[48.93373108 -28.19247246]
[60.23273468 -18.32674980]
[71.18014526 -20.01463509]
[81.67231750 -13.52145481]
[87.15934753 -27.48184586]
[74.49358368 -35.60986328]
[63.65709686 -46.05289078]
[55.06641769 -58.40952682]
[49.05174255 -72.20481110]
[45.84426117 -86.90849304]
[45.56726456 -101.95540619]
[48.23139191 -116.76718140]
[53.73424911 -130.77449036]
[61.86431885 -143.43893433]
[72.30909729 -154.27372742]
[84.66712189 -162.86241150]
[98.46338654 -168.87486267]
[113.16758728 -172.07995605]
[128.21453857 -172.35452271]
[143.02587891 -169.68798828]
[157.03230286 -164.18286133]
[169.69543457 -156.05075073]
[180.52853394 -145.60421753]
[189.11521912 -133.24479675]
[195.12542725 -119.44756317]
[198.32815552 -104.74284363]
[198.60028076 -89.69584656]
[195.93135071 -74.88493347]
[190.42396545 -60.87940598]
[182.28979492 -48.21759033]
[171.84150696 -37.38617706]
[159.48069763 -28.80149841]
[145.68249512 -22.79352379]
[130.97726440 -19.59318352]
[115.93021393 -19.32349205]
[101.11973572 -21.99481392]
[95.63270569 -8.03442383]
[93.92001343 6.86747885]
[96.09685516 21.70868492]
[98.27368927 36.54988861]
[100.45052338 51.39109421]
[102.62736511 66.23229980]
[117.04274750 67.69433594]
[130.52616882 75.43741608]
[140.32376099 88.84992218]
[144.06956482 106.12129974]
[140.29809570 124.47517395]
[155.00605774 127.42065430]
[169.71401978 130.36613464]
[184.42198181 133.31163025]
[196.51632690 123.39896393]
[212.15219116 123.63120270]
[223.94677734 133.89869690]
[226.33106995 149.35343933]
[218.17927551 162.69818115]
[203.34039307 167.63194275]
[188.82092285 161.82514954]
[181.47650146 148.01957703]
[166.76853943 145.07409668]
[152.06057739 142.12861633]
[137.35261536 139.18313599]
[131.65209961 144.05696106]
[143.14741516 153.69323730]
[154.64273071 163.32951355]
[166.13804626 172.96578979]
[180.64151001 176.79322815]
[190.20118713 188.35231018]
[191.23880005 203.31637573]
[183.36595154 216.08424377]
[169.52952576 221.87675476]
[154.90863037 218.52574158]
[144.97599792 207.28550720]
[143.44934082 192.36419678]
[135.71658325 179.51100159]
[127.98383331 166.65780640]
[120.25108337 153.80461121]
[114.55057526 158.67843628]
[115.17455292 173.66545105]
[115.79853058 188.65246582]
[116.42250824 203.63949585]
[117.04648590 218.62651062]
[117.67046356 233.61352539]
[118.29444122 248.60054016]
[118.91841888 263.58755493]
[125.61840820 279.16146851]
[112.50788116 289.91088867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 35]
[10 34]
[11 33]
[12 32]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 59]
[50 58]
[68 101]
[69 100]
[111 125]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
