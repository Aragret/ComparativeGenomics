%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACxxxxxxxxxxACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.86438751 586.38476562]
[65.86438751 571.38476562]
[65.86438751 556.38476562]
[65.86438751 541.38476562]
[65.86438751 526.38476562]
[65.86438751 511.38473511]
[65.86438751 496.38473511]
[65.86438751 481.38473511]
[65.86438751 466.38473511]
[65.86438751 451.38473511]
[51.65946198 448.32955933]
[38.40027618 442.37265015]
[26.67263031 433.77441406]
[16.99523926 422.91198730]
[9.79679108 410.26272583]
[5.39696264 396.38323975]
[3.99221563 381.88488770]
[5.64703083 367.40679932]
[10.29095078 353.58782959]
[17.72157669 341.03820801]
[27.61338806 330.31268311]
[39.53200150 321.88598633]
[52.95325089 316.13186646]
[67.28622437 313.30639648]
[67.59420776 298.30957031]
[54.93531799 306.35644531]
[40.68423843 301.67599487]
[35.26141739 287.69052124]
[42.63204193 274.62631226]
[57.40667725 272.03594971]
[68.78180695 281.81292725]
[70.62512970 266.92663574]
[72.46845245 252.04031372]
[74.31177521 237.15400696]
[76.15510559 222.26770020]
[77.99842834 207.38139343]
[64.56628418 195.99154663]
[60.57953644 178.67704773]
[67.80415344 162.27354431]
[83.54166412 153.37219238]
[84.77227783 138.42276001]
[86.00288391 123.47332764]
[87.23349762 108.52389526]
[81.24520111 94.77106476]
[69.46306610 85.48767853]
[57.68092728 76.20429230]
[39.42554092 74.01993561]
[33.50220871 57.52876663]
[21.53195190 48.48924637]
[9.56169319 39.44972992]
[-5.63716364 43.12787628]
[-19.62137222 36.12959671]
[-25.78801537 21.75926018]
[-21.22539520 6.80210495]
[-8.08784008 -1.67956066]
[7.42149830 0.31904724]
[17.97958374 11.85424709]
[18.60121346 27.47946930]
[30.57147026 36.51898956]
[42.54172897 45.55850983]
[54.60115814 44.20486450]
[64.65744781 51.69101334]
[66.96431732 64.42215729]
[78.74645233 73.70554352]
[90.52858734 82.98892975]
[103.88668823 76.16535187]
[103.27085876 61.17800140]
[102.65503693 46.19064713]
[102.03921509 31.20329475]
[88.00698090 25.19836235]
[77.97628784 13.69410229]
[73.93873596 -1.02530527]
[76.69599152 -16.03731155]
[85.70058441 -28.36127090]
[99.16465759 -35.55025482]
[114.41490936 -36.17687988]
[128.42338562 -30.11673737]
[138.40869141 -18.57306671]
[142.38824463 -3.83787322]
[139.57189941 11.16315842]
[130.51884460 23.45156288]
[117.02656555 30.58746910]
[117.64238739 45.57482147]
[118.25821686 60.56217575]
[118.87403870 75.54953003]
[125.55309296 78.96131897]
[138.14135742 70.80438995]
[138.91119385 85.78488922]
[145.59024048 89.19667816]
[158.09426880 80.91120148]
[170.59831238 72.62573242]
[183.10234070 64.34025574]
[179.53199768 49.60837173]
[181.21864319 34.54414368]
[187.95863342 20.96664619]
[198.93806458 10.51543236]
[212.83113098 4.45253515]
[227.96015930 3.51007891]
[242.49826050 7.80187035]
[254.68988037 16.80965424]
[263.06283569 29.44569778]
[266.60601807 44.18413544]
[264.89160156 59.24523163]
[258.12661743 72.81027985]
[247.12794495 83.24124908]
[233.22372437 89.27853394]
[218.09298706 90.19310760]
[203.56282043 85.87452698]
[191.38781738 76.84429169]
[178.88378906 85.12976837]
[166.37974548 93.41523743]
[153.87571716 101.70071411]
[124.61834717 120.36384583]
[102.18293762 109.75450897]
[100.95232391 124.70394135]
[99.72171021 139.65338135]
[98.49109650 154.60281372]
[109.01434326 161.47978210]
[115.55600739 172.12979126]
[116.91624451 184.48133850]
[112.89607239 196.16273499]
[104.32369232 204.95744324]
[92.88473511 209.22471619]
[91.04141235 224.11102295]
[89.19808197 238.99732971]
[87.35475922 253.88363647]
[85.51143646 268.76995850]
[83.66811371 283.65625000]
[82.59104156 298.61752319]
[82.28306580 313.61437988]
[97.33956146 317.33474731]
[111.19132233 324.29550171]
[123.15119934 334.14785767]
[132.62664795 346.39974976]
[139.14907837 360.44021606]
[142.39707947 375.57006836]
[142.21220398 391.03659058]
[138.60673523 406.07095337]
[131.76287842 419.92657471]
[122.02359009 431.91610718]
[109.87539673 441.44546509]
[95.92405701 448.04339600]
[80.86438751 451.38473511]
[80.86438751 466.38473511]
[80.86438751 481.38473511]
[80.86438751 496.38473511]
[80.86438751 511.38473511]
[80.86438751 526.38476562]
[80.86438751 541.38476562]
[80.86438751 556.38476562]
[80.86438751 571.38476562]
[80.86438751 586.38476562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 130]
[25 129]
[31 128]
[32 127]
[33 126]
[34 125]
[35 124]
[36 123]
[40 117]
[41 116]
[42 115]
[43 114]
[44 65]
[45 64]
[46 63]
[48 60]
[49 59]
[50 58]
[66 85]
[67 84]
[68 83]
[69 82]
[89 112]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
