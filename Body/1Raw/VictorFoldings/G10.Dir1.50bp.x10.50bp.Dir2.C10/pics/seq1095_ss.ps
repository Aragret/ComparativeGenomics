%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUxxxxxxxxxxCGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.65422058 277.65625000]
[93.65422058 262.65625000]
[93.65422058 247.65626526]
[93.65422058 232.65626526]
[93.65422058 217.65626526]
[93.65422058 202.65626526]
[93.65422058 187.65626526]
[93.65422058 172.65626526]
[93.65422058 157.65626526]
[93.65422058 142.65626526]
[79.42744446 137.90245056]
[70.40991211 149.88928223]
[61.39238358 161.87611389]
[59.94518661 178.21127319]
[44.96286011 184.87925720]
[31.85793877 175.02059937]
[34.11164093 158.77705383]
[49.40555191 152.85858154]
[58.42308044 140.87174988]
[67.44061279 128.88491821]
[58.43537903 101.40736389]
[68.62638092 75.75245667]
[91.73268890 63.20256805]
[91.42063141 48.20581436]
[91.10857391 33.20906067]
[90.79651642 18.21230888]
[90.48445892 3.21555495]
[87.15959930 -5.36332321]
[90.32518005 -12.09568977]
[90.32518005 -27.09568977]
[77.33755493 -32.75542068]
[67.52650452 -42.91546249]
[62.35588455 -56.01217651]
[62.57890701 -70.04746246]
[68.12860870 -82.89360046]
[78.13303375 -92.61581421]
[91.05204010 -97.76363373]
[91.36409760 -112.76038361]
[91.67615509 -127.75714111]
[91.98820496 -142.75389099]
[92.30026245 -157.75064087]
[90.43264771 -172.63392639]
[86.42491150 -187.08862305]
[82.41716766 -201.54330444]
[68.95829010 -193.27236938]
[55.13355255 -198.77124023]
[51.51594925 -212.25382996]
[39.62356949 -221.39556885]
[27.73118782 -230.53729248]
[15.83880901 -239.67903137]
[3.94642901 -248.82077026]
[-12.37279892 -250.43780518]
[-18.88456535 -265.48867798]
[-8.89012146 -278.49035645]
[7.32910395 -276.06777954]
[13.08816338 -260.71313477]
[24.98054314 -251.57141113]
[36.87292099 -242.42967224]
[48.76530075 -233.28794861]
[60.65768051 -224.14620972]
[70.49258423 -226.35493469]
[80.52146912 -221.73222351]
[81.76834106 -236.68031311]
[83.01522064 -251.62840271]
[74.02630615 -239.62008667]
[61.67705917 -231.10563660]
[47.25721741 -226.97425842]
[32.27278519 -227.65747070]
[18.28872490 -233.08389282]
[6.76552534 -242.68679810]
[-1.09333932 -255.46327209]
[-4.46709299 -270.07894897]
[-3.00338292 -285.00735474]
[3.14492178 -298.68939209]
[13.33569622 -309.69613647]
[26.50462151 -316.87802124]
[41.27634430 -319.48495483]
[56.10811234 -317.24475098]
[69.45090485 -310.39129639]
[79.91120911 -299.64038086]
[86.39656067 -286.11483765]
[88.22951508 -271.22424316]
[94.57664490 -284.81521606]
[100.92377472 -298.40615845]
[102.14760590 -315.31588745]
[118.73527527 -318.82095337]
[126.69528961 -303.85183716]
[114.51472473 -292.05902100]
[108.16759491 -278.46807861]
[101.82046509 -264.87713623]
[97.96330261 -250.38153076]
[96.71643066 -235.43344116]
[95.46955872 -220.48535156]
[96.87185669 -205.55104065]
[100.87960052 -191.09635925]
[104.88733673 -176.64166260]
[109.57379150 -190.89077759]
[119.27513885 -202.33122253]
[132.56689453 -209.28315735]
[147.49736023 -210.72576904]
[161.87422180 -206.44726562]
[173.58647156 -197.07585144]
[180.91433716 -183.98759460]
[182.78181458 -169.10430908]
[178.91471863 -154.61135864]
[169.88085938 -142.63682556]
[157.00672913 -134.93898010]
[142.18269348 -132.64814758]
[127.58543396 -136.10069275]
[115.35834503 -144.78965759]
[107.29701996 -157.43859863]
[106.98496246 -142.44183350]
[106.67290497 -127.44508362]
[106.36084747 -112.44833374]
[106.04878998 -97.45157623]
[120.41155243 -90.51534271]
[130.35989380 -77.97396851]
[133.87092590 -62.29627228]
[130.19538879 -46.59669113]
[120.01684570 -34.01659012]
[105.32518005 -27.09568977]
[105.32518005 -12.09568977]
[105.48121643 2.90349865]
[105.79327393 17.90025330]
[106.10532379 32.89700699]
[106.41738129 47.89376068]
[106.72943878 62.89051437]
[114.02543640 64.54347229]
[120.92858887 67.63187408]
[127.15641022 72.06439209]
[132.44732666 77.69412994]
[136.57157898 84.32333374]
[139.34106445 91.71028900]
[140.61781311 99.57806396]
[140.32041931 107.62490845]
[138.42849731 115.53579712]
[134.98469543 122.99480438]
[130.09423828 129.69764709]
[123.92194366 135.36415100]
[116.68679047 139.74978638]
[108.65422058 142.65626526]
[108.65422058 157.65626526]
[108.65422058 172.65626526]
[108.65422058 187.65626526]
[108.65422058 202.65626526]
[108.65422058 217.65626526]
[108.65422058 232.65626526]
[108.65422058 247.65626526]
[108.65422058 262.65625000]
[108.65422058 277.65625000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 20]
[12 19]
[13 18]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[29 122]
[30 121]
[37 115]
[38 114]
[39 113]
[40 112]
[41 111]
[42 96]
[43 95]
[44 94]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 93]
[63 92]
[64 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
