%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAxxxxxxxxxxCGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.60632324 478.93722534]
[162.60632324 463.93722534]
[162.60632324 448.93722534]
[162.60632324 433.93722534]
[162.60632324 418.93722534]
[162.60632324 403.93722534]
[162.60632324 388.93722534]
[162.60632324 373.93722534]
[162.60632324 358.93722534]
[162.60632324 343.93722534]
[160.18476868 329.13397217]
[155.40518188 314.91583252]
[150.62559509 300.69769287]
[145.84600830 286.47955322]
[141.06642151 272.26141357]
[136.28683472 258.04327393]
[131.50724792 243.82513428]
[119.80239105 243.86512756]
[108.54258728 240.59780884]
[98.64457703 234.27780151]
[90.91744995 225.40879822]
[85.99645996 214.70332336]
[84.29086304 203.02552795]
[85.94985962 191.32147217]
[90.84962463 180.54244995]
[98.60249329 171.56767273]
[108.58760071 165.13255310]
[104.97515869 150.57403564]
[101.36272430 136.01551819]
[97.75028992 121.45700836]
[94.13784790 106.89849854]
[91.08918762 104.43066406]
[89.16700745 100.61177826]
[88.95771027 95.98680115]
[90.77701569 91.34554291]
[88.05593872 76.59441376]
[85.33486176 61.84328842]
[82.61378479 47.09216309]
[79.74336243 32.36936951]
[76.72388458 17.67641830]
[62.46245956 17.81420326]
[48.42723465 15.30474472]
[35.10515594 10.23672485]
[22.95812416 2.78756285]
[12.40698433 -6.78279066]
[3.81694531 -18.14092827]
[-2.51506352 -30.89159966]
[-6.37065554 -44.59146500]
[-7.61751699 -58.76450729]
[-6.21394920 -72.91857910]
[-2.21025920 -86.56249237]
[4.25304079 -99.22304535]
[12.95016289 -110.46147156]
[23.57793427 -119.88858795]
[35.76636124 -127.17834473]
[49.09151459 -132.07904053]
[46.66996002 -146.88229370]
[34.12100983 -156.11059570]
[31.87608528 -171.15768433]
[40.75119781 -183.06431580]
[38.32964325 -197.86756897]
[35.90808487 -212.67080688]
[20.89339828 -214.16130066]
[6.77643347 -219.48800659]
[-5.48028898 -228.28773499]
[-15.04108620 -239.96049500]
[-21.25408554 -253.71044922]
[-23.69567680 -268.60006714]
[-22.19938850 -283.61419678]
[-16.86723709 -297.72909546]
[-8.06277943 -309.98242188]
[3.61368227 -319.53869629]
[17.36602783 -325.74639893]
[32.25659561 -328.18225098]
[47.27013016 -326.68014526]
[61.38297653 -321.34255981]
[73.63289642 -312.53335571]
[83.18467712 -300.85321045]
[89.38706207 -287.09848022]
[91.81715393 -272.20697021]
[90.30926514 -257.19400024]
[84.96621704 -243.08323669]
[76.15230560 -230.83671570]
[64.46846771 -221.28944397]
[50.71133041 -215.09237671]
[53.13288879 -200.28912354]
[55.55444336 -185.48588562]
[67.76087189 -177.02783203]
[70.42755127 -162.04972839]
[61.47320557 -149.30384827]
[63.89476013 -134.50061035]
[79.66336060 -133.89291382]
[94.97398376 -130.04908752]
[109.16950989 -123.13179016]
[121.64022827 -113.43563843]
[131.84997559 -101.37465668]
[139.35920715 -87.46459961]
[143.84394836 -72.30090332]
[145.10972595 -56.53318787]
[143.10002136 -40.83744431]
[137.89878845 -25.88702965]
[129.72695923 -12.32379627]
[118.93302917 -0.73052931]
[105.97824097 8.39409065]
[91.41683197 14.65694141]
[94.43630981 29.34988976]
[98.88954163 35.30374146]
[97.36491394 44.37108612]
[100.08599091 59.12221146]
[102.80706787 73.87333679]
[105.52813721 88.62446594]
[108.69636536 103.28606415]
[112.30879974 117.84457397]
[115.92123413 132.40309143]
[119.53367615 146.96159363]
[123.14611053 161.52011108]
[141.45614624 164.62707520]
[156.55755615 175.35023499]
[165.47723389 191.52464294]
[166.48245239 209.91760254]
[159.41741943 226.87460327]
[145.72538757 239.04554749]
[150.50497437 253.26368713]
[155.28456116 267.48184204]
[160.06414795 281.69998169]
[164.84373474 295.91812134]
[169.62332153 310.13626099]
[174.40290833 324.35440063]
[177.92282104 309.77325439]
[186.13929749 297.22375488]
[198.09611511 288.16644287]
[212.40171814 283.65542603]
[227.39125061 284.21563721]
[241.32023621 289.78192139]
[252.56761169 299.70648193]
[259.82440186 312.83425903]
[262.24609375 327.63748169]
[259.55084229 342.39334106]
[252.05230713 355.38458252]
[240.62316895 365.09924316]
[226.59355164 370.40676880]
[211.59620667 370.68945312]
[197.37654114 365.91442871]
[185.58941650 356.63735962]
[177.60632324 343.93722534]
[177.60632324 358.93722534]
[177.60632324 373.93722534]
[177.60632324 388.93722534]
[177.60632324 403.93722534]
[177.60632324 418.93722534]
[177.60632324 433.93722534]
[177.60632324 448.93722534]
[177.60632324 463.93722534]
[177.60632324 478.93722534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 128]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 122]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[35 111]
[36 110]
[37 109]
[38 108]
[39 106]
[40 105]
[56 91]
[57 90]
[60 87]
[61 86]
[62 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
