%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACxxxxxxxxxxUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.79352570 377.99334717]
[126.79352570 362.99334717]
[126.79352570 347.99334717]
[126.79352570 332.99334717]
[126.79352570 317.99334717]
[126.79352570 302.99334717]
[126.79352570 287.99334717]
[126.79352570 272.99334717]
[126.79352570 257.99334717]
[126.79352570 242.99333191]
[124.92591095 228.11006165]
[121.21974945 213.57511902]
[117.51358795 199.04017639]
[113.80742645 184.50524902]
[100.90843964 177.14645386]
[96.94281006 162.45877075]
[104.74884033 148.97901917]
[101.04267883 134.44407654]
[97.33651733 119.90914154]
[93.51640320 119.01133728]
[89.94374084 117.38792419]
[86.75491333 115.10085297]
[73.36862183 121.86896515]
[59.98234177 128.63708496]
[51.46560287 142.65126038]
[35.07891464 142.01217651]
[27.67949295 127.37726593]
[36.87923050 113.80166626]
[53.21422577 115.25079346]
[66.60050964 108.48268127]
[79.98679352 101.71456909]
[82.88982391 89.47811127]
[92.50000000 81.36621094]
[92.50000000 66.36621094]
[92.50000000 51.36621094]
[92.50000000 36.36621094]
[92.50000000 21.36621094]
[92.50000000 6.36621094]
[77.54258728 5.12715340]
[62.73857880 2.65714526]
[48.18910980 -1.02694070]
[33.99356842 -5.89993811]
[20.24892235 -11.92855930]
[7.04906654 -19.07162094]
[-5.51583099 -27.28033066]
[-17.35993767 -36.49861145]
[-28.40234375 -46.66349030]
[-38.56761932 -57.70553207]
[-47.78632355 -69.54930878]
[-55.99547958 -82.11391449]
[-63.13901520 -95.31351471]
[-69.16812897 -109.05794525]
[-74.04163361 -123.25331116]
[-77.72623444 -137.80264282]
[-80.19677734 -152.60656738]
[-81.43636322 -167.56393433]
[-81.43654633 -182.57258606]
[-80.19731140 -197.52998352]
[-77.72712708 -212.33396912]
[-74.04286957 -226.88339233]
[-69.16970062 -241.07887268]
[-63.14091492 -254.82344055]
[-55.99769592 -268.02322388]
[-47.78883743 -280.58801270]
[-38.57041550 -292.43200684]
[-28.40540314 -303.47430420]
[-17.36323929 -313.63943481]
[-5.51935339 -322.85800171]
[7.04534817 -331.06701660]
[20.24503326 -338.21038818]
[33.98953629 -344.23934937]
[48.18496323 -349.11267090]
[62.73434448 -352.79711914]
[77.53829193 -355.26745605]
[92.49567413 -356.50686646]
[107.50432587 -356.50686646]
[122.46170807 -355.26745605]
[137.26565552 -352.79711914]
[151.81503296 -349.11267090]
[166.01046753 -344.23934937]
[179.75495911 -338.21038818]
[192.95465088 -331.06701660]
[205.51934814 -322.85800171]
[217.36323547 -313.63943481]
[228.40541077 -303.47430420]
[238.57041931 -292.43200684]
[247.78883362 -280.58801270]
[255.99769592 -268.02322388]
[263.14089966 -254.82344055]
[269.16970825 -241.07887268]
[274.04287720 -226.88339233]
[277.72711182 -212.33396912]
[280.19729614 -197.52998352]
[281.43655396 -182.57258606]
[281.43637085 -167.56393433]
[280.19677734 -152.60656738]
[277.72622681 -137.80264282]
[274.04162598 -123.25331116]
[269.16812134 -109.05794525]
[263.13900757 -95.31351471]
[255.99548340 -82.11391449]
[247.78631592 -69.54930878]
[238.56761169 -57.70553207]
[228.40234375 -46.66349030]
[217.35993958 -36.49861145]
[205.51582336 -27.28033066]
[192.95092773 -19.07162094]
[179.75108337 -11.92855930]
[166.00643921 -5.89993811]
[151.81089783 -1.02694070]
[137.26142883 2.65714526]
[122.45741272 5.12715340]
[107.50000000 6.36621094]
[107.50000000 21.36621094]
[107.50000000 36.36621094]
[107.50000000 51.36621094]
[107.50000000 66.36621094]
[107.50000000 81.36621094]
[119.93021393 97.49907684]
[111.87145996 116.20298004]
[115.57762146 130.73791504]
[119.28377533 145.27285767]
[132.59129333 153.36900330]
[136.14282227 168.16229248]
[128.34236145 180.79908752]
[132.04852295 195.33403015]
[135.75468445 209.86895752]
[139.46084595 224.40390015]
[144.91465759 210.43049622]
[155.80883789 200.11949158]
[170.06088257 195.44195557]
[184.94635010 197.29202271]
[197.61975098 205.31604004]
[205.65843201 217.98014832]
[207.52572632 232.86346436]
[202.86466980 247.12091064]
[192.56628418 258.02700806]
[178.59919739 263.49697876]
[163.63336182 262.48516846]
[150.52964783 255.18501282]
[141.79351807 242.99333191]
[141.79351807 257.99334717]
[141.79351807 272.99334717]
[141.79351807 287.99334717]
[141.79351807 302.99334717]
[141.79351807 317.99334717]
[141.79351807 332.99334717]
[141.79351807 347.99334717]
[141.79351807 362.99334717]
[141.79351807 377.99334717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[14 125]
[17 122]
[18 121]
[19 120]
[22 31]
[23 30]
[24 29]
[33 118]
[34 117]
[35 116]
[36 115]
[37 114]
[38 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
