%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACxxxxxxxxxxUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.42826653 182.86190796]
[-33.20562363 190.71932983]
[-45.98298264 198.57675171]
[-53.68527985 212.39649963]
[-68.57968903 212.47257996]
[-81.35704803 220.33001709]
[-94.13440704 228.18743896]
[-106.91176605 236.04486084]
[-119.68911743 243.90228271]
[-114.45394135 258.01184082]
[-112.07228088 272.87164307]
[-112.63570404 287.91055298]
[-116.12253571 302.55050659]
[-122.39875793 316.22875977]
[-131.22312927 328.41961670]
[-142.25646973 338.65444946]
[-155.07469177 346.53985596]
[-169.18507385 351.77273560]
[-184.04527283 354.15200806]
[-199.08409119 353.58615112]
[-213.72348022 350.09695435]
[-227.40074158 343.81851196]
[-239.59014893 334.99215698]
[-249.82318115 323.95715332]
[-257.70651245 311.13766479]
[-262.93713379 297.02642822]
[-265.31396484 282.16586304]
[-264.74569702 267.12713623]
[-261.25411987 252.48831177]
[-254.97346497 238.81207275]
[-246.14514160 226.62408447]
[-235.10848999 216.39282227]
[-222.28773499 208.51156616]
[-208.17565918 203.28323364]
[-193.31468201 200.90879822]
[-178.27604675 201.47952271]
[-163.63780212 204.97346497]
[-149.96257019 211.25633240]
[-137.77601624 220.08662415]
[-127.54654694 231.12492371]
[-114.76918793 223.26750183]
[-101.99182892 215.41007996]
[-89.21447754 207.55265808]
[-76.43711853 199.69522095]
[-69.64874268 186.43750000]
[-53.84040833 185.79939270]
[-41.06304932 177.94197083]
[-28.28569221 170.08454895]
[-33.29422760 160.01426697]
[-37.51371765 149.58871460]
[-40.91917801 138.86962891]
[-43.49045944 127.92044067]
[-45.21233368 116.80597687]
[-46.07461166 105.59203339]
[-46.07218552 94.34498596]
[-45.20507431 83.13140869]
[-43.47840881 72.01769257]
[-40.90240860 61.06961823]
[-37.49232101 50.35199738]
[-33.26834106 39.92827225]
[-28.25546265 29.86014557]
[-22.48336601 20.20721817]
[-15.98621750 11.02663231]
[-8.80247879 2.37273216]
[-0.97467345 -5.70325470]
[7.45086050 -13.15352154]
[16.42424774 -19.93396568]
[25.89236832 -26.00445175]
[35.79917526 -31.32904053]
[46.08602524 -35.87621689]
[56.69202423 -39.61906052]
[67.55438995 -42.53541565]
[78.60881805 -44.60802078]
[89.78987885 -45.82460785]
[101.03137207 -46.17797089]
[112.26676178 -45.66601944]
[123.42954254 -44.29178619]
[134.45362854 -42.06340408]
[145.27375793 -38.99406433]
[155.82588196 -35.10193634]
[166.04754639 -30.41006279]
[173.50245667 -43.42637253]
[180.95736694 -56.44268036]
[188.27647400 -69.53583527]
[195.45898438 -82.70441437]
[194.52026367 -99.07667542]
[208.37629700 -107.84833527]
[222.77320862 -99.99587250]
[222.90066528 -83.59721375]
[208.62756348 -75.52191162]
[201.44505310 -62.35332489]
[201.00044250 -54.92715836]
[193.97367859 -48.98777008]
[186.51876831 -35.97146225]
[179.06385803 -22.95515251]
[198.36645508 -8.13465691]
[214.94284058 9.68275642]
[228.33363342 30.00328636]
[238.16769409 52.26375580]
[244.17248535 75.84721375]
[246.18157959 100.10006714]
[261.16128540 100.87991333]
[276.14099121 101.65975952]
[291.12072754 102.43960571]
[306.10043335 103.21945190]
[314.93237305 89.27759552]
[329.49795532 81.71849060]
[345.79516602 82.51280212]
[359.39947510 91.35049438]
[366.66491699 105.75065613]
[381.65762329 106.21870422]
[396.65032959 106.68674469]
[412.67041016 101.13757324]
[422.43750000 114.99542236]
[411.82504272 128.21705627]
[396.18228149 121.67943573]
[381.18957520 121.21139526]
[366.19686890 120.74335480]
[359.76171875 132.82838440]
[348.68606567 140.98980713]
[335.10702515 143.58172607]
[321.67575073 140.03981018]
[311.03958130 131.00302124]
[305.32058716 118.19916534]
[290.34088135 117.41931915]
[275.36114502 116.63947296]
[260.38143921 115.85962677]
[245.40173340 115.07978058]
[243.12593079 129.73263550]
[239.37739563 144.07954407]
[234.19467163 157.97286987]
[227.63110352 171.26966858]
[219.75421143 183.83311462]
[210.64508057 195.53392029]
[200.39741516 206.25169373]
[189.11666870 215.87614441]
[176.91893005 224.30825806]
[163.92970276 231.46124268]
[150.28263855 237.26150513]
[136.11817932 241.64935303]
[121.58206177 244.57965088]
[106.82386780 246.02224731]
[91.99546051 245.96229553]
[77.24941254 244.40039062]
[62.73747253 241.35263062]
[48.60895920 236.85037231]
[35.00925446 230.93992615]
[22.07829475 223.68212891]
[9.94914055 215.15165710]
[-1.25339878 205.43629456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[5 44]
[6 43]
[7 42]
[8 41]
[9 40]
[81 95]
[82 94]
[83 93]
[84 91]
[85 90]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
