%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.64318085 399.06268311]
[85.64318085 384.06268311]
[85.64318085 369.06268311]
[85.64318085 354.06268311]
[85.64318085 339.06268311]
[85.64318085 324.06268311]
[85.64318085 309.06268311]
[85.64318085 294.06268311]
[85.64318085 279.06268311]
[85.64318085 264.06268311]
[70.10661316 259.30905151]
[56.76923370 249.99778748]
[46.92989731 237.02178955]
[41.55107880 221.63146973]
[41.16473007 205.31431580]
[45.81969452 189.65110779]
[55.07585907 176.16278076]
[68.04575348 166.16276550]
[83.47962952 160.62902832]
[82.85565186 145.64201355]
[82.23167419 130.65499878]
[71.14035797 120.55635071]
[56.16064453 121.33619690]
[41.18093109 122.11604309]
[26.20121765 122.89588165]
[23.06947517 137.65577698]
[16.22343445 151.10176086]
[6.12987375 162.31703186]
[-6.52301407 170.53694153]
[-20.87253380 175.20101929]
[-35.94031143 175.99128723]
[-50.69899750 172.85385132]
[-64.14232635 166.00260925]
[-75.35370636 155.90472412]
[-83.56872559 143.24865723]
[-88.22727203 128.89733887]
[-89.01171875 113.82926178]
[-85.86857605 99.07178497]
[-79.01215363 85.63110352]
[-68.90993500 74.42362976]
[-56.25070190 66.21349335]
[-41.89758682 61.56048965]
[-26.82920456 60.78186417]
[-12.07294369 63.93070221]
[1.36508954 70.79231262]
[12.56866646 80.89885712]
[20.77391052 93.56125641]
[25.42137146 107.91616821]
[40.40108490 107.13632202]
[55.38080215 106.35648346]
[70.36051178 105.57663727]
[72.85884857 90.85887909]
[81.81270599 79.88404083]
[94.30763245 75.04250336]
[106.80657196 76.90402985]
[115.31766510 64.55245972]
[123.82875061 52.20088577]
[132.33984375 39.84931183]
[137.68135071 25.83259964]
[139.54896545 10.94931984]
[141.41658020 -3.93395996]
[143.28419495 -18.81723976]
[145.15180969 -33.70051956]
[137.85206604 -44.38544846]
[139.75520325 -56.77887726]
[149.29385376 -64.28364563]
[151.47068787 -79.12484741]
[153.64753723 -93.96605682]
[139.85095215 -100.09443665]
[128.22015381 -109.71871948]
[119.61819458 -122.12472534]
[114.68340302 -136.39183044]
[113.78199005 -151.46134949]
[116.98082733 -166.21498108]
[124.04254913 -179.55795288]
[134.44313049 -190.50009155]
[147.41078186 -198.22944641]
[161.98320007 -202.17242432]
[177.07902527 -202.03643799]
[191.57804871 -197.83158875]
[204.40435791 -189.86990356]
[214.60612488 -178.74217224]
[221.42634583 -165.27415466]
[224.35888672 -150.46528625]
[223.18615723 -135.41445923]
[217.99516296 -121.23856354]
[209.17111206 -108.98953247]
[197.36882019 -99.57632446]
[183.46409607 -93.69747162]
[168.48873901 -91.78921509]
[166.31190491 -76.94801331]
[164.13507080 -62.10680771]
[171.49667358 -46.20690918]
[160.03509521 -31.83290672]
[158.16748047 -16.94962692]
[156.29986572 -2.06634688]
[154.43225098 12.81693268]
[152.56463623 27.70021248]
[161.87579346 15.94001675]
[173.77612305 6.80863428]
[187.54554749 0.85859376]
[202.35090637 -1.55007601]
[217.29632568 -0.27162969]
[231.47749329 4.61657572]
[244.03631592 12.81876087]
[254.21289062 23.83862305]
[261.39141846 37.00936508]
[265.13760376 51.53404617]
[265.22467041 66.53379059]
[261.64743042 81.10099030]
[254.62231445 94.35420990]
[244.57438660 105.49149323]
[232.11164856 113.83896637]
[217.98820496 118.89151001]
[203.05863953 120.34341431]
[188.22631836 118.10682678]
[174.38873291 112.31707764]
[162.38317871 103.32450104]
[152.93608093 91.67321777]
[146.61907959 78.06823730]
[143.81440735 63.33277512]
[144.69142151 48.36040115]
[136.18032837 60.71197510]
[127.66923523 73.06354523]
[119.15814209 85.41512299]
[125.91564178 103.14043427]
[117.66596222 121.89394379]
[97.21868896 130.03102112]
[97.84266663 145.01803589]
[98.46664429 160.00505066]
[111.91178131 163.24290466]
[124.03968048 169.86224365]
[134.01765442 179.40100098]
[141.16261292 191.19694519]
[144.98782349 204.43362427]
[145.23603821 218.19688416]
[141.89682007 231.53804016]
[135.20677185 243.53921509]
[125.63279724 253.37651062]
[113.83953094 260.37658691]
[100.64318085 264.06268311]
[100.64318085 279.06268311]
[100.64318085 294.06268311]
[100.64318085 309.06268311]
[100.64318085 324.06268311]
[100.64318085 339.06268311]
[100.64318085 354.06268311]
[100.64318085 369.06268311]
[100.64318085 384.06268311]
[100.64318085 399.06268311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 128]
[22 51]
[23 50]
[24 49]
[25 48]
[55 125]
[56 124]
[57 123]
[58 122]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[66 92]
[67 91]
[68 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
