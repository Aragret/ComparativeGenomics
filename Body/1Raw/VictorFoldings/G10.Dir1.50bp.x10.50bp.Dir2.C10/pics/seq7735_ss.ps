%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUxxxxxxxxxxGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.28716278 296.53845215]
[104.28716278 281.53845215]
[104.28716278 266.53845215]
[104.28716278 251.53845215]
[104.28716278 236.53845215]
[104.28716278 221.53845215]
[104.28716278 206.53845215]
[104.28716278 191.53845215]
[104.28716278 176.53845215]
[104.28716278 161.53845215]
[90.11060333 156.63690186]
[80.84565735 168.43353271]
[71.58070374 180.23017883]
[62.31575775 192.02680969]
[57.28760529 208.21798706]
[40.33726120 207.86849976]
[35.98076630 191.48384094]
[50.51911545 182.76187134]
[59.78406525 170.96522522]
[69.04901886 159.16857910]
[78.31396484 147.37194824]
[70.64364624 134.82307434]
[67.80182648 121.99271393]
[54.01943970 127.91268158]
[40.23706055 133.83264160]
[32.97936249 148.14016724]
[17.23966599 151.24523926]
[5.09211349 140.76589966]
[5.85527086 124.74101257]
[18.94370842 115.46349335]
[34.31709671 120.05026245]
[48.09947968 114.13030243]
[61.88185883 108.21033478]
[63.86045837 85.35978699]
[78.34341431 67.57478333]
[72.56713867 53.73157120]
[66.79087067 39.88835144]
[61.01459503 26.04513359]
[55.23832321 12.20191574]
[42.54376602 11.65976048]
[31.06696320 6.36541080]
[22.50615883 -2.84167171]
[18.10675812 -14.54733372]
[18.48029327 -26.97979927]
[4.95610428 -33.46796417]
[-8.56808567 -39.95613098]
[-24.86939812 -38.16748810]
[-34.34956741 -51.54875946]
[-27.25621033 -66.33443451]
[-10.88636208 -67.31428528]
[-2.07992077 -53.48031998]
[11.44426918 -46.99215317]
[24.96845818 -40.50399017]
[30.81854439 -46.07446289]
[37.87563705 -50.00525284]
[35.69880295 -64.84645844]
[33.52196503 -79.68766785]
[18.49342918 -80.54090118]
[3.94437242 -84.40222168]
[-9.52943134 -91.11351776]
[-21.37623787 -100.39996338]
[-31.11092949 -111.88127899]
[-38.33487320 -125.08731842]
[-42.75225830 -139.47731018]
[-44.18218994 -154.46197510]
[-42.56611633 -169.42770386]
[-37.97021484 -183.76167297]
[-30.58268356 -196.87689209]
[-20.70603943 -208.23632812]
[-8.74472141 -217.37481689]
[4.81145954 -223.91812134]
[19.40738678 -227.59831238]
[34.44536591 -228.26467896]
[49.30960464 -225.88993835]
[63.39141464 -220.57135010]
[76.11415863 -212.52668762]
[86.95685577 -202.08537292]
[95.47548676 -189.67498779]
[101.32123566 -175.80371094]
[104.25471497 -161.03958130]
[104.15579987 -145.98716736]
[101.02854156 -131.26286316]
[95.00100708 -117.46961975]
[86.32000732 -105.17225647]
[75.34103394 -94.87434387]
[62.51366425 -86.99757385]
[48.36317062 -81.86450195]
[50.54000854 -67.02329254]
[52.71684265 -52.18209076]
[70.53103638 -45.00397110]
[81.14696503 -28.84368134]
[80.65431976 -9.38537216]
[69.08154297 6.42564392]
[74.85781097 20.26886177]
[80.63408661 34.11207962]
[86.41035461 47.95529556]
[92.18663025 61.79851532]
[105.29841614 59.48011780]
[119.04183197 61.73922729]
[131.80046082 68.71478271]
[141.94621277 79.97204590]
[148.04263306 94.51445007]
[149.03759766 110.86707306]
[144.42030334 127.22538757]
[159.23806763 129.55648804]
[165.63449097 127.50874329]
[171.24227905 128.84442139]
[174.61849976 132.30514526]
[189.32646179 135.25062561]
[204.03442383 138.19612122]
[218.74238586 141.14160156]
[233.45034790 144.08708191]
[248.15830994 147.03256226]
[258.81094360 135.87348938]
[273.81091309 132.26733398]
[288.37179565 137.36480713]
[297.84725952 149.53933716]
[299.21371460 164.90606689]
[292.03515625 178.56152344]
[278.60220337 186.14831543]
[263.20126343 185.24551392]
[250.74674988 176.14118958]
[245.21282959 161.74052429]
[230.50486755 158.79504395]
[215.79690552 155.84956360]
[201.08894348 152.90406799]
[186.38098145 149.95858765]
[171.67301941 147.01310730]
[156.90696716 144.37425232]
[142.08920288 142.04313660]
[136.38868713 146.91696167]
[148.27491760 156.06671143]
[162.96656799 159.09245300]
[171.73062134 171.26583862]
[169.93899536 186.15846252]
[158.53781128 195.90592957]
[143.54772949 195.36087036]
[132.88456726 184.81112671]
[132.17906189 169.82835388]
[124.98767090 156.66462708]
[119.28716278 161.53845215]
[119.28716278 176.53845215]
[119.28716278 191.53845215]
[119.28716278 206.53845215]
[119.28716278 221.53845215]
[119.28716278 236.53845215]
[119.28716278 251.53845215]
[119.28716278 266.53845215]
[119.28716278 281.53845215]
[119.28716278 296.53845215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 21]
[12 20]
[13 19]
[14 18]
[23 33]
[24 32]
[25 31]
[35 97]
[36 96]
[37 95]
[38 94]
[39 93]
[44 53]
[45 52]
[46 51]
[55 89]
[56 88]
[57 87]
[104 130]
[105 129]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
