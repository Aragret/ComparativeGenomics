%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCxxxxxxxxxxAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[324.12973022 64.95748138]
[309.19540405 66.35978699]
[294.26110840 67.76208496]
[279.41989136 69.93892670]
[264.71194458 72.88440704]
[250.00398254 75.82988739]
[235.29602051 78.77536774]
[224.33587646 88.86122894]
[209.28503418 83.98444366]
[194.57707214 86.92993164]
[179.86911011 89.87541199]
[165.16114807 92.82089233]
[150.45318604 95.76637268]
[135.74522400 98.71186066]
[121.03726959 101.65734100]
[106.32930756 104.60282135]
[111.24021149 113.88088226]
[111.35713959 125.47982025]
[105.96569061 137.45945740]
[95.04735565 147.71032715]
[81.52316284 154.19848633]
[67.99897766 160.68664551]
[61.56410217 167.26269531]
[54.12526703 167.16583252]
[40.46902466 173.37124634]
[31.37669182 187.01901245]
[15.03077030 185.69880676]
[8.24654484 170.76876831]
[18.00304413 157.58761597]
[34.26361847 159.71499634]
[47.91986084 153.50959778]
[61.51081085 147.16246033]
[75.03500366 140.67430115]
[88.55918884 134.18612671]
[87.70284271 126.73518372]
[85.99015808 111.83327484]
[85.13381195 104.38232422]
[70.49031067 101.13150024]
[55.84680939 97.88067627]
[43.54886246 107.53958130]
[27.92121887 106.98210907]
[16.34277344 96.47145844]
[14.28051472 80.97045898]
[22.70817757 67.79819489]
[37.64647675 63.17421341]
[52.04200363 69.28181458]
[59.09763336 83.23717499]
[73.74113464 86.48799896]
[88.38463593 89.73882294]
[103.38382721 89.89485931]
[118.09178925 86.94937897]
[132.79974365 84.00389862]
[147.50770569 81.05841827]
[162.21566772 78.11293030]
[176.92362976 75.16744995]
[191.63159180 72.22196960]
[206.33955383 69.27648163]
[218.35171509 58.97994614]
[232.35052490 64.06741333]
[247.05848694 61.12192917]
[261.76644897 58.17644501]
[276.47442627 55.23096085]
[265.89031982 44.60189819]
[267.38937378 29.67699051]
[279.87591553 21.36514282]
[294.22326660 25.74164200]
[299.94467163 39.60762024]
[292.85879517 52.82777786]
[307.79312134 51.42547607]
[322.72741699 50.02317047]
[322.65039062 35.12815857]
[323.88012695 20.28421211]
[326.40704346 5.60575199]
[330.21160889 -8.79408741]
[335.26443481 -22.80432510]
[341.52648926 -36.31698608]
[348.94946289 -49.22793961]
[357.47601318 -61.43770218]
[367.04040527 -72.85218811]
[377.56884766 -83.38346863]
[388.98013306 -92.95040894]
[401.18621826 -101.47931671]
[414.09298706 -108.90451050]
[427.60095215 -115.16881561]
[441.60592651 -120.22400665]
[455.99990845 -124.03118896]
[470.67193604 -126.56108093]
[485.50891113 -127.79426575]
[500.39645386 -127.72129059]
[515.21978760 -126.34281158]
[529.86468506 -123.66950989]
[544.21826172 -119.72206879]
[558.16986084 -114.53099823]
[571.61199951 -108.13636780]
[584.44110107 -100.58754730]
[596.55828857 -91.94277954]
[607.87011719 -82.26876068]
[618.28961182 -71.64013672]
[627.73638916 -60.13886642]
[636.13763428 -47.85366440]
[643.42883301 -34.87927246]
[649.55364990 -21.31573296]
[654.46502686 -7.26763535]
[658.12524414 7.15670919]
[660.50598145 21.84609222]
[675.46624756 20.75478172]
[690.42651367 19.66347122]
[705.38677979 18.57216072]
[715.52844238 6.45105028]
[731.27783203 5.13463926]
[743.29101562 15.40393066]
[744.44085693 31.16633797]
[734.04510498 43.07030106]
[718.27142334 44.05341339]
[706.47808838 33.53240967]
[691.51782227 34.62372208]
[676.55755615 35.71503067]
[661.59729004 36.80634308]
[661.35980225 51.91571045]
[659.77746582 66.94430542]
[656.86279297 81.77266693]
[652.63885498 96.28291321]
[647.13916016 110.35968018]
[640.40734863 123.89104462]
[632.49682617 136.76940918]
[623.47052002 148.89237976]
[613.39996338 160.16355896]
[602.36529541 170.49327087]
[590.45404053 179.79936218]
[577.76092529 188.00781250]
[564.38677979 195.05329895]
[550.43780518 200.87976074]
[536.02496338 205.44079590]
[521.26275635 208.70008850]
[506.26843262 210.63165283]
[491.16125488 211.22004700]
[476.06127930 210.46054077]
[461.08853149 208.35908508]
[446.36206055 204.93229675]
[431.99890137 200.20733643]
[418.11325073 194.22171021]
[404.81555176 187.02290344]
[392.21148682 178.66809082]
[380.40133667 169.22358704]
[369.47900391 158.76443481]
[359.53137207 147.37370300]
[350.63754272 135.14187622]
[342.86831665 122.16614532]
[336.28546143 108.54960632]
[330.94140625 94.40046692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 62]
[5 61]
[6 60]
[7 59]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[20 34]
[21 33]
[22 32]
[24 31]
[25 30]
[37 49]
[38 48]
[39 47]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
