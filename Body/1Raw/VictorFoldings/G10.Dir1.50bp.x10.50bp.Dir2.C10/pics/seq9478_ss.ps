%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAxxxxxxxxxxAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.84844208 455.05496216]
[95.84844208 440.05496216]
[95.84844208 425.05496216]
[95.84844208 410.05496216]
[95.84844208 395.05496216]
[95.84844208 380.05496216]
[95.84844208 365.05496216]
[95.84844208 350.05496216]
[95.84844208 335.05496216]
[95.84844208 320.05496216]
[80.83414459 316.15948486]
[67.32283020 308.51794434]
[56.23157120 297.64239502]
[48.31485748 284.26461792]
[44.11330795 269.28689575]
[43.91673279 253.72117615]
[47.74417496 238.62059021]
[55.34220123 225.00834656]
[66.20169830 213.80830383]
[79.59198761 205.78228760]
[94.60996246 201.47828674]
[94.29790497 186.48153687]
[93.98584747 171.48478699]
[93.67378998 156.48803711]
[93.36174011 141.49127197]
[81.60831451 137.78013611]
[71.43735504 130.81831360]
[63.72399139 121.20481110]
[59.13188934 109.76679993]
[58.05617142 97.48843384]
[43.48346710 93.93367004]
[28.91076660 90.37890625]
[14.33806324 86.82415009]
[5.51310778 94.90456390]
[-6.00629568 97.66358948]
[-17.30260086 94.52236176]
[-25.57260323 86.38143158]
[-28.82298279 75.36664581]
[-43.23519897 71.20876312]
[-57.64741516 67.05087280]
[-69.80728149 76.69023132]
[-85.31207275 77.30760956]
[-98.19987488 68.66560364]
[-103.51506805 54.08725357]
[-99.21385193 39.17822647]
[-86.95012665 29.67134476]
[-71.43955231 29.22220230]
[-58.64625931 38.00350189]
[-53.48952866 52.63865662]
[-39.07731247 56.79654312]
[-24.66509628 60.95443344]
[-9.26467800 51.14501953]
[8.73938370 55.72226715]
[17.89282417 72.25144196]
[32.46552658 75.80620575]
[47.03823090 79.36096954]
[61.61093521 82.91573334]
[79.11682892 63.53788376]
[104.68881989 58.24346924]
[108.99639893 43.87528610]
[113.30398560 29.50710297]
[102.09360504 39.47341156]
[89.03295135 46.85036469]
[74.70995331 51.30589294]
[59.76935196 52.63943100]
[44.88368225 50.79094696]
[30.72302246 45.84365463]
[17.92480469 38.02025223]
[7.06513453 27.67290878]
[-1.36714530 15.26739883]
[-6.99246025 1.36215460]
[-9.55758953 -13.41688824]
[-8.94706535 -28.40445900]
[-5.18837023 -42.92589951]
[1.54930031 -56.32753372]
[10.96265316 -68.00609589]
[22.62795258 -77.43587494]
[36.02008820 -84.19240570]
[50.53622437 -87.97153473]
[65.52291870 -88.60315704]
[80.30555725 -86.05883026]
[94.21870422 -80.45309448]
[106.63607025 -72.03828430]
[116.99869537 -61.19319153]
[124.84010315 -48.40599823]
[129.80732727 -34.25231552]
[131.67675781 -19.36926651]
[130.36425781 -4.42679834]
[125.92798615 9.90455437]
[137.22698975 0.03883135]
[148.52600098 -9.82689190]
[159.82499695 -19.69261551]
[159.33688354 -35.32257843]
[169.05026245 -47.57754135]
[184.37879944 -50.67108536]
[198.08482361 -43.14253235]
[203.69676208 -28.54663849]
[198.56483459 -13.77513409]
[185.11216736 -5.80267382]
[169.69071960 -8.39361000]
[158.39172363 1.47211301]
[147.09271240 11.33783627]
[135.79371643 21.20355988]
[127.67217255 33.81468582]
[123.36458588 48.18287277]
[119.05699921 62.55105591]
[126.34716797 67.26745605]
[132.51229858 73.38153076]
[137.28916931 80.63222504]
[140.47378540 88.70991516]
[141.93016052 97.26969910]
[156.83206177 98.98239136]
[171.73396301 100.69508362]
[185.14260864 91.88669586]
[200.34399414 97.01480103]
[205.67691040 112.14554596]
[197.05041504 125.67192841]
[181.08200073 127.21765137]
[170.02127075 115.59698486]
[155.11936951 113.88429260]
[140.21746826 112.17160034]
[135.53263855 122.42821503]
[128.28898621 131.06970215]
[119.00815582 137.47375488]
[108.35848999 141.17922974]
[108.67054749 156.17597961]
[108.98260498 171.17272949]
[109.29466248 186.16947937]
[109.60671234 201.16624451]
[123.76383972 204.45603943]
[136.70770264 211.04603577]
[147.68232727 220.54621887]
[156.04801941 232.39680481]
[161.31854248 245.90116882]
[163.18951416 260.26678467]
[161.55586243 274.65179443]
[156.51779175 288.21426392]
[148.37460327 300.16152954]
[137.60694885 309.79650879]
[124.84846497 316.55828857]
[110.84844208 320.05496216]
[110.84844208 335.05496216]
[110.84844208 350.05496216]
[110.84844208 365.05496216]
[110.84844208 380.05496216]
[110.84844208 395.05496216]
[110.84844208 410.05496216]
[110.84844208 425.05496216]
[110.84844208 440.05496216]
[110.84844208 455.05496216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[30 57]
[31 56]
[32 55]
[33 54]
[38 51]
[39 50]
[40 49]
[59 106]
[60 105]
[61 104]
[89 103]
[90 102]
[91 101]
[92 100]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
