%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCxxxxxxxxxxCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[263.69369507 491.20278931]
[263.69369507 476.20278931]
[263.69369507 461.20278931]
[263.69369507 446.20278931]
[263.69369507 431.20278931]
[263.69369507 416.20278931]
[263.69369507 401.20278931]
[263.69369507 386.20278931]
[263.69369507 371.20278931]
[263.69369507 356.20278931]
[247.07510376 333.85552979]
[254.49226379 312.55087280]
[245.33033752 300.67407227]
[236.16839600 288.79724121]
[227.00646973 276.92041016]
[217.84452820 265.04357910]
[208.68258667 253.16676331]
[194.78253174 247.81536865]
[192.47975159 232.16264343]
[183.31781006 220.28582764]
[174.15586853 208.40899658]
[164.99394226 196.53218079]
[155.83200073 184.65534973]
[146.67007446 172.77853394]
[132.77000427 167.42713928]
[130.46722412 151.77441406]
[121.30528259 139.89758301]
[112.14334869 128.02076721]
[95.40150452 130.19068909]
[80.06490326 123.13473511]
[70.82021332 109.00910187]
[55.83996964 109.77876282]
[40.85972977 110.54842377]
[25.87948799 111.31808472]
[14.10804939 122.21820831]
[-1.73112607 119.66868591]
[-9.48757935 105.62528992]
[-3.21122217 90.86090851]
[12.28326035 86.70151520]
[25.10982895 96.33783722]
[40.09006882 95.56818390]
[55.07030869 94.79852295]
[70.05055237 94.02886200]
[65.62812042 89.44483948]
[61.87823868 83.92287445]
[49.54695511 75.38241577]
[37.21566772 66.84195709]
[24.88438606 58.30150223]
[12.55310154 49.76104355]
[0.22181784 41.22058105]
[-12.10946560 32.68012238]
[-28.57315636 28.63250160]
[-29.24131966 11.69172573]
[-13.14756203 6.36000109]
[-3.56900716 20.34884071]
[8.76227665 28.88929939]
[21.09356117 37.42975616]
[33.42484283 45.97021866]
[45.75613022 54.51067734]
[58.08741379 63.05113602]
[70.41869354 71.59159088]
[77.23218536 68.45689392]
[64.98929596 59.79019547]
[66.37353516 44.85420227]
[80.00065613 38.58509445]
[92.24335480 47.25205612]
[90.85916138 62.18748474]
[97.67265320 59.05278397]
[99.20994568 44.13176727]
[100.74723816 29.21075058]
[102.28453064 14.28973389]
[88.75480652 7.41143084]
[78.62635803 -3.89250565]
[73.26897430 -18.09331131]
[73.40719604 -33.27044296]
[79.02233124 -47.37131882]
[89.35498047 -58.48891068]
[103.00772858 -65.11965942]
[118.13417053 -66.36679840]
[132.68856812 -62.06167984]
[144.70254517 -52.78652573]
[152.55134583 -39.79572296]
[155.17344666 -24.84617424]
[152.21424866 -9.95968437]
[144.07397461 2.85047412]
[131.85348511 11.85183048]
[117.20555115 15.82702637]
[115.66825867 30.74804306]
[114.13096619 45.66905975]
[112.59367371 60.59007645]
[130.75257874 78.08584595]
[134.14111328 100.79349518]
[124.02017212 118.85882568]
[133.18211365 130.73565674]
[142.34403992 142.61247253]
[156.89942932 148.81338501]
[158.54689026 163.61659241]
[167.70883179 175.49340820]
[176.87075806 187.37023926]
[186.03269958 199.24707031]
[195.19462585 211.12388611]
[204.35656738 223.00071716]
[218.91195679 229.20161438]
[220.55941772 244.00482178]
[229.72135925 255.88165283]
[238.88328552 267.75848389]
[248.04522705 279.63528442]
[257.20715332 291.51211548]
[266.36907959 303.38894653]
[288.85873413 301.62307739]
[306.25518799 323.37030029]
[320.76382446 327.17816162]
[335.27246094 330.98602295]
[341.83749390 329.59222412]
[347.27981567 331.48138428]
[350.29226685 335.25952148]
[364.63232422 339.65982056]
[378.97241211 344.06011963]
[393.31246948 348.46041870]
[408.10205078 342.24371338]
[422.11401367 350.05682373]
[424.59957886 365.90615845]
[413.65200806 377.63348389]
[397.66937256 376.24261475]
[388.91217041 362.80047607]
[374.57208252 358.40017700]
[360.23202515 353.99987793]
[345.89196777 349.59957886]
[331.46459961 345.49462891]
[316.95596313 341.68679810]
[302.44732666 337.87893677]
[296.50894165 342.45989990]
[307.41586304 352.75741577]
[318.32278442 363.05493164]
[331.83456421 369.56890869]
[336.37405396 383.86550903]
[329.09506226 396.98101807]
[314.56140137 400.69216919]
[301.88543701 392.67214966]
[299.01486206 377.94931030]
[291.82348633 364.78555298]
[284.63211060 351.62182617]
[278.69369507 356.20278931]
[278.69369507 371.20278931]
[278.69369507 386.20278931]
[278.69369507 401.20278931]
[278.69369507 416.20278931]
[278.69369507 431.20278931]
[278.69369507 446.20278931]
[278.69369507 461.20278931]
[278.69369507 476.20278931]
[278.69369507 491.20278931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 109]
[13 108]
[14 107]
[15 106]
[16 105]
[17 104]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[24 97]
[26 95]
[27 94]
[28 93]
[31 43]
[32 42]
[33 41]
[34 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[68 90]
[69 89]
[70 88]
[71 87]
[111 131]
[112 130]
[113 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
