%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.71185303 110.25406647]
[95.16964722 123.21998596]
[94.91881561 139.03919983]
[81.83128357 146.15016174]
[74.28907776 159.11608887]
[66.74687195 172.08201599]
[59.20466232 185.04792786]
[59.59327316 203.43461609]
[44.08383179 211.59971619]
[36.79604721 224.71032715]
[29.50826454 237.82093811]
[27.09753609 254.60263062]
[10.30433559 256.93173218]
[3.41742396 241.43959045]
[16.39764977 230.53315735]
[23.68543434 217.42254639]
[30.97321701 204.31193542]
[27.95618057 192.56500244]
[33.96245575 181.56875610]
[46.23874283 177.50572205]
[53.78094864 164.53981018]
[61.32315445 151.57388306]
[68.86536407 138.60795593]
[68.57672882 123.71615601]
[82.20372772 115.67778015]
[89.74593353 102.71186066]
[82.20372772 89.74593353]
[67.20444489 89.89228058]
[52.20515823 90.03862762]
[37.20587158 90.18497467]
[22.21229553 90.62395477]
[7.23013973 91.35540009]
[-7.75201607 92.08684540]
[-14.13761330 105.99665070]
[-26.26306915 115.33645630]
[-41.34204102 117.96003723]
[-55.90949249 113.26451111]
[-66.61792755 102.32888794]
[-71.00663757 87.66608429]
[-68.06710815 72.64550018]
[-58.47484207 60.71876907]
[-44.43405914 54.62656021]
[-29.17123413 55.76881409]
[-16.19365120 63.88305664]
[-8.48346329 77.10469055]
[6.49869251 76.37324524]
[21.48084831 75.64179230]
[25.32489586 72.73077393]
[31.05047035 72.23764038]
[37.05952454 75.18568420]
[52.05881119 75.03933716]
[67.05809784 74.89299774]
[82.05738068 74.74665070]
[75.91800690 61.06059647]
[70.55747986 47.05114365]
[65.99275970 32.76256943]
[62.23826218 18.24004555]
[59.30585861 3.52947021]
[57.20482254 -11.32265568]
[55.94178772 -26.26938629]
[55.52075195 -41.26347733]
[55.94304276 -56.25753021]
[57.20732880 -71.20415497]
[59.30961227 -86.05610657]
[62.24324417 -100.76643372]
[65.99896240 -115.28864288]
[70.56488037 -129.57682800]
[75.92657471 -143.58584595]
[82.06710052 -157.27137756]
[88.96704102 -170.59019470]
[96.60459137 -183.50018311]
[104.95560455 -195.96054077]
[113.99369049 -207.93188477]
[123.69027710 -219.37637329]
[134.01470947 -230.25782776]
[144.93435669 -240.54183960]
[156.41471863 -250.19593811]
[168.41947937 -259.18957520]
[180.91072083 -267.49435425]
[193.84893799 -275.08398438]
[207.19323730 -281.93447876]
[220.90144348 -288.02423096]
[234.93023682 -293.33395386]
[249.23524475 -297.84689331]
[263.77130127 -301.54873657]
[278.49240112 -304.42779541]
[293.35202026 -306.47500610]
[308.30325317 -307.68386841]
[323.29876709 -308.05056763]
[338.29119873 -307.57394409]
[353.23312378 -306.25552368]
[368.07736206 -304.09942627]
[382.77697754 -301.11251831]
[397.28546143 -297.30419922]
[411.55703735 -292.68655396]
[425.54650879 -287.27410889]
[439.20971680 -281.08404541]
[452.50341797 -274.13589478]
[465.38565063 -266.45159912]
[477.81567383 -258.05551147]
[489.75418091 -248.97409058]
[501.16345215 -239.23609924]
[512.00744629 -228.87229919]
[522.25183105 -217.91545105]
[531.86425781 -206.40019226]
[540.81433105 -194.36291504]
[549.07379150 -181.84167480]
[556.61645508 -168.87603760]
[563.41857910 -155.50700378]
[569.45861816 -141.77682495]
[574.71746826 -127.72888184]
[579.17852783 -113.40760803]
[582.82769775 -98.85825348]
[585.65338135 -84.12681580]
[587.64678955 -69.25984955]
[588.80145264 -54.30435944]
[589.11383057 -39.30761337]
[588.58288574 -24.31701279]
[587.21026611 -9.37994289]
[585.00042725 5.45638084]
[581.96026611 20.14506340]
[578.09942627 34.63967514]
[573.43005371 48.89440155]
[567.96697998 62.86418152]
[561.72741699 76.50485992]
[554.73114014 89.77332306]
[547.00024414 102.62762451]
[538.55914307 115.02713013]
[529.43457031 126.93266296]
[519.65527344 138.30657959]
[509.25225830 149.11291504]
[498.25836182 159.31753540]
[486.70834351 168.88816833]
[474.63870239 177.79458618]
[462.08761597 186.00860596]
[449.09472656 193.50427246]
[435.70114136 200.25790405]
[421.94915771 206.24813843]
[407.88226318 211.45605469]
[393.54492188 215.86518860]
[378.98242188 219.46159363]
[364.24084473 222.23391724]
[349.36676025 224.17338562]
[334.40719604 225.27386475]
[319.40939331 225.53187561]
[304.42083740 224.94662476]
[289.48883057 223.51992798]
[274.66061401 221.25633240]
[259.98303223 218.16296387]
[245.50251770 214.24960327]
[231.26480103 209.52862549]
[217.31491089 204.01496887]
[203.69692993 197.72604370]
[190.45390320 190.68171692]
[177.62770081 182.90428162]
[165.25886536 174.41831970]
[153.38647461 165.25062561]
[142.04806519 155.43020630]
[131.27949524 144.98809814]
[121.11477661 133.95729065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[4 23]
[5 22]
[6 21]
[7 20]
[9 17]
[10 16]
[11 15]
[27 53]
[28 52]
[29 51]
[30 50]
[31 47]
[32 46]
[33 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
