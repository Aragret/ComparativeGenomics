%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUxxxxxxxxxxCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.10691071 295.03530884]
[95.10691071 280.03530884]
[95.10691071 265.03530884]
[95.10691071 250.03530884]
[95.10691071 235.03530884]
[95.10691071 220.03530884]
[95.10691071 205.03530884]
[95.10691071 190.03530884]
[95.10691071 175.03530884]
[95.10691071 160.03530884]
[88.73028564 156.08706665]
[85.16123199 170.65628052]
[70.20218658 171.76402283]
[64.52609253 157.87942505]
[75.97702789 148.19058228]
[69.60039520 144.24234009]
[56.17294693 150.92842102]
[42.95776367 158.02482605]
[29.96738434 165.52482605]
[16.97700310 173.02482605]
[17.05724144 188.38349915]
[9.43345165 201.71667480]
[-3.84360218 209.43777466]
[-19.20246124 209.46986389]
[-32.51166916 201.80432129]
[-40.19111633 188.50312805]
[-40.17506790 173.14425659]
[-32.46784210 159.85913086]
[-19.14264488 152.22142029]
[-3.78388739 152.28561401]
[9.47700310 160.03443909]
[22.46738434 152.53443909]
[35.45776367 145.03443909]
[36.71425247 141.67758179]
[39.69398499 138.78089905]
[44.15382004 137.16365051]
[49.48687363 137.50097656]
[62.91432190 130.81489563]
[62.74872208 88.89173126]
[91.33383942 71.77316284]
[90.71801758 56.78580856]
[90.10218811 41.79845428]
[89.48636627 26.81110191]
[88.87053680 11.82374859]
[74.45940399 7.18213940]
[62.52822876 -2.09250855]
[54.50518799 -14.86556721]
[51.34226227 -29.58514595]
[53.40232849 -44.47062683]
[60.41762924 -57.72808075]
[71.52440643 -67.76644135]
[85.36919403 -73.38845825]
[84.75337219 -88.37580872]
[84.13754272 -103.36316681]
[83.52172089 -118.35051727]
[82.44464874 -133.31179810]
[80.90735626 -148.23281860]
[79.37006378 -163.15382385]
[64.38109589 -164.46806335]
[49.91178513 -168.59547424]
[36.48519516 -175.38688660]
[24.58668709 -184.59677124]
[14.64638615 -195.89221191]
[7.02362776 -208.86486816]
[1.99396861 -223.04580688]
[-0.26077166 -237.92239380]
[0.34091431 -252.95683289]
[3.77727580 -267.60565186]
[9.92409134 -281.33929443]
[18.55915642 -293.66131592]
[29.37031746 -304.12628174]
[41.96676254 -312.35586548]
[55.89313126 -318.05258179]
[70.64600372 -321.01052856]
[85.69206238 -321.12274170]
[100.48740387 -318.38516235]
[114.49719238 -312.89678955]
[127.21498108 -304.85598755]
[138.18101501 -294.55343628]
[146.99890137 -282.36160278]
[153.34986877 -268.72116089]
[157.00433350 -254.12521362]
[157.83020020 -239.10140991]
[155.79759216 -224.19285583]
[150.97999573 -209.93847656]
[143.55157471 -196.85356140]
[133.78083801 -185.41111755]
[122.02102661 -176.02479553]
[108.69721985 -169.03388977]
[94.29108429 -164.69111633]
[95.82837677 -149.77011108]
[97.36566925 -134.84909058]
[99.91607666 -132.33062744]
[101.34235382 -128.42738342]
[100.99609375 -123.69602966]
[98.50907135 -118.96633911]
[99.12490082 -103.97898865]
[99.74072266 -88.99163818]
[100.35655212 -74.00428009]
[114.61590576 -69.53705597]
[126.50879669 -60.44374466]
[134.58810425 -47.80652618]
[137.86244202 -33.14023209]
[135.91778564 -18.21078491]
[128.96969604 -4.82256651]
[117.83964539 5.39965963]
[103.85789490 11.20792294]
[104.47371674 26.19527626]
[105.08953857 41.18262863]
[105.70536804 56.16998291]
[106.32118988 71.15733337]
[127.46143341 77.09913635]
[141.96134949 98.52519226]
[139.10737610 128.20492554]
[153.35406494 132.89872742]
[167.60076904 137.59252930]
[181.84745789 142.28633118]
[191.04071045 142.00398254]
[196.33673096 147.22552490]
[210.48403931 152.21084595]
[224.63136292 157.19616699]
[241.57963562 156.75775146]
[246.69267273 172.92231750]
[232.57525635 182.31033325]
[219.64604187 171.34349060]
[205.49871826 166.35816956]
[191.35140991 161.37284851]
[177.15365601 156.53302002]
[162.90696716 151.83921814]
[148.66026306 147.14541626]
[134.41357422 142.45162964]
[128.33691406 146.84754944]
[138.58923340 157.79696655]
[148.84155273 168.74639893]
[162.41169739 175.13787842]
[166.85273743 189.46537781]
[159.27659607 202.41149902]
[144.61013794 205.55718994]
[132.39120483 196.85675049]
[130.56634521 181.96685791]
[123.37496185 168.80313110]
[116.18357849 155.63938904]
[110.10691071 160.03530884]
[110.10691071 175.03530884]
[110.10691071 190.03530884]
[110.10691071 205.03530884]
[110.10691071 220.03530884]
[110.10691071 235.03530884]
[110.10691071 250.03530884]
[110.10691071 265.03530884]
[110.10691071 280.03530884]
[110.10691071 295.03530884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 38]
[17 37]
[18 33]
[19 32]
[20 31]
[40 111]
[41 110]
[42 109]
[43 108]
[44 107]
[52 99]
[53 98]
[54 97]
[55 96]
[56 92]
[57 91]
[58 90]
[114 131]
[115 130]
[116 129]
[117 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
