%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCxxxxxxxxxxAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[173.18093872 84.63205719]
[168.83793640 76.95797729]
[155.18168640 83.16338348]
[141.52545166 89.36879730]
[127.86920929 95.57420349]
[114.21296692 101.77960968]
[105.92572784 113.04074860]
[91.99243927 111.87663269]
[78.33619690 118.08203888]
[64.67996216 124.28744507]
[51.02371979 130.49285889]
[37.36747742 136.69825745]
[23.71123505 142.90367126]
[38.47773743 145.54003906]
[50.95843887 153.86062622]
[59.07128525 166.47734070]
[61.46287155 181.28546143]
[57.73422241 195.81463623]
[48.50736237 207.64109802]
[35.32154083 214.79191589]
[20.37644768 216.07415771]
[6.16525936 211.27394104]
[-4.94127989 201.19203186]
[-11.09034920 187.51034546]
[-11.25614548 172.51126099]
[-5.41101027 158.69697571]
[5.46874857 148.37277222]
[-9.34900951 150.70387268]
[-24.16676712 153.03497314]
[-30.29494286 167.19297791]
[-43.11740494 175.77131653]
[-58.54255676 176.03268433]
[-71.64828491 167.89367676]
[-78.25259399 153.95143127]
[-76.24808502 138.65484619]
[-66.27438354 126.88501740]
[-51.51405716 122.39765930]
[-36.67707825 126.62466431]
[-26.49787140 138.21722412]
[-11.68011379 135.88610840]
[3.13764453 133.55500793]
[17.50582886 129.24742126]
[31.16206932 123.04202271]
[44.81830978 116.83661652]
[58.47455215 110.63120270]
[72.13079071 104.42579651]
[85.78703308 98.22039032]
[94.07427216 86.95925140]
[108.00756073 88.12336731]
[121.66380310 81.91796112]
[135.32003784 75.71255493]
[148.97628784 69.50714874]
[162.63252258 63.30173874]
[155.21430969 36.01043320]
[153.63661194 7.77778769]
[157.96647644 -20.16054153]
[168.01240540 -46.58218765]
[183.33288574 -70.33158112]
[203.25575256 -90.37045288]
[226.90769958 -105.82326508]
[253.25251770 -116.01544189]
[281.13656616 -120.50281525]
[281.13656616 -135.50282288]
[281.13656616 -150.50282288]
[281.13656616 -165.50282288]
[281.13656616 -180.50282288]
[281.13656616 -195.50282288]
[266.88391113 -200.66394043]
[255.25798035 -210.39088440]
[247.66267395 -223.50909424]
[245.01516724 -238.43446350]
[247.63516235 -253.36466980]
[255.20628357 -266.49685669]
[266.81427002 -276.24520874]
[281.05740356 -281.43258667]
[296.21575928 -281.43258667]
[310.45889282 -276.24520874]
[322.06686401 -266.49685669]
[329.63800049 -253.36466980]
[332.25799561 -238.43446350]
[329.61047363 -223.50909424]
[322.01516724 -210.39088440]
[310.38925171 -200.66394043]
[296.13656616 -195.50282288]
[296.13656616 -180.50282288]
[296.13656616 -165.50282288]
[296.13656616 -150.50282288]
[296.13656616 -135.50282288]
[296.13656616 -120.50281525]
[304.90704346 -119.73049927]
[313.60873413 -118.38808441]
[322.20458984 -116.48126221]
[330.65811157 -114.01811218]
[338.93325806 -111.00909424]
[346.99487305 -107.46697235]
[354.80865479 -103.40678406]
[362.34130859 -98.84578705]
[369.56082153 -93.80335236]
[376.43646240 -88.30090332]
[382.93893433 -82.36183167]
[389.04058838 -76.01136780]
[394.71548462 -69.27651978]
[399.93939209 -62.18590164]
[404.69012451 -54.76966476]
[408.94741821 -47.05934143]
[412.69314575 -39.08771515]
[415.91134644 -30.88867569]
[418.58831787 -22.49709511]
[420.71264648 -13.94865799]
[422.27526855 -5.27971792]
[423.26953125 3.47285533]
[423.69113159 12.27183533]
[423.53826904 21.07979584]
[422.81155396 29.85927010]
[421.51406860 38.57291031]
[419.65130615 47.18365479]
[417.23117065 55.65486145]
[414.26391602 63.95049667]
[410.76211548 72.03526306]
[406.74066162 79.87475586]
[402.21667480 87.43562317]
[397.20928955 94.68568420]
[391.73983765 101.59409332]
[385.83157349 108.13143921]
[379.50955200 114.26989746]
[372.80072021 119.98333740]
[365.73352051 125.24743652]
[358.33804321 130.03977966]
[350.64572144 134.33996582]
[342.68927002 138.12966919]
[334.50250244 141.39276123]
[326.12023926 144.11531067]
[317.57815552 146.28573608]
[308.91250610 147.89476013]
[300.16021729 148.93551636]
[291.35848999 149.40356445]
[282.54476929 149.29685974]
[273.75653076 148.61585999]
[265.03115845 147.36340332]
[256.40576172 145.54481506]
[247.91706848 143.16778564]
[239.60118103 140.24241638]
[231.49346924 136.78109741]
[223.62843323 132.79855347]
[216.03953552 128.31169128]
[208.75909424 123.33956909]
[201.81806946 117.90331268]
[195.24600220 112.02603149]
[189.07089233 105.73269653]
[183.31900024 99.05006409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[8 47]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[27 41]
[28 40]
[29 39]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
