%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCxxxxxxxxxxCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.42417908 93.46505737]
[153.82981873 96.92977142]
[139.23544312 100.39448547]
[124.64106750 103.85920715]
[110.04669189 107.32392120]
[97.39808655 115.38697815]
[88.09676361 127.15495300]
[78.79544067 138.92294312]
[69.49411774 150.69091797]
[76.93534088 163.94598389]
[78.73268127 179.04028320]
[74.61206055 193.67205811]
[65.20183563 205.61006165]
[51.93699646 213.03384399]
[36.84034348 214.81134033]
[22.21399879 210.67146301]
[10.28837776 201.24554443]
[2.88205028 187.97096252]
[1.12442660 172.87197876]
[5.28353214 158.25108337]
[14.72513294 146.33787537]
[28.00945473 138.94902039]
[43.11073303 137.21125793]
[57.72613525 141.38958740]
[67.02745819 129.62161255]
[76.32878113 117.85363007]
[85.63010406 106.08565521]
[83.38488770 98.92961121]
[71.16088867 107.62293243]
[59.11563492 98.68359375]
[63.89529037 84.46546936]
[78.89443970 84.61751556]
[76.64921570 77.46147156]
[62.29235458 73.11629486]
[47.93549347 68.77111816]
[54.70242310 82.15800476]
[51.44755554 96.80060577]
[39.64662170 106.06008148]
[24.65007210 105.73825836]
[13.25723267 95.98104858]
[10.63352680 81.21229553]
[17.96852303 68.12803650]
[31.93628693 62.66058350]
[18.33810234 56.32896423]
[4.73991871 49.99734497]
[-8.85826492 43.66572571]
[-22.45644951 37.33410645]
[-38.73602676 39.31080246]
[-48.37003326 26.03985405]
[-41.44782257 11.17327976]
[-25.09037399 10.00453472]
[-16.12483025 23.73592377]
[-2.52664590 30.06754303]
[11.07153797 36.39916229]
[24.66972160 42.73078156]
[38.26790619 49.06240082]
[52.28067017 54.41425705]
[66.63752747 58.75943756]
[80.99439240 63.10461426]
[103.32661438 74.56156921]
[106.58197784 92.72954559]
[121.17634583 89.26483154]
[135.77072144 85.80011749]
[150.36509705 82.33539581]
[164.95947266 78.87068176]
[162.86103821 64.58647156]
[161.98652649 50.17583847]
[162.34223938 35.74346161]
[163.92550659 21.39416504]
[166.72477722 7.23217249]
[170.71963501 -6.63966751]
[175.88102722 -20.12061310]
[182.17138672 -33.11277008]
[189.54496765 -45.52180099]
[197.94816589 -57.25760269]
[207.31988525 -68.23497009]
[217.59199524 -78.37421417]
[228.68984985 -87.60173798]
[240.53280640 -95.85056305]
[253.03479004 -103.06082916]
[266.10494995 -109.18022156]
[279.64837646 -114.16434479]
[293.56661987 -117.97707367]
[307.75857544 -120.59075928]
[322.12118530 -121.98649597]
[336.55007935 -122.15419769]
[350.94046021 -121.09272003]
[365.18783569 -118.80983734]
[379.18872070 -115.32219696]
[392.84143066 -110.65518951]
[406.04678345 -104.84278107]
[418.70895386 -97.92724609]
[430.73596191 -89.95886993]
[442.04049683 -80.99558258]
[452.54049683 -71.10255432]
[462.15969849 -60.35167694]
[470.82833862 -48.82108688]
[478.48348999 -36.59457397]
[485.06958008 -23.76097870]
[490.53884888 -10.41355228]
[494.85162354 3.35073543]
[497.97662354 17.43188858]
[512.84667969 15.46143627]
[527.71667480 13.49098492]
[542.58666992 11.52053356]
[556.88482666 -0.03990223]
[572.83471680 7.21871090]
[587.66174316 4.94729424]
[602.48876953 2.67587757]
[617.31579590 0.40446094]
[629.76715088 -10.26778507]
[645.14324951 -4.56627893]
[647.62652588 11.64375877]
[634.66241455 21.68683052]
[619.58721924 15.23148537]
[604.76019287 17.50290298]
[589.93316650 19.77431870]
[575.10614014 22.04573631]
[567.66540527 31.62977409]
[555.28863525 33.61476898]
[544.55712891 26.39054871]
[529.68713379 28.36100006]
[514.81707764 30.33145142]
[499.94708252 32.30190277]
[500.59649658 47.89344788]
[499.80700684 63.47900772]
[497.58523560 78.92607117]
[493.95004272 94.10328674]
[488.93218994 108.88161469]
[482.57424927 123.13536835]
[474.93023682 136.74333191]
[466.06506348 149.58978271]
[456.05398560 161.56542969]
[444.98208618 172.56840515]
[432.94342041 182.50511169]
[420.04031372 191.29098511]
[406.38235474 198.85125732]
[392.08566284 205.12158203]
[377.27175903 210.04858398]
[362.06655884 213.59025574]
[346.59927368 215.71641541]
[331.00143433 216.40892029]
[315.40563965 215.66175842]
[299.94448853 213.48121643]
[284.74945068 209.88574219]
[269.94970703 204.90582275]
[255.67114258 198.58369446]
[242.03517151 190.97305298]
[229.15777588 182.13850403]
[217.14846802 172.15509033]
[206.10943604 161.10763550]
[196.13458252 149.08999634]
[187.30877686 136.20428467]
[179.70712280 122.56000519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 27]
[7 26]
[8 25]
[9 24]
[33 59]
[34 58]
[35 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[102 124]
[103 123]
[104 122]
[105 121]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
