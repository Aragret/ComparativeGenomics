%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAxxxxxxxxxxGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUCAACAGAAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.68679047 461.72302246]
[95.68679047 446.72302246]
[95.68679047 431.72302246]
[95.68679047 416.72302246]
[95.68679047 401.72302246]
[95.68679047 386.72302246]
[95.68679047 371.72302246]
[95.68679047 356.72302246]
[95.68679047 341.72302246]
[95.68679047 326.72302246]
[80.61628723 323.60437012]
[66.51216125 317.43240356]
[53.98591995 308.47213745]
[43.58116913 297.10955811]
[35.75004196 283.83502197]
[30.83356094 269.22192383]
[29.04676437 253.90213013]
[30.46932411 238.53858948]
[35.04197693 223.79656982]
[42.56900406 210.31495667]
[52.72660446 198.67848206]
[65.07681274 189.39242554]
[79.08640289 182.86064148]
[94.14988708 179.36801147]
[93.83782959 164.37124634]
[85.83742523 151.80769348]
[93.28595734 137.84954834]
[92.97389984 122.85279083]
[92.66184998 107.85604095]
[87.90803528 93.62926483]
[79.14182281 81.45742798]
[63.79502487 78.79031372]
[55.07823563 66.32146454]
[57.71549606 51.70706940]
[48.94929123 39.53523254]
[40.18308258 27.36339760]
[31.41687584 15.19155979]
[22.65066719 3.01972294]
[13.88446045 -9.15211391]
[2.58545589 -19.01783752]
[-10.65712929 -26.06297112]
[-23.89971542 -33.10810852]
[-35.60908127 -23.41485405]
[-50.13804626 -18.94521332]
[-65.27104187 -20.38077354]
[-78.70040131 -27.50262451]
[-88.37824249 -39.22473145]
[-92.82876587 -53.75956345]
[-91.37329865 -68.89065552]
[-84.23378754 -82.31063843]
[-72.49896240 -91.97305298]
[-57.95829010 -96.40444946]
[-42.82912445 -94.92907715]
[-29.41854668 -87.77192688]
[-19.77157784 -76.02439117]
[-15.35931015 -61.47790527]
[-16.85457993 -46.35069275]
[-3.61199474 -39.30555725]
[9.63059044 -32.26042175]
[1.95377517 -45.14710236]
[-2.19694257 -59.56138611]
[-2.54914761 -74.55725098]
[0.92027587 -89.15050507]
[7.98362637 -102.38338470]
[18.17733002 -113.38739777]
[30.83236694 -121.44035339]
[45.11817551 -126.01371765]
[60.09716797 -126.80734253]
[74.78625488 -123.76914215]
[88.22138214 -117.09851837]
[99.52079773 -107.23326111]
[107.94290161 -94.82084656]
[112.93495178 -80.67590332]
[114.16931152 -65.72677612]
[111.56497192 -50.95458984]
[105.29285431 -37.32886124]
[95.76460266 -25.74385071]
[83.60556793 -16.95989609]
[69.61375427 -11.55349445]
[54.70745850 -9.87947273]
[39.86499023 -12.04769802]
[26.05629730 -17.91832161]
[34.82250595 -5.74648428]
[43.58871078 6.42535257]
[52.35491943 18.59718895]
[61.12112808 30.76902580]
[69.88733673 42.94086456]
[84.58418274 45.07115555]
[93.64775848 57.29025269]
[91.31365967 72.69121552]
[100.07987213 84.86305237]
[99.11833191 69.89390564]
[101.13272095 55.02977753]
[106.04365540 40.85646820]
[113.65760040 27.93254280]
[123.67448425 16.76732635]
[135.69953918 7.80084038]
[149.25888062 1.38645124]
[163.81811523 -2.22305155]
[178.80349731 -2.88541842]
[193.62442017 -0.57454544]
[207.69680786 4.61849642]
[220.46609497 12.48904991]
[231.42900085 22.72694016]
[240.15353394 34.92869186]
[246.29582214 48.61343765]
[249.61380005 63.24186707]
[249.97673035 78.23748016]
[247.37030029 93.00929260]
[241.89723206 106.97515869]
[233.77319336 119.58468628]
[223.31838989 130.34094238]
[210.94480896 138.82000732]
[197.14012146 144.68774414]
[182.44833374 147.71289062]
[167.44847107 147.77624512]
[152.73165894 144.87528992]
[138.87789917 139.12437439]
[126.43314362 130.75010681]
[115.88785553 120.08255005]
[107.65859985 107.54398346]
[107.97065735 122.54074097]
[108.28271484 137.53749084]
[116.30543518 151.17370605]
[108.83458710 164.05918884]
[109.14663696 179.05595398]
[123.54935455 181.68632507]
[137.15231323 187.08732605]
[149.42834473 195.04751587]
[159.90209961 205.25634766]
[168.16847229 217.31623840]
[173.90827942 230.75807190]
[176.90058899 245.05943298]
[177.03115845 259.66491699]
[174.29689026 274.00772095]
[168.80580139 287.53155518]
[160.77282715 299.71234131]
[150.51130676 310.07849121]
[138.42086792 318.22903442]
[124.97179413 323.84930420]
[110.68679047 326.72302246]
[110.68679047 341.72302246]
[110.68679047 356.72302246]
[110.68679047 371.72302246]
[110.68679047 386.72302246]
[110.68679047 401.72302246]
[110.68679047 416.72302246]
[110.68679047 431.72302246]
[110.68679047 446.72302246]
[110.68679047 461.72302246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 125]
[27 123]
[28 122]
[29 121]
[30 91]
[31 90]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 59]
[41 58]
[42 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
