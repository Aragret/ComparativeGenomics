%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCxxxxxxxxxxCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[43.27543259 489.69647217]
[43.27543259 474.69647217]
[43.27543259 459.69647217]
[43.27543259 444.69647217]
[43.27543259 429.69647217]
[43.27543259 414.69647217]
[43.27543259 399.69647217]
[43.27543259 384.69647217]
[43.27543259 369.69647217]
[43.27543259 354.69647217]
[27.77239418 351.05859375]
[13.56827641 343.84136963]
[1.47660434 333.45367432]
[-7.80902195 320.48611450]
[-13.75471878 305.67745972]
[-16.01700974 289.87246704]
[-14.46267414 273.97381592]
[-9.17657280 258.89041138]
[-0.45703518 245.48559570]
[11.20097828 234.52755737]
[25.13397026 226.64543152]
[40.54767227 222.29310608]
[39.93184662 207.30575562]
[32.61486435 220.40010071]
[21.66830254 230.65547180]
[8.12520313 237.10408020]
[-6.73635244 239.13734436]
[-21.51386070 236.56338501]
[-34.81274414 229.62510681]
[-45.37797546 218.97729492]
[-52.21249390 205.62478638]
[-54.67131805 190.82768250]
[-52.52240753 175.98240662]
[-45.96855545 162.48992920]
[-35.62825775 151.62355042]
[-22.47734261 144.40873718]
[-7.75688171 141.52638245]
[7.14393711 143.24847412]
[20.81890297 149.41250610]
[31.97748947 159.43678284]
[39.56664658 172.37527466]
[42.87002563 187.00479126]
[47.70984268 172.80703735]
[52.54965973 158.60928345]
[57.38947678 144.41152954]
[62.22929382 130.21377563]
[67.06910706 116.01602936]
[63.41040421 101.46907806]
[52.42959976 91.25036621]
[41.44879913 81.03166199]
[30.46799469 70.81295013]
[19.48719215 60.59424591]
[4.28466225 63.70273209]
[-9.82760143 57.25109482]
[-17.42314529 43.72011566]
[-15.58132648 28.31273842]
[-5.01036358 16.95340919]
[10.22499371 14.01002407]
[24.26643944 20.61437416]
[31.71475029 34.22695160]
[29.70590019 49.61344528]
[40.68670273 59.83214951]
[51.66750336 70.05085754]
[62.64830780 80.26956940]
[73.62911224 90.48827362]
[86.13620758 78.42650604]
[101.91109467 76.82429504]
[107.89939117 63.07146454]
[113.88768768 49.31863785]
[119.87598419 35.56580734]
[107.41930389 27.13101387]
[96.72478485 16.55076027]
[88.15666199 4.18540525]
[82.00678253 -9.54389095]
[78.48458862 -24.16951370]
[77.71006775 -39.19332123]
[79.70957947 -54.10360336]
[84.41503906 -68.39253235]
[91.66616058 -81.57341766]
[101.21598816 -93.19733429]
[112.73925781 -102.86837006]
[125.84348297 -110.25713348]
[140.08235168 -115.11197662]
[154.97087097 -117.26753235]
[170.00196838 -116.65038300]
[184.66368103 -113.28155518]
[198.45661926 -107.27579498]
[210.91102600 -98.83763885]
[221.60270691 -88.25450897]
[230.16749573 -75.88684082]
[236.31367493 -62.15588760]
[239.83190918 -47.52931595]
[240.60238647 -32.50530243]
[238.59886169 -17.59555817]
[233.88955688 -3.30790234]
[226.63487244 9.87103081]
[217.08190918 21.49237251]
[205.55603027 31.16030312]
[192.44981384 38.54553604]
[178.20965576 43.39653778]
[163.32054138 45.54808044]
[148.28961182 44.92688370]
[133.62881470 41.55410385]
[127.64051819 55.30693436]
[121.65222168 69.05976105]
[115.66392517 82.81259155]
[118.16612244 85.48250580]
[120.21852875 88.51188660]
[121.77030945 91.82570648]
[136.76319885 91.36377716]
[151.75608826 90.90185547]
[163.74884033 80.24571228]
[179.53233337 83.11990356]
[186.99880981 97.31959534]
[180.42063904 111.95199585]
[164.84402466 115.79238129]
[152.21801758 105.89473724]
[137.22512817 106.35666656]
[122.23223877 106.81858826]
[114.12947083 120.43911743]
[98.32253265 126.38742828]
[81.26686096 120.85584259]
[76.42704773 135.05360413]
[71.58722687 149.25135803]
[66.74741364 163.44909668]
[61.90759659 177.64685059]
[57.06777954 191.84460449]
[54.91920090 206.68992615]
[55.53502655 221.67729187]
[69.43823242 224.19041443]
[82.49948120 229.56066895]
[94.13899994 237.54681396]
[103.84073639 247.79153442]
[111.17521667 259.83746338]
[115.81859589 273.14758301]
[117.56689453 287.12915039]
[116.34502411 301.16018677]
[112.20996094 314.61700439]
[105.34811401 326.90197754]
[96.06693268 337.47018433]
[84.78109741 345.85342407]
[71.99403381 351.68109131]
[58.27543259 354.69647217]
[58.27543259 369.69647217]
[58.27543259 384.69647217]
[58.27543259 399.69647217]
[58.27543259 414.69647217]
[58.27543259 429.69647217]
[58.27543259 444.69647217]
[58.27543259 459.69647217]
[58.27543259 474.69647217]
[58.27543259 489.69647217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 129]
[23 128]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[47 122]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[67 106]
[68 105]
[69 104]
[70 103]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
