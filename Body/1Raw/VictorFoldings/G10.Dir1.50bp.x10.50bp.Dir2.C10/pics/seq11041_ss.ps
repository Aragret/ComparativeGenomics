%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACxxxxxxxxxxGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[154.75895691 361.26199341]
[154.75895691 346.26199341]
[154.75895691 331.26199341]
[154.75895691 316.26199341]
[154.75895691 301.26199341]
[154.75895691 286.26199341]
[154.75895691 271.26199341]
[154.75895691 256.26199341]
[154.75895691 241.26199341]
[154.75895691 226.26199341]
[137.31108093 221.74418640]
[123.37394714 211.15101624]
[114.87065125 196.44349670]
[112.77804565 180.10537720]
[117.02728271 164.72708130]
[126.57424927 152.59548950]
[118.16084290 140.17716980]
[109.74742889 127.75885773]
[97.70711517 130.45367432]
[85.15641022 127.96381378]
[74.30655670 120.35394287]
[67.21632385 108.61986542]
[65.40646362 94.56866455]
[50.41357803 94.10674286]
[35.42069244 93.64481354]
[21.54335976 110.90705109]
[-4.20587444 109.22741699]
[-18.45256615 113.92121887]
[-28.96606255 126.50686646]
[-45.07369995 123.42854309]
[-50.20532227 107.85296631]
[-39.08195496 95.80295563]
[-23.14636803 99.67453003]
[-8.89967537 94.98072815]
[-10.13028812 80.03129578]
[-24.95277023 77.73041534]
[-39.77525330 75.42954254]
[-54.59773254 73.12866974]
[-69.42021942 70.82779694]
[-83.16683197 79.09883118]
[-98.15345001 73.37336731]
[-102.88361359 58.04349136]
[-93.72875214 44.86896896]
[-77.71168518 43.95616913]
[-67.11933899 56.00531006]
[-52.29685974 58.30618668]
[-37.47437668 60.60705948]
[-22.65189552 62.90793610]
[-7.82941294 65.20880890]
[5.99744558 58.56658936]
[20.23109055 59.79078674]
[30.99492455 67.49071503]
[35.88261795 78.65192413]
[50.87550354 79.11385345]
[65.86838531 79.57578278]
[75.85948944 68.38748169]
[73.71090698 53.54216003]
[71.56232452 38.69683838]
[69.41374969 23.85151482]
[57.03684616 14.39371300]
[55.06935883 -0.69216251]
[64.16220093 -12.43336296]
[62.01362228 -27.27868652]
[59.86504364 -42.12400818]
[44.98303223 -44.91766357]
[31.81570053 -52.39430237]
[21.79133987 -63.74290848]
[15.99732018 -77.73248291]
[15.06213093 -92.84552765]
[19.08721542 -107.44269562]
[27.63596153 -119.94060516]
[39.78106689 -128.98356628]
[54.20512009 -133.59066772]
[69.34351349 -133.26216125]
[83.55413055 -128.03369141]
[95.29553223 -118.47240448]
[103.29408264 -105.61542511]
[106.68216705 -90.85739136]
[105.09226990 -75.79914093]
[98.69684601 -62.07407761]
[88.18962860 -51.17100143]
[74.71036530 -44.27258682]
[76.85894012 -29.42726517]
[79.00752258 -14.58194256]
[91.05614471 -5.90056801]
[93.44658661 9.12409306]
[84.25907135 21.70293617]
[86.40765381 36.54825974]
[88.55622864 51.39358139]
[90.70481110 66.23890686]
[105.71259308 68.29156494]
[117.21772766 76.14383698]
[128.80677795 66.62049866]
[140.39582825 57.09716034]
[151.98487854 47.57382202]
[154.97187805 31.81129074]
[169.22459412 24.44655418]
[183.80958557 31.12920952]
[187.53846741 46.73289108]
[177.55078125 59.28779602]
[161.50820923 59.16287231]
[149.91915894 68.68621063]
[138.33010864 78.20954895]
[126.74106598 87.73288727]
[129.11714172 104.21415710]
[122.16574860 119.34545135]
[130.57916260 131.76376343]
[138.99256897 144.18208313]
[156.30628967 139.61387634]
[174.54981995 143.35452271]
[189.80226135 155.24577332]
[198.50593567 173.31620789]
[198.28413391 194.08963013]
[212.62419128 198.48992920]
[226.96424866 202.89022827]
[244.77597046 198.33248901]
[256.25662231 211.57028198]
[270.68399048 215.67523193]
[285.11138916 219.78018188]
[300.87457275 215.25762939]
[312.48327637 226.84082031]
[307.99545288 242.61393738]
[292.02777100 246.35096741]
[281.00643921 234.20756531]
[266.57904053 230.10261536]
[252.15167236 225.99766541]
[241.39556885 231.61627197]
[229.31405640 228.26840210]
[222.56394958 217.23030090]
[208.22389221 212.83000183]
[193.88381958 208.42970276]
[187.85261536 212.88777161]
[198.32757568 223.62438965]
[208.80255127 234.36100769]
[222.35295105 240.79426575]
[226.82609558 255.11177063]
[219.34811401 268.11483765]
[204.72343445 271.44927979]
[192.34808350 262.97280884]
[190.17294312 248.13139343]
[182.98156738 234.96766663]
[175.79017639 221.80392456]
[169.75895691 226.26199341]
[169.75895691 241.26199341]
[169.75895691 256.26199341]
[169.75895691 271.26199341]
[169.75895691 286.26199341]
[169.75895691 301.26199341]
[169.75895691 316.26199341]
[169.75895691 331.26199341]
[169.75895691 346.26199341]
[169.75895691 361.26199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 108]
[17 107]
[18 106]
[23 55]
[24 54]
[25 53]
[27 34]
[28 33]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[56 90]
[57 89]
[58 88]
[59 87]
[62 84]
[63 83]
[64 82]
[92 104]
[93 103]
[94 102]
[95 101]
[113 131]
[114 130]
[115 129]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
