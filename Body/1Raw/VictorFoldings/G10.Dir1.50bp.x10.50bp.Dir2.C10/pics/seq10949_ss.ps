%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCxxxxxxxxxxCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.86464691 266.78518677]
[104.86464691 251.78520203]
[104.86464691 236.78520203]
[104.86464691 221.78520203]
[104.86464691 206.78520203]
[104.86464691 191.78520203]
[104.86464691 176.78520203]
[104.86464691 161.78520203]
[104.86464691 146.78520203]
[104.86464691 131.78520203]
[91.48821259 129.38694763]
[80.94860077 121.90973663]
[74.92816162 111.23453522]
[74.08868408 99.67527008]
[78.03281403 89.48786926]
[67.15399170 79.16066742]
[56.27516556 68.83345795]
[45.39633942 58.50625610]
[34.51751328 48.17905045]
[21.27492714 41.13391495]
[6.63142681 37.88309097]
[16.04976273 49.55763245]
[18.50488472 64.35534668]
[13.36129093 78.44589233]
[1.95038569 88.18196869]
[-12.77415371 91.04343414]
[-27.00092316 86.28958893]
[-37.04737091 75.15097046]
[-40.31299973 60.51076126]
[-35.95251465 46.15854263]
[-25.09461212 35.80934143]
[-10.54993343 32.14201355]
[-24.20617485 25.93660736]
[-37.86241531 19.73120117]
[-51.51865768 13.52579308]
[-56.84233856 14.05304718]
[-61.36095047 12.59203911]
[-64.44237518 9.79802608]
[-65.81435394 6.48363924]
[-79.05693817 -0.56149578]
[-92.29952240 -7.60663080]
[-103.55009460 2.55212927]
[-117.59783936 8.24744225]
[-132.74642944 8.79157066]
[-147.16659546 4.11880922]
[-159.11703491 -5.20658398]
[-167.15466309 -18.05852127]
[-170.30889893 -32.88507080]
[-168.19886780 -47.89585114]
[-161.07936096 -61.27824402]
[-149.81008911 -71.41625214]
[-135.75186157 -77.08566284]
[-120.60229492 -77.60187531]
[-106.19077301 -72.90254974]
[-94.25754547 -63.55514908]
[-86.24361420 -50.68841934]
[-83.11669922 -35.85608292]
[-85.25438690 -20.84921646]
[-72.01180267 -13.80408096]
[-58.76921463 -6.75894642]
[-45.31325150 -0.13044789]
[-31.65700912 6.07495928]
[-18.00076866 12.28036594]
[-4.34452677 18.48577309]
[9.88225269 23.23958778]
[24.52575302 26.49041367]
[13.74020100 16.06583405]
[5.49163246 3.53742218]
[0.17826642 -10.48998451]
[-1.94338191 -25.33917999]
[-0.77088505 -40.29328537]
[3.63915205 -54.63035583]
[11.07382488 -67.65823364]
[21.17420578 -78.74797058]
[33.45267868 -87.36418915]
[47.31646729 -93.09090424]
[62.09626770 -95.65166473]
[77.07855225 -94.92283630]
[91.54001617 -90.93959808]
[104.78248596 -83.89425659]
[116.16667175 -74.12694550]
[125.14295959 -62.10919952]
[131.27799988 -48.42120361]
[134.27561951 -33.72378159]
[133.99110413 -18.72647858]
[130.43817139 -4.15333033]
[123.78834534 9.29211235]
[114.36268616 20.96073914]
[102.61621857 30.28922081]
[89.11604309 36.82720184]
[74.51390076 40.25904846]
[59.51475525 40.41907883]
[44.84471893 37.30022430]
[55.72354507 47.62742996]
[66.60237122 57.95463562]
[77.48119354 68.28183746]
[88.36001587 78.60904694]
[114.38420868 75.68153381]
[132.15502930 99.86590576]
[146.97277832 97.53480530]
[161.79054260 95.20369720]
[176.60829163 92.87259674]
[191.42605591 90.54148865]
[195.78157043 75.91301727]
[206.05915833 64.62878418]
[220.21820068 58.92928696]
[235.44740295 59.94615936]
[248.72300720 67.47750854]
[257.40911865 80.02796936]
[259.78112793 95.10565186]
[255.36802673 109.71685791]
[245.04608154 120.96053314]
[230.86470032 126.60423279]
[215.63961792 125.52738953]
[202.39378357 117.94382477]
[193.75715637 105.35925293]
[178.93940735 107.69035339]
[164.12164307 110.02145386]
[149.30387878 112.35256195]
[134.48612976 114.68366241]
[148.60752869 119.74194336]
[162.72892761 124.80021667]
[176.85031128 129.85848999]
[191.83050537 129.08792114]
[206.24053955 133.25338745]
[218.49916077 141.89781189]
[227.26123047 154.07263184]
[231.56526184 168.44187927]
[230.93896484 183.42880249]
[225.45108032 197.38885498]
[215.70378113 208.79017639]
[202.76667786 216.38169861]
[188.05935669 219.33038330]
[173.19567871 217.31265259]
[159.80667114 210.54994202]
[149.36151123 199.78431702]
[143.00637817 186.19711304]
[141.43879700 171.27641296]
[134.24742126 158.11267090]
[127.05603027 144.94892883]
[119.86464691 131.78520203]
[119.86464691 146.78520203]
[119.86464691 161.78520203]
[119.86464691 176.78520203]
[119.86464691 191.78520203]
[119.86464691 206.78520203]
[119.86464691 221.78520203]
[119.86464691 236.78520203]
[119.86464691 251.78520203]
[119.86464691 266.78518677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 66]
[21 65]
[32 64]
[33 63]
[34 62]
[35 61]
[39 60]
[40 59]
[41 58]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
