%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAxxxxxxxxxxCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.33911896 258.49710083]
[110.33911896 243.49710083]
[110.33911896 228.49710083]
[110.33911896 213.49710083]
[110.33911896 198.49710083]
[110.33911896 183.49710083]
[110.33911896 168.49710083]
[110.33911896 153.49710083]
[110.33911896 138.49710083]
[110.33911896 123.49709320]
[92.81363678 121.12387848]
[83.36990356 109.09452820]
[68.43560028 110.49682617]
[53.50128937 111.89913177]
[37.67913818 124.32120514]
[20.43101883 115.66487885]
[5.56797266 117.68721008]
[-9.29507446 119.70954895]
[-24.15812111 121.73188019]
[-34.45751190 135.83364868]
[-51.43095016 138.11103821]
[-64.55632019 127.64286804]
[-79.37407684 129.97396851]
[-94.19183350 132.30506897]
[-109.00959015 134.63616943]
[-118.31436920 147.12852478]
[-133.37489319 149.28152466]
[-145.22709656 140.33384705]
[-160.04486084 142.66496277]
[-174.86260986 144.99606323]
[-189.68037415 147.32716370]
[-200.24810791 159.39788818]
[-216.26701355 158.51776123]
[-225.44873047 145.36193848]
[-220.74984741 130.02244568]
[-205.77493286 124.26642609]
[-192.01147461 132.50939941]
[-177.19371033 130.17829895]
[-162.37596130 127.84719849]
[-147.55819702 125.51609039]
[-139.02575684 113.36154938]
[-124.03164673 110.78639221]
[-111.34069824 119.81842041]
[-96.52293396 117.48731232]
[-81.70517731 115.15621185]
[-66.88742065 112.82510376]
[-60.80933762 101.42099762]
[-49.08882141 95.53000641]
[-35.92486191 97.51446533]
[-26.18045616 106.86883545]
[-11.31740856 104.84649658]
[3.54563808 102.82416534]
[18.40868568 100.80182648]
[23.88856697 92.08387756]
[33.47743225 87.76267242]
[44.07337570 89.50325775]
[52.09898758 96.96482849]
[67.03329468 95.56252289]
[81.96759796 94.16021729]
[99.87867737 77.68750763]
[124.33499146 91.82569885]
[135.42630005 81.72705078]
[146.51762390 71.62840271]
[157.60893250 61.52975082]
[161.88430786 53.38278580]
[169.03762817 51.33933640]
[180.33663940 41.47361374]
[165.53207397 43.88708878]
[150.54650879 43.22919083]
[136.01040649 39.52760315]
[122.53532410 32.93804932]
[110.68817902 23.73776817]
[100.96739960 12.31382751]
[93.78195190 -0.85315180]
[89.43413544 -15.20921421]
[88.10687256 -30.15037727]
[89.85601044 -45.04804611]
[94.60794830 -59.27545166]
[102.16276550 -72.23403168]
[112.20262909 -83.37858582]
[124.30513763 -92.24025726]
[137.96113586 -98.44622040]
[152.59606934 -101.73537445]
[167.59423828 -101.96935272]
[182.32466125 -99.13829803]
[196.16758728 -93.36132812]
[208.54061890 -84.88147736]
[218.92323303 -74.05551147]
[226.87858582 -61.33890152]
[232.07200623 -47.26664352]
[234.28498840 -32.43078613]
[233.42443848 -17.45549202]
[229.52655029 -2.97079468]
[222.75531006 10.41391087]
[213.39559937 22.13551140]
[201.83625793 31.70416260]
[216.69931030 29.68182945]
[231.56236267 27.65949440]
[246.05795288 23.80233383]
[259.96051025 18.17037773]
[273.86306763 12.53842163]
[287.76562500 6.90646458]
[300.17572021 -4.64452744]
[314.71078491 4.08296108]
[310.34805298 20.46597099]
[293.39758301 20.80902100]
[279.49502563 26.44097710]
[265.59246826 32.07293320]
[251.68991089 37.70489120]
[266.27102661 41.22497559]
[277.95666504 50.62954330]
[284.51300049 64.12081909]
[284.68670654 79.11981201]
[278.44461060 92.75932312]
[266.97991943 102.43200684]
[252.48423767 106.28885651]
[237.72856140 103.59258270]
[225.53356934 94.85861206]
[218.23046875 81.75652313]
[217.21531677 66.79091644]
[222.68215942 52.82260513]
[233.58468628 42.52254105]
[218.72164917 44.54487610]
[203.85859680 46.56721115]
[190.20236206 52.77261734]
[178.90335083 62.63834000]
[167.70758057 72.62106323]
[156.61627197 82.71971893]
[145.52494812 92.81836700]
[134.43363953 102.91701508]
[147.43478394 95.43569183]
[162.43168640 95.13053894]
[175.72639465 102.07680511]
[184.04072571 114.56166840]
[185.32452393 129.50663757]
[179.26123047 143.22656250]
[167.34593201 152.33840942]
[152.51670837 154.59536743]
[138.43013000 149.44093323]
[128.55966187 138.14607239]
[125.33911896 123.49709320]
[125.33911896 138.49710083]
[125.33911896 153.49710083]
[125.33911896 168.49710083]
[125.33911896 183.49710083]
[125.33911896 198.49710083]
[125.33911896 213.49710083]
[125.33911896 228.49710083]
[125.33911896 243.49710083]
[125.33911896 258.49710083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 59]
[13 58]
[14 57]
[16 53]
[17 52]
[18 51]
[19 50]
[22 46]
[23 45]
[24 44]
[25 43]
[28 40]
[29 39]
[30 38]
[31 37]
[61 130]
[62 129]
[63 128]
[64 127]
[66 126]
[67 125]
[96 124]
[97 123]
[98 122]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
