%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCAxxxxxxxxxxCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[143.79634094 323.26913452]
[143.48428345 308.27239990]
[143.17222595 293.27563477]
[142.86018372 278.27886963]
[142.54812622 263.28213501]
[142.23606873 248.28536987]
[141.92401123 233.28862000]
[141.61195374 218.29187012]
[141.29989624 203.29512024]
[137.59373474 188.76017761]
[130.68673706 175.44502258]
[116.45462036 171.20443726]
[109.26026917 157.79937744]
[113.80467987 142.90017700]
[106.89768219 129.58502197]
[99.99068451 116.26985931]
[85.63632965 107.64156342]
[86.50225830 90.91596985]
[79.31974792 77.74739075]
[65.91914368 69.33702850]
[66.61750793 54.45880127]
[64.78530884 69.34648132]
[56.77650452 82.02950287]
[44.12205505 90.08338165]
[29.24098778 91.96853638]
[14.97796154 87.32460022]
[4.05949879 77.03931427]
[-1.42723107 63.07880402]
[-0.43338469 48.11176300]
[6.85105419 34.99929047]
[19.03359413 26.24796295]
[33.78541946 23.53068352]
[48.28657532 27.36688614]
[59.76412582 37.02206421]
[56.05796432 22.48712730]
[52.35180283 7.95219135]
[48.64564133 -6.58274460]
[44.93947983 -21.11768150]
[41.23331833 -35.65261841]
[37.52715683 -50.18755341]
[33.82099915 -64.72248840]
[18.95591736 -62.60668564]
[3.94921684 -62.11051178]
[-11.02315712 -63.23978043]
[-25.78566170 -65.98126221]
[-40.16521454 -70.30279541]
[-53.99322128 -76.15373230]
[-67.10755920 -83.46546936]
[-79.35446167 -92.15226746]
[-90.59034729 -102.11229706]
[-100.68347931 -113.22876740]
[-109.51552582 -125.37134552]
[-116.98292542 -138.39767456]
[-122.99813080 -152.15501404]
[-127.49061584 -166.48208618]
[-130.40771484 -181.21089172]
[-131.71522522 -196.16874695]
[-131.39779663 -211.18029785]
[-129.45918274 -226.06951904]
[-125.92209625 -240.66186523]
[-120.82801056 -254.78620911]
[-114.23664856 -268.27700806]
[-106.22528839 -280.97601318]
[-96.88786316 -292.73440552]
[-86.33384705 -303.41430664]
[-74.68698883 -312.89047241]
[-62.08383179 -321.05181885]
[-48.67214203 -327.80267334]
[-34.60917282 -333.06387329]
[-20.05979729 -336.77371216]
[-5.19460297 -338.88870239]
[9.81212330 -339.38406372]
[24.78443718 -338.25399780]
[39.54679489 -335.51171875]
[53.92611313 -331.18942261]
[67.75380707 -325.33773804]
[80.86775208 -318.02529907]
[93.11418915 -309.33782959]
[104.34954071 -299.37719727]
[114.44207001 -288.26019287]
[123.27346039 -276.11712646]
[130.74015808 -263.09039307]
[136.75462341 -249.33273315]
[141.24633789 -235.00543213]
[144.16264343 -220.27647400]
[145.46934509 -205.31852722]
[145.15112305 -190.30700684]
[143.21170044 -175.41789246]
[139.67382812 -160.82574463]
[134.57897949 -146.70166016]
[127.98689270 -133.21122742]
[119.97485352 -120.51263428]
[110.63679504 -108.75474548]
[100.08220673 -98.07542419]
[88.43483734 -88.59987640]
[75.83123779 -80.43920135]
[62.41918945 -73.68907928]
[48.35593414 -68.42864990]
[52.06209564 -53.89371490]
[55.76825714 -39.35877991]
[59.47441864 -24.82384109]
[63.18058014 -10.28890610]
[66.88674164 4.24603033]
[70.59290314 18.78096581]
[74.29906464 33.31590271]
[79.78609467 47.27629089]
[92.67295837 54.74475098]
[92.48833466 70.56488037]
[99.67084503 83.73346710]
[110.66072083 87.70944977]
[116.14981842 98.02718353]
[113.30583954 109.36286163]
[120.21283722 122.67801666]
[127.11983490 135.99317932]
[141.91711426 140.85922241]
[148.73211670 154.46107483]
[144.00189209 168.53802490]
[150.90888977 181.85317993]
[151.89949036 166.88592529]
[156.66038513 152.66151428]
[164.87910461 140.11351013]
[176.01626587 130.06542969]
[189.34091187 123.17676544]
[203.97853088 119.89960480]
[218.96847534 120.44903564]
[233.32690430 124.78900909]
[246.11148071 132.63467407]
[256.48315430 143.47111511]
[263.76119995 156.58714294]
[267.46795654 171.12193298]
[267.36016846 186.12153625]
[263.44488525 200.60154724]
[255.97908020 213.61160278]
[245.45272827 224.29786682]
[232.55671692 231.95898438]
[218.13737488 236.09213257]
[203.14109802 236.42607117]
[188.55207825 232.93885803]
[175.32781982 225.85939026]
[164.33622742 215.65229797]
[156.29664612 202.98306274]
[156.60870361 217.97981262]
[156.92076111 232.97656250]
[157.23281860 247.97332764]
[157.54487610 262.97006226]
[157.85693359 277.96682739]
[158.16899109 292.96359253]
[158.48104858 307.96032715]
[158.79310608 322.95709229]
[161.38409424 342.16482544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 118]
[11 117]
[14 114]
[15 113]
[16 112]
[18 109]
[19 108]
[21 106]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
