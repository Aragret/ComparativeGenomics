%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxCGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.52243042 425.55563354]
[87.52243042 410.55563354]
[87.52243042 395.55563354]
[87.52243042 380.55563354]
[87.52243042 365.55563354]
[87.52243042 350.55563354]
[87.52243042 335.55563354]
[87.52243042 320.55563354]
[87.52243042 305.55563354]
[87.52243042 290.55563354]
[73.67948914 287.71337891]
[60.66255569 282.19873047]
[48.98220062 274.22579956]
[39.09701157 264.10513306]
[31.39558792 252.23164368]
[26.18124580 239.06922913]
[23.66009712 225.13261414]
[23.93288231 210.96725464]
[26.99095917 197.12792969]
[32.71656036 184.15705872]
[40.88732147 172.56346130]
[51.18491745 162.80233765]
[63.20747375 155.25746155]
[76.48522949 150.22602844]
[90.49891663 147.90699768]
[91.12289429 132.91998291]
[76.65332031 127.16774750]
[65.63145447 115.11739349]
[60.74857330 98.73896790]
[45.81426239 100.14126587]
[30.87995720 101.54357147]
[23.08895493 114.96295929]
[8.88459969 121.20922852]
[-6.27124548 117.88056946]
[-16.55084801 106.25691223]
[-18.00149155 90.80779266]
[-10.06537342 77.47371674]
[4.20590591 71.38189697]
[19.32474899 74.87477875]
[29.47765350 86.60926819]
[44.41196060 85.20696259]
[59.34626770 83.80465698]
[67.20369720 71.02729797]
[61.71666336 57.06690979]
[56.22962952 43.10652161]
[50.74259949 29.14613152]
[45.11064148 15.24357414]
[39.33436966 1.40035689]
[33.55809784 -12.44286060]
[27.78182602 -26.28607941]
[13.05094910 -23.22049904]
[-1.99388969 -22.99842262]
[-16.80883026 -25.62787819]
[-30.85832024 -31.01381493]
[-43.63448334 -38.96153259]
[-54.67546082 -49.18372726]
[-63.58213806 -61.31087112]
[-70.03253937 -74.90457153]
[-73.79348755 -89.47343445]
[-74.72902679 -104.49080658]
[-72.80533600 -119.41380310]
[-68.09195709 -133.70297241]
[-60.75928116 -146.84178162]
[-51.07236862 -158.35527039]
[-39.38140106 -167.82722473]
[-26.10900307 -174.91523743]
[-11.73495865 -179.36308289]
[3.22111869 -181.00997925]
[18.21857452 -179.79638672]
[32.71526337 -175.76617432]
[46.18713379 -169.06504822]
[58.14719009 -159.93522644]
[68.16308594 -148.70675659]
[75.87274170 -135.78555298]
[80.99747467 -121.63869476]
[83.35202026 -106.77758789]
[82.85125732 -91.73944092]
[79.51329803 -77.06788635]
[73.45880127 -63.29328918]
[64.90663910 -50.91358566]
[54.16596603 -40.37630081]
[41.62504196 -32.06235123]
[47.40131760 -18.21913338]
[53.17758942 -4.37591553]
[58.95386124 9.46730232]
[64.46784210 14.46146011]
[64.70298767 23.65909958]
[70.19001770 37.61948776]
[75.67705536 51.57987976]
[81.16408539 65.54026794]
[96.68745422 62.16701508]
[111.73310089 65.24322510]
[123.82278442 73.82913208]
[131.14045715 86.11475372]
[145.84841919 83.16927338]
[160.55638123 80.22378540]
[175.26434326 77.27830505]
[189.97230530 74.33282471]
[197.83245850 69.55058289]
[205.01672363 71.48240662]
[219.78277588 68.84354401]
[234.54884338 66.20467377]
[238.15789795 51.40958786]
[247.47776794 39.36551285]
[260.89373779 32.15915298]
[276.08142090 31.03905869]
[290.40942383 36.19929123]
[301.39535522 46.74581146]
[307.13583374 60.85136795]
[306.63629150 76.07209015]
[299.98327637 89.77088928]
[288.32946777 99.57437897]
[273.69393921 103.78403473]
[258.61239624 101.67050934]
[245.69779968 93.59998322]
[237.18769836 80.97073364]
[222.42164612 83.60959625]
[207.65559387 86.24845886]
[192.91778564 89.04078674]
[178.20982361 91.98626709]
[163.50186157 94.93174744]
[148.79389954 97.87723541]
[134.08593750 100.82271576]
[131.84056091 112.19454193]
[125.91517639 122.15697479]
[116.99462891 129.55859375]
[106.10990906 133.54396057]
[105.48593140 148.53097534]
[120.87717438 152.61410522]
[134.98339844 159.98722839]
[147.11167908 170.28482056]
[156.66696167 182.99774170]
[163.18128967 197.49851990]
[166.33673096 213.07218933]
[165.98086548 228.95159912]
[162.13415527 244.35527039]
[154.98881531 258.52569580]
[144.89918518 270.76675415]
[132.36416626 280.47781372]
[118.00252533 287.18322754]
[102.52243042 290.55563354]
[102.52243042 305.55563354]
[102.52243042 320.55563354]
[102.52243042 335.55563354]
[102.52243042 350.55563354]
[102.52243042 365.55563354]
[102.52243042 380.55563354]
[102.52243042 395.55563354]
[102.52243042 410.55563354]
[102.52243042 425.55563354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 128]
[26 127]
[29 42]
[30 41]
[31 40]
[43 90]
[44 89]
[45 88]
[46 87]
[47 85]
[48 84]
[49 83]
[50 82]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
