%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUxxxxxxxxxxUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.47514343 271.51037598]
[125.85116577 256.52334595]
[125.22718811 241.53633118]
[124.60321045 226.54931641]
[123.97923279 211.56230164]
[123.35525513 196.57528687]
[122.73127747 181.58827209]
[122.10729980 166.60125732]
[118.25013733 152.10565186]
[111.34313965 138.79049683]
[104.43614197 125.47534180]
[97.52914429 112.16018677]
[95.88697815 127.07003021]
[88.75791931 140.26762390]
[77.18875885 149.81510925]
[62.87824249 154.31057739]
[47.92766571 153.09394836]
[34.53228378 146.34385681]
[24.65900803 135.05145264]
[19.75757790 120.87484741]
[20.54769325 105.89566803]
[26.91333771 92.31338501]
[37.91981506 82.12232971]
[51.95098877 76.81892395]
[66.94659424 77.18187714]
[80.70476532 83.15790558]
[91.20494080 93.86895752]
[88.41262054 79.13114929]
[85.62029266 64.39334869]
[69.58935547 54.39293671]
[65.95432281 36.17525482]
[76.55113220 21.30565071]
[73.14815521 6.69675922]
[69.74517822 -7.91213369]
[66.34219360 -22.52102661]
[49.99089050 -23.72992325]
[34.82066727 -29.90107155]
[22.29715729 -40.42594528]
[13.62648201 -54.27600861]
[9.63912392 -70.10319519]
[10.71037388 -86.37113953]
[16.72504997 -101.50430298]
[27.08975792 -114.04057312]
[40.79141235 -122.77251434]
[36.78367233 -137.22720337]
[32.77592850 -151.68188477]
[28.76819038 -166.13658142]
[24.76045036 -180.59126282]
[9.84947681 -178.72558594]
[-5.17423773 -179.05094910]
[-19.99046326 -181.56039429]
[-34.28339005 -186.20043945]
[-47.74836349 -192.87220764]
[-60.09837723 -201.43345642]
[-71.07019043 -211.70170593]
[-80.42993927 -223.45811462]
[-87.97811890 -236.45207214]
[-93.55383301 -250.40661621]
[-97.03824615 -265.02429199]
[-98.35708618 -279.99356079]
[-97.48223114 -294.99530029]
[-94.43234253 -309.70977783]
[-89.27242279 -323.82336426]
[-82.11244965 -337.03518677]
[-73.10504913 -349.06369019]
[-62.44220734 -359.65243530]
[-50.35120773 -368.57574463]
[-37.08976746 -375.64343262]
[-22.94055367 -380.70483398]
[-8.20516300 -383.65203857]
[6.80232143 -384.42227173]
[21.76201439 -382.99908447]
[36.35504913 -379.41284180]
[50.27037430 -373.73995972]
[63.21138382 -366.10137939]
[74.90223694 -356.65988159]
[85.09375000 -345.61672974]
[93.56867981 -333.20733643]
[100.14639282 -319.69616699]
[104.68667603 -305.37121582]
[107.09275818 -290.53787231]
[107.31334686 -275.51223755]
[105.34375000 -260.61465454]
[101.22594452 -246.16261292]
[95.04770660 -232.46417236]
[86.94071960 -219.81132507]
[77.07778168 -208.47375488]
[65.66912842 -198.69313049]
[52.95793533 -190.67793274]
[39.21513748 -184.59899902]
[43.22287750 -170.14431763]
[47.23061752 -155.68963623]
[51.23835754 -141.23493958]
[55.24609756 -126.78025055]
[68.94757080 -126.75398254]
[82.18240356 -123.15935516]
[94.03668213 -116.23768616]
[103.69002533 -106.46027374]
[110.47237396 -94.49629974]
[113.91049194 -81.16706085]
[113.76095581 -67.38956451]
[110.02741241 -54.11344910]
[102.96076965 -42.25551987]
[93.04234314 -32.63645554]
[80.95108795 -25.92400360]
[84.35406494 -11.31511116]
[87.75704956 3.29378104]
[91.16002655 17.90267372]
[101.99092865 21.72131348]
[109.69089508 30.40337563]
[112.24057770 41.84771347]
[108.88639069 53.20809937]
[100.35810089 61.60102081]
[103.15042114 76.33882904]
[105.94274902 91.07662964]
[110.84429932 105.25318909]
[117.75129700 118.56834412]
[124.65829468 131.88349915]
[131.56529236 145.19865417]
[132.56550598 130.23204041]
[137.49436951 116.06495667]
[145.99977112 103.70946503]
[157.47409058 94.04821014]
[171.09765625 87.77138519]
[185.89721680 85.32737732]
[200.81550598 86.89079285]
[214.78683472 92.34993744]
[226.81307983 101.31482697]
[236.03514099 113.14502716]
[241.79420471 126.99541473]
[243.67886353 141.87654114]
[241.55445862 156.72534180]
[235.57278442 170.48104858]
[226.16113281 182.16099548]
[213.99186707 190.93077087]
[199.93432617 196.16387939]
[184.99275208 197.48651123]
[170.23454285 194.80415344]
[156.71397400 188.30842590]
[145.39694214 178.46339417]
[137.09431458 165.97727966]
[137.71829224 180.96429443]
[138.34226990 195.95130920]
[138.96624756 210.93832397]
[139.59022522 225.92533875]
[140.21420288 240.91235352]
[140.83818054 255.89936829]
[141.46215820 270.88638306]
[148.16213989 286.46029663]
[135.05162048 297.20971680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 119]
[10 118]
[11 117]
[12 116]
[27 115]
[28 114]
[29 113]
[32 108]
[33 107]
[34 106]
[35 105]
[44 94]
[45 93]
[46 92]
[47 91]
[48 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
