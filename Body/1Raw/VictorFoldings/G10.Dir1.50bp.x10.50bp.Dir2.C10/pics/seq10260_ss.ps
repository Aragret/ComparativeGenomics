%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUxxxxxxxxxxUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.54132080 361.54550171]
[121.54132080 346.54550171]
[121.54132080 331.54550171]
[121.54132080 316.54550171]
[121.54132080 301.54550171]
[121.54132080 286.54550171]
[121.54132080 271.54550171]
[121.54132080 256.54550171]
[121.54132080 241.54548645]
[121.54132080 226.54548645]
[119.85092163 211.64103699]
[116.49166870 197.02203369]
[113.13240814 182.40303040]
[109.77314758 167.78402710]
[97.05291748 160.12039185]
[93.43789673 145.34249878]
[101.56246185 132.05230713]
[98.20320129 117.43329620]
[86.14076996 108.51714325]
[71.17948914 109.59421539]
[56.21820831 110.67127991]
[54.35417557 125.60485840]
[49.61227036 139.88772583]
[42.17476654 152.97091675]
[32.32753754 164.35153198]
[20.44908714 173.59213257]
[6.99598885 180.33752441]
[-7.51465368 184.32844543]
[-22.52509117 185.41149902]
[-37.45836258 183.54504395]
[-51.74047089 178.80082703]
[-64.82245636 171.36120605]
[-76.20146942 161.51214600]
[-85.44014740 149.63218689]
[-92.18336487 136.17800903]
[-96.17194366 121.66671753]
[-97.25256348 106.65610504]
[-95.38369751 91.72313690]
[-90.63716888 77.44179535]
[-83.19542694 64.36101532]
[-73.34451294 52.98359299]
[-61.46307373 43.74684143]
[-48.00779343 37.00579834]
[-33.49586105 33.01956940]
[-18.48507118 31.94137955]
[-3.55240607 33.81266403]
[10.72816658 38.56150436]
[23.80773926 46.00535965]
[35.18356705 55.85811615]
[44.41839600 67.74105072]
[51.15726089 81.19742584]
[55.14113998 95.70999908]
[70.10242462 94.63293457]
[85.06370544 93.55586243]
[97.65213776 85.39919281]
[104.74854279 72.18401337]
[111.84494781 58.96883011]
[118.94135284 45.75364685]
[123.48863983 31.45951653]
[125.33196259 16.57320976]
[127.17529297 1.68690181]
[128.55931091 -13.24911118]
[129.48272705 -28.22066116]
[130.40614319 -43.19221115]
[131.32955933 -58.16376114]
[116.90560150 -62.52796555]
[103.87720490 -70.10144043]
[92.94696808 -80.47577667]
[84.70435333 -93.09147644]
[79.59386444 -107.26820374]
[77.89111328 -122.24142456]
[79.68791962 -137.20365906]
[84.88738251 -151.34799194]
[93.20910645 -163.91165161]
[104.20431519 -174.21710205]
[117.28003693 -181.70855713]
[131.73112488 -185.98205566]
[146.77825928 -186.80708313]
[161.60993958 -184.13919067]
[175.42634583 -178.12222290]
[187.48234558 -169.08068848]
[197.12779236 -157.50216675]
[203.84252930 -144.01109314]
[207.26440430 -129.33500671]
[207.20890808 -114.26538086]
[203.67903137 -99.61489105]
[196.86512756 -86.17363739]
[187.13465881 -74.66647339]
[175.01239014 -65.71397400]
[161.15203857 -59.79893875]
[146.30110168 -57.24034882]
[145.37768555 -42.26879883]
[144.45428467 -27.29724693]
[143.53086853 -12.32569695]
[145.63510132 -9.42407894]
[146.40388489 -5.34013844]
[145.28857422 -0.72909808]
[142.06159973 3.53022623]
[140.21827698 18.41653442]
[138.37495422 33.30284119]
[147.73472595 21.58130455]
[160.21098328 13.25405216]
[174.62631226 9.10694122]
[189.62030029 9.53133869]
[203.77796936 14.48719311]
[215.76322937 23.50681496]
[224.44500732 35.73900986]
[229.00401306 50.02941132]
[229.00999451 65.02941132]
[224.46237183 79.32344055]
[215.79034424 91.56254578]
[203.81228638 100.59172058]
[189.65856934 105.55885315]
[174.66491699 105.99520111]
[160.24629211 101.85958099]
[147.76341248 93.54227448]
[138.39428711 81.82820129]
[133.02310181 67.82283020]
[132.15653992 52.85005188]
[125.06012726 66.06523132]
[117.96372986 79.28041840]
[110.86732483 92.49559784]
[116.01861572 101.83045197]
[112.82221222 114.07403564]
[116.18147278 128.69303894]
[129.29257202 137.10354614]
[132.49108887 151.97715759]
[124.39215851 164.42475891]
[127.75141144 179.04376221]
[131.11067200 193.66278076]
[134.46992493 208.28178406]
[140.54338074 194.56634521]
[152.21575928 185.14532471]
[166.90409851 182.10351562]
[181.35801697 186.11401367]
[192.37902832 196.28933716]
[197.52828979 210.37782288]
[195.66630554 225.26181030]
[187.20513916 237.64762878]
[174.01715088 244.79444885]
[159.02070618 245.12072754]
[145.53434753 238.55427551]
[136.54132080 226.54548645]
[136.54132080 241.54548645]
[136.54132080 256.54550171]
[136.54132080 271.54550171]
[136.54132080 286.54550171]
[136.54132080 301.54550171]
[136.54132080 316.54550171]
[136.54132080 331.54550171]
[136.54132080 346.54550171]
[136.54132080 361.54550171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[14 128]
[17 125]
[18 124]
[19 54]
[20 53]
[21 52]
[55 122]
[56 121]
[57 120]
[58 119]
[59 100]
[60 99]
[61 98]
[62 94]
[63 93]
[64 92]
[65 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
