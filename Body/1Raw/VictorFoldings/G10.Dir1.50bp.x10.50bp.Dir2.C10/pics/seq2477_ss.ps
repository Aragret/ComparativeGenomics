%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGxxxxxxxxxxCCCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.79230499 273.72848511]
[108.79230499 258.72848511]
[108.79230499 243.72850037]
[108.79230499 228.72850037]
[108.79230499 213.72850037]
[108.79230499 198.72850037]
[108.79230499 183.72850037]
[108.79230499 168.72850037]
[108.79230499 153.72850037]
[108.79230499 138.72850037]
[93.45326996 135.89888000]
[81.65702820 127.75406647]
[70.77819824 138.08126831]
[59.89937592 148.40847778]
[49.02054977 158.73568726]
[38.14172745 169.06288147]
[37.98135757 184.86636353]
[26.63489723 195.86787415]
[10.83400154 195.54043579]
[-0.04694073 184.07829285]
[0.44754156 168.28173828]
[12.02408028 157.52259827]
[27.81452179 158.18406677]
[38.69334793 147.85685730]
[49.57217026 137.52964783]
[60.45099640 127.20244598]
[71.32981873 116.87524414]
[67.49085999 107.06459808]
[66.91194916 96.54550171]
[69.65113831 86.37283325]
[75.43375397 77.56671143]
[66.92266846 65.21513367]
[58.41157532 52.86356354]
[43.24440765 69.59597015]
[14.08590984 71.65917206]
[-0.40968716 67.80200958]
[-14.90528393 63.94485092]
[-29.40088081 60.08769226]
[-43.89647675 56.23052979]
[-58.39207458 52.37337112]
[-73.71778870 56.30186081]
[-84.02748108 45.55199814]
[-100.88877106 47.32208252]
[-107.25734711 31.60974503]
[-93.92205811 21.14044571]
[-80.17032623 31.05640221]
[-65.88143158 26.85202599]
[-54.53491592 37.87777710]
[-40.03931808 41.73493576]
[-25.54372025 45.59209442]
[-11.04812431 49.44925308]
[3.44747233 53.30641174]
[17.94306946 57.16357422]
[25.93298531 44.46864319]
[16.18533325 33.06762314]
[6.43768120 21.66660118]
[-9.19561481 16.71361351]
[-12.45812416 0.64227015]
[0.00634445 -10.01460838]
[15.37541294 -4.29413986]
[17.83870125 11.91894913]
[27.58635330 23.31996918]
[37.33400726 34.72098923]
[51.45880890 29.67223358]
[51.77086639 14.67548084]
[37.31861496 10.31256199]
[24.58001518 2.21128941]
[14.50035095 -9.02716923]
[7.82760286 -22.56884575]
[5.05693197 -37.40885925]
[6.39394093 -52.44598007]
[11.73941517 -66.56435394]
[20.69668388 -78.71630096]
[32.60105896 -88.00007629]
[46.56915665 -93.72675323]
[61.56445312 -95.47137451]
[76.47419739 -93.10447693]
[90.19197845 -86.80171204]
[101.69985962 -77.03076935]
[110.14387512 -64.51673126]
[114.89741516 -50.18820953]
[115.60774994 -35.10848999]
[112.22215271 -20.39657784]
[104.99186707 -7.14419937]
[94.45342255 3.66523290]
[81.38884735 11.22958660]
[66.76761627 14.98753738]
[66.45556641 29.98429108]
[70.76314545 44.35247421]
[79.27423859 56.70404816]
[87.78532410 69.05561829]
[105.51356506 65.55912018]
[123.32443237 71.93650055]
[135.88729858 87.19768524]
[138.98397827 107.57958221]
[153.97666931 107.11154175]
[168.96937561 106.64350128]
[183.96206665 106.17546082]
[198.95475769 105.70741272]
[213.94746399 105.23937225]
[217.08847046 90.49497223]
[223.66741943 76.93101501]
[233.30180359 65.33609009]
[245.43148804 56.38432312]
[259.35128784 50.59614944]
[274.25189209 48.30809021]
[289.26702881 49.65316391]
[303.52371216 54.55317307]
[316.19311523 62.72323990]
[326.53860474 73.68836212]
[333.95874023 86.81105042]
[338.02212524 101.32836151]
[338.49252319 116.39627838]
[335.34255981 131.13877869]
[328.75540161 144.69874573]
[319.11401367 156.28782654]
[306.97888184 165.23223877]
[293.05560303 171.01196289]
[278.15359497 173.29100037]
[263.13928223 171.93681335]
[248.88555908 167.02816772]
[236.22113037 158.85041809]
[225.88227844 147.87902832]
[218.47009277 134.75184631]
[214.41549683 120.23207092]
[199.42280579 120.70011139]
[184.43011475 121.16815186]
[169.43740845 121.63619995]
[154.44471741 122.10424042]
[139.45202637 122.57228088]
[152.83374023 129.34941101]
[167.76290894 130.80546570]
[179.63056946 139.97926331]
[184.80064392 154.06011963]
[181.68911743 168.73384094]
[171.24931335 179.50465393]
[156.67980957 183.07252502]
[142.44450378 178.34432983]
[132.90486145 166.76870728]
[130.98368835 151.89222717]
[123.79230499 138.72850037]
[123.79230499 153.72850037]
[123.79230499 168.72850037]
[123.79230499 183.72850037]
[123.79230499 198.72850037]
[123.79230499 213.72850037]
[123.79230499 228.72850037]
[123.79230499 243.72850037]
[123.79230499 258.72848511]
[123.79230499 273.72848511]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[31 91]
[32 90]
[33 89]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[42 46]
[54 63]
[55 62]
[56 61]
[64 88]
[65 87]
[95 130]
[96 129]
[97 128]
[98 127]
[99 126]
[100 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
