%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.39075470 442.68930054]
[95.39075470 427.68930054]
[95.39075470 412.68930054]
[95.39075470 397.68930054]
[95.39075470 382.68930054]
[95.39075470 367.68930054]
[95.39075470 352.68930054]
[95.39075470 337.68930054]
[95.39075470 322.68930054]
[95.39075470 307.68930054]
[80.33237457 304.34841919]
[66.38204956 297.75152588]
[54.23441696 288.22363281]
[44.49510574 276.23590088]
[37.65053940 262.38211060]
[34.04365158 247.34948730]
[33.85668945 231.88436890]
[37.10202789 216.75534058]
[43.62139130 202.71493530]
[53.09356689 190.46223450]
[65.05023193 180.60810852]
[78.89910126 173.64463806]
[93.95330048 169.92066956]
[93.64125061 154.92391968]
[93.32919312 139.92716980]
[93.01713562 124.93041229]
[78.71942902 114.74526978]
[74.20538330 97.78105164]
[81.55032349 81.83697510]
[74.36781311 68.66839600]
[67.18531036 55.49981308]
[56.85810089 44.62098694]
[44.08074570 36.76356125]
[31.30338860 28.90613747]
[18.60942650 33.52360153]
[5.76662254 30.01784325]
[-2.57264137 19.89208412]
[-3.52253103 7.00431919]
[-16.13365936 -1.11722302]
[-28.74478722 -9.23876476]
[-40.86826324 -2.19126296]
[-54.78024673 -1.07422364]
[-67.74909210 -6.04955578]
[-77.25312042 -16.08853722]
[-81.47087860 -29.18394470]
[-79.63007355 -42.75121307]
[-92.06951141 -51.13335800]
[-104.50894928 -59.51550293]
[-116.94839478 -67.89764404]
[-129.38783264 -76.27978516]
[-145.90191650 -80.11663818]
[-146.78656006 -97.04749298]
[-130.76226807 -102.58448792]
[-121.00569153 -88.71923065]
[-108.56624603 -80.33708191]
[-96.12680817 -71.95494080]
[-83.68737030 -63.57279968]
[-71.24793243 -55.19065475]
[-56.93667221 -62.62971115]
[-40.73250580 -61.85056686]
[-27.04383278 -52.97080231]
[-19.64217567 -38.32460403]
[-20.62324524 -21.84989357]
[-8.01211739 -13.72835159]
[4.59901094 -5.60680914]
[20.83563995 -9.87644863]
[35.44021606 -0.93271327]
[39.16081238 16.12877846]
[51.93817139 23.98620415]
[64.71553040 31.84362984]
[57.89732361 18.48278999]
[54.28023148 3.92543221]
[54.05200577 -11.07283115]
[57.22448730 -25.73350525]
[63.63301086 -39.29561615]
[72.94493103 -51.05521011]
[84.67691803 -60.40190125]
[98.21999359 -66.85054016]
[112.87121582 -70.06640625]
[127.87008667 -69.88257599]
[142.43809509 -66.30858612]
[155.81904602 -59.52996063]
[167.31843567 -49.89854050]
[176.33934021 -37.91424942]
[182.41354370 -24.19914818]
[185.22575378 -9.46512413]
[184.63000488 5.52304077]
[180.65722656 19.98737526]
[173.51359558 33.17709351]
[163.56994629 44.40757751]
[151.34239197 53.09590149]
[137.46562195 58.79108810]
[122.65991211 61.19752502]
[107.69376373 60.19030762]
[93.34401703 55.82170868]
[80.35388947 48.31730270]
[87.53639984 61.48588562]
[94.71891022 74.65447235]
[106.76603699 75.00987244]
[117.34687042 80.78095245]
[124.16842651 90.71704865]
[139.12867737 89.62574005]
[154.08891296 88.53443146]
[169.04916382 87.44311523]
[184.00941467 86.35180664]
[189.56585693 72.13600922]
[200.74586487 61.74515915]
[215.32968140 57.24235535]
[230.42166138 59.52163696]
[243.02526855 68.13045502]
[250.63806152 81.35951233]
[251.74851990 96.58218384]
[246.13613892 110.77598572]
[234.91529846 121.12273407]
[220.31385803 125.56807709]
[205.23098755 123.22937775]
[192.66137695 114.57099152]
[185.10072327 101.31205750]
[170.14047241 102.40336609]
[155.18023682 103.49467468]
[140.21998596 104.58599091]
[125.25973511 105.67729950]
[119.14352417 117.43019104]
[108.01388550 124.61835480]
[108.32594299 139.61511230]
[108.63800049 154.61186218]
[108.95005798 169.60861206]
[123.28517151 172.43058777]
[136.70912170 178.18202209]
[148.63078308 186.60684204]
[158.52575684 197.33139038]
[165.95942688 209.88087463]
[170.60607910 223.70042419]
[172.26316833 238.17965698]
[170.86012268 252.67959595]
[166.46134949 266.56091309]
[159.26330566 279.21203613]
[149.58570862 290.07617188]
[137.85734558 298.67584229]
[124.59703064 304.63369751]
[110.39075470 307.68930054]
[110.39075470 322.68930054]
[110.39075470 337.68930054]
[110.39075470 352.68930054]
[110.39075470 367.68930054]
[110.39075470 382.68930054]
[110.39075470 397.68930054]
[110.39075470 412.68930054]
[110.39075470 427.68930054]
[110.39075470 442.68930054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 126]
[25 125]
[26 124]
[29 98]
[30 97]
[31 96]
[32 70]
[33 69]
[34 68]
[38 65]
[39 64]
[40 63]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
