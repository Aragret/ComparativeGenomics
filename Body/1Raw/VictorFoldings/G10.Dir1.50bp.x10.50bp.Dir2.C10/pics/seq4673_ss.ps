%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAxxxxxxxxxxAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 420.53689575]
[92.50000000 405.53689575]
[92.50000000 390.53689575]
[92.50000000 375.53689575]
[92.50000000 360.53689575]
[92.50000000 345.53689575]
[92.50000000 330.53689575]
[92.50000000 315.53689575]
[92.50000000 300.53689575]
[92.50000000 285.53689575]
[77.80443573 282.63610840]
[63.95278549 276.92211914]
[51.47812653 268.61282349]
[40.86095047 258.02597046]
[32.51063156 245.56716919]
[26.74966240 231.71418762]
[23.80118752 216.99874878]
[23.78036499 201.98603821]
[26.68986511 187.25305176]
[32.41970444 173.36639404]
[40.75139618 160.86050415]
[51.36627960 150.21705627]
[63.85771179 141.84645081]
[77.74665070 136.07194519]
[92.50000000 133.11720276]
[92.50000000 118.11720276]
[77.37333679 103.41519928]
[83.30725098 79.86109161]
[69.78305817 73.37292480]
[56.25886917 66.88476562]
[42.73468018 60.39659882]
[29.21048927 53.90843201]
[15.13897038 48.71301651]
[0.64337343 44.85585785]
[-13.85222340 40.99869919]
[-27.41244507 48.66408539]
[-42.05809402 44.54588318]
[-49.28230286 31.57104492]
[-63.77789688 27.71388626]
[-78.27349854 23.85672569]
[-90.96259308 32.99570084]
[-106.55352020 31.78861618]
[-117.68471527 20.80542374]
[-119.10037231 5.23205185]
[-110.13205719 -7.57823133]
[-95.01433563 -11.57680130]
[-80.88533783 -4.87565565]
[-74.41633606 9.36112976]
[-59.92073822 13.21828938]
[-45.42514420 17.07544899]
[-32.70788956 9.40686989]
[-17.95234680 13.11208344]
[-9.99506378 26.50310135]
[4.50053310 30.36026192]
[18.99612999 34.21742249]
[10.50864315 21.84961700]
[9.90687847 6.86169243]
[17.37550926 -6.14674950]
[30.62250710 -13.18358326]
[45.58253860 -12.08929539]
[57.66455841 -3.19970822]
[63.16075134 10.75707722]
[60.38440704 25.49790192]
[50.18754578 36.49899292]
[35.69865417 40.38424301]
[49.22284317 46.87240982]
[62.74703598 53.36057281]
[76.27122498 59.84873962]
[89.79541779 66.33690643]
[76.50164032 59.38883591]
[66.49458313 48.21481323]
[61.04896545 34.23821640]
[60.85846710 19.23942757]
[65.94735718 5.12903309]
[75.66738892 -6.29554129]
[88.78041077 -13.57900047]
[103.61602783 -15.79355526]
[118.28445435 -12.65710831]
[130.91717529 -4.56919146]
[139.90499878 7.43993378]
[144.10302734 21.84050941]
[142.97650146 36.79814911]
[136.66891479 50.40750122]
[125.98377228 60.93496704]
[112.28446198 67.03896332]
[126.18701172 61.40700912]
[140.08956909 55.77505493]
[153.99212646 50.14309692]
[167.89468384 44.51113892]
[181.79724121 38.87918472]
[184.23599243 27.16485786]
[191.97106934 18.19392967]
[202.97329712 14.14117813]
[214.44171143 15.91408062]
[223.51643372 22.95252609]
[237.64123535 17.90376854]
[251.76605225 12.85501289]
[252.13603210 -2.31823826]
[257.96588135 -16.33171463]
[268.46710205 -27.29020882]
[282.21951294 -33.71167374]
[297.36325073 -34.72765732]
[311.85018921 -30.20076180]
[323.72113037 -20.74320793]
[331.37060547 -7.63405371]
[333.76409912 7.35379601]
[330.57791138 22.19335747]
[322.24291992 34.87770081]
[309.88641357 43.69137573]
[295.17944336 47.44240189]
[280.11108398 45.62348557]
[266.71914673 38.48061752]
[256.81478882 26.97981644]
[242.69000244 32.02857208]
[228.56520081 37.07732773]
[221.80119324 54.03744888]
[204.51669312 60.84503937]
[187.42919922 52.78173828]
[173.52664185 58.41369629]
[159.62408447 64.04565430]
[145.72152710 69.67761230]
[131.81896973 75.30956268]
[117.91641235 80.94152069]
[122.50907898 104.11955261]
[107.50000000 118.11720276]
[107.50000000 133.11720276]
[122.25334930 136.07194519]
[136.14228821 141.84645081]
[148.63372803 150.21705627]
[159.24861145 160.86050415]
[167.58029175 173.36639404]
[173.31013489 187.25305176]
[176.21963501 201.98603821]
[176.19880676 216.99874878]
[173.25033569 231.71418762]
[167.48936462 245.56716919]
[159.13905334 258.02597046]
[148.52186584 268.61282349]
[136.04721069 276.92211914]
[122.19556427 282.63610840]
[107.50000000 285.53689575]
[107.50000000 300.53689575]
[107.50000000 315.53689575]
[107.50000000 330.53689575]
[107.50000000 345.53689575]
[107.50000000 360.53689575]
[107.50000000 375.53689575]
[107.50000000 390.53689575]
[107.50000000 405.53689575]
[107.50000000 420.53689575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 55]
[34 54]
[35 53]
[38 50]
[39 49]
[40 48]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
