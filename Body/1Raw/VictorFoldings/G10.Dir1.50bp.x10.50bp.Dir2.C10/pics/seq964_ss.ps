%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACxxxxxxxxxxUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.72045135 448.92242432]
[93.72045135 433.92242432]
[93.72045135 418.92242432]
[93.72045135 403.92242432]
[93.72045135 388.92242432]
[93.72045135 373.92242432]
[93.72045135 358.92242432]
[93.72045135 343.92242432]
[93.72045135 328.92242432]
[93.72045135 313.92242432]
[78.70614624 310.02694702]
[65.19483948 302.38540649]
[54.10357666 291.50985718]
[46.18686295 278.13208008]
[41.98531342 263.15435791]
[41.78874207 247.58863831]
[45.61618042 232.48805237]
[53.21420670 218.87580872]
[64.07370758 207.67575073]
[77.46399689 199.64973450]
[92.48197174 195.34574890]
[92.16991425 180.34899902]
[91.85785675 165.35224915]
[83.85745239 152.78869629]
[91.30598450 138.83053589]
[90.99392700 123.83378601]
[90.68187714 108.83703613]
[85.04991913 94.93447876]
[74.83643341 83.94881439]
[64.62295532 72.96315002]
[54.40947723 61.97748566]
[42.94512558 69.32894135]
[30.41165924 74.64858246]
[17.16580200 77.78619385]
[3.58434892 78.65365601]
[-9.94655037 77.22740173]
[-23.04236412 73.54906464]
[-35.33111572 67.72427368]
[-46.46393967 59.91959381]
[-56.12498856 50.35779953]
[-64.04040527 39.31147766]
[-69.98606873 27.09528542]
[-73.79394531 14.05697536]
[-75.35684204 0.56749737]
[-74.63142395 -12.98955536]
[-71.63940430 -26.22885323]
[-66.46691895 -38.77428436]
[-59.26200867 -50.26963425]
[-50.23042679 -60.38871002]
[-59.49537659 -72.18534851]
[-68.76032257 -83.98198700]
[-78.02527618 -95.77863312]
[-92.63407898 -101.85263062]
[-94.41030121 -116.64094543]
[-103.67525482 -128.43757629]
[-119.17581940 -127.72206116]
[-132.11807251 -136.28230286]
[-137.52545166 -150.82672119]
[-133.31871033 -165.76268005]
[-121.11541748 -175.34700012]
[-105.60799408 -175.89433289]
[-92.75936890 -167.19419861]
[-87.51008606 -152.59197998]
[-91.87861633 -137.70252991]
[-82.61366272 -125.90589142]
[-68.66754913 -120.67566681]
[-66.22863770 -105.04357910]
[-56.96368408 -93.24694061]
[-47.69873810 -81.45030212]
[-38.43378830 -69.65365601]
[-23.75544167 -77.13420105]
[-7.85610008 -81.46912384]
[8.59801102 -82.47461700]
[24.91698456 -80.10645294]
[40.41614914 -74.46187592]
[54.44481277 -65.77565002]
[66.41355133 -54.41028214]
[75.81900024 -40.84089661]
[82.26502991 -25.63536644]
[85.47937775 -9.43055630]
[85.32521820 7.09435797]
[81.80692291 23.24635315]
[75.07003021 38.34761810]
[65.39514160 51.76400375]
[75.60861969 62.74966812]
[85.82210541 73.73533630]
[96.03558350 84.72100067]
[86.68910217 72.98885345]
[83.12607574 58.41816711]
[86.00379181 43.69679642]
[94.79138184 31.54038811]
[107.86780548 24.19143677]
[122.82086182 23.00559998]
[136.89215088 28.20163155]
[147.48594666 38.82101822]
[152.64802551 52.90480423]
[151.42611694 67.85494995]
[144.04563904 80.91361237]
[131.86807251 89.67185211]
[117.14286041 92.51412201]
[132.04476929 90.80142975]
[146.94667053 89.08874512]
[161.84857178 87.37605286]
[176.75047302 85.66336060]
[181.71073914 71.22873688]
[192.44883728 60.38180161]
[206.83271790 55.27622986]
[222.00643921 56.92573929]
[234.95726013 65.00280762]
[243.11376953 77.90373993]
[244.85650635 93.06703949]
[239.83943176 107.48202515]
[229.05870056 118.28659058]
[214.65483093 123.33547211]
[199.48771667 121.62622833]
[186.56880188 113.49821472]
[178.46316528 100.56526947]
[163.56126404 102.27795410]
[148.65934753 103.99064636]
[133.75744629 105.70333099]
[118.85555267 107.41602325]
[111.86987305 109.57809448]
[105.67862701 108.52497864]
[105.99068451 123.52172852]
[106.30274200 138.51847839]
[114.32546234 152.15470886]
[106.85460663 165.04019165]
[107.16666412 180.03694153]
[107.47872162 195.03369141]
[121.63584137 198.32350159]
[134.57969666 204.91348267]
[145.55433655 214.41368103]
[153.92002869 226.26426697]
[159.19055176 239.76863098]
[161.06152344 254.13426208]
[159.42787170 268.51925659]
[154.38980103 282.08172607]
[146.24661255 294.02899170]
[135.47895813 303.66394043]
[122.72047424 310.42575073]
[108.72045135 313.92242432]
[108.72045135 328.92242432]
[108.72045135 343.92242432]
[108.72045135 358.92242432]
[108.72045135 373.92242432]
[108.72045135 388.92242432]
[108.72045135 403.92242432]
[108.72045135 418.92242432]
[108.72045135 433.92242432]
[108.72045135 448.92242432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 127]
[25 125]
[26 124]
[27 123]
[28 87]
[29 86]
[30 85]
[31 84]
[49 70]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
