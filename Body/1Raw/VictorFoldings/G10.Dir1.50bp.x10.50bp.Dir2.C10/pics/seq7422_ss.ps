%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUxxxxxxxxxxUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 270.73416138]
[92.50000000 255.73416138]
[92.50000000 240.73416138]
[92.50000000 225.73416138]
[92.50000000 210.73416138]
[92.50000000 195.73416138]
[92.50000000 180.73416138]
[92.50000000 165.73416138]
[92.50000000 150.73416138]
[92.50000000 135.73416138]
[88.08221436 134.51298523]
[83.85222626 132.74797058]
[79.87669373 130.46691895]
[69.21506500 141.01820374]
[58.55344391 151.56948853]
[47.89181519 162.12078857]
[46.37085724 178.09158325]
[32.85787201 186.73905945]
[17.71887207 181.42961121]
[12.56719875 166.23619080]
[21.35477448 152.81390381]
[37.34052658 151.45915222]
[48.00215149 140.90786743]
[58.66378021 130.35658264]
[69.32540131 119.80528259]
[67.07965088 115.79338074]
[65.35588074 111.53105164]
[50.45397949 113.24374390]
[35.55207825 114.95643616]
[20.65017319 116.66912079]
[5.74827194 118.38181305]
[-9.15363026 120.09450531]
[-24.05553246 121.80718994]
[-39.10071182 129.62249756]
[-50.77550888 117.32877350]
[-42.19413757 102.70699310]
[-25.76822281 106.90528870]
[-10.86632061 105.19259644]
[4.03558207 103.47991180]
[18.93748474 101.76721954]
[33.83938599 100.05452728]
[48.74128723 98.34184265]
[63.64319229 96.62915039]
[79.28245544 69.93401337]
[109.79680634 64.82611084]
[116.70380402 51.51095200]
[116.19010162 35.69808578]
[128.91880798 27.96314812]
[135.82580566 14.64799309]
[142.73280334 1.33283722]
[149.63980103 -11.98231888]
[156.54679871 -25.29747391]
[163.45379639 -38.61262894]
[150.81280518 -46.70709610]
[138.96025085 -55.91754532]
[127.99437714 -66.16765594]
[118.00603485 -77.37248230]
[109.07798767 -89.43918610]
[101.28424072 -102.26777649]
[94.68935394 -115.75194550]
[89.34798431 -129.77995300]
[85.30439758 -144.23556519]
[82.59209442 -158.99897766]
[81.23355103 -173.94787598]
[81.24002838 -188.95838928]
[82.61147308 -203.90611267]
[85.33651733 -218.66719055]
[89.39257812 -233.11929321]
[94.74604797 -247.14270020]
[101.35256958 -260.62115479]
[109.15738678 -273.44302368]
[118.09584045 -285.50201416]
[128.09384155 -296.69821167]
[139.06857300 -306.93887329]
[150.92906189 -316.13906860]
[163.57704163 -324.22262573]
[176.90769958 -331.12252808]
[190.81057739 -336.78161621]
[205.17045593 -341.15301514]
[219.86836243 -344.20043945]
[234.78250122 -345.89868164]
[249.78926086 -346.23364258]
[264.76431274 -345.20257568]
[279.58355713 -342.81402588]
[294.12420654 -339.08776855]
[308.26574707 -334.05468750]
[321.89099121 -327.75646973]
[334.88708496 -320.24533081]
[347.14630127 -311.58349609]
[358.56701660 -301.84277344]
[369.05465698 -291.10382080]
[378.52230835 -279.45568848]
[386.89147949 -266.99487305]
[394.09283447 -253.82461548]
[400.06671143 -240.05406189]
[404.76361084 -225.79733276]
[408.14459229 -211.17254639]
[410.18164062 -196.30090332]
[410.85791016 -181.30564880]
[410.16775513 -166.31101990]
[408.11691284 -151.44126892]
[404.72238159 -136.81962585]
[400.01226807 -122.56726074]
[394.02563477 -108.80225372]
[386.81207275 -95.63867950]
[378.43133545 -83.18560791]
[368.95291138 -71.54624939]
[358.45535278 -60.81704330]
[347.02557373 -51.08689117]
[334.75836182 -42.43643188]
[321.75531006 -34.93734360]
[308.12423706 -28.65176582]
[293.97802734 -23.63178444]
[279.43392944 -19.91899872]
[264.61248779 -17.54417419]
[249.63648987 -16.52698898]
[234.63003540 -16.87587166]
[219.71748352 -18.58793259]
[205.02241516 -21.64898491]
[190.66658020 -26.03366280]
[176.76895142 -31.70563126]
[169.86195374 -18.39047623]
[162.95495605 -5.07531977]
[156.04795837 8.23983574]
[149.14096069 21.55499077]
[142.23396301 34.87014771]
[143.24169922 49.73062134]
[130.01896667 58.41794968]
[123.11196136 71.73310852]
[127.97458649 76.53507233]
[131.85719299 82.15905762]
[134.62379456 88.40805054]
[136.17744446 95.06313324]
[136.46372986 101.89115906]
[135.47262573 108.65293884]
[133.23883057 115.11158752]
[129.84062195 121.04084778]
[125.39704132 126.23300171]
[120.06374359 130.50616455]
[114.02758026 133.71063232]
[107.50000000 135.73416138]
[107.50000000 150.73416138]
[107.50000000 165.73416138]
[107.50000000 180.73416138]
[107.50000000 195.73416138]
[107.50000000 210.73416138]
[107.50000000 225.73416138]
[107.50000000 240.73416138]
[107.50000000 255.73416138]
[107.50000000 270.73416138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[16 22]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[45 129]
[46 128]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
