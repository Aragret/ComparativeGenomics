%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAxxxxxxxxxxCCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.57974243 251.02986145]
[91.57974243 236.02986145]
[91.57974243 221.02986145]
[91.57974243 206.02986145]
[91.57974243 191.02986145]
[91.57974243 176.02986145]
[91.57974243 161.02986145]
[91.57974243 146.02986145]
[91.57974243 131.02986145]
[91.57974243 116.02986908]
[90.88648987 112.60700226]
[90.96349335 109.35316467]
[91.74320984 106.41291809]
[76.80555725 107.77913666]
[61.88251877 109.29666138]
[46.97562408 110.96533203]
[32.08640671 112.78499603]
[17.21639061 114.75544739]
[2.65787864 118.36788177]
[-11.40840340 123.57746124]
[-25.47468567 128.78703308]
[-39.54096603 133.99661255]
[-53.60725021 139.20619202]
[-67.67353058 144.41577148]
[-81.73981476 149.62535095]
[-95.80609894 154.83493042]
[-100.90093231 169.61927795]
[-114.33352661 177.62547302]
[-129.76142883 175.07325745]
[-139.90005493 163.16769409]
[-139.96224976 147.53022766]
[-129.91864014 135.54440308]
[-114.51153564 132.86955261]
[-101.01567078 140.76864624]
[-86.94939423 135.55906677]
[-72.88311005 130.34948730]
[-58.81682968 125.13991547]
[-44.75054550 119.93033600]
[-30.68426323 114.72075653]
[-16.61798286 109.51117706]
[-2.55170012 104.30159760]
[-2.85570455 89.30467987]
[-17.12155151 84.66942596]
[-31.38739967 80.03417206]
[-47.30695343 83.97115326]
[-58.47971344 71.96691895]
[-53.41209793 56.37040329]
[-37.31723785 53.22595978]
[-26.75214577 65.76832581]
[-12.48629761 70.40357971]
[1.77955043 75.03883362]
[13.63808346 86.80120850]
[15.24594021 99.88542938]
[30.11595345 97.91497803]
[36.37047577 93.89495850]
[45.30694962 96.05844116]
[60.21384430 94.38976288]
[66.54855347 90.49732971]
[75.43934631 92.84148407]
[90.37699127 91.47526550]
[103.84406281 84.86935425]
[114.06786346 73.89328766]
[124.29165649 62.91722488]
[134.51545715 51.94116211]
[124.56910706 40.69724655]
[115.75440216 28.54584694]
[108.15364075 15.60042667]
[101.83779144 1.98185241]
[96.86582184 -12.18271828]
[93.28416443 -26.76103210]
[91.12625122 -41.61697006]
[90.41223145 -56.61182785]
[91.14878082 -71.60559082]
[93.32901764 -86.45827484]
[96.93257904 -101.03118896]
[101.92582703 -115.18827057]
[108.26213074 -128.79733276]
[115.88233948 -141.73132324]
[124.71529388 -153.86946106]
[134.67852783 -165.09841919]
[145.67901611 -175.31335449]
[157.61404419 -184.41888428]
[170.37216187 -192.33000183]
[183.83427429 -198.97282410]
[197.87466431 -204.28533936]
[212.36225891 -208.21795654]
[227.16175842 -210.73393250]
[242.13500977 -211.80978394]
[257.14218140 -211.43548584]
[272.04318237 -209.61450195]
[286.69885254 -206.36384583]
[300.97235107 -201.71388245]
[314.73046875 -195.70800781]
[327.84466553 -188.40231323]
[340.19253540 -179.86500549]
[351.65878296 -170.17579651]
[362.13632202 -159.42517090]
[371.52737427 -147.71347046]
[379.74423218 -135.15007019]
[386.71017456 -121.85228729]
[392.36013794 -107.94425201]
[396.64141846 -93.55584717]
[399.51397705 -78.82140350]
[400.95104980 -63.87850189]
[400.93920898 -48.86666107]
[399.47854614 -33.92604446]
[396.58270264 -19.19615746]
[392.27871704 -4.81452656]
[386.60678101 9.08456421]
[379.61987305 22.37133980]
[371.38317871 34.92174530]
[361.97366333 46.61859131]
[351.47912598 57.35267258]
[339.99758911 67.02375793]
[327.63626099 75.54155731]
[314.51052856 82.82653809]
[300.74298096 88.81067657]
[286.46215820 93.43809509]
[271.80136108 96.66560364]
[256.89749146 98.46305084]
[241.88975525 98.81365967]
[226.91822815 97.71416473]
[212.12271118 95.17481995]
[197.64135742 91.21933746]
[183.60937500 85.88465118]
[170.15777588 79.22057343]
[157.41215515 71.28932953]
[145.49151611 62.16495895]
[135.26771545 73.14102173]
[125.04392242 84.11708832]
[114.82012939 95.09314728]
[126.41871643 85.58143616]
[140.82685852 81.40946198]
[155.71322632 83.25226593]
[168.66912842 90.81167603]
[177.59822083 102.86454010]
[181.05570984 117.46062469]
[178.48216248 132.23820496]
[170.29399109 144.80618286]
[157.81610107 153.13096619]
[143.06747437 155.86558533]
[128.43453979 152.56755066]
[116.28498077 143.77049255]
[108.58467102 130.89782715]
[106.57974243 116.02986908]
[106.57974243 131.02986145]
[106.57974243 146.02986145]
[106.57974243 161.02986145]
[106.57974243 176.02986145]
[106.57974243 191.02986145]
[106.57974243 206.02986145]
[106.57974243 221.02986145]
[106.57974243 236.02986145]
[106.57974243 251.02986145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 60]
[14 59]
[15 57]
[16 56]
[17 54]
[18 53]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[42 51]
[43 50]
[44 49]
[61 131]
[62 130]
[63 129]
[64 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
