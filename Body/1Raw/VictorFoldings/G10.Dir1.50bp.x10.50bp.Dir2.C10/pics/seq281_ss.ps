%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCxxxxxxxxxxAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-22.52193451 275.34179688]
[-31.53946304 287.32864380]
[-40.55699158 299.31546021]
[-49.57452393 311.30230713]
[-58.59205246 323.28912354]
[-67.48440552 335.36911011]
[-76.25061035 347.54095459]
[-85.01681519 359.71279907]
[-93.78302765 371.88464355]
[-102.54923248 384.05645752]
[-96.79675293 398.37124634]
[-99.71904755 413.51928711]
[-110.38362122 424.66696167]
[-125.38745117 428.25704956]
[-139.94285583 423.14398193]
[-149.40528870 410.95928955]
[-150.75527954 395.59112549]
[-143.56208801 381.94335938]
[-130.12101746 374.37097168]
[-114.72106934 375.29025269]
[-105.95486450 363.11840820]
[-97.18865204 350.94659424]
[-88.42244720 338.77474976]
[-79.65624237 326.60290527]
[-78.29048157 319.28988647]
[-70.57888794 314.27160645]
[-61.56135559 302.28475952]
[-52.54382706 290.29794312]
[-43.52629471 278.31109619]
[-34.50876617 266.32427979]
[-62.90577698 238.62928772]
[-85.70102692 206.16731262]
[-102.11066437 170.05462646]
[-111.57041168 131.53300476]
[-113.75499725 91.92707062]
[-128.71524048 90.83575439]
[-143.67549133 89.74444580]
[-158.19271851 97.37217712]
[-171.91073608 88.38619232]
[-170.71763611 72.03050232]
[-155.84077454 65.13043976]
[-142.58418274 74.78419495]
[-127.62393188 75.87551117]
[-112.66368866 76.96681976]
[-111.30422211 66.72994232]
[-109.45227814 56.57060242]
[-107.11218262 46.51248169]
[-104.28938293 36.57902527]
[-100.99044800 26.79337692]
[-97.22308350 17.17834854]
[-92.99606323 7.75634718]
[-88.31922913 -1.45066655]
[-83.20349884 -10.42123508]
[-77.66078186 -19.13445091]
[-71.70400238 -27.57000542]
[-65.34703827 -35.70824051]
[-58.60471725 -43.53018951]
[-51.49273682 -51.01762009]
[-44.02768707 -58.15307999]
[-36.22695541 -64.91994476]
[-28.10872841 -71.30243683]
[-19.69192505 -77.28568268]
[-10.99616337 -82.85574341]
[-2.04170871 -87.99962616]
[7.15056896 -92.70535278]
[16.55924606 -96.96195221]
[26.16239357 -100.75950623]
[35.93762970 -104.08915710]
[45.86217117 -106.94314575]
[55.91289139 -109.31482697]
[66.06636047 -111.19866943]
[76.29891968 -112.59028625]
[86.58671570 -113.48642731]
[96.90577698 -113.88500977]
[107.23204041 -113.78509521]
[117.54145813 -113.18693542]
[127.80998993 -112.09190369]
[138.01370239 -110.50256348]
[148.12882996 -108.42261505]
[158.13177490 -105.85691071]
[167.99923706 -102.81142426]
[177.70822144 -99.29325867]
[187.23609924 -95.31061554]
[196.56065369 -90.87276459]
[205.66015625 -85.99005890]
[214.51341248 -80.67388153]
[223.09976196 -74.93661499]
[231.39923096 -68.79163361]
[239.39244080 -62.25325394]
[247.06077576 -55.33672333]
[254.38636780 -48.05815887]
[261.35214233 -40.43452454]
[267.94186401 -32.48358536]
[274.14016724 -24.22387505]
[279.93261719 -15.67464256]
[285.30569458 -6.85581398]
[290.24691772 2.21205783]
[294.74472046 11.50783825]
[298.78866577 21.00986290]
[302.36926270 30.69598579]
[305.47824097 40.54362869]
[308.10833740 50.52984619]
[310.25338745 60.63136292]
[311.90838623 70.82463074]
[313.06954956 81.08589935]
[313.73410034 91.39124298]
[313.90051270 101.71665955]
[313.56838989 112.03807068]
[312.73852539 122.33142090]
[311.41284180 132.57272339]
[309.59442139 142.73812866]
[307.28753662 152.80390930]
[304.49749756 162.74662781]
[301.23089600 172.54310608]
[297.49526978 182.17051697]
[293.29934692 191.60639954]
[288.65292358 200.82879639]
[283.56680298 209.81619263]
[278.05288696 218.54765320]
[272.12396240 227.00280762]
[265.79388428 235.16197205]
[259.07739258 243.00613403]
[251.99015808 250.51698303]
[244.54869080 257.67703247]
[236.77032471 264.46960449]
[228.67320251 270.87884521]
[220.27618408 276.88983154]
[211.59884644 282.48855591]
[202.66140747 287.66195679]
[193.48471069 292.39797974]
[184.09013367 296.68557739]
[174.49955750 300.51480103]
[164.73536682 303.87667847]
[154.82029724 306.76339722]
[144.77745056 309.16824341]
[134.63024902 311.08557129]
[124.40234375 312.51092529]
[114.11756134 313.44100952]
[103.79987335 313.87362671]
[93.47332764 313.80780029]
[83.16199493 313.24365234]
[72.88990784 312.18249512]
[62.68100357 310.62683105]
[52.55907822 308.58026123]
[42.54771805 306.04757690]
[32.67026138 303.03466797]
[22.94972420 299.54855347]
[13.40876484 295.59735107]
[4.06961775 291.19030762]
[-5.04594898 286.33764648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
