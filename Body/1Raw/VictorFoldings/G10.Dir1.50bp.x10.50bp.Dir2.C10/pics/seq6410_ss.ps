%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCxxxxxxxxxxUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.68263245 292.27651978]
[136.68263245 277.27651978]
[136.68263245 262.27651978]
[136.68263245 247.27653503]
[136.68263245 232.27653503]
[136.68263245 217.27653503]
[136.68263245 202.27653503]
[136.68263245 187.27653503]
[136.68263245 172.27653503]
[136.68263245 157.27653503]
[122.61048126 152.08090210]
[108.53959656 146.88569641]
[98.79193878 158.28672791]
[89.04428864 169.68774414]
[88.85616302 185.72969055]
[76.10877228 195.47050476]
[60.58081436 191.43786621]
[54.18401718 176.72526550]
[61.82545471 162.61895752]
[77.64326477 159.94009399]
[87.39092255 148.53907776]
[97.13857269 137.13804626]
[93.34362030 130.66902161]
[78.34397888 130.77336121]
[85.75370789 117.73096466]
[81.95875549 111.26194000]
[67.25079346 114.20742035]
[52.54283142 117.15290070]
[37.83486938 120.09838867]
[23.12690926 123.04386902]
[13.07043648 135.54374695]
[-2.97120237 135.33073425]
[-12.69223499 122.56825256]
[-8.63551712 107.04656982]
[6.08698463 100.67259979]
[20.18142700 108.33590698]
[34.88938904 105.39042664]
[49.59735107 102.44494629]
[64.30531311 99.49945831]
[79.01327515 96.55397797]
[82.41625214 81.94508362]
[70.52387238 72.80335236]
[58.63149261 63.66161728]
[43.16519547 65.51402283]
[31.23485756 56.07359314]
[29.56418419 41.31742859]
[17.67180443 32.17569351]
[5.77942562 23.03395844]
[-6.11295414 13.89222431]
[-20.95615196 18.41539955]
[-35.61218262 13.31830311]
[-44.44550323 0.56087101]
[-44.05952072 -14.95140266]
[-34.60265732 -27.25373268]
[-19.71126556 -31.61562157]
[-5.11139059 -26.35983467]
[3.58301687 -13.50732899]
[3.02877998 1.99984455]
[14.92115974 11.14157867]
[26.81353951 20.28331375]
[38.70592117 29.42504692]
[53.39548492 27.24508095]
[65.58627319 36.34668732]
[67.77322388 51.76923752]
[79.66560364 60.91097260]
[91.55798340 70.05270386]
[106.55798340 70.05270386]
[118.45036316 60.91097260]
[130.34274292 51.76923752]
[122.53197479 38.94585419]
[116.15347290 25.35313988]
[111.28201294 11.15045929]
[107.97471619 -3.49566817]
[106.27036285 -18.41352463]
[106.18893433 -33.42820358]
[107.73138428 -48.36366653]
[110.87962341 -63.04480743]
[115.59674072 -77.29949188]
[121.82743835 -90.96058655]
[129.49865723 -103.86793518]
[138.52046204 -115.87020111]
[148.78707886 -126.82665253]
[160.17813110 -136.60884094]
[172.56005859 -145.10208130]
[185.78768921 -152.20678711]
[199.70596313 -157.83966064]
[214.15165710 -161.93464661]
[228.95542908 -164.44375610]
[243.94369507 -165.33755493]
[258.94076538 -164.60557556]
[273.77075195 -162.25637817]
[288.25979614 -158.31753540]
[302.23803711 -152.83520508]
[315.54159546 -145.87368774]
[328.01446533 -137.51457214]
[339.51040649 -127.85588837]
[349.89468384 -117.01087952]
[359.04550171 -105.10668182]
[366.85559082 -92.28288269]
[373.23333740 -78.68982697]
[378.10403442 -64.48687744]
[381.41055298 -49.84057617]
[383.11410522 -34.92262650]
[383.19473267 -19.90794373]
[381.65145874 -4.97256231]
[378.50244141 9.70840645]
[373.78454590 23.96283531]
[367.55313110 37.62360001]
[359.88119507 50.53053665]
[350.85876465 62.53231049]
[340.59155273 73.48821259]
[329.19998169 83.26979065]
[316.81759644 91.76236725]
[303.58956909 98.86635590]
[289.67102051 104.49847412]
[275.22509766 108.59268951]
[260.42117310 111.10099792]
[245.43286133 111.99399567]
[230.43585205 111.26119995]
[215.60598755 108.91121674]
[201.11714172 104.97158813]
[187.13919067 99.48851013]
[173.83601379 92.52626801]
[161.36360168 84.16648865]
[149.86816406 74.50718689]
[139.48448181 63.66161728]
[127.59210205 72.80335236]
[115.69972229 81.94508362]
[130.51904297 79.62397003]
[144.86242676 75.23448181]
[159.86048889 75.47509003]
[174.05567932 80.32241058]
[186.06845093 89.30536652]
[194.73132324 101.55095673]
[199.20243835 115.86910248]
[199.04725647 130.86830139]
[194.28085327 145.09086609]
[185.36645508 157.15460205]
[173.17041016 165.88708496]
[158.87400818 170.44027710]
[151.68263245 157.27653503]
[151.68263245 172.27653503]
[151.68263245 187.27653503]
[151.68263245 202.27653503]
[151.68263245 217.27653503]
[151.68263245 232.27653503]
[151.68263245 247.27653503]
[151.68263245 262.27651978]
[151.68263245 277.27651978]
[151.68263245 292.27651978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 22]
[13 21]
[14 20]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[41 66]
[42 65]
[43 64]
[46 61]
[47 60]
[48 59]
[49 58]
[67 128]
[68 127]
[69 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
