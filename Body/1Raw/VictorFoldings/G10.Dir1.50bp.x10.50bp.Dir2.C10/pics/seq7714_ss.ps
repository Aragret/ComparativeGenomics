%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.02262878 460.94274902]
[212.02262878 445.94274902]
[212.02262878 430.94274902]
[212.02262878 415.94274902]
[212.02262878 400.94274902]
[212.02262878 385.94274902]
[212.02262878 370.94274902]
[212.02262878 355.94274902]
[212.02262878 340.94274902]
[212.02262878 325.94274902]
[208.36392212 311.39581299]
[201.26751709 298.18063354]
[186.59849548 302.73831177]
[171.31912231 304.36196899]
[156.01063538 302.98797607]
[141.25569153 298.66687012]
[127.61627197 291.56134033]
[115.61219025 281.94012451]
[105.70136261 270.16799927]
[98.26229095 256.69168091]
[93.57961273 242.02314758]
[91.83323669 226.72000122]
[93.09140778 211.36434937]
[97.30802917 196.54064941]
[104.32438660 182.81347656]
[113.87509918 170.70597839]
[125.59815979 160.67999268]
[118.23192596 147.61329651]
[110.86568451 134.54660034]
[91.76377106 137.37944031]
[72.84655762 129.82904053]
[59.63213730 112.96283722]
[44.63293076 113.11682892]
[29.63372040 113.27082825]
[14.63451004 113.42482758]
[-0.36469948 113.57881927]
[-16.14092255 119.78745270]
[-26.47421265 106.34649658]
[-16.41906929 92.69620514]
[-0.51869643 98.57961273]
[14.48051262 98.42561340]
[29.47972298 98.27162170]
[44.47893143 98.11762238]
[59.47814178 97.96362305]
[62.98730850 83.37987518]
[49.69996643 76.41951752]
[36.41262436 69.45915985]
[20.73253441 72.85243225]
[8.39479637 62.59768677]
[8.86386871 46.56149292]
[21.77992058 37.04544449]
[37.23485947 41.34944153]
[43.37298203 56.17182159]
[56.66032410 63.13217926]
[69.94766235 70.09253693]
[77.17108917 66.74459839]
[84.55471802 64.97855377]
[91.77413940 64.73151398]
[91.46616364 49.73467255]
[91.15818024 34.73783493]
[90.85020447 19.74099731]
[90.54222870 4.74415827]
[75.76942444 1.81529307]
[61.97179413 -4.22122860]
[49.79468918 -13.08306694]
[39.80765152 -24.35573959]
[32.47779083 -37.51200104]
[28.14793968 -51.93650818]
[27.02061272 -66.95460510]
[29.14853477 -81.86386108]
[34.43218231 -95.96695709]
[42.62442780 -108.60424805]
[53.34210587 -119.18467712]
[66.08393097 -127.21337128]
[80.25394440 -132.31481934]
[95.18939209 -134.25041199]
[110.19171143 -132.92962646]
[124.55921936 -128.41423035]
[137.61991882 -120.91542053]
[148.76293945 -110.78392792]
[157.46710205 -98.49362183]
[163.32530212 -84.61933899]
[166.06353760 -69.81001282]
[165.55372620 -54.75829697]
[161.81971741 -40.16819000]
[155.03616333 -26.72209167]
[145.52035522 -15.04890633]
[133.71733093 -5.69460726]
[120.17917633 0.90328676]
[105.53907013 4.43618059]
[105.84704590 19.43301964]
[106.15502167 34.42985535]
[106.46299744 49.42669296]
[106.77097321 64.42353058]
[121.46414185 70.83115387]
[131.95219421 82.95334625]
[136.18037415 98.41520691]
[133.32032776 114.18755341]
[123.93238068 127.18036652]
[131.29861450 140.24705505]
[138.66485596 153.31375122]
[152.56840515 148.64476013]
[167.09095764 146.62417603]
[181.73274231 147.32002258]
[195.99018860 150.70681763]
[209.37318420 156.66659546]
[221.42204285 164.99293518]
[231.72312927 175.39819336]
[239.92321777 187.52336121]
[245.74148560 200.95048523]
[248.97920227 215.21708679]
[249.52647400 229.83210754]
[247.36599731 244.29273987]
[242.57362366 258.10177612]
[235.31561279 270.78472900]
[225.84297180 281.90606689]
[214.48269653 291.08422852]
[221.57910156 304.29940796]
[222.31571960 289.31750488]
[226.55175781 274.92807007]
[234.05004883 261.93670654]
[244.39079285 251.07073975]
[256.99505615 242.93853760]
[271.15716553 237.99539185]
[286.08422852 236.51803589]
[300.94055176 238.58917236]
[314.89437866 244.09288025]
[327.16448975 252.72100830]
[337.06390381 263.99050903]
[344.03842163 277.27041626]
[347.69757080 291.81726074]
[347.83642578 306.81661987]
[344.44729614 321.42871094]
[337.71987915 334.83551025]
[328.03082275 346.28637695]
[315.92257690 355.14019775]
[302.07305908 360.90133667]
[287.25762939 363.24722290]
[272.30575562 362.04653931]
[258.05456543 357.36645508]
[245.30187988 349.46905518]
[234.76170349 338.79641724]
[227.02262878 325.94274902]
[227.02262878 340.94274902]
[227.02262878 355.94274902]
[227.02262878 370.94274902]
[227.02262878 385.94274902]
[227.02262878 400.94274902]
[227.02262878 415.94274902]
[227.02262878 430.94274902]
[227.02262878 445.94274902]
[227.02262878 460.94274902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 118]
[12 117]
[27 101]
[28 100]
[29 99]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[45 55]
[46 54]
[47 53]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
