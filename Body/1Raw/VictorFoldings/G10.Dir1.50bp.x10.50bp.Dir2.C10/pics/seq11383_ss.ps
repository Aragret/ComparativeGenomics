%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACxxxxxxxxxxUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.69097137 420.48739624]
[80.69097137 405.48739624]
[80.69097137 390.48739624]
[80.69097137 375.48739624]
[80.69097137 360.48739624]
[80.69097137 345.48739624]
[80.69097137 330.48739624]
[80.69097137 315.48739624]
[80.69097137 300.48739624]
[80.69097137 285.48739624]
[68.16484833 282.90347290]
[56.34286499 278.00997925]
[45.64689636 270.97958374]
[36.45898819 262.06118774]
[29.10774231 251.57121277]
[23.85655212 239.88230896]
[20.89416695 227.41014099]
[20.32790947 214.59861755]
[22.17978287 201.90406799]
[26.38562965 189.77899170]
[32.79734802 178.65597534]
[41.18811417 168.93218994]
[51.26038361 160.95523071]
[62.65647507 155.01072693]
[74.97124481 151.31207275]
[87.76650238 149.99281311]
[89.32408905 135.07389832]
[90.88166809 120.15498352]
[81.33860779 103.50179291]
[66.69510651 100.25096130]
[52.05160141 97.00013733]
[37.40810013 93.74931335]
[22.76459885 90.49848938]
[28.14927292 104.49867249]
[20.74546623 117.54412079]
[5.96476078 120.09965515]
[-5.38934231 110.29739380]
[-5.01791286 95.30199432]
[6.80692101 86.07402802]
[-7.41985798 81.32021332]
[-21.64663696 76.56639862]
[-35.87341690 71.81258392]
[-50.10019684 67.05876923]
[-66.05196381 70.86312866]
[-77.12443542 58.76633072]
[-71.92720032 43.21252823]
[-55.80672836 40.20213699]
[-45.34638214 52.83198547]
[-31.11960220 57.58580017]
[-16.89282227 62.33961487]
[-2.66604304 67.09342957]
[11.56073570 71.84724426]
[26.01542473 75.85498810]
[40.65892410 79.10581207]
[55.30242538 82.35663605]
[69.94593048 85.60746002]
[84.58943176 88.85829163]
[97.44783020 81.13420105]
[101.45557404 66.67951202]
[105.46331024 52.22482681]
[109.47105408 37.77013779]
[113.47879028 23.31545067]
[103.51718903 7.26036930]
[108.30672455 -10.68838501]
[124.38362122 -19.34464645]
[127.78659821 -33.95353699]
[131.18957520 -48.56243134]
[117.59667969 -55.04682159]
[105.71581268 -64.30203247]
[96.10265350 -75.89519501]
[89.20684052 -89.28405762]
[85.35089111 -103.84241486]
[84.71515656 -118.88934326]
[87.32938385 -133.72105408]
[93.07128906 -147.64387512]
[101.67230988 -160.00657654]
[112.73017120 -170.23094177]
[125.72767639 -177.83877563]
[140.05690002 -182.47422791]
[155.04763794 -183.92048645]
[169.99876404 -182.10992432]
[184.21096802 -177.12722778]
[197.01951599 -169.20541382]
[207.82534790 -158.71504211]
[216.12304688 -146.14672852]
[221.52450562 -132.08834839]
[223.77709961 -117.19741058]
[222.77546692 -102.17041016]
[218.56646729 -87.71017456]
[211.34693909 -74.49304962]
[201.45457458 -63.13720703]
[189.35203552 -54.17379379]
[175.60540771 -48.02203751]
[160.85762024 -44.96966934]
[145.79846191 -45.15945435]
[142.39549255 -30.55056000]
[138.99250793 -15.94166851]
[147.02107239 -7.72992754]
[150.09184265 3.46105528]
[147.32182312 14.85407066]
[139.29273987 23.56285095]
[127.93347931 27.32319069]
[123.92574310 41.77787781]
[119.91799927 56.23256683]
[115.91026306 70.68725586]
[111.90251923 85.14194489]
[120.02406311 97.75307465]
[134.84182739 100.08417511]
[149.65957642 102.41528320]
[164.47734070 104.74638367]
[179.29508972 107.07749176]
[194.11285400 109.40859222]
[204.29205322 97.81604004]
[219.12904358 93.58902740]
[233.88935852 98.07638550]
[243.86306763 109.84621429]
[245.86758423 125.14279938]
[239.26325989 139.08505249]
[226.15753174 147.22406006]
[210.73239136 146.96269226]
[197.90992737 138.38435364]
[191.78175354 124.22634888]
[176.96398926 121.89524841]
[162.14624023 119.56414032]
[147.32847595 117.23303986]
[132.51071167 114.90193176]
[117.69296265 112.57083130]
[105.80058289 121.71256256]
[104.24299622 136.63146973]
[102.68541718 151.55038452]
[119.06316376 157.42578125]
[133.41116333 167.25184631]
[144.79670715 180.38392639]
[152.48118591 195.96267700]
[155.96795654 212.97024536]
[155.03443909 230.29681396]
[149.74636841 246.81300354]
[140.45314026 261.44348145]
[127.76476288 273.23699951]
[112.51178741 281.42822266]
[95.69097137 285.48739624]
[95.69097137 300.48739624]
[95.69097137 315.48739624]
[95.69097137 330.48739624]
[95.69097137 345.48739624]
[95.69097137 360.48739624]
[95.69097137 375.48739624]
[95.69097137 390.48739624]
[95.69097137 405.48739624]
[95.69097137 420.48739624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 130]
[27 129]
[28 128]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
[65 97]
[66 96]
[67 95]
[107 127]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
