%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUxxxxxxxxxxCAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.36899567 113.41703033]
[78.27584076 120.73612976]
[65.18269348 128.05523682]
[52.08953476 135.37434387]
[38.99637985 142.69345093]
[30.72587013 156.18081665]
[15.84118557 155.63726807]
[2.74803162 162.95635986]
[-10.34512329 170.27546692]
[-23.43827820 177.59457397]
[-36.53143311 184.91368103]
[-49.62458801 192.23278809]
[-55.63674927 199.19740295]
[-63.06713867 199.56472778]
[-65.29799652 203.46148682]
[-68.36425781 206.13900757]
[-71.76626587 207.48371887]
[-75.02018738 207.56080627]
[-77.71649933 206.59269714]
[-91.49888611 212.51264954]
[-105.28126526 218.43261719]
[-119.06364441 224.35258484]
[-132.78369141 230.41558838]
[-146.43994141 236.62100220]
[-151.75561523 251.50451660]
[-166.07415771 258.19442749]
[-180.90065002 252.72169495]
[-187.43878174 238.33320618]
[-181.80960083 223.56541443]
[-167.35281372 217.17976379]
[-152.64533997 222.96475220]
[-138.98910522 216.75935364]
[-134.16943359 211.09222412]
[-124.98361206 210.57019043]
[-111.20122528 204.65023804]
[-97.41884613 198.73027039]
[-83.63646698 192.81030273]
[-70.11227417 186.32214355]
[-56.94369125 179.13963318]
[-43.85053635 171.82052612]
[-30.75738335 164.50141907]
[-17.66422844 157.18231201]
[-4.57107401 149.86320496]
[8.52208042 142.54411316]
[15.85608196 129.58024597]
[31.67727470 129.60029602]
[44.77043152 122.28118896]
[57.86358261 114.96208191]
[70.95674133 107.64297485]
[84.04989624 100.32387543]
[91.90731812 87.54651642]
[92.53129578 72.55950165]
[93.15527344 57.57248306]
[93.77925110 42.58546829]
[94.40322876 27.59845161]
[95.02720642 12.61143494]
[86.86454773 2.57027435]
[87.73089600 -9.93845940]
[96.61270142 -18.21015167]
[97.54832458 -33.18094254]
[98.48395538 -48.15173340]
[99.41958618 -63.12252808]
[100.35520935 -78.09331512]
[101.29084015 -93.06410980]
[102.22647095 -108.03490448]
[93.64102173 -124.29128265]
[103.83379364 -138.54286194]
[104.45777130 -153.52987671]
[90.43213654 -159.27941895]
[79.22089386 -169.48156738]
[72.17786407 -182.90437317]
[70.15352631 -197.92694092]
[73.39232635 -212.73526001]
[81.50316620 -225.54112244]
[93.50662231 -234.79815674]
[107.95321655 -239.38856506]
[123.09844971 -238.75799561]
[137.11346436 -232.98260498]
[148.30589294 -222.75981140]
[155.32417297 -209.32406616]
[157.32081604 -194.29777527]
[154.05473328 -179.49546814]
[145.92031860 -166.70457458]
[133.89982605 -157.46966553]
[119.44479370 -152.90589905]
[118.82081604 -137.91888428]
[126.79567719 -128.76962280]
[126.35845184 -116.23855591]
[117.19725800 -107.09927368]
[116.26163483 -92.12847900]
[115.32600403 -77.15769196]
[114.39037323 -62.18689728]
[113.45475006 -47.21610641]
[112.51911926 -32.24531555]
[111.58348846 -17.27452278]
[120.24130249 -2.04158878]
[110.01422119 13.23541260]
[109.39024353 28.22242928]
[108.76626587 43.20944595]
[108.14228821 58.19646072]
[107.51831055 73.18347931]
[106.89433289 88.17049408]
[110.36719513 89.99720001]
[113.32743835 92.85859680]
[128.32662964 93.01463318]
[143.32582092 93.17066956]
[158.32501221 93.32670593]
[162.14938354 90.97393036]
[166.12336731 90.09154510]
[169.75389099 90.54002380]
[172.64744568 92.03043365]
[174.55097961 94.17143250]
[189.48529053 95.57373810]
[204.15806580 88.24967194]
[217.68617249 97.51909637]
[216.15306091 113.84642029]
[201.13586426 120.43549347]
[188.08299255 110.50804138]
[173.14868164 109.10574341]
[158.16896057 108.32589722]
[143.16978455 108.16986084]
[128.17059326 108.01382446]
[113.17140198 107.85778809]
[126.25962067 115.18571472]
[141.04698181 117.70246124]
[154.98767090 123.23936462]
[167.47210693 131.55433655]
[177.95442200 142.28379822]
[185.97625732 154.95857239]
[191.18684387 169.02447510]
[193.35838318 183.86647034]
[192.39587402 198.83555603]
[188.34144592 213.27720642]
[181.37236023 226.55998230]
[171.79333496 238.10304260]
[160.02323914 247.40168762]
[146.57672119 254.04933167]
[132.04173279 257.75527954]
[117.05383301 258.35751343]
[102.26836395 255.82968140]
[88.33183289 250.28231812]
[75.85363007 241.95799255]
[65.37937164 231.22067261]
[57.36704254 218.53987122]
[52.16699600 204.47007751]
[50.00659943 189.62646484]
[50.98031998 174.65809631]
[55.04558182 160.21948242]
[62.02462769 146.94195557]
[71.61229706 135.40606689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 38]
[19 37]
[20 36]
[21 35]
[22 34]
[23 32]
[24 31]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[65 89]
[67 86]
[68 85]
[104 123]
[105 122]
[106 121]
[107 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
