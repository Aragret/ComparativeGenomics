%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCxxxxxxxxxxCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.92915344 113.56498718]
[77.79312897 120.80686951]
[64.65710449 128.04875183]
[51.52108383 135.29063416]
[38.38505936 142.53251648]
[25.24903488 149.77439880]
[14.08205318 159.78932190]
[5.45818663 172.06240845]
[-3.16567969 184.33551025]
[-11.78954601 196.60861206]
[-20.41341209 208.88171387]
[-29.03727913 221.15480042]
[-26.07196808 236.67842102]
[-35.02101517 249.70492554]
[-50.57511139 252.50595093]
[-63.50628281 243.41967773]
[-66.14270020 227.83683777]
[-56.92021942 215.00245667]
[-41.31037521 212.53094482]
[-32.68651199 200.25784302]
[-24.06264305 187.98474121]
[-15.43877792 175.71163940]
[-6.81491137 163.43855286]
[1.80895519 151.16545105]
[-11.83730030 157.39279175]
[-26.59150887 160.09710693]
[-41.55928802 159.11447144]
[-55.83331299 154.50447083]
[-68.54830933 146.54652405]
[-78.93351746 135.72305298]
[-86.35939026 122.69015503]
[-90.37577820 108.23786926]
[-90.73922729 93.24227142]
[-87.42769623 78.61238098]
[-80.64192963 65.23503113]
[-70.79327393 53.92115402]
[-58.47872925 45.35657120]
[-44.44480133 40.06045914]
[-29.54219818 38.35386276]
[-14.67430210 40.34023285]
[-0.74238330 45.89915848]
[11.40902328 54.69366074]
[21.04331589 66.19063568]
[27.57647705 79.69314575]
[30.61247253 94.38269043]
[29.96726799 109.36881256]
[25.67997169 123.74305725]
[18.00715256 136.63838196]
[31.14317703 129.39649963]
[44.27920151 122.15460968]
[57.41522598 114.91272736]
[70.55124664 107.67084503]
[83.68727112 100.42896271]
[85.60842896 85.55249786]
[74.74312592 75.21106720]
[63.87782288 64.86963654]
[47.86870193 63.82680130]
[38.82111740 50.57837677]
[43.67560959 35.28741455]
[58.70822525 29.68383789]
[72.38722229 38.06622696]
[74.21925354 54.00433350]
[85.08455658 64.34576416]
[95.94985962 74.68719482]
[91.37260437 60.40263367]
[86.79534912 46.11806870]
[82.21810150 31.83350754]
[74.33312988 19.07312775]
[67.94179535 5.50290966]
[63.12608719 -8.70303917]
[59.94780350 -23.36245537]
[58.44771194 -38.28725815]
[58.64506149 -53.28596115]
[60.53731918 -68.16612244]
[64.10021210 -82.73683929]
[69.28802490 -96.81116486]
[76.03419495 -110.20852661]
[84.25217438 -122.75702667]
[93.83652496 -134.29566956]
[104.66426849 -144.67642212]
[116.59649658 -153.76608276]
[129.48010254 -161.44804382]
[143.14981079 -167.62373352]
[157.43022156 -172.21392822]
[172.13812256 -175.15972900]
[187.08479309 -176.42335510]
[202.07849121 -175.98857117]
[216.92683411 -173.86096191]
[231.43931580 -170.06784058]
[245.42974854 -164.65785217]
[258.71862793 -157.70042419]
[271.13543701 -149.28480530]
[282.52090454 -139.51898193]
[292.72894287 -128.52825928]
[301.62854004 -116.45361328]
[309.10556030 -103.44999695]
[315.06408691 -89.68423462]
[319.42761230 -75.33294678]
[322.14019775 -60.58025360]
[323.16702271 -45.61544037]
[322.49490356 -30.63050652]
[320.13250732 -15.81770706]
[316.11010742 -1.36709380]
[310.47927856 12.53593063]
[303.31234741 25.71298981]
[294.70120239 37.99502182]
[284.75634766 49.22444534]
[273.60537720 59.25718307]
[261.39135742 67.96452332]
[248.27101135 75.23474121]
[234.41262817 80.97456360]
[219.99406433 85.11034393]
[205.20027161 87.58902740]
[190.22108459 88.37879944]
[175.24865723 87.46954346]
[160.47825623 84.87364960]
[145.95584106 88.62857056]
[131.43342590 92.38349915]
[116.91101074 96.13842773]
[131.45584106 99.80558777]
[146.00065613 103.47274017]
[160.54548645 107.13990021]
[175.09031677 110.80706024]
[190.70967102 105.81031036]
[202.66305542 117.03746033]
[198.65383911 132.93898010]
[182.80636597 137.15673828]
[171.42315674 125.35189056]
[156.87832642 121.68473053]
[142.33349609 118.01757050]
[127.78867340 114.35041046]
[113.24385071 110.68325043]
[124.25000763 120.87464905]
[138.63229370 125.13490295]
[151.75268555 132.40505981]
[162.99006653 142.34092712]
[171.81240845 154.47213745]
[177.80206299 168.22438049]
[180.67546082 182.94659424]
[180.29660034 197.94180298]
[176.68338013 212.50012207]
[170.00688171 225.93234253]
[160.58316040 237.60253906]
[148.85836792 246.95825195]
[135.38757324 253.55654907]
[120.80849457 257.08505249]
[105.81132507 257.37673950]
[91.10607147 254.41780090]
[77.38888550 248.34829712]
[65.30917358 239.45556641]
[55.43880081 228.16062927]
[48.24504471 214.99818420]
[44.06847382 200.59136963]
[43.10681152 185.62223816]
[45.40558243 170.79942322]
[50.85596085 156.82469177]
[59.19992065 144.35960388]
[70.04244232 133.99427795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[54 64]
[55 63]
[56 62]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
