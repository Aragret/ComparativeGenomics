%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGxxxxxxxxxxCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.93112183 399.20993042]
[83.93112183 384.20993042]
[83.93112183 369.20993042]
[83.93112183 354.20993042]
[83.93112183 339.20993042]
[83.93112183 324.20993042]
[83.93112183 309.20993042]
[83.93112183 294.20993042]
[83.93112183 279.20993042]
[83.93112183 264.20993042]
[69.81977081 260.94882202]
[56.78708267 254.61380005]
[45.49351883 245.52220154]
[36.51224899 234.13111877]
[30.30004692 221.01445007]
[27.17407227 206.83398438]
[27.29567719 192.30604553]
[30.66207504 178.16523743]
[37.10631943 165.12739563]
[46.30557632 153.85325623]
[57.79729080 144.91499329]
[71.00246429 138.76725769]
[85.25479126 135.72393799]
[85.56276703 120.72709656]
[80.21479797 106.47327423]
[84.50862885 94.69388580]
[93.31560516 90.11540985]
[90.25720978 75.43051147]
[87.19881439 60.74561691]
[84.14041901 46.06071854]
[80.63125610 31.47696877]
[76.67464447 17.00820160]
[62.31193161 11.43876171]
[54.07891846 -1.37025404]
[54.95660782 -16.39335823]
[64.39918518 -27.88142776]
[60.44257355 -42.35019684]
[56.48596573 -56.81896210]
[52.52935410 -71.28772736]
[41.97733688 -81.94863892]
[27.54995346 -86.05358124]
[13.12256908 -90.15853119]
[-1.30481529 -94.26347351]
[-18.19395828 -92.78253174]
[-24.29240227 -108.60167694]
[-10.77969456 -118.84096527]
[2.80012941 -108.69085693]
[17.22751427 -104.58591461]
[31.65489960 -100.48096466]
[46.08228302 -96.37602234]
[51.82761765 -101.19692993]
[49.22286606 -115.96903992]
[63.31828308 -110.83874512]
[69.06361389 -115.65965271]
[67.52632141 -130.58067322]
[65.98902893 -145.50167847]
[54.01085281 -155.45964050]
[52.66437531 -170.61357117]
[62.23158646 -181.97157288]
[60.69429398 -196.89259338]
[59.15700150 -211.81359863]
[57.61970901 -226.73461914]
[56.08241653 -241.65563965]
[52.06824493 -249.93103027]
[54.66997528 -256.89834595]
[53.43936157 -271.84777832]
[38.81131363 -275.82220459]
[26.42656898 -284.56256104]
[17.78064346 -297.01339722]
[13.91757584 -311.67126465]
[15.30385017 -326.76608276]
[21.77206612 -340.47512817]
[32.54115677 -351.14297485]
[46.31069946 -357.48138428]
[61.41795731 -358.72497559]
[76.03865814 -354.72360229]
[88.40727234 -345.96044922]
[97.03023529 -333.49365234]
[100.86628723 -318.82873535]
[99.45220184 -303.73648071]
[92.95873260 -290.03936768]
[82.16999817 -279.39141846]
[68.38879395 -273.07836914]
[69.61940765 -258.12893677]
[71.00343323 -243.19293213]
[72.54072571 -228.27191162]
[74.07801819 -213.35089111]
[75.61531067 -198.42988586]
[77.15260315 -183.50886536]
[88.83465576 -174.34014893]
[90.60624695 -159.23002625]
[80.91004944 -147.03897095]
[82.44734192 -132.11796570]
[83.98463440 -117.19694519]
[86.52618408 -108.84734344]
[86.93730927 -100.59552765]
[85.40676880 -92.94921875]
[82.23680878 -86.33347321]
[77.81513214 -81.06707764]
[72.58249664 -77.34739685]
[66.99812317 -75.24433899]
[70.95473480 -60.77557373]
[74.91133881 -46.30680466]
[78.86795044 -31.83803749]
[92.84243774 -26.75356674]
[101.24271393 -14.26760483]
[100.67341614 0.94848132]
[91.14340973 13.05159092]
[95.10002136 27.52035904]
[98.02793884 29.58784676]
[100.07331085 33.20531464]
[100.50542450 37.92959976]
[98.82531738 43.00232315]
[101.88371277 57.68722153]
[104.94210815 72.37211609]
[108.00050354 87.05701447]
[117.87621307 98.34729767]
[132.02352905 103.33261871]
[146.17083740 108.31793976]
[160.31816101 113.30326080]
[174.46548462 118.28858185]
[191.41375732 117.85016632]
[196.52679443 134.01472473]
[182.40937805 143.40274048]
[169.48014832 132.43589783]
[155.33283997 127.45057678]
[141.18551636 122.46525574]
[127.03820801 117.47993469]
[112.89089203 112.49461365]
[100.55960846 121.03507233]
[100.25162506 136.03190613]
[115.29379272 140.01972961]
[128.94404602 147.47418213]
[140.41735840 157.96182251]
[149.05502319 170.87489319]
[154.36245728 185.46658325]
[156.03755188 200.89414978]
[153.98788452 216.26763916]
[148.33572388 230.70123291]
[139.41082764 243.36424255]
[127.73116302 253.52893066]
[113.97287750 260.61239624]
[98.93112183 264.20993042]
[98.93112183 279.20993042]
[98.93112183 294.20993042]
[98.93112183 309.20993042]
[98.93112183 324.20993042]
[98.93112183 339.20993042]
[98.93112183 354.20993042]
[98.93112183 369.20993042]
[98.93112183 384.20993042]
[98.93112183 399.20993042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 131]
[24 130]
[27 116]
[28 115]
[29 114]
[30 113]
[31 109]
[32 108]
[36 104]
[37 103]
[38 102]
[39 101]
[40 50]
[41 49]
[42 48]
[43 47]
[54 94]
[55 93]
[56 92]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[65 84]
[66 83]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
