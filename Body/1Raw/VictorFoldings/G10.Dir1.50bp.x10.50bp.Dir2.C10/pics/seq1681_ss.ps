%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGAxxxxxxxxxxACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.05600739 360.67062378]
[106.05600739 345.67062378]
[106.05600739 330.67062378]
[106.05600739 315.67062378]
[106.05600739 300.67062378]
[106.05600739 285.67062378]
[106.05600739 270.67062378]
[106.05600739 255.67062378]
[106.05600739 240.67062378]
[106.05600739 225.67062378]
[87.54351807 214.76054382]
[79.14911652 194.84074402]
[84.33056641 173.72267151]
[101.18903351 159.78707886]
[99.01219940 144.94586182]
[96.83535767 130.10466003]
[94.65852356 115.26345825]
[88.43880463 111.07238770]
[89.64139557 126.02410126]
[78.70158386 136.28668213]
[63.85709381 134.13235474]
[56.28589630 121.18334198]
[61.68913269 107.19030762]
[75.99936676 102.69023895]
[69.77964020 98.49916840]
[55.20693970 102.05393219]
[40.63423920 105.60869598]
[32.97982025 110.71376038]
[25.72140884 109.08247375]
[11.07790756 112.33329773]
[-0.63736182 123.80868530]
[-16.35809135 119.14063263]
[-19.91214371 103.13124084]
[-7.64341259 92.24958801]
[7.82708168 97.68979645]
[22.47058296 94.43897247]
[37.07947540 91.03598785]
[51.65217972 87.48123169]
[66.22488403 83.92646790]
[78.70886230 82.61788177]
[89.43009186 85.96979523]
[96.98579407 92.97229004]
[102.18120575 78.90077209]
[107.37662506 64.82925415]
[112.57203674 50.75773239]
[98.95038605 44.45767975]
[85.87233734 37.09529114]
[73.42057800 28.71711922]
[61.67383575 19.37612915]
[50.70637131 9.13138103]
[40.58753204 -1.95235407]
[31.38129234 -13.80500031]
[23.14585495 -26.35161972]
[15.93328857 -39.51288605]
[9.78919506 -53.20559311]
[4.75241995 -67.34317017]
[0.85480708 -81.83622742]
[-1.87900126 -96.59313202]
[-3.43172073 -111.52059937]
[-3.79353404 -126.52423859]
[-2.96215415 -141.50918579]
[-0.94283718 -156.38072205]
[2.25165009 -171.04479980]
[6.60111046 -185.40873718]
[12.07804489 -199.38168335]
[18.64782715 -212.87530518]
[26.26891899 -225.80430603]
[34.89313507 -238.08692932]
[44.46595383 -249.64553833]
[54.92684937 -260.40704346]
[66.20968628 -270.30337524]
[78.24312592 -279.27200317]
[90.95108795 -287.25622559]
[104.25323486 -294.20556641]
[118.06545258 -300.07604980]
[132.30043030 -304.83059692]
[146.86814880 -308.43911743]
[161.67651367 -310.87881470]
[176.63191223 -312.13427734]
[191.63978577 -312.19757080]
[206.60523987 -311.06826782]
[221.43365479 -308.75350952]
[236.03129578 -305.26794434]
[250.30584717 -300.63360596]
[264.16708374 -294.87979126]
[277.52734375 -288.04287720]
[290.30218506 -280.16607666]
[302.41082764 -271.29925537]
[313.77670288 -261.49838257]
[324.32797241 -250.82548523]
[333.99789429 -239.34800720]
[342.72540283 -227.13853455]
[350.45523071 -214.27426147]
[357.13854980 -200.83650208]
[362.73312378 -186.91024780]
[367.20355225 -172.58349609]
[370.52157593 -157.94688416]
[372.66622925 -143.09289551]
[373.62393188 -128.11549377]
[373.38864136 -113.10933685]
[371.96185303 -98.16931152]
[369.35256958 -83.38986969]
[365.57730103 -68.86446381]
[360.65991211 -54.68492126]
[354.63150024 -40.94089508]
[347.53015137 -27.71927643]
[339.40081787 -15.10366058]
[330.29483032 -3.17380738]
[320.26983643 7.99485731]
[309.38912964 18.33172035]
[297.72158813 27.77142906]
[285.34091187 36.25429916]
[272.32540894 43.72670364]
[258.75735474 50.14139175]
[244.72254944 55.45781326]
[230.30972290 59.64235306]
[215.60998535 62.66855621]
[200.71629333 64.51728821]
[185.72279358 65.17685699]
[170.72427368 64.64310455]
[155.81559753 62.91939163]
[141.09098816 60.01662064]
[126.64355469 55.95314789]
[121.44814301 70.02466583]
[116.25272369 84.09619141]
[111.05731201 98.16770935]
[109.49973297 113.08661652]
[111.67656708 127.92782593]
[113.85340118 142.76902771]
[116.03024292 157.61022949]
[124.83879852 159.47491455]
[132.85890198 163.52473450]
[139.56001282 169.48081970]
[144.50161743 176.93852234]
[147.36227417 185.39494324]
[147.96044922 194.28288269]
[146.26602173 203.00878906]
[142.40162659 210.99246216]
[136.63389587 217.70562744]
[129.35498047 222.70684814]
[121.05600739 225.67062378]
[121.05600739 240.67062378]
[121.05600739 255.67062378]
[121.05600739 270.67062378]
[121.05600739 285.67062378]
[121.05600739 300.67062378]
[121.05600739 315.67062378]
[121.05600739 330.67062378]
[121.05600739 345.67062378]
[121.05600739 360.67062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 130]
[15 129]
[16 128]
[17 127]
[25 39]
[26 38]
[27 37]
[29 36]
[30 35]
[42 126]
[43 125]
[44 124]
[45 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
