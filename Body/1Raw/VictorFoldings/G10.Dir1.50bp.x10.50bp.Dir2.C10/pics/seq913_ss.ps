%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGxxxxxxxxxxACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.53592682 393.16439819]
[69.53592682 378.16439819]
[69.53592682 363.16439819]
[69.53592682 348.16439819]
[69.53592682 333.16439819]
[69.53592682 318.16439819]
[69.53592682 303.16439819]
[69.53592682 288.16439819]
[69.53592682 273.16439819]
[69.53592682 258.16439819]
[55.69844818 255.32373047]
[42.68615341 249.81266785]
[31.00906944 241.84500122]
[21.12532425 231.73083496]
[13.42317295 219.86457825]
[8.20574570 206.70950317]
[5.67912054 192.77964783]
[5.94418335 178.61982727]
[8.99259949 164.78417969]
[14.70706367 151.81460571]
[22.86580849 140.21949768]
[33.15121460 130.45379639]
[45.16217422 122.90114594]
[58.42972183 117.85884857]
[72.43537140 115.52613831]
[68.38205719 101.08416748]
[60.06431198 88.60157776]
[51.74656296 76.11898041]
[43.42881393 63.63639069]
[35.11106873 51.15380096]
[26.79331970 38.67121124]
[18.47557259 26.18861961]
[10.15782547 13.70602894]
[1.84007788 1.22343814]
[-11.46833706 8.17456722]
[-25.44022560 13.67169476]
[-39.91727829 17.65253448]
[-54.73545456 20.07197952]
[-69.72686005 20.90261650]
[-84.72161865 20.13503456]
[-99.54984283 17.77792740]
[-114.04350281 13.85800743]
[-128.03839111 8.41968727]
[-141.37591553 1.52458799]
[-153.90496826 -6.74916315]
[-165.48358154 -16.30781937]
[-175.98056030 -27.04307175]
[-185.27694702 -38.83328247]
[-193.26744080 -51.54486084]
[-199.86148071 -65.03377533]
[-204.98434448 -79.14717865]
[-208.57801819 -93.72516632]
[-210.60174561 -108.60255432]
[-211.03262329 -123.61076355]
[-209.86575317 -138.57974243]
[-207.11436462 -153.33988953]
[-202.80963135 -167.72396851]
[-197.00032043 -181.56896973]
[-189.75227356 -194.71803284]
[-181.14761353 -207.02217102]
[-171.28381348 -218.34196472]
[-160.27267456 -228.54914856]
[-148.23892212 -237.52807617]
[-135.31893921 -245.17700195]
[-121.65911865 -251.40927124]
[-107.41421509 -256.15426636]
[-92.74564362 -259.35818481]
[-77.81961823 -260.98477173]
[-62.80525208 -261.01556396]
[-47.87267685 -259.45025635]
[-33.19108200 -256.30654907]
[-18.92683029 -251.62004089]
[-5.24154234 -245.44387817]
[7.70971727 -237.84803772]
[19.78020096 -228.91854858]
[30.83313942 -218.75663757]
[40.74329758 -207.47741699]
[49.39838028 -195.20867920]
[56.70032120 -182.08947754]
[62.56638718 -168.26841736]
[66.93010712 -153.90214539]
[69.74204254 -139.15341187]
[70.97032166 -124.18933868]
[70.60103607 -109.17948151]
[68.63836670 -94.29392242]
[65.10454559 -79.70130920]
[60.03962708 -65.56700134]
[53.50099564 -52.05114365]
[45.56273651 -39.30688858]
[36.31479263 -27.47863007]
[25.86195946 -16.70039558]
[14.32266903 -7.09430933]
[22.64041710 5.38828135]
[30.95816422 17.87087250]
[39.27591324 30.35346413]
[47.59365845 42.83605576]
[55.91140747 55.31864548]
[64.22915649 67.80123901]
[72.54690552 80.28382874]
[80.86464691 92.76641846]
[98.69195557 81.58351898]
[114.42716217 92.05777740]
[129.42022705 91.60180664]
[144.41329956 91.14584351]
[159.40637207 90.68987274]
[174.39942932 90.23390198]
[178.61720276 75.70581055]
[187.11964417 63.19326782]
[199.07377625 53.92213440]
[213.30845642 48.80069733]
[228.42910767 48.33071136]
[242.95437622 52.55821228]
[255.46122742 61.06903458]
[264.72433472 73.02937317]
[269.83624268 87.26748657]
[270.29608154 102.38845062]
[266.05886841 116.91088867]
[257.53967285 129.41201782]
[245.57312012 138.66712952]
[231.33158875 143.76948547]
[216.21031189 144.21920776]
[201.69071960 139.97224426]
[189.19529724 131.44467163]
[179.94821167 119.47191620]
[174.85540771 105.22697449]
[159.86233521 105.68293762]
[144.86926270 106.13890839]
[129.87620544 106.59487915]
[114.88313293 107.05084229]
[109.02114868 115.34256744]
[98.75187683 119.08679962]
[87.42304993 116.13402557]
[102.82355499 120.20265198]
[116.94141388 127.56483459]
[129.08259583 137.85530090]
[138.65098572 150.56492615]
[145.17762756 165.06590271]
[148.34376526 180.64273071]
[147.99630737 196.52757263]
[144.15536499 211.93804932]
[137.01296997 226.11581421]
[126.92358398 238.36384583]
[114.38646698 248.08071899]
[100.02096558 254.79017639]
[84.53592682 258.16439819]
[84.53592682 273.16439819]
[84.53592682 288.16439819]
[84.53592682 303.16439819]
[84.53592682 318.16439819]
[84.53592682 333.16439819]
[84.53592682 348.16439819]
[84.53592682 363.16439819]
[84.53592682 378.16439819]
[84.53592682 393.16439819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 132]
[26 100]
[27 99]
[28 98]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
