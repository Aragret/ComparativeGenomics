%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUxxxxxxxxxxACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUUUACAGUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[147.73884583 79.33348083]
[135.12773132 87.45502472]
[122.51659393 95.57656097]
[109.90547180 103.69810486]
[98.91979980 113.91158295]
[89.90227509 125.89841461]
[80.88474274 137.88525391]
[71.86721039 149.87208557]
[62.84968567 161.85891724]
[53.83215332 173.84574890]
[44.81462479 185.83258057]
[49.49196243 200.62792969]
[44.54759598 215.33618164]
[31.88274384 224.30172729]
[16.36729431 224.07713318]
[3.96725559 214.74876404]
[-0.54930449 199.90354919]
[4.55432367 185.24978638]
[17.31569099 176.42214966]
[32.82779312 176.81504822]
[41.84532166 164.82821655]
[50.86285019 152.84138489]
[59.88038254 140.85455322]
[68.89791107 128.86772156]
[77.91544342 116.88088989]
[86.93296814 104.89405823]
[79.34306335 91.95600128]
[64.48001862 93.97833252]
[51.84900284 103.50556183]
[38.19477081 97.55482483]
[23.33172607 99.57715607]
[8.46867847 101.59949493]
[-4.15993690 112.06133270]
[-19.43822861 106.10265350]
[-21.64919853 89.85323334]
[-8.51839256 80.02908325]
[6.44634390 86.73645020]
[21.30939102 84.71411133]
[36.17243958 82.69178009]
[47.74034500 73.30920410]
[62.45767975 79.11528778]
[77.32072449 77.09295654]
[94.06322479 80.20896149]
[101.78392792 91.08697510]
[114.39505768 82.96543884]
[127.00617981 74.84389496]
[139.61730957 66.72235107]
[133.76937866 55.40757751]
[128.92678833 43.62789154]
[125.12609863 31.47242165]
[122.39599609 19.03311729]
[120.75704956 6.40407562]
[120.22158051 -6.31917906]
[120.79356384 -19.04041481]
[122.46858978 -31.66342545]
[125.23393250 -44.09274673]
[129.06860352 -56.23439789]
[133.94351196 -67.99656677]
[139.82174683 -79.29032135]
[146.65875244 -90.03028107]
[154.40278625 -100.13526917]
[162.99519348 -109.52889252]
[172.37095642 -118.14015961]
[182.45910645 -125.90399170]
[193.18328857 -132.76174927]
[204.46237183 -138.66160583]
[216.21101379 -143.55902100]
[228.34033203 -147.41700745]
[240.75854492 -150.20648193]
[253.37174988 -151.90640259]
[266.08450317 -152.50398254]
[278.80068970 -151.99479675]
[291.42413330 -150.38275146]
[303.85934448 -147.68011475]
[316.01232910 -143.90740967]
[327.79113770 -139.09323120]
[339.10678101 -133.27407837]
[349.87365723 -126.49399567]
[360.01040649 -118.80434418]
[369.44039917 -110.26334381]
[378.09234619 -100.93563843]
[385.90090942 -90.89183044]
[392.80703735 -80.20793152]
[398.75860596 -68.96476746]
[403.71066284 -57.24742889]
[407.62579346 -45.14455032]
[422.26931763 -48.39537430]
[436.91281128 -51.64619827]
[451.55630493 -54.89702606]
[456.76034546 -59.14267349]
[462.46807861 -59.95090485]
[466.87622070 -57.96506119]
[481.64230347 -60.60392761]
[496.40835571 -63.24279022]
[511.17440796 -65.88165283]
[518.61212158 -87.03963470]
[539.49414062 -98.72579193]
[564.35919189 -93.38235474]
[577.74548340 -100.15046692]
[591.13171387 -106.91857910]
[602.53875732 -119.46118927]
[617.74896240 -111.97212982]
[614.76318359 -95.28316498]
[597.89984131 -93.53229523]
[584.51354980 -86.76418304]
[571.12725830 -79.99607086]
[575.28515625 -65.58385468]
[590.21948242 -66.98615265]
[601.51959229 -78.37420654]
[617.45239258 -76.49661255]
[625.79559326 -62.79369736]
[620.14904785 -47.77716827]
[604.84429932 -42.96641922]
[591.62176514 -52.05184555]
[576.68750000 -50.64954376]
[570.73925781 -41.58506012]
[562.58386230 -34.80484772]
[553.02087402 -30.79516029]
[542.93829346 -29.77960205]
[533.23095703 -31.71041107]
[524.72064209 -36.28425217]
[518.08703613 -42.98020172]
[513.81329346 -51.11560059]
[499.04721069 -48.47673416]
[484.28115845 -45.83787155]
[469.51510620 -43.19900894]
[454.80712891 -40.25352478]
[440.16363525 -37.00269699]
[425.52014160 -33.75187302]
[410.87664795 -30.50104713]
[412.77532959 -12.75937462]
[412.49966431 5.08254385]
[410.05349731 22.75920296]
[405.47293091 40.00752640]
[398.82592773 56.57077408]
[390.21112061 72.20238495]
[379.75646973 86.66961670]
[367.61737061 99.75704193]
[353.97427368 111.26972198]
[339.02999878 121.03614807]
[323.00680542 128.91076660]
[306.14300537 134.77618408]
[288.68948364 138.54484558]
[270.90588379 140.16043091]
[253.05682373 139.59863281]
[235.40792847 136.86756897]
[218.22184753 132.00761414]
[201.75439453 125.09082794]
[186.25073242 116.21991730]
[171.94168091 105.52664185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[27 42]
[28 41]
[30 39]
[31 38]
[32 37]
[86 130]
[87 129]
[88 128]
[89 127]
[92 126]
[93 125]
[94 124]
[95 123]
[98 106]
[99 105]
[100 104]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
