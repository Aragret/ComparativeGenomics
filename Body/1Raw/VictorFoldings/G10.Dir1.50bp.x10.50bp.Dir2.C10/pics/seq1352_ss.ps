%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACxxxxxxxxxxAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.29557800 535.73876953]
[101.29557800 520.73876953]
[101.29557800 505.73880005]
[101.29557800 490.73880005]
[101.29557800 475.73880005]
[101.29557800 460.73880005]
[101.29557800 445.73880005]
[101.29557800 430.73880005]
[101.29557800 415.73880005]
[101.29557800 400.73880005]
[85.35394287 397.06195068]
[70.72628784 389.71679688]
[58.24369812 379.11633301]
[48.61639023 365.85867310]
[42.39332581 350.69326782]
[39.93088531 334.47851562]
[41.37247467 318.13320923]
[46.64017105 302.58441162]
[55.43893051 288.71499634]
[67.27310944 277.31335449]
[81.47438812 269.02868652]
[97.23950195 264.33407593]
[96.35089111 249.36041260]
[95.46228027 234.38674927]
[92.50904083 230.57194519]
[91.95657349 224.84837341]
[94.84626770 218.80621338]
[94.54991150 203.80914307]
[86.56266785 191.23721313]
[94.02580261 177.28688049]
[93.72944641 162.28979492]
[93.43309021 147.29272461]
[79.14647675 142.95179749]
[66.89927673 134.41029358]
[57.88924026 122.50357056]
[52.99752045 108.39604950]
[52.70251465 93.46741486]
[57.03307724 79.17765808]
[65.56568146 66.92426300]
[77.46587372 57.90558624]
[91.56983948 53.00362778]
[91.27348328 38.00655365]
[90.97712708 23.00948334]
[90.68077087 8.01241112]
[87.55462646 2.08912754]
[87.88054657 -3.65179634]
[90.68077087 -7.58030367]
[90.97712708 -22.57737541]
[91.27348328 -37.57444763]
[91.56983948 -52.57152176]
[90.53334808 -67.53566742]
[88.17219543 -82.34866333]
[85.81104279 -97.16166687]
[83.44989014 -111.97466278]
[71.68305969 -118.59394073]
[65.97586823 -130.61375427]
[68.21717834 -143.53176880]
[77.36388397 -152.65115356]
[75.29586029 -167.50791931]
[73.22782898 -182.36466980]
[71.15979767 -197.22143555]
[57.63011932 -204.58715820]
[51.10811996 -218.34640503]
[53.90555954 -233.13282776]
[64.74370575 -243.31480408]
[62.67567444 -258.17156982]
[47.75243759 -260.57748413]
[34.20209122 -267.27670288]
[23.22952461 -277.67355347]
[15.81041050 -290.84350586]
[12.60445023 -305.61553955]
[13.89671612 -320.67614746]
[19.57229996 -334.68612671]
[29.12653542 -346.39968872]
[41.70986176 -354.77532959]
[56.20338440 -359.06826782]
[71.31834412 -358.89675903]
[85.71073151 -354.27609253]
[98.10078430 -345.61709595]
[107.38677979 -333.68975830]
[112.74303436 -319.55462646]
[113.69325256 -304.46859741]
[110.15294647 -289.77310181]
[102.43692780 -276.77484131]
[91.23128510 -266.62963867]
[77.53243256 -260.23959351]
[79.60045624 -245.38284302]
[92.80731964 -238.54786682]
[99.53665161 -225.08755493]
[97.02029419 -210.07019043]
[86.01655579 -199.28945923]
[88.08458710 -184.43270874]
[90.15261841 -169.57594299]
[92.22064209 -154.71919250]
[106.04881287 -145.18957520]
[108.78548431 -128.27870178]
[98.26289368 -114.33581543]
[100.62404633 -99.52281952]
[102.98519897 -84.70981598]
[105.34634399 -69.89682007]
[113.11373138 -82.72911072]
[126.52322388 -89.45112610]
[141.45251465 -87.99638367]
[153.31207275 -78.81210327]
[158.45605469 -64.72170258]
[155.30310059 -50.05681229]
[144.82249451 -39.32569122]
[130.23616028 -35.82727814]
[116.02820587 -40.63704300]
[106.56690979 -52.27516174]
[106.27055359 -37.27809143]
[105.97419739 -22.28101921]
[105.67784119 -7.28394604]
[105.67784119 7.71605396]
[105.97419739 22.71312523]
[106.27055359 37.71019745]
[106.56690979 52.70727158]
[120.85352325 57.04820251]
[133.10072327 65.58969879]
[142.11076355 77.49642944]
[147.00247192 91.60395050]
[147.29748535 106.53258514]
[142.96691895 120.82234192]
[134.43431091 133.07574463]
[122.53412628 142.09442139]
[108.43016052 146.99636841]
[108.72651672 161.99343872]
[109.02287292 176.99052429]
[117.03131866 190.63513184]
[109.54698181 203.51278687]
[109.84333801 218.50985718]
[110.43593597 233.49813843]
[111.32454681 248.47180176]
[112.21315765 263.44546509]
[125.77207947 265.50686646]
[138.65153503 270.20422363]
[150.34466553 277.35043335]
[160.39175415 286.66201782]
[168.39830017 297.77041626]
[174.05047607 310.23663330]
[177.12750244 323.56845093]
[177.51014709 337.23999023]
[175.18551636 350.71243286]
[170.24728394 363.45510864]
[162.89207458 374.96667480]
[153.41156006 384.79452515]
[142.18090820 392.55288696]
[129.64393616 397.93771362]
[116.29557800 400.73880005]
[116.29557800 415.73880005]
[116.29557800 430.73880005]
[116.29557800 445.73880005]
[116.29557800 460.73880005]
[116.29557800 475.73880005]
[116.29557800 490.73880005]
[116.29557800 505.73880005]
[116.29557800 520.73876953]
[116.29557800 535.73876953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[22 134]
[23 133]
[24 132]
[27 131]
[28 130]
[30 128]
[31 127]
[32 126]
[41 117]
[42 116]
[43 115]
[44 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 100]
[52 99]
[53 98]
[54 97]
[58 94]
[59 93]
[60 92]
[61 91]
[65 87]
[66 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
