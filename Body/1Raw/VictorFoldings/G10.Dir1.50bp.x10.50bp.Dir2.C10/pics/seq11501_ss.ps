%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACxxxxxxxxxxAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.84436035 653.16217041]
[83.84436035 638.16217041]
[83.84436035 623.16217041]
[83.84436035 608.16217041]
[83.84436035 593.16217041]
[83.84436035 578.16217041]
[83.84436035 563.16217041]
[83.84436035 548.16217041]
[83.84436035 533.16217041]
[83.84436035 518.16217041]
[69.14879608 515.26135254]
[55.29714584 509.54736328]
[42.82249069 501.23806763]
[32.20531082 490.65121460]
[23.85499382 478.19241333]
[18.09402657 464.33941650]
[15.14555073 449.62399292]
[15.12472725 434.61126709]
[18.03422737 419.87829590]
[23.76406670 405.99163818]
[32.09575653 393.48574829]
[42.71063995 382.84231567]
[55.20207596 374.47167969]
[69.09101105 368.69717407]
[83.84436035 365.74243164]
[83.84436035 350.74243164]
[75.49670410 341.93457031]
[75.41050720 329.39807129]
[84.17998505 319.88491821]
[84.48796082 304.88806152]
[84.79593658 289.89123535]
[74.63790131 281.90585327]
[70.89648438 269.33480835]
[75.15966034 256.72503662]
[86.07685852 248.77366638]
[86.69268036 233.78630066]
[79.48442078 220.75210571]
[87.78176880 207.28123474]
[88.39759064 192.29386902]
[89.01342010 177.30651855]
[89.47534180 162.31362915]
[89.78331757 147.31680298]
[90.09130096 132.31996155]
[90.39927673 117.32312012]
[73.90288544 95.45000458]
[62.92208481 85.23130035]
[51.94128418 75.01258850]
[40.75298691 65.02149200]
[29.36191177 55.26221848]
[17.97083855 45.50294495]
[6.57976532 35.74366760]
[-4.81130838 25.98439407]
[-20.54750824 27.44985771]
[-32.65740585 17.29476357]
[-33.95641327 1.54395008]
[-23.67385292 -10.45790482]
[-7.91018677 -11.59031296]
[3.98228383 -1.18143737]
[4.94796610 14.59332085]
[16.33903885 24.35259628]
[27.73011398 34.11186981]
[39.12118530 43.87114334]
[50.51226044 53.63042068]
[55.31597519 54.15342331]
[59.82425308 57.73997498]
[62.15998840 64.03178406]
[73.14079285 74.25049591]
[84.12159729 84.46920013]
[79.38414001 70.23696899]
[74.64669037 56.00473022]
[69.90924072 41.77249146]
[65.17179108 27.54025650]
[55.19466019 16.33950233]
[48.65348816 2.84086990]
[46.04499817 -11.93058205]
[47.56727600 -26.85313797]
[53.10472107 -40.79360962]
[62.23682785 -52.69338226]
[74.27012634 -61.64881134]
[88.29083252 -66.97984314]
[103.23423767 -68.28163910]
[117.96556854 -65.45535278]
[131.36614990 -58.71561050]
[142.41839600 -48.57420349]
[150.28298950 -35.80125809]
[154.36271667 -21.36672401]
[154.34777832 -6.36673069]
[150.23930359 8.05964947]
[142.34928894 20.81690788]
[131.27641296 30.93660355]
[125.10530090 44.60837555]
[118.93418121 58.28014755]
[112.76306915 71.95191956]
[106.59195709 85.62369537]
[118.56221771 76.58417511]
[130.53247070 67.54465485]
[134.16409302 51.91804123]
[148.70715332 45.14466095]
[163.00547791 52.42046738]
[166.09062195 68.16408539]
[155.59590149 80.29835510]
[139.57199097 79.51490784]
[127.60173798 88.55442810]
[115.63147736 97.59394836]
[130.62316895 97.09467316]
[141.10327148 107.82628632]
[140.24865723 122.80191803]
[128.61575317 132.27162170]
[113.77818298 130.07009888]
[105.39611053 117.63109589]
[105.08813477 132.62794495]
[104.78015900 147.62477112]
[104.47218323 162.62161255]
[107.43898010 171.32757568]
[104.00077057 177.92234802]
[103.38494110 192.90969849]
[102.76911926 207.89704895]
[109.93332672 222.00325012]
[101.68003082 234.40213013]
[101.06420898 249.38948059]
[113.14138031 262.00411987]
[112.40416718 279.11517334]
[99.79277802 290.19921875]
[99.48480225 305.19604492]
[99.17681885 320.19290161]
[108.43499756 336.07736206]
[98.84436035 350.74243164]
[98.84436035 365.74243164]
[113.59771729 368.69717407]
[127.48664856 374.47167969]
[139.97808838 382.84231567]
[150.59297180 393.48574829]
[158.92465210 405.99163818]
[164.65449524 419.87829590]
[167.56399536 434.61126709]
[167.54316711 449.62399292]
[164.59469604 464.33941650]
[158.83372498 478.19241333]
[150.48341370 490.65121460]
[139.86624146 501.23806763]
[127.39157867 509.54736328]
[113.53992462 515.26135254]
[98.84436035 518.16217041]
[98.84436035 533.16217041]
[98.84436035 548.16217041]
[98.84436035 563.16217041]
[98.84436035 578.16217041]
[98.84436035 593.16217041]
[98.84436035 608.16217041]
[98.84436035 623.16217041]
[98.84436035 638.16217041]
[98.84436035 653.16217041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 128]
[26 127]
[29 125]
[30 124]
[31 123]
[35 120]
[36 119]
[38 117]
[39 116]
[40 115]
[41 113]
[42 112]
[43 111]
[44 110]
[45 68]
[46 67]
[47 66]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
