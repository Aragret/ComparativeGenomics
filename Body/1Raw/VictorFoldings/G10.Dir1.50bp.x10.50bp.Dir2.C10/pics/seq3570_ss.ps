%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUxxxxxxxxxxCCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.96912384 117.94566345]
[90.24504089 130.80406189]
[82.52095032 143.66247559]
[74.79686737 156.52087402]
[67.07278442 169.37927246]
[59.34869766 182.23767090]
[51.62461472 195.09608459]
[43.90052795 207.95448303]
[36.17644501 220.81288147]
[28.45235825 233.67127991]
[30.92457581 249.52270508]
[19.96714973 261.24084473]
[3.98567891 259.83651733]
[-4.76022053 246.38702393]
[0.43855771 231.20965576]
[15.59395599 225.94720459]
[23.31804085 213.08880615]
[31.04212570 200.23039246]
[38.76621246 187.37199402]
[46.49029541 174.51359558]
[54.21438217 161.65518188]
[61.93846512 148.79678345]
[69.66255188 135.93838501]
[77.38663483 123.07997894]
[85.11071777 110.22158051]
[75.21016693 121.49007416]
[61.98293686 128.56401062]
[47.11396027 130.54226685]
[32.49728775 127.17285919]
[19.99483490 118.88500214]
[11.19920063 106.73441315]
[7.23079872 92.26887512]
[8.59513664 77.33104706]
[15.11842060 63.82376099]
[25.96969414 53.46761322]
[39.76669312 47.58179474]
[54.75191116 46.91606522]
[69.01649475 51.55522156]
[80.74337006 60.90831757]
[88.43873596 73.78392792]
[91.12232971 88.53954315]
[91.12232971 73.53954315]
[91.12232971 58.53954697]
[91.12232971 43.53954697]
[91.12232971 28.53954697]
[91.12232971 13.53954697]
[83.38503265 -0.26062536]
[91.12232971 -12.98789692]
[91.12232971 -27.98789787]
[91.12232971 -42.98789597]
[88.72989655 -46.78760147]
[87.80622101 -50.75217819]
[88.21691132 -54.38718033]
[89.67713928 -57.29607773]
[91.79821777 -59.22178650]
[93.04509735 -74.16987610]
[94.29196930 -89.11795807]
[85.44493103 -77.00475311]
[74.08572388 -67.20839691]
[60.80396652 -60.23739624]
[46.28905487 -56.45357132]
[31.29439545 -56.05332947]
[16.59829903 -59.05744934]
[2.96357512 -65.30998993]
[-8.90205383 -74.48641968]
[-18.38269424 -86.11042023]
[-24.98624611 -99.57865143]
[-28.36994934 -114.19201660]
[-28.35816574 -129.19201660]
[-24.95150948 -143.80004883]
[-18.32680702 -157.25788879]
[-8.82791615 -168.86697388]
[3.05211520 -178.02474976]
[16.69664574 -184.25587463]
[31.39744377 -187.23689270]
[46.39145660 -186.81309509]
[60.90040588 -183.00646973]
[74.17119598 -176.01461792]
[85.51499176 -166.20042419]
[94.34299469 -154.07333374]
[100.19696808 -140.26280212]
[102.77307129 -125.48565674]
[101.93724060 -110.50698090]
[110.44833374 -122.85855103]
[111.90744019 -138.61233521]
[125.50016022 -144.70227051]
[134.01124573 -157.05383301]
[132.53257751 -173.02859497]
[144.19960022 -184.04043579]
[160.06234741 -181.64199829]
[167.95230103 -167.67317200]
[161.81695557 -152.84963989]
[146.36282349 -148.54273987]
[137.85173035 -136.19117737]
[137.00138855 -121.32086182]
[122.79990387 -114.34746552]
[114.28881073 -101.99588776]
[109.24005890 -87.87108612]
[107.99317932 -72.92300415]
[106.74630737 -57.97491455]
[106.12232971 -42.98789597]
[106.12232971 -27.98789787]
[106.12232971 -12.98789692]
[113.85963440 -0.26062536]
[106.12232971 13.53954697]
[106.12232971 28.53954697]
[106.12232971 43.53954697]
[106.12232971 58.53954697]
[106.12232971 73.53954315]
[106.12232971 88.53954315]
[115.07424164 89.13005829]
[123.83021545 95.92575836]
[138.05699158 100.67958069]
[152.28376770 105.43339539]
[166.51055908 110.18721008]
[180.83314514 114.64402008]
[195.24536133 118.80191040]
[209.65757751 122.95980072]
[226.55204773 121.54087830]
[232.59237671 137.38230896]
[219.04216003 147.57191467]
[205.49969482 137.37200928]
[191.08747864 133.21412659]
[176.67526245 129.05624390]
[172.08471680 130.57360840]
[166.49177551 129.17706299]
[161.75674438 124.41398621]
[147.52995300 119.66017151]
[133.30317688 114.90635681]
[119.07640076 110.15254211]
[129.28247070 121.14508820]
[139.48854065 132.13763428]
[149.69462585 143.13017273]
[163.27445984 149.50105286]
[174.23043823 159.74636841]
[181.49641418 172.86907959]
[184.36529541 187.59217834]
[182.55787659 202.48287964]
[176.25006104 216.09213257]
[166.05569458 227.09553528]
[152.96682739 234.42230225]
[138.25720215 237.35945129]
[123.35826874 235.62113953]
[109.71990204 229.37652588]
[98.66932678 219.23332214]
[91.28191376 206.17858887]
[88.27655792 191.48274231]
[89.94573212 176.57589722]
[96.12749481 162.90795898]
[96.74137115 147.92053223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[41 110]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
[55 100]
[56 99]
[57 98]
[83 97]
[84 96]
[86 94]
[87 93]
[112 130]
[113 129]
[114 128]
[115 127]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
