%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUAxxxxxxxxxxCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.57361603 468.75201416]
[102.57361603 453.75201416]
[102.57361603 438.75201416]
[102.57361603 423.75201416]
[102.57361603 408.75201416]
[102.57361603 393.75201416]
[102.57361603 378.75201416]
[102.57361603 363.75201416]
[102.57361603 348.75201416]
[102.57361603 333.75201416]
[86.63871002 330.07797241]
[72.01601410 322.73892212]
[59.53546143 312.14715576]
[49.90641022 298.89968872]
[43.67733765 283.74453735]
[41.20458984 267.53863525]
[42.63200760 251.19932556]
[47.88254929 235.65234375]
[56.66245651 221.77952576]
[68.47767639 210.36862183]
[82.66166687 202.06871033]
[98.41297913 197.35317993]
[97.50147247 182.38090515]
[96.58995819 167.40861511]
[95.67844391 152.43634033]
[94.76692963 137.46406555]
[85.00604248 134.72927856]
[76.32185364 129.50062561]
[69.33796692 122.15357208]
[64.55587006 113.21569824]
[62.31896973 103.32883453]
[47.41207504 101.66015625]
[32.50518036 99.99147797]
[25.79055214 113.58152771]
[14.83064938 124.05322266]
[0.94893229 130.14204407]
[-14.17831326 131.11274719]
[-28.72439957 126.84809875]
[-40.93281555 117.86308289]
[-49.32933426 105.24269104]
[-52.90003586 90.51089478]
[-51.21374130 75.44662476]
[-44.47407913 61.86896896]
[-33.49489975 51.41749191]
[-19.60198402 45.35426331]
[-4.47297573 44.41144562]
[10.06522655 48.70289230]
[22.25706291 57.71038437]
[30.63031006 70.34622955]
[34.17385864 85.08457947]
[49.08075333 86.75325775]
[63.98764801 88.42193604]
[67.75794983 78.76689148]
[74.11614227 70.31693268]
[82.68203735 63.76437759]
[92.89093781 59.68279266]
[104.03045654 58.47813416]
[115.29007721 60.35119629]
[118.01115417 45.60007095]
[112.90565491 30.62527847]
[122.82337189 19.51275826]
[125.54444885 4.76163149]
[116.66185760 -5.41002607]
[115.29828644 -18.64921951]
[121.73001099 -30.07800484]
[133.40240479 -35.61554718]
[136.42187500 -50.30849457]
[139.44136047 -65.00144196]
[142.46083069 -79.69438934]
[145.48031616 -94.38734436]
[131.86534119 -100.86006165]
[120.19547272 -110.40351868]
[111.14916992 -122.46286774]
[105.25237274 -136.33699036]
[102.84791565 -151.21925354]
[104.07558441 -166.24444580]
[108.86401367 -180.53900146]
[116.93479919 -193.27186584]
[127.81872559 -203.70275879]
[140.88301086 -211.22525024]
[155.36811829 -215.40199280]
[170.43190002 -215.99014282]
[185.19857788 -212.95550537]
[198.80961609 -206.47453308]
[210.47369385 -196.92399597]
[219.51268005 -184.85917664]
[225.40106201 -170.98147583]
[227.79650879 -156.09776306]
[226.55972290 -141.07331848]
[221.76263428 -126.78166199]
[213.68412781 -114.05369568]
[202.79386902 -103.62940216]
[189.72503662 -96.11483765]
[175.23739624 -91.94688416]
[160.17326355 -91.36786652]
[157.15377808 -76.67491150]
[154.13430786 -61.98196411]
[151.11482239 -47.28901672]
[148.09535217 -32.59606934]
[157.94027710 -18.99369812]
[154.86885071 -2.14305592]
[140.29557800 7.48270750]
[137.57449341 22.23383522]
[142.87463379 36.15352631]
[132.76228333 48.32114792]
[130.04121399 63.07227325]
[140.04045105 74.25328827]
[155.00273132 73.19009399]
[169.96499634 72.12689972]
[176.61009216 58.27994156]
[189.29745483 49.62392426]
[204.61422729 48.48727417]
[218.44029236 55.17574310]
[227.05648804 67.89016724]
[228.14512634 83.21042633]
[221.41334534 97.01545715]
[208.67198181 105.59176636]
[193.34838867 106.63237000]
[179.56452942 99.85736084]
[171.02819824 87.08917236]
[156.06591797 88.15236664]
[141.10365295 89.21556091]
[140.95118713 105.56887817]
[134.71411133 120.19560242]
[123.66541290 130.99230957]
[109.73920441 136.55255127]
[110.65071869 151.52482605]
[111.56223297 166.49711609]
[112.47374725 181.46939087]
[113.38526154 196.44166565]
[126.95540619 198.48411560]
[139.84912109 203.16645813]
[151.55847168 210.30195618]
[161.62258911 219.60728455]
[169.64591980 230.71376038]
[175.31362915 243.18197632]
[178.40409851 256.51916504]
[178.79747009 270.19866943]
[176.48036194 283.68075562]
[171.54629517 296.43389893]
[164.19190979 307.95574951]
[154.70915222 317.79290771]
[143.47366333 325.55874634]
[130.92991638 330.94866943]
[117.57361603 333.75201416]
[117.57361603 348.75201416]
[117.57361603 363.75201416]
[117.57361603 378.75201416]
[117.57361603 393.75201416]
[117.57361603 408.75201416]
[117.57361603 423.75201416]
[117.57361603 438.75201416]
[117.57361603 453.75201416]
[117.57361603 468.75201416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[31 52]
[32 51]
[33 50]
[58 106]
[59 105]
[61 103]
[62 102]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
