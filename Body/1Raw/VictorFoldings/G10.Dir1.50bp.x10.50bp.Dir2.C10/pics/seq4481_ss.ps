%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACxxxxxxxxxxUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.60044861 452.53805542]
[176.60044861 437.53805542]
[176.60044861 422.53805542]
[176.60044861 407.53805542]
[176.60044861 392.53805542]
[176.60044861 377.53805542]
[176.60044861 362.53805542]
[176.60044861 347.53805542]
[176.60044861 332.53805542]
[176.60044861 317.53805542]
[174.73283386 302.65478516]
[171.02667236 288.11984253]
[166.42111206 273.84436035]
[160.93408203 259.88397217]
[155.44703674 245.92359924]
[149.96000671 231.96321106]
[135.66979980 221.82467651]
[138.47183228 203.65524292]
[132.69555664 189.81202698]
[126.91928864 175.96881104]
[121.14302063 162.12559509]
[115.36674500 148.28237915]
[103.32505798 139.51612854]
[105.15142822 123.80069733]
[99.37516022 109.95748138]
[94.92504120 111.35554504]
[89.54415131 110.61381531]
[84.25891876 107.32002258]
[80.23896790 101.53781128]
[66.45658875 95.61784363]
[52.67420578 89.69788361]
[38.89182281 83.77791595]
[33.58026505 84.41580963]
[29.03223801 83.04912567]
[25.89335442 80.31981659]
[24.45272255 77.03469086]
[11.06643677 70.26657867]
[-2.31984758 63.49846268]
[-15.70613289 56.73034668]
[-29.09241676 49.96223450]
[-43.94353485 54.66138840]
[-57.42271805 47.60686493]
[-61.81111908 33.41963577]
[-75.19740295 26.65151978]
[-88.44428253 34.55872345]
[-103.86244202 34.02604294]
[-116.53202057 25.22346306]
[-122.41018677 10.95984936]
[-119.62124634 -4.21332979]
[-109.05514526 -15.45436764]
[-94.08347321 -19.17629051]
[-79.48365021 -14.19144535]
[-69.91442108 -2.09047890]
[-68.42929077 13.26523495]
[-55.04300690 20.03334999]
[-41.01601791 15.15695286]
[-27.34400940 21.83009148]
[-22.32430267 36.57594681]
[-8.93801785 43.34406281]
[4.44826698 50.11217880]
[17.83455276 56.88029099]
[31.22083664 63.64840698]
[44.81178665 69.99553680]
[58.59416962 75.91549683]
[72.37654877 81.83546448]
[86.15893555 87.75542450]
[100.23045349 82.56001282]
[106.85894775 69.10404205]
[113.48744965 55.64807892]
[100.26165771 62.72469711]
[85.28079987 63.48224258]
[71.40861511 57.77590179]
[61.29689789 46.69649506]
[56.87860870 32.36196518]
[58.99835205 17.51249886]
[67.25090790 4.98671436]
[80.05873108 -2.82095766]
[94.97347260 -4.41800451]
[109.14402771 0.50086498]
[119.86156464 10.99536037]
[125.07731628 25.05935478]
[123.79468536 40.00296402]
[133.54232788 28.60194397]
[143.28999329 17.20092201]
[146.51773071 8.58503628]
[153.36096191 5.66684294]
[163.34368896 -5.52892256]
[173.32641602 -16.72468948]
[169.09146118 -31.55940247]
[173.57092285 -46.32212830]
[185.33540344 -56.30213165]
[200.63090515 -58.31483459]
[214.57670593 -51.71798706]
[222.72273254 -38.61661911]
[222.46961975 -23.19133186]
[213.89814758 -10.36427784]
[199.74342346 -4.22852182]
[184.52218628 -6.74196196]
[174.53945923 4.45380354]
[164.55673218 15.64956951]
[154.69100952 26.94857407]
[144.94335938 38.34959412]
[135.19570923 49.75061798]
[126.94341278 62.27657700]
[120.31491852 75.73254395]
[113.68641663 89.18850708]
[113.21837616 104.18120575]
[118.99464417 118.02442169]
[131.44949341 127.78082275]
[129.20996094 142.50610352]
[134.98623657 156.34931946]
[140.76251221 170.19253540]
[146.53878784 184.03575134]
[152.31504822 197.87896729]
[163.95977783 203.52293396]
[168.46777344 215.22323608]
[163.92039490 226.47616577]
[169.40744019 240.43656921]
[174.89447021 254.39695740]
[180.38150024 268.35733032]
[187.72746277 255.27923584]
[202.11625671 251.04100037]
[215.37858582 258.04891968]
[219.98469543 272.32418823]
[213.31947327 285.76199341]
[199.16709900 290.73297119]
[185.56161499 284.41366577]
[189.26776123 298.94860840]
[194.72157288 284.97521973]
[205.61575317 274.66421509]
[219.86779785 269.98666382]
[234.75326538 271.83673096]
[247.42666626 279.86074829]
[255.46534729 292.52487183]
[257.33264160 307.40817261]
[252.67158508 321.66561890]
[242.37319946 332.57174683]
[228.40612793 338.04171753]
[213.44029236 337.02990723]
[200.33656311 329.72970581]
[191.60044861 317.53805542]
[191.60044861 332.53805542]
[191.60044861 347.53805542]
[191.60044861 362.53805542]
[191.60044861 377.53805542]
[191.60044861 392.53805542]
[191.60044861 407.53805542]
[191.60044861 422.53805542]
[191.60044861 437.53805542]
[191.60044861 452.53805542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 120]
[14 119]
[15 118]
[16 117]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[24 108]
[25 107]
[29 66]
[30 65]
[31 64]
[32 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[43 55]
[44 54]
[67 106]
[68 105]
[69 104]
[82 103]
[83 102]
[84 101]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
