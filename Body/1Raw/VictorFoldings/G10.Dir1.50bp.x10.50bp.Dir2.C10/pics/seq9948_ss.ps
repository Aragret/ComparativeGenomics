%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCxxxxxxxxxxAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.04940796 434.89505005]
[126.04940796 419.89505005]
[126.04940796 404.89505005]
[126.04940796 389.89505005]
[126.04940796 374.89505005]
[126.04940796 359.89505005]
[126.04940796 344.89505005]
[126.04940796 329.89505005]
[126.04940796 314.89505005]
[126.04940796 299.89505005]
[111.50701904 296.34439087]
[98.22906494 289.41213989]
[86.98938751 279.49743652]
[78.44420624 267.17330933]
[73.09380341 253.15371704]
[71.25325012 238.25201416]
[73.03385162 223.33389282]
[78.33640289 209.26704407]
[86.85674286 196.87066650]
[98.10317230 186.86782837]
[111.42484283 179.84320068]
[126.04940796 176.20896912]
[126.04940796 161.20896912]
[113.63109589 152.79554749]
[99.70037842 158.35748291]
[85.76966095 163.91943359]
[71.83895111 169.48136902]
[59.37087631 180.96977234]
[44.87993240 172.16926575]
[49.32502365 155.80841064]
[66.27700806 155.55064392]
[80.20772552 149.98870850]
[94.13844299 144.42677307]
[108.06916046 138.86483765]
[70.18058777 117.78527832]
[77.24651337 80.83795929]
[68.57991028 68.59500885]
[59.91329956 56.35205460]
[46.62520599 63.35787582]
[32.53632736 68.56926727]
[17.88774681 71.89704132]
[2.93012023 73.28427124]
[-12.08060932 72.70720673]
[-26.88758850 70.17572021]
[-41.23744965 65.73314667]
[-54.88464737 59.45548630]
[-67.59566498 51.45016861]
[-79.15299225 41.85416794]
[-89.35887146 30.83169174]
[-98.03866577 18.57134247]
[-105.04386139 5.28291512]
[-110.25457764 -8.80621052]
[-113.58165741 -23.45494843]
[-114.96817017 -38.41264343]
[-114.39038849 -53.42334366]
[-111.85820770 -68.23020172]
[-107.41494751 -82.57985687]
[-101.13663483 -96.22675323]
[-93.13071442 -108.93738556]
[-83.53416443 -120.49425507]
[-72.51119995 -130.69961548]
[-60.25043869 -139.37882996]
[-46.96167755 -146.38337708]
[-32.87230301 -151.59342957]
[-18.22340584 -154.91981506]
[-3.26564622 -156.30561829]
[11.74502850 -155.72712708]
[26.55176735 -153.19422913]
[40.90120316 -148.75028992]
[54.54780579 -142.47132874]
[67.25805664 -134.46479797]
[78.81446838 -124.86769867]
[89.01930237 -113.84425354]
[97.69792938 -101.58307648]
[104.70185852 -88.29398346]
[109.91123199 -74.20436096]
[113.23691559 -59.55530548]
[114.62200928 -44.59748077]
[114.04280090 -29.58683395]
[111.50920868 -14.78021622]
[107.06457520 -0.43098947]
[100.78497314 13.21531200]
[92.77783966 25.92518234]
[83.18019104 37.48114014]
[72.15625000 47.68544769]
[80.82286072 59.92840195]
[89.48947144 72.17135620]
[108.36573029 68.01309204]
[127.86903381 76.61854553]
[139.56311035 96.78325653]
[150.95417786 87.02397919]
[162.34526062 77.26470947]
[173.73632812 67.50543213]
[172.36087036 52.04943848]
[180.36175537 38.75412750]
[194.66250610 32.73181915]
[209.76417542 36.29821014]
[219.85987854 48.08195496]
[221.06758118 63.55195999]
[212.92292786 76.75968933]
[198.55769348 82.62651062]
[183.49560547 78.89650726]
[172.10452271 88.65577698]
[160.71345520 98.41505432]
[149.32238770 108.17433167]
[151.07696533 115.46620178]
[165.66072083 111.95703888]
[180.24452209 108.44809723]
[183.75323486 123.03195190]
[169.16987610 126.54078674]
[154.58613586 130.04995728]
[156.34071350 137.34182739]
[170.92446899 140.85099792]
[185.50820923 144.36016846]
[200.09196472 147.86932373]
[214.67572021 151.37849426]
[229.25946045 154.88766479]
[243.84321594 158.39683533]
[259.40744019 153.23094177]
[271.48190308 164.32775879]
[267.64541626 180.27183533]
[251.84463501 184.66125488]
[240.33404541 172.98057556]
[225.75028992 169.47142029]
[211.16654968 165.96224976]
[196.58279419 162.45307922]
[181.99905396 158.94390869]
[167.41529846 155.43473816]
[152.83154297 151.92558289]
[141.04940796 161.20896912]
[141.04940796 176.20896912]
[155.67398071 179.84320068]
[168.99565125 186.86782837]
[180.24208069 196.87066650]
[188.76242065 209.26704407]
[194.06497192 223.33389282]
[195.84556580 238.25201416]
[194.00502014 253.15371704]
[188.65461731 267.17330933]
[180.10943604 279.49743652]
[168.86975098 289.41213989]
[155.59179688 296.34439087]
[141.04940796 299.89505005]
[141.04940796 314.89505005]
[141.04940796 329.89505005]
[141.04940796 344.89505005]
[141.04940796 359.89505005]
[141.04940796 374.89505005]
[141.04940796 389.89505005]
[141.04940796 404.89505005]
[141.04940796 419.89505005]
[141.04940796 434.89505005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 34]
[25 33]
[26 32]
[27 31]
[36 87]
[37 86]
[38 85]
[90 105]
[91 104]
[92 103]
[93 102]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
