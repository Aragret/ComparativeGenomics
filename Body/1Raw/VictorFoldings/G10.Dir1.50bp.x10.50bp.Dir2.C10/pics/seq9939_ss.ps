%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAAxxxxxxxxxxUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[38.54574203 288.09945679]
[33.35032654 302.17095947]
[28.15490913 316.24249268]
[22.95949364 330.31399536]
[17.76407814 344.38552856]
[12.56866360 358.45703125]
[15.87343121 374.51974487]
[3.43703532 385.20938110]
[-11.94702625 379.52935791]
[-14.45294952 363.32278442]
[-1.50285625 353.26162720]
[3.69255924 339.19012451]
[8.88797474 325.11859131]
[14.08339024 311.04705811]
[19.27880669 296.97555542]
[24.47422218 282.90402222]
[4.82531166 273.49295044]
[-13.66995335 261.97891235]
[-30.78738594 248.50148010]
[-46.31949997 233.22399902]
[-60.07802200 216.33166504]
[-71.89618683 198.02923584]
[-81.63073730 178.53855896]
[-89.16368103 158.09588623]
[-103.65927124 161.95303345]
[-118.15486908 165.81019592]
[-132.65046692 169.66735840]
[-138.11054993 184.19206238]
[-151.08375549 192.70532227]
[-166.58163452 191.93359375]
[-178.64492798 182.17364502]
[-182.63504028 167.17835999]
[-177.01771545 152.71372986]
[-163.95291138 144.34172058]
[-148.46432495 145.28152466]
[-136.50762939 155.17176819]
[-122.01203156 151.31460571]
[-107.51643372 147.45744324]
[-93.02083588 143.60028076]
[-96.41472626 124.06830597]
[-97.83726501 104.29476929]
[-97.27416992 84.47811890]
[-94.73110199 64.81726074]
[-90.23358154 45.50952148]
[-83.82674408 26.74868584]
[-75.57490540 8.72304821]
[-65.56086731 -8.38647175]
[-53.88515091 -24.40815163]
[-65.18415833 -34.27387619]
[-76.48316193 -44.13959885]
[-87.78216553 -54.00532150]
[-103.20361328 -51.41438293]
[-116.65626526 -59.38684464]
[-121.78820038 -74.15834808]
[-116.17626190 -88.75424194]
[-102.47023773 -96.28279877]
[-87.14170837 -93.18925476]
[-77.42832184 -80.93428802]
[-77.91644287 -65.30432892]
[-66.61743927 -55.43860245]
[-55.31843567 -45.57287979]
[-44.01942825 -35.70715714]
[-34.82225037 -44.84815979]
[-25.04613876 -53.36717987]
[-14.73307419 -61.22763443]
[-3.92734122 -68.39577484]
[7.32465935 -74.84081268]
[18.97461128 -80.53507996]
[30.97248840 -85.45412445]
[43.26677322 -89.57681274]
[55.80467224 -92.88545990]
[68.53234863 -95.36585236]
[81.39514923 -97.00733185]
[94.33783722 -97.80284882]
[107.30484009 -97.74900055]
[120.24047089 -96.84600830]
[133.08920288 -95.09775543]
[145.79583740 -92.51174164]
[158.30581665 -89.09907532]
[170.56542969 -84.87441254]
[182.52204895 -79.85588837]
[194.12429810 -74.06505585]
[205.32238770 -67.52678680]
[216.06820679 -60.26914597]
[226.31562805 -52.32330704]
[236.02064514 -43.72338486]
[245.14158630 -34.50630951]
[253.63928223 -24.71165657]
[261.47726440 -14.38148975]
[268.62182617 -3.56016374]
[275.04232788 7.70585346]
[288.56652832 1.21768856]
[302.09072876 -5.27047634]
[315.61489868 -11.75864124]
[329.13909912 -18.24680710]
[328.27438354 -33.42312622]
[333.28793335 -47.77347946]
[343.41525269 -59.10954285]
[357.11193848 -65.70264435]
[372.28939819 -66.54738617]
[386.63311768 -61.51495361]
[397.95587158 -51.37274933]
[404.53094482 -37.66739655]
[405.35571289 -22.48885155]
[400.30441284 -8.15173817]
[390.14733887 3.15763950]
[376.43334961 9.71468353]
[361.25372314 10.51949215]
[346.92327881 5.44933844]
[335.62725830 -4.72261667]
[322.10305786 1.76554823]
[308.57888794 8.25371361]
[295.05468750 14.74187851]
[281.53048706 21.23004341]
[285.95565796 32.33526611]
[289.70220947 43.68743515]
[292.75640869 55.24511719]
[295.10711670 66.96613312]
[296.74581909 78.80770874]
[297.66647339 90.72662354]
[297.86572266 102.67938232]
[297.34289551 114.62236786]
[296.09982300 126.51197815]
[294.14111328 138.30484009]
[291.47384644 149.95790100]
[288.10781860 161.42864990]
[284.05526733 172.67520142]
[279.33102417 183.65653992]
[273.95227051 194.33255005]
[267.93872070 204.66430664]
[261.31225586 214.61408997]
[254.09706116 224.14556885]
[246.31950378 233.22399902]
[238.00793457 241.81620789]
[229.19271851 249.89085388]
[219.90600586 257.41848755]
[210.18168640 264.37161255]
[200.05526733 270.72485352]
[189.56369019 276.45501709]
[178.74523926 281.54122925]
[167.63941956 285.96487427]
[156.28674316 289.70986938]
[144.72863770 292.76248169]
[133.00730896 295.11163330]
[121.16550446 296.74868774]
[109.24645996 297.66772461]
[97.29367828 297.86535645]
[85.35076904 297.34088135]
[73.46131897 296.09622192]
[61.66872787 294.13589478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[24 39]
[25 38]
[26 37]
[27 36]
[48 62]
[49 61]
[50 60]
[51 59]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
