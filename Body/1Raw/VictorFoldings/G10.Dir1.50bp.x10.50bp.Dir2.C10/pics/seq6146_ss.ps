%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUxxxxxxxxxxCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[159.78991699 272.14291382]
[159.78991699 257.14291382]
[159.78991699 242.14292908]
[159.78991699 227.14292908]
[159.78991699 212.14292908]
[159.78991699 197.14292908]
[159.78991699 182.14292908]
[159.78991699 167.14292908]
[159.78991699 152.14292908]
[159.78991699 137.14292908]
[157.15104675 122.37686920]
[151.95564270 108.30535126]
[125.67366028 139.79689026]
[88.91520691 140.61851501]
[67.06488800 116.52474213]
[52.56929398 120.38189697]
[38.07369614 124.23905945]
[23.57810020 128.09622192]
[9.08250332 131.95338440]
[-5.41309357 135.81053162]
[-19.90868950 139.66769409]
[-34.40428543 143.52485657]
[-48.89988327 147.38201904]
[-63.39548111 151.23918152]
[-77.89107513 155.09632874]
[-80.70404053 170.09800720]
[-89.75433350 182.38844299]
[-103.24500275 189.52738953]
[-118.49747467 190.09739685]
[-132.48335266 183.98527527]
[-142.42573547 172.40461731]
[-146.35055542 157.65475464]
[-143.47853088 142.66427612]
[-134.37991333 130.40957642]
[-120.86123657 123.32380676]
[-105.60663605 122.81387329]
[-91.64493561 128.98101807]
[-81.74823761 140.60073853]
[-67.25263977 136.74357605]
[-52.75704193 132.88641357]
[-38.26144791 129.02926636]
[-23.76585007 125.17210388]
[-9.27025318 121.31494141]
[5.22534370 117.45777893]
[19.72093964 113.60062408]
[34.21653748 109.74346161]
[48.71213531 105.88630676]
[63.20772934 102.02914429]
[61.64725494 90.64992523]
[63.74397278 78.59352112]
[69.73159027 67.06444550]
[79.44280243 57.33466339]
[92.29384613 50.61014557]
[107.31310272 47.89543915]
[99.06081390 35.36947632]
[90.80852509 22.84351349]
[82.55623627 10.31755257]
[68.50289154 3.05021906]
[67.96208954 -11.83456516]
[53.06712723 -18.69547462]
[51.83100891 -35.04796982]
[65.52534485 -44.07000351]
[80.06258392 -36.48048019]
[80.48805237 -20.08685493]
[93.95113373 -13.71546173]
[95.08219147 2.06526303]
[103.33448029 14.59122467]
[111.58677673 27.11718750]
[119.83906555 39.64315033]
[127.33744049 39.79917526]
[126.10063934 24.85025215]
[124.86383820 9.90132904]
[123.62704468 -5.04759502]
[117.15832520 -18.58109665]
[122.57014465 -32.57081223]
[136.46255493 -38.22775269]
[150.10769653 -31.99796486]
[154.93304443 -17.79529190]
[147.90693665 -4.54237270]
[146.04936218 10.34216213]
[144.19177246 25.22669792]
[142.33419800 40.11123276]
[149.83256531 40.26726151]
[158.59877014 28.09542465]
[167.36499023 15.92358780]
[176.13119507 3.75175095]
[171.14706421 -10.94308281]
[175.78437805 -25.75102043]
[188.25996399 -34.97810745]
[203.77673340 -35.07633972]
[216.36814880 -26.00794792]
[221.19258118 -11.25991058]
[216.39489746 3.49684954]
[203.81994629 12.58805752]
[188.30302429 12.51795769]
[179.53681946 24.68979454]
[170.77061462 36.86163330]
[162.00440979 49.03347015]
[165.31864929 55.76145172]
[178.77462769 49.13295364]
[192.23059082 42.50445557]
[205.68666077 35.87616348]
[212.31474304 49.33233261]
[198.85908508 55.96041870]
[185.40312195 62.58891678]
[171.94715881 69.21741486]
[175.26139832 75.94539642]
[190.25410461 76.41344452]
[205.24679565 76.88148499]
[220.23948669 77.34952545]
[230.52441406 65.57012939]
[245.98268127 63.20869827]
[259.31533813 71.38023376]
[264.22714233 86.22638702]
[258.39886475 100.73725128]
[244.58247375 108.06124878]
[229.30160522 104.74021149]
[219.77145386 92.34222412]
[204.77874756 91.87417603]
[189.78605652 91.40613556]
[174.79336548 90.93809509]
[166.02716064 103.10993195]
[171.22256470 117.18144989]
[174.28587341 102.49757385]
[181.87225342 89.55744934]
[193.18937683 79.71253204]
[207.05532837 73.99101257]
[222.02191162 72.99045563]
[236.52606201 76.81534576]
[249.05294800 85.06622314]
[258.29428101 96.88137054]
[263.28491211 111.02681732]
[263.50360107 126.02522278]
[258.92752075 140.31016541]
[250.03460693 152.38972473]
[237.75360107 161.00233459]
[223.36714172 165.24848938]
[208.37773132 164.68472290]
[194.35087585 159.36990356]
[182.75151062 149.85913086]
[174.78991699 137.14292908]
[174.78991699 152.14292908]
[174.78991699 167.14292908]
[174.78991699 182.14292908]
[174.78991699 197.14292908]
[174.78991699 212.14292908]
[174.78991699 227.14292908]
[174.78991699 242.14292908]
[174.78991699 257.14291382]
[174.78991699 272.14291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[54 69]
[55 68]
[56 67]
[57 66]
[59 64]
[83 98]
[84 97]
[85 96]
[86 95]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
