%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCxxxxxxxxxxUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-264.55490112 348.43615723]
[-280.66275024 339.50787354]
[-288.91503906 352.03381348]
[-297.16732788 364.55978394]
[-305.41961670 377.08575439]
[-313.67190552 389.61172485]
[-321.92419434 402.13766479]
[-330.17648315 414.66363525]
[-338.42877197 427.18960571]
[-346.68106079 439.71557617]
[-342.03460693 454.64688110]
[-348.12057495 469.05157471]
[-362.06530762 476.12817383]
[-377.28454590 472.53533936]
[-386.59225464 459.96948242]
[-385.59356689 444.36383057]
[-374.76007080 433.08688354]
[-359.20703125 431.46328735]
[-350.95474243 418.93731689]
[-342.70245361 406.41134644]
[-334.45016479 393.88537598]
[-326.19784546 381.35943604]
[-317.94555664 368.83346558]
[-309.69326782 356.30749512]
[-301.44097900 343.78152466]
[-293.18869019 331.25558472]
[-303.52688599 323.45288086]
[-313.38342285 315.04980469]
[-322.72344971 306.07595825]
[-331.51403809 296.56307983]
[-339.72409058 286.54473877]
[-347.32461548 276.05630493]
[-354.28872681 265.13479614]
[-360.59185791 253.81880188]
[-366.21173096 242.14825439]
[-371.12847900 230.16438293]
[-375.32470703 217.90950012]
[-378.78561401 205.42687988]
[-381.49893188 192.76060486]
[-383.45507812 179.95541382]
[-384.64712524 167.05650330]
[-385.07089233 154.10945129]
[-384.72479248 141.15995789]
[-383.61010742 128.25378418]
[-381.73071289 115.43650055]
[-379.09323120 102.75337219]
[-375.70700073 90.24919128]
[-371.58395386 77.96813202]
[-366.73858643 65.95355988]
[-361.18807983 54.24792099]
[-354.95196533 42.89255905]
[-348.05227661 31.92758179]
[-340.51336670 21.39172363]
[-332.36184692 11.32220173]
[-323.62652588 1.75458646]
[-314.33816528 -7.27732325]
[-304.52963257 -15.74162006]
[-294.23553467 -23.60839844]
[-283.49221802 -30.84986877]
[-272.33761597 -37.44044113]
[-260.81112671 -43.35682678]
[-248.95341492 -48.57812119]
[-236.80639648 -53.08587265]
[-224.41294861 -56.86414337]
[-211.81681824 -59.89958191]
[-199.06251526 -62.18144989]
[-186.19508362 -63.70167923]
[-173.25993347 -64.45488739]
[-160.30276489 -64.43839264]
[-147.36935425 -63.65224457]
[-134.50535583 -62.09920883]
[-121.75620270 -59.78475189]
[-109.16693115 -56.71703339]
[-96.78201294 -52.90687561]
[-84.64517975 -48.36772156]
[-72.79930115 -43.11558533]
[-61.28622055 -37.16901016]
[-50.14660645 -30.54897881]
[-39.41980362 -23.27886009]
[-29.14370728 -15.38431931]
[-19.35461426 -6.89322519]
[-10.08710670 2.16444468]
[-1.37392557 11.75671196]
[6.75414848 21.84970856]
[14.26839828 32.40779877]
[21.14227486 43.39370346]
[27.35149002 54.76863480]
[32.87410355 66.49241638]
[37.69059753 78.52366638]
[41.78394699 90.81988525]
[45.13968658 103.33765411]
[59.84764862 100.39217377]
[74.55561066 97.44668579]
[89.26357269 94.50120544]
[103.90707397 91.25038147]
[118.47977448 87.69561768]
[133.05247498 84.14085388]
[139.01718140 69.93774414]
[152.04908752 62.06229401]
[167.04216003 63.35531616]
[178.26457214 73.11213684]
[192.83726501 69.55738068]
[207.40997314 66.00261688]
[221.98268127 62.44785309]
[236.55537415 58.89309311]
[248.02938843 47.17646790]
[263.84381104 51.51645660]
[267.73016357 67.44844818]
[255.69046021 78.58297729]
[240.11013794 73.46579742]
[225.53744507 77.02055359]
[210.96473694 80.57531738]
[196.39202881 84.13008118]
[181.81933594 87.68484497]
[176.35014343 101.51329041]
[163.63653564 109.56488800]
[148.44203186 108.57479095]
[136.60723877 98.71356201]
[122.03453827 102.26832581]
[107.46183777 105.82308197]
[103.74897766 109.62668610]
[98.15647888 111.04398346]
[92.20905304 109.20916748]
[77.50109100 112.15464783]
[62.79312897 115.10013580]
[48.08516693 118.04561615]
[50.30449295 136.33874512]
[50.97148895 154.75354004]
[50.08146667 173.15849304]
[47.64084625 191.42219543]
[43.66712570 209.41426086]
[38.18873978 227.00622559]
[31.24487305 244.07249451]
[22.88516998 260.49124146]
[13.16938210 276.14526367]
[2.16693807 290.92285156]
[-10.04354572 304.71847534]
[-23.37483406 317.43371582]
[-37.73168945 328.97781372]
[-53.01155853 339.26843262]
[-69.10530090 348.23208618]
[-85.89797211 355.80487061]
[-103.26964569 361.93280029]
[-121.09625244 366.57214355]
[-139.25048828 369.68984985]
[-157.60272217 371.26373291]
[-176.02189636 371.28262329]
[-194.37652588 369.74642944]
[-212.53552246 366.66622925]
[-230.36926270 362.06405640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[91 126]
[92 125]
[93 124]
[94 123]
[95 120]
[96 119]
[97 118]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
