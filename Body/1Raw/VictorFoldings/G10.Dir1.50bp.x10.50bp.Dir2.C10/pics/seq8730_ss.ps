%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUxxxxxxxxxxGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[180.57771301 360.65194702]
[180.57771301 345.65194702]
[180.57771301 330.65194702]
[180.57771301 315.65194702]
[180.57771301 300.65194702]
[180.57771301 285.65194702]
[180.57771301 270.65194702]
[180.57771301 255.65194702]
[180.57771301 240.65194702]
[180.57771301 225.65194702]
[176.91900635 211.10499573]
[169.82260132 197.88980103]
[154.43518066 189.50697327]
[155.07690430 171.13255310]
[147.71066284 158.06587219]
[134.72045898 150.77862549]
[134.68348694 134.95745850]
[127.31725311 121.89076996]
[119.95101166 108.82407379]
[108.18232727 126.83542633]
[81.71129608 129.01152039]
[67.46460724 133.70532227]
[53.21791458 138.39912415]
[38.97122192 143.09292603]
[24.72453117 147.78672791]
[21.67155457 162.83912659]
[11.48937607 174.33776855]
[-3.08304763 179.18957520]
[-18.12580872 176.08943176]
[-29.59248161 165.87126160]
[-34.39858627 151.28370667]
[-31.25130653 136.25073242]
[-20.99724388 124.81614685]
[-6.39469051 120.05579376]
[8.62834072 123.25017548]
[20.03072929 133.54003906]
[34.27742386 128.84623718]
[48.52411270 124.15242767]
[62.77080536 119.45863342]
[77.01750183 114.76483154]
[77.09449768 107.26522064]
[77.24849701 92.26601410]
[77.32549286 84.76641083]
[63.17817688 79.78108978]
[47.16645432 83.32465363]
[36.29284286 71.04879761]
[41.74317932 55.58187103]
[57.91062546 52.83491898]
[68.16349792 65.63377380]
[82.31081390 70.61909485]
[103.39809418 72.15142059]
[115.41614532 84.56465912]
[117.56472015 69.71933746]
[119.71330261 54.87401199]
[112.61754608 44.05486679]
[114.75265503 31.70121574]
[124.42828369 24.37698174]
[126.88121033 9.57890320]
[129.33413696 -5.21917534]
[131.78706360 -20.01725388]
[134.23999023 -34.81533432]
[119.97718048 -39.56071091]
[106.63236237 -46.47896957]
[94.53417206 -55.39974213]
[83.98052979 -66.10334778]
[75.23133850 -78.32619476]
[68.50204468 -91.76729584]
[63.95837021 -106.09564209]
[61.71220779 -120.95838928]
[61.81887054 -135.98953247]
[64.27572632 -150.81890869]
[69.02227783 -165.08132935]
[75.94164276 -178.42556763]
[84.86341095 -190.52302551]
[95.56788635 -201.07579041]
[107.79145813 -209.82397461]
[121.23311615 -216.55215454]
[135.56184387 -221.09465027]
[150.42477417 -223.33958435]
[165.45590210 -223.23168945]
[180.28506470 -220.77360535]
[194.54710388 -216.02586365]
[207.89077759 -209.10540771]
[219.98750305 -200.18264771]
[230.53936768 -189.47729492]
[239.28654480 -177.25300598]
[246.01362610 -163.81079102]
[250.55493164 -149.48168945]
[252.79864502 -134.61857605]
[252.68949890 -119.58745575]
[250.23019409 -104.75848389]
[245.48129272 -90.49684906]
[238.55972290 -77.15373993]
[229.63595581 -65.05775452]
[218.92974854 -54.50676727]
[206.70472717 -45.76059723]
[193.26196289 -39.03463364]
[178.93249512 -34.49450684]
[164.06918335 -32.25202560]
[149.03807068 -32.36240387]
[146.58514404 -17.56432724]
[144.13221741 -2.76624751]
[141.67929077 12.03183174]
[139.22636414 26.82991028]
[146.28973389 42.86590958]
[134.55862427 57.02259064]
[132.41004944 71.86791229]
[130.26145935 86.71323395]
[133.01771545 101.45783234]
[140.38394165 114.52452850]
[147.75018311 127.59122467]
[161.26727295 135.81307983]
[160.77735901 150.69963074]
[168.14360046 163.76632690]
[180.37022400 167.99873352]
[186.22521973 179.08432007]
[183.03778076 190.79339600]
[190.13418579 204.00859070]
[190.87080383 189.02668762]
[195.10684204 174.63723755]
[202.60513306 161.64587402]
[212.94587708 150.77992249]
[225.55014038 142.64772034]
[239.71223450 137.70455933]
[254.63931274 136.22720337]
[269.49563599 138.29835510]
[283.44946289 143.80206299]
[295.71957397 152.43019104]
[305.61898804 163.69967651]
[312.59350586 176.97958374]
[316.25262451 191.52642822]
[316.39151001 206.52578735]
[313.00238037 221.13789368]
[306.27496338 234.54467773]
[296.58590698 245.99554443]
[284.47766113 254.84939575]
[270.62814331 260.61053467]
[255.81271362 262.95642090]
[240.86085510 261.75570679]
[226.60963440 257.07565308]
[213.85696411 249.17822266]
[203.31678772 238.50561523]
[195.57771301 225.65194702]
[195.57771301 240.65194702]
[195.57771301 255.65194702]
[195.57771301 270.65194702]
[195.57771301 285.65194702]
[195.57771301 300.65194702]
[195.57771301 315.65194702]
[195.57771301 330.65194702]
[195.57771301 345.65194702]
[195.57771301 360.65194702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 118]
[12 117]
[14 114]
[15 113]
[17 111]
[18 110]
[19 109]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[43 50]
[44 49]
[52 108]
[53 107]
[54 106]
[57 104]
[58 103]
[59 102]
[60 101]
[61 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
