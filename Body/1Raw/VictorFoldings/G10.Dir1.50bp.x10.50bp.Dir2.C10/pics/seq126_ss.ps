%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAxxxxxxxxxxUUUGAAUCAACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.94717407 434.28125000]
[146.63511658 419.28451538]
[146.32305908 404.28775024]
[146.01100159 389.29101562]
[145.69895935 374.29425049]
[145.38690186 359.29748535]
[145.07484436 344.30075073]
[144.76278687 329.30398560]
[144.45072937 314.30722046]
[140.74456787 299.77230835]
[133.83757019 286.45715332]
[126.93057251 273.14199829]
[120.02356720 259.82684326]
[107.29486084 252.09188843]
[107.80857086 236.27902222]
[100.90157318 222.96386719]
[99.90135956 237.93048096]
[94.97249603 252.09757996]
[86.46710205 264.45306396]
[74.99277496 274.11431885]
[61.36920929 280.39114380]
[46.56965637 282.83514404]
[31.65135193 281.27172852]
[17.68003464 275.81259155]
[5.65378094 266.84768677]
[-3.56827950 255.01750183]
[-9.32734299 241.16711426]
[-11.21199512 226.28598022]
[-9.08759975 211.43717957]
[-3.10591936 197.68147278]
[6.30572796 186.00154114]
[18.47499466 177.23176575]
[32.53253555 171.99864197]
[47.47410965 170.67602539]
[62.23232651 173.35838318]
[75.75289154 179.85409546]
[87.06992340 189.69914246]
[95.37255096 202.18525696]
[94.74857330 187.19824219]
[94.12459564 172.21122742]
[91.23060608 168.33819580]
[90.78263855 162.59097290]
[93.79955292 156.59048462]
[93.79955292 141.59048462]
[93.79955292 126.59049225]
[93.79955292 111.59049225]
[76.41900635 111.96102905]
[60.65557098 94.42577362]
[50.90791702 83.02474976]
[41.16026688 71.62373352]
[31.41261292 60.22270966]
[21.66496086 48.82168961]
[11.91730881 37.42066956]
[2.16965675 26.01964760]
[-7.57799530 14.61862564]
[-17.32564735 3.21760488]
[-32.95894241 -1.73538244]
[-36.22145081 -17.80672646]
[-23.75698471 -28.46360397]
[-8.38791561 -22.74313545]
[-5.92462635 -6.53004694]
[3.82302570 4.87097406]
[13.57067776 16.27199554]
[23.31833076 27.67301559]
[33.06598282 39.07403564]
[42.81363297 50.47505951]
[52.56128693 61.87607956]
[62.30893707 73.27709961]
[72.05658722 84.67812347]
[79.53063202 84.05467987]
[76.44220734 69.37607574]
[73.35377502 54.69746399]
[70.26535034 40.01885223]
[65.41608429 25.82432365]
[73.62624359 13.27070713]
[88.57432556 12.02379322]
[98.75090027 23.04365540]
[96.32035065 37.84550858]
[95.70647430 52.83294296]
[95.09259796 67.82037354]
[94.47872162 82.80780792]
[101.95276642 82.18437195]
[109.67684937 69.32596588]
[117.40093231 56.46756744]
[111.21255493 42.23789597]
[114.60289764 27.09572983]
[126.26831818 16.86354256]
[141.72322083 15.47581863]
[155.02487183 23.46616554]
[161.05851746 37.76213074]
[157.50410461 52.86662674]
[145.72837830 62.97166443]
[130.25933838 64.19165039]
[122.53524780 77.05005646]
[114.81116486 89.90845490]
[127.08848572 81.29060364]
[142.05499268 80.28879547]
[155.37135315 87.19348145]
[163.17665100 100.00274658]
[163.20785522 115.00271606]
[155.45590210 127.84434509]
[142.16839600 134.80436707]
[127.19784546 133.86482239]
[114.88478088 125.29812622]
[108.79955292 111.59049225]
[108.79955292 126.59049225]
[108.79955292 141.59048462]
[108.79955292 156.59048462]
[109.11161041 171.58724976]
[109.73558807 186.57426453]
[110.35956573 201.56127930]
[114.21672821 216.05686951]
[121.12372589 229.37202454]
[134.34646606 238.05935669]
[133.33872986 252.91983032]
[140.24572754 266.23498535]
[147.15272522 279.55014038]
[154.05972290 292.86529541]
[155.05032349 277.89804077]
[159.81120300 263.67364502]
[168.02993774 251.12562561]
[179.16708374 241.07754517]
[192.49174500 234.18887329]
[207.12936401 230.91171265]
[222.11930847 231.46115112]
[236.47773743 235.80111694]
[249.26231384 243.64678955]
[259.63397217 254.48324585]
[266.91201782 267.59927368]
[270.61880493 282.13403320]
[270.51098633 297.13366699]
[266.59570312 311.61364746]
[259.12991333 324.62371826]
[248.60356140 335.30999756]
[235.70753479 342.97109985]
[221.28820801 347.10424805]
[206.29193115 347.43817139]
[191.70291138 343.95098877]
[178.47865295 336.87152100]
[167.48706055 326.66439819]
[159.44747925 313.99517822]
[159.75953674 328.99194336]
[160.07159424 343.98867798]
[160.38365173 358.98544312]
[160.69570923 373.98217773]
[161.00776672 388.97894287]
[161.31982422 403.97570801]
[161.63188171 418.97244263]
[161.94392395 433.96920776]
[164.53492737 453.17694092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 118]
[11 117]
[12 116]
[13 115]
[15 113]
[16 112]
[38 111]
[39 110]
[40 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 69]
[49 68]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
