%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCxxxxxxxxxxACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.03492737 403.38265991]
[115.03492737 388.38265991]
[115.03492737 373.38265991]
[115.03492737 358.38265991]
[115.03492737 343.38265991]
[115.03492737 328.38265991]
[115.03492737 313.38265991]
[115.03492737 298.38265991]
[115.03492737 283.38265991]
[115.03492737 268.38265991]
[95.98466492 257.33157349]
[87.19904327 237.00082397]
[92.26224518 215.31188965]
[109.33087158 200.81161499]
[106.84574890 186.01892090]
[104.36063385 171.22621155]
[101.87551117 156.43350220]
[99.39039612 141.64079285]
[91.56555939 140.78219604]
[84.04208374 138.46650696]
[77.08875275 134.77645874]
[70.95401764 129.84388733]
[65.85705566 123.84504700]
[61.97996902 116.99424744]
[47.40726852 120.54901123]
[32.83456421 124.10377502]
[29.19797516 138.97097778]
[19.06011009 150.43754578]
[4.75057602 155.86856079]
[-10.44240189 154.01599121]
[-23.02758789 145.30555725]
[-30.11299706 131.73884583]
[-30.07045746 116.43339539]
[-22.90974045 102.90628052]
[-10.27632904 94.26593781]
[4.92671156 92.49785614]
[19.20583534 98.00832367]
[29.27980232 109.53107452]
[43.85250473 105.97631073]
[58.42520905 102.42154694]
[60.08957291 88.10525513]
[66.53414154 75.21363831]
[76.98703766 65.29077148]
[90.19627380 59.52514267]
[104.57973480 58.60733032]
[108.88731384 44.23914337]
[113.19490051 29.87096024]
[117.50248718 15.50277615]
[121.81007385 1.13459229]
[126.11765289 -13.23359203]
[130.42524719 -27.60177612]
[134.73281860 -41.96995926]
[139.04040527 -56.33814240]
[135.59204102 -71.77897644]
[146.65835571 -81.74822235]
[150.96594238 -96.11640930]
[138.56365967 -104.75591278]
[129.45133972 -116.78953552]
[124.51134491 -131.03118896]
[124.21556091 -146.08203125]
[128.58038330 -160.46781921]
[137.16630554 -172.78337097]
[149.12216187 -181.82978821]
[163.26948547 -186.73114014]
[178.21865845 -187.01934814]
[182.52624512 -201.38752747]
[186.83383179 -215.75572205]
[191.14141846 -230.12390137]
[177.93072510 -237.34686279]
[166.51071167 -247.15895081]
[157.38061523 -259.13122559]
[150.93955994 -272.74026489]
[147.46913147 -287.39120483]
[147.12103271 -302.44354248]
[149.91047668 -317.23922729]
[155.71554565 -331.13150024]
[164.28242493 -343.51303101]
[175.23664856 -353.84252930]
[188.09931946 -361.66845703]
[202.30815125 -366.64871216]
[217.24198914 -368.56555176]
[232.24798584 -367.33520508]
[246.67013550 -363.01144409]
[259.87799072 -355.78329468]
[271.29412842 -345.96670532]
[280.41952515 -333.99084473]
[286.85522461 -320.37924194]
[290.31988525 -305.72695923]
[290.66207886 -290.67449951]
[287.86679077 -275.87991333]
[282.05627441 -261.98992920]
[273.48452759 -249.61177063]
[262.52624512 -239.28657532]
[249.66047668 -231.46569824]
[235.44969177 -226.49102783]
[220.51510620 -224.58006287]
[205.50959778 -225.81631470]
[201.20201111 -211.44813538]
[196.89442444 -197.07994080]
[192.58685303 -182.71176147]
[204.91181946 -174.24676514]
[214.02923584 -162.37062073]
[219.03623962 -148.23873901]
[219.43060303 -133.23089600]
[215.16111755 -118.81652832]
[206.63386536 -106.41084290]
[194.67356873 -97.23590088]
[180.44386292 -92.20021820]
[165.33412170 -91.80882263]
[161.02653503 -77.44064331]
[164.78302002 -63.02751541]
[153.40859985 -52.03055954]
[149.10101318 -37.66237640]
[144.79342651 -23.29419136]
[140.48583984 -8.92600727]
[136.17825317 5.44217682]
[131.87066650 19.81036186]
[127.56308746 34.17854691]
[123.25550079 48.54673004]
[118.94791412 62.91491318]
[133.54965210 75.32718658]
[141.04664612 92.96437836]
[139.85125732 112.09149170]
[130.21664429 128.65800476]
[114.18310547 139.15567017]
[116.66822052 153.94837952]
[119.15334320 168.74108887]
[121.63845825 183.53379822]
[124.12358093 198.32650757]
[132.57704163 199.79544067]
[140.42402649 203.22651672]
[147.21714783 208.41592407]
[152.57107544 215.05981445]
[156.18440247 222.77214050]
[157.85653687 231.10702515]
[157.49890137 239.58460999]
[155.13955688 247.71862793]
[150.92114258 255.04431152]
[145.09230042 261.14498901]
[137.99305725 265.67565918]
[130.03492737 268.38265991]
[130.03492737 283.38265991]
[130.03492737 298.38265991]
[130.03492737 313.38265991]
[130.03492737 328.38265991]
[130.03492737 343.38265991]
[130.03492737 358.38265991]
[130.03492737 373.38265991]
[130.03492737 388.38265991]
[130.03492737 403.38265991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 129]
[15 128]
[16 127]
[17 126]
[18 125]
[24 40]
[25 39]
[26 38]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[53 112]
[55 110]
[56 109]
[65 100]
[66 99]
[67 98]
[68 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
