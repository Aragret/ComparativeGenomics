%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAxxxxxxxxxxCCGGGCCCAUAACACUUGGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.41288757 288.14593506]
[75.41288757 273.14593506]
[75.41288757 258.14593506]
[75.41288757 243.14595032]
[75.41288757 228.14595032]
[75.41288757 213.14595032]
[75.41288757 198.14595032]
[75.41288757 183.14595032]
[75.41288757 168.14595032]
[75.41288757 153.14595032]
[62.71796036 145.15602112]
[49.19376755 151.64419556]
[35.66957855 158.13235474]
[22.14538956 164.62052917]
[8.62119961 171.10868835]
[-4.90299034 177.59684753]
[-2.27557635 192.46289062]
[-3.75755167 207.48641968]
[-9.23894405 221.55258179]
[-18.31299973 233.61758423]
[-30.30636024 242.78610229]
[-44.32904053 248.37779236]
[-59.34046555 249.97772217]
[-74.22668457 247.46713257]
[-87.88304138 241.03234863]
[-99.29615021 231.15087891]
[-107.61907959 218.55596924]
[-112.23420715 204.18228149]
[-112.79906464 189.09640503]
[-109.27173615 174.41783142]
[-101.91397095 161.23580933]
[-91.27176666 150.52851868]
[-78.13484192 143.09051514]
[-63.47804642 139.47375488]
[-48.38901138 139.94662476]
[-33.98744202 144.47402954]
[-21.34203339 152.72001648]
[-11.39115524 164.07266235]
[2.13303423 157.58450317]
[15.65722466 151.09632874]
[29.18141365 144.60816956]
[42.70560455 138.12001038]
[56.22979355 131.63183594]
[49.91952133 119.13594818]
[47.06844711 105.53459167]
[47.81829834 91.75988007]
[52.06581879 78.74205780]
[59.47334671 67.34668732]
[69.49502563 58.31708527]
[81.41678619 52.22595215]
[94.40705872 49.43915939]
[107.57476044 50.09415054]
[120.03038788 54.09408951]
[128.02030945 41.39916229]
[135.74438477 28.54075813]
[143.19929504 15.52444935]
[150.65420532 2.50813985]
[158.10911560 -10.50816917]
[165.56402588 -23.52447891]
[155.94537354 -33.87460709]
[150.78807068 -47.62664032]
[151.25939941 -62.86457825]
[157.70886230 -77.29199982]
[169.55499268 -88.57795715]
[185.31680298 -94.73060608]
[185.31680298 -109.73060608]
[185.31680298 -124.73060608]
[185.31680298 -139.73060608]
[185.31680298 -154.73060608]
[171.54293823 -161.30656433]
[161.99301147 -173.21293640]
[158.56317139 -188.08569336]
[161.93441772 -202.97184753]
[171.43737793 -214.91574097]
[185.18524170 -221.54588318]
[200.44836426 -221.54588318]
[214.19622803 -214.91574097]
[223.69918823 -202.97184753]
[227.07043457 -188.08569336]
[223.64059448 -173.21293640]
[214.09066772 -161.30656433]
[200.31680298 -154.73060608]
[200.31680298 -139.73060608]
[200.31680298 -124.73060608]
[200.31680298 -109.73060608]
[200.31680298 -94.73060608]
[206.62237549 -90.66983795]
[207.35037231 -105.65216064]
[220.68949890 -112.51274872]
[233.30044556 -104.39093781]
[232.57211304 -89.40863037]
[219.23348999 -82.54829407]
[225.53906250 -78.48752594]
[239.19529724 -84.69293213]
[252.85154724 -90.89833832]
[266.50778198 -97.10374451]
[280.16403198 -103.30915070]
[280.96945190 -118.59345245]
[288.79553223 -131.74681091]
[301.84393311 -139.74667358]
[317.11621094 -140.75473022]
[331.10290527 -134.53935242]
[340.58999634 -122.52876282]
[343.39736938 -107.48292542]
[338.87997437 -92.85926056]
[328.07580566 -82.01818085]
[313.46765137 -77.45087433]
[298.41232300 -80.20689392]
[286.36944580 -89.65290833]
[272.71319580 -83.44750214]
[259.05694580 -77.24209595]
[245.40071106 -71.03668976]
[231.74446106 -64.83128357]
[230.96342468 -40.95497131]
[218.32553101 -22.10153770]
[198.70542908 -13.29447079]
[178.58033752 -16.06956863]
[171.12542725 -3.05325913]
[163.67051697 9.96304989]
[156.21560669 22.97936058]
[148.76069641 35.99567032]
[149.14695740 40.81503677]
[146.46475220 45.91769409]
[140.71524048 49.38907623]
[132.72531128 62.08400726]
[138.63250732 67.74030304]
[143.56648254 74.31282043]
[147.38584900 81.63478851]
[149.97770691 89.51773834]
[151.26095581 97.75636292]
[151.18872070 106.13386536]
[149.74998474 114.42768097]
[146.97021484 122.41533661]
[142.91101074 129.88047791]
[137.66879272 136.61869812]
[131.37255859 142.44313049]
[124.18070984 147.18962097]
[116.27708435 150.72132874]
[107.86626434 152.93266296]
[99.16828156 153.75242615]
[90.41288757 153.14595032]
[90.41288757 168.14595032]
[90.41288757 183.14595032]
[90.41288757 198.14595032]
[90.41288757 213.14595032]
[90.41288757 228.14595032]
[90.41288757 243.14595032]
[90.41288757 258.14593506]
[90.41288757 273.14593506]
[90.41288757 288.14593506]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 43]
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[53 125]
[54 124]
[55 121]
[56 120]
[57 119]
[58 118]
[59 117]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
