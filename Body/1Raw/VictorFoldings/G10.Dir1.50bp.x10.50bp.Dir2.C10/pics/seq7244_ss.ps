%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUxxxxxxxxxxAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.07736206 264.88983154]
[74.07736206 249.88983154]
[74.07736206 234.88983154]
[74.07736206 219.88983154]
[74.07736206 204.88983154]
[74.07736206 189.88983154]
[74.07736206 174.88983154]
[74.07736206 159.88983154]
[74.07736206 144.88983154]
[74.07736206 129.88983154]
[72.10514832 115.00517273]
[76.41862488 103.09931946]
[84.53260803 96.34320068]
[93.37197876 95.51405334]
[86.27558136 82.29886627]
[79.17917633 69.08368683]
[72.08277130 55.86849976]
[64.98636627 42.65332031]
[57.88996506 29.43813515]
[50.79356384 16.22295189]
[34.83594513 17.93628883]
[19.47587776 13.41783333]
[7.04768133 3.38498044]
[-0.57166207 -10.60919285]
[-2.24595857 -26.41627884]
[2.25085449 -41.62236023]
[12.20469761 -53.91663361]
[4.83845854 -66.98332977]
[-2.52778077 -80.05002594]
[-14.75440407 -84.28244019]
[-20.60940552 -95.36802673]
[-17.42196655 -107.07710266]
[-24.51837158 -120.29228973]
[-37.71025467 -118.76616669]
[-50.60005188 -121.82525635]
[-61.64582825 -129.08113098]
[-69.53391266 -139.64471436]
[-73.33513641 -152.23510742]
[-72.61420441 -165.33496094]
[-67.47948456 -177.37326050]
[-58.56732178 -186.91378784]
[-65.11519623 -200.40917969]
[-71.66306305 -213.90455627]
[-78.21093750 -227.39994812]
[-84.75880432 -240.89532471]
[-91.30667877 -254.39070129]
[-97.85454559 -267.88607788]
[-104.40242004 -281.38146973]
[-119.14646149 -278.26718140]
[-134.19828796 -278.77194214]
[-148.68310547 -282.86209106]
[-161.76011658 -290.29565430]
[-172.67131042 -300.63681030]
[-180.78541565 -313.28125000]
[-185.63444519 -327.49163818]
[-186.94064331 -342.44055176]
[-184.63238525 -357.25863647]
[-178.84814453 -371.08523560]
[-169.92817688 -383.11825562]
[-158.39443970 -392.66088867]
[-164.94232178 -406.15628052]
[-171.49018860 -419.65164185]
[-178.03805542 -433.14703369]
[-191.91081238 -441.89224243]
[-191.00331116 -458.26626587]
[-176.24913025 -465.42489624]
[-162.82609558 -456.00396729]
[-164.54267883 -439.69491577]
[-157.99479675 -426.19952393]
[-151.44692993 -412.70413208]
[-144.89906311 -399.20874023]
[-130.26542664 -402.36236572]
[-115.29326630 -401.92163086]
[-100.85299683 -397.90783691]
[-87.78517914 -390.55010986]
[-76.85157013 -380.27236938]
[-68.69067383 -367.66888428]
[-63.78054047 -353.46987915]
[-62.41067505 -338.49935913]
[-64.66503906 -323.62710571]
[-70.41687775 -309.71826172]
[-79.33585358 -297.58303833]
[-90.90703583 -287.92935181]
[-84.35916138 -274.43395996]
[-77.81129456 -260.93856812]
[-71.26342010 -247.44319153]
[-64.71555328 -233.94781494]
[-58.16767883 -220.45242310]
[-51.61980820 -206.95704651]
[-45.07193756 -193.46165466]
[-28.23766518 -194.01741028]
[-12.79105759 -187.16445923]
[-1.83467925 -174.22679138]
[2.40799046 -157.75572205]
[-0.95633662 -141.02685547]
[-11.30318832 -127.38869476]
[-4.20678473 -114.17350769]
[11.18063164 -105.79067230]
[10.53891373 -87.41625977]
[17.90515327 -74.34957123]
[25.27139282 -61.28287125]
[39.16025543 -63.50118637]
[52.99962234 -60.82988358]
[65.11646271 -53.57105637]
[74.03884888 -42.58262634]
[78.67476654 -29.17700005]
[78.44574738 -14.96433544]
[73.35894012 -1.65913904]
[64.00874329 9.12654972]
[71.10514832 22.34173203]
[78.20155334 35.55691528]
[85.29795837 48.77209854]
[92.39435577 61.98728180]
[99.49076080 75.20246124]
[106.58716583 88.41764832]
[118.07783508 98.05946350]
[132.32452393 102.75326538]
[146.57121277 107.44705963]
[160.81790161 112.14086151]
[174.81433105 104.80087280]
[189.87637329 109.58737183]
[197.06797791 123.66062164]
[192.12249756 138.67120361]
[177.97399902 145.71362305]
[163.01654053 140.60971069]
[156.12411499 126.38755798]
[141.87741089 121.69375610]
[127.63072205 116.99995422]
[113.38403320 112.30615234]
[107.30736542 116.70207214]
[117.55968475 127.65149689]
[127.81200409 138.60092163]
[138.06433105 149.55035400]
[151.06585693 157.03102112]
[154.79745483 171.55944824]
[147.01017761 184.37966919]
[132.39723206 187.76524353]
[119.76553345 179.67573547]
[116.72817993 164.98513794]
[109.53679657 151.82139587]
[102.34541321 138.65765381]
[95.15402985 125.49391937]
[89.07736206 129.88983154]
[89.07736206 144.88983154]
[89.07736206 159.88983154]
[89.07736206 174.88983154]
[89.07736206 189.88983154]
[89.07736206 204.88983154]
[89.07736206 219.88983154]
[89.07736206 234.88983154]
[89.07736206 249.88983154]
[89.07736206 264.88983154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 115]
[15 114]
[16 113]
[17 112]
[18 111]
[19 110]
[20 109]
[27 101]
[28 100]
[29 99]
[32 97]
[33 96]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[60 71]
[61 70]
[62 69]
[63 68]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
