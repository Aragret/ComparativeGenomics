%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAxxxxxxxxxxUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.68324280 294.31793213]
[26.19621086 308.27832031]
[20.70917892 322.23870850]
[15.22214794 336.19909668]
[9.73511600 350.15948486]
[4.24808455 364.11987305]
[9.31231594 379.34265137]
[0.44771093 392.71420288]
[-15.54556465 393.97702026]
[-26.39883804 382.16235352]
[-23.78640747 366.33343506]
[-9.71230507 358.63284302]
[-4.22527361 344.67245483]
[1.26175773 330.71206665]
[6.74878931 316.75167847]
[12.23582077 302.79129028]
[17.72285271 288.83090210]
[-7.89798546 275.45556641]
[-31.39444923 258.62576294]
[-52.30392456 238.67282104]
[-70.21472931 215.98957825]
[-84.77422333 191.02264404]
[-95.69574738 164.26359558]
[-110.10796356 168.42149353]
[-117.54338837 173.84054565]
[-124.86338043 172.51260376]
[-139.35897827 176.36976624]
[-153.85456848 180.22692871]
[-168.35017395 184.08409119]
[-179.57794189 196.03688049]
[-195.47924805 192.02682495]
[-199.69618225 176.17913818]
[-187.89073181 164.79653931]
[-172.20732117 169.58848572]
[-157.71173096 165.73132324]
[-143.21614075 161.87417603]
[-128.72053528 158.01701355]
[-114.26584625 154.00927734]
[-99.85363007 149.85137939]
[-104.55596924 124.15552521]
[-105.96823883 98.07115936]
[-104.06771851 72.01780701]
[-98.88497162 46.41452408]
[-90.50336456 21.67310715]
[-104.15960693 15.46769905]
[-119.62509155 19.73365402]
[-132.51768494 10.18585491]
[-132.94731140 -5.85144472]
[-120.58437347 -16.07579994]
[-104.91267395 -12.64396191]
[-97.95420074 1.81145823]
[-84.29795837 8.01686573]
[-79.19849396 -1.56049609]
[-73.60176849 -10.85603523]
[-67.52331543 -19.84395790]
[-60.97999573 -28.49932480]
[-53.98997116 -36.79811478]
[-46.57263565 -44.71730423]
[-38.74857330 -52.23491287]
[-30.53949547 -59.33008194]
[-21.96818161 -65.98312378]
[-13.05841637 -72.17557526]
[-3.83492351 -77.89025879]
[5.67670298 -83.11130524]
[15.45006847 -87.82424164]
[25.45805359 -92.01597595]
[35.67288589 -95.67488098]
[46.06621933 -98.79080200]
[56.60921860 -101.35509491]
[67.27262115 -103.36064911]
[78.02684021 -104.80189514]
[88.84203339 -105.67482758]
[99.68818665 -105.97703552]
[110.53520203 -105.70767212]
[121.35298920 -104.86748505]
[132.11152649 -103.45880890]
[142.78094482 -101.48554993]
[153.33166504 -98.95318604]
[163.73437500 -95.86874390]
[173.96025085 -92.24078369]
[183.98088074 -88.07936859]
[193.76846313 -83.39604950]
[203.29585266 -78.20381927]
[211.28576660 -90.89875031]
[219.27568054 -103.59368134]
[227.26560974 -116.28861237]
[225.12368774 -132.18803406]
[236.32252502 -143.67565918]
[252.27131653 -141.93917847]
[260.73553467 -128.31063843]
[255.22213745 -113.24472046]
[239.96052551 -108.29869080]
[231.97061157 -95.60376740]
[223.98069763 -82.90883636]
[215.99078369 -70.21390533]
[224.44371033 -64.13529968]
[232.57868958 -57.63732147]
[240.37492371 -50.73657608]
[247.81250000 -43.45069504]
[254.87239075 -35.79829025]
[261.53659058 -27.79891777]
[267.78805542 -19.47301483]
[273.61083984 -10.84185314]
[278.99002075 -1.92748678]
[283.91186523 7.24730778]
[288.36383057 16.65908813]
[292.33450317 26.28380775]
[295.81375122 36.09687424]
[298.79269409 46.07321930]
[301.26373291 56.18734360]
[303.22052002 66.41341400]
[304.65805054 76.72529602]
[305.57272339 87.09664917]
[305.96209717 97.50096893]
[305.82525635 107.91167450]
[305.16253662 118.30216980]
[303.97561646 128.64588928]
[302.26751709 138.91642761]
[300.04263306 149.08753967]
[297.30661011 159.13322449]
[294.06646729 169.02781677]
[290.33050537 178.74604797]
[286.10821533 188.26307678]
[281.41040039 197.55459595]
[276.24911499 206.59684753]
[270.63748169 215.36674500]
[264.58987427 223.84188843]
[258.12170410 232.00059509]
[251.24957275 239.82203674]
[243.99096680 247.28623962]
[236.36447144 254.37411499]
[228.38954163 261.06756592]
[220.08659363 267.34948730]
[211.47680664 273.20379639]
[202.58219910 278.61560059]
[193.42549133 283.57101440]
[184.03007507 288.05740356]
[174.41995239 292.06329346]
[164.61968994 295.57846069]
[154.65432739 298.59390259]
[144.54931641 301.10195923]
[134.33047485 303.09616089]
[124.02392578 304.57147217]
[113.65599060 305.52407837]
[103.25316620 305.95156860]
[92.84203339 305.85284424]
[82.44918060 305.22817993]
[72.10117340 304.07913208]
[61.82445526 302.40866089]
[51.64527130 300.22100830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[44 52]
[45 51]
[83 95]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
