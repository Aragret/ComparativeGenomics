%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGxxxxxxxxxxUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 466.02182007]
[92.50000000 451.02182007]
[92.50000000 436.02182007]
[92.50000000 421.02182007]
[92.50000000 406.02182007]
[92.50000000 391.02182007]
[92.50000000 376.02182007]
[92.50000000 361.02182007]
[92.50000000 346.02182007]
[92.50000000 331.02182007]
[77.77018738 328.28814697]
[63.78981781 322.89288330]
[51.03553772 315.01840210]
[39.94248962 304.93161011]
[30.88946152 292.97497559]
[24.18593407 279.55480957]
[20.06152153 265.12753296]
[18.65810013 250.18403625]
[20.02492142 235.23315430]
[24.11689758 220.78417969]
[30.79607773 207.32962036]
[39.83630371 195.32833862]
[50.93086243 185.18992615]
[63.70289993 177.26077271]
[77.71820831 171.81216431]
[92.50000000 169.03102112]
[92.50000000 154.03102112]
[92.50000000 139.03102112]
[92.50000000 124.03102112]
[76.29463196 108.47322083]
[78.96629333 86.16803741]
[69.45793152 74.56669617]
[59.94957352 62.96535873]
[55.69061661 61.54312134]
[52.46311569 59.06233215]
[50.47655869 55.99061584]
[49.76201248 52.81517792]
[50.18181229 49.98125839]
[41.67072296 37.62968445]
[33.15963364 25.27811241]
[24.64854240 12.92653942]
[11.21969032 18.82700348]
[-3.06385970 22.14491653]
[-17.71034241 22.76761055]
[-32.21578217 20.67518806]
[-46.08134842 15.94114971]
[-58.83048630 8.72981167]
[-70.02532196 -0.70939314]
[-79.28167725 -12.05054569]
[-86.28227997 -24.90249062]
[-90.78762054 -38.82233429]
[-92.64413452 -53.33069229]
[-91.78946686 -67.92822266]
[-88.25454712 -82.11278534]
[-82.16247559 -95.39673615]
[-73.72422791 -107.32368469]
[-63.23137665 -117.48416138]
[-71.48366547 -130.01011658]
[-79.73595428 -142.53608704]
[-94.63092041 -149.39698792]
[-95.86703491 -165.74948120]
[-82.17269897 -174.77151489]
[-67.63545990 -167.18200684]
[-67.20999146 -150.78837585]
[-58.95770264 -138.26240540]
[-50.70541382 -125.73645020]
[-36.50522995 -131.59017944]
[-21.43428993 -134.57688904]
[-6.06561565 -134.58120728]
[9.01609421 -131.60116577]
[23.23670959 -125.74836731]
[36.05452728 -117.24382019]
[46.98089218 -106.40957642]
[55.59885788 -93.65655518]
[61.57905197 -79.46891785]
[64.69231415 -64.38574982]
[64.81842041 -48.98051453]
[61.95079422 -33.83929062]
[56.19675064 -19.53845596]
[47.77354050 -6.62275600]
[37.00011444 4.41544914]
[45.51120377 16.76702118]
[54.02229691 29.11859322]
[62.53338623 41.47016525]
[71.55091858 53.45700073]
[81.05927277 65.05834198]
[90.56763458 76.65968323]
[100.96704102 74.84439087]
[111.19638824 77.45269775]
[119.45686340 84.02593994]
[133.35942078 78.39398956]
[147.26197815 72.76203156]
[154.09449768 66.60017395]
[161.51280212 67.16084290]
[175.52952576 61.81932831]
[189.54623413 56.47781754]
[196.06999207 42.33291245]
[210.36102295 37.11553192]
[223.80583191 43.42211151]
[237.82254028 38.08060074]
[251.83924866 32.73908997]
[265.85595703 27.39757538]
[275.78189087 14.34352207]
[292.01361084 16.68072319]
[297.85336304 32.00486374]
[287.29370117 44.55178452]
[271.19747925 41.41428757]
[257.18075562 46.75580215]
[243.16404724 52.09731293]
[229.14733887 57.43882751]
[223.30947876 71.09367371]
[209.17062378 76.71040344]
[194.88774109 70.49452972]
[180.87103271 75.83604431]
[166.85432434 81.17755127]
[152.89393616 86.66458893]
[138.99137878 92.29653931]
[125.08882141 97.92849731]
[124.35832977 106.35701752]
[120.87686157 114.06758118]
[115.03759003 120.18937683]
[107.50000000 124.03102112]
[107.50000000 139.03102112]
[107.50000000 154.03102112]
[107.50000000 169.03102112]
[122.28179169 171.81216431]
[136.29710388 177.26077271]
[149.06913757 185.18992615]
[160.16369629 195.32833862]
[169.20391846 207.32962036]
[175.88310242 220.78417969]
[179.97508240 235.23315430]
[181.34190369 250.18403625]
[179.93847656 265.12753296]
[175.81407166 279.55480957]
[169.11053467 292.97497559]
[160.05751038 304.93161011]
[148.96446228 315.01840210]
[136.21018982 322.89288330]
[122.22981262 328.28814697]
[107.50000000 331.02182007]
[107.50000000 346.02182007]
[107.50000000 361.02182007]
[107.50000000 376.02182007]
[107.50000000 391.02182007]
[107.50000000 406.02182007]
[107.50000000 421.02182007]
[107.50000000 436.02182007]
[107.50000000 451.02182007]
[107.50000000 466.02182007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 122]
[31 87]
[32 86]
[33 85]
[38 84]
[39 83]
[40 82]
[41 81]
[57 66]
[58 65]
[59 64]
[90 118]
[91 117]
[92 116]
[94 115]
[95 114]
[96 113]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
