%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGxxxxxxxxxxCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.64122009 329.76022339]
[123.64122009 314.76022339]
[123.64122009 299.76022339]
[123.64122009 284.76022339]
[123.64122009 269.76022339]
[123.64122009 254.76022339]
[123.64122009 239.76022339]
[123.64122009 224.76022339]
[123.64122009 209.76022339]
[123.64122009 194.76022339]
[120.84889984 180.02241516]
[115.36186218 166.06202698]
[109.87483215 152.10163879]
[104.38780212 138.14125061]
[98.90077209 124.18086243]
[91.35790253 120.59624481]
[86.06250000 114.98664856]
[83.41873169 108.41849518]
[83.39020538 101.96810150]
[85.54855347 96.55652618]
[89.17890930 92.82072449]
[93.42259979 91.03865051]
[80.02199554 82.62828064]
[80.72035980 67.75006104]
[73.53784943 54.58147812]
[66.35534668 41.41289520]
[59.17283630 28.24431229]
[51.99032593 15.07572937]
[31.63453293 11.71092319]
[19.23248482 -4.31574726]
[4.23978853 -3.84770536]
[-10.75290775 -3.37966323]
[-25.74560356 -2.91162109]
[-40.73830032 -2.44357896]
[-52.72670746 8.21745300]
[-68.51136780 5.34970045]
[-75.98364258 -8.84694290]
[-69.41143799 -23.48202705]
[-53.83639145 -27.32876778]
[-41.20634079 -17.43627548]
[-26.21364594 -17.90431786]
[-11.22094917 -18.37236023]
[3.77174664 -18.84040070]
[18.76444244 -19.30844307]
[20.87086296 -24.98031807]
[24.16759872 -30.05364990]
[28.49479103 -34.28242874]
[33.64261246 -37.46159744]
[31.15749359 -52.25430679]
[28.67237473 -67.04701233]
[24.13772202 -75.05255890]
[26.29277229 -82.17304993]
[24.11593437 -97.01425934]
[21.93909836 -111.85546112]
[19.76226044 -126.69667053]
[4.72950697 -127.20271301]
[-9.97126198 -130.38504028]
[-23.86747742 -136.14132690]
[-36.51243210 -144.28657532]
[-47.49964523 -154.55889893]
[-56.47592163 -166.62812805]
[-63.15271378 -180.10627747]
[-67.31538391 -194.56005859]
[-68.83013153 -209.52485657]
[-67.64824677 -224.51962280]
[-63.80773926 -239.06233215]
[-57.43205643 -252.68548584]
[-48.72615051 -264.95117188]
[-37.96987915 -275.46508789]
[-25.50901794 -283.88925171]
[-11.74412632 -289.95288086]
[2.88230848 -293.46102905]
[17.90010834 -294.30096436]
[32.82651138 -292.44564819]
[47.18170166 -287.95471191]
[60.50421143 -280.97256470]
[72.36577606 -271.72360229]
[82.38510895 -260.50518799]
[90.24011230 -247.67793274]
[95.67829132 -233.65417480]
[98.52482605 -218.88470459]
[98.68821716 -203.84432983]
[96.16320801 -189.01651001]
[91.03096771 -174.87791443]
[83.45648193 -161.88302612]
[73.68322754 -150.44960022]
[62.02538681 -140.94515991]
[48.85770416 -133.67523193]
[34.60346603 -128.87350464]
[36.78030396 -114.03230286]
[38.95714188 -99.19109344]
[41.13397598 -84.34989166]
[43.46508026 -69.53213501]
[45.95019913 -54.73942566]
[48.43531799 -39.94671631]
[62.77675247 -34.25824356]
[71.90626526 -21.64710999]
[72.84863281 -5.96612644]
[65.15890503 7.89322042]
[72.34141541 21.06180382]
[79.52392578 34.23038483]
[86.70643616 47.39896774]
[93.88894653 60.56755066]
[106.77581024 68.03601074]
[106.59118652 83.85614014]
[119.75976562 91.03865051]
[134.72001648 89.94734192]
[143.11442566 86.18096161]
[150.00227356 88.99224091]
[164.98197937 88.21240234]
[180.48535156 81.35076141]
[191.37059021 94.34876251]
[181.89389038 108.40680695]
[165.76182556 103.19211578]
[150.78211975 103.97196198]
[135.81132507 104.90758514]
[120.85107422 105.99890137]
[112.86116028 118.69382477]
[118.34819031 132.65422058]
[123.83522034 146.61460876]
[129.32225037 160.57499695]
[134.80928040 174.53538513]
[137.48367310 159.77572632]
[144.51119995 146.52378845]
[155.22900391 136.02955627]
[168.62612915 129.28292847]
[183.43887329 126.92023468]
[198.27006531 129.16436768]
[211.72071838 135.80363464]
[222.52210999 146.21180725]
[229.65541077 159.40710449]
[232.44775391 174.14491272]
[230.63577271 189.03506470]
[224.39038086 202.67306519]
[214.30065918 213.77249146]
[201.31832886 221.28642273]
[186.66793823 224.50607300]
[171.73139954 223.12777710]
[157.91758728 217.28153992]
[146.52949524 207.51878357]
[138.64122009 194.76022339]
[138.64122009 209.76022339]
[138.64122009 224.76022339]
[138.64122009 239.76022339]
[138.64122009 254.76022339]
[138.64122009 269.76022339]
[138.64122009 284.76022339]
[138.64122009 299.76022339]
[138.64122009 314.76022339]
[138.64122009 329.76022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[22 105]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[48 95]
[49 94]
[50 93]
[52 92]
[53 91]
[54 90]
[55 89]
[106 117]
[107 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
