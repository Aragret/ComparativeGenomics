%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAAxxxxxxxxxxUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.02324677 456.12310791]
[73.02324677 441.12310791]
[73.02324677 426.12310791]
[73.02324677 411.12310791]
[73.02324677 396.12310791]
[73.02324677 381.12310791]
[73.02324677 366.12310791]
[73.02324677 351.12310791]
[73.02324677 336.12310791]
[73.02324677 321.12310791]
[58.55838776 317.28677368]
[45.56952667 309.83114624]
[34.94505692 299.25924683]
[27.41344833 286.28747559]
[23.49330139 271.79702759]
[23.45763397 256.77410889]
[27.31488609 242.24279785]
[34.80792618 229.19514465]
[45.43118668 218.52359009]
[58.46477127 210.95979309]
[73.02324677 207.02455139]
[73.02324677 192.02455139]
[64.00722504 204.01251221]
[50.50839233 210.55326843]
[35.51255035 210.20004272]
[22.33664894 203.03097534]
[13.89507294 190.63179016]
[12.05502129 175.74507141]
[17.22349739 161.66363525]
[28.25728226 151.50215149]
[42.71580124 147.50827026]
[57.40097046 150.56536865]
[69.06455994 159.99726868]
[75.12703705 173.71966553]
[78.53002167 159.11077881]
[81.93299866 144.50187683]
[85.33597565 129.89299011]
[66.06185913 112.09926605]
[64.76110077 83.84669495]
[50.74438858 78.50518036]
[36.72767639 73.16367340]
[24.86587906 82.92037964]
[9.71228504 85.42321014]
[-4.65686750 79.99890900]
[-14.37634754 68.10659027]
[-16.83166504 52.94522095]
[-11.36235046 38.59314346]
[0.56037742 28.91098785]
[15.72936440 26.50320625]
[30.06422997 32.01747894]
[39.70896530 43.97049713]
[42.06918716 59.14695740]
[56.08589935 64.48847198]
[70.10261536 69.82997894]
[82.45418549 61.31889343]
[82.45418549 46.31889343]
[82.45418549 31.31889343]
[72.87145996 15.62968445]
[82.15544128 0.77008688]
[74.13272095 -12.86613369]
[81.60356903 -25.75161552]
[81.29151917 -40.74837112]
[80.97946167 -55.74512482]
[66.29477692 -59.18180847]
[52.92648315 -66.16318512]
[41.71493149 -76.25039673]
[33.36488342 -88.80935669]
[28.40123177 -103.05060577]
[27.13599777 -118.07891083]
[29.64871216 -132.94958496]
[35.78142548 -146.72785950]
[45.14862823 -158.54759216]
[57.16149139 -167.66581726]
[71.06488037 -173.50933838]
[85.98480988 -175.71081543]
[100.98339844 -174.13188171]
[115.11783600 -168.87178040]
[127.49960327 -160.26116943]
[137.35038757 -148.84132385]
[144.05093384 -135.33009338]
[147.18008423 -120.57681274]
[146.54109192 -105.50888824]
[142.17414856 -91.07349396]
[134.35377502 -78.17804718]
[123.57153320 -67.63318634]
[110.50522614 -60.10174942]
[95.97621155 -56.05717850]
[96.28826904 -41.06042480]
[96.60032654 -26.06367302]
[104.60072327 -13.50012016]
[97.15219879 0.45803067]
[105.68222046 9.09203339]
[106.02747345 21.62597847]
[97.45418549 31.31889343]
[97.45418549 46.31889343]
[97.45418549 61.31889343]
[112.93925476 62.83153534]
[126.81002808 70.38495636]
[140.05261230 63.33981705]
[148.27595520 49.15149307]
[164.67239380 49.44953156]
[172.37467957 63.92733765]
[163.45935059 77.69138336]
[147.09774780 76.58240509]
[133.85516357 83.62754059]
[137.56132507 98.16247559]
[152.56051636 98.00643921]
[167.55969238 97.85040283]
[182.55888367 97.69436646]
[197.55807495 97.53833008]
[209.76568604 87.12900543]
[225.48725891 90.32451630]
[232.66258240 104.67353821]
[225.78733826 119.16873169]
[210.13562012 122.69062042]
[197.71411133 112.53751373]
[182.71492004 112.69355011]
[167.71572876 112.84958649]
[152.71655273 113.00562286]
[137.71736145 113.16165924]
[132.23661804 121.26285553]
[125.15240479 127.52606201]
[117.01814270 131.67442322]
[108.42188263 133.58656311]
[99.94487000 133.29595947]
[96.54188538 147.90486145]
[93.13890839 162.51374817]
[89.73593140 177.12263489]
[88.02324677 192.02455139]
[88.02324677 207.02455139]
[102.58171082 210.95979309]
[115.61530304 218.52359009]
[126.23856354 229.19514465]
[133.73159790 242.24279785]
[137.58885193 256.77410889]
[137.55319214 271.79702759]
[133.63304138 286.28747559]
[126.10143280 299.25924683]
[115.47695923 309.83114624]
[102.48809814 317.28677368]
[88.02324677 321.12310791]
[88.02324677 336.12310791]
[88.02324677 351.12310791]
[88.02324677 366.12310791]
[88.02324677 381.12310791]
[88.02324677 396.12310791]
[88.02324677 411.12310791]
[88.02324677 426.12310791]
[88.02324677 441.12310791]
[88.02324677 456.12310791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[34 128]
[35 127]
[36 126]
[37 125]
[39 54]
[40 53]
[41 52]
[55 96]
[56 95]
[57 94]
[59 91]
[61 89]
[62 88]
[63 87]
[98 105]
[99 104]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
