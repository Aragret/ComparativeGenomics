%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAxxxxxxxxxxUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.79908752 264.64794922]
[72.79908752 249.64796448]
[72.79908752 234.64796448]
[72.79908752 219.64796448]
[72.79908752 204.64796448]
[72.79908752 189.64796448]
[72.79908752 174.64796448]
[72.79908752 159.64796448]
[72.79908752 144.64796448]
[72.79908752 129.64796448]
[71.80686188 109.88005066]
[80.71879578 97.00147247]
[92.69030762 94.49340820]
[86.34317780 80.90245056]
[79.99604797 67.31150055]
[73.64891815 53.72055054]
[67.30179596 40.12960052]
[60.95466232 26.53865051]
[46.49997330 22.53091049]
[34.06053543 30.91305351]
[31.28414726 46.47156143]
[18.27181816 55.44122696]
[2.74353218 52.50049973]
[-6.08805513 39.39406586]
[-2.98331952 23.89773941]
[10.21575451 15.20521355]
[25.67839050 18.47361183]
[38.11783218 10.09146976]
[33.33917236 1.90216029]
[30.96974373 -7.06590652]
[31.07575226 -16.13533401]
[33.54052353 -24.65009880]
[38.08061600 -32.02300262]
[44.27375793 -37.77611160]
[51.59601212 -41.57140732]
[48.80368805 -56.30921173]
[46.01136398 -71.04701996]
[43.21903992 -85.78482056]
[40.42671204 -100.52262878]
[37.63438797 -115.26043701]
[34.38356400 -129.90393066]
[23.47644043 -141.36453247]
[27.82923126 -155.60891724]
[24.12306976 -170.14385986]
[20.41690826 -184.67878723]
[16.71074677 -199.21372986]
[12.70300674 -213.66841125]
[8.39542294 -228.03660583]
[4.08783770 -242.40478516]
[-10.80822277 -240.39135742]
[-25.83585358 -240.73310852]
[-40.62498856 -243.42160034]
[-54.81142807 -248.39065552]
[-68.04581451 -255.51788330]
[-80.00225067 -264.62777710]
[-90.38629150 -275.49600220]
[-98.94222260 -287.85488892]
[-105.45934296 -301.40014648]
[-109.77716827 -315.79815674]
[-111.78936005 -330.69439697]
[-111.44638062 -345.72198486]
[-108.75666046 -360.51089478]
[-103.78643799 -374.69692993]
[-96.65811920 -387.93072510]
[-87.54724121 -399.88641357]
[-76.67816162 -410.26956177]
[-64.31855011 -418.82446289]
[-50.77276993 -425.34048462]
[-36.37439728 -429.65710449]
[-21.47800636 -431.66806030]
[-6.45043135 -431.32385254]
[8.33825779 -428.63290405]
[22.52387619 -423.66152954]
[35.75709152 -416.53210449]
[47.71202469 -407.42022705]
[58.09427261 -396.55032349]
[66.64816284 -384.19000244]
[73.16304779 -370.64367676]
[77.47849274 -356.24493408]
[79.48822784 -341.34838867]
[79.14276886 -326.32083130]
[76.45060730 -311.53237915]
[71.47804260 -297.34716797]
[64.34754181 -284.11453247]
[55.23469162 -272.16036987]
[44.36390305 -261.77899170]
[32.00287628 -253.22613525]
[18.45602226 -246.71237183]
[22.76360703 -232.34417725]
[27.07119179 -217.97599792]
[30.83239365 -214.93809509]
[32.68648148 -209.47973633]
[31.24568367 -202.91989136]
[34.95184326 -188.38494873]
[38.65800476 -173.85002136]
[42.36416626 -159.31507874]
[53.00619888 -148.89411926]
[48.91849899 -133.61009216]
[51.81333542 -131.49174500]
[53.79750824 -127.83596802]
[54.14605713 -123.09983826]
[52.37219620 -118.05275726]
[55.16452026 -103.31495667]
[57.95684433 -88.57714844]
[60.74916840 -73.83934021]
[63.54149246 -59.10153580]
[66.33381653 -44.36373138]
[82.71619415 -39.63846970]
[94.47637177 -26.48354530]
[97.54621887 -8.50344276]
[90.36526489 8.90938759]
[74.54561615 20.19152069]
[80.89274597 33.78247070]
[87.23987579 47.37342072]
[93.58700562 60.96437454]
[99.93413544 74.55532074]
[106.28125763 88.14627838]
[117.37257385 98.24492645]
[131.49737549 103.29367828]
[147.52484131 99.82199860]
[158.34326172 112.14652252]
[152.82356262 127.58883667]
[136.64396667 130.26321411]
[126.44862366 117.41848755]
[112.32382202 112.36972809]
[106.19263458 116.68928528]
[116.16781616 127.89177704]
[126.14299011 139.09426880]
[136.11816406 150.29676819]
[146.09335327 161.49925232]
[158.60969543 169.76611328]
[161.72837830 184.43832397]
[153.65657043 197.08134460]
[139.03446960 200.42713928]
[126.26782227 192.55232239]
[122.69580078 177.98335266]
[115.50441742 164.81961060]
[108.31303406 151.65588379]
[101.12165070 138.49214172]
[93.93026733 125.32839966]
[87.79908752 129.64796448]
[87.79908752 144.64796448]
[87.79908752 159.64796448]
[87.79908752 174.64796448]
[87.79908752 189.64796448]
[87.79908752 204.64796448]
[87.79908752 219.64796448]
[87.79908752 234.64796448]
[87.79908752 249.64796448]
[87.79908752 264.64794922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 117]
[14 116]
[15 115]
[16 114]
[17 113]
[18 112]
[19 28]
[20 27]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 98]
[43 96]
[44 95]
[45 94]
[46 93]
[47 90]
[48 89]
[49 88]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
