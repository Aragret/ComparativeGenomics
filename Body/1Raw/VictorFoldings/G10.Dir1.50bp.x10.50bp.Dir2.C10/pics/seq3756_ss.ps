%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[249.39064026 205.12797546]
[236.77951050 197.00643921]
[224.16838074 188.88488770]
[209.27877808 188.49896240]
[201.86564636 174.52197266]
[189.25453186 166.40043640]
[176.64340210 158.27888489]
[164.03227234 150.15734863]
[151.42114258 142.03581238]
[138.81001282 133.91426086]
[126.19888306 125.79272461]
[113.58775330 117.67118073]
[97.45480347 122.14542389]
[82.75755310 114.12783813]
[68.63275146 119.17658997]
[54.50794601 124.22534943]
[53.69247055 139.37826538]
[47.15530777 153.02775574]
[35.92070770 163.10729980]
[21.72143745 168.10412598]
[6.73158026 167.28617859]
[-6.76633930 160.80917358]
[-16.72891998 149.68818665]
[-30.85372353 154.73693848]
[-44.97852707 159.78570557]
[-59.10332870 164.83445740]
[-65.63779449 179.22460938]
[-80.46288300 184.70111084]
[-94.78314209 178.01487732]
[-100.10260773 163.13272095]
[-93.26534271 148.88394165]
[-78.32776642 143.72212219]
[-64.15208435 150.70965576]
[-50.02728271 145.66090393]
[-35.90248108 140.61213684]
[-21.77767563 135.56338501]
[-21.12187576 120.64698029]
[-14.78798962 107.08131409]
[-3.71298838 96.94675446]
[10.43649387 91.81063843]
[25.51492310 92.48488617]
[39.22319412 98.89786530]
[49.45919037 110.10054779]
[63.58399200 105.05178833]
[77.70879364 100.00303650]
[78.34343719 94.71881104]
[80.21260834 89.73564911]
[83.20977020 85.33760071]
[87.16406250 81.77539062]
[83.15631866 67.32070160]
[79.14858246 52.86601257]
[64.18809509 54.37991333]
[49.18696213 53.34353256]
[34.57680130 49.78669357]
[20.77796555 43.81172943]
[8.18748283 35.59055328]
[-2.83239746 25.35970306]
[-11.96461010 13.41354465]
[-18.94640350 0.09579082]
[-23.57689667 -14.21038055]
[-25.72286034 -29.09335136]
[-25.32255363 -44.12491226]
[-22.38749313 -58.87257004]
[-17.00212669 -72.91201019]
[-9.32139969 -85.83928680]
[0.43369594 -97.28245544]
[11.98248672 -106.91226959]
[24.99269104 -114.45167542]
[39.08998108 -119.68373108]
[53.86874771 -122.45791626]
[68.90377808 -122.69439697]
[83.76248169 -120.38638306]
[98.01734161 -115.60027313]
[111.25822449 -108.47377014]
[123.10416412 -99.21192169]
[133.21432495 -88.08120728]
[141.29780579 -75.40188599]
[147.12205505 -61.53876495]
[150.51947021 -46.89070892]
[151.39231873 -31.87917519]
[149.71548462 -16.93607521]
[145.53721619 -2.49135232]
[138.97772217 11.03939152]
[130.22573853 23.26684761]
[119.53306580 33.83921051]
[107.20736694 42.45228958]
[93.60327148 48.85827255]
[97.61100769 63.31296158]
[101.61875153 77.76764679]
[117.95183563 86.78525543]
[121.70929718 105.06005096]
[134.32041931 113.18159485]
[146.93154907 121.30313873]
[159.54267883 129.42468262]
[172.15380859 137.54621887]
[184.76493835 145.66777039]
[197.37606812 153.78930664]
[209.98719788 161.91084290]
[225.77883911 162.87768555]
[232.28993225 176.27377319]
[244.90106201 184.39530945]
[257.51217651 192.51684570]
[271.38372803 178.14292908]
[288.07379150 167.17747498]
[306.76251221 160.15606689]
[326.53259277 157.42065430]
[346.41424561 159.10285950]
[365.43267822 165.11766052]
[382.65609741 175.16769409]
[397.24118042 188.75793457]
[408.47445679 205.22010803]
[415.80712891 223.74552917]
[418.88208008 243.42485046]
[417.55093384 263.29263306]
[432.04653931 267.14978027]
[446.54211426 271.00695801]
[461.03771973 274.86410522]
[476.72113037 270.07217407]
[488.52658081 281.45474243]
[484.30963135 297.30245972]
[468.40832520 301.31250000]
[457.18057251 289.35971069]
[442.68496704 285.50253296]
[428.18936157 281.64538574]
[413.69375610 277.78823853]
[409.39968872 287.84933472]
[403.91485596 297.31573486]
[397.32019043 306.04714966]
[389.71304321 313.91409302]
[381.20578003 320.79992676]
[371.92404175 326.60241699]
[362.00512695 331.23541260]
[351.59564209 334.63003540]
[340.84954834 336.73568726]
[329.92593384 337.52087402]
[318.98635864 336.97366333]
[308.19284058 335.10174561]
[297.70516968 331.93255615]
[287.67871094 327.51266479]
[278.26196289 321.90716553]
[269.59451294 315.19873047]
[261.80490112 307.48638916]
[255.00860596 298.88409424]
[249.30651855 289.51892090]
[244.78335571 279.52932739]
[241.50634766 269.06304932]
[239.52435303 258.27490234]
[238.86701965 247.32449341]
[239.54444885 236.37390137]
[241.54692078 225.58523560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 45]
[15 44]
[16 43]
[23 36]
[24 35]
[25 34]
[26 33]
[49 89]
[50 88]
[51 87]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
