%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAxxxxxxxxxxGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.18476105 271.12905884]
[86.87678528 256.13223267]
[86.56880951 241.13539124]
[86.26083374 226.13854980]
[85.95285034 211.14170837]
[85.64487457 196.14486694]
[85.33689880 181.14804077]
[85.02892303 166.15119934]
[84.72093964 151.15435791]
[71.09396362 144.88494873]
[59.50491333 154.40829468]
[47.91586685 163.93162537]
[36.32681656 173.45497131]
[24.73777008 182.97830200]
[29.19316864 197.51164246]
[27.74277878 212.64321899]
[20.60777283 226.06559753]
[8.87618637 235.73194885]
[-5.66299772 240.16822815]
[-20.79265976 238.69793701]
[-34.20563507 231.54527283]
[-43.85654449 219.80097961]
[-48.27369308 205.25598145]
[-46.78350067 190.12826538]
[-39.61320496 176.72470093]
[-27.85622597 167.08924866]
[-13.30542183 162.69123840]
[1.82032013 164.20133972]
[15.21443176 171.38925171]
[26.80348015 161.86592102]
[38.39252853 152.34257507]
[49.98157883 142.81924438]
[61.57062531 133.29589844]
[51.54383469 112.08219910]
[52.20605469 89.04965210]
[63.03182602 69.18824768]
[81.33507538 56.62816238]
[102.92476654 53.78232193]
[106.28401947 39.16331482]
[105.15463257 30.03532028]
[109.86524200 24.28011894]
[113.52394867 9.73316479]
[117.18265533 -4.81378937]
[120.84136200 -19.36074448]
[119.37093353 -24.49816513]
[119.99664307 -29.20072937]
[122.18879700 -32.73117447]
[125.19912720 -34.67671204]
[129.74641418 -48.97084427]
[134.29371643 -63.26497269]
[133.16802979 -67.60461426]
[133.48802185 -71.65692139]
[134.97692871 -74.99307251]
[137.24482727 -77.32241058]
[139.84526062 -78.51773834]
[145.54992676 -92.39061737]
[151.25459290 -106.26349640]
[156.95924377 -120.13637543]
[162.66390991 -134.00926208]
[147.73739624 -158.35763550]
[164.22172546 -188.24932861]
[162.99110413 -203.19876099]
[161.76049805 -218.14819336]
[146.91297913 -220.83401489]
[133.26693726 -227.27201843]
[121.75276947 -237.02323914]
[113.15554810 -249.42285156]
[108.06143188 -263.62539673]
[106.81775665 -278.66253662]
[109.50930786 -293.50903320]
[115.95257568 -307.15258789]
[125.70825195 -318.66296387]
[138.11117554 -327.25540161]
[152.31568909 -332.34405518]
[167.35331726 -333.58190918]
[182.19874573 -330.88461304]
[195.83981323 -324.43609619]
[207.34645081 -314.67596436]
[215.93409729 -302.26974487]
[221.01724243 -288.06326294]
[222.24929810 -273.02514648]
[219.54629517 -258.18075562]
[213.09248352 -244.54217529]
[203.32792664 -233.03932190]
[190.91836548 -224.45646667]
[176.70993042 -219.37879944]
[177.94053650 -204.42936707]
[179.17115784 -189.47993469]
[185.95210266 -186.27545166]
[192.36129761 -199.83723450]
[205.92298889 -193.42781067]
[199.51399231 -179.86647034]
[206.29495239 -176.66198730]
[218.62623596 -185.20243835]
[230.95751953 -193.74290466]
[243.20046997 -202.40951538]
[255.35380554 -211.20135498]
[261.55718994 -226.38194275]
[277.84002686 -228.33154297]
[287.45193481 -215.04460144]
[280.50500488 -200.18955994]
[264.14562988 -199.04801941]
[251.99230957 -190.25617981]
[248.39404297 -183.74736023]
[239.49797058 -181.41162109]
[227.16668701 -172.87115479]
[214.83540344 -164.33070374]
[214.34599304 -152.44369507]
[210.21890259 -141.94050598]
[203.27223206 -133.83660889]
[194.57238770 -128.77778625]
[185.28718567 -126.99361420]
[176.53678894 -128.30459595]
[170.83213806 -114.43171692]
[165.12747192 -100.55883026]
[159.42280579 -86.68595123]
[153.71813965 -72.81307220]
[148.58784485 -58.71768188]
[144.04054260 -44.42355347]
[139.49325562 -30.12942314]
[135.38832092 -15.70203781]
[131.72961426 -1.15508378]
[128.07090759 13.39187050]
[124.41219330 27.93882370]
[120.90303040 42.52257538]
[117.54376984 57.14158249]
[124.37718201 60.31157303]
[130.64358521 64.56948090]
[136.17005920 69.81470490]
[140.80146790 75.91923523]
[144.40467834 82.73072815]
[146.87245178 90.07633972]
[148.12654114 97.76704407]
[148.12014771 105.60256195]
[146.83946228 113.37653351]
[144.30444336 120.88197327]
[140.56857300 127.91675568]
[135.71792603 134.28909302]
[129.86909485 139.82272339]
[123.16648102 144.36178589]
[115.77875519 147.77519226]
[107.89456940 149.96038818]
[99.71778107 150.84637451]
[100.02575684 165.84321594]
[100.33373260 180.84005737]
[100.64171600 195.83689880]
[100.94969177 210.83374023]
[101.25766754 225.83056641]
[101.56564331 240.82740784]
[101.87362671 255.82424927]
[102.18160248 270.82107544]
[104.76737976 290.02951050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[38 126]
[39 125]
[41 124]
[42 123]
[43 122]
[44 121]
[48 120]
[49 119]
[50 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 88]
[62 87]
[63 86]
[93 107]
[94 106]
[95 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
