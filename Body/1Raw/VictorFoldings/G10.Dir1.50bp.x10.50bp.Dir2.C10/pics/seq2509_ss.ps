%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUxxxxxxxxxxGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.89130402 266.62933350]
[74.89130402 251.62931824]
[74.89130402 236.62931824]
[74.89130402 221.62931824]
[74.89130402 206.62931824]
[74.89130402 191.62931824]
[74.89130402 176.62931824]
[74.89130402 161.62931824]
[74.89130402 146.62931824]
[74.89130402 131.62931824]
[68.34472656 127.96977234]
[55.45977783 135.64949036]
[55.25157166 120.65066528]
[48.70499420 116.99111176]
[35.92763519 124.84854126]
[23.15028000 132.70596313]
[26.21986580 147.55027771]
[24.02420807 162.54876709]
[16.82844734 175.89031982]
[5.50150251 185.96385193]
[-8.58884048 191.55294800]
[-23.74110603 191.98269653]
[-38.12557983 187.20121765]
[-50.00527573 177.78587341]
[-57.94565201 164.87361145]
[-60.98787689 150.02368164]
[-58.76458359 135.02925110]
[-51.54424667 121.70098877]
[-40.19875717 111.64834595]
[-26.09813881 106.08522034]
[-10.94510746 105.68339539]
[3.43053269 110.49138641]
[15.29285336 119.92860413]
[28.07021141 112.07118225]
[40.84756851 104.21375275]
[95.65525055 67.62576294]
[91.94908905 53.09082794]
[88.24292755 38.55589294]
[84.53676605 24.02095604]
[80.83060455 9.48601913]
[77.12444305 -5.04891729]
[73.41828156 -19.58385277]
[69.71212006 -34.11878967]
[33.78442764 -44.94525146]
[22.69311333 -55.04389954]
[11.60179806 -65.14254761]
[0.51048285 -75.24120331]
[-10.58083248 -85.33985138]
[-24.32214355 -78.84024811]
[-39.50499344 -78.09896851]
[-53.81410980 -83.22904205]
[-65.06745148 -93.44817352]
[-71.54897308 -107.19802094]
[-72.27027893 -122.38183594]
[-67.12139130 -136.68418884]
[-56.88746262 -147.92408752]
[-43.12909698 -154.38751221]
[-27.94434929 -155.08883667]
[-13.64878178 -149.92114258]
[-2.42236233 -139.67243958]
[4.02296019 -125.90557861]
[4.70432091 -110.71992493]
[-0.48218298 -96.43116760]
[10.60913277 -86.33251953]
[21.70044708 -76.23386383]
[32.79176331 -66.13521576]
[43.88307953 -56.03656769]
[51.30368042 -57.12498474]
[46.41168594 -71.30484772]
[41.51969147 -85.48470306]
[36.62769699 -99.66455841]
[28.12858582 -112.02437592]
[29.22972107 -126.98390961]
[39.44697952 -137.96604919]
[54.28825378 -140.14242554]
[67.22843933 -132.55615234]
[72.57827759 -118.54261780]
[67.98651123 -104.26412201]
[67.37263489 -89.27668762]
[66.75876617 -74.28925323]
[66.14488983 -59.30182266]
[73.56549072 -60.39023972]
[81.28957367 -73.24864197]
[89.01365662 -86.10704803]
[96.73774719 -98.96544647]
[92.66986847 -114.23725128]
[100.66442108 -127.87039948]
[115.97837830 -131.77658081]
[129.52624512 -123.63833618]
[133.27029419 -108.28393555]
[124.98927307 -94.82287598]
[109.59614563 -91.24136353]
[101.87206268 -78.38295746]
[94.14797974 -65.52455902]
[86.42388916 -52.66615677]
[84.24705505 -37.82495117]
[87.95321655 -23.29001427]
[91.65937805 -8.75507832]
[95.36553955 5.77985764]
[99.07170105 20.31479454]
[102.77786255 34.84973145]
[106.48402405 49.38466644]
[110.19018555 63.91960144]
[122.54175568 72.43069458]
[137.44366455 70.71800232]
[152.34556580 69.00531006]
[167.24746704 67.29262543]
[176.87617493 54.76012421]
[192.55714417 52.78970337]
[204.98713684 62.55037308]
[206.79167175 78.25130463]
[196.90013123 90.57741547]
[181.18098450 92.21583557]
[168.96015930 82.19452667]
[154.05825806 83.90721893]
[139.15634155 85.61990356]
[124.25444794 87.33259583]
[121.76932526 102.12530518]
[135.29351807 108.61346436]
[148.81770325 115.10163116]
[162.34190369 121.58979797]
[175.86608887 128.07795715]
[192.76216125 129.47763062]
[196.09448242 146.10086060]
[181.04338074 153.90473938]
[169.37791443 141.60215759]
[155.85372925 135.11398315]
[142.32954407 128.62582397]
[128.80535889 122.13765717]
[115.28115845 115.64949036]
[108.93370056 119.64444733]
[117.69169617 131.82218933]
[126.44969940 143.99993896]
[139.00247192 152.21138000]
[138.87081909 167.21080017]
[126.17584229 175.20062256]
[112.59531403 168.83122253]
[110.62153625 153.96183777]
[103.43015289 140.79811096]
[96.23876953 127.63436890]
[89.89130402 131.62931824]
[89.89130402 146.62931824]
[89.89130402 161.62931824]
[89.89130402 176.62931824]
[89.89130402 191.62931824]
[89.89130402 206.62931824]
[89.89130402 221.62931824]
[89.89130402 236.62931824]
[89.89130402 251.62931824]
[89.89130402 266.62933350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 35]
[15 34]
[16 33]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[82 95]
[83 94]
[84 93]
[85 92]
[104 117]
[105 116]
[106 115]
[107 114]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
