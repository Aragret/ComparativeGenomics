%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 425.78018188]
[92.50000000 410.78018188]
[92.50000000 395.78018188]
[92.50000000 380.78018188]
[92.50000000 365.78018188]
[92.50000000 350.78018188]
[92.50000000 335.78018188]
[92.50000000 320.78018188]
[92.50000000 305.78018188]
[92.50000000 290.78018188]
[77.84561920 287.69070435]
[64.14855957 281.61935425]
[52.00850296 272.82928467]
[41.95753098 261.70275879]
[34.43677902 248.72448730]
[29.77709579 234.46055603]
[28.18446350 219.53369141]
[29.73092079 204.59608459]
[34.35128784 190.30091858]
[41.84592056 177.27381897]
[51.88933182 166.08538818]
[64.04432678 157.22633362]
[77.78102875 151.08583069]
[92.50000000 147.93452454]
[92.50000000 132.93452454]
[82.30149078 128.76969910]
[73.98548889 121.54479218]
[68.43651581 112.02826691]
[66.24478912 101.23236084]
[67.64344025 90.30536652]
[72.48369598 80.40954590]
[62.50096893 69.21378326]
[52.51824188 58.01801682]
[40.16534424 66.56117249]
[26.85619736 73.52150726]
[12.79256916 78.79351044]
[-1.81234193 82.29724884]
[-16.73712921 83.97960663]
[-31.75553703 83.81509399]
[-46.63988876 81.80619049]
[-61.16454315 77.98335266]
[-75.10930634 72.40454102]
[-88.26278687 65.15432739]
[-100.42557526 56.34261703]
[-111.41328430 46.10299683]
[-121.05934906 34.59069824]
[-129.21752930 21.98024178]
[-135.76416016 8.46280003]
[-140.60000610 -5.75670528]
[-143.65171814 -20.46271133]
[-144.87307739 -35.43227768]
[-144.24552917 -50.43846893]
[-141.77862549 -65.25379944]
[-137.50973511 -79.65366364]
[-131.50358582 -93.41977692]
[-123.85121918 -106.34343719]
[-114.66865540 -118.22872162]
[-104.09509277 -128.89546204]
[-92.29082489 -138.18196106]
[-79.43479919 -145.94741821]
[-65.72192383 -152.07411194]
[-51.36006165 -156.46919250]
[-36.56694794 -159.06599426]
[-21.56683922 -159.82516479]
[-6.58713245 -158.73519897]
[8.14508247 -155.81262207]
[22.40646935 -151.10174561]
[35.98083115 -144.67396545]
[48.66238022 -136.62672424]
[60.25886917 -127.08204651]
[70.59449768 -116.18459320]
[79.51258087 -104.09958649]
[86.87792969 -91.01023102]
[92.57887268 -77.11495209]
[96.52899933 -62.62439728]
[98.66841888 -47.75824356]
[98.96469879 -32.74185562]
[97.41334534 -17.80288315]
[94.03787994 -3.16779351]
[88.88948059 10.94154930]
[82.04618073 24.31125069]
[73.61174011 36.73862839]
[63.71400833 48.03528976]
[73.69673157 59.23105621]
[83.67945862 70.42681885]
[107.66298676 67.10301971]
[127.70896149 80.68299866]
[141.61151123 75.05104828]
[155.51406860 69.41909027]
[169.29644775 63.49912643]
[182.95269775 57.29371643]
[196.60893250 51.08831024]
[210.26518250 44.88290405]
[223.92141724 38.67749786]
[237.57765198 32.47208786]
[251.16860962 26.12495995]
[264.69281006 19.63679504]
[278.21697998 13.14862919]
[291.74118042 6.66046429]
[296.74606323 -8.33042240]
[310.92233276 -15.31674862]
[325.85946655 -10.15365124]
[332.69552612 4.09569597]
[327.37478638 18.97740746]
[313.05395508 25.66242790]
[298.22933960 20.18465424]
[284.70513916 26.67281914]
[271.18096924 33.16098404]
[257.65676880 39.64915085]
[252.95603943 45.41532135]
[243.78306580 46.12833023]
[230.12683105 52.33373642]
[216.47058105 58.53914642]
[202.81434631 64.74455261]
[189.15809631 70.94995880]
[175.50186157 77.15536499]
[172.99877930 81.29180145]
[167.84024048 83.86487579]
[161.14602661 83.32164764]
[147.24346924 88.95359802]
[133.34091187 94.58555603]
[133.44445801 104.73302460]
[130.52925110 114.45327759]
[124.85846710 122.86896515]
[116.94391632 129.22047424]
[107.50000000 132.93452454]
[107.50000000 147.93452454]
[122.21897125 151.08583069]
[135.95567322 157.22633362]
[148.11067200 166.08538818]
[158.15408325 177.27381897]
[165.64871216 190.30091858]
[170.26907349 204.59608459]
[171.81553650 219.53369141]
[170.22290039 234.46055603]
[165.56321716 248.72448730]
[158.04246521 261.70275879]
[147.99150085 272.82928467]
[135.85144043 281.61935425]
[122.15438080 287.69070435]
[107.50000000 290.78018188]
[107.50000000 305.78018188]
[107.50000000 320.78018188]
[107.50000000 335.78018188]
[107.50000000 350.78018188]
[107.50000000 365.78018188]
[107.50000000 380.78018188]
[107.50000000 395.78018188]
[107.50000000 410.78018188]
[107.50000000 425.78018188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[31 85]
[32 84]
[33 83]
[87 121]
[88 120]
[89 119]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
