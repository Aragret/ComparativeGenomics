%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACxxxxxxxxxxUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 321.28298950]
[92.50000000 306.28298950]
[92.50000000 291.28298950]
[92.50000000 276.28298950]
[92.50000000 261.28298950]
[92.50000000 246.28297424]
[92.50000000 231.28297424]
[92.50000000 216.28297424]
[92.50000000 201.28297424]
[92.50000000 186.28297424]
[85.26284027 185.34529114]
[78.13031006 183.80166626]
[71.15305328 181.66307068]
[64.38060760 178.94467163]
[57.86104965 175.66578674]
[51.64067078 171.84968567]
[45.76363373 167.52346802]
[40.27166367 162.71784973]
[35.20375443 157.46693420]
[30.59588814 151.80802917]
[26.48077774 145.78128052]
[22.88764000 139.42950439]
[19.84198570 132.79779053]
[5.51938772 137.25460815]
[-8.80320930 141.71142578]
[-23.12580681 146.16822815]
[-27.97695732 160.90750122]
[-40.58480072 169.95304871]
[-56.10136032 169.82667542]
[-68.56020355 160.57699585]
[-73.17065430 145.76066589]
[-68.15989685 131.07489014]
[-55.45466995 122.16664886]
[-39.94039536 122.46133423]
[-27.58262253 131.84564209]
[-13.26002502 127.38882446]
[1.06257188 122.93200684]
[15.38516903 118.47518921]
[13.47635174 96.17110443]
[17.34787750 74.12281036]
[26.74110603 53.80328369]
[41.02850723 36.56999588]
[59.25558853 23.57425117]
[80.20465851 15.68424320]
[102.47619629 13.42707920]
[124.58229828 16.95355034]
[130.06933594 2.99316049]
[135.55636597 -10.96722889]
[141.04339600 -24.92761993]
[146.53042603 -38.88800812]
[142.47525024 -42.85982132]
[139.57179260 -47.93899155]
[138.12200928 -53.78672028]
[138.32704163 -59.98244858]
[140.26539612 -66.05406952]
[139.64141846 -81.04109192]
[139.01744080 -96.02810669]
[138.39346313 -111.01512146]
[123.98351288 -123.23611450]
[123.03075409 -141.78846741]
[135.67329407 -154.96281433]
[134.42642212 -169.91090393]
[133.17955017 -184.85899353]
[131.93267822 -199.80708313]
[117.20216370 -203.25196838]
[104.25819397 -211.08197021]
[94.36888885 -222.52996826]
[88.50308990 -236.47441101]
[87.23547363 -251.54916382]
[90.69023895 -266.27737427]
[98.52890778 -279.21609497]
[109.98352814 -289.09771729]
[123.93190765 -294.95416260]
[139.00750732 -296.21170044]
[153.73338318 -292.74707031]
[166.66685486 -284.89971924]
[176.54081726 -273.43847656]
[182.38790894 -259.48617554]
[183.63533020 -244.40974426]
[180.16082764 -229.68618774]
[172.30482483 -216.75798035]
[160.83697510 -206.89170837]
[146.88076782 -201.05395508]
[148.12763977 -186.10586548]
[149.37451172 -171.15777588]
[150.62138367 -156.20968628]
[160.78346252 -150.85966492]
[167.14195251 -141.15208435]
[168.00381470 -129.45887756]
[163.03648376 -118.70552063]
[153.38047791 -111.63909912]
[154.00445557 -96.65208435]
[154.62843323 -81.66506958]
[155.25241089 -66.67804718]
[167.42424011 -57.91184235]
[181.83645630 -62.06972885]
[196.24867249 -66.22761536]
[210.66088867 -70.38550568]
[211.66903687 -85.51029968]
[217.79222107 -99.37689972]
[228.29101562 -110.31084442]
[241.89764404 -116.99179840]
[256.96905518 -118.61301422]
[271.68530273 -114.97872162]
[284.26931763 -106.52777863]
[293.20150757 -94.28067017]
[297.40328979 -79.71630096]
[296.36727905 -64.59339142]
[290.21856689 -50.73809814]
[279.69961548 -39.82352448]
[266.08068848 -33.16765213]
[251.00633240 -31.57421112]
[236.29681396 -35.23561859]
[223.72839355 -43.70974350]
[214.81877136 -55.97328949]
[200.40657043 -51.81540298]
[185.99435425 -47.65751266]
[171.58213806 -43.49962616]
[160.49081421 -33.40097809]
[155.00378418 -19.44058800]
[149.51675415 -5.48019791]
[144.02972412 8.48019218]
[138.54269409 22.44058228]
[149.28044128 28.77893448]
[158.99674988 36.59349442]
[167.49023438 45.72228622]
[174.58483887 55.97610092]
[180.13351440 67.14240265]
[184.02125549 78.98974609]
[186.16748047 91.27257538]
[186.52769470 103.73628998]
[185.09445190 116.12256622]
[181.89743042 128.17466736]
[177.00292969 139.64279175]
[170.51237488 150.28924561]
[162.56030273 159.89334106]
[153.31152344 168.25601196]
[142.95776367 175.20393372]
[131.71360779 180.59310913]
[119.81213379 184.31181335]
[107.50000000 186.28297424]
[107.50000000 201.28297424]
[107.50000000 216.28297424]
[107.50000000 231.28297424]
[107.50000000 246.28297424]
[107.50000000 261.28298950]
[107.50000000 276.28298950]
[107.50000000 291.28298950]
[107.50000000 306.28298950]
[107.50000000 321.28298950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 38]
[24 37]
[25 36]
[26 35]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
[55 94]
[56 93]
[57 92]
[58 91]
[61 86]
[62 85]
[63 84]
[64 83]
[95 118]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
