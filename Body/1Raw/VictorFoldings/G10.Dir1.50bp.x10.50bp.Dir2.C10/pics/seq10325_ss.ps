%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUxxxxxxxxxxACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.15855408 227.84240723]
[94.84649658 212.84565735]
[94.53443909 197.84890747]
[94.22238159 182.85215759]
[93.91033173 167.85539246]
[93.59827423 152.85864258]
[93.28621674 137.86189270]
[92.97415924 122.86513519]
[92.66210175 107.86838531]
[88.20529175 93.54578400]
[79.95299530 81.01982880]
[71.70070648 68.49386597]
[63.44842148 55.96790314]
[55.19613266 43.44194031]
[46.94384384 30.91597748]
[33.88984299 38.31613922]
[20.37071800 44.82786179]
[6.44684601 50.42205811]
[-7.81958485 55.07374954]
[-22.36485672 58.76215363]
[-37.12400436 61.47080231]
[-52.03111649 63.18759537]
[-67.01959991 63.90486526]
[-82.02252960 63.61940765]
[-96.97288513 62.33250046]
[-111.80389404 60.04988861]
[-126.44932556 56.78176880]
[-140.84376526 52.54273224]
[-154.92292786 47.35171890]
[-168.62391663 41.23191071]
[-181.88555908 34.21063995]
[-194.64860535 26.31926537]
[-206.85606384 17.59303093]
[-218.45341492 8.07091236]
[-229.38885498 -2.20456243]
[-239.61355591 -13.18750095]
[-249.08183289 -24.82884979]
[-257.75140381 -37.07661438]
[-265.58355713 -49.87609482]
[-272.54330444 -63.17012405]
[-278.59954834 -76.89933014]
[-283.72528076 -91.00238800]
[-287.89755249 -105.41631317]
[-291.09777832 -120.07673645]
[-293.31164551 -134.91816711]
[-294.52926636 -149.87432861]
[-294.74517822 -164.87840271]
[-293.95846558 -179.86341858]
[-292.17260742 -194.76240540]
[-289.39559937 -209.50885010]
[-285.63986206 -224.03686523]
[-280.92208862 -238.28160095]
[-275.26342773 -252.17939758]
[-268.68914795 -265.66821289]
[-261.22857666 -278.68777466]
[-252.91505432 -291.17996216]
[-243.78570557 -303.08895874]
[-233.88130188 -314.36157227]
[-223.24609375 -324.94747925]
[-211.92756653 -334.79940796]
[-199.97627258 -343.87332153]
[-187.44560242 -352.12872314]
[-174.39151001 -359.52871704]
[-160.87229919 -366.04025269]
[-146.94836426 -371.63427734]
[-132.68186951 -376.28579712]
[-118.13655090 -379.97402954]
[-103.37736511 -382.68246460]
[-88.47023773 -384.39907837]
[-73.48174286 -385.11618042]
[-58.47881699 -384.83053589]
[-43.52848053 -383.54342651]
[-28.69749451 -381.26062012]
[-14.05210400 -377.99230957]
[0.34228113 -373.75311279]
[14.42137241 -368.56192017]
[28.12228775 -362.44192505]
[41.38383865 -355.42050171]
[54.14678955 -347.52896118]
[66.35414124 -338.80258179]
[77.95137024 -329.28030396]
[88.88668060 -319.00469971]
[99.11123657 -308.02163696]
[108.57936859 -296.38015747]
[117.24878693 -284.13229370]
[125.08077240 -271.33270264]
[132.04035950 -258.03860474]
[138.09643555 -244.30931091]
[143.22196960 -230.20619202]
[147.39408875 -215.79220581]
[150.59411621 -201.13175964]
[152.80780029 -186.29029846]
[154.02522278 -171.33412170]
[154.24096680 -156.33003235]
[153.45407104 -141.34503174]
[151.66802979 -126.44606781]
[148.89083862 -111.69966125]
[145.13488770 -97.17168427]
[140.41696167 -82.92701721]
[134.75811768 -69.02928925]
[128.18365479 -55.54056549]
[120.72292328 -42.52109146]
[112.40924072 -30.02901649]
[103.27973938 -18.12013245]
[93.37519836 -6.84762907]
[82.73985291 3.73814869]
[71.42120361 13.58992195]
[59.46980286 22.66368866]
[67.72209167 35.18965149]
[75.97438049 47.71561432]
[84.22666931 60.24157333]
[92.47895813 72.76753998]
[100.73124695 85.29349518]
[100.28517914 70.30013275]
[103.01228333 55.55011749]
[108.78979492 41.70742035]
[117.35765839 29.39516068]
[128.33018494 19.16757011]
[141.21345520 11.48503590]
[155.42753601 6.69338560]
[170.33259583 5.00831223]
[185.25767517 6.50566816]
[199.53092957 11.11805153]
[212.50985718 18.63783646]
[223.61024475 28.72652626]
[232.33238220 40.92998123]
[238.28364563 54.69887161]
[241.19616699 69.41339874]
[240.93882751 84.41118622]
[237.52320862 99.01712799]
[231.10307312 112.57374573]
[221.96739197 124.47078705]
[210.52745056 134.17271423]
[197.29815674 141.24279785]
[182.87507629 145.36279297]
[167.90740967 146.34722900]
[153.06893921 144.15179443]
[139.02761841 138.87532043]
[126.41549683 130.75532532]
[115.80030823 120.15731812]
[107.65885925 107.55632782]
[107.97091675 122.55308533]
[108.28296661 137.54983521]
[108.59502411 152.54658508]
[108.90708160 167.54335022]
[109.21913910 182.54010010]
[109.53119659 197.53684998]
[109.84325409 212.53359985]
[110.15530396 227.53036499]
[112.74630737 246.73808289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[15 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
