%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUxxxxxxxxxxGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.11030579 650.58636475]
[131.70129395 631.37866211]
[132.01335144 616.38189697]
[132.32540894 601.38513184]
[132.63746643 586.38836670]
[132.94952393 571.39160156]
[133.26158142 556.39483643]
[133.57363892 541.39813232]
[133.88569641 526.40136719]
[134.19775391 511.40460205]
[120.89714050 508.74774170]
[108.22889709 503.89291382]
[96.55352020 496.97711182]
[86.20348358 488.19601440]
[77.47370911 477.79837036]
[70.61320496 466.07904053]
[65.81793976 453.37066650]
[63.22525787 440.03408813]
[62.90994263 426.44824219]
[64.88204956 412.99926758]
[69.08660889 400.06967163]
[75.40513611 388.02734375]
[83.65899658 377.21511841]
[93.61441803 367.94100952]
[104.98915100 360.46948242]
[117.46044159 355.01382446]
[130.67420959 351.73013306]
[144.25509644 350.71282959]
[145.81268311 335.79391479]
[147.37025452 320.87500000]
[148.92784119 305.95608521]
[150.48541260 291.03720093]
[152.04299927 276.11828613]
[153.28987122 261.17019653]
[154.22550964 246.19940186]
[151.43318176 231.46159363]
[145.08604431 217.87063599]
[138.73892212 204.27969360]
[132.39178467 190.68873596]
[126.04466248 177.09777832]
[120.32769775 172.33732605]
[119.71015167 163.15742493]
[113.64714050 149.43737793]
[107.58412170 135.71731567]
[101.52111053 121.99726868]
[89.90134430 123.53903198]
[77.51932526 118.60022736]
[68.02529907 107.04650116]
[64.89009857 90.75774384]
[54.22846985 80.20645142]
[43.56684113 69.65515900]
[28.77354050 73.78478241]
[13.90135288 69.94895172]
[2.95082426 59.17948151]
[-1.13240874 44.37330627]
[2.75002313 29.51321793]
[13.55376530 18.59649849]
[28.37266541 14.55969620]
[43.22051239 18.48868752]
[54.10331345 29.32659531]
[58.09364700 44.15807724]
[54.11813354 58.99353790]
[64.77976227 69.54482269]
[75.44138336 80.09611511]
[82.36299133 77.20797729]
[96.20621490 71.43170929]
[103.12782288 68.54357147]
[103.12782288 53.54357147]
[89.07063293 47.75876999]
[78.30075836 37.03131485]
[72.46053314 22.99706650]
[72.44053650 7.79614496]
[78.24382019 -6.25342035]
[88.98543549 -17.00917244]
[103.02735138 -22.83093643]
[118.22828674 -22.83093643]
[132.27020264 -17.00917244]
[143.01182556 -6.25342035]
[148.81510925 7.79614496]
[148.79510498 22.99706650]
[142.95487976 37.03131485]
[132.18501282 47.75876999]
[118.12782288 53.54357147]
[118.12782288 68.54357147]
[128.96740723 96.50167084]
[115.24116516 115.93425751]
[121.30417633 129.65431213]
[127.36718750 143.37435913]
[133.43020630 157.09442139]
[139.63560486 170.75065613]
[145.98274231 184.34161377]
[152.32986450 197.93255615]
[158.67700195 211.52351379]
[165.02412415 225.11445618]
[166.65547180 210.20343018]
[171.74375916 196.09281921]
[180.00425720 183.57226562]
[190.97468567 173.34242249]
[204.04113770 165.97575378]
[218.47241211 161.88452148]
[233.46092224 161.29765320]
[248.16792297 164.24798584]
[261.77035522 170.57043457]
[273.50708008 179.91119385]
[282.72125244 191.74752808]
[288.89727783 205.41708374]
[291.68951416 220.15490723]
[290.94171143 235.13626099]
[286.69573975 249.52276611]
[279.18917847 262.50936890]
[268.84210205 273.36929321]
[256.23358154 281.49487305]
[242.06913757 286.43133545]
[227.14144897 287.90246582]
[212.28587341 285.82592773]
[198.33375549 280.31793213]
[186.06582642 271.68670654]
[176.16864014 260.41525269]
[169.19628906 247.13502502]
[168.26066589 262.10580444]
[170.89743042 268.28277588]
[170.09184265 273.99087524]
[166.96191406 277.67584229]
[165.40432739 292.59475708]
[163.84675598 307.51367188]
[162.28916931 322.43258667]
[160.73158264 337.35150146]
[159.17401123 352.27041626]
[174.97093201 357.17550659]
[189.43295288 365.19326782]
[201.95455933 375.98559570]
[212.01200867 389.09832764]
[219.18518066 403.98031616]
[223.17510986 420.00653076]
[223.81649780 436.50439453]
[221.08450317 452.78195190]
[215.09577942 468.15689087]
[206.10339355 481.98522949]
[194.48622131 493.68814087]
[180.73289490 502.77630615]
[165.42135620 508.87036133]
[149.19450378 511.71667480]
[148.88244629 526.71343994]
[148.57038879 541.71014404]
[148.25833130 556.70690918]
[147.94627380 571.70367432]
[147.63421631 586.70043945]
[147.32215881 601.69720459]
[147.01010132 616.69390869]
[146.69805908 631.69067383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 120]
[35 119]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[42 89]
[43 88]
[44 87]
[45 86]
[49 64]
[50 63]
[51 62]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
