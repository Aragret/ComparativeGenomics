%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAxxxxxxxxxxCUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[75.87746429 441.81115723]
[75.87746429 426.81115723]
[75.87746429 411.81115723]
[75.87746429 396.81115723]
[75.87746429 381.81115723]
[75.87746429 366.81115723]
[75.87746429 351.81115723]
[75.87746429 336.81115723]
[75.87746429 321.81115723]
[75.87746429 306.81115723]
[61.14765549 304.07748413]
[47.16728210 298.68222046]
[34.41300201 290.80773926]
[23.31995583 280.72094727]
[14.26692581 268.76431274]
[7.56339931 255.34416199]
[3.43898726 240.91685486]
[2.03556442 225.97337341]
[3.40238619 211.02247620]
[7.49436235 196.57351685]
[14.17354298 183.11895752]
[23.21376991 171.11766052]
[34.30833054 160.97926331]
[47.08036423 153.05010986]
[61.09567261 147.60150146]
[75.87746429 144.82035828]
[75.87746429 129.82035828]
[68.68608093 142.98410034]
[64.27054596 157.31947327]
[53.52318192 167.78341675]
[39.07495117 171.81437683]
[24.46276665 168.42556763]
[13.26368523 158.44654846]
[8.21923637 144.32020569]
[10.56429768 129.50465393]
[19.72480011 117.62672424]
[33.45825577 111.59413910]
[48.40350723 112.88392639]
[63.30424881 111.16119385]
[49.40169525 105.52923584]
[35.49913788 99.89728546]
[21.59658241 94.26532745]
[9.05283928 103.24630737]
[-6.35624409 103.99710846]
[-19.71368408 96.27815247]
[-26.75717163 82.55252075]
[-25.23915482 67.20002747]
[-15.64402676 55.11958313]
[-1.03355873 50.16602325]
[13.93010235 53.92000580]
[24.47210693 65.18365479]
[27.22853851 80.36277008]
[41.13109589 85.99472809]
[55.03364944 91.62668610]
[68.93621063 97.25863647]
[74.60708618 85.09200287]
[84.42264557 77.08677673]
[96.01120758 74.34015656]
[106.89677429 76.77312469]
[115.40786743 64.42155457]
[115.59381866 59.93524933]
[117.08275604 56.14656830]
[119.48345184 53.38639450]
[122.33638763 51.81964111]
[125.17562866 51.43745041]
[134.68399048 39.83610916]
[144.19233704 28.23476982]
[153.70069885 16.63342857]
[163.20906067 5.03208637]
[172.71742249 -6.56925488]
[158.42320251 -2.02225399]
[143.44577026 -2.84497380]
[129.73559570 -8.93027592]
[119.07806396 -19.48570061]
[112.86105347 -33.13666534]
[111.89418793 -48.10547256]
[116.30337524 -62.44280624]
[125.51441956 -74.28157806]
[138.32781982 -82.08010101]
[153.07493591 -84.82278442]
[167.83534241 -82.15248871]
[180.68684387 -74.41693115]
[189.95587158 -62.62348938]
[194.43534851 -48.30796432]
[193.54193115 -33.33459473]
[187.39299011 -19.65475082]
[200.00411987 -27.77629280]
[212.61523438 -35.89783478]
[225.22636414 -44.01937866]
[237.83749390 -52.14091873]
[250.44862366 -60.26246262]
[247.07089233 -75.03969574]
[248.95404053 -90.08062744]
[255.87069702 -103.56898499]
[266.98562622 -113.87598419]
[280.95663452 -119.75700378]
[296.09667969 -120.50188446]
[310.57751465 -116.02068329]
[322.65051270 -106.85451508]
[330.85778809 -94.11025238]
[334.20831299 -79.32681274]
[332.29742432 -64.28938293]
[325.35592651 -50.81379700]
[314.22201538 -40.52729797]
[300.24020386 -34.67203140]
[285.09881592 -33.95505142]
[270.62625122 -38.46293640]
[258.57015991 -47.65133286]
[245.95904541 -39.52979279]
[233.34791565 -31.40824890]
[220.73678589 -23.28670692]
[208.12565613 -15.16516495]
[195.51452637 -7.04362249]
[184.31875610 2.93910384]
[174.81040955 14.54044533]
[165.30204773 26.14178658]
[155.79368591 37.74312592]
[146.28532410 49.34446716]
[136.77696228 60.94580841]
[127.75943756 72.93264008]
[119.24835205 85.28421783]
[126.08280945 104.94605255]
[114.92168427 124.71018982]
[90.87746429 129.82035828]
[90.87746429 144.82035828]
[105.65925598 147.60150146]
[119.67456818 153.05010986]
[132.44659424 160.97926331]
[143.54116821 171.11766052]
[152.58139038 183.11895752]
[159.26057434 196.57351685]
[163.35253906 211.02247620]
[164.71936035 225.97337341]
[163.31594849 240.91685486]
[159.19152832 255.34416199]
[152.48800659 268.76431274]
[143.43496704 280.72094727]
[132.34193420 290.80773926]
[119.58764648 298.68222046]
[105.60727692 304.07748413]
[90.87746429 306.81115723]
[90.87746429 321.81115723]
[90.87746429 336.81115723]
[90.87746429 351.81115723]
[90.87746429 366.81115723]
[90.87746429 381.81115723]
[90.87746429 396.81115723]
[90.87746429 411.81115723]
[90.87746429 426.81115723]
[90.87746429 441.81115723]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[39 55]
[40 54]
[41 53]
[42 52]
[59 121]
[60 120]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
