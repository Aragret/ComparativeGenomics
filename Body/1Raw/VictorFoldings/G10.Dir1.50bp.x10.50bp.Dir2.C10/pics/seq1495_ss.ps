%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUxxxxxxxxxxACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 325.07666016]
[92.50000000 310.07666016]
[92.50000000 295.07666016]
[92.50000000 280.07666016]
[92.50000000 265.07666016]
[92.50000000 250.07666016]
[92.50000000 235.07666016]
[92.50000000 220.07666016]
[92.50000000 205.07666016]
[92.50000000 190.07666016]
[84.73777771 189.09051514]
[77.08993530 187.43673706]
[69.61376953 185.12774658]
[62.36531067 182.18081665]
[55.39888000 178.61804199]
[48.76668167 174.46611023]
[42.51840973 169.75616455]
[36.70089340 164.52346802]
[31.35772705 158.80726624]
[26.52894974 152.65036011]
[22.25074768 146.09890747]
[18.55518150 139.20199585]
[4.54617071 144.56369019]
[-9.46284008 149.92536926]
[-19.58562660 162.08430481]
[-34.23772049 159.40748596]
[-48.24673080 164.76916504]
[-62.25574112 170.13084412]
[-72.16285706 183.19917297]
[-88.39794922 180.88533020]
[-94.25975037 165.56961060]
[-83.71813965 153.00750732]
[-67.61742401 156.12182617]
[-53.60841370 150.76014709]
[-39.59940338 145.39846802]
[-30.47863579 133.62303162]
[-14.82452202 135.91635132]
[-0.81551152 130.55467224]
[13.19349861 125.19299316]
[9.87689018 106.91957855]
[10.36503315 88.35404968]
[14.63731861 70.28017426]
[22.51338387 53.46098709]
[33.66072083 38.60655212]
[47.60871887 26.34398079]
[63.76853561 17.19096375]
[81.45794678 11.53391838]
[99.93014526 9.61166763]
[118.40530396 11.50536537]
[136.10343933 17.13506508]
[143.21519470 3.92813826]
[150.32695007 -9.27878761]
[157.43870544 -22.48571396]
[164.55046082 -35.69263840]
[171.66221619 -48.89956665]
[170.66812134 -67.26222229]
[185.89817810 -75.93498993]
[181.28945923 -90.81443024]
[188.42587280 -104.25043488]
[202.63954163 -108.55243683]
[209.48898315 -121.89729309]
[216.33842468 -135.24214172]
[216.39430237 -141.93952942]
[219.40313721 -146.83967590]
[223.73120117 -148.97093201]
[231.10249329 -162.03477478]
[238.47380066 -175.09861755]
[226.37812805 -184.00097656]
[215.44374084 -194.29644775]
[205.83009338 -205.83485413]
[197.67736816 -218.44796753]
[191.10447693 -231.95184326]
[186.20726013 -246.14953613]
[183.05712891 -260.83401489]
[181.70002747 -275.79113770]
[182.15576172 -290.80279541]
[184.41766357 -305.65005493]
[188.45274353 -320.11642456]
[194.20217896 -333.99090576]
[201.58212280 -347.07119751]
[210.48493958 -359.16653442]
[220.78080750 -370.10052490]
[232.31958008 -379.71374512]
[244.93299866 -387.86599731]
[258.43710327 -394.43838501]
[272.63497925 -399.33508301]
[287.31958008 -402.48464966]
[302.27676392 -403.84118652]
[317.28839111 -403.38488770]
[332.13558960 -401.12243652]
[346.60177612 -397.08682251]
[360.47604370 -391.33685303]
[373.55606079 -383.95645142]
[385.65106201 -375.05316162]
[396.58468628 -364.75689697]
[406.19747925 -353.21774292]
[414.34924316 -340.60403442]
[420.92114258 -327.09967041]
[425.81729126 -312.90161133]
[428.96630859 -298.21688843]
[430.32229614 -283.25967407]
[429.86544800 -268.24804688]
[427.60244751 -253.40095520]
[423.56628418 -238.93490601]
[417.81579590 -225.06083679]
[410.43487549 -211.98110962]
[401.53115845 -199.88644409]
[391.23446655 -188.95320129]
[379.69497681 -179.34085083]
[367.08096313 -171.18954468]
[353.57635498 -164.61816406]
[339.37811279 -159.72253418]
[324.69326782 -156.57406616]
[309.73599243 -155.21864319]
[294.72439575 -155.67605591]
[279.87738037 -157.93962097]
[265.41146851 -161.97631836]
[251.53764343 -167.72731018]
[244.16633606 -154.66348267]
[236.79502869 -141.59963989]
[229.68327332 -128.39271545]
[222.83383179 -115.04785156]
[215.98440552 -101.70299530]
[220.77536011 -87.64659882]
[214.01914978 -74.01544189]
[199.24302673 -69.08555603]
[202.64759827 -57.44327545]
[197.00671387 -46.25327682]
[184.86915588 -41.78780746]
[177.75738525 -28.58088303]
[170.64562988 -15.37395573]
[163.53387451 -2.16702986]
[156.42211914 11.03989601]
[149.31036377 24.24682236]
[161.11210632 33.40145111]
[171.24513245 44.37459564]
[179.43278503 56.86662292]
[185.45147705 70.53643036]
[189.13685608 85.01076508]
[190.38829041 99.89438629]
[189.17163086 114.78089142]
[185.52009583 129.26379395]
[179.53337097 142.94763184]
[171.37493896 155.45875549]
[161.26756287 166.45555115]
[149.48724365 175.63774109]
[136.35565186 182.75459290]
[122.23134613 187.61177063]
[107.50000000 190.07666016]
[107.50000000 205.07666016]
[107.50000000 220.07666016]
[107.50000000 235.07666016]
[107.50000000 250.07666016]
[107.50000000 265.07666016]
[107.50000000 280.07666016]
[107.50000000 295.07666016]
[107.50000000 310.07666016]
[107.50000000 325.07666016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[22 39]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[50 134]
[51 133]
[52 132]
[53 131]
[54 130]
[55 129]
[57 126]
[60 123]
[61 122]
[62 121]
[65 120]
[66 119]
[67 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
