%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACxxxxxxxxxxCUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.43735504 460.74777222]
[94.43735504 445.74777222]
[94.43735504 430.74777222]
[94.43735504 415.74777222]
[94.43735504 400.74777222]
[94.43735504 385.74777222]
[94.43735504 370.74777222]
[94.43735504 355.74777222]
[94.43735504 340.74777222]
[94.43735504 325.74777222]
[80.23107147 322.69216919]
[66.97077179 316.73428345]
[55.24239731 308.13464355]
[45.56480026 297.27047729]
[38.36675644 284.61935425]
[33.96798325 270.73806763]
[32.56493378 256.23812866]
[34.22202301 241.75888062]
[38.86868286 227.93933105]
[46.30235291 215.38986206]
[56.19731903 204.66531372]
[68.11898041 196.24047852]
[81.54293823 190.48905945]
[95.87805176 187.66708374]
[96.19010925 172.67031860]
[96.50216675 157.67356873]
[96.03411865 142.68087769]
[94.78724670 127.73278809]
[93.54037476 112.78469849]
[85.72563171 101.19067383]
[91.51154327 88.46217346]
[90.26466370 73.51408386]
[89.01779175 58.56599808]
[87.77091980 43.61791229]
[86.52404022 28.66982460]
[85.27716827 13.72173786]
[73.49488068 3.53275275]
[72.44331360 -11.64449501]
[82.22956085 -22.81431580]
[80.98268890 -37.76240158]
[79.73581696 -52.71049118]
[78.48893738 -67.65857697]
[69.63127899 -80.76782227]
[76.28384399 -94.09421539]
[75.03697205 -109.04229736]
[73.79010010 -123.99038696]
[72.54322052 -138.93847656]
[71.29634857 -153.88656616]
[56.28836060 -154.45019531]
[41.45774460 -156.81877136]
[27.02076912 -160.95774841]
[13.18797302 -166.80676270]
[0.16107766 -174.28054810]
[-11.86994743 -183.27008057]
[-22.72965240 -193.64428711]
[-32.25967407 -205.25187683]
[-40.32103348 -217.92356873]
[-46.79617310 -231.47457886]
[-51.59066772 -245.70730591]
[-54.63460159 -260.41415405]
[-55.88357925 -275.38070679]
[-55.31938934 -290.38867188]
[-52.95026016 -305.21920776]
[-48.81073761 -319.65600586]
[-42.96119690 -333.48858643]
[-35.48693085 -346.51522827]
[-26.49694252 -358.54589844]
[-16.12233162 -369.40521240]
[-4.51438808 -378.93481445]
[8.15760708 -386.99569702]
[21.70886040 -393.47033691]
[35.94175720 -398.26428223]
[50.64873505 -401.30767822]
[65.61532593 -402.55609131]
[80.62326813 -401.99133301]
[95.45370483 -399.62164307]
[109.89037323 -395.48159790]
[123.72273254 -389.63153076]
[136.74906921 -382.15676880]
[148.77941895 -373.16635132]
[159.63835144 -362.79132080]
[169.16749573 -351.18301392]
[177.22792053 -338.51074219]
[183.70204163 -324.95922852]
[188.49546814 -310.72616577]
[191.53829956 -296.01907349]
[192.78616333 -281.05242920]
[192.22085571 -266.04449463]
[189.85061646 -251.21415710]
[185.71000671 -236.77764893]
[179.85943604 -222.94551086]
[172.38420105 -209.91944885]
[163.39331055 -197.88943481]
[153.01788330 -187.03089905]
[141.40922546 -177.50216675]
[128.73663330 -169.44223022]
[115.18489075 -162.96861267]
[100.95163727 -158.17572021]
[86.24443817 -155.13343811]
[87.49131012 -140.18534851]
[88.73818207 -125.23725891]
[89.98506165 -110.28917694]
[91.23193359 -95.34108734]
[100.00041199 -83.30102539]
[93.43702698 -68.90544891]
[94.68389893 -53.95736313]
[95.93077850 -39.00927734]
[97.17765045 -24.06118965]
[108.67921448 -14.66706467]
[110.15666199 0.47465935]
[100.22525787 12.47486305]
[101.47212982 27.42295074]
[102.71900177 42.37103653]
[103.96588135 57.31912231]
[105.21275330 72.26721191]
[106.45962524 87.21530151]
[114.27436829 98.80932617]
[108.48845673 111.53782654]
[109.73533630 126.48591614]
[110.98220825 141.43400574]
[122.75024414 132.13275146]
[137.40638733 135.32612610]
[144.23817444 148.68002319]
[138.25212097 162.43383789]
[123.82355499 166.53462219]
[111.49891663 157.98562622]
[111.18685913 172.98237610]
[110.87480164 187.97914124]
[125.92900085 191.70310974]
[139.77787781 198.66656494]
[151.73454285 208.52070618]
[161.20671082 220.77339172]
[167.72607422 234.81379700]
[170.97142029 249.94282532]
[170.78445435 265.40795898]
[167.17756653 280.44058228]
[160.33300781 294.29434204]
[150.59368896 306.28210449]
[138.44606018 315.80996704]
[124.49573517 322.40689087]
[109.43735504 325.74777222]
[109.43735504 340.74777222]
[109.43735504 355.74777222]
[109.43735504 370.74777222]
[109.43735504 385.74777222]
[109.43735504 400.74777222]
[109.43735504 415.74777222]
[109.43735504 430.74777222]
[109.43735504 445.74777222]
[109.43735504 460.74777222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 128]
[25 127]
[26 126]
[27 120]
[28 119]
[29 118]
[31 116]
[32 115]
[33 114]
[34 113]
[35 112]
[36 111]
[39 108]
[40 107]
[41 106]
[42 105]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
