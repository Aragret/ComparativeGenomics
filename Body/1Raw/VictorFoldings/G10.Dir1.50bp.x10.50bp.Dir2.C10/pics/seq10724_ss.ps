%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUxxxxxxxxxxUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.44783783 461.79946899]
[79.44783783 446.79946899]
[79.44783783 431.79946899]
[79.44783783 416.79946899]
[79.44783783 401.79946899]
[79.44783783 386.79946899]
[79.44783783 371.79946899]
[79.44783783 356.79946899]
[79.44783783 341.79946899]
[79.44783783 326.79946899]
[66.40877533 324.17605591]
[54.08699036 319.15640259]
[42.91878128 311.91635132]
[33.29994965 302.71038818]
[25.57177544 291.86276245]
[20.00891113 279.75598145]
[16.80961990 266.81735229]
[16.08870506 253.50387573]
[17.87339783 240.28617859]
[22.10232735 227.63180542]
[28.62763786 215.98872375]
[37.22014618 205.76940918]
[47.57739639 197.33628845]
[59.33430862 190.98887634]
[72.07604218 186.95312500]
[85.35264587 185.37336731]
[86.59952545 170.42529297]
[87.84639740 155.47720337]
[89.09326935 140.52911377]
[70.28027344 129.63618469]
[59.44034576 110.79259491]
[59.48158264 89.05361176]
[70.39291382 70.25128174]
[61.88182831 57.89970779]
[53.37073898 45.54813766]
[39.16924667 38.57473755]
[38.31890488 23.70442581]
[29.80781555 11.35285378]
[21.29672623 -0.99871886]
[7.85935926 5.72313547]
[-6.38276100 10.50938034]
[-21.15240860 13.26684952]
[-36.16208649 13.94186878]
[-51.11963272 12.52129841]
[-65.73388672 9.03278923]
[-79.72038269 3.54424787]
[-92.80686188 -3.83749104]
[-104.73860931 -12.96873951]
[-115.28334808 -23.67175484]
[-124.23583984 -35.73819733]
[-131.42181396 -48.93319702]
[-136.70138550 -62.99990082]
[-139.97180176 -77.66450500]
[-141.16938782 -92.64154816]
[-140.27084351 -107.63950348]
[-137.29365540 -122.36643982]
[-132.29577637 -136.53567505]
[-125.37449646 -149.87141418]
[-116.66453552 -162.11407471]
[-106.33542633 -173.02534485]
[-94.58824158 -182.39282227]
[-81.65163422 -190.03417969]
[-67.77742767 -195.80067444]
[-53.23568344 -199.58006287]
[-38.30945969 -201.29878235]
[-23.28929901 -200.92335510]
[-8.46757603 -198.46110535]
[5.86720133 -193.95996094]
[19.43600082 -187.50753784]
[31.97470474 -179.22943115]
[43.23924255 -169.28677368]
[53.01034546 -157.87310791]
[61.09781647 -145.21061707]
[67.34423065 -131.54574585]
[71.62799835 -117.14451599]
[73.86573792 -102.28723907]
[74.01389313 -87.26312256]
[72.06957245 -72.36460876]
[68.07062531 -57.88169861]
[62.09489441 -44.09631729]
[54.25870132 -31.27679253]
[44.71457672 -19.67266464]
[33.64829636 -9.50980949]
[42.15938950 2.84176350]
[50.67047882 15.19333649]
[64.26319885 21.28326607]
[65.72231293 37.03704453]
[74.23339844 49.38861847]
[82.74449158 61.74019241]
[94.93131256 58.33617783]
[107.57881927 58.71892548]
[119.53749847 62.85364532]
[129.72044373 70.36453247]
[137.20214844 80.56894684]
[151.52474976 76.11213684]
[165.84733582 71.65531921]
[180.16993713 67.19850159]
[180.58807373 52.06232452]
[185.90058899 37.88290787]
[195.53123474 26.19832993]
[208.43534851 18.27604675]
[223.21319580 14.97540951]
[238.26176453 16.65444374]
[251.94871521 23.13102150]
[262.78939819 33.70261383]
[269.60787964 47.22249222]
[271.66452026 62.22412109]
[268.73629761 77.08023071]
[261.14077759 90.17935181]
[249.70190430 100.10058594]
[235.66047668 105.76774597]
[220.53958130 106.56610870]
[205.97943115 102.40907288]
[193.55941772 93.74755859]
[184.62675476 81.52110291]
[170.30415344 85.97791290]
[155.98156738 90.43473053]
[141.65896606 94.89154816]
[141.84492493 103.25077057]
[140.37019348 111.48097992]
[137.29328918 119.25553894]
[132.73632812 126.26590729]
[126.88016510 132.23387146]
[119.95721436 136.92256165]
[112.24221039 140.14590454]
[104.04135895 141.77598572]
[102.79448700 156.72407532]
[101.54760742 171.67216492]
[100.30073547 186.62025452]
[116.32822418 191.74415588]
[130.69616699 200.48681641]
[142.60182190 212.35543823]
[151.38102722 226.68273926]
[156.54522705 242.66442871]
[157.80871582 259.40432739]
[155.10440063 275.96466064]
[148.58737183 291.41857910]
[138.62596130 304.90203857]
[125.78103638 315.66210938]
[110.77430725 323.09899902]
[94.44783783 326.79946899]
[94.44783783 341.79946899]
[94.44783783 356.79946899]
[94.44783783 371.79946899]
[94.44783783 386.79946899]
[94.44783783 401.79946899]
[94.44783783 416.79946899]
[94.44783783 431.79946899]
[94.44783783 446.79946899]
[94.44783783 461.79946899]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 129]
[27 128]
[28 127]
[29 126]
[33 89]
[34 88]
[35 87]
[37 85]
[38 84]
[39 83]
[94 118]
[95 117]
[96 116]
[97 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
