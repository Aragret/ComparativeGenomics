%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUxxxxxxxxxxUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-19.61676216 277.39810181]
[-28.43354034 289.53335571]
[-37.25032043 301.66860962]
[-46.06709671 313.80386353]
[-54.88387680 325.93911743]
[-56.73580551 341.65158081]
[-70.47631836 347.40026855]
[-79.29309845 359.53552246]
[-88.10987091 371.67080688]
[-89.58189392 389.99871826]
[-105.83186340 396.55819702]
[-114.40088654 408.86962891]
[-122.96990967 421.18109131]
[-127.05568695 437.63534546]
[-143.99797058 438.26425171]
[-149.29235840 422.15817261]
[-135.28135681 412.61206055]
[-126.71233368 400.30059814]
[-118.14331055 387.98916626]
[-119.96333313 375.99310303]
[-112.87484741 365.65487671]
[-100.24513245 362.85400391]
[-91.42835236 350.71875000]
[-82.61157227 338.58349609]
[-81.39027405 323.73904419]
[-67.01913452 317.12234497]
[-58.20235443 304.98709106]
[-49.38557434 292.85183716]
[-40.56879425 280.71658325]
[-31.75201607 268.58132935]
[-45.87439728 256.52130127]
[-58.89778519 243.28207397]
[-70.72406006 228.96337891]
[-81.26413727 213.67309570]
[-90.43859100 197.52641296]
[-98.17831421 180.64498901]
[-104.42499542 163.15599060]
[-109.13156891 145.19119263]
[-112.26258850 126.88593292]
[-113.79444885 108.37812042]
[-113.71562195 89.80718231]
[-112.02668762 71.31303406]
[-108.74038696 53.03501511]
[-103.88146973 35.11082077]
[-97.48654175 17.67548752]
[-89.60378265 0.86037582]
[-102.64453888 -6.55168915]
[-115.68529510 -13.96375465]
[-128.72604370 -21.37581825]
[-145.11222839 -20.72401237]
[-153.63984680 -34.73157501]
[-145.53642273 -48.98872757]
[-129.13804626 -48.82892990]
[-121.31398010 -34.41657257]
[-108.27322388 -27.00450897]
[-95.23246765 -19.59244347]
[-82.19171906 -12.18037891]
[-70.02892303 -29.87849998]
[-56.15330505 -46.26826096]
[-40.70464706 -61.18455887]
[-23.83856773 -74.47712708]
[-5.72497654 -86.01206207]
[13.45365810 -95.67317200]
[33.50413513 -103.36312103]
[54.22447586 -109.00444794]
[75.40594482 -112.54032898]
[96.83515930 -113.93513489]
[97.13916779 -128.93205261]
[97.44316864 -143.92897034]
[97.74717712 -158.92588806]
[98.05117798 -173.92280579]
[84.24937439 -180.35943604]
[74.26371765 -191.85754395]
[69.82427216 -206.42501831]
[71.70020294 -221.53794861]
[79.56649780 -234.57794189]
[92.06027222 -243.28572083]
[107.01689911 -246.15263367]
[121.84505463 -242.68196106]
[133.97567749 -233.47500610]
[141.30705261 -220.12693787]
[142.56898499 -204.95039368]
[137.54283142 -190.57481384]
[127.09941101 -179.49081421]
[113.04809570 -173.61880493]
[112.74409485 -158.62188721]
[112.44009399 -143.62496948]
[112.13608551 -128.62805176]
[111.83208466 -113.63113403]
[123.54058838 -112.65958405]
[135.17811584 -111.04681396]
[146.70957947 -108.79769135]
[158.10018921 -105.91898346]
[169.31562805 -102.41937256]
[180.32205200 -98.30942535]
[191.08627319 -93.60152435]
[201.57586670 -88.30986023]
[211.75917053 -82.45039368]
[221.60549927 -76.04079437]
[231.08515930 -69.10038757]
[240.16955566 -61.65010452]
[248.83129883 -53.71239853]
[257.04428101 -45.31121445]
[264.78375244 -36.47188187]
[272.02633667 -27.22104836]
[278.75024414 -17.58661079]
[284.93515015 -7.59762192]
[290.56243896 2.71580219]
[295.61514282 13.32256222]
[300.07800293 24.19067764]
[303.93759155 35.28737640]
[307.18222046 46.57920074]
[309.80218506 58.03210449]
[311.78952026 69.61154938]
[313.13827515 81.28262329]
[313.84432983 93.01013184]
[313.90560913 104.75872040]
[313.32192993 116.49296570]
[312.09500122 128.17747498]
[310.22854614 139.77702332]
[307.72824097 151.25662231]
[304.60153198 162.58168030]
[300.85794067 173.71804810]
[296.50869751 184.63212585]
[291.56692505 195.29101562]
[286.04751587 205.66258240]
[279.96713257 215.71554565]
[273.34411621 225.41960144]
[266.19842529 234.74548340]
[258.55160522 243.66506958]
[250.42668152 252.15147400]
[241.84820557 260.17910767]
[232.84202576 267.72375488]
[223.43528748 274.76266479]
[213.65635681 281.27462769]
[203.53472900 287.23999023]
[193.10092163 292.64080811]
[182.38638306 297.46072388]
[171.42343140 301.68527222]
[160.24511719 305.30169678]
[148.88514709 308.29907227]
[137.37777710 310.66836548]
[125.75771332 312.40243530]
[114.05997467 313.49609375]
[102.31984711 313.94595337]
[90.57271576 313.75076294]
[78.85401917 312.91104126]
[67.19907379 311.42932129]
[55.64303970 309.31008911]
[44.22075272 306.55975342]
[32.96665192 303.18658447]
[21.91467285 299.20074463]
[11.09814072 294.61428833]
[0.54967135 289.44100952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[7 24]
[8 23]
[9 22]
[11 19]
[12 18]
[13 17]
[46 57]
[47 56]
[48 55]
[49 54]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
