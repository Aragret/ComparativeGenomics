%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCxxxxxxxxxxUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.29656982 139.01869202]
[118.89801788 128.34800720]
[115.45031738 117.33277130]
[112.98003387 106.05756378]
[101.63549805 114.23027039]
[88.73265076 108.84433746]
[73.83074951 110.55702972]
[58.92884827 112.26971436]
[44.02694702 113.98240662]
[29.12504578 115.69509888]
[14.22314262 117.40778351]
[-0.67875969 119.12047577]
[-15.58066177 120.83316803]
[-19.08234978 123.64379883]
[-22.91553688 125.01410675]
[-26.57365417 125.02114868]
[-29.63025856 123.90260315]
[-31.78555870 122.01527405]
[-46.77825546 122.48331451]
[-61.77095032 122.95135498]
[-50.52507782 132.87759399]
[-47.10500717 147.48249817]
[-52.77438736 161.36984253]
[-65.43849182 169.40850830]
[-80.41819763 168.62840271]
[-92.17878723 159.31773376]
[-96.37496185 144.91662598]
[-91.45632172 130.74598694]
[-79.24104309 122.04186249]
[-94.10408783 120.01952362]
[-108.96713257 117.99719238]
[-123.83018494 115.97485352]
[-138.69322205 113.95252228]
[-153.57650757 112.08490753]
[-168.47840881 110.37222290]
[-183.38031006 108.65953064]
[-198.28221130 106.94683838]
[-210.50305176 116.96814728]
[-226.22218323 115.32972717]
[-236.11372375 103.00362396]
[-234.30920410 87.30268860]
[-221.87921143 77.54201508]
[-206.19824219 79.51243591]
[-196.56951904 92.04493713]
[-181.66761780 93.75762939]
[-166.76571655 95.47031403]
[-151.86381531 97.18300629]
[-144.81404114 94.80683136]
[-136.67089844 99.08947754]
[-121.80784607 101.11180878]
[-106.94480133 103.13414764]
[-92.08175659 105.15647888]
[-77.21870422 107.17881012]
[-62.23899460 107.95865631]
[-47.24629593 107.49061584]
[-32.25360107 107.02257538]
[-17.29335213 105.93126678]
[-2.39144945 104.21857452]
[12.51045322 102.50588226]
[27.41235542 100.79319763]
[42.31425858 99.08050537]
[57.21615982 97.36781311]
[72.11806488 95.65512848]
[87.01996613 93.94243622]
[98.36450195 85.76972961]
[111.26734924 91.15566254]
[111.62534332 71.42597198]
[114.92628479 51.97299194]
[121.09554291 33.23318100]
[129.99414062 15.62690544]
[141.42187500 -0.45098546]
[155.12184143 -14.64001083]
[170.78617859 -26.62214088]
[188.06303406 -36.12893295]
[206.56442261 -42.94753647]
[225.87495422 -46.92545700]
[245.56115723 -47.97397995]
[265.18124390 -46.07013702]
[284.29492188 -41.25721359]
[302.47344971 -33.64376068]
[319.30908203 -23.40115356]
[334.42428589 -10.75972652]
[347.48022461 3.99639964]
[359.91964722 -4.38574362]
[372.35910034 -12.76788712]
[384.79855347 -21.15003014]
[397.23797607 -29.53217316]
[408.93759155 -38.91933441]
[419.81643677 -49.24654007]
[430.69525146 -59.57374573]
[427.70809937 -74.70914459]
[433.39920044 -89.04842377]
[445.95254517 -98.01596832]
[461.36242676 -98.75026703]
[474.71160889 -91.01700592]
[481.74038696 -77.28384399]
[480.20593262 -61.93297958]
[470.59786987 -49.86282349]
[455.98208618 -44.92491150]
[441.02246094 -48.69491959]
[430.14364624 -38.36771393]
[419.26480103 -28.04051018]
[434.26461792 -28.11601448]
[446.53707886 -19.49125481]
[451.54779053 -5.35290432]
[447.44534302 9.07519531]
[435.74557495 18.46214867]
[420.77124023 19.33966637]
[408.05514526 11.38351822]
[402.29556274 -2.46665359]
[405.62011719 -17.09273338]
[393.18069458 -8.71058941]
[380.74124146 -0.32844657]
[368.30181885 8.05369663]
[355.86236572 16.43584061]
[361.31173706 26.59043884]
[365.85144043 37.18352127]
[369.44656372 48.13379288]
[372.06936646 59.35719299]
[373.69970703 70.76757050]
[374.32492065 82.27733612]
[373.94015503 93.79811096]
[372.54827881 105.24143982]
[370.15991211 116.51945496]
[366.79330444 127.54553986]
[362.47421265 138.23501587]
[357.23571777 148.50578308]
[351.11798096 158.27893066]
[344.16790771 167.47938538]
[336.43881226 176.03646851]
[327.98995972 183.88439941]
[318.88613892 190.96289062]
[309.19723511 197.21749878]
[298.99758911 202.60015869]
[288.36547852 207.06944275]
[277.38247681 210.59098816]
[266.13290405 213.13766479]
[254.70312500 214.68983459]
[243.18087769 215.23550415]
[231.65463257 214.77040100]
[220.21289062 213.29801941]
[208.94351196 210.82957458]
[197.93302917 207.38394165]
[187.26602173 202.98750305]
[177.02441406 197.67393494]
[167.28686523 191.48396301]
[158.12821960 184.46504211]
[149.61880493 176.67098999]
[141.82405090 168.16162109]
[134.80383301 159.00218201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 66]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[18 56]
[19 55]
[20 54]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
[83 115]
[84 114]
[85 113]
[86 112]
[87 111]
[88 102]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
