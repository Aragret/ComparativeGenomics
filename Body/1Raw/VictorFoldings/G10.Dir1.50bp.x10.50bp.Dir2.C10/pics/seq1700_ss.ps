%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGxxxxxxxxxxCCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.52649689 294.99057007]
[109.52649689 279.99057007]
[109.52649689 264.99057007]
[109.52649689 249.99057007]
[109.52649689 234.99057007]
[109.52649689 219.99057007]
[109.52649689 204.99057007]
[109.52649689 189.99057007]
[109.52649689 174.99057007]
[109.52649689 159.99057007]
[106.88762665 145.22451782]
[101.69221497 131.15299988]
[96.49679565 117.08147430]
[93.79295349 117.17780304]
[90.99426270 116.83528137]
[88.17301178 116.02961731]
[85.40634918 114.74851227]
[71.75010681 120.95391846]
[58.09386826 127.15932465]
[44.43762589 133.36473083]
[44.98642349 148.55575562]
[39.67540359 162.79870605]
[29.31446648 173.92163086]
[15.48357487 180.22836304]
[0.29184002 180.75717163]
[-13.94410801 175.42742920]
[-25.05339050 165.05186462]
[-31.34192467 151.21267700]
[-31.85075188 136.02026367]
[-26.50227928 121.79134369]
[-16.11211395 110.69571686]
[-2.26467752 104.42539215]
[12.92839527 103.93655396]
[27.15027237 109.30373383]
[38.23221970 119.70848846]
[51.88846207 113.50308228]
[65.54470062 107.29767609]
[79.20094299 101.09226990]
[83.80651093 86.81681061]
[76.35160065 73.80049896]
[62.43724823 79.46392059]
[47.89217377 83.22214508]
[32.97594833 85.00810242]
[17.95476913 84.78992462]
[3.09670544 82.57150269]
[-11.33308125 78.39241791]
[-25.07707596 72.32727051]
[-37.88999939 64.48428345]
[-49.54319000 55.00342941]
[-59.82868576 44.05390549]
[-68.56292725 31.83112144]
[-75.59004211 18.55320358]
[-80.78462219 4.45711279]
[-84.05396271 -10.20558929]
[-85.33972168 -25.17322922]
[-84.61895752 -40.17869186]
[-81.90452576 -54.95418930]
[-77.24486542 -69.23603058]
[-70.72314453 -82.76934814]
[-62.45574570 -95.31261444]
[-52.59020996 -106.64198303]
[-41.30259705 -116.55527496]
[-28.79435349 -124.87556458]
[-15.28869820 -131.45437622]
[-1.02665758 -136.17428589]
[13.73724556 -138.95109558]
[28.73953247 -139.73521423]
[43.71246719 -138.51266479]
[58.38884354 -135.30526733]
[72.50674438 -130.17025757]
[85.81421661 -123.19927216]
[98.07377625 -114.51671600]
[109.06662750 -104.27754974]
[118.59660339 -92.66449738]
[126.49362183 -79.88480377]
[132.61676025 -66.16654205]
[136.85673523 -51.75453186]
[139.13787842 -36.90597153]
[139.41947937 -21.88584518]
[137.69651794 -6.96221161]
[133.99974060 7.59860229]
[128.39512634 21.53674126]
[120.98269653 34.60346222]
[111.89472198 46.56557846]
[101.29339600 57.20960236]
[89.36790466 66.34558868]
[96.82281494 79.36190033]
[110.99937439 84.26345062]
[124.90193176 78.63149261]
[138.80448914 72.99953461]
[152.70704651 67.36757660]
[166.60960388 61.73562241]
[180.51216125 56.10366440]
[194.41471863 50.47171021]
[182.03697205 41.99871445]
[180.73149109 27.05563354]
[191.45245361 16.56464577]
[206.36372375 18.19381714]
[214.56634521 30.75235367]
[210.06533813 45.06049728]
[224.47755432 40.90261078]
[238.88977051 36.74472427]
[244.04650879 22.10956955]
[256.83981323 13.32826900]
[272.35037231 13.77741146]
[284.61410522 23.28429222]
[288.91531372 38.19332123]
[283.60012817 52.77167511]
[270.71231079 61.41367340]
[255.20751953 60.79629898]
[243.04765320 51.15694046]
[228.63543701 55.31482697]
[214.22322083 59.47271347]
[200.04666138 64.37426758]
[186.14411926 70.00621796]
[172.24156189 75.63817596]
[158.33900452 81.27013397]
[144.43644714 86.90209198]
[130.53388977 92.53404999]
[116.63133240 98.16600800]
[110.56832123 111.88606262]
[115.76373291 125.95758057]
[120.95915222 140.02909851]
[124.02245331 125.34522247]
[131.60882568 112.40509796]
[142.92596436 102.56017303]
[156.79190063 96.83866119]
[171.75849915 95.83809662]
[186.26263428 99.66299438]
[198.78953552 107.91387177]
[208.03086853 119.72901917]
[213.02148438 133.87446594]
[213.24018860 148.87286377]
[208.66410828 163.15780640]
[199.77117920 175.23738098]
[187.49017334 183.84997559]
[173.10371399 188.09613037]
[158.11431885 187.53236389]
[144.08746338 182.21755981]
[132.48809814 172.70678711]
[124.52649689 159.99057007]
[124.52649689 174.99057007]
[124.52649689 189.99057007]
[124.52649689 204.99057007]
[124.52649689 219.99057007]
[124.52649689 234.99057007]
[124.52649689 249.99057007]
[124.52649689 264.99057007]
[124.52649689 279.99057007]
[124.52649689 294.99057007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[17 38]
[18 37]
[19 36]
[20 35]
[39 87]
[40 86]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
