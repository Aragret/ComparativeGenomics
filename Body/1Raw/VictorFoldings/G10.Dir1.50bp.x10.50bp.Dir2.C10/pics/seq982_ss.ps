%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCxxxxxxxxxxUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.97006989 315.17559814]
[101.97006989 300.17559814]
[101.97006989 285.17559814]
[101.97006989 270.17559814]
[101.97006989 255.17558289]
[101.97006989 240.17558289]
[101.97006989 225.17558289]
[101.97006989 210.17558289]
[101.97006989 195.17558289]
[101.97006989 180.17558289]
[99.48495483 165.38287354]
[94.58340454 151.20632935]
[89.68184662 137.02976990]
[76.29556274 130.26164246]
[61.97296906 134.71846008]
[47.65037155 139.17527771]
[44.02775192 143.11180115]
[39.68281174 145.02853394]
[35.52342606 144.99386597]
[32.29362869 143.43312073]
[17.72092628 146.98788452]
[3.14822268 150.54264832]
[-1.24092162 165.19470215]
[-12.30165863 175.61376953]
[-26.99482918 179.07456970]
[-41.35142517 174.74513245]
[-51.54469299 163.88404846]
[-66.11739349 167.43881226]
[-80.69010162 170.99357605]
[-90.21788788 183.90097046]
[-106.25450134 184.35545349]
[-116.49802399 172.00839233]
[-113.09049225 156.33139038]
[-98.64588165 149.35050964]
[-84.24485779 156.42086792]
[-69.67215729 152.86611938]
[-55.09945297 149.31135559]
[-51.05228806 134.97656250]
[-40.30182648 124.52268982]
[-25.66545486 120.82904816]
[-11.04946232 124.98471069]
[-0.40653929 135.96994019]
[14.16616344 132.41519165]
[28.73886681 128.86042786]
[43.19355392 124.85268402]
[57.51615143 120.39586639]
[71.83875275 115.93904877]
[62.77189255 107.53318787]
[56.68546677 94.96488190]
[55.27459717 79.42796326]
[43.57497406 70.04080200]
[27.53496361 70.35331726]
[17.40113640 57.91607285]
[20.94729614 42.26985168]
[35.45313263 35.41709518]
[49.79100800 42.61465454]
[52.96213531 58.34117508]
[64.66175842 67.72834015]
[70.60794830 63.15747070]
[82.50032806 54.01573563]
[88.44651794 49.44487000]
[82.38350677 35.72481537]
[76.32048798 22.00476074]
[62.76804733 12.77094936]
[64.25820160 -3.56035376]
[79.25801849 -10.18890381]
[92.33695984 -0.29581603]
[90.04054260 15.94174862]
[96.10356140 29.66180229]
[102.16657257 43.38185501]
[109.20233154 45.97956467]
[110.45928192 31.03232002]
[111.71623230 16.08507729]
[106.92321014 1.87145829]
[110.44785309 -12.70855808]
[121.20429993 -23.16317177]
[135.87869263 -26.27153778]
[149.95018005 -21.07603073]
[159.08361816 -9.17727757]
[160.46519470 5.75896215]
[153.66926575 19.13114548]
[140.78985596 26.81949425]
[132.03184509 38.99723816]
[123.27384949 51.17498016]
[130.30961609 53.77268600]
[143.83380127 47.28452301]
[157.35798645 40.79635620]
[170.88218689 34.30819321]
[184.40637207 27.82002640]
[197.93055725 21.33186150]
[194.84385681 6.57599211]
[195.37886047 -8.48977089]
[199.50445557 -22.98952293]
[206.98080444 -36.08026886]
[217.37322998 -47.00093079]
[230.07754517 -55.11659241]
[244.35511780 -59.95542145]
[259.37588501 -61.23609543]
[274.26654053 -58.88415909]
[288.16137695 -53.03634644]
[300.25256348 -44.03264618]
[309.83712769 -32.39651871]
[316.35784912 -18.80447388]
[319.43560791 -4.04673624]
[318.89147949 11.01869965]
[314.75708008 25.51594925]
[307.27279663 38.60215759]
[296.87374878 49.51651764]
[284.16452026 57.62447739]
[269.88403320 62.45465088]
[254.86248779 63.72621536]
[239.97325134 61.36525345]
[226.08197021 55.50901794]
[213.99623108 46.49798584]
[204.41873169 34.85605240]
[190.89453125 41.34421539]
[177.37034607 47.83238220]
[163.84616089 54.32054520]
[150.32196045 60.80871201]
[136.79777527 67.29687500]
[138.14532471 114.46095276]
[103.85840607 132.12821960]
[108.75995636 146.30477905]
[113.66150665 160.48132324]
[117.13760376 145.88966370]
[125.31427002 133.31420898]
[137.24082947 124.21710205]
[151.53057861 119.65606689]
[166.52206421 120.16139984]
[180.47224426 125.67435455]
[191.75912476 135.55393982]
[199.07040405 148.65145874]
[201.55601501 163.44407654]
[198.92694092 178.21188354]
[191.48887634 191.23782349]
[180.10661316 201.00738525]
[166.10359192 206.38465881]
[151.10789490 206.74446106]
[136.86309814 202.04492188]
[125.02540588 192.83248901]
[116.97006989 180.17558289]
[116.97006989 195.17558289]
[116.97006989 210.17558289]
[116.97006989 225.17558289]
[116.97006989 240.17558289]
[116.97006989 255.17558289]
[116.97006989 270.17559814]
[116.97006989 285.17559814]
[116.97006989 300.17559814]
[116.97006989 315.17559814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[14 47]
[15 46]
[16 45]
[20 44]
[21 43]
[22 42]
[27 37]
[28 36]
[29 35]
[50 58]
[51 57]
[61 70]
[62 69]
[63 68]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
