%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAxxxxxxxxxxGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[27.99951744 255.08872986]
[21.09251976 268.40390015]
[14.18552017 281.71905518]
[7.27852154 295.03421021]
[0.37152320 308.34936523]
[-6.39659166 321.73562622]
[-13.02509022 335.19158936]
[-19.65358925 348.64758301]
[-26.28208733 362.10354614]
[-27.85744286 378.98413086]
[-44.51444244 382.14337158]
[-52.16131973 367.01187134]
[-39.73805237 355.47503662]
[-33.10955429 342.01907349]
[-26.48105621 328.56311035]
[-19.85255623 315.10714722]
[-19.71725273 307.66891479]
[-12.94363213 301.44235229]
[-6.03663397 288.12719727]
[0.87036461 274.81204224]
[7.77736330 261.49688721]
[14.68436146 248.18173218]
[-6.35324621 233.88641357]
[-25.03750610 216.62849426]
[-40.95497894 196.78987122]
[-53.75344467 174.80949402]
[-63.14971161 151.17378235]
[-77.64530945 155.03094482]
[-92.14090729 158.88809204]
[-103.36867523 170.84088135]
[-119.26998138 166.83084106]
[-123.48692322 150.98313904]
[-111.68147278 139.60055542]
[-95.99806213 144.39250183]
[-81.50246429 140.53533936]
[-67.00686646 136.67817688]
[-69.02572632 125.82414246]
[-70.33992767 114.86244965]
[-70.94399261 103.83879089]
[-70.83538818 92.79912567]
[-70.01458740 81.78948975]
[-68.48500824 70.85576630]
[-66.25301361 60.04354477]
[-63.32792664 49.39789963]
[-59.72192764 38.96321106]
[-55.45005798 28.78298378]
[-50.53012466 18.89965630]
[-44.98263550 9.35443306]
[-38.83072281 0.18710583]
[-32.10003281 -8.56410599]
[-24.81862259 -16.86271858]
[-17.01684952 -24.67413712]
[-8.72723961 -31.96579552]
[0.01564979 -38.70729446]
[9.17536926 -44.87052917]
[18.71373177 -50.42980576]
[28.59097290 -55.36194611]
[38.76591492 -59.64639282]
[49.19613647 -63.26527786]
[59.83816147 -66.20352173]
[70.64761353 -68.44886780]
[81.57943726 -69.99195862]
[92.58805847 -70.82636261]
[103.62757874 -70.94860077]
[114.65196991 -70.35816193]
[125.61528778 -69.05751038]
[136.47180176 -67.05206299]
[147.17628479 -64.35018158]
[157.68408203 -60.96313477]
[167.95140076 -56.90504074]
[177.93542480 -52.19281387]
[187.59454346 -46.84610748]
[196.88848877 -40.88720322]
[205.77851868 -34.34094620]
[214.22753906 -27.23463058]
[222.20037842 -19.59787941]
[229.66374207 -11.46253109]
[236.58656311 -2.86250019]
[242.93995667 6.16635942]
[248.69744873 15.58640766]
[253.83500671 25.35837173]
[258.33123779 35.44151306]
[272.45605469 30.39275551]
[286.58087158 25.34399986]
[293.39746094 11.33787632]
[307.79394531 6.41893291]
[321.10464478 13.00384998]
[335.22946167 7.95509386]
[349.35424805 2.90633750]
[363.47906494 -2.14241886]
[377.60385132 -7.19117546]
[363.85345459 -13.18504906]
[356.11431885 -26.03440475]
[357.24594116 -40.99166107]
[366.83013916 -52.53040695]
[381.32580566 -56.38731003]
[395.37707520 -51.13731766]
[403.79223633 -38.72019958]
[403.46209717 -23.72383308]
[394.50933838 -11.68958759]
[409.24716187 -14.48191166]
[423.95510864 -17.42739487]
[438.66308594 -20.37287712]
[453.37103271 -23.31835938]
[468.07901001 -26.26384163]
[476.63262939 -39.55335236]
[492.09552002 -42.82043457]
[505.29385376 -34.12678909]
[508.39727783 -18.63019753]
[499.56457520 -5.52451420]
[484.03604126 -2.58510995]
[471.02447510 -11.55588055]
[456.31652832 -8.61039734]
[441.60855103 -5.66491508]
[426.90060425 -2.71943259]
[412.19262695 0.22604981]
[406.21295166 4.65200138]
[397.14822388 3.07646823]
[382.65261841 6.93362761]
[368.52780151 11.98238373]
[354.40301514 17.03114128]
[340.27819824 22.07989693]
[326.15341187 27.12865257]
[320.03271484 40.65909958]
[305.78009033 45.98046875]
[291.62960815 39.46880341]
[277.50482178 44.51755905]
[263.38000488 49.56631470]
[267.46316528 65.46486664]
[270.00302124 81.68167877]
[270.97616577 98.06730652]
[270.37365723 114.47074890]
[268.20101929 130.74082947]
[264.47830200 146.72761536]
[259.23980713 162.28378296]
[252.53379822 177.26594543]
[244.42207336 191.53605652]
[234.97940063 204.96258545]
[224.29280090 217.42181396]
[212.46075439 228.79891968]
[199.59230042 238.98905945]
[185.80603027 247.89831543]
[171.22898865 255.44456482]
[155.99552917 261.55828857]
[140.24603271 266.18316650]
[124.12564850 269.27651978]
[107.78291321 270.80987549]
[91.36846161 270.76907349]
[75.03355408 269.15454102]
[58.92873383 265.98114014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 16]
[7 15]
[8 14]
[9 13]
[27 36]
[28 35]
[29 34]
[82 128]
[83 127]
[84 126]
[87 123]
[88 122]
[89 121]
[90 120]
[91 119]
[100 118]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
