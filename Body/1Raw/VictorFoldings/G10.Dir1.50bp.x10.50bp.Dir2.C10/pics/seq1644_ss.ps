%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGxxxxxxxxxxAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 270.58795166]
[92.50000000 255.58795166]
[92.50000000 240.58795166]
[92.50000000 225.58795166]
[92.50000000 210.58795166]
[92.50000000 195.58795166]
[92.50000000 180.58795166]
[92.50000000 165.58795166]
[92.50000000 150.58795166]
[92.50000000 135.58795166]
[82.36763763 131.80961609]
[73.79409790 125.21909332]
[67.53734589 116.39902496]
[56.19082642 127.42477417]
[41.90193558 123.22039795]
[27.40633774 127.07755280]
[16.05982208 138.10330200]
[1.77092862 133.89892578]
[-12.72466755 137.75608826]
[-27.22026443 141.61325073]
[-31.00349998 145.39567566]
[-35.42441559 147.12998962]
[-39.57875824 146.92233276]
[-42.74083328 145.22859192]
[-57.44879532 148.17407227]
[-72.15675354 151.11955261]
[-86.86471558 154.06503296]
[-101.57267761 157.01051331]
[-116.28063965 159.95600891]
[-123.62506866 173.76156616]
[-138.14454651 179.56835938]
[-152.98341370 174.63459778]
[-161.13522339 161.28985596]
[-158.75093079 145.83511353]
[-146.95632935 135.56762695]
[-131.32046509 135.33537292]
[-119.22612762 145.24804688]
[-104.51816559 142.30255127]
[-89.81020355 139.35707092]
[-75.10224152 136.41159058]
[-60.39427948 133.46611023]
[-45.68631744 130.52062988]
[-31.07742310 127.11765289]
[-16.58182716 123.26049042]
[-2.08623075 119.40332794]
[8.22346210 108.65347290]
[23.54917717 112.58196259]
[38.04477310 108.72480011]
[48.35446930 97.97493744]
[63.68018341 101.90342712]
[70.85804749 78.23997498]
[91.50762177 64.63572693]
[116.08304596 67.37964630]
[125.34799957 55.58300400]
[134.61294556 43.78636551]
[143.37915039 31.61452675]
[151.63143921 19.08856583]
[159.88372803 6.56260300]
[168.13601685 -5.96335888]
[156.49870300 -15.44827461]
[145.88066101 -26.06187057]
[136.39088440 -37.69523239]
[128.12673950 -50.22898483]
[121.17303467 -63.53450775]
[115.60112762 -77.47527313]
[111.46818542 -91.90821075]
[108.81662750 -106.68523407]
[107.67366791 -121.65468597]
[108.05101776 -136.66297913]
[109.94482422 -151.55607605]
[113.33563995 -166.18116760]
[118.18867493 -180.38818359]
[124.45413208 -194.03131104]
[132.06771851 -206.97056580]
[140.95129395 -219.07316589]
[151.01370239 -230.21493530]
[162.15170288 -240.28150940]
[174.25099182 -249.16961670]
[187.18739319 -256.78802490]
[200.82818604 -263.05859375]
[215.03338623 -267.91693115]
[229.65719604 -271.31323242]
[244.54959106 -273.21258545]
[259.55773926 -273.59555054]
[274.52761841 -272.45819092]
[289.30563354 -269.81216431]
[303.74011230 -265.68463135]
[317.68295288 -260.11791992]
[330.99108887 -253.16918945]
[343.52792358 -244.90974426]
[355.16482544 -235.42431641]
[365.78240967 -224.81024170]
[375.27166748 -213.17646790]
[383.53524780 -200.64234924]
[390.48837280 -187.33651733]
[396.05966187 -173.39550781]
[400.19198608 -158.96238708]
[402.84289551 -144.18525696]
[403.98519897 -129.21574402]
[403.60717773 -114.20748138]
[401.71270752 -99.31446075]
[398.32125854 -84.68951416]
[393.46759033 -70.48271942]
[387.20153809 -56.83986282]
[379.58740234 -43.90093994]
[370.70327759 -31.79872704]
[360.64038086 -20.65741158]
[349.50192261 -10.59132004]
[337.40225220 -1.70374990]
[324.46551514 5.91409922]
[310.82446289 12.18405533]
[296.61904907 17.04177856]
[281.99505615 20.43742180]
[267.10260010 22.33613777]
[252.09443665 22.71844292]
[237.12460327 21.58041763]
[222.34671021 18.93373489]
[207.91239929 14.80555725]
[193.96980286 9.23824596]
[180.66198730 2.28893042]
[172.40969849 14.81489182]
[164.15740967 27.34085464]
[155.90512085 39.86681747]
[156.38378906 42.69139099]
[155.73545837 45.88100433]
[153.81323242 48.99338913]
[150.63803101 51.54078293]
[146.40959167 53.05131149]
[137.14463806 64.84795380]
[127.87969208 76.64459229]
[131.74121094 82.24478149]
[134.49234009 88.46608734]
[136.03681946 95.09088135]
[136.32064819 101.88741302]
[135.33389282 108.61791992]
[133.11105347 115.04694366]
[129.72990417 120.94959259]
[125.30871582 126.11936188]
[120.00216675 130.37541199]
[113.99588776 133.56884766]
[107.50000000 135.58795166]
[107.50000000 150.58795166]
[107.50000000 165.58795166]
[107.50000000 180.58795166]
[107.50000000 195.58795166]
[107.50000000 210.58795166]
[107.50000000 225.58795166]
[107.50000000 240.58795166]
[107.50000000 255.58795166]
[107.50000000 270.58795166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 50]
[15 48]
[16 47]
[18 45]
[19 44]
[20 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[53 130]
[54 129]
[55 128]
[56 123]
[57 122]
[58 121]
[59 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
