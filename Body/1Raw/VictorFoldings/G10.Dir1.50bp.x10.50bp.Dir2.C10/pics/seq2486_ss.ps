%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAxxxxxxxxxxUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.24272156 231.88725281]
[94.93066406 216.89050293]
[94.61860657 201.89373779]
[94.30654907 186.89698792]
[93.99449158 171.90023804]
[93.68244171 156.90348816]
[93.37038422 141.90672302]
[93.05832672 126.90997314]
[92.74626923 111.91322327]
[86.39913940 98.32227325]
[75.10013580 88.45654297]
[77.24862671 103.30187988]
[71.16528320 117.01293182]
[58.71701431 125.38195801]
[43.72402573 125.84060669]
[30.78748131 118.24812317]
[23.87743950 104.93454742]
[25.11450195 89.98564148]
[34.11903381 77.98904419]
[48.12765503 72.62634277]
[62.84201431 75.54366302]
[53.57706451 63.74702454]
[44.31211472 51.95038605]
[35.04716492 40.15374756]
[25.78221703 28.35710526]
[16.51726723 16.56046677]
[4.41320562 19.51629066]
[-7.87017965 17.84561920]
[-18.63467026 11.82615566]
[-26.40916252 2.33358145]
[-30.15066719 -9.28555584]
[-45.08497620 -10.68785954]
[-60.01928329 -12.09016228]
[-74.95359039 -13.49246597]
[-89.88790131 -14.89476967]
[-104.82220459 -16.29707336]
[-119.28527832 -9.88379383]
[-131.23347473 -18.77704239]
[-147.56849670 -14.23793411]
[-156.45219421 -28.67802429]
[-145.03567505 -41.21195984]
[-129.83117676 -33.71134949]
[-116.43630219 -40.22492981]
[-103.41989899 -31.23138046]
[-88.48559570 -29.82907677]
[-73.55128479 -28.42677307]
[-58.61697769 -27.02447128]
[-43.68267059 -25.62216759]
[-28.74836349 -24.21986389]
[-22.39596367 -35.27713776]
[-12.29609108 -43.06230545]
[-15.69906902 -57.67119598]
[-19.10204697 -72.28009033]
[-22.50502396 -86.88898468]
[-37.54021454 -86.30629730]
[-52.41393280 -88.57984161]
[-66.58850861 -93.62741852]
[-79.55152893 -101.26656342]
[-90.83438873 -111.22113037]
[-100.02923584 -123.13127136]
[-106.80366516 -136.56643677]
[-110.91279602 -151.04095459]
[-112.20807648 -166.03157043]
[-110.64269257 -180.99639893]
[-106.27322388 -195.39445496]
[-99.25762939 -208.70527649]
[-89.84951782 -220.44767761]
[-78.38898468 -230.19717407]
[-65.29032135 -237.60133362]
[-51.02703857 -242.39248657]
[-36.11473846 -244.39746094]
[-21.09250069 -243.54374695]
[-6.50336218 -239.86222839]
[7.12528515 -233.48599243]
[19.30077553 -224.64552307]
[29.58297157 -213.66040039]
[37.60017776 -200.92771912]
[43.06258011 -186.90779114]
[45.77271271 -172.10739136]
[45.63261032 -157.06156921]
[42.64733505 -142.31420898]
[36.92480087 -128.39842224]
[28.67187500 -115.81725311]
[18.18689537 -105.02551270]
[5.84889030 -96.41330719]
[-7.89613199 -90.29196167]
[-4.49315405 -75.68306732]
[-1.09017599 -61.07417679]
[2.31280184 -46.46528244]
[19.82864571 -41.57255936]
[32.12253952 -28.01156998]
[35.31998825 -9.86932468]
[28.31390762 7.29551649]
[37.57885742 19.09215736]
[46.84380722 30.88879585]
[56.10875320 42.68543625]
[65.37370300 54.48207474]
[74.63865662 66.27871704]
[84.96585846 77.15753937]
[96.26486206 87.02326202]
[131.11665344 76.23989868]
[146.05096436 77.64219666]
[159.28100586 66.24468994]
[176.32855225 67.87736511]
[186.73681641 81.05028534]
[201.69706726 82.14159393]
[216.65731812 83.23290253]
[223.12878418 69.50393677]
[234.12541199 59.04264832]
[248.16000366 53.26384735]
[263.33450317 52.94906616]
[277.59667969 58.14087677]
[289.01766968 68.13713074]
[296.05291748 81.58591461]
[297.75094604 96.66839600]
[293.88208008 111.34478760]
[284.96960449 123.63022614]
[272.21884155 131.86322021]
[257.35418701 134.93029785]
[242.38601685 132.41670227]
[229.33863831 124.66233826]
[219.97657776 112.71593475]
[215.56600952 98.19315338]
[200.60575867 97.10184479]
[185.64550781 96.01052856]
[177.13871765 105.73838806]
[164.38732910 108.81680298]
[152.01681519 103.89763641]
[144.64866638 92.57650757]
[129.71435547 91.17420197]
[124.22151947 96.28094482]
[136.65530396 104.67147064]
[151.42991638 107.26197815]
[160.59751892 119.13442993]
[159.36677551 134.08386230]
[148.38093567 144.29713440]
[133.38157654 144.43644714]
[122.20793152 134.42897034]
[120.69953918 119.50570679]
[113.23585510 106.49442291]
[107.74302673 111.60116577]
[108.05507660 126.59791565]
[108.36713409 141.59466553]
[108.67919159 156.59143066]
[108.99124908 171.58818054]
[109.30330658 186.58493042]
[109.61536407 201.58168030]
[109.92741394 216.57844543]
[110.23947144 231.57519531]
[112.83047485 250.78291321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 100]
[11 99]
[21 98]
[22 97]
[23 96]
[24 95]
[25 94]
[26 93]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[38 42]
[51 89]
[52 88]
[53 87]
[54 86]
[101 130]
[102 129]
[105 125]
[106 124]
[107 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
