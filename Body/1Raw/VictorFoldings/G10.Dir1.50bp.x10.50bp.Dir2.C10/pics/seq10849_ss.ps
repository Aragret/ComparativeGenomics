%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCxxxxxxxxxxGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.43054199 291.80477905]
[85.43054199 276.80477905]
[85.43054199 261.80477905]
[85.43054199 246.80477905]
[85.43054199 231.80477905]
[85.43054199 216.80477905]
[85.43054199 201.80477905]
[85.43054199 186.80477905]
[85.43054199 171.80477905]
[85.43054199 156.80477905]
[78.88396454 153.14521790]
[71.69258118 166.30895996]
[64.50119781 179.47270203]
[64.48490906 194.47268677]
[51.54261398 202.05537415]
[38.44968414 194.73587036]
[38.13016891 179.73927307]
[50.89854050 171.86877441]
[58.34467697 158.84744263]
[65.79080963 145.82611084]
[59.24423599 142.16656494]
[46.46687698 150.02398682]
[39.14454651 164.69761658]
[22.76144409 165.42289734]
[14.17110443 151.45370483]
[22.21053314 137.16036987]
[38.60945129 137.24662781]
[51.38681030 129.38920593]
[50.99690247 120.42643738]
[52.11433792 112.02936554]
[37.18003082 113.43167114]
[22.24572372 114.83396912]
[12.35837555 127.16344452]
[-3.36019778 128.80722046]
[-15.58444691 118.79006958]
[-17.06194115 103.05499268]
[-6.91610909 90.93733215]
[8.83370686 89.62628174]
[20.84342003 99.89966583]
[35.77772903 98.49736023]
[50.71203613 97.09505463]
[57.11251831 75.53765869]
[72.40962219 59.05475616]
[93.43009186 51.06557083]
[115.81343842 53.22738647]
[122.72043610 39.91223145]
[129.62744141 26.59707451]
[136.53443909 13.28191948]
[143.44143677 -0.03323644]
[130.72625732 -8.00675297]
[118.70330048 -16.99015045]
[107.45259094 -26.92364693]
[97.04899597 -37.74113083]
[87.56174469 -49.37062073]
[79.05398560 -61.73471451]
[71.58233643 -74.75113678]
[65.19651031 -88.33325195]
[59.93901062 -102.39069366]
[55.84482193 -116.82988739]
[52.94119644 -131.55476379]
[51.24745560 -146.46730042]
[50.77486801 -161.46829224]
[51.52658463 -176.45787048]
[53.49759674 -191.33630371]
[56.67479324 -206.00457764]
[61.03702164 -220.36508179]
[66.55525970 -234.32221985]
[73.19277954 -247.78312683]
[80.90541077 -260.65823364]
[89.64183044 -272.86181641]
[99.34388733 -284.31271362]
[109.94702911 -294.93469238]
[121.38067627 -304.65704346]
[133.56875610 -313.41510010]
[146.43014526 -321.15057373]
[159.87925720 -327.81198120]
[173.82658386 -333.35498047]
[188.17930603 -337.74270630]
[202.84191895 -340.94592285]
[217.71682739 -342.94332886]
[232.70506287 -343.72164917]
[247.70686340 -343.27569580]
[262.62237549 -341.60839844]
[277.35238647 -338.73092651]
[291.79882812 -334.66235352]
[305.86557007 -329.42980957]
[319.45901489 -323.06811523]
[332.48867798 -315.61956787]
[344.86782837 -307.13375854]
[356.51416016 -297.66717529]
[367.35006714 -287.28280640]
[377.30352783 -276.04974365]
[386.30825806 -264.04275513]
[394.30432129 -251.34173584]
[401.23852539 -238.03123474]
[407.06472778 -224.19979858]
[411.74414062 -209.93951416]
[415.24560547 -195.34526062]
[417.54586792 -180.51414490]
[418.62960815 -165.54490662]
[418.48956299 -150.53713989]
[417.12673950 -135.59071350]
[414.55014038 -120.80511475]
[410.77694702 -106.27872467]
[405.83227539 -92.10823059]
[399.74902344 -78.38792419]
[392.56768799 -65.20912170]
[384.33599854 -52.65951538]
[375.10882568 -40.82263184]
[364.94750977 -29.77724266]
[353.91970825 -19.59685326]
[342.09878540 -10.34921455]
[329.56344604 -2.09586740]
[316.39706421 5.10826159]
[302.68731689 11.21522999]
[288.52539062 16.18439674]
[274.00555420 19.98269081]
[259.22442627 22.58483505]
[244.28038025 23.97351456]
[229.27287292 24.13948631]
[214.30177307 23.08164597]
[199.46672058 20.80703163]
[184.86642456 17.33078384]
[170.59806824 12.67603493]
[156.75659180 6.87376213]
[149.84959412 20.18891716]
[142.94259644 33.50407410]
[136.03559875 46.81922913]
[129.12858582 60.13438416]
[137.21343994 66.61662292]
[143.85641479 74.73696136]
[148.72627258 84.17472076]
[151.56312561 94.54248047]
[152.19172668 105.40192413]
[150.53144836 116.28236389]
[146.60197449 126.70113373]
[140.52481079 136.18501282]
[132.52005005 144.29162598]
[122.89879608 150.63005066]
[112.05115509 154.87939453]
[100.43054199 156.80477905]
[100.43054199 171.80477905]
[100.43054199 186.80477905]
[100.43054199 201.80477905]
[100.43054199 216.80477905]
[100.43054199 231.80477905]
[100.43054199 246.80477905]
[100.43054199 261.80477905]
[100.43054199 276.80477905]
[100.43054199 291.80477905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 28]
[22 27]
[30 41]
[31 40]
[32 39]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
