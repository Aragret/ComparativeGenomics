%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCxxxxxxxxxxAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.13488770]
[92.50000000 237.13488770]
[92.50000000 222.13488770]
[92.50000000 207.13488770]
[92.50000000 192.13488770]
[92.50000000 177.13488770]
[92.50000000 162.13488770]
[92.50000000 147.13488770]
[92.50000000 132.13488770]
[92.50000000 117.13488770]
[85.73188782 103.74860382]
[73.65189362 94.85624695]
[61.57190704 85.96389771]
[49.49192047 77.07154846]
[37.41193008 68.17919922]
[21.71135139 66.22924042]
[16.04851723 52.45311356]
[3.96852922 43.56076431]
[-8.11145878 34.66841507]
[-20.19144821 25.77606583]
[-32.27143478 16.88371468]
[-44.35142517 7.99136591]
[-56.43141174 -0.90098381]
[-68.93488312 9.76450443]
[-83.59629822 17.17169380]
[-99.58444214 20.90492249]
[-115.99389648 20.75669861]
[-131.89631653 16.73923111]
[-146.39291382 9.08351517]
[-158.66532898 -1.77393377]
[-168.02174377 -15.21597862]
[-173.93595886 -30.47993279]
[-176.07691956 -46.70083618]
[-174.32730103 -62.96046448]
[-168.78988647 -78.33931732]
[-181.40100098 -86.46086121]
[-196.65979004 -83.32923126]
[-209.33357239 -91.74527740]
[-212.22508240 -106.31150055]
[-224.83619690 -114.43304443]
[-237.44732666 -122.55458832]
[-250.30574036 -130.27867126]
[-263.39889526 -137.59777832]
[-276.49203491 -144.91688538]
[-285.57400513 -146.38992310]
[-289.77914429 -152.52688599]
[-302.71722412 -160.11680603]
[-317.94586182 -155.89027405]
[-331.66143799 -163.74258423]
[-335.72671509 -179.01507568]
[-327.72985840 -192.64686584]
[-312.41522217 -196.55044556]
[-298.86874390 -188.40989685]
[-295.12728882 -173.05485535]
[-282.18923950 -165.46495056]
[-269.17294312 -158.01004028]
[-256.07977295 -150.69093323]
[-242.98663330 -143.37182617]
[-239.45724487 -144.01287842]
[-235.43980408 -142.93496704]
[-231.76493835 -139.92703247]
[-229.32579041 -135.16571045]
[-216.71466064 -127.04417419]
[-204.10353088 -118.92263031]
[-189.64601135 -122.31612396]
[-176.74084473 -114.25937653]
[-173.27946472 -99.07199097]
[-160.66833496 -90.95044708]
[-151.07333374 -100.66754150]
[-139.74179077 -108.29838562]
[-127.12004089 -113.53981781]
[-113.70573425 -116.18287659]
[-100.02826691 -116.12105560]
[-86.62780762 -113.35468292]
[-74.03404236 -107.99089813]
[-62.74518585 -100.23957825]
[-53.20829391 -90.40509796]
[-45.80155182 -78.87437439]
[-40.81928635 -66.10163879]
[-38.46025848 -52.59056473]
[-38.81974030 -38.87440109]
[-41.88567734 -25.49490547]
[-47.53906250 -12.98097229]
[-35.45907593 -4.08862257]
[-23.37908554 4.80372715]
[-11.29909801 13.69607639]
[0.78089058 22.58842659]
[12.86087894 31.48077583]
[24.94086647 40.37312698]
[39.77740479 41.68704987]
[46.30428314 56.09921265]
[58.38426971 64.99156189]
[70.46425629 73.88391113]
[82.54424286 82.77626038]
[94.62423706 91.66860962]
[97.39863586 86.47184753]
[103.38413239 82.69091797]
[111.71144867 81.97255707]
[120.76139832 85.43933105]
[135.66329956 83.72664642]
[150.56520081 82.01395416]
[165.46710205 80.30126190]
[154.71775818 69.83936310]
[154.32202148 54.84458542]
[164.50460815 43.83027267]
[179.48428345 43.04984665]
[190.75630188 52.94639969]
[191.92091370 67.90112305]
[182.31555176 79.42413330]
[197.31474304 79.58016968]
[212.31391907 79.73620605]
[226.32710266 71.21781158]
[240.57890320 79.33063507]
[240.40832520 95.72889709]
[225.99081421 103.54347229]
[212.15788269 94.73539734]
[197.15870667 94.57936096]
[182.15951538 94.42332458]
[167.17979431 95.20317078]
[152.27789307 96.91585541]
[137.37599182 98.62854767]
[122.47409058 100.34123993]
[136.37284851 105.98255920]
[150.27160645 111.62388611]
[164.17036438 117.26521301]
[179.14668274 118.10756683]
[192.78123474 124.36048889]
[203.19093323 135.16040039]
[208.93811035 149.01573181]
[209.22901917 164.01290894]
[204.02346802 178.08067322]
[194.04040527 189.27615356]
[180.65859985 196.05311584]
[165.72621155 197.47560120]
[151.30552673 193.34716797]
[139.38821411 184.23796082]
[131.62014771 171.40608215]
[129.07414246 156.62609863]
[121.88276672 143.46235657]
[114.69138336 130.29862976]
[107.50000000 117.13488770]
[107.50000000 132.13488770]
[107.50000000 147.13488770]
[107.50000000 162.13488770]
[107.50000000 177.13488770]
[107.50000000 192.13488770]
[107.50000000 207.13488770]
[107.50000000 222.13488770]
[107.50000000 237.13488770]
[107.50000000 252.13488770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 95]
[12 94]
[13 93]
[14 92]
[15 91]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[35 68]
[36 67]
[39 64]
[40 63]
[41 62]
[42 58]
[43 57]
[44 56]
[46 55]
[47 54]
[99 122]
[100 121]
[101 120]
[102 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
