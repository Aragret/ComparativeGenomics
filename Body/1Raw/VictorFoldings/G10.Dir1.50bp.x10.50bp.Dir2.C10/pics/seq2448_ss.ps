%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAxxxxxxxxxxCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.73095703 455.30603027]
[131.73095703 440.30603027]
[131.73095703 425.30603027]
[131.73095703 410.30603027]
[131.73095703 395.30603027]
[131.73095703 380.30603027]
[131.73095703 365.30603027]
[131.73095703 350.30603027]
[131.73095703 335.30603027]
[131.73095703 320.30603027]
[118.37796021 317.92645264]
[105.61145020 313.33621216]
[93.79473114 306.66479492]
[83.26425934 298.10092163]
[74.32006073 287.88714600]
[67.21723938 276.31307983]
[62.15862656 263.70721436]
[59.28905869 250.42747498]
[58.69116974 236.85110474]
[60.38306427 223.36402893]
[64.31772614 210.34976196]
[70.38436890 198.17858887]
[78.41149902 187.19697571]
[88.17182922 177.71777344]
[99.38866425 170.01121521]
[111.74375916 164.29728699]
[124.88636017 160.73942566]
[138.44314575 159.43980408]
[139.69001770 144.49172974]
[140.93688965 129.54364014]
[123.95646667 141.74287415]
[104.40389252 145.56100464]
[86.00091553 141.09916687]
[71.92191315 129.96246338]
[64.24678802 114.83052063]
[63.66634369 98.85694122]
[49.09364319 95.30217743]
[34.52093887 91.74741364]
[19.94823647 88.19264984]
[5.37553406 84.63789368]
[-7.99793911 93.05963135]
[-23.39076042 89.47681427]
[-31.67064095 76.01504517]
[-27.92527390 60.66096497]
[-14.37672138 52.52387238]
[0.93690228 56.43136215]
[8.93029594 70.06518555]
[23.50299835 73.61994934]
[38.07570267 77.17471313]
[52.64840317 80.72947693]
[67.22110748 84.28423309]
[68.39182281 82.04549408]
[69.71520996 79.89347076]
[71.18486786 77.83856964]
[61.43721390 66.43754578]
[51.68956375 55.03652573]
[36.05626678 50.08353806]
[32.79375839 34.01219559]
[45.25822449 23.35531425]
[60.62729263 29.07578468]
[63.09058380 45.28887177]
[72.83823395 56.68989182]
[82.58588409 68.09091187]
[103.52480316 56.72539520]
[131.03692627 60.18336487]
[130.41294861 45.19635010]
[115.95791626 40.63258362]
[103.93742371 31.39767265]
[95.80300140 18.60677910]
[92.53691864 3.80446529]
[94.53356934 -11.22181797]
[101.55184937 -24.65757370]
[112.74427032 -34.88037109]
[126.75928497 -40.65575409]
[141.90452576 -41.28631592]
[156.35112000 -36.69591904]
[168.35456848 -27.43887329]
[176.46540833 -14.63301182]
[179.70420837 0.17529592]
[177.67987061 15.19787407]
[170.63684082 28.62067413]
[159.42559814 38.82282639]
[145.39996338 44.57237244]
[146.02394104 59.55938721]
[159.47990417 66.18788910]
[171.74227905 57.54877090]
[184.00463867 48.90965271]
[196.26701355 40.27053833]
[208.52937317 31.63142204]
[220.79174805 22.99230576]
[233.05412292 14.35318851]
[245.13410950 5.46083927]
[257.02648926 -3.68089509]
[268.91885376 -12.82262897]
[280.81124878 -21.96436310]
[286.57031250 -37.31901169]
[302.78952026 -39.74156570]
[312.78396606 -26.73990631]
[306.27221680 -11.68902779]
[289.95297241 -10.07198334]
[278.06060791 -0.93024945]
[266.16821289 8.21148491]
[254.27583313 17.35321808]
[252.77644348 21.94966698]
[248.33613586 25.62593842]
[241.69323730 26.61555672]
[229.43086243 35.25467300]
[217.16850281 43.89378738]
[204.90612793 52.53290558]
[192.64375305 61.17201996]
[180.38139343 69.81113434]
[168.11901855 78.45025635]
[169.28457642 85.85913086]
[184.10237122 83.52825928]
[186.43301392 98.34608459]
[171.61567688 100.67688751]
[172.78123474 108.08576965]
[187.10382080 112.54258728]
[202.97299194 108.40719604]
[214.29473877 120.27101898]
[209.42219543 135.92958069]
[193.36784363 139.27468872]
[182.64701843 126.86518097]
[168.32441711 122.40837097]
[155.88497925 130.79051208]
[154.63810730 145.73860168]
[153.39122009 160.68669128]
[169.28677368 165.26208496]
[183.91246033 172.97723389]
[196.65588379 183.50672913]
[206.98396301 196.40740967]
[214.46517944 211.13694763]
[218.78764343 227.07669067]
[219.77210999 243.55763245]
[217.37934875 259.88848877]
[211.71177673 275.38470459]
[203.00901794 289.39709473]
[191.63780212 301.33917236]
[178.07653809 310.71151733]
[162.89509583 317.12277222]
[146.73095703 320.30603027]
[146.73095703 335.30603027]
[146.73095703 350.30603027]
[146.73095703 365.30603027]
[146.73095703 380.30603027]
[146.73095703 395.30603027]
[146.73095703 410.30603027]
[146.73095703 425.30603027]
[146.73095703 440.30603027]
[146.73095703 455.30603027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[28 127]
[29 126]
[30 125]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[54 63]
[55 62]
[56 61]
[65 84]
[66 83]
[85 112]
[86 111]
[87 110]
[88 109]
[89 108]
[90 107]
[91 106]
[92 103]
[93 102]
[94 101]
[95 100]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
