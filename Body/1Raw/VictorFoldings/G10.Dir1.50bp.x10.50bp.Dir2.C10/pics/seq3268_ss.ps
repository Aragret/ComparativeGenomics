%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUxxxxxxxxxxAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.48247528 263.76248169]
[69.48247528 248.76249695]
[69.48247528 233.76249695]
[69.48247528 218.76249695]
[69.48247528 203.76249695]
[69.48247528 188.76249695]
[69.48247528 173.76249695]
[69.48247528 158.76249695]
[69.48247528 143.76249695]
[69.48247528 128.76249695]
[74.37062836 103.72579956]
[91.19446564 95.55939484]
[84.01195526 82.39081573]
[76.82945251 69.22222900]
[60.90419769 60.03712082]
[61.93937683 42.54631424]
[54.48446655 29.53000641]
[39.82207489 33.05979919]
[24.77212715 32.38719177]
[10.51397800 27.57395172]
[-1.83757186 19.00595474]
[-11.31944275 7.36227274]
[-17.19536591 -6.43863487]
[-19.01305389 -21.31137657]
[-16.63899231 -36.08898163]
[-10.26821709 -49.61447525]
[-21.56722260 -59.48019791]
[-32.86622620 -69.34592438]
[-39.83863831 -63.29819107]
[-50.19713593 -60.58786774]
[-62.20685196 -62.85067368]
[-76.85035706 -66.10150146]
[-91.49385834 -69.35232544]
[-106.13735962 -72.60314941]
[-120.78086090 -75.85397339]
[-135.42436218 -79.10480499]
[-144.45245361 -66.84048462]
[-157.69158936 -59.31417847]
[-172.84799194 -57.82985306]
[-187.29573059 -62.64468002]
[-198.53166199 -72.92446136]
[-204.60906982 -86.88816071]
[-204.47502136 -102.11648560]
[-198.15274048 -115.97103882]
[-186.73757935 -126.05142975]
[-172.20732117 -130.61117554]
[-157.07939148 -128.86026001]
[-143.97480774 -121.10205841]
[-135.16401672 -108.68071747]
[-132.17353821 -93.74830627]
[-117.53003693 -90.49747467]
[-102.88653564 -87.24665070]
[-88.24303436 -83.99582672]
[-73.59952545 -80.74500275]
[-58.95602798 -77.49417114]
[-50.31691360 -89.75654602]
[-58.30682755 -102.45146942]
[-66.29674530 -115.14640045]
[-74.28665924 -127.84133148]
[-82.27657318 -140.53625488]
[-95.83065796 -150.72071838]
[-89.79634857 -166.56443787]
[-72.90134430 -165.15193176]
[-69.58164978 -148.52618408]
[-61.59173203 -135.83125305]
[-53.60181427 -123.13631439]
[-45.61189651 -110.44139099]
[-37.62198257 -97.74645996]
[-40.57862473 -112.45217896]
[-37.50155258 -127.13317871]
[-28.88865662 -139.41397095]
[-16.13354874 -147.30746460]
[-1.30008495 -149.53643799]
[13.21159458 -145.74024963]
[25.05341530 -136.53311157]
[32.30929947 -123.40481567]
[33.80520248 -108.47959137]
[29.29907799 -94.17243195]
[19.52004433 -82.79831696]
[6.05040789 -76.19763947]
[-8.93036652 -75.43843842]
[-23.00050354 -80.64492798]
[-11.70149899 -70.77920532]
[-0.40249449 -60.91348267]
[9.03553581 -67.43096924]
[19.64816475 -71.78138733]
[30.94524574 -73.76381683]
[42.40501785 -73.28669739]
[53.49821091 -70.37205505]
[63.71248245 -65.15451813]
[72.57608032 -57.87505341]
[84.65607452 -66.76740265]
[96.73606110 -75.65975189]
[95.65661621 -91.04930115]
[103.08877563 -104.56842041]
[116.66098022 -111.90319824]
[132.04237366 -110.71313477]
[144.32481384 -101.37797546]
[149.58901978 -86.87654114]
[146.15521240 -71.83618164]
[135.11907959 -61.05621719]
[120.00224304 -57.97650528]
[105.62841034 -63.57976151]
[93.54842377 -54.68741226]
[81.46842957 -45.79506302]
[87.42772675 -28.10331345]
[86.93619537 -9.39551544]
[80.02234650 8.04404354]
[67.50077820 22.07509613]
[74.95568848 35.09140396]
[86.57849121 38.58677673]
[92.88327026 49.42507935]
[89.99803162 62.03972244]
[97.18054199 75.20830536]
[104.36305237 88.37688446]
[115.45436096 98.47554016]
[129.23674011 104.39550018]
[141.08052063 94.70098877]
[156.07525635 91.63236237]
[170.77526855 95.89477539]
[181.80261230 106.50874329]
[186.62327576 121.03526306]
[184.12950134 136.13624573]
[174.89434814 148.34159851]
[161.03999329 154.84661865]
[145.75004578 154.15649414]
[132.53804016 146.42980957]
[124.43999481 133.44212341]
[123.31678009 118.17787933]
[109.53440094 112.25791931]
[103.27142334 116.38406372]
[112.52841949 128.18695068]
[121.78541565 139.98982239]
[134.25296021 148.33010864]
[134.20016479 163.33001709]
[121.67423248 171.58235168]
[107.87106323 165.71101379]
[105.12822723 150.96382141]
[97.93684387 137.80009460]
[90.74546051 124.63635254]
[84.48247528 128.76249695]
[84.48247528 143.76249695]
[84.48247528 158.76249695]
[84.48247528 173.76249695]
[84.48247528 188.76249695]
[84.48247528 203.76249695]
[84.48247528 218.76249695]
[84.48247528 233.76249695]
[84.48247528 248.76249695]
[84.48247528 263.76248169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 115]
[13 114]
[14 113]
[16 110]
[17 109]
[26 84]
[27 83]
[28 82]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[91 105]
[92 104]
[93 103]
[116 130]
[117 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
