%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAAxxxxxxxxxxCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.42300415]
[92.50000000 286.42300415]
[92.50000000 271.42300415]
[92.50000000 256.42300415]
[92.50000000 241.42298889]
[92.50000000 226.42298889]
[92.50000000 211.42298889]
[92.50000000 196.42298889]
[92.50000000 181.42298889]
[92.50000000 166.42298889]
[77.90982819 163.08952332]
[64.42700195 156.59352112]
[52.72736740 147.26057434]
[43.39741898 135.55856323]
[36.90484238 122.07408142]
[33.57509613 107.48306274]
[33.57509613 92.51693726]
[36.90484238 77.92591858]
[43.39741898 64.44142914]
[52.72736740 52.73941803]
[64.42700195 43.40648651]
[77.90982819 36.91047287]
[92.50000000 33.57700729]
[92.50000000 18.57700539]
[92.50000000 3.57700539]
[92.50000000 -11.42299461]
[92.50000000 -26.42299461]
[92.50000000 -41.42299271]
[77.52563477 -42.38421631]
[62.64361572 -44.30287933]
[47.91510391 -47.17109680]
[33.40062714 -50.97708511]
[19.15981865 -55.70520020]
[5.25120354 -61.33601761]
[-8.26806545 -67.84639740]
[-21.34243584 -75.20958710]
[-33.91817856 -83.39532471]
[-45.94361877 -92.36997986]
[-57.36934280 -102.09667206]
[-68.14839935 -112.53543091]
[-78.23648834 -123.64335632]
[-87.59216309 -135.37481689]
[-96.17697906 -147.68157959]
[-103.95565033 -160.51310730]
[-110.89622498 -173.81663513]
[-116.97016907 -187.53753662]
[-122.15253448 -201.61940002]
[-126.42201233 -216.00434875]
[-129.76107788 -230.63331604]
[-132.15599060 -245.44615173]
[-133.59692383 -260.38198853]
[-134.07794189 -275.37945557]
[-133.59709167 -290.37695312]
[-132.15632629 -305.31280518]
[-129.76156616 -320.12567139]
[-126.42267609 -334.75466919]
[-122.15335083 -349.13967896]
[-116.97113800 -363.22158813]
[-110.89734650 -376.94253540]
[-103.95692444 -390.24615479]
[-96.17839050 -403.07775879]
[-87.59371948 -415.38464355]
[-78.23817444 -427.11618042]
[-68.15019989 -438.22424316]
[-57.37126541 -448.66311646]
[-45.94564819 -458.38992310]
[-33.92030716 -467.36471558]
[-21.34465408 -475.55059814]
[-8.27036667 -482.91390991]
[5.24883032 -489.42443848]
[19.15738297 -495.05541992]
[33.39813614 -499.78369141]
[47.91257477 -503.58984375]
[62.64105225 -506.45822144]
[77.52304840 -508.37704468]
[92.49740601 -509.33843994]
[107.50259399 -509.33843994]
[122.47695160 -508.37704468]
[137.35894775 -506.45822144]
[152.08741760 -503.58984375]
[166.60186768 -499.78369141]
[180.84262085 -495.05541992]
[194.75117493 -489.42443848]
[208.27037048 -482.91390991]
[221.34465027 -475.55059814]
[233.92030334 -467.36471558]
[245.94564819 -458.38992310]
[257.37127686 -448.66311646]
[268.15020752 -438.22424316]
[278.23815918 -427.11618042]
[287.59371948 -415.38464355]
[296.17840576 -403.07775879]
[303.95693970 -390.24615479]
[310.89733887 -376.94253540]
[316.97113037 -363.22158813]
[322.15335083 -349.13967896]
[326.42266846 -334.75466919]
[329.76156616 -320.12567139]
[332.15631104 -305.31280518]
[333.59707642 -290.37695312]
[334.07794189 -275.37945557]
[333.59692383 -260.38198853]
[332.15600586 -245.44615173]
[329.76107788 -230.63331604]
[326.42202759 -216.00434875]
[322.15252686 -201.61940002]
[316.97015381 -187.53753662]
[310.89620972 -173.81663513]
[303.95565796 -160.51310730]
[296.17697144 -147.68157959]
[287.59216309 -135.37481689]
[278.23648071 -123.64335632]
[268.14840698 -112.53543091]
[257.36935425 -102.09667206]
[245.94361877 -92.36997986]
[233.91818237 -83.39532471]
[221.34243774 -75.20958710]
[208.26806641 -67.84639740]
[194.74879456 -61.33601761]
[180.84017944 -55.70520020]
[166.59938049 -50.97708511]
[152.08489990 -47.17109680]
[137.35638428 -44.30287933]
[122.47436523 -42.38421631]
[107.50000000 -41.42299271]
[107.50000000 -26.42299461]
[107.50000000 -11.42299461]
[107.50000000 3.57700539]
[107.50000000 18.57700539]
[107.50000000 33.57700729]
[122.09017181 36.91047287]
[135.57299805 43.40648651]
[147.27262878 52.73941803]
[156.60258484 64.44142914]
[163.09515381 77.92591858]
[166.42491150 92.51693726]
[166.42491150 107.48306274]
[163.09515381 122.07408142]
[156.60258484 135.55856323]
[147.27262878 147.26057434]
[135.57299805 156.59352112]
[122.09017181 163.08952332]
[107.50000000 166.42298889]
[107.50000000 181.42298889]
[107.50000000 196.42298889]
[107.50000000 211.42298889]
[107.50000000 226.42298889]
[107.50000000 241.42298889]
[107.50000000 256.42300415]
[107.50000000 271.42300415]
[107.50000000 286.42300415]
[107.50000000 301.42300415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
