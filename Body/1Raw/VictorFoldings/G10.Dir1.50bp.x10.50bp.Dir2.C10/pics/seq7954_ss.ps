%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGxxxxxxxxxxCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 283.75546265]
[92.50000000 268.75546265]
[92.50000000 253.75546265]
[92.50000000 238.75546265]
[92.50000000 223.75546265]
[92.50000000 208.75546265]
[92.50000000 193.75546265]
[92.50000000 178.75546265]
[92.50000000 163.75546265]
[92.50000000 148.75546265]
[87.14807129 147.62533569]
[81.95417786 145.90960693]
[76.98217010 143.62939453]
[72.29318237 140.81269836]
[67.94488525 137.49418640]
[63.99073029 133.71464539]
[60.47934723 129.52053833]
[47.23676300 136.56567383]
[33.99417496 143.61080933]
[20.75159073 150.65594482]
[7.50900507 157.70108032]
[6.34365416 173.08436584]
[-2.97175932 185.38179016]
[-17.46471977 190.66929626]
[-32.51057816 187.25964355]
[-43.30825424 176.24084473]
[-46.41224670 161.12896729]
[-40.83208847 146.74615479]
[-28.34838295 137.68191528]
[-12.94463730 136.82859802]
[0.46387005 144.45849609]
[13.70645523 137.41336060]
[26.94904137 130.36822510]
[40.19162750 123.32308960]
[53.43421173 116.27796173]
[51.51773834 90.89974213]
[62.50664520 67.94390869]
[83.47583008 53.52101135]
[108.84354401 51.47025299]
[113.74509430 37.29369736]
[118.64664459 23.11713791]
[123.54819489 8.94058037]
[128.44975281 -5.23597813]
[133.35130310 -19.41253662]
[138.25285339 -33.58909607]
[138.10517883 -42.78855515]
[143.40664673 -48.00776291]
[148.60206604 -62.07928085]
[153.79747009 -76.15080261]
[140.98074341 -84.03263092]
[129.95158386 -94.26028442]
[121.13259888 -106.43931580]
[114.86124420 -120.10053253]
[111.37682343 -134.71809387]
[110.81144714 -149.72978210]
[113.18497467 -164.55854797]
[118.40432739 -178.63478088]
[126.26715088 -191.41812134]
[136.46965027 -202.41822815]
[148.61834717 -211.21363831]
[162.24520874 -217.46778870]
[176.82571411 -220.94203186]
[191.79907227 -221.50465393]
[206.58972168 -219.13591003]
[211.78514099 -233.20744324]
[216.98054504 -247.27896118]
[222.17596436 -261.35046387]
[209.22093201 -268.99291992]
[197.83885193 -278.82592773]
[188.39559937 -290.53338623]
[181.19474792 -303.73898315]
[176.46775818 -318.01815796]
[174.36657715 -332.91195679]
[174.95878601 -347.94155884]
[178.22531128 -362.62384033]
[184.06117249 -376.48684692]
[192.27874756 -389.08489990]
[202.61389160 -400.01306152]
[214.73437500 -408.92001343]
[228.25056458 -415.51943970]
[242.72796631 -419.59918213]
[257.70120239 -421.02813721]
[272.68893433 -419.76034546]
[287.20941162 -415.83651733]
[300.79580688 -409.38287354]
[313.01138306 -400.60681152]
[323.46347046 -389.79043579]
[331.81607056 -377.28149414]
[337.80068970 -363.48208618]
[341.22497559 -348.83578491]
[341.97879028 -333.81341553]
[340.03793335 -318.89788818]
[335.46481323 -304.56866455]
[328.40640259 -291.28640747]
[319.08963013 -279.47802734]
[307.81396484 -269.52319336]
[294.94189453 -261.74182129]
[280.88717651 -256.38412476]
[266.10165405 -253.62228394]
[251.06057739 -253.54510498]
[236.24748230 -256.15505981]
[231.05206299 -242.08354187]
[225.85665894 -228.01202393]
[220.66123962 -213.94050598]
[233.44244385 -206.12930298]
[244.45759583 -195.97132874]
[253.28207397 -183.85562134]
[259.57519531 -170.24670410]
[263.09338379 -155.66685486]
[263.69961548 -140.67599487]
[261.36874390 -125.85017395]
[256.18844604 -111.75952148]
[248.35610962 -98.94622803]
[238.17115784 -87.90373230]
[226.02362061 -79.05771637]
[212.37931824 -72.74966431]
[197.76182556 -69.22372437]
[182.73254395 -68.61724091]
[167.86898804 -70.95538330]
[162.67358398 -56.88386536]
[157.47816467 -42.81234741]
[152.42941284 -28.68754387]
[147.52786255 -14.51098537]
[142.62631226 -0.33442730]
[137.72476196 13.84213066]
[132.82319641 28.01868820]
[127.92165375 42.19524765]
[123.02010345 56.37180328]
[130.94433594 61.58395767]
[137.72457886 68.21634674]
[143.11013794 76.02375793]
[146.90194702 84.71757507]
[148.95977783 93.97637939]
[149.20759583 103.45787048]
[147.63621521 112.81152344]
[144.30374146 121.69154358]
[139.33335876 129.76962280]
[132.90884399 136.74714661]
[125.26769257 142.36611938]
[116.69240570 146.41883850]
[107.50000000 148.75546265]
[107.50000000 163.75546265]
[107.50000000 178.75546265]
[107.50000000 193.75546265]
[107.50000000 208.75546265]
[107.50000000 223.75546265]
[107.50000000 238.75546265]
[107.50000000 253.75546265]
[107.50000000 268.75546265]
[107.50000000 283.75546265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[39 128]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[45 122]
[47 121]
[48 120]
[49 119]
[64 104]
[65 103]
[66 102]
[67 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
