%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAxxxxxxxxxxACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.62745667 340.04409790]
[164.00347900 325.05709839]
[163.37950134 310.07006836]
[162.75552368 295.08306885]
[162.13154602 280.09603882]
[161.50756836 265.10903931]
[160.88359070 250.12200928]
[160.25961304 235.13499451]
[156.70484924 220.56228638]
[150.35772705 206.97134399]
[144.01058960 193.38038635]
[131.61466980 185.12265015]
[132.78572083 169.34484863]
[126.43858337 155.75389099]
[120.09145355 142.16293335]
[113.74432373 128.57199097]
[97.19020081 130.26609802]
[82.78141785 123.44248962]
[74.37644196 110.72337341]
[73.80891418 96.18646240]
[80.52585602 84.07321930]
[72.27356720 71.54725647]
[64.02127838 59.02129364]
[55.76898575 46.49533081]
[41.80977249 48.91427231]
[28.02733994 45.82755661]
[16.50435066 37.73559189]
[8.96903992 25.89253235]
[6.53606129 12.11199760]
[9.54169464 -1.51062942]
[17.49780846 -12.91681767]
[9.50789165 -25.61174774]
[1.51797533 -38.30667496]
[-6.47194099 -51.00160599]
[-14.46185684 -63.69653702]
[-27.99937439 -57.19781494]
[-42.18946075 -52.28464508]
[-56.84711838 -49.02108383]
[-71.78125763 -47.44967651]
[-86.79717255 -47.59090805]
[-101.69911194 -49.44293976]
[-116.29279327 -52.98162842]
[-130.38795471 -58.16083527]
[-143.80084229 -64.91304016]
[-156.35658264 -73.15021515]
[-167.89149475 -82.76496887]
[-178.25518799 -93.63195801]
[-187.31257629 -105.60951233]
[-194.94554138 -118.54146576]
[-201.05459595 -132.25924683]
[-205.56008911 -146.58398438]
[-208.40327454 -161.32894897]
[-209.54710388 -176.30191040]
[-208.97665405 -191.30764771]
[-206.69935608 -206.15055847]
[-202.74490356 -220.63710022]
[-197.16487122 -234.57843018]
[-190.03196716 -247.79280090]
[-181.43920898 -260.10794067]
[-171.49862671 -271.36325073]
[-160.33979797 -281.41204834]
[-148.10821533 -290.12332153]
[-134.96331787 -297.38345337]
[-121.07651520 -303.09786987]
[-106.62882233 -307.19198608]
[-91.80860138 -309.61248779]
[-76.80905914 -310.32778931]
[-61.82575989 -309.32858276]
[-47.05402756 -306.62789917]
[-32.68645096 -302.26092529]
[-18.91033554 -296.28460693]
[-5.90528440 -288.77685547]
[6.15915680 -279.83554077]
[17.12570381 -269.57723999]
[26.85138321 -258.13568115]
[35.20940018 -245.66006470]
[42.09079361 -232.31300354]
[47.40584946 -218.26849365]
[51.08527374 -203.70967102]
[53.08110046 -188.82630920]
[53.36730957 -173.81245422]
[51.94016266 -158.86383057]
[48.81827545 -144.17535400]
[44.04234314 -129.93849182]
[37.67462921 -116.33885956]
[29.79815102 -103.55375671]
[20.51559639 -91.74986267]
[9.94797897 -81.08106232]
[-1.76692760 -71.68645477]
[6.22298861 -58.99152374]
[14.21290493 -46.29659271]
[22.20282173 -33.60166168]
[30.19273758 -20.90673447]
[46.00255203 -23.01624680]
[61.20972061 -18.01649475]
[72.76678467 -6.85621595]
[78.33464813 8.27604103]
[76.75588226 24.38098717]
[68.29494476 38.24304199]
[76.54724121 50.76900482]
[84.79953003 63.29496765]
[93.05181885 75.82093048]
[114.91879272 75.79680634]
[131.15791321 94.13061523]
[145.86587524 91.18512726]
[154.41949463 77.89562225]
[169.88240051 74.62853241]
[183.08073425 83.32218170]
[186.18415833 98.81877899]
[177.35145569 111.92446136]
[161.82292175 114.86386108]
[148.81135559 105.89308929]
[134.10339355 108.83857727]
[127.33528137 122.22486115]
[133.68240356 135.81581116]
[140.02954102 149.40675354]
[146.37666321 162.99771118]
[159.22657776 172.22756958]
[157.60154724 187.03326416]
[163.94866943 200.62420654]
[170.29580688 214.21516418]
[171.98332214 199.31039429]
[177.91259766 185.53201294]
[187.57604980 174.05952454]
[200.14642334 165.87506104]
[214.54763794 161.67922974]
[229.54687500 161.83120728]
[243.86010742 166.31802368]
[256.26205444 174.75553894]
[265.69104004 186.42147827]
[271.33987427 200.31718445]
[272.72503662 215.25309753]
[269.72790527 229.95062256]
[262.60504150 243.15156555]
[251.96624756 253.72587585]
[238.72222900 260.76831055]
[224.00675964 263.67602539]
[209.07954407 262.20010376]
[195.21846008 256.46685791]
[183.61006165 246.96711731]
[175.24662781 234.51101685]
[175.87060547 249.49803162]
[176.49458313 264.48504639]
[177.11856079 279.47207642]
[177.74253845 294.45907593]
[178.36651611 309.44610596]
[178.99049377 324.43310547]
[179.61447144 339.42013550]
[186.31445312 354.99401855]
[173.20393372 365.74346924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 121]
[10 120]
[11 119]
[13 117]
[14 116]
[15 115]
[16 114]
[21 102]
[22 101]
[23 100]
[24 99]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
