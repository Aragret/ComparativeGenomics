%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGxxxxxxxxxxAUCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.91415405 410.58291626]
[136.91415405 395.58291626]
[136.91415405 380.58291626]
[136.91415405 365.58291626]
[136.91415405 350.58291626]
[136.91415405 335.58291626]
[136.91415405 320.58291626]
[136.91415405 305.58291626]
[136.91415405 290.58291626]
[136.91415405 275.58291626]
[135.35658264 260.66400146]
[132.25825500 245.98747253]
[129.15992737 231.31094360]
[125.15219116 216.85626221]
[120.25064087 202.67970276]
[115.34909058 188.50314331]
[112.15313721 203.15872192]
[105.72290802 216.71055603]
[96.39216614 228.45521545]
[84.64523315 237.78311157]
[71.09184265 244.21005249]
[56.43548965 247.40245056]
[41.43692780 247.19459534]
[26.87467003 243.59729004]
[13.50457859 236.79724121]
[2.02063751 227.14743042]
[-6.98107004 215.14871216]
[-13.03330421 201.42388916]
[-15.82191849 186.68537903]
[-15.20216751 171.69819641]
[-11.20622158 157.24023438]
[-4.04149103 144.06198120]
[5.92013168 132.84742737]
[18.16158104 124.17869568]
[32.04745865 118.50573730]
[46.85700226 116.12301636]
[61.82151794 117.15419769]
[76.16425323 121.54576874]
[89.14074707 129.06977844]
[100.07743835 139.33567810]
[108.40664673 151.81062317]
[113.69653320 165.84901428]
[116.48886108 151.11122131]
[119.28118134 136.37341309]
[122.07350922 121.63560486]
[124.86582947 106.89779663]
[111.32265472 121.60147858]
[92.45530701 121.69908142]
[80.30521393 108.76599121]
[81.43759918 92.18156433]
[70.77597046 81.63027191]
[55.52458954 77.42243958]
[51.92092514 62.97035217]
[41.25930023 52.41906357]
[25.26839256 48.78273392]
[20.68124580 33.03820801]
[32.21672440 21.38210297]
[48.00811386 25.80521965]
[51.81059265 41.75743866]
[62.47221756 52.30872726]
[76.96101379 55.76185608]
[81.32726288 70.96864319]
[91.98889160 81.51993561]
[100.93955994 77.04592133]
[112.16414642 77.24208832]
[112.16414642 62.24208450]
[112.16414642 47.24208450]
[112.16414642 32.24208450]
[98.10696411 26.45728302]
[87.33708954 15.72982979]
[81.49685669 1.69558060]
[81.47686005 -13.50534153]
[87.28015137 -27.55490685]
[98.02175903 -38.31065750]
[112.06368256 -44.13242340]
[127.26461792 -44.13242340]
[141.30653381 -38.31065750]
[152.04814148 -27.55490685]
[157.85144043 -13.50534153]
[157.83143616 1.69558060]
[151.99121094 15.72982979]
[141.22132874 26.45728302]
[127.16414642 32.24208450]
[127.16414642 47.24208450]
[127.16414642 62.24208450]
[127.16414642 77.24208832]
[140.25730896 84.56118774]
[153.03465271 76.70376587]
[165.81201172 68.84633636]
[178.58937073 60.98891449]
[174.80299377 46.35488892]
[175.49993896 31.25503159]
[180.61825562 17.03201294]
[189.70281982 4.95053291]
[201.94583130 -3.91513085]
[216.25866699 -8.77664948]
[231.36860657 -9.20174122]
[245.93212891 -5.15260553]
[258.65423584 3.01070976]
[268.40365601 14.56232929]
[274.31350708 28.47509003]
[275.85830688 43.51187897]
[272.90066528 58.33563614]
[265.70358276 71.62824249]
[254.90701294 82.20772552]
[241.47097778 89.13336945]
[226.59022522 91.78934479]
[211.58790588 89.93949127]
[197.79803467 83.74829865]
[186.44679260 73.76627350]
[173.66944885 81.62369537]
[160.89208984 89.48112488]
[148.11473083 97.33854675]
[139.60363770 109.69011688]
[136.81130981 124.42792511]
[134.01898193 139.16572571]
[131.22666931 153.90353394]
[128.43434143 168.64134216]
[129.52565002 183.60159302]
[134.42720032 197.77815247]
[139.32875061 211.95471191]
[147.21238708 199.19351196]
[161.76502991 195.55749512]
[174.72434998 203.11102295]
[178.73265076 217.56555176]
[171.51420593 230.71447754]
[157.16729736 235.09242249]
[143.83645630 228.21263123]
[146.93478394 242.88914490]
[150.03309631 257.56567383]
[156.76548767 244.16139221]
[169.22189331 235.80448914]
[184.17802429 234.65812683]
[197.76252747 241.01904297]
[206.45910645 253.24072266]
[208.01664734 268.15963745]
[202.03202820 281.91406250]
[190.05432129 290.94372559]
[175.18391418 292.91128540]
[161.26998901 287.30746460]
[151.91415405 275.58291626]
[151.91415405 290.58291626]
[151.91415405 305.58291626]
[151.91415405 320.58291626]
[151.91415405 335.58291626]
[151.91415405 350.58291626]
[151.91415405 365.58291626]
[151.91415405 380.58291626]
[151.91415405 395.58291626]
[151.91415405 410.58291626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[14 121]
[15 120]
[16 119]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[50 63]
[51 62]
[53 60]
[54 59]
[65 86]
[66 85]
[67 84]
[68 83]
[87 113]
[88 112]
[89 111]
[90 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
