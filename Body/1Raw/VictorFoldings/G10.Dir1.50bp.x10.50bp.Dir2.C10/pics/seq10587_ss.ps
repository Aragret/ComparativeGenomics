%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCxxxxxxxxxxUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[92.50000000 77.50000000]
[92.50000000 62.50000000]
[92.50000000 47.50000000]
[92.50000000 32.50000000]
[92.50000000 17.50000000]
[92.50000000 2.49999952]
[92.50000000 -12.50000000]
[92.50000000 -27.50000000]
[92.50000000 -42.50000000]
[77.51221466 -43.16355515]
[62.56845474 -44.48942184]
[47.69796753 -46.47500610]
[32.92986679 -49.11641693]
[18.29305649 -52.40848541]
[3.81619143 -56.34476852]
[-10.47238827 -60.91755676]
[-24.54471207 -66.11790466]
[-38.37323380 -71.93563080]
[-51.93088150 -78.35934448]
[-65.19111633 -85.37646484]
[-78.12798309 -92.97327423]
[-90.71615601 -101.13488007]
[-102.93099213 -109.84532166]
[-114.74858093 -119.08753204]
[-126.14578247 -128.84342957]
[-137.10029602 -139.09393311]
[-147.59068298 -149.81893921]
[-157.59637451 -160.99748230]
[-167.09782410 -172.60766602]
[-176.07641602 -184.62677002]
[-184.51457214 -197.03126526]
[-192.39578247 -209.79685974]
[-199.70460510 -222.89857483]
[-206.42674255 -236.31077576]
[-212.54902649 -250.00717163]
[-218.05949402 -263.96096802]
[-222.94734192 -278.14486694]
[-227.20298767 -292.53109741]
[-230.81813049 -307.09149170]
[-233.78567505 -321.79751587]
[-236.09982300 -336.62042236]
[-237.75602722 -351.53118896]
[-238.75106812 -366.50061035]
[-239.08297729 -381.49942017]
[-238.75112915 -396.49819946]
[-237.75614929 -411.46765137]
[-236.09999084 -426.37841797]
[-233.78588867 -441.20132446]
[-230.81840515 -455.90737915]
[-227.20332336 -470.46777344]
[-222.94770813 -484.85400391]
[-218.05992126 -499.03793335]
[-212.54951477 -512.99176025]
[-206.42727661 -526.68817139]
[-199.70518494 -540.10040283]
[-192.39640808 -553.20214844]
[-184.51524353 -565.96777344]
[-176.07713318 -578.37231445]
[-167.09858704 -590.39141846]
[-157.59718323 -602.00164795]
[-147.59152222 -613.18023682]
[-137.10118103 -623.90527344]
[-126.14670563 -634.15582275]
[-114.74953461 -643.91174316]
[-102.93197632 -653.15399170]
[-90.71717834 -661.86450195]
[-78.12903595 -670.02612305]
[-65.19219208 -677.62298584]
[-51.93198395 -684.64013672]
[-38.37435913 -691.06390381]
[-24.54585838 -696.88171387]
[-10.47355366 -702.08209229]
[3.81500983 -706.65496826]
[18.29186058 -710.59124756]
[32.92865753 -713.88342285]
[47.69675064 -716.52484131]
[62.56723022 -718.51049805]
[77.51098633 -719.83642578]
[92.49877167 -720.50006104]
[107.50122833 -720.50006104]
[122.48901367 -719.83642578]
[137.43276978 -718.51049805]
[152.30325317 -716.52484131]
[167.07133484 -713.88342285]
[181.70814514 -710.59124756]
[196.18499756 -706.65496826]
[210.47355652 -702.08209229]
[224.54585266 -696.88171387]
[238.37435913 -691.06390381]
[251.93199158 -684.64013672]
[265.19219971 -677.62298584]
[278.12902832 -670.02612305]
[290.71716309 -661.86450195]
[302.93197632 -653.15399170]
[314.74954224 -643.91174316]
[326.14669800 -634.15582275]
[337.10116577 -623.90527344]
[347.59152222 -613.18023682]
[357.59716797 -602.00164795]
[367.09860229 -590.39141846]
[376.07714844 -578.37231445]
[384.51525879 -565.96777344]
[392.39639282 -553.20214844]
[399.70516968 -540.10040283]
[406.42727661 -526.68817139]
[412.54949951 -512.99176025]
[418.05990601 -499.03793335]
[422.94772339 -484.85400391]
[427.20330811 -470.46777344]
[430.81838989 -455.90737915]
[433.78588867 -441.20132446]
[436.09997559 -426.37841797]
[437.75613403 -411.46765137]
[438.75112915 -396.49819946]
[439.08297729 -381.49942017]
[438.75106812 -366.50061035]
[437.75604248 -351.53118896]
[436.09982300 -336.62042236]
[433.78567505 -321.79751587]
[430.81814575 -307.09149170]
[427.20300293 -292.53109741]
[422.94732666 -278.14486694]
[418.05947876 -263.96096802]
[412.54904175 -250.00717163]
[406.42672729 -236.31077576]
[399.70458984 -222.89857483]
[392.39578247 -209.79685974]
[384.51458740 -197.03126526]
[376.07641602 -184.62677002]
[367.09783936 -172.60766602]
[357.59637451 -160.99748230]
[347.59066772 -149.81893921]
[337.10031128 -139.09393311]
[326.14578247 -128.84342957]
[314.74856567 -119.08753204]
[302.93099976 -109.84532166]
[290.71615601 -101.13488007]
[278.12799072 -92.97327423]
[265.19113159 -85.37646484]
[251.93087769 -78.35934448]
[238.37322998 -71.93563080]
[224.54470825 -66.11790466]
[210.47238159 -60.91755676]
[196.18380737 -56.34476852]
[181.70693970 -52.40848541]
[167.07012939 -49.11641693]
[152.30203247 -46.47500610]
[137.43154907 -44.48942184]
[122.48778534 -43.16355515]
[107.50000000 -42.50000000]
[107.50000000 -27.50000000]
[107.50000000 -12.50000000]
[107.50000000 2.49999952]
[107.50000000 17.50000000]
[107.50000000 32.50000000]
[107.50000000 47.50000000]
[107.50000000 62.50000000]
[107.50000000 77.50000000]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
