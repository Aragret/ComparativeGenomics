%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAxxxxxxxxxxACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[11.84475136 318.64334106]
[-1.73112547 312.66650391]
[-14.90424728 305.84768677]
[-22.62833214 318.70608521]
[-30.35241699 331.56448364]
[-30.82604218 347.37860107]
[-44.01243210 354.30453491]
[-51.73651886 367.16293335]
[-59.46060181 380.02133179]
[-67.18468475 392.87973022]
[-64.71247101 408.73117065]
[-75.66989899 420.44927979]
[-91.65136719 419.04495239]
[-100.39726257 405.59545898]
[-95.19848633 390.41812134]
[-80.04309082 385.15563965]
[-72.31900787 372.29724121]
[-64.59491730 359.43884277]
[-56.87083435 346.58044434]
[-56.94968796 331.68606567]
[-43.21081924 323.84042358]
[-35.48673630 310.98199463]
[-27.76264954 298.12359619]
[-41.06063843 288.88662720]
[-53.69323349 278.75863647]
[-65.60083771 267.78741455]
[-76.72729492 256.02474976]
[-87.02010345 243.52609253]
[-96.43072510 230.35040283]
[-104.91476440 216.55984497]
[-112.43220520 202.21945190]
[-118.94757843 187.39689636]
[-124.43015289 172.16206360]
[-128.85406494 156.58685303]
[-132.19847107 140.74470520]
[-134.44755554 124.71036530]
[-135.59072876 108.55946350]
[-135.62260437 92.36818695]
[-134.54302979 76.21290588]
[-132.35708618 60.16983795]
[-129.07508850 44.31464767]
[-124.71253204 28.72213173]
[-119.28998566 13.46584034]
[-112.83302307 -1.38226140]
[-105.37210846 -15.75213337]
[-96.94242859 -29.57599068]
[-109.20479584 -38.21510696]
[-121.46716309 -46.85422516]
[-136.10935974 -41.71751022]
[-150.96473694 -46.20052338]
[-160.32109070 -58.57946014]
[-160.58073425 -74.09436798]
[-151.64381409 -86.77943420]
[-136.94676208 -91.75701141]
[-122.14089203 -87.11310577]
[-112.91936493 -74.63339996]
[-112.82804871 -59.11659241]
[-100.56568146 -50.47747421]
[-88.30331421 -41.83835983]
[-79.36789703 -52.98175049]
[-69.77403259 -63.56355286]
[-59.55693817 -73.54492188]
[-48.75412369 -82.88922119]
[-37.40524292 -91.56214905]
[-25.55195236 -99.53186798]
[-13.23777199 -106.76911163]
[-0.50790215 -113.24732208]
[12.59092522 -118.94271088]
[26.01062584 -123.83438110]
[39.70193481 -127.90436554]
[53.61459732 -131.13774109]
[67.69753265 -133.52261353]
[81.89905548 -135.05023193]
[96.16702271 -135.71501160]
[110.44905853 -135.51449585]
[124.69273376 -134.44941711]
[138.84576416 -132.52368164]
[152.85620117 -129.74438477]
[166.67260742 -126.12169647]
[180.24426270 -121.66893768]
[193.52133179 -116.40244293]
[206.45510864 -110.34155273]
[218.99807739 -103.50851440]
[231.10423279 -95.92840576]
[242.72909546 -87.62905884]
[253.83001709 -78.64093018]
[264.36624146 -68.99703217]
[274.29907227 -58.73275375]
[283.59207153 -47.88578033]
[292.21112061 -36.49592590]
[300.12460327 -24.60500336]
[307.30340576 -12.25666332]
[313.72122192 0.50376183]
[319.35446167 13.62943172]
[333.47927856 8.58067513]
[347.60406494 3.53191876]
[361.72888184 -1.51683748]
[375.85366821 -6.56559372]
[389.81405640 -12.05262566]
[403.59646606 -17.97258759]
[417.37884521 -23.89255142]
[426.75311279 -37.34820938]
[443.06805420 -35.68824768]
[449.54019165 -20.62029457]
[439.51159668 -7.64496660]
[423.29879761 -10.11017036]
[409.51641846 -4.19020700]
[395.73403931 1.72975600]
[394.09130859 4.91862679]
[390.78826904 7.44682693]
[386.16387939 8.52716923]
[380.90243530 7.55920935]
[366.77761841 12.60796547]
[352.65283203 17.65672112]
[338.52801514 22.70547867]
[324.40322876 27.75423431]
[328.50253296 42.00986099]
[331.69717407 56.49507523]
[333.97451782 71.15252686]
[335.32559204 85.92417908]
[335.74496460 100.75156403]
[335.23104858 115.57596588]
[333.78585815 130.33871460]
[331.41506958 144.98133850]
[328.12814331 159.44589233]
[323.93801880 173.67509460]
[318.86135864 187.61260986]
[312.91818237 201.20327759]
[306.13208008 214.39326477]
[298.52990723 227.13038635]
[290.14175415 239.36418152]
[281.00079346 251.04623413]
[271.14328003 262.13031006]
[260.60821533 272.57247925]
[249.43727112 282.33145142]
[237.67471313 291.36856079]
[225.36711121 299.64804077]
[212.56317139 307.13711548]
[199.31358337 313.80615234]
[185.67082214 319.62869263]
[171.68888855 324.58175659]
[157.42314148 328.64566040]
[142.93003845 331.80438232]
[128.26699829 334.04537964]
[113.49202728 335.35977173]
[98.66365051 335.74237061]
[83.84056854 335.19168091]
[69.08145142 333.70986938]
[54.44475174 331.30279541]
[39.98839951 327.97998047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 23]
[4 22]
[5 21]
[7 19]
[8 18]
[9 17]
[10 16]
[46 59]
[47 58]
[48 57]
[94 116]
[95 115]
[96 114]
[97 113]
[98 112]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
