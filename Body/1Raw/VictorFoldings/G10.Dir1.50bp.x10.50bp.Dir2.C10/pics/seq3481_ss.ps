%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUxxxxxxxxxxCAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.65802765 256.31918335]
[104.35004425 241.32234192]
[104.04206848 226.32551575]
[103.73409271 211.32867432]
[103.42611694 196.33183289]
[103.11813354 181.33499146]
[102.81015778 166.33815002]
[102.50218201 151.34132385]
[102.19420624 136.34448242]
[99.58947754 121.57236481]
[94.74966431 107.37461090]
[91.49868774 105.17432404]
[89.25662994 101.52947998]
[88.65570831 96.93442535]
[90.07834625 92.15134430]
[86.12173462 77.68257904]
[82.16513062 63.21380997]
[71.06172180 51.94327545]
[75.16787720 37.62584686]
[71.21126556 23.15708160]
[67.25465393 8.68831348]
[52.55912781 11.72047424]
[37.70087814 13.81447792]
[22.73972893 14.96189499]
[7.73592806 15.15810394]
[-7.25010920 14.40231419]
[-22.15803909 12.69756985]
[-36.92783356 10.05073547]
[-51.50001526 6.47246838]
[-65.81591034 1.97717774]
[-79.81787872 -3.41703606]
[-93.44952393 -9.68845177]
[-106.65596771 -16.81181717]
[-119.38403320 -24.75844765]
[-131.58245850 -33.49634552]
[-143.20213318 -42.99032593]
[-154.19627380 -53.20215988]
[-164.52059937 -64.09072876]
[-174.13352966 -75.61218262]
[-182.99638367 -87.72013092]
[-191.07344055 -100.36582947]
[-198.33219910 -113.49833679]
[-204.74343872 -127.06479645]
[-210.28131104 -141.01055908]
[-214.92353821 -155.27947998]
[-218.65144348 -169.81411743]
[-221.44998169 -184.55590820]
[-223.30789185 -199.44552612]
[-224.21771240 -214.42300415]
[-224.17576599 -229.42802429]
[-223.18222046 -244.40017700]
[-221.24108887 -259.27917480]
[-218.36016846 -274.00509644]
[-214.55107117 -288.51864624]
[-209.82913208 -302.76141357]
[-204.21336365 -316.67599487]
[-197.72637939 -330.20639038]
[-190.39431763 -343.29809570]
[-182.24667358 -355.89843750]
[-173.31626892 -367.95666504]
[-163.63906860 -379.42419434]
[-153.25402832 -390.25485229]
[-142.20297241 -400.40505981]
[-130.53039551 -409.83392334]
[-118.28330231 -418.50347900]
[-105.51100922 -426.37884521]
[-92.26493835 -433.42825317]
[-78.59844208 -439.62335205]
[-64.56653595 -444.93917847]
[-50.22573090 -449.35437012]
[-35.63376999 -452.85110474]
[-20.84940720 -455.41531372]
[-5.93217945 -457.03668213]
[9.05784893 -457.70867920]
[24.06031799 -457.42858887]
[39.01481628 -456.19754028]
[53.86112976 -454.02050781]
[68.53947449 -450.90621948]
[82.99074554 -446.86724854]
[97.15675354 -441.91986084]
[110.98046112 -436.08395386]
[124.40619659 -429.38305664]
[137.37989807 -421.84411621]
[149.84933472 -413.49752808]
[161.76428223 -404.37686157]
[173.07678223 -394.51885986]
[183.74125671 -383.96322632]
[193.71479797 -372.75247192]
[202.95721436 -360.93170166]
[211.43130493 -348.54855347]
[219.10293579 -335.65289307]
[225.94123840 -322.29660034]
[231.91865540 -308.53350830]
[237.01112366 -294.41900635]
[241.19813538 -280.00991821]
[244.46282959 -265.36428833]
[246.79208374 -250.54110718]
[248.17648315 -235.60002136]
[248.61047363 -220.60121155]
[248.09230042 -205.60508728]
[246.62406921 -190.67201233]
[244.21166992 -175.86212158]
[240.86480713 -161.23504639]
[236.59700012 -146.84970093]
[231.42538452 -132.76399231]
[225.37081909 -119.03466034]
[218.45767212 -105.71697235]
[210.71377563 -92.86454773]
[202.17031860 -80.52915955]
[192.86169434 -68.76046753]
[182.82540894 -57.60585785]
[172.10185242 -47.11024857]
[160.73420715 -37.31590271]
[148.76824951 -28.26226234]
[136.25216675 -19.98577881]
[123.23635101 -12.51978016]
[109.77321625 -5.89433002]
[95.91697693 -0.13610680]
[81.72342682 4.73170328]
[85.68003082 19.20046997]
[89.63664246 33.66923904]
[100.45704651 43.90486908]
[96.63389587 59.25719833]
[100.59050751 73.72596741]
[104.54711914 88.19473267]
[108.94741821 102.53479767]
[113.78723145 116.73255157]
[117.42588806 102.18056488]
[125.99380493 89.86833954]
[138.37471008 81.39997864]
[152.95555115 77.87876892]
[167.83666992 79.76348114]
[181.07928467 86.80856323]
[190.95808411 98.09614563]
[196.18598938 112.15563202]
[196.08189392 127.15526581]
[190.65936279 141.14083862]
[180.62486267 152.29022217]
[167.28573608 159.15083313]
[152.37989807 160.82882690]
[137.84931946 157.10559082]
[125.58714294 148.46621704]
[117.19104004 136.03649902]
[117.49901581 151.03334045]
[117.80699921 166.03018188]
[118.11497498 181.02702332]
[118.42295074 196.02384949]
[118.73092651 211.02069092]
[119.03890991 226.01753235]
[119.34688568 241.01437378]
[119.65486145 256.01119995]
[122.24063873 275.21963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 127]
[11 126]
[15 125]
[16 124]
[17 123]
[19 121]
[20 120]
[21 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
