%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUxxxxxxxxxxCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.24517059 283.88757324]
[99.24517059 268.88757324]
[99.24517059 253.88757324]
[99.24517059 238.88757324]
[99.24517059 223.88757324]
[99.24517059 208.88757324]
[99.24517059 193.88757324]
[99.24517059 178.88757324]
[99.24517059 163.88757324]
[99.24517059 148.88757324]
[80.39746094 143.24382019]
[65.82864380 130.89218140]
[57.68459702 114.25257874]
[56.91998291 96.31742859]
[63.20561981 80.11679840]
[75.05873108 68.20661163]
[68.15173340 54.89145660]
[61.24473190 41.57630157]
[54.33773422 28.26114464]
[47.43073654 14.94598961]
[33.65584183 20.89924240]
[19.49532318 25.86599541]
[5.01972771 29.82150269]
[-9.69882870 32.74605942]
[-24.58701706 34.62509155]
[-39.57066345 35.44924545]
[-54.57512283 35.21440887]
[-69.52564240 33.92175293]
[-84.34773254 31.57771683]
[-98.96755981 28.19397926]
[-113.31227875 23.78740120]
[-127.31042480 18.37993240]
[-140.89227295 11.99851418]
[-153.99014282 4.67493820]
[-166.53877258 -3.55430913]
[-178.47567749 -12.64822960]
[-189.74136353 -22.56151772]
[-200.27970886 -33.24478531]
[-210.03820801 -44.64480591]
[-218.96826172 -56.70478821]
[-227.02536011 -69.36464691]
[-234.16937256 -82.56131744]
[-240.36470032 -96.22904205]
[-245.58049011 -110.29974365]
[-249.79074097 -124.70330811]
[-252.97450256 -139.36798096]
[-255.11589050 -154.22070312]
[-256.20422363 -169.18748474]
[-256.23413086 -184.19374084]
[-255.20542908 -199.16473389]
[-253.12322998 -214.02587891]
[-249.99792480 -228.70312500]
[-245.84509277 -243.12333679]
[-240.68540955 -257.21472168]
[-234.54458618 -270.90701294]
[-227.45321655 -284.13204956]
[-219.44662476 -296.82391357]
[-210.56469727 -308.91937256]
[-200.85168457 -320.35818481]
[-190.35598755 -331.08334351]
[-179.12989807 -341.04144287]
[-167.22932434 -350.18286133]
[-154.71357727 -358.46203613]
[-141.64498901 -365.83773804]
[-128.08868408 -372.27322388]
[-114.11218262 -377.73641968]
[-99.78513336 -382.20013428]
[-85.17890930 -385.64208984]
[-70.36627197 -388.04516602]
[-55.42102814 -389.39736938]
[-40.41762161 -389.69198608]
[-25.43081093 -388.92755127]
[-10.53525352 -387.10784912]
[4.19483805 -384.24194336]
[18.68607903 -380.34414673]
[32.86627579 -375.43386841]
[46.66477966 -369.53555298]
[60.01284790 -362.67855835]
[72.84397888 -354.89712524]
[85.09425354 -346.22994995]
[96.70263672 -336.72024536]
[107.61129761 -326.41540527]
[117.76588440 -315.36672974]
[127.11580658 -303.62927246]
[135.61448669 -291.26150513]
[143.21958923 -278.32507324]
[149.89321899 -264.88439941]
[155.60212708 -251.00646973]
[160.31788635 -236.76039124]
[164.01698303 -222.21716309]
[166.68098450 -207.44923401]
[168.29664612 -192.53016663]
[168.85589600 -177.53428650]
[168.35595703 -162.53631592]
[166.79931641 -147.61097717]
[164.19372559 -132.83262634]
[160.55216980 -118.27487946]
[155.89279175 -104.01026154]
[150.23881531 -90.10985565]
[143.61839294 -76.64289856]
[136.06451416 -63.67648697]
[127.61480713 -51.27522278]
[118.31137085 -39.50088501]
[108.20055389 -28.41213608]
[97.33273315 -18.06421661]
[85.76205444 -8.50868320]
[73.54615021 0.20685928]
[60.74589157 8.03899097]
[67.65289307 21.35414696]
[74.55989075 34.66930389]
[81.46688843 47.98445892]
[88.37388611 61.29961395]
[103.49427795 58.32316971]
[119.16130066 61.24056244]
[133.08815002 70.01826477]
[143.10093689 83.74214172]
[147.47415161 100.70175934]
[145.21705627 118.60061646]
[158.99943542 124.52058411]
[172.78181458 130.44053650]
[188.15521240 125.85377502]
[201.24363708 135.13128662]
[202.00680542 151.15618896]
[189.85925293 161.63551331]
[174.11955261 158.53045654]
[166.86184692 144.22293091]
[153.07946777 138.30296326]
[139.29708862 132.38299561]
[133.03410339 136.50914001]
[142.29110718 148.31202698]
[151.54809570 160.11491394]
[160.80509949 171.91778564]
[172.73834229 181.00611877]
[172.22599792 195.99736023]
[159.70011902 204.24977112]
[145.72348022 198.80430603]
[142.08229065 184.25265503]
[134.89091492 171.08891296]
[127.69953156 157.92517090]
[120.50814819 144.76142883]
[114.24517059 148.88757324]
[114.24517059 163.88757324]
[114.24517059 178.88757324]
[114.24517059 193.88757324]
[114.24517059 208.88757324]
[114.24517059 223.88757324]
[114.24517059 238.88757324]
[114.24517059 253.88757324]
[114.24517059 268.88757324]
[114.24517059 283.88757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 112]
[17 111]
[18 110]
[19 109]
[20 108]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
