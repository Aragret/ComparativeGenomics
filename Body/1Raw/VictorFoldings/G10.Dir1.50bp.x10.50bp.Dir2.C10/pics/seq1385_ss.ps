%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACxxxxxxxxxxACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.52538681 245.83287048]
[10.62890434 258.58612061]
[2.73242164 271.33938599]
[-5.16406059 284.09265137]
[-0.83831102 301.01229858]
[-9.88344479 315.55593872]
[-26.31257057 319.01815796]
[-33.94554138 331.93084717]
[-41.57851028 344.84353638]
[-49.21147919 357.75625610]
[-56.84445190 370.66894531]
[-59.69945526 387.38076782]
[-76.54852295 389.26364136]
[-83.02209473 373.59426880]
[-69.75714874 363.03598022]
[-62.12417984 350.12326050]
[-54.49120712 337.21057129]
[-46.85823822 324.29788208]
[-39.22526932 311.38519287]
[-44.15258026 299.44055176]
[-41.23836517 286.65243530]
[-31.33221626 277.76147461]
[-17.91731834 276.19616699]
[-10.02083492 263.44290161]
[-2.12435293 250.68963623]
[5.77212954 237.93638611]
[-15.82552052 220.37353516]
[-34.20677185 199.46798706]
[-48.86119461 175.80027771]
[-59.38184357 150.02764893]
[-65.47656250 122.86579132]
[-80.41257477 124.24981689]
[-95.34858704 125.63384247]
[-106.66259766 137.00805664]
[-122.59309387 135.11096191]
[-130.91955566 121.39785004]
[-125.25464630 106.38824463]
[-109.94399261 101.59622955]
[-96.73261261 110.69783020]
[-81.79660034 109.31380463]
[-66.86058807 107.92977905]
[-66.65431976 88.52498627]
[-64.19901276 69.27505493]
[-59.52780533 50.43975830]
[-52.70373535 32.27328873]
[-43.81889343 15.02080441]
[-32.99318695 -1.08486581]
[-20.37270927 -15.82637405]
[-30.70361328 -26.70168877]
[-41.03451538 -37.57700348]
[-51.36541748 -48.45231628]
[-61.69631958 -59.32762909]
[-74.58600616 -60.44997406]
[-82.96809387 -69.77262878]
[-82.73293304 -81.90551758]
[-92.83837128 -92.99064636]
[-108.62133026 -97.44376373]
[-112.39348602 -113.40317535]
[-100.27436829 -124.45121002]
[-84.73108673 -119.22259521]
[-81.75323486 -103.09608459]
[-71.64779663 -92.01094818]
[-54.68044281 -87.63449860]
[-50.82100677 -69.65853119]
[-40.49010468 -58.78321838]
[-30.15920067 -47.90790558]
[-19.82829857 -37.03258896]
[-9.49739647 -26.15727615]
[2.02317023 -35.29922104]
[14.30317020 -43.39243698]
[27.24741936 -50.37419891]
[40.75558472 -56.19038773]
[54.72296143 -60.79592133]
[69.04129028 -64.15509796]
[83.59958649 -66.24188232]
[98.28499603 -67.04010773]
[112.98370361 -66.54357147]
[127.58177948 -64.75613403]
[141.96604919 -61.69164658]
[156.02505493 -57.37385941]
[169.64978027 -51.83624649]
[182.73464966 -45.12172699]
[195.17823792 -37.28234482]
[206.88407898 -28.37886620]
[216.98950195 -39.46400070]
[227.09494019 -50.54913330]
[237.20037842 -61.63426590]
[247.30581665 -72.71939850]
[241.55699158 -86.85848999]
[242.52078247 -102.09114838]
[250.00581360 -115.39292145]
[262.52593994 -124.12272644]
[277.59524536 -126.54725647]
[292.22174072 -122.18511963]
[303.50134277 -111.90242767]
[309.19442749 -97.74080658]
[308.17065430 -82.51206207]
[300.63330078 -69.23986816]
[288.07891846 -60.55943680]
[273.00015259 -58.19426727]
[258.39093018 -62.61396790]
[248.28550720 -51.52883148]
[238.18006897 -40.44369888]
[228.07464600 -29.35856438]
[217.96920776 -18.27343178]
[224.68351746 -11.17265224]
[230.97111511 -3.69139719]
[236.81047058 4.14473104]
[242.18161011 12.30891323]
[247.06616211 20.77320862]
[251.44737244 29.50864983]
[255.31028748 38.48534012]
[258.64166260 47.67255783]
[261.43011475 57.03886032]
[263.66607666 66.55219269]
[265.34191895 76.18000031]
[266.45187378 85.88932037]
[266.99218750 95.64694214]
[266.96096802 105.41945648]
[266.35836792 115.17342377]
[265.18640137 124.87546539]
[263.44912720 134.49237061]
[261.15243530 143.99122620]
[258.30422974 153.33952332]
[254.91426086 162.50527954]
[250.99409485 171.45712280]
[246.55717468 180.16439819]
[241.61868286 188.59733582]
[236.19551086 196.72705078]
[230.30622864 204.52572632]
[223.97097778 211.96667480]
[217.21145630 219.02442932]
[210.05078125 225.67481995]
[202.51348877 231.89512634]
[194.62533569 237.66401672]
[186.41334534 242.96177673]
[177.90562439 247.77026367]
[169.13127136 252.07302856]
[160.12031555 255.85533142]
[150.90361023 259.10424805]
[141.51269531 261.80862427]
[131.97970581 263.95925903]
[122.33727264 265.54873657]
[112.61838531 266.57165527]
[102.85632324 267.02447510]
[93.08447266 266.90570068]
[83.33630371 266.21569824]
[73.64515686 264.95684814]
[64.04420471 263.13345337]
[54.56631088 260.75173950]
[45.24390793 257.81985474]
[36.10890198 254.34786987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 23]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[31 41]
[32 40]
[33 39]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[55 62]
[56 61]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
