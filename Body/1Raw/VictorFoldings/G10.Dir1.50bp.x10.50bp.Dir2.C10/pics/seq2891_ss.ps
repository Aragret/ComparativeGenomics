%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCUAxxxxxxxxxxCCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.80868530 538.81823730]
[130.80868530 523.81823730]
[130.80868530 508.81823730]
[130.80868530 493.81823730]
[130.80868530 478.81823730]
[130.80868530 463.81823730]
[130.80868530 448.81823730]
[130.80868530 433.81823730]
[130.80868530 418.81823730]
[130.80868530 403.81823730]
[114.09667969 398.34814453]
[100.20801544 387.52471924]
[90.79553223 372.61578369]
[86.98621368 355.37655640]
[89.24629211 337.84301758]
[97.32420349 322.09136963]
[110.27852631 309.99237061]
[126.58766174 302.98898315]
[125.34078979 288.04089355]
[124.09391785 273.09280396]
[122.22630310 258.20953369]
[119.74118042 243.41682434]
[117.25606537 228.62411499]
[114.77094269 213.83140564]
[112.28582764 199.03869629]
[109.80071259 184.24598694]
[107.00838470 169.50819397]
[103.91006470 154.83166504]
[100.81173706 140.15513611]
[97.71341705 125.47861481]
[80.38481903 116.42049408]
[74.51649475 97.76861572]
[60.61394119 92.13665771]
[46.59722519 86.79514313]
[32.47242355 81.74638367]
[18.34762001 76.69763184]
[4.22281742 71.64887238]
[-9.90198517 66.60012054]
[-24.02678871 61.55136108]
[-38.15159225 56.50260544]
[-49.36760712 66.91699982]
[-64.14173889 70.91494751]
[-79.07900238 67.57775116]
[-90.74691772 57.67228317]
[-96.46428680 43.47473907]
[-94.91729736 28.24761200]
[-86.46144104 15.48998356]
[-73.03981018 8.13346577]
[-57.73659134 7.86853027]
[-44.06835938 14.75605869]
[-35.17597198 27.21334648]
[-33.10283661 42.37780380]
[-18.97803116 47.42655945]
[-4.85322905 52.47531509]
[9.27157402 57.52407074]
[23.39637756 62.57282639]
[37.52117920 67.62158203]
[51.64598465 72.67034149]
[56.32223511 71.44226074]
[61.81717300 73.18494415]
[66.24589539 78.23410034]
[80.14845276 83.86605835]
[85.11540222 79.19526672]
[91.13973236 76.00241852]
[97.79348755 74.51432800]
[104.60398865 74.83670807]
[111.51098633 61.52154922]
[118.41798401 48.20639420]
[125.32498169 34.89123917]
[114.01654053 24.93108749]
[105.42580414 12.56130314]
[100.04857635 -1.49660063]
[98.19338226 -16.42390633]
[99.96374512 -31.35237694]
[105.25244141 -45.41475296]
[113.74799347 -57.79513931]
[124.95298004 -67.77633667]
[138.21318054 -74.78139496]
[152.75578308 -78.40695953]
[167.73437500 -78.44649506]
[182.27828979 -74.90205383]
[189.18528748 -88.21720886]
[196.09228516 -101.53236389]
[189.92051697 -115.90049744]
[194.47779846 -130.85928345]
[207.61233521 -139.34562683]
[223.12239075 -137.35255432]
[233.68458557 -125.82111359]
[234.31178284 -110.19611359]
[224.70783997 -97.85519409]
[209.40744019 -94.62536621]
[202.50044250 -81.31021118]
[195.59344482 -67.99505615]
[206.86743164 -58.14692688]
[215.46189880 -45.87928009]
[220.87371826 -31.90272331]
[222.78424072 -17.02812386]
[221.07810974 -2.11956525]
[215.85018921 11.95584393]
[207.40029907 24.37841034]
[196.21601868 34.42358398]
[182.94459534 41.50422668]
[168.35542297 45.20491791]
[153.29547119 45.30633163]
[138.64013672 41.79823685]
[131.73313904 55.11339188]
[124.82614136 68.42855072]
[117.91914368 81.74370575]
[125.19141388 95.55243683]
[123.08728790 111.01658630]
[112.38994598 122.38028717]
[115.48826599 137.05680847]
[118.58658600 151.73333740]
[121.68491364 166.40986633]
[125.87619019 171.65779114]
[126.62500763 177.37359619]
[124.59341431 181.76087952]
[127.07853699 196.55358887]
[129.56365967 211.34628296]
[132.04876709 226.13899231]
[134.53388977 240.93170166]
[137.01901245 255.72441101]
[140.00788879 259.07522583]
[141.57563782 262.83200073]
[141.77285767 266.48480225]
[140.81472778 269.59542847]
[139.04200745 271.84594727]
[140.28887939 286.79403687]
[141.53575134 301.74209595]
[153.89257812 304.09664917]
[165.30281067 309.36563110]
[175.09101868 317.23120117]
[182.67919922 327.22198486]
[187.62098694 338.74139404]
[189.62779236 351.10311890]
[188.58573914 363.57208252]
[184.56208801 375.40817261]
[177.80090332 385.91012573]
[168.70826721 394.45715332]
[157.82791138 400.54547119]
[145.80868530 403.81823730]
[145.80868530 418.81823730]
[145.80868530 433.81823730]
[145.80868530 448.81823730]
[145.80868530 463.81823730]
[145.80868530 478.81823730]
[145.80868530 493.81823730]
[145.80868530 508.81823730]
[145.80868530 523.81823730]
[145.80868530 538.81823730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 129]
[19 128]
[20 127]
[21 122]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 114]
[28 113]
[29 112]
[30 111]
[32 62]
[33 61]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[66 108]
[67 107]
[68 106]
[69 105]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
