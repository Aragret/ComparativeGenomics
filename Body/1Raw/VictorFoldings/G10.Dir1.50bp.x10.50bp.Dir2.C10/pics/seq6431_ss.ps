%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCxxxxxxxxxxUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.24835968 280.18746948]
[104.24835968 265.18746948]
[104.24835968 250.18746948]
[104.24835968 235.18746948]
[104.24835968 220.18746948]
[104.24835968 205.18746948]
[104.24835968 190.18746948]
[104.24835968 175.18746948]
[104.24835968 160.18746948]
[104.24835968 145.18746948]
[101.91725159 130.36972046]
[97.31169128 116.09425354]
[90.24929047 113.56987762]
[85.20030975 127.69460297]
[71.07566833 122.64540863]
[76.12448120 108.52111816]
[69.06208038 105.99674225]
[56.45095444 114.11828613]
[43.83982849 122.23983002]
[31.22869873 130.36137390]
[18.61757088 138.48291016]
[13.83056641 153.79513550]
[-1.17718685 159.46495056]
[-14.89302540 151.14297485]
[-16.79533195 135.21310425]
[-5.42481852 123.89537811]
[10.49602890 125.87178040]
[23.10715675 117.75024414]
[35.71828461 109.62870026]
[48.32941437 101.50715637]
[60.94054031 93.38561249]
[70.39626312 89.19229889]
[79.82579803 88.11611938]
[88.43316650 89.96441650]
[95.49906921 94.36376953]
[97.67590332 79.52256012]
[99.85274506 64.68135834]
[86.28141022 71.07032776]
[72.73188019 64.63525391]
[69.10776520 50.07964325]
[78.05799103 38.04247665]
[93.04067230 37.32194519]
[103.10449219 48.44406891]
[106.81065369 33.90913391]
[110.51681519 19.37419701]
[96.74293518 3.82707572]
[99.09945679 -18.99226570]
[86.66001892 -27.37440872]
[71.68115997 -22.88354683]
[57.34055328 -29.11901474]
[50.40939331 -43.13661194]
[54.16036224 -58.31766129]
[66.82237244 -67.49413300]
[82.41679382 -66.33317566]
[93.58043671 -55.38296509]
[95.04216003 -39.81385040]
[107.48159790 -31.43170547]
[121.93628693 -35.43944550]
[128.28341675 -49.03039551]
[134.63053894 -62.62134933]
[140.97767639 -76.21229553]
[147.32479858 -89.80325317]
[153.67193604 -103.39420319]
[160.01905823 -116.98515320]
[158.84800720 -132.76295471]
[171.24394226 -141.02069092]
[158.75502014 -149.38296509]
[147.68904114 -159.55372620]
[138.30538940 -171.29457092]
[130.82405090 -184.33029175]
[125.42037964 -198.35530090]
[122.22105408 -213.04083252]
[121.30107117 -228.04263306]
[122.68199921 -243.00903320]
[126.33146667 -257.58923340]
[132.16390991 -271.44140625]
[140.04263306 -284.24087524]
[149.78292847 -295.68756104]
[161.15647888 -305.51318359]
[173.89668274 -313.48739624]
[187.70486450 -319.42327881]
[202.25735474 -323.18164062]
[217.21301270 -324.67443848]
[232.22128296 -323.86666870]
[246.93031311 -320.77725220]
[260.99533081 -315.47860718]
[274.08663940 -308.09494019]
[285.89730835 -298.79934692]
[296.15054321 -287.80972290]
[304.60595703 -275.38366699]
[311.06533813 -261.81250000]
[315.37728882 -247.41432190]
[317.44073486 -232.52665710]
[317.20727539 -217.49848938]
[314.68240356 -202.68209839]
[309.92532349 -188.42480469]
[303.04751587 -175.06080627]
[294.21020508 -162.90341187]
[283.62057495 -152.23756409]
[271.52685547 -143.31330872]
[258.21252441 -136.33984375]
[243.98971558 -131.48062134]
[229.19181824 -128.84957886]
[214.16569519 -128.50836182]
[199.26362610 -130.46498108]
[184.83488464 -134.67356873]
[186.45993042 -119.86787415]
[173.61001587 -110.63802338]
[167.26287842 -97.04707336]
[160.91575623 -83.45612335]
[154.56863403 -69.86517334]
[148.22149658 -56.27421951]
[141.87437439 -42.68326950]
[135.52723694 -29.09231758]
[148.85911560 -15.09137726]
[150.50495911 3.26778936]
[140.86070251 17.90975380]
[125.05175781 23.08035851]
[121.34559631 37.61529541]
[117.63943481 52.15023041]
[114.69394684 66.85819244]
[112.51711273 81.69939423]
[110.34027863 96.54060364]
[111.58715057 111.48869324]
[116.19271088 125.76415253]
[120.10926819 111.28449249]
[128.91027832 99.13779449]
[141.44963074 90.90587616]
[156.09439087 87.66072845]
[170.93745422 89.82495880]
[184.04585266 97.11672211]
[193.71255493 108.58645630]
[198.67871094 122.74050903]
[198.29762268 137.73567200]
[192.61888123 151.61918640]
[182.38203430 162.58306885]
[168.92016602 169.19956970]
[153.98634338 170.60702515]
[139.52532959 166.62216187]
[127.42031097 157.76391602]
[119.24835968 145.18746948]
[119.24835968 160.18746948]
[119.24835968 175.18746948]
[119.24835968 190.18746948]
[119.24835968 205.18746948]
[119.24835968 220.18746948]
[119.24835968 235.18746948]
[119.24835968 250.18746948]
[119.24835968 265.18746948]
[119.24835968 280.18746948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[35 123]
[36 122]
[37 121]
[43 120]
[44 119]
[45 118]
[47 57]
[48 56]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[63 109]
[64 108]
[66 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
