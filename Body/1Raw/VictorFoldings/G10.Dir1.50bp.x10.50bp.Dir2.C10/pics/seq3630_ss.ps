%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCxxxxxxxxxxCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.64688110 299.51049805]
[161.03900146 284.52282715]
[160.43112183 269.53512573]
[159.82322693 254.54745483]
[159.21534729 239.55978394]
[158.60746765 224.57209778]
[157.99957275 209.58442688]
[157.39169312 194.59675598]
[153.33837891 180.15476990]
[146.05885315 167.03958130]
[138.77932739 153.92437744]
[130.46157837 141.44178772]
[121.16024780 129.67379761]
[111.85892487 117.90582275]
[113.08839417 132.85534668]
[101.61334991 142.51576233]
[87.09218597 138.75601196]
[81.74716187 124.74063110]
[90.07719421 112.26614380]
[76.23358917 118.04148865]
[62.38998032 123.81682587]
[48.60561371 129.73216248]
[34.88190079 135.78689575]
[21.15818596 141.84161377]
[18.01250267 157.03649902]
[6.51363325 167.45549011]
[-8.91687202 169.09230042]
[-22.34566879 161.31753540]
[-28.60910988 147.12074280]
[-25.29877472 131.96087646]
[-13.68755531 121.66723633]
[1.75979745 120.19791412]
[15.10346222 128.11790466]
[28.82717514 122.06317902]
[42.55088806 116.00845337]
[47.42983246 110.39814758]
[56.61463928 109.97322083]
[70.45824432 104.19787598]
[84.30184937 98.42253876]
[69.38409424 96.85389709]
[54.65709305 99.70266724]
[39.98871613 96.56599426]
[27.71474266 87.94337463]
[19.78967285 75.20786285]
[17.47549057 60.38745499]
[21.14070320 45.84214020]
[30.20166588 33.88810349]
[43.21551514 26.42890167]
[58.10993576 24.65233040]
[72.51315308 28.84129143]
[84.13159943 38.32873535]
[91.11517334 51.60388947]
[92.35184479 66.55252075]
[97.89321899 80.49142456]
[99.71287537 65.60221100]
[101.53253174 50.71298981]
[103.35218811 35.82376862]
[105.17184448 20.93454933]
[93.14319611 29.89621735]
[78.15937042 29.19971275]
[67.01393890 19.16082764]
[64.76013947 4.33111334]
[72.41983795 -8.56574821]
[86.52017975 -13.68242073]
[100.66817474 -8.69904232]
[108.44918060 4.12466145]
[112.35593414 -10.35764790]
[116.26268768 -24.83995819]
[120.16944122 -39.32226562]
[124.07618713 -53.80457687]
[127.98294067 -68.28688812]
[114.72705078 -75.45474243]
[103.48190308 -85.48685455]
[94.85392761 -97.84220123]
[89.30841827 -111.85448456]
[87.14443970 -126.76803589]
[88.47869873 -141.77857971]
[93.23923492 -156.07662964]
[101.16931915 -168.89108276]
[111.84129333 -179.53091431]
[124.67962646 -187.42228699]
[138.99197388 -192.13966370]
[154.00646973 -193.42861938]
[168.91342163 -191.21965027]
[182.90890503 -185.63188171]
[195.23817444 -176.96665955]
[205.23629761 -165.69129944]
[212.36412048 -152.41383362]
[216.23724365 -137.85032654]
[216.64677429 -122.78616333]
[213.57064819 -108.03373718]
[207.17474365 -94.38862610]
[197.80398560 -82.58668518]
[185.96374512 -73.26438904]
[172.29252625 -66.92447662]
[157.52760315 -63.90884781]
[142.46525574 -64.38013458]
[138.55850220 -49.89782333]
[134.65174866 -35.41551590]
[130.74499512 -20.93320465]
[126.83824158 -6.45089531]
[122.93148804 8.03141403]
[120.06106567 22.75420761]
[118.24140930 37.64342880]
[116.42175293 52.53264618]
[114.60209656 67.42186737]
[112.78243256 82.31108093]
[123.62690735 108.60449982]
[132.92823792 120.37248230]
[142.22955322 132.14045715]
[143.46212769 117.19118500]
[153.12719727 105.72007751]
[167.65065002 101.96913910]
[181.66171265 107.32545471]
[189.97911072 119.80827332]
[189.52709961 134.80145264]
[180.47282410 146.76055908]
[166.16453552 151.26310730]
[151.89451599 146.64485168]
[159.17405701 159.76004028]
[166.45358276 172.87524414]
[166.91276550 157.88227844]
[171.01976013 143.45547485]
[178.52580261 130.46858215]
[188.97631836 119.70816040]
[201.73837280 111.82589722]
[216.03903198 107.29917908]
[231.01219177 106.40216064]
[245.75099182 109.18917847]
[259.36282349 115.49143219]
[271.02325439 124.92722321]
[280.02609253 136.92509460]
[285.82611084 150.75837708]
[288.07199097 165.58929443]
[286.62771606 180.51960754]
[281.58081055 194.64506531]
[273.23687744 207.11016846]
[262.10128784 217.15998840]
[248.84848022 224.18585205]
[234.28106689 227.76223755]
[219.28134155 227.67256165]
[204.75773621 223.92222595]
[191.58987427 216.73840332]
[180.57525635 206.55615234]
[172.37937927 193.98886108]
[172.98725891 208.97654724]
[173.59513855 223.96421814]
[174.20301819 238.95190430]
[174.81091309 253.93957520]
[175.41879272 268.92724609]
[176.02667236 283.91491699]
[176.63456726 298.90261841]
[183.31782532 314.48370361]
[170.19575500 325.21905518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 121]
[10 120]
[11 119]
[12 110]
[13 109]
[14 108]
[19 39]
[20 38]
[21 37]
[22 35]
[23 34]
[24 33]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
[71 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
