%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAxxxxxxxxxxGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 242.66873169]
[92.50000000 227.66873169]
[92.50000000 212.66873169]
[92.50000000 197.66873169]
[92.50000000 182.66873169]
[92.50000000 167.66873169]
[92.50000000 152.66873169]
[92.50000000 137.66873169]
[92.50000000 122.66873169]
[92.50000000 107.66873169]
[90.22858429 92.84171295]
[85.73813629 78.52962494]
[70.62891388 77.12000275]
[57.24653625 70.05211639]
[47.61572266 58.43053436]
[43.18008804 44.04607391]
[44.58578491 29.09987450]
[51.58761215 15.86658859]
[63.09106827 6.34819937]
[58.60062408 -7.96388912]
[54.11017609 -22.27597809]
[49.61972809 -36.58806610]
[45.12928009 -50.90015411]
[30.54638290 -47.36394501]
[15.76165771 -44.79926300]
[0.83975565 -43.21732330]
[-14.15407372 -42.62504196]
[-29.15426445 -43.02501297]
[-44.09522629 -44.41548157]
[-58.91162109 -46.79037476]
[-73.53866577 -50.13930130]
[-87.91239166 -54.44761658]
[-101.96995544 -59.69648743]
[-115.64987946 -65.86296082]
[-128.89234924 -72.92006683]
[-141.63945007 -80.83694458]
[-153.83544922 -89.57898712]
[-165.42701721 -99.10795593]
[-176.36346436 -109.38218689]
[-186.59696960 -120.35675812]
[-196.08277893 -131.98367310]
[-204.77941895 -144.21208191]
[-212.64884949 -156.98854065]
[-219.65667725 -170.25715637]
[-225.77224731 -183.95989990]
[-230.96882629 -198.03688049]
[-235.22367859 -212.42652893]
[-238.51818848 -227.06591797]
[-240.83798218 -241.89105225]
[-242.17289734 -256.83706665]
[-242.51710510 -271.83865356]
[-241.86907959 -286.83016968]
[-240.23167419 -301.74609375]
[-237.61204529 -316.52117920]
[-234.02163696 -331.09082031]
[-229.47616577 -345.39132690]
[-223.99551392 -359.36016846]
[-217.60360718 -372.93621826]
[-210.32844543 -386.06015015]
[-202.20179749 -398.67456055]
[-193.25923157 -410.72430420]
[-183.53984070 -422.15667725]
[-173.08613586 -432.92169189]
[-161.94380188 -442.97225952]
[-150.16157532 -452.26446533]
[-137.79098511 -460.75765991]
[-124.88613129 -468.41470337]
[-111.50341797 -475.20208740]
[-97.70138550 -481.09017944]
[-83.54038239 -486.05322266]
[-69.08232880 -490.06945801]
[-54.39044571 -493.12139893]
[-39.52898026 -495.19567871]
[-24.56291962 -496.28320312]
[-9.55770397 -496.37921143]
[5.42105055 -495.48333740]
[20.30784416 -493.59942627]
[35.03758240 -490.73577881]
[49.54585648 -486.90487671]
[63.76921844 -482.12350464]
[77.64548492 -476.41253662]
[91.11396027 -469.79696655]
[104.11576843 -462.30572510]
[116.59403992 -453.97155762]
[128.49421692 -444.83090210]
[139.76426697 -434.92376709]
[150.35490417 -424.29342651]
[160.21981812 -412.98638916]
[169.31587219 -401.05206299]
[177.60328674 -388.54269409]
[185.04582214 -375.51296997]
[191.61094666 -362.01980591]
[197.26994324 -348.12228394]
[201.99806213 -333.88113403]
[205.77464294 -319.35861206]
[208.58314514 -304.61825562]
[210.41131592 -289.72451782]
[211.25115967 -274.74252319]
[211.09898376 -259.73776245]
[209.95545959 -244.77587891]
[207.82559204 -229.92228699]
[204.71870422 -215.24192810]
[200.64836121 -200.79899597]
[195.63238525 -186.65666199]
[189.69268799 -172.87677002]
[182.85525513 -159.51954651]
[175.14997864 -146.64343262]
[166.61056519 -134.30471802]
[157.27433777 -122.55734253]
[147.18212891 -111.45270538]
[136.37806702 -101.03934479]
[124.90940857 -91.36280060]
[112.82629395 -82.46539307]
[100.18154907 -74.38601685]
[87.03048706 -67.16000366]
[73.43060303 -60.81895828]
[59.44137192 -55.39060211]
[63.93181610 -41.07851410]
[68.42226410 -26.76642418]
[72.91271210 -12.45433617]
[77.40316010 1.85775268]
[92.28232574 3.09853864]
[105.58892822 9.96001530]
[115.28096008 21.42427826]
[119.85773468 35.76445770]
[118.59216309 50.80480194]
[111.64604950 64.25078583]
[100.05022430 74.03917694]
[104.54067230 88.35126495]
[108.49692535 73.88240051]
[117.33325195 61.76136780]
[129.89787292 53.56806946]
[144.55308533 50.37045288]
[159.38867188 52.58530426]
[172.47088623 59.92393494]
[182.09457397 71.42979431]
[187.00531006 85.60317230]
[186.56303406 100.59664917]
[180.82539368 114.45592499]
[170.54025269 125.37451935]
[157.04820251 131.92927551]
[142.10786438 133.26580811]
[127.66661835 129.20989990]
[115.60678101 120.29024506]
[107.50000000 107.66873169]
[107.50000000 122.66873169]
[107.50000000 137.66873169]
[107.50000000 152.66873169]
[107.50000000 167.66873169]
[107.50000000 182.66873169]
[107.50000000 197.66873169]
[107.50000000 212.66873169]
[107.50000000 227.66873169]
[107.50000000 242.66873169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 129]
[12 128]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
