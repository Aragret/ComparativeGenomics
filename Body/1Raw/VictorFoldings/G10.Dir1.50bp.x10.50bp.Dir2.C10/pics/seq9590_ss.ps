%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCxxxxxxxxxxCAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAUGUCCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.31213379 528.41870117]
[72.31213379 513.41870117]
[72.31213379 498.41870117]
[72.31213379 483.41870117]
[72.31213379 468.41870117]
[72.31213379 453.41870117]
[72.31213379 438.41870117]
[72.31213379 423.41870117]
[72.31213379 408.41870117]
[72.31213379 393.41870117]
[59.57064819 390.95452881]
[47.46669769 386.26226807]
[36.38669205 379.49014282]
[26.68461037 370.85284424]
[18.67071533 360.62463379]
[12.60162640 349.13070679]
[8.67210484 336.73681641]
[7.00879622 323.83764648]
[7.66615915 310.84423828]
[10.62467575 298.17092896]
[15.79143333 286.22201538]
[23.00303650 275.37905884]
[32.03078079 265.98849487]
[42.58789444 258.35070801]
[54.33866882 252.71038818]
[66.90910339 249.24861145]
[79.89883423 248.07713318]
[81.45641327 233.15821838]
[83.01399231 218.23930359]
[84.57157135 203.32038879]
[86.12915802 188.40148926]
[87.53145599 173.46717834]
[88.77833557 158.51908875]
[90.02520752 143.57099915]
[91.27207947 128.62290955]
[92.51895905 113.67482758]
[80.29457092 104.51094055]
[79.78269958 85.56285858]
[73.43556976 71.97190857]
[67.08843994 58.38095856]
[60.74131012 44.79000854]
[54.39418030 31.19905663]
[47.87826920 44.70989990]
[33.78185654 49.83738708]
[20.10823631 43.67036819]
[14.62066269 29.71018982]
[20.43472862 15.88280296]
[34.24947357 10.03876019]
[48.22264099 15.49710274]
[43.61707306 1.22164178]
[39.01150894 -13.05381870]
[34.40594482 -27.32927895]
[19.47122574 -25.49881172]
[4.45999432 -26.52810669]
[-10.08510017 -30.37995529]
[-23.63826180 -36.91511536]
[-35.70955276 -45.89734268]
[-45.86260223 -57.00194168]
[-53.73038483 -69.82748413]
[-59.02848434 -83.91033173]
[-61.56538010 -98.74140167]
[-61.24936295 -113.78456116]
[-58.09185791 -128.49600220]
[-52.20700455 -142.34393311]
[-43.80754089 -154.82774353]
[-33.19709778 -165.49615479]
[-20.75923538 -173.96350098]
[-6.94357967 -179.92372131]
[7.75044537 -183.16133118]
[22.79165840 -183.55929565]
[37.63633347 -181.10324097]
[51.74783707 -175.88195801]
[64.61605072 -168.08416748]
[75.77580261 -157.99176025]
[84.82366943 -145.96958923]
[91.43257141 -132.45223999]
[95.36360931 -117.92834473]
[96.47467041 -102.92294312]
[94.72560120 -87.97846985]
[90.17961884 -73.63516235]
[83.00106812 -60.41151428]
[73.44944000 -48.78555679]
[61.87002182 -39.17755890]
[48.68140793 -31.93484306]
[53.28697205 -17.65938377]
[57.89253616 -3.38392258]
[62.49810028 10.89153767]
[67.98513031 24.85192871]
[74.33226013 38.44287872]
[80.67938995 52.03382874]
[87.02651978 65.62477875]
[93.37364960 79.21572876]
[95.04867554 64.30954742]
[108.17054749 57.04204178]
[121.69474792 63.53017426]
[124.23815918 78.31297302]
[113.65993500 88.94798279]
[128.23263550 85.39321899]
[142.80534363 81.83845520]
[150.45976257 76.73338318]
[157.71817017 78.36467743]
[172.36166382 75.11385345]
[187.00517273 71.86302948]
[201.64866638 68.61219788]
[208.70429993 54.65684128]
[223.09982300 48.54924011]
[238.03813171 53.17322159]
[246.46578979 66.34548950]
[244.40353394 81.84648895]
[232.82508850 92.35713196]
[217.19744873 92.91461182]
[204.89950562 83.25569916]
[190.25599670 86.50653076]
[175.61250305 89.75735474]
[160.96899414 93.00817871]
[146.36010742 96.41115570]
[131.78739929 99.96591949]
[117.21469879 103.52068329]
[107.46704102 114.92169952]
[106.22016907 129.86979675]
[104.97329712 144.81787109]
[103.72641754 159.76596069]
[102.47954559 174.71405029]
[104.89561462 183.59179688]
[101.04806519 189.95906067]
[99.49048615 204.87797546]
[97.93290710 219.79689026]
[96.37532806 234.71580505]
[94.81774139 249.63471985]
[111.10223389 255.15251160]
[125.63928223 264.32009888]
[137.62524414 276.62646484]
[146.39846802 291.38723755]
[151.47587585 307.78268433]
[152.57946777 324.90319824]
[149.65165710 341.79989624]
[142.85812378 357.53707886]
[132.57861328 371.24411011]
[119.38554382 382.16357422]
[104.01223755 389.69314575]
[87.31213379 393.41870117]
[87.31213379 408.41870117]
[87.31213379 423.41870117]
[87.31213379 438.41870117]
[87.31213379 453.41870117]
[87.31213379 468.41870117]
[87.31213379 483.41870117]
[87.31213379 498.41870117]
[87.31213379 513.41870117]
[87.31213379 528.41870117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 123]
[33 122]
[34 121]
[35 120]
[36 119]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[49 87]
[50 86]
[51 85]
[52 84]
[97 118]
[98 117]
[99 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
