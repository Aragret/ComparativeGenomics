%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGxxxxxxxxxxUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.04182434 345.67510986]
[157.04182434 330.67510986]
[157.04182434 315.67510986]
[157.04182434 300.67510986]
[157.04182434 285.67510986]
[157.04182434 270.67510986]
[157.04182434 255.67509460]
[157.04182434 240.67509460]
[157.04182434 225.67509460]
[157.04182434 210.67509460]
[144.06831360 207.80197144]
[133.03907776 201.11616516]
[124.99465179 191.53935242]
[120.59850311 180.24803162]
[120.08615875 168.53236389]
[123.26385498 157.64988708]
[129.55448914 148.69064331]
[120.15062714 137.00444031]
[110.74677277 125.31822968]
[93.56543732 126.74139404]
[78.91217804 117.65813446]
[65.22154999 123.78730774]
[51.53092957 129.91648865]
[37.84030151 136.04565430]
[33.73518372 151.13479614]
[20.86195564 160.01251221]
[5.29895639 158.48703003]
[-5.60543776 147.27864075]
[-6.70250654 131.67958069]
[2.52575302 119.05526733]
[17.72203827 115.36651611]
[31.71112823 122.35503387]
[45.40175247 116.22586060]
[59.09238052 110.09668732]
[72.78300476 103.96750641]
[68.40872955 91.81735992]
[69.97521210 77.09694672]
[58.00495148 68.05743408]
[46.03469086 59.01791000]
[34.06443405 49.97838974]
[22.09417534 40.93887329]
[10.12391663 31.89935303]
[-1.84634209 22.85983276]
[-13.84957981 32.01542664]
[-27.87827873 37.59199524]
[-42.89141846 39.17573166]
[-57.77492523 36.64910126]
[-71.42433929 30.19960022]
[-82.82678986 20.30582809]
[-91.13613129 7.70196390]
[-95.73576355 -6.67669964]
[-96.28435516 -21.76317024]
[-92.74121094 -36.43793488]
[-85.36923981 -49.61202240]
[-74.71549225 -60.30783463]
[-61.57056046 -67.73166656]
[-46.90987778 -71.33261871]
[-31.82135963 -70.84349060]
[-17.42468071 -66.30056000]
[-4.78816795 -58.04095078]
[5.15046549 -46.67758179]
[11.65370750 -33.05369186]
[14.23897266 -18.18025780]
[12.71441936 -3.16099381]
[7.19317770 10.88957405]
[19.16343498 19.92909431]
[31.13369370 28.96861267]
[43.10395432 38.00813293]
[55.07421112 47.04765320]
[67.04447174 56.08717346]
[79.01472473 65.12669373]
[86.41376495 63.90022659]
[80.24265289 50.22845459]
[68.53538513 40.85083389]
[65.00292206 26.27270889]
[71.11906433 12.57625675]
[84.33207703 5.47580910]
[99.12931824 7.93376303]
[109.33720398 18.92462921]
[110.69686890 33.86287689]
[102.64165497 46.51559830]
[101.21184540 61.44729996]
[108.61088562 60.22083664]
[117.02429962 47.80252075]
[125.43770599 35.38420868]
[118.15126801 21.92440033]
[117.96612549 6.62001228]
[124.92482758 -7.01212215]
[137.42831421 -15.83943748]
[152.60336304 -17.83348083]
[166.96287537 -12.53603649]
[177.20713806 -1.16441858]
[180.98208618 13.66825962]
[177.42027283 28.55355644]
[167.34017944 40.07093811]
[153.05812073 45.57379913]
[137.85601807 43.79761887]
[129.44261169 56.21593094]
[121.02919769 68.63424683]
[132.09727478 94.10688019]
[122.43298340 115.91437531]
[131.83683777 127.60058594]
[141.24069214 139.28678894]
[165.54507446 134.57458496]
[188.42294312 148.46995544]
[196.61843872 176.05708313]
[211.48503113 178.05314636]
[226.35163879 180.04920959]
[241.21823120 182.04525757]
[247.97790527 168.49588013]
[258.77252197 157.87728882]
[272.43121338 151.34129333]
[287.47235107 149.59687805]
[302.26437378 152.83326721]
[315.20278931 160.69940186]
[324.88412476 172.34202576]
[330.25820923 186.49822998]
[330.74212646 201.63244629]
[326.28335571 216.10304260]
[317.36553955 228.34034729]
[304.95605469 237.01695251]
[290.40100098 241.19168091]
[275.27914429 240.41169739]
[261.23083496 234.76161194]
[249.77989197 224.85427856]
[242.16847229 211.76440430]
[239.22218323 196.91186523]
[224.35557556 194.91580200]
[209.48898315 192.91973877]
[194.62237549 190.92369080]
[188.97723389 195.86154175]
[201.06695557 204.74067688]
[213.15666199 213.61981201]
[227.37054443 218.41203308]
[235.16415405 231.22840881]
[232.87947083 246.05339050]
[221.58882141 255.92868042]
[206.59164429 256.21917725]
[194.92704773 246.78851318]
[192.06973267 232.06472778]
[184.87834167 218.90098572]
[177.68696594 205.73724365]
[172.04182434 210.67509460]
[172.04182434 225.67509460]
[172.04182434 240.67509460]
[172.04182434 255.67509460]
[172.04182434 270.67510986]
[172.04182434 285.67510986]
[172.04182434 300.67510986]
[172.04182434 315.67510986]
[172.04182434 330.67510986]
[172.04182434 345.67510986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 103]
[18 102]
[19 101]
[21 35]
[22 34]
[23 33]
[24 32]
[37 71]
[38 70]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[83 99]
[84 98]
[85 97]
[106 130]
[107 129]
[108 128]
[109 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
