%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.29804993 303.56924438]
[118.98599243 288.57247925]
[118.67394257 273.57574463]
[118.36188507 258.57897949]
[118.04982758 243.58222961]
[117.73777008 228.58547974]
[117.42571259 213.58872986]
[117.11365509 198.59196472]
[116.80160522 183.59521484]
[114.31648254 168.80250549]
[109.71092224 154.52705383]
[105.10535431 140.25158691]
[93.74926758 141.45622253]
[82.13821411 139.41737366]
[71.20727539 134.09523010]
[61.89076233 125.72106171]
[48.36657333 132.20922852]
[34.84238052 138.69738770]
[21.31819153 145.18556213]
[7.79400206 151.67372131]
[-5.73018789 158.16188049]
[-19.25437737 164.65005493]
[-32.77856827 171.13821411]
[-36.48424530 186.33038330]
[-49.11882401 195.54458618]
[-64.71664429 194.43014526]
[-75.91289520 183.51327515]
[-77.42104340 167.94859314]
[-68.52899170 155.08525085]
[-53.43529510 150.99693298]
[-39.26673126 157.61402893]
[-25.74254227 151.12586975]
[-12.21835327 144.63769531]
[1.30583680 138.14953613]
[14.83002663 131.66136169]
[28.35421753 125.17320251]
[41.87840652 118.68503571]
[55.40259552 112.19686890]
[53.84501648 97.27796173]
[39.27231216 93.72319794]
[24.69960976 90.16843414]
[9.11928654 95.28562164]
[-2.92040944 84.15109253]
[0.96592814 68.21909332]
[16.78036880 63.87910843]
[28.25437164 75.59573364]
[42.82707596 79.15049744]
[57.39977646 82.70525360]
[78.14172363 62.65045166]
[105.10535431 59.74841309]
[109.71092224 45.47294998]
[114.31648254 31.19749069]
[105.34241486 18.67661667]
[105.46040344 3.45034170]
[114.41562653 -8.64378738]
[128.60533142 -13.09239960]
[133.21090698 -27.36786079]
[128.90821838 -45.24149704]
[142.30621338 -56.53280258]
[146.61380005 -70.90098572]
[150.92138672 -85.26917267]
[146.56585693 -86.83649445]
[142.40362549 -89.64533997]
[138.77072144 -93.66770172]
[135.99644470 -98.78837585]
[134.38139343 -104.80727386]
[134.17652893 -111.44715118]
[134.80050659 -126.43417358]
[135.42448425 -141.42118835]
[121.62010956 -147.78573608]
[111.30580902 -158.95191956]
[106.05443573 -173.21696472]
[106.66679382 -188.40556335]
[113.04949188 -202.20155334]
[124.22923279 -212.50115967]
[138.50117493 -217.73376465]
[153.68894958 -217.10142517]
[167.47654724 -210.70057678]
[177.76142883 -199.50730896]
[182.97525024 -185.22848511]
[182.32293701 -170.04156494]
[175.90396118 -156.26240540]
[164.69715881 -145.99224854]
[150.41151428 -140.79721069]
[149.78753662 -125.81019592]
[149.16355896 -110.82317352]
[162.81979370 -104.61776733]
[173.69862366 -114.94497681]
[184.57743835 -125.27217865]
[195.45626831 -135.59938049]
[206.33509827 -145.92658997]
[205.19720459 -161.52272034]
[214.39239502 -174.17114258]
[229.57897949 -177.89964294]
[243.58630371 -170.94775391]
[249.80055237 -156.59794617]
[245.28755188 -141.62574768]
[232.17817688 -133.10058594]
[216.66229248 -135.04776001]
[205.78347778 -124.72055817]
[194.90464783 -114.39335632]
[184.02581787 -104.06614685]
[173.14700317 -93.73894501]
[165.28956604 -80.96158600]
[160.98199463 -66.59340668]
[156.67440796 -52.22521973]
[162.14144897 -41.38922501]
[158.62162781 -29.35469627]
[147.48635864 -22.76229668]
[142.88079834 -8.48683548]
[151.79528809 3.41567898]
[151.99407959 18.46308708]
[143.19137573 30.88748932]
[128.59194946 35.80305481]
[123.98638153 50.07851410]
[119.38081360 64.35397339]
[128.13401794 70.76419067]
[134.87559509 79.26480865]
[139.12351990 89.24801636]
[140.57406616 100.00000000]
[139.12351990 110.75198364]
[134.87559509 120.73519135]
[128.13401794 129.23580933]
[119.38081360 135.64602661]
[123.98638153 149.92147827]
[128.59194946 164.19694519]
[132.68159485 149.76521301]
[141.89863586 137.93110657]
[154.88969421 130.43228149]
[169.74723816 128.36982727]
[184.28964233 132.04658508]
[196.38157654 140.92266846]
[204.24754333 153.69476318]
[206.73254395 168.48748779]
[203.47167969 183.12875366]
[194.94375610 195.46871948]
[182.40098572 203.69544983]
[167.68507385 206.60095215]
[152.95683289 203.75862122]
[140.37887573 195.58580017]
[131.79835510 183.28315735]
[132.11041260 198.27990723]
[132.42247009 213.27667236]
[132.73452759 228.27342224]
[133.04658508 243.27017212]
[133.35864258 258.26693726]
[133.67070007 273.26367188]
[133.98274231 288.26043701]
[134.29479980 303.25720215]
[136.88580322 322.46490479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 126]
[11 125]
[12 124]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[39 48]
[40 47]
[41 46]
[50 116]
[51 115]
[52 114]
[56 110]
[57 109]
[59 106]
[60 105]
[61 104]
[67 86]
[68 85]
[69 84]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
