%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAxxxxxxxxxxACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.41661835 239.98797607]
[108.10456848 224.99122620]
[107.79251099 209.99446106]
[107.48045349 194.99771118]
[107.16839600 180.00096130]
[106.85633850 165.00421143]
[106.54428101 150.00744629]
[106.23223114 135.01069641]
[105.92017365 120.01394653]
[92.90386200 112.55903625]
[79.81070709 119.87814331]
[66.71755219 127.19724274]
[58.44704056 140.68461609]
[43.56235886 140.14105225]
[30.46920395 147.46015930]
[17.37604904 154.77926636]
[4.28289509 162.09837341]
[2.32985640 177.37881470]
[-8.12410545 188.44985962]
[-22.91758728 191.20973206]
[-36.33886719 184.80604553]
[-49.43202209 192.12515259]
[-53.49209976 207.39901733]
[-67.20500183 215.25599670]
[-82.43509674 211.03465271]
[-90.14664459 197.23945618]
[-85.76452637 182.05484009]
[-71.88856506 174.48957825]
[-56.75112915 179.03199768]
[-43.65797424 171.71289062]
[-42.08234024 156.92588806]
[-31.98217201 145.77014160]
[-17.07551003 142.66453552]
[-3.03621078 149.00521851]
[10.05694389 141.68611145]
[23.15009880 134.36700439]
[36.24325180 127.04790497]
[43.57725525 114.08404541]
[59.39844894 114.10409546]
[72.49160004 106.78498840]
[85.58475494 99.46588135]
[94.35096741 87.29404449]
[97.14328766 72.55623627]
[99.93561554 57.81843185]
[102.72793579 43.08062744]
[105.52026367 28.34281921]
[101.36237335 13.93060398]
[91.14889526 2.94493914]
[80.93541718 -8.04072571]
[70.72193146 -19.02639008]
[60.50845337 -30.01205444]
[50.29497528 -40.99771881]
[40.08149338 -51.98338318]
[29.86801529 -62.96904755]
[19.65453529 -73.95471191]
[3.82873416 -78.25308990]
[-0.09949400 -94.17481232]
[11.91087532 -105.34096527]
[27.50460243 -100.26477814]
[30.64019966 -84.16819000]
[40.85367966 -73.18252563]
[51.06715775 -62.19686508]
[61.28063965 -51.21120071]
[71.49411774 -40.22553635]
[81.70759583 -29.23987007]
[91.92108154 -18.25420570]
[102.13455963 -7.26854086]
[112.34803772 3.71712399]
[108.65167236 -10.82030678]
[104.95531464 -25.35773849]
[95.21207428 -36.76253510]
[91.01791382 -51.16423416]
[93.11422729 -66.01702881]
[101.13046265 -78.69535828]
[113.64955902 -86.95805359]
[128.45849609 -89.34451294]
[142.93948364 -85.43286896]
[154.53269958 -75.91458893]
[161.18876648 -62.47223663]
[161.73109436 -47.48204422]
[156.06381226 -33.59384918]
[145.18946838 -23.26314354]
[140.00354004 -9.18812656]
[134.81761169 4.88689137]
[146.11660767 -4.97883129]
[157.41561890 -14.84455490]
[154.05407715 -31.00248528]
[159.25189209 -46.56777954]
[171.50700378 -57.34007263]
[187.42655945 -60.46255875]
[202.66587830 -55.17913818]
[213.75720215 -65.27778625]
[224.84851074 -75.37644196]
[229.31127930 -91.15666962]
[245.27301025 -94.91905975]
[256.31362915 -82.79319000]
[251.07550049 -67.25310516]
[234.94715881 -64.28512573]
[223.85585022 -54.18647385]
[212.76452637 -44.08782578]
[216.55476379 -30.93132210]
[214.28208923 -17.36245728]
[206.33557129 -6.05050373]
[194.22604370 0.75422949]
[180.29922485 1.66795683]
[167.28134155 -3.54554987]
[155.98234558 6.32017326]
[144.68333435 16.18589592]
[141.81523132 21.12129021]
[138.15148926 25.17238235]
[133.92347717 28.22792053]
[129.37355042 30.23205566]
[124.74259949 31.18403244]
[120.25806427 31.13514519]
[117.46574402 45.87295151]
[114.67341614 60.61075592]
[111.88109589 75.34856415]
[109.08876801 90.08636475]
[118.60494232 78.49143982]
[124.86647034 64.86083221]
[134.34353638 53.23392105]
[146.43154907 44.35247803]
[160.35929871 38.78311539]
[175.23822021 36.88115311]
[190.11909485 38.76792908]
[204.05252075 44.32307816]
[216.14958191 53.19218063]
[225.63851929 64.80941772]
[231.91394043 78.43362427]
[234.57550049 93.19560242]
[233.45339966 108.15357208]
[228.61921692 122.35324860]
[220.38134766 134.88870239]
[209.26539612 144.96022034]
[195.98049927 151.92523193]
[181.37420654 155.33941650]
[166.37840271 154.98492432]
[151.94976807 150.88438416]
[139.00881958 143.29940796]
[128.38059998 132.71316528]
[120.91692352 119.70188904]
[121.22898102 134.69863892]
[121.54103851 149.69538879]
[121.85309601 164.69215393]
[122.16515350 179.68890381]
[122.47720337 194.68565369]
[122.78926086 209.68240356]
[123.10131836 224.67916870]
[123.41337585 239.67591858]
[126.00437164 258.88363647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 41]
[11 40]
[12 39]
[14 37]
[15 36]
[16 35]
[17 34]
[21 30]
[22 29]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[84 108]
[85 107]
[86 106]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
