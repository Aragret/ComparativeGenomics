%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUxxxxxxxxxxGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.46661377 616.80578613]
[132.46661377 601.80578613]
[132.46661377 586.80578613]
[132.46661377 571.80578613]
[132.46661377 556.80578613]
[132.46661377 541.80578613]
[132.46661377 526.80578613]
[132.46661377 511.80575562]
[132.46661377 496.80575562]
[132.46661377 481.80575562]
[114.93010712 476.81582642]
[99.71229553 466.74456787]
[88.24535370 452.52816772]
[81.61196899 435.49346924]
[80.44313049 417.23419189]
[84.85809326 399.46166992]
[94.45232391 383.84463501]
[108.33450317 371.85241699]
[125.20937347 364.61672974]
[123.36605072 349.73043823]
[121.52272797 334.84411621]
[119.67939758 319.95782471]
[104.73874664 318.88491821]
[90.28990173 314.91647339]
[76.88867950 308.20312500]
[65.05097961 299.00125122]
[55.23290634 287.66302490]
[47.81323624 274.62298584]
[43.07875443 260.38140869]
[41.21319962 245.48506165]
[42.29013824 230.50621033]
[46.27004242 216.02067566]
[53.00175476 202.58569336]
[62.22822571 190.71847534]
[73.59632874 180.87626648]
[86.67037964 173.43873596]
[100.94880676 168.69337463]
[99.10547638 153.80706787]
[97.26215363 138.92076111]
[95.41883087 124.03445435]
[93.57550812 109.14814758]
[91.57945251 94.28155518]
[85.56381226 108.02244568]
[75.47911072 119.12644196]
[62.37909317 126.43325806]
[47.63261414 129.17939758]
[32.78054810 127.07792664]
[19.37481689 120.34841156]
[8.81620407 109.69403839]
[2.20799375 96.22809601]
[0.24068983 81.35766602]
[3.11985850 66.63658142]
[10.54465103 53.60306549]
[21.73923874 43.61901855]
[35.53388214 37.72768784]
[50.48715973 36.54466248]
[65.03657532 40.19356537]
[77.66184235 48.29310989]
[87.04372406 59.99696732]
[92.20179749 74.08168793]
[95.26019287 59.39679337]
[98.31858826 44.71189499]
[101.37698364 30.02699852]
[104.43537903 15.34210110]
[107.49377441 0.65720332]
[109.48983765 -14.20939541]
[110.41324615 -29.18094444]
[111.33666229 -44.15249634]
[112.26007843 -59.12404633]
[98.26029968 -64.89334869]
[86.89400482 -74.89765930]
[79.39412689 -88.05176544]
[76.57419586 -102.92881775]
[78.74009705 -117.91506195]
[85.65688324 -131.38490295]
[96.57428741 -141.87724304]
[110.30805969 -148.25393677]
[125.36846924 -149.82328796]
[140.12187195 -146.41508484]
[152.96792603 -138.39900208]
[162.51318359 -126.64457703]
[167.72227478 -112.42683411]
[168.03012085 -97.28800964]
[163.40335083 -82.87025452]
[154.34382629 -70.73749542]
[141.83427429 -62.20580292]
[127.23162842 -58.20063019]
[126.30821228 -43.22908020]
[125.38479614 -28.25753212]
[124.46138763 -13.28598213]
[135.94493103 -22.93628120]
[150.94380188 -23.12001991]
[162.66029358 -13.75392437]
[165.78431702 0.91715115]
[158.90002441 14.24405861]
[145.12747192 20.18684578]
[130.70858765 16.05215454]
[122.17867279 3.71559882]
[119.12027740 18.40049553]
[116.06188202 33.08539581]
[113.00348663 47.77029037]
[109.94509125 62.45518875]
[106.88669586 77.14008331]
[106.42477417 92.13297272]
[110.62764740 99.07398987]
[108.46181488 107.30482483]
[110.30513763 122.19113159]
[112.14846039 137.07743835]
[113.99178314 151.96374512]
[115.83511353 166.85005188]
[130.83973694 167.96939087]
[145.33302307 171.99333191]
[158.75843811 178.76545715]
[170.60081482 188.02378845]
[180.40618896 199.41102600]
[187.79910278 212.48828125]
[192.49705505 226.75205994]
[194.32127380 241.65353394]
[193.20350647 256.61978149]
[189.18856812 271.07571411]
[182.43258667 284.46624756]
[173.19688416 296.27758789]
[161.83789062 306.05688477]
[148.79341125 313.42977905]
[134.56570435 318.11450195]
[136.40902710 333.00079346]
[138.25234985 347.88711548]
[140.09568787 362.77340698]
[152.05598450 364.03610229]
[163.51785278 367.65789795]
[174.02110291 373.49075317]
[183.14457703 381.29791260]
[190.52299500 390.76351929]
[195.86163330 401.50531006]
[198.94802856 413.09024048]
[199.66049194 425.05175781]
[197.97286987 436.90869141]
[193.95553589 448.18457031]
[187.77241516 458.42675781]
[179.67428589 467.22467041]
[169.98867798 474.22619629]
[159.10656738 479.15185547]
[147.46661377 481.80575562]
[147.46661377 496.80575562]
[147.46661377 511.80575562]
[147.46661377 526.80578613]
[147.46661377 541.80578613]
[147.46661377 556.80578613]
[147.46661377 571.80578613]
[147.46661377 586.80578613]
[147.46661377 601.80578613]
[147.46661377 616.80578613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 128]
[20 127]
[21 126]
[22 125]
[37 110]
[38 109]
[39 108]
[40 107]
[41 106]
[42 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[66 90]
[67 89]
[68 88]
[69 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
