%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAxxxxxxxxxxCGAAGAAUUCACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[227.82707214 609.23150635]
[227.20309448 594.24450684]
[226.57911682 579.25750732]
[225.95513916 564.27044678]
[225.33116150 549.28344727]
[224.70718384 534.29644775]
[224.08320618 519.30944824]
[223.45922852 504.32241821]
[221.12812805 489.50463867]
[217.12039185 475.04995728]
[213.11265564 460.59527588]
[209.10490417 446.14059448]
[205.09716797 431.68588257]
[201.08943176 417.23120117]
[184.46325684 417.30776978]
[168.46209717 412.74234009]
[154.35685730 403.88983154]
[143.27001953 391.44586182]
[136.08630371 376.39227295]
[133.38208008 359.91958618]
[135.37916565 343.33285522]
[141.92657471 327.94824219]
[152.51197815 314.98861694]
[166.30175781 305.48638916]
[161.40019226 291.30984497]
[149.92875671 281.80957031]
[152.73182678 266.23864746]
[147.83027649 252.06210327]
[133.97416687 241.33790588]
[137.52961731 223.30075073]
[132.33419800 209.22923279]
[127.13877869 195.15771484]
[115.47217560 185.89814758]
[117.95070648 170.27227783]
[112.75528717 156.20075989]
[107.55987549 142.12924194]
[102.36445618 128.05772400]
[81.04337311 120.82000732]
[71.84410858 100.26892853]
[57.34851074 96.41176605]
[44.65941620 105.55073547]
[29.06848907 104.34365845]
[17.93729401 93.36046600]
[16.52163696 77.78709412]
[25.48995209 64.97680664]
[40.60766983 60.97823715]
[54.73667145 67.67938232]
[61.20567322 81.91616821]
[75.70127106 85.77333069]
[80.82781982 79.37831116]
[87.57886505 74.73061371]
[84.78653717 59.99280930]
[81.99420929 45.25500107]
[79.20188904 30.51719666]
[76.14393616 27.22927284]
[74.49839020 23.50594139]
[74.22521973 19.85802841]
[75.11842346 16.72814560]
[76.84394836 14.44124699]
[75.28636169 -0.47766504]
[73.72878265 -15.39657688]
[72.17120361 -30.31548882]
[57.28819275 -32.84504318]
[43.64004517 -39.29722595]
[32.23954391 -49.19324112]
[23.93267822 -61.79873657]
[19.33587265 -76.17830658]
[18.79024315 -91.26488495]
[22.33627892 -105.93894958]
[29.71083832 -119.11158752]
[40.36668015 -129.80531311]
[53.51307678 -137.22656250]
[68.17446899 -140.82463074]
[83.26288605 -140.33253479]
[97.65867615 -135.78677368]
[110.29356384 -127.52468109]
[120.22996521 -116.15935516]
[126.73052216 -102.53418732]
[129.31286621 -87.66024780]
[127.78536224 -72.64128113]
[122.26136017 -58.59180069]
[113.15077209 -46.55436325]
[101.12967682 -37.42223358]
[87.09011078 -31.87306976]
[88.64769745 -16.95415878]
[90.20527649 -2.03524590]
[91.76285553 12.88366604]
[93.93969727 27.72487259]
[96.73201752 42.46267700]
[99.52434540 57.20048523]
[102.31666565 71.93828583]
[113.21062469 75.13423920]
[121.95688629 82.37270355]
[127.13354492 92.47689056]
[127.89901733 103.80413818]
[124.12885284 114.51293182]
[116.43598175 122.86230469]
[121.63139343 136.93382263]
[126.82681274 151.00534058]
[132.02223206 165.07687378]
[144.06044006 175.34292603]
[141.21029663 189.96229553]
[146.40571594 204.03381348]
[151.60113525 218.10533142]
[163.00099182 224.22882080]
[167.01837158 236.10650635]
[162.00683594 247.16055298]
[166.90838623 261.33709717]
[178.73042297 271.85137939]
[175.57675171 286.40829468]
[180.47830200 300.58483887]
[193.89173889 299.37002563]
[207.22637939 301.20318604]
[219.79893494 305.98663330]
[230.96600342 313.47161865]
[240.15699768 323.27120972]
[246.90330505 334.88031006]
[250.86218262 347.70175171]
[251.83418274 361.07693481]
[249.77317810 374.31970215]
[244.78851318 386.75152588]
[237.13928223 397.73626709]
[227.22076416 406.71276855]
[215.54411316 413.22344971]
[219.55186462 427.67816162]
[223.55960083 442.13284302]
[227.56733704 456.58752441]
[231.57507324 471.04220581]
[235.58282471 485.49691772]
[241.06808472 471.53582764]
[252.32861328 461.62619019]
[266.87365723 457.95996094]
[281.48602295 461.34802246]
[292.93356323 471.04101562]
[298.68420410 484.89489746]
[297.46591187 499.84533691]
[289.54824829 512.58544922]
[276.68243408 520.29724121]
[261.71432495 521.27484131]
[247.95472717 515.30218506]
[238.44625854 503.69842529]
[239.07023621 518.68542480]
[239.69421387 533.67248535]
[240.31817627 548.65948486]
[240.94215393 563.64648438]
[241.56613159 578.63348389]
[242.19010925 593.62054443]
[242.81408691 608.60754395]
[249.51408386 624.18145752]
[236.40354919 634.93090820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 124]
[24 111]
[25 110]
[27 108]
[28 107]
[30 104]
[31 103]
[32 102]
[34 100]
[35 99]
[36 98]
[37 97]
[39 49]
[40 48]
[51 91]
[52 90]
[53 89]
[54 88]
[59 87]
[60 86]
[61 85]
[62 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
