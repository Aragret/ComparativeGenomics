%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACxxxxxxxxxxACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.38340759 305.04565430]
[114.07542419 290.04882812]
[113.76744843 275.05197144]
[113.45947266 260.05514526]
[113.15149689 245.05830383]
[112.84351349 230.06147766]
[112.53553772 215.06463623]
[112.22756195 200.06779480]
[111.91958618 185.07095337]
[109.92353058 170.20436096]
[106.26482391 155.65740967]
[102.60611725 141.11044312]
[98.94741058 126.56349945]
[82.09982300 119.65479279]
[73.65036011 103.52474976]
[77.56322479 85.74102020]
[67.68752289 74.45074463]
[57.81181335 63.16046143]
[47.93610764 51.87018204]
[38.06040192 40.57990265]
[28.18469429 29.28962135]
[17.52378654 18.73760605]
[6.13271189 8.97833252]
[-5.25836182 -0.78094238]
[-16.64943504 -10.54021645]
[-27.52004623 -0.18546823]
[-39.38246918 9.01637554]
[-52.11497879 16.97088814]
[-65.58691406 23.59644127]
[-79.66003418 28.82505035]
[-94.18991852 32.60305786]
[-109.02748108 34.89169693]
[-124.02044678 35.66748047]
[-139.01498413 34.92244720]
[-153.85720825 32.66424561]
[-168.39480591 28.91604614]
[-182.47862244 23.71631241]
[-195.96411133 17.11840248]
[-208.71290588 9.19002151]
[-220.59417725 0.01252715]
[-231.48600769 -10.31990433]
[-241.27662659 -21.70124435]
[-249.86555481 -34.01470566]
[-257.16467285 -47.13392639]
[-263.09906006 -60.92428207]
[-267.60784912 -75.24426270]
[-270.64474487 -89.94692993]
[-272.17858887 -104.88139343]
[-272.19366455 -119.89441681]
[-270.68978882 -134.83192444]
[-267.68240356 -149.54066467]
[-263.20236206 -163.86965942]
[-257.29565430 -177.67190552]
[-250.02288818 -190.80574036]
[-241.45869446 -203.13641357]
[-231.69093323 -214.53738403]
[-220.81987000 -224.89164734]
[-208.95704651 -234.09297180]
[-196.22418213 -242.04692078]
[-182.75195312 -248.67189026]
[-168.67860413 -253.89987183]
[-154.14855957 -257.67724609]
[-139.31089783 -259.96524048]
[-124.31789398 -260.74035645]
[-109.32339478 -259.99465942]
[-94.48126984 -257.73580933]
[-79.94383240 -253.98696899]
[-65.86024475 -248.78662109]
[-52.37503815 -242.18811035]
[-39.62659454 -234.25917053]
[-27.74572563 -225.08114624]
[-16.85435486 -214.74824524]
[-7.06424332 -203.36647034]
[1.52414596 -191.05262756]
[8.82268238 -177.93309021]
[14.75647068 -164.14247131]
[19.26461983 -149.82229614]
[22.30087090 -135.11949158]
[23.83406448 -120.18495941]
[23.84846878 -105.17193604]
[22.34393692 -90.23448944]
[19.33590698 -75.52589417]
[14.85524464 -61.19709015]
[8.94793034 -47.39510727]
[1.67458296 -34.26158524]
[-6.89016104 -21.93129158]
[4.50091267 -12.17201614]
[15.89198685 -2.41274166]
[27.28306007 7.34653282]
[26.50233459 -7.63313580]
[35.39455032 -19.71322250]
[49.92962265 -23.41885567]
[63.52003860 -17.07058525]
[70.00642395 -3.54554105]
[66.44905090 11.02652454]
[54.46017838 20.04133797]
[39.47497559 19.41391563]
[49.35068130 30.70419502]
[59.22638702 41.99447632]
[69.10209656 53.28475571]
[78.97779846 64.57503510]
[88.85350800 75.86531830]
[104.61106110 67.14308929]
[125.97132874 69.87666321]
[140.47994995 66.06880188]
[154.98858643 62.26094437]
[166.25692749 50.34638977]
[182.14450073 54.41047287]
[186.30754089 70.27241516]
[174.46347046 81.61480713]
[158.79643250 76.76956940]
[144.28781128 80.57743073]
[129.77919006 84.38528442]
[129.93318176 91.88370514]
[130.39514160 114.37895966]
[145.04786682 117.58795929]
[159.70059204 120.79695892]
[173.93031311 113.38786316]
[188.53604126 120.02505493]
[192.31350708 135.61705017]
[182.36497498 148.20300293]
[166.32209778 148.12803650]
[156.49159241 135.44967651]
[141.83886719 132.24067688]
[127.18614960 129.03169250]
[122.22253418 127.52627563]
[117.64093018 125.46765900]
[113.49436188 122.90479279]
[117.15306854 137.45175171]
[120.81177521 151.99870300]
[124.47048187 166.54565430]
[130.26104736 152.70840454]
[141.73753357 143.04972839]
[156.36032104 139.70697021]
[170.89353943 143.41984558]
[182.12113953 153.36676025]
[187.55857849 167.34654236]
[186.00259399 182.26562500]
[177.79751587 194.82255554]
[164.75903320 202.23864746]
[149.77244568 202.87275696]
[136.15411377 196.58459473]
[126.91641998 184.76298523]
[127.22440338 199.75981140]
[127.53237915 214.75665283]
[127.84035492 229.75349426]
[128.14833069 244.75033569]
[128.45631409 259.74716187]
[128.76428223 274.74401855]
[129.07226562 289.74084473]
[129.38024902 304.73767090]
[131.96601868 323.94610596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 131]
[11 130]
[12 129]
[13 128]
[16 102]
[17 101]
[18 100]
[19 99]
[20 98]
[21 97]
[22 89]
[23 88]
[24 87]
[25 86]
[104 113]
[105 112]
[106 111]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
