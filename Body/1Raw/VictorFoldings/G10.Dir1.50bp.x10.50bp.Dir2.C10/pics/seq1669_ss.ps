%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGxxxxxxxxxxAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.23979187]
[92.50000000 236.23979187]
[92.50000000 221.23979187]
[92.50000000 206.23979187]
[92.50000000 191.23979187]
[92.50000000 176.23979187]
[92.50000000 161.23979187]
[92.50000000 146.23979187]
[92.50000000 131.23979187]
[92.50000000 116.23979950]
[86.46000671 111.79362488]
[81.73562622 126.03020477]
[66.73591614 125.93621063]
[62.19032669 111.64153290]
[74.38002014 102.90127563]
[68.34002686 98.45510101]
[54.01742554 102.91191864]
[41.88397598 116.72348022]
[24.93697357 112.27385712]
[10.71019363 117.02767944]
[-3.51658535 121.78149414]
[-17.74336433 126.53530884]
[-31.97014427 131.28912354]
[-46.19692230 136.04293823]
[-60.42370224 140.79675293]
[-64.12156677 155.77438354]
[-75.34561920 166.35853577]
[-90.51429749 169.17184448]
[-104.78733826 163.31658936]
[-113.61026001 150.66117859]
[-114.16770172 135.24389648]
[-106.28179169 121.98432922]
[-92.46888733 115.11357117]
[-77.13664246 116.82405853]
[-65.17751312 126.56996918]
[-50.95073700 121.81615448]
[-36.72395706 117.06233978]
[-22.49717903 112.30852509]
[-8.27040005 107.55471039]
[5.95637894 102.80089569]
[20.18315887 98.04708099]
[25.89279747 87.33692932]
[37.75812531 83.28317261]
[49.56061172 88.58931732]
[63.88320923 84.13249969]
[85.63900757 78.20957184]
[99.89065552 87.25488281]
[107.07316589 74.08630371]
[114.25567627 60.91772079]
[108.71626282 50.31169128]
[109.01216125 38.47018433]
[114.95252991 28.36148453]
[124.94628906 22.46296883]
[136.42649841 22.15427399]
[144.15058899 9.29587173]
[151.87466431 -3.56253099]
[159.59875488 -16.42093277]
[167.32284546 -29.27933502]
[153.25302124 -67.35441589]
[155.12063599 -82.23770142]
[153.07595825 -91.20826721]
[157.18504333 -97.40997314]
[159.36187744 -112.25117493]
[161.53871155 -127.09238434]
[163.71554565 -141.93359375]
[161.85794067 -150.94474792]
[166.09515381 -157.05963135]
[168.58027649 -171.85234070]
[154.84988403 -178.10842896]
[143.20715332 -187.70579529]
[134.44592285 -199.99006653]
[129.16354370 -214.12367249]
[127.72015381 -229.14295959]
[130.21418762 -244.02389526]
[136.47558594 -257.75186157]
[146.07745361 -269.39089966]
[158.36509705 -278.14736938]
[172.50073242 -283.42431641]
[187.52058411 -284.86190796]
[202.40055847 -282.36212158]
[216.12611389 -276.09539795]
[227.76141357 -266.48904419]
[236.51316833 -254.19802856]
[241.78463745 -240.06034851]
[243.21641541 -225.03994751]
[240.71089172 -210.16094971]
[234.43890381 -196.43780518]
[224.82804871 -184.80621338]
[212.53364563 -176.05921936]
[198.39393616 -170.79319763]
[183.37298584 -169.36721802]
[180.88786316 -154.57450867]
[178.55676270 -139.75674438]
[176.37991333 -124.91554260]
[174.20307922 -110.07434082]
[172.02624512 -95.23313141]
[170.00390625 -80.37008667]
[168.13629150 -65.48680878]
[179.01560974 -55.15914917]
[189.89395142 -44.83239746]
[204.66000366 -47.47126007]
[219.42605591 -50.11012650]
[223.03511047 -64.90521240]
[232.35499573 -76.94928741]
[245.77096558 -84.15564728]
[260.95861816 -85.27574158]
[275.28665161 -80.11550903]
[286.27258301 -69.56899261]
[292.01306152 -55.46343231]
[291.51351929 -40.24271393]
[284.86050415 -26.54390907]
[273.20669556 -16.74042320]
[258.57116699 -12.53076839]
[243.48960876 -14.64429283]
[230.57502747 -22.71481514]
[222.06492615 -35.34407043]
[207.29887390 -32.70520401]
[192.53280640 -30.06634140]
[180.18124390 -21.55525017]
[172.45715332 -8.69684887]
[164.73307800 4.16155386]
[157.00898743 17.01995659]
[149.28489685 29.87835884]
[154.80433655 47.28334045]
[145.75135803 63.50497055]
[127.42426300 68.10022736]
[120.24175262 81.26881409]
[113.05924225 94.43739319]
[123.75743866 83.92318726]
[137.87937927 78.86642456]
[152.81999207 80.19992828]
[165.82316589 87.67771149]
[174.49023438 99.92034149]
[177.22236633 114.66942596]
[173.51556396 129.20419312]
[164.05363464 140.84342957]
[150.58200073 147.44004822]
[135.58580017 147.77714539]
[121.83135223 141.79257202]
[111.85594940 130.59027100]
[107.50000000 116.23979950]
[107.50000000 131.23979187]
[107.50000000 146.23979187]
[107.50000000 161.23979187]
[107.50000000 176.23979187]
[107.50000000 191.23979187]
[107.50000000 206.23979187]
[107.50000000 221.23979187]
[107.50000000 236.23979187]
[107.50000000 251.23979187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 45]
[17 44]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[47 128]
[48 127]
[49 126]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 98]
[60 97]
[62 96]
[63 95]
[64 94]
[65 93]
[67 92]
[68 91]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
