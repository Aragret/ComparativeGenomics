%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCxxxxxxxxxxUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.12931061 462.22262573]
[102.12931061 447.22262573]
[102.12931061 432.22262573]
[102.12931061 417.22262573]
[102.12931061 402.22262573]
[102.12931061 387.22262573]
[102.12931061 372.22262573]
[102.12931061 357.22262573]
[102.12931061 342.22262573]
[102.12931061 327.22262573]
[86.25577545 323.82318115]
[71.50882721 317.02145386]
[58.60816956 307.14627075]
[48.18407440 294.67651367]
[40.74660492 280.21789551]
[36.66066360 264.47360229]
[36.12807083 248.20997620]
[39.17761993 232.21936035]
[45.66352463 217.28135681]
[55.27238083 204.12493896]
[67.53831482 193.39276123]
[81.86558533 185.60987854]
[97.55749512 181.15798950]
[96.62186432 166.18719482]
[95.68623352 151.21640015]
[81.83800507 148.08190918]
[69.37577057 141.27813721]
[59.25056458 131.32431030]
[52.23508072 118.98001099]
[48.86468506 105.18729401]
[49.39658737 90.99871826]
[35.16980743 86.24490356]
[20.94302940 81.49108887]
[6.71625042 76.73727417]
[-7.51052904 71.98345947]
[-21.73730850 67.22964478]
[-35.96408844 62.47583008]
[-45.37613297 74.35813141]
[-58.28618240 82.30209351]
[-73.13527679 85.34844208]
[-88.13031769 83.12931061]
[-101.46057892 75.91266632]
[-111.51637268 64.56996918]
[-117.08341217 50.47089386]
[-117.48944092 35.31797791]
[-112.68544006 20.94100380]
[-103.25151062 9.07606411]
[-90.32685089 1.15590811]
[-75.47216797 -1.86306667]
[-60.48123932 0.38369527]
[-47.16429520 7.62488651]
[-37.12942123 18.98609734]
[-31.58837891 33.09540939]
[-31.21027184 48.24905014]
[-16.98349380 53.00286484]
[-2.75671411 57.75667953]
[11.47006512 62.51049423]
[25.69684410 67.26431274]
[39.92362213 72.01812744]
[54.15040207 76.77194214]
[57.91199493 70.49867249]
[62.52600098 64.82290649]
[67.89897156 59.85958862]
[73.92209625 55.70923996]
[80.47337341 52.45592117]
[87.42013550 50.16551971]
[94.62167358 48.88442612]
[95.24565125 33.89740753]
[95.86962891 18.91039276]
[82.06524658 12.54584122]
[71.75094604 1.37966156]
[66.49957275 -12.88538456]
[67.11193085 -28.07398033]
[73.49463654 -41.86997604]
[84.67436981 -52.16958237]
[98.94631195 -57.40218735]
[114.13409424 -56.76985168]
[127.92167664 -50.36900330]
[138.20657349 -39.17572403]
[143.42039490 -24.89691353]
[142.76808167 -9.70998096]
[136.34910583 4.06917524]
[125.14230347 14.33933353]
[110.85664368 19.53437042]
[110.23266602 34.52138519]
[109.60868835 49.50840378]
[117.32568359 51.61044312]
[124.62312317 54.88425446]
[131.32431030 59.25056458]
[137.26695251 64.60363770]
[142.30717468 70.81384277]
[146.32290649 77.73081207]
[160.64550781 73.27399445]
[174.96809387 68.81717682]
[189.29069519 64.36035919]
[203.61329651 59.90354538]
[190.12413025 53.34286499]
[182.92622375 40.18269730]
[184.67904663 25.28546143]
[194.73495483 14.15539074]
[209.37852478 10.90482426]
[223.19921875 16.73478317]
[231.09057617 29.49121094]
[230.13688660 44.46086502]
[220.69128418 56.11227036]
[235.55432129 54.08993530]
[250.41737366 52.06760406]
[261.23394775 40.21934128]
[277.23104858 41.43253326]
[286.13711548 54.77651978]
[281.12011719 70.01493835]
[266.02871704 75.45817566]
[252.43971252 66.93064880]
[237.57666016 68.95298004]
[222.71360779 70.97531891]
[208.07011414 74.22614288]
[193.74751282 78.68296051]
[179.42491150 83.13977814]
[165.10232544 87.59658813]
[150.77972412 92.05340576]
[148.27299500 117.64786530]
[133.68106079 138.82415771]
[110.65702820 150.28077698]
[111.59265137 165.25157166]
[112.52828217 180.22235107]
[126.23960114 182.08058167]
[139.35993958 186.46081543]
[151.42985535 193.20791626]
[162.02700806 202.08389282]
[170.78097534 212.77629089]
[177.38612366 224.90922546]
[181.61236572 238.05653381]
[183.31312561 251.75677490]
[182.43041992 265.52947998]
[178.99685669 278.89184570]
[173.13442993 291.37591553]
[165.05017090 302.54467773]
[155.02883911 312.00756836]
[143.42291260 319.43408203]
[130.64013672 324.56518555]
[117.12931061 327.22262573]
[117.12931061 342.22262573]
[117.12931061 357.22262573]
[117.12931061 372.22262573]
[117.12931061 387.22262573]
[117.12931061 402.22262573]
[117.12931061 417.22262573]
[117.12931061 432.22262573]
[117.12931061 447.22262573]
[117.12931061 462.22262573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 125]
[24 124]
[25 123]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[67 86]
[68 85]
[69 84]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
