%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUxxxxxxxxxxCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.27053070 360.03588867]
[97.27053070 345.03588867]
[97.27053070 330.03588867]
[97.27053070 315.03588867]
[97.27053070 300.03588867]
[97.27053070 285.03588867]
[97.27053070 270.03588867]
[97.27053070 255.03590393]
[97.27053070 240.03590393]
[97.27053070 225.03590393]
[81.12406921 219.64663696]
[67.75274658 209.07334900]
[58.76012802 194.56283569]
[55.23188400 177.83531189]
[57.60470200 160.88049316]
[65.61235046 145.72091675]
[78.31539154 134.17066956]
[94.21142578 127.61833954]
[93.27580261 112.64755249]
[85.70394897 100.89346313]
[91.75341034 88.28807831]
[90.81777954 73.31728363]
[89.88214874 58.34649658]
[87.55104828 43.52873611]
[83.84488678 28.99380112]
[80.13872528 14.45886421]
[76.43256378 -0.07607175]
[72.72640228 -14.61100769]
[58.15390015 -14.33777142]
[43.89620972 -17.32627869]
[30.67370224 -23.42209435]
[19.15368843 -32.31387329]
[9.91672611 -43.54925537]
[3.42736506 -56.55788803]
[0.01078737 -70.68036652]
[-0.16348788 -85.20167542]
[2.90998793 -99.38735962]
[9.07248783 -112.52071381]
[18.00930214 -123.93896484]
[29.26581001 -133.06671143]
[42.27060318 -139.44494629]
[38.86762619 -154.05383301]
[35.46464920 -168.66271973]
[32.06166840 -183.27162170]
[17.13518715 -181.61738586]
[2.11782241 -181.74020386]
[-12.77960682 -183.63835144]
[-27.34796143 -187.28518677]
[-41.38272858 -192.62950134]
[-54.68687820 -199.59628296]
[-67.07363892 -208.08770752]
[-78.36912537 -217.98460388]
[-88.41476440 -229.14799500]
[-97.06952667 -241.42120361]
[-104.21192169 -254.63189697]
[-109.74167633 -268.59463501]
[-113.58115387 -283.11340332]
[-115.67646790 -297.98440552]
[-115.99819946 -312.99880981]
[-114.54182434 -327.94589233]
[-111.32779694 -342.61581421]
[-106.40123749 -356.80261230]
[-99.83129883 -370.30712891]
[-91.71021271 -382.93981934]
[-82.15199280 -394.52328491]
[-71.29082489 -404.89492798]
[-59.27917099 -413.90917969]
[-46.28566742 -421.43948364]
[-32.49271393 -427.38006592]
[-18.09394836 -431.64761353]
[-3.29150343 -434.18215942]
[11.70681667 -434.94818115]
[26.69045830 -433.93484497]
[41.44907761 -431.15643311]
[55.77548218 -426.65194702]
[69.46855164 -420.48458862]
[82.33606720 -412.74099731]
[94.19737244 -403.52981567]
[104.88596344 -392.98037720]
[114.25178528 -381.24081421]
[122.16336060 -368.47589111]
[128.50962830 -354.86480713]
[133.20147705 -340.59866333]
[136.17304993 -325.87771606]
[137.38264465 -310.90866089]
[136.81326294 -295.90158081]
[134.47291565 -281.06719971]
[130.39442444 -266.61373901]
[124.63508606 -252.74411011]
[117.27572632 -239.65304565]
[108.41967010 -227.52429199]
[98.19123077 -216.52813721]
[86.73401642 -206.81893921]
[74.20885468 -198.53300476]
[60.79158401 -191.78665161]
[46.67056274 -186.67459106]
[50.07353973 -172.06570435]
[53.47652054 -157.45681763]
[56.87949753 -142.84791565]
[72.34384918 -142.75683594]
[87.34921265 -138.98019409]
[101.02957153 -131.73164368]
[112.59436035 -121.42539215]
[121.37416840 -108.65244293]
[126.85944366 -94.14675140]
[128.73010254 -78.74304962]
[126.87417603 -63.32878876]
[121.39454651 -48.79303741]
[112.60319519 -35.97518921]
[101.00349426 -25.61648941]
[87.26133728 -18.31716919]
[90.96749878 -3.78223300]
[94.67366028 10.75270271]
[98.37982178 25.28763962]
[102.08598328 39.82257462]
[108.74016571 26.37929344]
[121.52915955 18.54081345]
[136.52816772 18.71266556]
[149.13420105 26.84210968]
[155.47863770 40.43432236]
[153.61442566 55.31803131]
[144.11367798 66.92560577]
[129.89205933 71.69483948]
[115.31400299 68.16211700]
[104.85294342 57.41086578]
[105.78857422 72.38166046]
[106.72419739 87.35244751]
[114.29605103 99.10653687]
[108.24658966 111.71192169]
[109.18222046 126.68271637]
[121.95107269 129.59652710]
[133.50732422 135.73100281]
[143.05560303 144.65592957]
[149.94082642 155.74932861]
[153.69314575 168.24075317]
[154.05998230 181.26486206]
[151.02307129 193.92134094]
[144.79916382 205.33706665]
[135.82461548 214.72648621]
[124.72480774 221.44554138]
[112.27053070 225.03590393]
[112.27053070 240.03590393]
[112.27053070 255.03590393]
[112.27053070 270.03588867]
[112.27053070 285.03588867]
[112.27053070 300.03588867]
[112.27053070 315.03588867]
[112.27053070 330.03588867]
[112.27053070 345.03588867]
[112.27053070 360.03588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[21 127]
[22 126]
[23 125]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[41 99]
[42 98]
[43 97]
[44 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
