%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGxxxxxxxxxxCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.51971436 265.45339966]
[71.51971436 250.45339966]
[71.51971436 235.45339966]
[71.51971436 220.45339966]
[71.51971436 205.45339966]
[71.51971436 190.45339966]
[71.51971436 175.45339966]
[71.51971436 160.45339966]
[71.51971436 145.45339966]
[71.51971436 130.45339966]
[65.59975433 116.67101288]
[54.72092819 106.34380341]
[43.84210205 96.01660156]
[15.80685997 98.91625214]
[6.57776356 76.86545563]
[-6.36029243 69.27555084]
[-16.58543587 80.82350159]
[-28.85408401 90.16405487]
[-42.69839096 96.94329071]
[-57.59085846 100.90490723]
[-72.96443939 101.89992523]
[-88.23414612 99.89228058]
[-102.81925964 94.96013641]
[-116.16548157 87.29284668]
[-127.76595306 77.18367004]
[-137.18051147 65.01856232]
[-144.05239868 51.26144791]
[-148.12181091 36.43651581]
[-149.23562622 21.10825539]
[-147.35330200 5.85995817]
[-142.54820251 -8.72847652]
[-155.64135742 -16.04758263]
[-168.73451233 -23.36668777]
[-181.82766724 -30.68579292]
[-198.53569031 -25.60842514]
[-213.46862793 -33.99241638]
[-217.66426086 -50.24832535]
[-230.90684509 -57.29345703]
[-235.38504028 -56.96595383]
[-239.31895447 -58.01256561]
[-242.33518982 -60.08240509]
[-244.21743774 -62.73779297]
[-244.92131042 -65.51482391]
[-257.53244019 -73.63636780]
[-270.14355469 -81.75791168]
[-282.75469971 -89.87944794]
[-296.37597656 -82.78325653]
[-311.71975708 -83.46444702]
[-324.65863037 -91.73979187]
[-331.71209717 -105.38326263]
[-330.98281860 -120.72483063]
[-322.66696167 -133.63769531]
[-309.00143433 -140.64836121]
[-293.66223145 -139.87098694]
[-280.77551270 -131.51469421]
[-273.80770874 -117.82727051]
[-274.63314819 -102.49057770]
[-262.02203369 -94.36903381]
[-249.41090393 -86.24749756]
[-236.79977417 -78.12595367]
[-223.86170959 -70.53604126]
[-210.61912537 -63.49090958]
[-198.90620422 -68.95023346]
[-185.99859619 -66.61184692]
[-176.67198181 -57.11226273]
[-174.50856018 -43.77894974]
[-161.41540527 -36.45984268]
[-148.32225037 -29.14073753]
[-135.22909546 -21.82163048]
[-125.85894775 -33.02589417]
[-114.57752991 -42.30950546]
[-101.77200317 -49.35189438]
[-87.88220978 -53.90943146]
[-73.38554382 -55.82386017]
[-58.78056335 -55.02780914]
[-44.56982803 -51.54713821]
[-31.24262047 -45.50011826]
[-19.25808525 -37.09340668]
[-9.02942562 -26.61497879]
[-0.90964711 -14.42428017]
[4.82062149 -0.93988222]
[7.96282816 13.37488651]
[8.40737438 28.02785873]
[6.13744068 42.51494598]
[1.22961605 56.33749390]
[14.16767216 63.92740250]
[26.28194427 56.92366409]
[42.34956360 60.16803360]
[52.33229065 48.97226715]
[62.31501770 37.77650070]
[62.83683395 21.74193764]
[75.78411865 12.26842308]
[91.22481537 16.62322998]
[97.31414795 31.46572113]
[89.38090515 45.41000748]
[73.51078033 47.75922775]
[63.52805710 58.95499420]
[53.54533005 70.15075684]
[54.16930771 85.13777924]
[65.04813385 95.46498108]
[75.92695618 105.79218292]
[71.84408569 83.42398834]
[89.15476990 60.89007187]
[123.15361786 57.38512421]
[138.05551147 55.67243195]
[152.95741272 53.95974350]
[167.85932922 52.24705505]
[182.76123047 50.53436279]
[195.60475159 40.33750916]
[210.75576782 46.61274338]
[212.62821960 62.90464401]
[199.29586792 72.45349884]
[184.47390747 65.43626404]
[169.57200623 67.14895630]
[154.67010498 68.86164856]
[139.76820374 70.57433319]
[124.86630249 72.28702545]
[123.47014618 79.65592957]
[120.67781830 94.39373016]
[119.28165436 101.76263428]
[132.52424622 108.80776978]
[145.76683044 115.85290527]
[161.46829224 112.55992126]
[173.74023438 122.89331055]
[173.16868591 138.92617798]
[160.19207764 148.35948181]
[144.76495361 143.95680237]
[138.72169495 129.09548950]
[125.47910309 122.05035400]
[112.23651886 115.00521851]
[105.80731964 118.86726379]
[114.05116272 131.39878845]
[122.29500580 143.93031311]
[134.93373108 152.00883484]
[134.72520447 167.00738525]
[121.86678314 174.73143005]
[108.52757263 167.87100220]
[107.33168030 152.91882324]
[100.14029694 139.75508118]
[92.94892120 126.59134674]
[86.51971436 130.45339966]
[86.51971436 145.45339966]
[86.51971436 160.45339966]
[86.51971436 175.45339966]
[86.51971436 190.45339966]
[86.51971436 205.45339966]
[86.51971436 220.45339966]
[86.51971436 235.45339966]
[86.51971436 250.45339966]
[86.51971436 265.45339966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 101]
[12 100]
[13 99]
[15 86]
[16 85]
[31 69]
[32 68]
[33 67]
[34 66]
[37 62]
[38 61]
[43 60]
[44 59]
[45 58]
[46 57]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
