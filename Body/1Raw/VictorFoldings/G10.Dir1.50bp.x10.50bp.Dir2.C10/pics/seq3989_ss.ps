%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.09056091 234.43304443]
[97.46658325 219.44602966]
[96.84260559 204.45901489]
[96.21862793 189.47200012]
[95.59465027 174.48498535]
[94.97067261 159.49797058]
[94.34669495 144.51094055]
[93.72271729 129.52392578]
[79.82015991 123.89197540]
[68.94133759 134.21917725]
[58.06251144 144.54638672]
[47.18368530 154.87359619]
[36.30485916 165.20079041]
[25.42603493 175.52799988]
[29.09205437 190.44294739]
[24.79403496 205.18821716]
[13.68812180 215.79736328]
[-1.23825097 219.41662598]
[-15.96996307 215.07240295]
[-26.54425812 203.93328857]
[-30.11670494 188.99565125]
[-25.72633171 174.27761841]
[-14.55412674 163.73829651]
[0.39464158 160.21269226]
[15.09883022 164.64916992]
[25.97765541 154.32197571]
[36.85647964 143.99476624]
[47.73530579 133.66755676]
[58.61413193 123.34035492]
[69.49295807 113.01314545]
[67.04218292 105.92487335]
[52.31414032 103.08148956]
[62.14062881 91.74831390]
[59.68985367 84.66003418]
[44.75554657 83.25772858]
[29.82123947 81.85542297]
[14.88693237 80.45312500]
[1.66443014 89.53855133]
[-13.64034939 84.72780609]
[-19.28688812 69.71127319]
[-10.94364643 56.00835800]
[4.98915529 54.13076019]
[16.28923607 65.51881409]
[31.22354317 66.92111969]
[46.15785217 68.32342529]
[61.09215927 69.72572327]
[72.62934113 63.83732605]
[84.40216064 61.64278793]
[95.34584808 62.82851791]
[104.58082581 66.79843140]
[111.48172760 72.74963379]
[115.71977234 79.76337433]
[119.42592621 65.22843170]
[123.13208771 50.69350052]
[126.83824921 36.15856171]
[119.03221893 22.67881393]
[122.99784851 7.99111748]
[135.89683533 0.63233030]
[139.60299683 -13.90260601]
[143.30915833 -28.43754196]
[147.01531982 -42.97247696]
[150.72148132 -57.50741577]
[140.98390198 -69.44414520]
[140.15191650 -84.64813232]
[148.33532715 -97.27729797]
[162.21992493 -102.60233307]
[165.92608643 -117.13726807]
[169.63223267 -131.67221069]
[156.22569275 -138.54331970]
[144.68457031 -148.22578430]
[135.58778381 -160.23396301]
[129.39161682 -173.96549988]
[126.40686035 -188.73164368]
[126.78323364 -203.79173279]
[130.50186157 -218.39033508]
[137.37622070 -231.79522705]
[147.06149292 -243.33399963]
[159.07186890 -252.42787170]
[172.80491638 -258.62072754]
[187.57177734 -261.60189819]
[202.63177490 -261.22186279]
[217.22947693 -257.49969482]
[230.63270569 -250.62208557]
[242.16912842 -240.93402100]
[251.26010132 -228.92144775]
[257.44961548 -215.18690491]
[260.42721558 -200.41932678]
[260.04351807 -185.35942078]
[256.31784058 -170.76261902]
[249.43696594 -157.36105347]
[239.74610901 -145.82698059]
[227.73133850 -136.73892212]
[213.99528503 -130.55273438]
[199.22697449 -127.57872009]
[184.16717529 -127.96604156]
[180.46101379 -113.43110657]
[176.75485229 -98.89617157]
[186.39440918 -87.57287598]
[187.53140259 -72.56716919]
[179.52081299 -59.61788940]
[165.25642395 -53.80125427]
[161.55026245 -39.26631546]
[157.84410095 -24.73138046]
[154.13793945 -10.19644451]
[150.43177795 4.33849144]
[158.23222351 16.97528267]
[154.68070984 31.76857185]
[141.37318420 39.86472321]
[137.66702271 54.39965820]
[133.96086121 68.93459320]
[130.25469971 83.46953583]
[137.43721008 96.63811493]
[151.66398621 101.39192963]
[165.89077759 106.14574432]
[180.11755371 110.89955902]
[191.11448669 100.25408936]
[205.80224609 95.94964600]
[220.80569458 98.97536469]
[232.67715454 108.63595581]
[238.68864441 122.71147919]
[237.45878601 137.96749878]
[229.27015686 150.89828491]
[216.00447083 158.53242493]
[200.71008301 159.11566162]
[186.90151978 152.51397705]
[177.75190735 140.24438477]
[175.36373901 125.12633514]
[161.13696289 120.37252045]
[146.91017151 115.61870575]
[132.68339539 110.86489105]
[126.68997955 115.37365723]
[136.89605713 126.36620331]
[147.10212708 137.35874939]
[159.82659912 145.30154419]
[160.47866821 160.28735352]
[148.49220276 169.30537415]
[134.27397156 164.52606201]
[130.16865540 150.09757996]
[122.43589783 137.24438477]
[114.70314789 124.39118958]
[108.70973206 128.89994812]
[109.33370972 143.88696289]
[109.95768738 158.87399292]
[110.58166504 173.86100769]
[111.20564270 188.84802246]
[111.82962036 203.83503723]
[112.45359802 218.82205200]
[113.07757568 233.80906677]
[119.77756500 249.38296509]
[106.66703796 260.13241577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[34 46]
[35 45]
[36 44]
[37 43]
[52 111]
[53 110]
[54 109]
[55 108]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[66 97]
[67 96]
[68 95]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
