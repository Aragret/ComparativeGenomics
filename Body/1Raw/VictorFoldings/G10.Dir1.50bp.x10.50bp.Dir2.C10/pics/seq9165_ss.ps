%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUxxxxxxxxxxUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.27256775 284.42379761]
[90.27256775 269.42379761]
[90.27256775 254.42379761]
[90.27256775 239.42379761]
[90.27256775 224.42379761]
[90.27256775 209.42379761]
[90.27256775 194.42379761]
[90.27256775 179.42379761]
[90.27256775 164.42379761]
[90.27256775 149.42379761]
[76.68161011 143.07666016]
[65.17980957 152.70518494]
[53.67800522 162.33370972]
[42.17620468 171.96223450]
[39.51168060 178.12728882]
[34.81723022 181.47294617]
[29.98978806 181.73997498]
[18.09740829 190.88171387]
[6.20502806 200.02345276]
[2.70741892 215.68058777]
[-11.77709103 222.57830811]
[-26.13722420 215.42526245]
[-29.35711670 199.70864868]
[-18.96674156 187.48492432]
[-2.93670607 188.13107300]
[8.95567322 178.98933411]
[20.84805298 169.84759521]
[32.54767609 160.46043396]
[44.04948044 150.83190918]
[55.55128479 141.20338440]
[67.05308533 131.57485962]
[60.54134750 101.74465179]
[73.97131348 79.13333130]
[95.25799561 73.19276428]
[96.81557465 58.27384949]
[98.37315369 43.35493851]
[87.68502808 37.84580994]
[79.55641937 28.73395920]
[75.16605377 17.14052963]
[75.22140503 4.55751467]
[79.84836578 -7.34410095]
[88.55695343 -16.93624115]
[100.28995514 -22.85621071]
[113.55026245 -24.19937706]
[111.99268341 -39.11828995]
[110.43509674 -54.03720093]
[99.85581207 -59.62751389]
[93.38051605 -69.54615784]
[92.53630829 -81.24064636]
[97.41870117 -91.76822662]
[106.69678497 -98.53636169]
[105.76115417 -113.50714874]
[104.82553101 -128.47795105]
[103.88990021 -143.44873047]
[92.32212830 -153.88063049]
[91.58653259 -169.07647705]
[101.60304260 -180.04028320]
[100.66741180 -195.01107788]
[99.73178101 -209.98187256]
[98.79615784 -224.95265198]
[97.86052704 -239.92344666]
[96.92489624 -254.89424133]
[95.98927307 -269.86502075]
[95.05364227 -284.83581543]
[86.47061920 -298.12649536]
[93.39898682 -311.31161499]
[92.46335602 -326.28240967]
[78.17710876 -331.55715942]
[67.27593231 -342.19125366]
[61.64852905 -356.34231567]
[62.26987839 -371.55853271]
[69.03232574 -385.20367432]
[80.76424408 -394.91357422]
[95.43299103 -399.00595093]
[110.49713898 -396.77175903]
[123.34671783 -388.59814453]
[131.75546265 -375.90118408]
[134.26651001 -360.88070679]
[130.44480896 -346.13912964]
[120.95249176 -334.23046875]
[107.43415070 -327.21804810]
[108.36978149 -312.24725342]
[116.88587952 -300.02737427]
[110.02443695 -285.77145386]
[110.96006012 -270.80065918]
[111.89569092 -255.82986450]
[112.83132172 -240.85908508]
[113.76694489 -225.88829041]
[114.70257568 -210.91749573]
[115.63820648 -195.94670105]
[116.57382965 -180.97590637]
[127.87747192 -171.34454346]
[129.03959656 -156.17535400]
[118.86069489 -144.38436890]
[119.79631805 -129.41357422]
[120.73194885 -114.44277954]
[121.66757965 -99.47199249]
[136.08818054 -88.27182007]
[137.83787537 -69.77760315]
[125.35401154 -55.59478378]
[126.91159058 -40.67586899]
[128.46917725 -25.75695801]
[140.45600891 -16.73942757]
[155.22206116 -19.37829208]
[169.98811340 -22.01715660]
[184.75416565 -24.65602112]
[195.06851196 -36.94398117]
[211.10224915 -36.39729309]
[220.55566406 -23.43533516]
[216.17692566 -8.00140858]
[201.32499695 -1.93510079]
[187.39303589 -9.88996506]
[172.62698364 -7.25110102]
[157.86093140 -4.61223650]
[143.09486389 -1.97337222]
[145.17646790 11.26228046]
[142.39100647 24.06083488]
[135.32768250 34.73314667]
[125.12493896 41.95125580]
[113.29206848 44.91251755]
[111.73448944 59.83143234]
[110.17691040 74.75034332]
[134.38337708 87.96512604]
[139.73127747 122.44764709]
[152.34240723 130.56918335]
[168.93272400 134.06166077]
[170.16940308 150.97044373]
[154.26377869 156.83959961]
[144.22085571 143.18031311]
[131.60972595 135.05877686]
[125.02543640 138.65002441]
[132.20794678 151.81860352]
[139.39045715 164.98719788]
[146.57296753 178.15577698]
[153.75524902 191.32447815]
[140.58644104 198.50654602]
[133.40438843 185.33828735]
[126.22187042 172.16970825]
[119.03936768 159.00111389]
[111.85685730 145.83253479]
[105.27256775 149.42379761]
[105.27256775 164.42379761]
[105.27256775 179.42379761]
[105.27256775 194.42379761]
[105.27256775 209.42379761]
[105.27256775 224.42379761]
[105.27256775 239.42379761]
[105.27256775 254.42379761]
[105.27256775 269.42379761]
[105.27256775 284.42379761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 31]
[12 30]
[13 29]
[14 28]
[17 27]
[18 26]
[19 25]
[34 122]
[35 121]
[36 120]
[44 102]
[45 101]
[46 100]
[51 97]
[52 96]
[53 95]
[54 94]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[66 82]
[67 81]
[103 115]
[104 114]
[105 113]
[106 112]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
