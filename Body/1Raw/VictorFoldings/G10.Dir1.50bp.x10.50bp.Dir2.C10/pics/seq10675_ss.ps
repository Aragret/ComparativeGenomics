%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAxxxxxxxxxxCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.16908264 560.80633545]
[84.16908264 545.80633545]
[84.16908264 530.80633545]
[84.16908264 515.80633545]
[84.16908264 500.80633545]
[84.16908264 485.80633545]
[84.16908264 470.80633545]
[84.16908264 455.80633545]
[84.16908264 440.80633545]
[84.16908264 425.80633545]
[70.44770813 422.79010010]
[57.65834427 416.96051025]
[46.37099075 408.57446289]
[37.08932495 398.00280762]
[30.22821045 385.71411133]
[26.09517097 372.25366211]
[24.87659645 358.21942139]
[26.62934303 344.23547363]
[31.27807999 330.92416382]
[38.61853790 318.87847900]
[48.32646561 308.63562012]
[59.97196198 300.65307617]
[73.03851318 295.28808594]
[86.94590759 292.78176880]
[87.56988525 277.79473877]
[72.73062897 273.27807617]
[59.54888916 265.08111572]
[48.91963577 253.75358582]
[41.56626892 240.05805969]
[37.99140549 224.91853333]
[38.44251251 209.35810852]
[42.89480209 194.42980957]
[51.05250168 181.14540100]
[62.36850739 170.40679932]
[76.08107758 162.94473267]
[91.26509094 159.26919556]
[91.57714081 144.27244568]
[91.88919830 129.27569580]
[92.20125580 114.27893829]
[83.73101807 99.83075714]
[92.50000000 85.56190491]
[92.34396362 70.56272125]
[92.03190613 55.56596375]
[91.71984863 40.56921005]
[91.40779114 25.57245827]
[91.09574127 10.57570362]
[83.07302094 -3.06051683]
[90.54386902 -15.94599915]
[90.23181152 -30.94275284]
[89.91975403 -45.93950653]
[77.59446716 -37.39039993]
[63.16605377 -41.49173737]
[57.18052292 -55.24576950]
[64.01280975 -68.59941101]
[78.66906738 -71.79223633]
[90.43646240 -62.49113464]
[91.68334198 -77.43921661]
[92.93021393 -92.38730621]
[94.17708588 -107.33539581]
[79.60354614 -111.03157806]
[65.83720398 -117.07621765]
[53.25361252 -125.30440521]
[42.19606400 -135.49166870]
[32.96621704 -147.36010742]
[25.81586647 -160.58593750]
[20.94008064 -174.80833435]
[18.47187424 -189.63929749]
[18.47858047 -204.67425537]
[20.96001816 -219.50302124]
[25.84849167 -233.72106934]
[33.01063919 -246.94050598]
[42.25107193 -258.80068970]
[53.31770706 -268.97808838]
[65.90863037 -277.19506836]
[79.68036652 -283.22741699]
[94.25719452 -286.91058350]
[109.24146271 -288.14410400]
[124.22438812 -286.89431763]
[138.79721069 -283.19534302]
[152.56239319 -277.14804077]
[165.14439392 -268.91744995]
[176.19998169 -258.72802734]
[185.42755127 -246.85781860]
[192.57534790 -233.63063049]
[197.44839478 -219.40728760]
[199.91374207 -204.57583618]
[199.90414429 -189.54089355]
[197.41984558 -174.71260071]
[192.52862549 -160.49549866]
[185.36393738 -147.27745056]
[176.12121582 -135.41902161]
[165.05262756 -125.24375916]
[152.46011353 -117.02922821]
[138.68722534 -110.99952698]
[124.10968018 -107.31916046]
[109.12517548 -106.08851624]
[107.87830353 -91.14043427]
[106.63142395 -76.19234467]
[105.38455200 -61.24425888]
[104.91651154 -46.25156403]
[105.22856903 -31.25480843]
[105.54061890 -16.25805473]
[113.54102325 -3.69450283]
[106.09249115 10.26364803]
[106.40454865 25.26040077]
[106.71660614 40.25715637]
[107.02866364 55.25391006]
[107.34071350 70.25066376]
[110.64566803 76.91571808]
[107.50000000 85.56190491]
[115.24423218 94.31477356]
[115.12266541 106.00113678]
[107.19801331 114.59099579]
[106.88595581 129.58775330]
[106.57389832 144.58450317]
[106.26184082 159.58125305]
[120.26985931 163.45712280]
[132.92837524 170.57984924]
[143.49832153 180.52835083]
[151.36380005 192.71669006]
[156.06800842 206.42860413]
[157.33976746 220.85961914]
[155.10913086 235.16421509]
[149.51124573 248.50537109]
[140.87811279 260.10354614]
[129.71899414 269.28225708]
[116.69026184 275.50744629]
[102.55690002 278.41873169]
[101.93292236 293.40573120]
[117.34181213 297.76535034]
[131.26875305 305.65277100]
[142.92013550 316.61401367]
[151.63307190 330.01995850]
[156.91316223 345.10263062]
[158.46255493 360.99911499]
[156.19670105 376.80093384]
[150.24894714 391.60592651]
[140.96278381 404.56982422]
[128.87191772 414.95440674]
[114.66964722 422.16946411]
[99.16908264 425.80633545]
[99.16908264 440.80633545]
[99.16908264 455.80633545]
[99.16908264 470.80633545]
[99.16908264 485.80633545]
[99.16908264 500.80633545]
[99.16908264 515.80633545]
[99.16908264 530.80633545]
[99.16908264 545.80633545]
[99.16908264 560.80633545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 129]
[25 128]
[36 116]
[37 115]
[38 114]
[39 113]
[41 110]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 100]
[56 99]
[57 98]
[58 97]
[59 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
