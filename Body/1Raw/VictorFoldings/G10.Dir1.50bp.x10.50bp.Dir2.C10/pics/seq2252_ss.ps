%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAxxxxxxxxxxUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.23746490 258.42349243]
[106.23746490 243.42350769]
[106.23746490 228.42350769]
[106.23746490 213.42350769]
[106.23746490 198.42350769]
[106.23746490 183.42350769]
[106.23746490 168.42350769]
[106.23746490 153.42350769]
[106.23746490 138.42350769]
[106.23746490 123.42350006]
[92.45507812 117.50354004]
[81.57625580 127.83074188]
[70.69743347 138.15794373]
[59.81860352 148.48515320]
[63.48462677 163.40010071]
[59.18660355 178.14537048]
[48.08069229 188.75451660]
[33.15431976 192.37377930]
[18.42260742 188.02955627]
[7.84831190 176.89044189]
[4.27586603 161.95280457]
[8.66623878 147.23477173]
[19.83844376 136.69544983]
[34.78721237 133.16984558]
[49.49140167 137.60632324]
[60.37022400 127.27912140]
[71.24905396 116.95191956]
[82.12787628 106.62471008]
[80.96232605 99.21583557]
[66.14452362 101.54669189]
[63.81391525 86.72885895]
[78.63121796 84.39807129]
[77.46566772 76.98919678]
[63.94147873 70.50102997]
[57.22642136 70.62564850]
[52.23841476 67.73582458]
[49.99822235 63.45131302]
[36.75563812 56.40617752]
[23.51305199 49.36104202]
[10.27046680 42.31590652]
[-2.97211885 35.27077103]
[-16.21470451 28.22563744]
[-29.45729065 21.18050194]
[-42.69987488 14.13536739]
[-55.94246292 7.09023237]
[-69.18504333 0.04509761]
[-84.22470856 4.90144825]
[-98.25505066 -2.37351084]
[-102.95211792 -17.46367645]
[-95.52922821 -31.41631889]
[-80.39025116 -35.95358658]
[-66.51686859 -28.38359451]
[-62.13991165 -13.19748783]
[-48.89732742 -6.15235329]
[-35.65473938 0.89278179]
[-22.41215515 7.93791676]
[-9.16956902 14.98305130]
[4.07301617 22.02818680]
[17.31560135 29.07332230]
[30.55818748 36.11845779]
[43.80077362 43.16358948]
[57.04335785 50.20872498]
[70.42964172 56.97684097]
[83.95383453 63.46500778]
[98.85573578 61.75231552]
[110.55535889 52.36515427]
[122.25498199 42.97799301]
[133.95460510 33.59083176]
[125.85582733 20.94797134]
[119.14681244 7.51587629]
[113.90357208 -6.55325699]
[110.18551636 -21.10001373]
[108.03477478 -35.95957184]
[107.47571564 -50.96355438]
[108.51467896 -65.94196320]
[111.13988495 -80.72507477]
[115.32159424 -95.14538574]
[121.01242828 -109.03950500]
[128.14788818 -122.25000000]
[136.64714050 -134.62718201]
[146.41387939 -146.03082275]
[157.33744812 -156.33169556]
[169.29405212 -165.41308594]
[182.14822388 -173.17210388]
[195.75431824 -179.52082825]
[209.95817566 -184.38731384]
[224.59883118 -187.71643066]
[239.51042175 -189.47044373]
[254.52398682 -189.62950134]
[269.46939087 -188.19178772]
[284.17727661 -185.17358398]
[298.48104858 -180.60911560]
[312.21859741 -174.55007935]
[325.23428345 -167.06512451]
[337.38058472 -158.23908997]
[348.51992798 -148.17195129]
[358.52606201 -136.97778320]
[367.28564453 -124.78343964]
[374.69937134 -111.72708130]
[380.68328857 -97.95664215]
[385.16955566 -83.62815857]
[388.10736084 -68.90398407]
[389.46343994 -53.95095062]
[389.22238159 -38.93848801]
[387.38693237 -24.03670311]
[383.97787476 -9.41444111]
[379.03387451 4.76261663]
[372.61093140 18.33383179]
[364.78182983 31.14543343]
[355.63525391 43.05225372]
[345.27487183 53.91938400]
[333.81805420 63.62368393]
[321.39462280 72.05520630]
[308.14535522 79.11840820]
[294.22036743 84.73325348]
[279.77740479 88.83613586]
[264.98019409 91.38055420]
[249.99632263 92.33768463]
[234.99562073 91.69667816]
[220.14804077 89.46480560]
[205.62181091 85.66734314]
[191.58152771 80.34733582]
[178.18627930 73.56504059]
[165.58784485 65.39733124]
[153.92897034 55.93673325]
[143.34176636 45.29045486]
[131.64215088 54.67761612]
[119.94252014 64.06478119]
[108.24289703 73.45194244]
[123.01072693 70.82302856]
[137.11087036 65.70578766]
[152.08384705 66.60558319]
[165.46969604 73.37458038]
[175.06915283 84.90065765]
[179.30506897 99.29013062]
[177.48150635 114.17887115]
[169.89807129 127.12071991]
[157.80068970 135.98939514]
[143.17691040 139.32778931]
[128.42884827 136.58723450]
[121.23746490 123.42350006]
[121.23746490 138.42350769]
[121.23746490 153.42350769]
[121.23746490 168.42350769]
[121.23746490 183.42350769]
[121.23746490 198.42350769]
[121.23746490 213.42350769]
[121.23746490 228.42350769]
[121.23746490 243.42350769]
[121.23746490 258.42349243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[33 64]
[34 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[65 129]
[66 128]
[67 127]
[68 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
