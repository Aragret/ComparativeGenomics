%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCxxxxxxxxxxAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[171.42257690 517.52459717]
[171.11051941 502.52786255]
[170.79846191 487.53112793]
[170.48640442 472.53436279]
[170.17434692 457.53759766]
[169.86228943 442.54086304]
[169.55023193 427.54409790]
[169.23817444 412.54736328]
[168.92611694 397.55059814]
[167.05850220 382.66732788]
[163.65553284 368.05841064]
[160.25254822 353.44952393]
[156.84957886 338.84063721]
[153.99943542 336.66250610]
[152.09175110 332.96624756]
[151.84179688 328.22390747]
[153.72027588 323.21481323]
[151.23515320 308.42211914]
[148.75004578 293.62939453]
[139.05732727 286.32470703]
[136.89677429 273.97354126]
[143.97264099 263.13906860]
[141.79580688 248.29786682]
[139.61897278 233.45666504]
[135.91281128 218.92172241]
[130.71739197 204.85020447]
[125.52197266 190.77868652]
[120.32656097 176.70716858]
[106.73317719 170.72756958]
[101.26383209 156.53106689]
[107.62794495 142.31361389]
[102.43253326 128.24209595]
[79.03988647 119.08419800]
[72.10900116 94.93785858]
[58.58481216 88.44969177]
[45.06062317 81.96152496]
[31.53643227 75.47335815]
[18.01224327 68.98519897]
[4.48805285 62.49703217]
[-9.03613663 56.00886536]
[-19.85438347 66.62683868]
[-33.65305328 72.90158844]
[-48.76589584 74.07540131]
[-63.36795807 70.00654602]
[-75.69596863 61.18634415]
[-84.26126099 48.67988205]
[-88.02954102 33.99737930]
[-86.54576111 18.91181564]
[-79.98909760 5.24484921]
[-69.15129852 -5.35316992]
[-55.34109116 -11.60247803]
[-40.22611237 -12.74844074]
[-25.63157272 -8.65267849]
[-13.31983757 0.19022642]
[-4.77760553 12.71245003]
[-1.03639400 27.40187263]
[-2.54797196 42.48467636]
[10.97621822 48.97283936]
[24.50040817 55.46100616]
[38.02459717 61.94916916]
[51.54878616 68.43733215]
[65.07297516 74.92549896]
[78.59716797 81.41366577]
[82.92832947 77.37056732]
[88.00534058 74.31613159]
[93.60638428 72.38379669]
[99.48675537 71.65798950]
[103.19291687 57.12305069]
[106.89907837 42.58811569]
[95.60173798 52.45574570]
[81.30133820 56.98327255]
[66.38350677 55.41540909]
[53.33686447 48.01370621]
[44.33789444 36.01293182]
[40.88782120 21.41509056]
[43.56219864 6.65542555]
[51.91487885 -5.80381870]
[64.55244446 -13.88416100]
[79.36666870 -16.23761749]
[93.88620758 -12.47158146]
[105.68887329 -3.21431041]
[112.80571747 9.98987484]
[114.04966736 24.93681145]
[121.50457764 11.92050171]
[128.95948792 -1.09580803]
[126.15803528 -16.89237213]
[136.86930847 -28.83591270]
[152.87654114 -27.76436806]
[161.90034485 -14.49973488]
[157.01843262 0.78249443]
[141.97579956 6.35910225]
[134.52088928 19.37541199]
[127.06597137 32.39171982]
[121.43401337 46.29427719]
[117.72785187 60.82921219]
[114.02169800 75.36415100]
[121.31903076 81.31759644]
[126.26315308 89.33322906]
[128.30831909 98.52626801]
[127.22879791 107.88197327]
[123.14373779 116.36766815]
[116.50405121 123.04667664]
[121.69946289 137.11819458]
[135.77574158 143.78874207]
[140.84417725 158.13328552]
[134.39808655 171.51174927]
[139.59349060 185.58326721]
[144.78890991 199.65478516]
[149.98432922 213.72630310]
[154.70018005 199.48689270]
[165.81193542 189.41075134]
[180.44337463 186.10606384]
[194.80718994 190.42822266]
[205.18533325 201.25845337]
[208.89146423 215.79339600]
[204.96627808 230.27072144]
[194.42576599 240.94300842]
[179.99833679 245.04777527]
[165.41845703 241.52252197]
[154.46017456 231.27981567]
[156.63700867 246.12103271]
[158.81384277 260.96221924]
[170.57199097 275.09469604]
[163.54273987 291.14428711]
[166.02786255 305.93698120]
[168.51298523 320.72970581]
[171.45846558 335.43765259]
[174.86145020 350.04653931]
[178.26441956 364.65545654]
[181.66740417 379.26434326]
[188.11946106 365.72290039]
[200.39932251 357.10864258]
[215.32836914 355.65139771]
[229.04226685 361.72833252]
[237.99121094 373.76644897]
[239.85879517 388.64971924]
[234.16160583 402.52569580]
[222.37434387 411.80255127]
[207.54809570 414.07907104]
[193.52059937 408.76593018]
[183.92286682 397.23852539]
[184.23492432 412.23529053]
[184.54698181 427.23205566]
[184.85903931 442.22879028]
[185.17109680 457.22555542]
[185.48315430 472.22232056]
[185.79521179 487.21905518]
[186.10726929 502.21582031]
[186.41932678 517.21258545]
[189.01033020 536.42028809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[17 126]
[18 125]
[19 124]
[22 122]
[23 121]
[24 120]
[25 109]
[26 108]
[27 107]
[28 106]
[31 103]
[32 102]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[67 96]
[68 95]
[69 94]
[83 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
