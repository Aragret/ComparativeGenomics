%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-11.58235836 242.04988098]
[-21.33000946 253.45089722]
[-31.07766151 264.85192871]
[-40.82531357 276.25292969]
[-50.57296753 287.65396118]
[-60.32061768 299.05499268]
[-69.21296692 311.13497925]
[-77.20288086 323.82989502]
[-85.19280243 336.52484131]
[-93.18271637 349.21975708]
[-89.43343353 364.57287598]
[-97.70987701 378.03677368]
[-113.10178375 381.62350464]
[-126.47740173 373.20520020]
[-129.90122986 357.77621460]
[-121.34194946 344.49035645]
[-105.87764740 341.22985840]
[-97.88773346 328.53491211]
[-89.89781189 315.83999634]
[-81.90789795 303.14505005]
[-96.61701202 306.08480835]
[-109.85764313 299.03601074]
[-115.63167572 285.19183350]
[-111.32340240 270.82388306]
[-98.88451385 262.44091797]
[-83.94995117 263.84051514]
[-73.28521729 274.38867188]
[-71.72164154 289.30734253]
[-61.97398758 277.90631104]
[-52.22633362 266.50527954]
[-42.47868347 255.10426331]
[-32.73102951 243.70324707]
[-22.98337936 232.30223083]
[-43.20483780 210.09616089]
[-59.46742249 184.84651184]
[-71.32156372 157.25129700]
[-78.43955994 128.07339478]
[-80.62462616 98.11939240]
[-77.81635284 68.21738434]
[-70.09239197 39.19399643]
[-57.66625214 11.85158348]
[-40.88146591 -13.05398560]
[-52.18046951 -22.91970825]
[-63.47947311 -32.78543091]
[-74.77848053 -42.65115356]
[-86.28028107 -52.27968216]
[-97.97990417 -61.66684341]
[-109.67952728 -71.05400848]
[-121.37915039 -80.44116974]
[-135.97363281 -75.44068909]
[-150.94927979 -79.14657593]
[-161.52742004 -90.37628937]
[-164.33261108 -105.54647064]
[-158.46971130 -119.81637573]
[-145.80957031 -128.63252258]
[-130.39199829 -129.18170166]
[-117.13665771 -121.28869629]
[-110.27330017 -107.47212219]
[-111.99198914 -92.14079285]
[-100.29236603 -82.75363159]
[-88.59274292 -73.36647034]
[-76.89311981 -63.97930527]
[-72.07228088 -63.61190414]
[-67.44844818 -60.16930771]
[-64.91275787 -53.95016098]
[-53.61375046 -44.08443832]
[-42.31474686 -34.21871185]
[-31.01574326 -24.35299110]
[-23.98335075 -31.36559677]
[-16.57617760 -37.98110580]
[-8.81661606 -44.17952347]
[-0.72812098 -49.94211197]
[7.66485834 -55.25144958]
[16.33695030 -60.09148788]
[25.26194191 -64.44760132]
[34.41285324 -68.30661774]
[43.76202393 -71.65686798]
[53.28118896 -74.48823547]
[62.94158173 -76.79215240]
[72.71398926 -78.56165314]
[82.56888580 -79.79139709]
[92.47647095 -80.47766113]
[102.40679169 -80.61837769]
[112.32984161 -80.21311188]
[122.21562195 -79.26309204]
[132.03425598 -77.77119446]
[141.75604248 -75.74192047]
[151.35160828 -73.18141937]
[160.79196167 -70.09741211]
[170.04853821 -66.49922943]
[179.09336853 -62.39775085]
[187.89912415 -57.80537415]
[196.43916321 -52.73597336]
[204.68769836 -47.20488358]
[212.61976624 -41.22881699]
[220.21141052 -34.82584000]
[227.43968201 -28.01530838]
[234.28271484 -20.81780815]
[240.71984863 -13.25509739]
[246.73159790 -5.35003614]
[252.29980469 2.87348032]
[257.40762329 11.39059353]
[262.03964233 20.17555809]
[266.18185425 29.20181656]
[269.82171631 38.44208527]
[272.94824219 47.86843491]
[275.55197144 57.45236969]
[277.62503052 67.16491699]
[279.16116333 76.97672272]
[280.15570068 86.85811615]
[280.60568237 96.77924347]
[280.50973511 106.71009827]
[279.86813354 116.62067413]
[278.68280029 126.48101044]
[276.95736694 136.26129150]
[274.69702148 145.93197632]
[271.90856934 155.46380615]
[268.60049438 164.82797241]
[264.78274536 173.99618530]
[260.46691895 182.94071960]
[255.66600037 191.63453674]
[250.39453125 200.05136108]
[244.66845703 208.16574097]
[238.50508118 215.95315552]
[231.92301941 223.39007568]
[224.94216919 230.45399475]
[217.58364868 237.12358093]
[209.86970520 243.37866211]
[201.82362366 249.20033264]
[193.46975708 254.57099915]
[184.83334351 259.47442627]
[175.94050598 263.89578247]
[166.81809998 267.82171631]
[157.49371338 271.24035645]
[147.99554443 274.14138794]
[138.35229492 276.51599121]
[128.59309387 278.35702515]
[118.74747467 279.65890503]
[108.84518433 280.41772461]
[98.91616058 280.63116455]
[88.99040222 280.29858398]
[79.09793091 279.42098999]
[69.26864624 278.00103760]
[59.53224945 276.04302979]
[49.91818237 273.55288696]
[40.45550537 270.53808594]
[31.17281914 267.00781250]
[22.09818649 262.97268677]
[13.25903606 258.44494629]
[4.68209028 253.43821716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 20]
[8 19]
[9 18]
[10 17]
[42 68]
[43 67]
[44 66]
[45 65]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
