%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGxxxxxxxxxxGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.66894531 275.46270752]
[96.66894531 260.46270752]
[96.66894531 245.46270752]
[96.66894531 230.46270752]
[96.66894531 215.46270752]
[96.66894531 200.46270752]
[96.66894531 185.46270752]
[96.66894531 170.46270752]
[96.66894531 155.46270752]
[96.66894531 140.46270752]
[91.34329224 136.15519714]
[87.23321533 131.24713135]
[84.38578033 126.00449371]
[73.72415161 136.55578613]
[63.06252670 147.10707092]
[52.40089798 157.65837097]
[50.87994003 173.62915039]
[37.36695480 182.27664185]
[22.22795486 176.96719360]
[17.07628059 161.77377319]
[25.86385727 148.35148621]
[41.84960938 146.99673462]
[52.51123428 136.44544983]
[63.17285919 125.89415741]
[73.83448792 115.34286499]
[68.19511414 107.72179413]
[64.92561340 98.10459900]
[50.35291290 101.65935516]
[35.78020859 105.21411896]
[21.20750618 108.76888275]
[7.25246239 118.39660645]
[-5.86214685 107.65214539]
[0.83192730 92.07569885]
[17.65274429 94.19617462]
[32.22544861 90.64141846]
[46.79814911 87.08665466]
[61.37085342 83.53189087]
[69.62314606 71.00592804]
[67.13802338 56.21322250]
[64.65290833 41.42051697]
[62.16778564 26.62780952]
[59.68266678 11.83510208]
[45.79018784 10.59513283]
[32.61526489 6.04729795]
[20.93279266 -1.53585243]
[11.42865753 -11.70339298]
[4.65947533 -23.85283661]
[1.01999581 -37.26583862]
[0.72008455 -51.15065384]
[3.77262616 -64.68890381]
[9.99304771 -77.08376312]
[19.01047325 -87.60691071]
[30.28982925 -95.64128876]
[43.16359711 -100.71730042]
[41.29598618 -115.60057831]
[39.42837143 -130.48385620]
[37.56075668 -145.36714172]
[35.69314575 -160.25042725]
[33.67081070 -175.11346436]
[31.49397469 -189.95466614]
[29.31713676 -204.79588318]
[14.34178543 -206.70413208]
[0.43705118 -212.58299255]
[-11.36524296 -221.99620056]
[-20.18928909 -234.24522400]
[-25.38028336 -248.42112732]
[-26.55301857 -263.47195435]
[-23.62047195 -278.28082275]
[-16.80025864 -291.74884033]
[-6.59848022 -302.87655640]
[6.22782087 -310.83825684]
[20.72684860 -315.04309082]
[35.82267761 -315.17907715]
[50.39509964 -311.23611450]
[63.36274338 -303.50674438]
[73.76332092 -292.56460571]
[80.82504272 -279.22164917]
[84.02388763 -264.46801758]
[83.12246704 -249.39849854]
[78.18768311 -235.13139343]
[69.58572388 -222.72538757]
[57.95491791 -213.10110474]
[44.15834045 -206.97271729]
[46.33517838 -192.13151550]
[48.51201630 -177.29029846]
[52.62110138 -171.08860779]
[50.57642365 -162.11802673]
[52.44403839 -147.23475647]
[54.31165314 -132.35147095]
[56.17926407 -117.46819305]
[58.04687881 -102.58491516]
[73.99501038 -100.23968506]
[88.66172791 -93.51817322]
[100.87110138 -82.95072174]
[109.64183807 -69.37637329]
[114.26614380 -53.87623978]
[114.36681366 -37.68742371]
[109.92802429 -22.10424995]
[101.29720306 -8.37481117]
[89.15784454 2.39901423]
[74.47537231 9.34998322]
[76.96049500 24.14269066]
[79.44561005 38.93539810]
[81.93073273 53.72810364]
[84.41584778 68.52081299]
[99.49851227 63.78310394]
[115.62332916 66.11293030]
[129.55116272 75.46318817]
[138.30474854 90.33695984]
[139.80049133 108.01543427]
[154.21270752 112.17332458]
[168.62492371 116.33120728]
[183.03713989 120.48909760]
[197.44935608 124.64698029]
[211.86157227 128.80487061]
[223.40493774 118.56990814]
[238.65275574 116.22310638]
[252.73951721 122.51332092]
[261.17019653 135.43336487]
[261.25454712 150.86048889]
[252.96571350 163.87197876]
[238.94859314 170.31588745]
[223.67602539 168.13601685]
[212.02140808 158.02792358]
[207.70368958 143.21708679]
[193.29147339 139.05920410]
[178.87925720 134.90130615]
[164.46704102 130.74342346]
[150.05482483 126.58554077]
[135.64260864 122.42765045]
[129.64920044 126.93641663]
[140.30371094 137.49488831]
[150.95822144 148.05335999]
[163.17393494 156.75831604]
[163.36799622 171.75706482]
[151.38156128 180.77513123]
[137.02395630 176.43244934]
[132.04512024 162.28141785]
[124.85374451 149.11767578]
[117.66236115 135.95394897]
[111.66894531 140.46270752]
[111.66894531 155.46270752]
[111.66894531 170.46270752]
[111.66894531 185.46270752]
[111.66894531 200.46270752]
[111.66894531 215.46270752]
[111.66894531 230.46270752]
[111.66894531 245.46270752]
[111.66894531 260.46270752]
[111.66894531 275.46270752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[16 22]
[27 37]
[28 36]
[29 35]
[30 34]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[59 85]
[60 84]
[61 83]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
