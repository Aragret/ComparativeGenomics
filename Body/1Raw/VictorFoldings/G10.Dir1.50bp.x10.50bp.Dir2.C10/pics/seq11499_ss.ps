%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.34217834 589.02600098]
[149.34217834 574.02600098]
[149.34217834 559.02600098]
[149.34217834 544.02600098]
[149.34217834 529.02600098]
[149.34217834 514.02600098]
[149.34217834 499.02600098]
[149.34217834 484.02600098]
[149.34217834 469.02600098]
[149.34217834 454.02600098]
[134.27168274 450.90734863]
[120.16755676 444.73538208]
[107.64131165 435.77511597]
[97.23655701 424.41253662]
[89.40543365 411.13796997]
[84.48895264 396.52487183]
[82.70215607 381.20510864]
[84.12471771 365.84155273]
[88.69736481 351.09954834]
[96.22439575 337.61791992]
[106.38199615 325.98144531]
[118.73220825 316.69540405]
[132.74179077 310.16360474]
[147.80528259 306.67098999]
[146.55839539 291.72290039]
[137.05599976 280.25320435]
[142.70867920 265.47628784]
[140.53182983 250.63507080]
[138.35499573 235.79386902]
[136.17816162 220.95265198]
[133.53930664 206.18659973]
[130.44097900 191.51007080]
[120.24165344 180.65544128]
[124.96160889 165.55470276]
[121.86328888 150.87817383]
[118.76496124 136.20164490]
[115.66664124 121.52512360]
[103.30885315 125.61289978]
[90.89769745 123.31484985]
[81.43392944 115.57147980]
[77.01973724 104.59174347]
[78.39697266 93.23516846]
[84.84890747 84.26957703]
[78.78589630 70.54952240]
[72.72288513 56.82947159]
[66.65987396 43.10941696]
[60.59685898 29.38936424]
[54.53384399 15.66930962]
[48.47083282 1.94925606]
[33.62521362 4.53639078]
[18.60091782 3.49580455]
[4.27098227 -1.10768378]
[-8.53294277 -9.00234604]
[-19.06886292 -19.72558212]
[-26.72743797 -32.65102005]
[-31.06722260 -47.02511597]
[-31.84010506 -62.01106262]
[-29.00549698 -76.73753357]
[-22.73243332 -90.34931183]
[-13.38950253 -102.05698395]
[-1.52318799 -111.18271637]
[-7.58620119 -124.90277100]
[-13.64921379 -138.62281799]
[-27.20165825 -147.85662842]
[-25.71150208 -164.18794250]
[-10.71168995 -170.81648254]
[2.36725688 -160.92340088]
[0.07083940 -144.68583679]
[6.13385248 -130.96578979]
[12.19686604 -117.24572754]
[26.93354034 -119.87609863]
[41.88050842 -118.90234375]
[56.16864014 -114.37673950]
[68.96607971 -106.55821228]
[79.52666473 -95.89753723]
[87.23344421 -83.01134491]
[91.63470459 -68.64646912]
[92.47045135 -53.63663864]
[89.68777466 -38.85411835]
[83.44415283 -25.15899658]
[74.09857941 -13.34914684]
[62.19088745 -4.11375713]
[68.25389862 9.60629654]
[74.31690979 23.32634926]
[80.37992859 37.04640198]
[86.44293976 50.76645660]
[92.50595093 64.48651123]
[98.56896210 78.20656586]
[113.97428894 80.20380402]
[125.61618805 92.74843597]
[137.11799622 83.11991119]
[148.61979675 73.49138641]
[160.12159729 63.86285782]
[161.26741028 48.10015869]
[173.27798462 37.82780075]
[189.02769470 39.14019012]
[199.17250061 51.25871277]
[197.69366455 66.99365997]
[185.46856689 77.00977325]
[169.75012207 75.36466217]
[158.24832153 84.99318695]
[146.74652100 94.62171173]
[135.24472046 104.25023651]
[130.34317017 118.42679596]
[133.44148254 133.10331726]
[136.53981018 147.77984619]
[139.63813782 162.45637512]
[150.05906677 174.36076355]
[145.11750793 188.41175842]
[148.21582031 203.08828735]
[151.79644775 207.06304932]
[153.29858398 211.56814575]
[152.87521362 215.70606995]
[151.01936340 218.77581787]
[153.19621277 233.61701965]
[155.37304688 248.45823669]
[157.54988098 263.29943848]
[167.20799255 275.83065796]
[161.39961243 289.54605103]
[171.52099609 278.47549438]
[186.49613953 277.61209106]
[197.82281494 287.44601440]
[199.07026672 302.39407349]
[189.53024292 313.96939087]
[174.61914062 315.60006714]
[162.80203247 306.35891724]
[177.20474243 308.98931885]
[190.80770874 314.39028931]
[203.08372498 322.35049438]
[213.55747986 332.55932617]
[221.82386780 344.61923218]
[227.56367493 358.06106567]
[230.55596924 372.36242676]
[230.68655396 386.96789551]
[227.95228577 401.31066895]
[222.46119690 414.83453369]
[214.42820740 427.01531982]
[204.16668701 437.38146973]
[192.07624817 445.53201294]
[178.62718201 451.15228271]
[164.34217834 454.02600098]
[164.34217834 469.02600098]
[164.34217834 484.02600098]
[164.34217834 499.02600098]
[164.34217834 514.02600098]
[164.34217834 529.02600098]
[164.34217834 544.02600098]
[164.34217834 559.02600098]
[164.34217834 574.02600098]
[164.34217834 589.02600098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 126]
[25 119]
[27 117]
[28 116]
[29 115]
[30 114]
[31 110]
[32 109]
[34 107]
[35 106]
[36 105]
[37 104]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[61 70]
[62 69]
[63 68]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
