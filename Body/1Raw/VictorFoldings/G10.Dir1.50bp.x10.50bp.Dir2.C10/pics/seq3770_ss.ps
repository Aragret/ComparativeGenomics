%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACxxxxxxxxxxACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 291.95916748]
[92.50000000 276.95916748]
[92.50000000 261.95916748]
[92.50000000 246.95916748]
[92.50000000 231.95916748]
[92.50000000 216.95916748]
[92.50000000 201.95916748]
[92.50000000 186.95916748]
[92.50000000 171.95916748]
[92.50000000 156.95916748]
[79.09974670 153.51426697]
[66.91170502 146.96554565]
[56.64278412 137.69282532]
[48.88856888 126.23393250]
[34.76376724 131.28268433]
[20.63896370 136.33145142]
[6.51416159 141.38020325]
[-7.55735779 146.57562256]
[-21.57407188 151.91712952]
[-34.96035767 158.68524170]
[-47.57148361 166.80679321]
[-52.35848999 182.11900330]
[-67.36624146 187.78883362]
[-81.08207703 179.46685791]
[-82.98438263 163.53698730]
[-71.61387634 152.21925354]
[-55.69302750 154.19566345]
[-43.08189774 146.07411194]
[-48.71385574 132.17155457]
[-63.42181778 135.11705017]
[-78.12977600 138.06253052]
[-92.47324371 147.10140991]
[-105.12954712 135.82070923]
[-97.79331207 120.53620148]
[-81.07526398 123.35456848]
[-66.36730194 120.40908051]
[-51.65933609 117.46360016]
[-33.33484268 124.43070984]
[-26.91558266 137.90042114]
[-12.89887047 132.55889893]
[-7.73509216 127.20343781]
[1.46540499 127.25540161]
[15.59020805 122.20664215]
[29.71501160 117.15789032]
[43.83981323 112.10913086]
[42.35682678 105.17216492]
[41.73382950 98.05369568]
[41.99296570 90.86071777]
[43.14303589 83.70290375]
[45.17915344 76.69095612]
[48.08264923 69.93488312]
[51.82114410 63.54227066]
[56.34889603 57.61658096]
[61.60731125 52.25548553]
[51.62458420 41.05971909]
[35.75446320 38.71049881]
[27.82121658 24.76621246]
[33.91055298 9.92372036]
[49.35125351 5.56891394]
[62.29853439 15.04242802]
[62.82035065 31.07699203]
[72.80307770 42.27275848]
[87.02985382 37.51894379]
[88.27673340 22.57085609]
[89.52360535 7.62276936]
[90.77047729 -7.32531738]
[92.01735687 -22.27340508]
[77.92266846 -27.70630455]
[65.93037415 -36.89116287]
[57.01264191 -49.08340454]
[51.89238739 -63.29465866]
[50.98469162 -78.37287903]
[54.36313248 -93.09574890]
[61.75383759 -106.26973724]
[72.55767822 -116.82690430]
[85.89882660 -123.91142273]
[100.69578552 -126.94898224]
[115.74902344 -125.69333649]
[129.83824158 -120.24627686]
[141.82130432 -111.04937744]
[150.72679138 -98.84818268]
[155.83276367 -84.63179016]
[156.72531128 -69.55266571]
[153.33207703 -54.83320236]
[145.92814636 -41.66663742]
[135.11370850 -31.12032890]
[121.76544189 -24.04921913]
[106.96543884 -21.02652931]
[105.71856689 -6.07844305]
[104.47169495 8.86964417]
[103.22481537 23.81773186]
[101.97794342 38.76581955]
[128.29220581 47.09561539]
[147.76161194 65.83612061]
[156.69741821 90.72636414]
[171.69010925 90.25832367]
[186.68281555 89.79028320]
[201.67550659 89.32224274]
[217.05807495 79.25463104]
[232.20011902 88.07043457]
[247.17982483 87.29058838]
[256.41390991 78.22496033]
[268.94885254 77.91811371]
[278.01464844 85.98772430]
[293.00735474 85.51968384]
[308.00006104 85.05163574]
[322.99273682 84.58359528]
[337.98544312 84.11555481]
[352.97814941 83.64751434]
[363.61529541 71.95877075]
[379.40579224 71.29865265]
[390.98141479 82.05878448]
[391.47454834 97.85537720]
[380.59262085 109.31658936]
[364.79171753 109.64269257]
[353.44616699 98.64020538]
[338.45349121 99.10825348]
[323.46078491 99.57629395]
[308.46807861 100.04433441]
[293.47540283 100.51237488]
[278.48269653 100.98041534]
[264.12585449 111.02439117]
[247.95967102 102.27030182]
[232.97996521 103.05014801]
[224.61631775 111.84542084]
[212.09925842 112.58160400]
[202.14355469 104.31493378]
[187.15084839 104.78297424]
[172.15815735 105.25102234]
[157.16546631 105.71906281]
[156.04667664 112.62409973]
[154.09700012 119.34197998]
[151.34533691 125.77312469]
[147.83248901 131.82217407]
[143.61051941 137.39947510]
[138.74203491 142.42231750]
[133.29919434 146.81625366]
[127.36269379 150.51614380]
[121.02053833 153.46713257]
[114.36676025 155.62547302]
[107.50000000 156.95916748]
[107.50000000 171.95916748]
[107.50000000 186.95916748]
[107.50000000 201.95916748]
[107.50000000 216.95916748]
[107.50000000 231.95916748]
[107.50000000 246.95916748]
[107.50000000 261.95916748]
[107.50000000 276.95916748]
[107.50000000 291.95916748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 45]
[15 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 28]
[21 27]
[29 37]
[30 36]
[31 35]
[54 62]
[55 61]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[95 130]
[96 129]
[97 128]
[98 127]
[100 124]
[101 123]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
