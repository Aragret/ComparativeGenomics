%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGxxxxxxxxxxCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.61714935 490.93630981]
[114.61714935 475.93630981]
[114.61714935 460.93630981]
[114.61714935 445.93630981]
[114.61714935 430.93630981]
[114.61714935 415.93630981]
[114.61714935 400.93630981]
[114.61714935 385.93630981]
[114.61714935 370.93630981]
[114.61714935 355.93630981]
[112.90445709 341.03439331]
[109.50148010 326.42550659]
[106.09850311 311.81661987]
[103.24835968 309.63848877]
[101.34067535 305.94223022]
[101.09072876 301.19989014]
[102.96920776 296.19079590]
[100.48408508 281.39810181]
[97.99897003 266.60537720]
[95.51384735 251.81268311]
[92.16015625 248.33010864]
[91.00010681 242.68338013]
[93.24643707 236.35397339]
[91.37882233 221.47068787]
[89.51121521 206.58740234]
[80.67977905 218.71200562]
[66.45858002 223.48246765]
[52.10204697 219.13619995]
[42.91464233 207.27906799]
[42.29093170 192.29203796]
[50.46136093 179.71252441]
[64.40711975 174.18840027]
[78.97552490 177.76074219]
[88.78350067 189.10879517]
[89.40747833 174.12178040]
[90.03145599 159.13476562]
[90.65543365 144.14775085]
[91.27941132 129.16073608]
[78.52022552 121.56424713]
[70.87371826 108.83497620]
[70.15991211 94.00279236]
[56.63572311 87.51462555]
[43.11153412 81.02645874]
[29.58734512 74.53829193]
[16.06315422 68.05013275]
[1.23852897 73.52790070]
[-13.08229637 66.84288025]
[-18.40303040 51.96117020]
[-11.56697369 37.71182632]
[3.37016010 32.54872894]
[17.54643631 39.53505325]
[22.55132103 54.52593994]
[36.07551193 61.01410675]
[49.59970093 67.50227356]
[63.12388992 73.99043274]
[76.64807892 80.47859955]
[84.50224304 73.80426025]
[94.13362122 70.13391876]
[104.43772125 69.88847351]
[110.21399689 56.04525757]
[115.99026489 42.20204163]
[121.76654053 28.35882378]
[108.79634857 20.77874184]
[96.95225525 11.53748417]
[86.44562531 0.79997379]
[77.46395874 -11.24216652]
[70.16754913 -24.37403107]
[64.68661499 -38.36126709]
[61.11895752 -52.95425415]
[59.52825165 -67.89256287]
[59.94288635 -82.90960693]
[62.35546112 -97.73738098]
[66.72292328 -112.11126709]
[72.96732330 -125.77475739]
[80.97723389 -138.48399353]
[90.60969543 -150.01219177]
[101.69281006 -160.15357971]
[114.02879333 -168.72720337]
[127.39749146 -175.58004761]
[141.56031799 -180.58981323]
[156.26452637 -183.66708374]
[171.24771118 -184.75695801]
[186.24246216 -183.83998108]
[200.98118591 -180.93252563]
[215.20086670 -176.08647156]
[228.64772034 -169.38829041]
[241.08177185 -160.95753479]
[252.28114319 -150.94465637]
[262.04592896 -139.52833557]
[270.20190430 -126.91233826]
[276.60351562 -113.32179260]
[281.13647461 -98.99923706]
[283.71994019 -84.20027161]
[284.30776978 -69.18901825]
[282.88946533 -54.23334885]
[279.49038696 -39.60018158]
[274.17114258 -25.55065536]
[267.02670288 -12.33549976]
[258.18453979 -0.19055739]
[247.80245972 10.66743183]
[236.06575012 20.04469490]
[223.18386841 27.77388382]
[209.38668823 33.71706009]
[194.92044067 37.76816177]
[180.04331970 39.85489655]
[165.02079773 39.94001770]
[150.12097168 38.02200699]
[135.60975647 34.13509750]
[129.83348083 47.97831345]
[124.05721283 61.82153320]
[118.28093719 75.66474915]
[128.54916382 89.44808960]
[129.71339417 106.59631348]
[121.40238953 121.64104462]
[106.26642609 129.78471375]
[105.64244843 144.77172852]
[105.01847076 159.75874329]
[104.39449310 174.74575806]
[103.77051544 189.73277283]
[104.39449310 204.71978760]
[106.26210785 219.60307312]
[108.12972260 234.48635864]
[110.30655670 249.32756042]
[112.79167175 264.12026978]
[115.27679443 278.91296387]
[117.76190948 293.70568848]
[120.70739746 308.41363525]
[124.11037445 323.02252197]
[127.51335144 337.63143921]
[133.57463074 323.91061401]
[145.23762512 314.47799683]
[159.92260742 311.41995239]
[174.38137817 315.41296387]
[185.41578674 325.57376099]
[190.58514404 339.65487671]
[188.74601746 354.54168701]
[180.30520630 366.94140625]
[167.12976074 374.11129761]
[152.13394165 374.46545410]
[138.63468933 367.92553711]
[129.61714172 355.93630981]
[129.61714172 370.93630981]
[129.61714172 385.93630981]
[129.61714172 400.93630981]
[129.61714172 415.93630981]
[129.61714172 430.93630981]
[129.61714172 445.93630981]
[129.61714172 460.93630981]
[129.61714172 475.93630981]
[129.61714172 490.93630981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[17 126]
[18 125]
[19 124]
[20 123]
[23 122]
[24 121]
[25 120]
[34 119]
[35 118]
[36 117]
[37 116]
[38 115]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[59 111]
[60 110]
[61 109]
[62 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
