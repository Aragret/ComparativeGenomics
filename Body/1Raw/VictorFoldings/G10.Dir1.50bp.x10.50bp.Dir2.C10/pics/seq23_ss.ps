%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAxxxxxxxxxxGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.22502136 405.73718262]
[94.22502136 390.73718262]
[94.22502136 375.73718262]
[94.22502136 360.73718262]
[94.22502136 345.73718262]
[94.22502136 330.73718262]
[94.22502136 315.73718262]
[94.22502136 300.73718262]
[94.22502136 285.73718262]
[94.22502136 270.73718262]
[79.49520874 268.00350952]
[65.51483917 262.60824585]
[52.76055527 254.73374939]
[41.66751099 244.64697266]
[32.61448288 232.69033813]
[25.91095543 219.27017212]
[21.78654289 204.84286499]
[20.38311958 189.89938354]
[21.74994278 174.94850159]
[25.84191895 160.49952698]
[32.52109909 147.04496765]
[41.56132507 135.04368591]
[52.65588379 124.90528107]
[65.42791748 116.97612762]
[79.44322968 111.52751923]
[94.22502136 108.74636841]
[90.87882996 108.24773407]
[87.50150299 106.55573273]
[84.49334717 103.64700317]
[70.08113098 99.48911285]
[55.66891098 95.33122253]
[40.76700974 93.61853790]
[25.78729439 94.39838409]
[10.80758095 95.17822266]
[-2.64696908 104.55410767]
[-17.37706947 97.34603882]
[-18.22965622 80.96907043]
[-4.32766008 72.27041626]
[10.02773571 80.19850922]
[25.00745010 79.41866302]
[39.98716354 78.63882446]
[42.77948761 63.90101624]
[29.12324715 57.69560623]
[15.46700668 51.49020004]
[1.81076527 45.28479385]
[-13.65471840 49.55075073]
[-26.54731560 40.00294876]
[-26.97693062 23.96565056]
[-14.61399841 13.74129391]
[1.05769730 17.17313194]
[8.01617241 31.62855339]
[21.67241287 37.83395767]
[35.32865524 44.03936768]
[48.98489761 50.24477386]
[56.89668655 57.38662338]
[61.21289062 65.80195618]
[62.00035858 74.06101990]
[59.82679749 80.91900635]
[74.23901367 85.07689667]
[88.65122986 89.23478699]
[103.01941681 84.92720032]
[112.76706696 73.52617645]
[122.51471710 62.12515640]
[125.60179901 46.60805130]
[139.75340271 41.96249390]
[149.50105286 30.56147385]
[152.58813477 15.04436874]
[166.73974609 10.39880943]
[176.48739624 -1.00221121]
[186.23504639 -12.40323257]
[177.61877441 -24.15875626]
[171.85026550 -37.53549957]
[169.21815491 -51.85561371]
[169.85226440 -66.39426422]
[173.71713257 -80.41631317]
[180.61408997 -93.21351624]
[190.19134521 -104.14025879]
[201.96202087 -112.64614105]
[215.32882690 -118.30371857]
[229.61447144 -120.82997131]
[244.09587097 -120.10044098]
[258.04080200 -116.15538788]
[270.74493408 -109.19757080]
[280.72766113 -120.39333344]
[284.13397217 -128.94020081]
[291.03643799 -131.71540833]
[301.24990845 -142.70106506]
[311.34854126 -153.79238892]
[321.33126831 -164.98814392]
[318.90090942 -180.43571472]
[327.01287842 -193.80470276]
[341.83697510 -198.78269958]
[356.37368774 -193.01922607]
[363.75924683 -179.23564148]
[360.50643921 -163.94010925]
[348.15109253 -154.35473633]
[332.52703857 -155.00541687]
[322.54431152 -143.80966187]
[320.42657471 -136.67797852]
[312.23556519 -132.48759460]
[302.02209473 -121.50192261]
[291.92343140 -110.41060638]
[281.94070435 -99.21484375]
[290.77282715 -86.52041626]
[296.32763672 -72.07853699]
[298.28109741 -56.72023010]
[296.51647949 -41.33031845]
[291.13134766 -26.79643822]
[282.43225098 -13.95785141]
[270.91726685 -3.55697942]
[257.24734497 3.80352831]
[242.20854187 7.69571304]
[226.66676331 7.89118719]
[211.51786804 4.37453079]
[197.63606262 -2.65558004]
[187.88841248 8.74544048]
[178.14076233 20.14646149]
[175.75090027 34.84808731]
[160.90208435 40.30912399]
[151.15443420 51.71014786]
[148.76457214 66.41177368]
[133.91574097 71.87281036]
[124.16809082 83.27382660]
[114.42043304 94.67485046]
[109.22502136 108.74636841]
[124.00681305 111.52751923]
[138.02212524 116.97612762]
[150.79415894 124.90528107]
[161.88871765 135.04368591]
[170.92893982 147.04496765]
[177.60812378 160.49952698]
[181.70010376 174.94850159]
[183.06692505 189.89938354]
[181.66349792 204.84286499]
[177.53909302 219.27017212]
[170.83555603 232.69033813]
[161.78253174 244.64697266]
[150.68948364 254.73374939]
[137.93521118 262.60824585]
[123.95483398 268.00350952]
[109.22502136 270.73718262]
[109.22502136 285.73718262]
[109.22502136 300.73718262]
[109.22502136 315.73718262]
[109.22502136 330.73718262]
[109.22502136 345.73718262]
[109.22502136 360.73718262]
[109.22502136 375.73718262]
[109.22502136 390.73718262]
[109.22502136 405.73718262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[29 60]
[30 59]
[31 58]
[32 41]
[33 40]
[34 39]
[42 54]
[43 53]
[44 52]
[45 51]
[61 124]
[62 123]
[63 122]
[65 120]
[66 119]
[68 117]
[69 116]
[70 115]
[83 103]
[84 102]
[86 101]
[87 100]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
