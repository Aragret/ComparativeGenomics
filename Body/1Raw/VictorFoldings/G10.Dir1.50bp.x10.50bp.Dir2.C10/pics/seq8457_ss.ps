%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCxxxxxxxxxxAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 300.18850708]
[92.50000000 285.18850708]
[92.50000000 270.18850708]
[92.50000000 255.18849182]
[92.50000000 240.18849182]
[92.50000000 225.18849182]
[92.50000000 210.18849182]
[92.50000000 195.18849182]
[92.50000000 180.18849182]
[92.50000000 165.18849182]
[62.64112473 153.94537354]
[41.61450577 129.94868469]
[34.39118576 98.87162018]
[19.52117157 96.90116882]
[4.65115833 94.93071747]
[-10.21885586 92.96026611]
[-25.08886909 90.98981476]
[-31.39485168 105.36761475]
[-41.47736740 117.38320923]
[-54.51779175 126.07369232]
[-69.46089172 130.74562073]
[-85.10021210 131.03033447]
[-100.17549133 126.91301727]
[-113.47419739 118.73330688]
[-123.92907715 107.15718079]
[-130.70378113 93.12285614]
[-133.25979614 77.76464844]
[-148.16668701 76.09597015]
[-163.07357788 74.42729950]
[-168.27932739 88.57521820]
[-176.72021484 101.06581116]
[-187.90548706 111.17288971]
[-201.18486023 118.30884552]
[-215.78627014 122.05880737]
[-230.86082458 122.20475006]
[-245.53210449 118.73818970]
[-258.94714355 111.86067200]
[-270.32598877 101.97203827]
[-279.00711060 89.64720917]
[-284.48580933 75.60273743]
[-286.44354248 60.65513611]
[-284.76651001 45.67344666]
[-279.55218506 31.52868843]
[-271.10372925 19.04321480]
[-259.91232300 8.94291687]
[-246.62863159 1.81501055]
[-232.02494812 -1.92609560]
[-216.95030212 -2.06289864]
[-202.28112793 1.41255450]
[-188.87026978 8.29820633]
[-177.49740601 18.19373322]
[-168.82374573 30.52382278]
[-163.35357666 44.57161713]
[-161.40490723 59.52040100]
[-146.49800110 61.18907928]
[-131.59111023 62.85775757]
[-126.30653381 49.50317001]
[-117.72901154 37.96856689]
[-106.44161987 29.04862213]
[-93.21441650 23.35990906]
[-78.95185852 21.29829407]
[-64.63101959 23.01138306]
[-51.23460007 28.38797760]
[-39.68351746 37.06527328]
[-30.77360344 48.45332718]
[-25.12076378 61.77516556]
[-23.11841774 76.11980438]
[-8.24840450 78.09025574]
[6.62160969 80.06070709]
[21.49162483 82.03115845]
[36.36163712 84.00160980]
[38.83057022 76.24941254]
[42.23984528 68.86233521]
[46.53705978 61.95392609]
[51.65615082 55.63039780]
[57.51842117 49.98894882]
[64.03375244 45.11631775]
[71.10198975 41.08739853]
[78.61447144 37.96413422]
[86.45570374 35.79453659]
[94.50515747 34.61195755]
[102.63907623 34.43457413]
[110.73242188 35.26512146]
[118.66078949 37.09082413]
[126.30228424 39.88361740]
[133.84611511 26.91864395]
[141.38995361 13.95367336]
[148.93380737 0.98870176]
[148.44808960 -15.40325069]
[162.54135132 -23.78847694]
[176.71565247 -15.54097462]
[176.38967896 0.85493243]
[161.89877319 8.53254128]
[154.35493469 21.49751282]
[146.81109619 34.46248245]
[139.26725769 47.42745590]
[148.75732422 56.08516693]
[156.37879944 66.42589569]
[161.83958435 78.05333710]
[164.93038940 90.52188110]
[179.92344666 90.06591034]
[194.91651917 89.60993958]
[209.90959167 89.15397644]
[224.87185669 88.09078217]
[239.77876282 86.42210388]
[254.68565369 84.75342560]
[269.59255981 83.08474731]
[277.82946777 78.99887848]
[284.81805420 81.53646851]
[299.75570679 80.17024994]
[314.69335938 78.80403137]
[329.63101196 77.43781281]
[344.85360718 69.97396088]
[356.23977661 82.53544617]
[347.32122803 96.95403290]
[330.99722290 92.37546539]
[316.05957031 93.74168396]
[301.12191772 95.10790253]
[286.18426514 96.47412109]
[271.26123047 97.99164581]
[256.35433960 99.66032410]
[241.44743347 101.32899475]
[226.54054260 102.99767303]
[224.67654419 105.16578674]
[221.81632996 106.70343018]
[218.20413208 107.21781158]
[214.22508240 106.41501617]
[210.36555481 104.14704132]
[195.37248230 104.60301208]
[180.37942505 105.05897522]
[165.38635254 105.51494598]
[164.53292847 111.88657379]
[163.06013489 118.14411926]
[160.98210144 124.22752380]
[158.31878662 130.07838440]
[155.09571838 135.64057922]
[151.34387207 140.86068726]
[147.09924316 145.68862915]
[142.40255737 150.07806396]
[137.29890442 153.98686218]
[131.83724976 157.37751770]
[126.07004547 160.21745300]
[120.05262756 162.47944641]
[113.84274292 164.14178467]
[107.50000000 165.18849182]
[107.50000000 180.18849182]
[107.50000000 195.18849182]
[107.50000000 210.18849182]
[107.50000000 225.18849182]
[107.50000000 240.18849182]
[107.50000000 255.18849182]
[107.50000000 270.18850708]
[107.50000000 285.18850708]
[107.50000000 300.18850708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[27 56]
[28 55]
[29 54]
[85 96]
[86 95]
[87 94]
[88 93]
[100 131]
[101 130]
[102 129]
[103 128]
[104 123]
[105 122]
[106 121]
[107 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
