%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCxxxxxxxxxxGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.25086975 286.21337891]
[68.25086975 271.21337891]
[68.25086975 256.21337891]
[68.25086975 241.21337891]
[68.25086975 226.21337891]
[68.25086975 211.21337891]
[68.25086975 196.21337891]
[68.25086975 181.21337891]
[68.25086975 166.21337891]
[68.25086975 151.21337891]
[87.69525146 96.49388123]
[77.03363037 85.94258881]
[66.37200165 75.39129639]
[55.71037674 64.84001160]
[45.04874802 54.28871918]
[34.38712311 43.73743057]
[5.82632732 54.71521378]
[-25.43028450 42.32129669]
[-38.36833954 49.91120529]
[-51.30639648 57.50111389]
[-51.83081818 72.91956329]
[-60.62661362 85.59384918]
[-74.88707733 91.47965240]
[-90.06174469 88.69883728]
[-101.30844116 78.13875580]
[-105.03838348 63.16908264]
[-100.06135559 48.56658936]
[-87.96551514 38.99088287]
[-72.61059570 37.49753189]
[-58.89630508 44.56306076]
[-45.95824814 36.97315216]
[-33.02019501 29.38324165]
[-33.64363098 21.90919876]
[-48.59171677 23.15607262]
[-63.53980637 24.40294838]
[-77.37098694 30.20798683]
[-87.16595459 18.84759331]
[-79.38836670 6.02148008]
[-64.78668213 9.45486069]
[-49.83859253 8.20798683]
[-34.89050674 6.96111202]
[-35.51394272 -0.51293141]
[-49.53065491 -5.85444403]
[-63.54736710 -11.19595623]
[-79.64358521 -8.05845928]
[-90.20326233 -20.60537910]
[-84.36351013 -35.92952347]
[-68.13176727 -38.26672363]
[-58.20585632 -25.21266937]
[-44.18914413 -19.87115669]
[-30.17243004 -14.52964401]
[-21.55543137 -20.80876541]
[-12.29647255 -24.65654182]
[-3.01440525 -26.11100769]
[-5.80672979 -40.84881592]
[-8.59905434 -55.58662033]
[-11.54453659 -70.29457855]
[-14.64285851 -84.97110748]
[-17.74118042 -99.64763641]
[-20.83950233 -114.32415771]
[-35.90068817 -115.48061371]
[-50.02548599 -120.83474731]
[-62.06887054 -129.95251465]
[-71.05452728 -142.09477234]
[-76.25404358 -156.27722168]
[-77.24590302 -171.35014343]
[-73.94970703 -186.09162903]
[-66.63266754 -199.30668640]
[-55.88793564 -209.92401123]
[-42.58654404 -217.08288574]
[-27.80677605 -220.20300293]
[-12.74675941 -219.03141785]
[1.37265468 -213.66310120]
[13.40687084 -204.53324890]
[22.38032913 -192.38195801]
[27.56558990 -178.19430542]
[28.54230690 -163.12039185]
[25.23130608 -148.38221741]
[17.90099144 -135.17451477]
[7.14560032 -124.56800079]
[-6.16297674 -117.42247772]
[-3.06465483 -102.74595642]
[0.03366702 -88.06942749]
[3.13198876 -73.39290619]
[7.61990452 -67.45958710]
[6.13875151 -58.37894440]
[8.93107605 -43.64113998]
[11.72340107 -28.90333366]
[21.12956238 -27.81226349]
[30.02441978 -24.51021004]
[37.89504623 -19.17807198]
[44.28532410 -12.11408520]
[48.82237625 -3.71714544]
[51.23830032 5.53570509]
[51.38600159 15.11638165]
[49.24808884 24.47589302]
[44.93841171 33.07580185]
[55.60004044 43.62709427]
[66.26166534 54.17838287]
[76.92329407 64.72967529]
[87.58491516 75.28096008]
[98.24654388 85.83225250]
[112.52200317 90.43782043]
[127.33975983 88.10671234]
[142.15751648 85.77561188]
[156.97528076 83.44450378]
[171.79302979 81.11340332]
[184.20127869 70.39110565]
[199.60021973 76.03064728]
[202.14875793 92.23055267]
[189.22517395 102.32575226]
[174.12414551 95.93115997]
[159.30638123 98.26226807]
[144.48863220 100.59336853]
[129.67086792 102.92446899]
[114.85311127 105.25557709]
[113.29552460 120.17449188]
[127.31224060 125.51599884]
[140.88172913 117.74404907]
[156.26303101 120.56355286]
[166.19355774 132.64321899]
[165.98445129 148.27940369]
[155.73440552 160.08917236]
[140.28320312 162.49632263]
[126.92642975 154.36427307]
[121.97072601 139.53271484]
[107.95401764 134.19120789]
[101.77822876 138.44674683]
[111.51819611 149.85433960]
[121.25816345 161.26191711]
[130.99812317 172.66950989]
[144.15637207 179.87094116]
[147.94070435 194.38572693]
[139.97361755 207.09500122]
[125.26041412 210.01420593]
[113.04461670 201.30937195]
[111.00080872 186.44905090]
[103.80942535 173.28530884]
[96.61804199 160.12158203]
[89.42665863 146.95783997]
[83.25086975 151.21337891]
[83.25086975 166.21337891]
[83.25086975 181.21337891]
[83.25086975 196.21337891]
[83.25086975 211.21337891]
[83.25086975 226.21337891]
[83.25086975 241.21337891]
[83.25086975 256.21337891]
[83.25086975 271.21337891]
[83.25086975 286.21337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 102]
[12 101]
[13 100]
[14 99]
[15 98]
[16 97]
[18 32]
[19 31]
[20 30]
[42 51]
[43 50]
[44 49]
[54 88]
[55 87]
[56 86]
[57 84]
[58 83]
[59 82]
[60 81]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
