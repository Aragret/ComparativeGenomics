%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGxxxxxxxxxxAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.67808533]
[92.50000000 233.67808533]
[92.50000000 218.67808533]
[92.50000000 203.67808533]
[92.50000000 188.67808533]
[92.50000000 173.67808533]
[92.50000000 158.67808533]
[92.50000000 143.67808533]
[92.50000000 128.67808533]
[92.50000000 113.67807770]
[84.51008606 100.98315430]
[70.98589325 94.49498749]
[57.46170425 88.00682068]
[43.93751526 81.51865387]
[30.41332436 75.03049469]
[15.51142120 76.74317932]
[3.81179810 86.13034058]
[-7.88782549 95.51750183]
[-19.58745003 104.90466309]
[-25.02582741 120.37580109]
[-41.19114304 123.13525391]
[-51.45390701 110.34432983]
[-45.25666809 95.16123962]
[-28.97461128 93.20503998]
[-17.27498817 83.81787872]
[-5.57536364 74.43071747]
[6.12425995 65.04355621]
[5.50082254 57.56951523]
[-8.06817055 51.17557526]
[4.25394821 42.62142563]
[3.63051081 35.14738464]
[-9.46264362 27.82827759]
[-22.55579758 20.50917244]
[-19.94725037 35.28061295]
[-28.38929176 47.67948151]
[-43.08892059 50.66626740]
[-55.70036316 42.54521561]
[-59.06342316 27.92708206]
[-51.26870728 15.11137199]
[-36.74016953 11.37446404]
[-48.82015991 2.48211432]
[-60.90014648 -6.41023540]
[-72.98013306 -15.30258465]
[-85.06012726 -24.19493484]
[-97.32249451 -32.83404922]
[-109.76193237 -41.21619415]
[-122.20137024 -49.59833908]
[-136.32968140 -43.40200043]
[-151.56153870 -45.85020828]
[-163.03654480 -56.16175079]
[-167.09304810 -71.04624939]
[-162.43663025 -85.75411987]
[-150.55314636 -95.59212494]
[-135.23457336 -97.42100525]
[-121.36900330 -90.65715790]
[-113.38089752 -77.45891571]
[-113.81922913 -62.03777695]
[-101.37979126 -53.65563583]
[-88.94034576 -45.27349091]
[-84.10565186 -45.30809784]
[-79.21165466 -42.26176834]
[-76.16777039 -36.27492142]
[-64.08778381 -27.38257408]
[-52.00779724 -18.49022293]
[-39.92781067 -9.59787369]
[-27.84782028 -0.70552433]
[-15.23669243 7.41601801]
[-2.14353800 14.73512363]
[10.94961643 22.05422974]
[14.73229122 7.53901720]
[23.67906952 -4.50071526]
[36.48587036 -12.31006050]
[51.28597641 -14.75072861]
[65.92212677 -11.46696854]
[78.26096344 -2.93742037]
[86.50396729 9.59464931]
[89.44966125 24.30257034]
[86.66865540 39.04251862]
[78.56632996 51.66600037]
[66.32366943 60.33301926]
[51.72516251 63.78027725]
[36.90148926 61.50630188]
[50.42567825 67.99446869]
[63.94986725 74.48262787]
[77.47406006 80.97079468]
[90.99824524 87.45896149]
[82.24024963 75.28121948]
[72.29872894 64.04884338]
[66.17572021 50.35546112]
[64.43283844 35.45705795]
[67.22994232 20.72015953]
[74.31047058 7.49646711]
[85.02499390 -3.00110888]
[98.39073181 -9.80970383]
[113.18175507 -12.30481529]
[128.04139709 -10.25758743]
[141.60668945 -3.85579538]
[152.63337708 6.31337166]
[160.11009216 19.31717300]
[163.35102844 33.96286392]
[162.05892944 48.90711212]
[156.35231018 62.77918625]
[146.75454712 74.30673981]
[132.63314819 79.36502075]
[147.45089722 81.69612122]
[162.26866150 84.02722931]
[174.95960999 74.99520111]
[189.95372009 77.57035828]
[198.48616028 89.72489929]
[213.30392456 92.05600739]
[228.12168884 94.38710785]
[237.20295715 82.06684113]
[250.97460938 75.38849640]
[266.27200317 75.88671112]
[279.57992554 83.44699860]
[287.84030151 96.33205414]
[289.15493774 111.58100128]
[283.22180176 125.68972778]
[271.40423584 135.41616821]
[256.41781616 138.52523804]
[241.70635986 134.30250549]
[230.65042114 123.71833038]
[225.79057312 109.20486450]
[210.97282410 106.87376404]
[196.15505981 104.54265594]
[184.30285645 113.49032593]
[169.24232483 111.33734131]
[159.93756104 98.84498596]
[145.11979675 96.51387787]
[130.30204773 94.18277740]
[124.60153198 99.05660248]
[136.48774719 108.20635223]
[151.17941284 111.23208618]
[159.94345093 123.40547943]
[158.15184021 138.29809570]
[146.75065613 148.04556274]
[131.76055908 147.50050354]
[121.09740448 136.95075989]
[120.39189148 121.96799469]
[113.20050812 108.80425262]
[107.50000000 113.67807770]
[107.50000000 128.67808533]
[107.50000000 143.67808533]
[107.50000000 158.67808533]
[107.50000000 173.67808533]
[107.50000000 188.67808533]
[107.50000000 203.67808533]
[107.50000000 218.67808533]
[107.50000000 233.67808533]
[107.50000000 248.67808533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 86]
[12 85]
[13 84]
[14 83]
[15 82]
[16 27]
[17 26]
[18 25]
[19 24]
[31 69]
[32 68]
[33 67]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 59]
[46 58]
[47 57]
[104 130]
[105 129]
[106 128]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
