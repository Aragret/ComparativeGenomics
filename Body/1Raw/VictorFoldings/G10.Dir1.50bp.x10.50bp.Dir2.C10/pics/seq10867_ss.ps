%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGxxxxxxxxxxUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.27233887 617.93292236]
[179.27233887 602.93292236]
[179.27233887 587.93292236]
[179.27233887 572.93292236]
[179.27233887 557.93292236]
[179.27233887 542.93292236]
[179.27233887 527.93292236]
[179.27233887 512.93292236]
[179.27233887 497.93289185]
[179.27233887 482.93289185]
[177.71475220 468.01397705]
[174.61642456 453.33746338]
[171.51811218 438.66094971]
[158.93640137 430.77194214]
[155.58518982 415.93200684]
[163.94520569 402.78863525]
[160.84687805 388.11209106]
[157.74855042 373.43557739]
[154.49772644 358.79208374]
[151.09475708 344.18319702]
[147.69177246 329.57427979]
[144.28880310 314.96539307]
[140.88581848 300.35650635]
[125.26119995 298.67517090]
[111.12776184 291.74377441]
[100.19532013 280.38055420]
[93.79339600 265.94094849]
[92.70954895 250.15617371]
[97.09254456 234.92558289]
[106.43221283 222.08808899]
[119.61882019 213.20016479]
[115.91265869 198.66523743]
[112.20649719 184.13029480]
[101.94012451 177.65658569]
[98.76036072 165.52777100]
[104.91112518 154.14260864]
[101.50814819 139.53370667]
[80.06042480 134.17019653]
[64.83936310 118.13611603]
[60.59815979 96.43854523]
[46.18594360 92.28066254]
[31.77372742 88.12277222]
[15.99402332 92.58740997]
[4.42792797 80.96168518]
[8.97364807 65.20514679]
[24.95493698 61.52677155]
[35.93161392 73.71055603]
[50.34383011 77.86844635]
[64.75605011 82.02632904]
[66.29974365 79.27605438]
[68.05761719 76.65748596]
[57.84413528 65.67182159]
[47.63065720 54.68615341]
[37.41717529 43.70048904]
[21.61622429 43.37573242]
[10.73333168 31.91544724]
[11.22512627 16.11881065]
[22.79983330 5.35769176]
[38.59038544 6.01646996]
[49.22853088 17.70430374]
[48.40283966 33.48701096]
[58.61632156 44.47267532]
[68.82980347 55.45833969]
[79.04328156 66.44400024]
[82.76412964 64.38941956]
[86.68391418 62.74586105]
[90.75740051 61.53230667]
[94.93757629 60.76276398]
[95.87319946 45.79196930]
[96.80883026 30.82117844]
[83.29048920 23.80873108]
[73.79817200 11.90009117]
[69.97647095 -2.84149909]
[72.48751831 -17.86196899]
[80.89626312 -30.55893135]
[93.74584198 -38.73256302]
[108.80998993 -40.96672821]
[123.47873688 -36.87434769]
[135.21064758 -27.16444969]
[141.97309875 -13.51933384]
[142.59445190 1.69690144]
[136.96704102 15.84795189]
[126.06587219 26.48206139]
[111.77962494 31.75680733]
[110.84399414 46.72760010]
[109.90836334 61.69839096]
[115.61389160 63.64899826]
[120.95671844 66.44400024]
[131.17019653 55.45833969]
[141.38368225 44.47267532]
[151.59715271 33.48701096]
[154.73275757 17.39042473]
[170.32647705 12.31423664]
[182.33685303 23.48039436]
[178.40863037 39.40211105]
[162.58282471 43.70048904]
[152.36933899 54.68615341]
[142.15586853 65.67182159]
[131.94238281 76.65748596]
[138.88369751 92.70291138]
[138.23210144 110.17324829]
[130.11486816 125.65704346]
[116.11704254 136.13073730]
[119.52001953 150.73962402]
[132.41221619 163.84576416]
[126.74143219 180.42413330]
[130.44758606 194.95907593]
[134.15374756 209.49400330]
[148.47267151 210.59326172]
[161.72863770 216.06159973]
[172.62522888 225.34985352]
[180.10125732 237.53594971]
[183.43406677 251.41653442]
[182.30938721 265.62567139]
[176.85087585 278.76940918]
[167.60676575 289.56234741]
[155.49470520 296.95352173]
[158.89768982 311.56240845]
[162.30067444 326.17132568]
[165.70364380 340.78021240]
[169.10662842 355.38909912]
[174.13179016 363.09622192]
[172.42507935 370.33724976]
[175.52340698 385.01379395]
[178.62171936 399.69030762]
[191.58093262 408.33303833]
[194.51400757 423.26126099]
[186.19462585 435.56262207]
[189.29295349 450.23913574]
[192.39128113 464.91564941]
[199.12365723 451.51138306]
[211.58006287 443.15447998]
[226.53619385 442.00811768]
[240.12069702 448.36901855]
[248.81727600 460.59069824]
[250.37483215 475.50961304]
[244.39019775 489.26403809]
[232.41249084 498.29370117]
[217.54209900 500.26126099]
[203.62817383 494.65747070]
[194.27233887 482.93289185]
[194.27233887 497.93289185]
[194.27233887 512.93292236]
[194.27233887 527.93292236]
[194.27233887 542.93292236]
[194.27233887 557.93292236]
[194.27233887 572.93292236]
[194.27233887 587.93292236]
[194.27233887 602.93292236]
[194.27233887 617.93292236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[16 125]
[17 124]
[18 123]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[31 108]
[32 107]
[33 106]
[36 104]
[37 103]
[40 49]
[41 48]
[42 47]
[51 64]
[52 63]
[53 62]
[54 61]
[68 86]
[69 85]
[70 84]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
