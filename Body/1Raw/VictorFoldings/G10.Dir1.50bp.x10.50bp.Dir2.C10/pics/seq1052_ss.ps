%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCxxxxxxxxxxUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.99325562 445.24475098]
[108.99325562 430.24475098]
[108.99325562 415.24475098]
[108.99325562 400.24475098]
[108.99325562 385.24475098]
[108.99325562 370.24475098]
[108.99325562 355.24475098]
[108.99325562 340.24475098]
[108.99325562 325.24475098]
[108.99325562 310.24475098]
[91.76255035 304.70562744]
[77.39418793 293.66244507]
[67.58351898 278.39895630]
[63.49461746 260.69784546]
[65.62220764 242.63279724]
[73.73184967 226.32534790]
[86.88565826 213.69587708]
[103.55075073 206.23739624]
[101.99317169 191.31848145]
[100.43559265 176.39956665]
[98.87800598 161.48066711]
[97.32042694 146.56175232]
[95.76284790 131.64283752]
[94.20526886 116.72392273]
[79.30611420 99.66060638]
[92.98099518 77.36956024]
[84.99107361 64.67462921]
[77.00115967 51.97970200]
[69.01124573 39.28477097]
[61.02132797 26.58984184]
[48.58188629 18.20769882]
[33.81583405 15.56883526]
[23.31673622 28.30255508]
[7.92335367 33.98932266]
[-8.14814568 31.17206383]
[-20.54623413 20.70929718]
[-25.96223450 5.51658440]
[-40.77999115 3.18548059]
[-55.59775162 0.85437685]
[-70.69878387 7.24896479]
[-83.62237549 -2.84623027]
[-81.07382965 -19.04613686]
[-65.67488098 -24.68568039]
[-53.26664734 -13.96338081]
[-38.44888687 -11.63227749]
[-23.63113022 -9.30117321]
[-15.74135876 -20.49094200]
[-3.73572302 -27.20985794]
[10.06034184 -28.09090614]
[22.94613266 -22.90425682]
[32.37437057 -12.61351204]
[36.45469666 0.80277950]
[51.22075272 3.44164371]
[52.57087326 -12.38731766]
[62.86268997 -22.58740425]
[60.07036209 -37.32521057]
[57.27803802 -52.06301498]
[52.57782364 -59.97249222]
[54.58427429 -67.13627625]
[52.09915543 -81.92898560]
[49.61403656 -96.72168732]
[47.12891769 -111.51439667]
[32.16303253 -113.72289276]
[18.61299324 -120.44982147]
[7.80629349 -131.03616333]
[0.80166602 -144.44474792]
[-1.71464849 -159.36196899]
[0.50387311 -174.32637024]
[7.23988247 -187.87190247]
[17.83345413 -198.67150879]
[31.24673843 -205.66714478]
[46.16563797 -208.17346191]
[61.12855148 -205.94491577]
[74.66956329 -199.19982910]
[85.46206665 -188.59902954]
[92.44871521 -175.18106079]
[94.94503784 -160.26048279]
[92.70646667 -145.29905701]
[85.95230865 -131.76257324]
[75.34426880 -120.97717285]
[61.92162704 -113.99951935]
[64.40674591 -99.20681000]
[66.89186096 -84.41410065]
[69.37698364 -69.62139893]
[72.01584625 -54.85533905]
[74.80816650 -40.11753464]
[77.60049438 -25.37972832]
[85.66186523 -22.55011368]
[92.03137970 -16.49189186]
[95.44861603 -8.12540245]
[95.12541962 1.15342212]
[90.91692352 9.70547199]
[83.38198090 15.93796444]
[73.71625519 18.59992599]
[81.70617676 31.29485512]
[89.69609070 43.98978424]
[97.68600464 56.68471527]
[105.67592621 69.37964630]
[119.33216095 75.58505249]
[134.14991760 73.25394440]
[146.58000183 63.46601105]
[160.35507202 69.13140106]
[175.17283630 66.80029297]
[179.52835083 52.17182159]
[189.80593872 40.88758850]
[203.96498108 35.18809128]
[219.19418335 36.20496368]
[232.46978760 43.73631287]
[241.15589905 56.28677750]
[243.52789307 71.36445618]
[239.11480713 85.97566223]
[228.79286194 97.21933746]
[214.61148071 102.86303711]
[199.38639832 101.78619385]
[186.14056396 94.20262909]
[177.50393677 81.61805725]
[162.68617249 83.94915771]
[151.31596375 93.57035828]
[136.48103333 88.07170868]
[121.66326904 90.40280914]
[119.73471832 106.23643494]
[109.12417603 115.16634369]
[110.68175507 130.08525085]
[112.23934174 145.00416565]
[113.79692078 159.92308044]
[115.35449982 174.84199524]
[116.91207886 189.76091003]
[118.46966553 204.67982483]
[130.44662476 206.54304504]
[141.68455505 211.06005859]
[151.60411072 217.99346924]
[159.69496155 226.98146057]
[165.54199219 237.55662537]
[168.84660339 249.17028809]
[169.44201660 261.22100830]
[167.30163574 273.08563232]
[162.54022217 284.15161133]
[155.40774536 293.84860229]
[146.27626038 301.67782593]
[135.62051392 307.23776245]
[123.99325562 310.24475098]
[123.99325562 325.24475098]
[123.99325562 340.24475098]
[123.99325562 355.24475098]
[123.99325562 370.24475098]
[123.99325562 385.24475098]
[123.99325562 400.24475098]
[123.99325562 415.24475098]
[123.99325562 430.24475098]
[123.99325562 445.24475098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 128]
[19 127]
[20 126]
[21 125]
[22 124]
[23 123]
[24 122]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[31 53]
[32 52]
[37 46]
[38 45]
[39 44]
[55 87]
[56 86]
[57 85]
[59 84]
[60 83]
[61 82]
[62 81]
[99 120]
[100 119]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
