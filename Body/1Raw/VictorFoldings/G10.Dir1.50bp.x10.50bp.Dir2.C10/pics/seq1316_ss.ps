%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGGAUxxxxxxxxxxAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.03621674 479.14276123]
[98.03621674 464.14276123]
[98.03621674 449.14276123]
[98.03621674 434.14276123]
[98.03621674 419.14276123]
[98.03621674 404.14276123]
[98.03621674 389.14276123]
[98.03621674 374.14276123]
[98.03621674 359.14276123]
[98.03621674 344.14276123]
[83.02191162 340.24728394]
[69.51060486 332.60574341]
[58.41934204 321.73019409]
[50.50262833 308.35241699]
[46.30107498 293.37472534]
[46.10450363 277.80899048]
[49.93194199 262.70840454]
[57.52996826 249.09614563]
[68.38947296 237.89610291]
[81.77975464 229.87008667]
[96.79772949 225.56610107]
[96.48567963 210.56933594]
[96.17362213 195.57258606]
[86.27954102 181.11204529]
[95.20131683 165.03779602]
[94.57734680 150.05078125]
[93.95336914 135.06376648]
[86.48645782 132.91525269]
[79.66394806 129.19715881]
[73.81116486 124.08680725]
[69.20719910 117.82786560]
[66.07159424 110.71880341]
[51.13728714 112.12110901]
[38.08440781 122.04856110]
[23.06721306 115.45948792]
[21.53410721 99.13215637]
[35.06221771 89.86273193]
[49.73498535 97.18679810]
[64.66928864 95.78450012]
[67.40261078 85.73677063]
[72.92770386 76.91060638]
[80.77136993 70.06191254]
[90.26185608 65.77722931]
[100.58634949 64.42352295]
[103.98933411 49.81463242]
[99.58454895 34.61895752]
[110.00748444 23.97886086]
[113.41046143 9.36996746]
[116.81343842 -5.23892498]
[120.21641541 -19.84781837]
[123.61940002 -34.45671082]
[114.39463806 -55.33504486]
[128.52423096 -72.37132263]
[128.83628845 -87.36808014]
[129.14834595 -102.36483002]
[129.46038818 -117.36158752]
[126.49527740 -126.07135010]
[129.93817139 -132.66619873]
[130.56214905 -147.65321350]
[131.18612671 -162.64024353]
[123.84785461 -168.74266052]
[120.23024750 -177.42501831]
[121.04038239 -186.65719604]
[125.96579742 -194.34397888]
[133.77478027 -198.80059814]
[135.33235168 -213.71949768]
[136.88993835 -228.63841248]
[138.44752502 -243.55732727]
[124.53768921 -249.47407532]
[112.99089050 -259.22921753]
[104.83387756 -271.95535278]
[100.79194641 -286.52087402]
[101.22451782 -301.63061523]
[106.09312439 -315.94104004]
[114.96484375 -328.17965698]
[127.05081940 -337.25823975]
[141.27636719 -342.36950684]
[156.37657166 -343.05899048]
[171.00871277 -339.26538086]
[183.87173462 -331.32595825]
[193.82185364 -319.94674683]
[199.97430420 -306.13955688]
[201.78204346 -291.13211060]
[199.08428955 -276.25885010]
[192.12095642 -262.84231567]
[181.51119995 -252.07550049]
[168.19844055 -244.91575623]
[153.36643982 -241.99974060]
[151.80885315 -227.08084106]
[150.25126648 -212.16192627]
[148.69369507 -197.24301147]
[158.79219055 -179.28352356]
[146.17314148 -162.01626587]
[145.54916382 -147.02923584]
[144.92518616 -132.04222107]
[144.45715332 -117.04953003]
[144.14509583 -102.05278015]
[143.83303833 -87.05602264]
[143.52098083 -72.05927277]
[147.54603577 -69.84671783]
[150.98426819 -66.80121613]
[165.00097656 -72.14273071]
[174.92687988 -85.19678497]
[191.15863037 -82.85958099]
[196.99838257 -67.53543854]
[186.43870544 -54.98851776]
[170.34248352 -58.12601852]
[156.32577515 -52.78450394]
[154.29281616 -42.99907303]
[147.81698608 -35.11381149]
[138.22828674 -31.05373192]
[134.82531738 -16.44483948]
[131.42233276 -1.83594704]
[128.01934814 12.77294540]
[124.61637878 27.38183784]
[129.26455688 41.53258514]
[118.59822083 53.21760941]
[115.19524384 67.82649994]
[130.91398621 82.38311768]
[135.42547607 103.32638550]
[127.09415436 123.06373596]
[108.94038391 134.43978882]
[109.56436157 149.42680359]
[110.18833923 164.41381836]
[119.15741730 173.74171448]
[119.33385468 186.27915955]
[111.17037201 195.26052856]
[111.48242950 210.25727844]
[111.79448700 225.25404358]
[125.95160675 228.54383850]
[138.89546204 235.13383484]
[149.87010193 244.63401794]
[158.23577881 256.48461914]
[163.50631714 269.98898315]
[165.37728882 284.35461426]
[163.74363708 298.73959351]
[158.70556641 312.30206299]
[150.56237793 324.24932861]
[139.79472351 333.88430786]
[127.03623962 340.64608765]
[113.03621674 344.14276123]
[113.03621674 359.14276123]
[113.03621674 374.14276123]
[113.03621674 389.14276123]
[113.03621674 404.14276123]
[113.03621674 419.14276123]
[113.03621674 434.14276123]
[113.03621674 449.14276123]
[113.03621674 464.14276123]
[113.03621674 479.14276123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 127]
[25 124]
[26 123]
[27 122]
[32 39]
[33 38]
[44 118]
[45 117]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
[53 99]
[54 98]
[55 97]
[56 96]
[58 95]
[59 94]
[60 93]
[65 91]
[66 90]
[67 89]
[68 88]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
