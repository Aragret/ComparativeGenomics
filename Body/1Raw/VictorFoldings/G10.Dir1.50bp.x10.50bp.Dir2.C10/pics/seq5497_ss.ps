%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUxxxxxxxxxxACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-35.93601990 260.14770508]
[-47.08751297 249.97050476]
[-57.96633911 260.29769897]
[-68.84516144 270.62490845]
[-79.72399139 280.95211792]
[-90.60281372 291.27932739]
[-95.28447723 306.39199829]
[-109.84197998 309.54293823]
[-120.72080231 319.87014771]
[-131.59962463 330.19735718]
[-142.47845459 340.52456665]
[-153.35728455 350.85177612]
[-164.23609924 361.17898560]
[-175.11492920 371.50616455]
[-185.99375916 381.83337402]
[-196.87257385 392.16058350]
[-197.03294373 407.96405029]
[-208.37940979 418.96557617]
[-224.18029785 418.63812256]
[-235.06124878 407.17599487]
[-234.56675720 391.37945557]
[-222.99021912 380.62030029]
[-207.19978333 381.28176880]
[-196.32095337 370.95455933]
[-185.44213867 360.62734985]
[-174.56330872 350.30014038]
[-163.68447876 339.97293091]
[-152.80566406 329.64575195]
[-141.92683411 319.31854248]
[-131.04800415 308.99133301]
[-120.16918182 298.66412354]
[-116.26564026 284.29013062]
[-100.93002319 280.40051270]
[-90.05119324 270.07330322]
[-79.17237091 259.74609375]
[-68.29354858 249.41888428]
[-57.41471863 239.09167480]
[-70.14076233 223.19906616]
[-81.26847076 206.14909363]
[-90.69331360 188.10192871]
[-98.32673645 169.22712708]
[-104.09703827 149.70198059]
[-107.95001221 129.70993042]
[-109.84946442 109.43878174]
[-109.77754974 89.07896423]
[-107.73493958 68.82173920]
[-103.74082947 48.85740662]
[-97.83273315 29.37351799]
[-90.06615448 10.55311012]
[-80.51406097 -7.42701674]
[-69.26617432 -24.39795113]
[-56.42817688 -40.20026779]
[-42.12065506 -54.68551254]
[-51.86830902 -66.08653259]
[-61.61595917 -77.48755646]
[-71.36360931 -88.88858032]
[-86.99691010 -93.84156799]
[-90.25941467 -109.91291046]
[-77.79494476 -120.56978607]
[-62.42588043 -114.84931946]
[-59.96258926 -98.63623047]
[-50.21493912 -87.23520660]
[-40.46728516 -75.83419037]
[-30.71963501 -64.43316650]
[-21.86124039 -71.10150909]
[-12.66333294 -77.29315186]
[-3.15153646 -82.99084473]
[6.64764786 -88.17871094]
[16.70691872 -92.84230042]
[26.99824905 -96.96861267]
[37.49296951 -100.54615784]
[48.16183853 -103.56496429]
[58.97513199 -106.01662445]
[69.90272522 -107.89431000]
[80.91416931 -109.19277954]
[91.97879028 -109.90843201]
[103.06575775 -110.03926086]
[114.14418030 -109.58489990]
[125.18319702 -108.54662323]
[136.15205383 -106.92732239]
[147.02018738 -104.73150635]
[157.75732422 -101.96529388]
[168.33354187 -98.63639069]
[178.71937561 -94.75407410]
[188.88589478 -90.32915497]
[198.80476379 -85.37396240]
[208.44836426 -79.90231323]
[217.78981018 -73.92943573]
[226.80310059 -67.47197723]
[235.46308899 -60.54793549]
[243.74568176 -53.17659378]
[251.62777710 -45.37848663]
[259.08743286 -37.17535019]
[266.10385132 -28.59002876]
[272.65750122 -19.64644814]
[278.73013306 -10.36952209]
[284.30477905 -0.78509957]
[289.36596680 9.08011818]
[293.89953613 19.19864464]
[297.89291382 29.54228973]
[301.33493042 40.08223343]
[304.21600342 50.78911591]
[306.52813721 61.63310242]
[308.26486206 72.58398438]
[309.42132568 83.61124420]
[309.99435425 94.68416595]
[324.99356079 94.84020233]
[339.99273682 94.99623871]
[353.87265015 87.40291595]
[366.51873779 95.27218628]
[381.51794434 95.42822266]
[395.53109741 86.90983582]
[409.78292847 95.02265167]
[409.61233521 111.42091370]
[395.19482422 119.23548889]
[381.36190796 110.42741394]
[366.36270142 110.27137756]
[353.55563354 117.87586212]
[339.83670044 109.99542999]
[324.83752441 109.83939362]
[309.83831787 109.68335724]
[308.60086060 124.72994995]
[306.28588867 139.64880371]
[302.90533447 154.36285400]
[298.47665405 168.79608154]
[293.02279663 182.87396240]
[286.57183838 196.52374268]
[279.15719604 209.67494202]
[270.81707764 222.25961304]
[261.59463501 234.21276855]
[251.53746033 245.47264099]
[240.69752502 255.98106384]
[229.13082886 265.68377686]
[216.89710999 274.53067017]
[204.05955505 282.47601318]
[190.68447876 289.47879028]
[176.84098816 295.50280762]
[162.60057068 300.51696777]
[148.03678894 304.49536133]
[133.22486877 307.41744995]
[118.24134064 309.26809692]
[103.16357422 310.03781128]
[88.06947327 309.72256470]
[73.03699493 308.32400513]
[58.14379883 305.84933472]
[43.46680832 302.31137085]
[29.08183670 297.72836304]
[15.06319141 292.12399292]
[1.48328662 285.52722168]
[-11.58773232 277.97210693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[53 64]
[54 63]
[55 62]
[56 61]
[106 121]
[107 120]
[108 119]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
