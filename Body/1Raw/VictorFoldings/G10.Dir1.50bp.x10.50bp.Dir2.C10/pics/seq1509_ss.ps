%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAxxxxxxxxxxCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.86771393 250.83921814]
[73.55565643 235.84246826]
[73.24359894 220.84571838]
[72.93154144 205.84895325]
[72.61948395 190.85220337]
[72.30742645 175.85545349]
[71.99537659 160.85870361]
[71.68331909 145.86193848]
[71.37126160 130.86518860]
[59.97024155 121.11753845]
[45.10719299 123.13986969]
[30.24414635 125.16220856]
[15.38109970 127.18453979]
[10.89150524 145.46484375]
[-3.63466215 159.50004578]
[-24.74713516 163.94686890]
[-46.29259872 156.03096008]
[-59.38575363 163.35005188]
[-72.47890472 170.66915894]
[-80.74942017 184.15653992]
[-95.63410187 183.61297607]
[-108.72725677 190.93208313]
[-121.82041168 198.25119019]
[-129.74681091 212.60751343]
[-146.14590454 212.65065002]
[-154.14770508 198.33621216]
[-145.52066040 184.38966370]
[-129.13951111 185.15803528]
[-116.04636383 177.83892822]
[-102.95320892 170.51982117]
[-95.61920929 157.55595398]
[-79.79801178 157.57600403]
[-66.70485687 150.25689697]
[-53.61170578 142.93780518]
[-54.39049530 135.47834778]
[-69.30943298 137.03569031]
[-70.86655426 122.11672974]
[-55.94807434 120.55943298]
[-56.72686768 113.09997559]
[-71.04946136 108.64315796]
[-85.37206268 104.18634033]
[-98.43034363 112.78955841]
[-113.95755768 110.93495941]
[-124.62223816 99.49823761]
[-125.38883972 83.87945557]
[-115.89540100 71.45332336]
[-100.62442780 68.08708954]
[-86.78641510 75.37018585]
[-80.91524506 89.86374664]
[-66.59265137 94.32056427]
[-52.27005005 98.77737427]
[-37.55913544 88.31658936]
[-20.65555382 85.19187164]
[-4.84641504 89.28135681]
[7.08716726 99.12524414]
[13.35876465 112.32149506]
[28.22181129 110.29916382]
[43.08485794 108.27682495]
[57.94790649 106.25449371]
[98.09397888 64.96223450]
[105.81806946 52.10383224]
[113.54215240 39.24542999]
[121.26623535 26.38702774]
[128.99032593 13.52862644]
[136.71440125 0.67022395]
[124.95627594 -8.67864609]
[114.51905060 -19.48232079]
[105.58132935 -31.55593491]
[98.29605103 -44.69289398]
[92.78786469 -58.66840363]
[89.15103149 -73.24333191]
[87.44778442 -88.16827393]
[87.70726013 -103.18785095]
[89.92502594 -118.04505920]
[94.06312561 -132.48565674]
[100.05075836 -146.26257324]
[107.78546906 -159.14004517]
[117.13489532 -170.89773560]
[127.93907166 -181.33444214]
[140.01310730 -190.27159119]
[153.15042114 -197.55624390]
[167.12619019 -203.06376648]
[181.70129395 -206.69990540]
[196.62631226 -208.40243530]
[211.64587402 -208.14224243]
[226.50297546 -205.92378235]
[240.94338989 -201.78498840]
[254.72001648 -195.79669189]
[267.59710693 -188.06137085]
[279.35437012 -178.71139526]
[289.79055786 -167.90672302]
[298.72711182 -155.83226013]
[306.01116943 -142.69461060]
[311.51800537 -128.71856689]
[315.15344238 -114.14329529]
[316.85528564 -99.21818542]
[316.59436035 -84.19863892]
[314.37518311 -69.34164429]
[310.23571777 -54.90143204]
[304.24676514 -41.12509155]
[296.51083374 -28.24835396]
[287.16027832 -16.49155807]
[276.35513306 -6.05587673]
[264.28024292 2.88012004]
[251.14224243 10.16352654]
[237.16593933 15.66971397]
[222.59049988 19.30446434]
[207.66531372 21.00558281]
[192.64576721 20.74396133]
[177.78887939 18.52407455]
[163.34886169 14.38390923]
[149.57281494 8.39430904]
[141.84872437 21.25271034]
[134.12463379 34.11111450]
[126.40055084 46.96951675]
[118.67646790 59.82791901]
[110.95238495 72.68631744]
[112.95625305 79.91366577]
[127.47833252 83.66990662]
[116.96399689 94.36835480]
[118.96786499 101.59569550]
[132.21044922 108.64083099]
[147.91191101 105.34784698]
[160.18385315 115.68123627]
[159.61230469 131.71409607]
[146.63569641 141.14741516]
[131.20858765 136.74472046]
[125.16531372 121.88341522]
[111.92272949 114.83827972]
[105.53404999 118.76699829]
[113.77789307 131.29852295]
[122.02173615 143.83003235]
[130.26557922 156.36155701]
[140.88026428 166.96006775]
[134.79660034 180.67097473]
[119.81578827 179.91250610]
[115.14773560 165.65826416]
[107.68405914 152.64698792]
[100.22037506 139.63569641]
[92.75669098 126.62442017]
[86.36801147 130.55313110]
[86.68006897 145.54988098]
[86.99212646 160.54664612]
[87.30418396 175.54339600]
[87.61624146 190.54014587]
[87.92829895 205.53689575]
[88.24034882 220.53366089]
[88.55240631 235.53041077]
[88.86446381 250.52716064]
[91.45546722 269.73489380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 59]
[11 58]
[12 57]
[13 56]
[17 34]
[18 33]
[19 32]
[21 30]
[22 29]
[23 28]
[39 51]
[40 50]
[41 49]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
