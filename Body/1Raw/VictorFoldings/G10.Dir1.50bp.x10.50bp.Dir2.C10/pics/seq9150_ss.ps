%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCxxxxxxxxxxCUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[39.97760391 231.99765015]
[33.07060623 245.31280518]
[33.58430862 261.12567139]
[20.85560417 268.86059570]
[13.94860458 282.17575073]
[7.04160643 295.49090576]
[0.13460772 308.80606079]
[-6.77239084 322.12121582]
[-13.67938900 335.43637085]
[-12.40026569 351.78558350]
[-26.07082748 360.84359741]
[-40.62797546 353.29232788]
[-41.09656143 336.89987183]
[-26.99454498 328.52938843]
[-20.08754730 315.21423340]
[-13.18054771 301.89907837]
[-6.27354956 288.58392334]
[0.63344914 275.26876831]
[7.54044771 261.95361328]
[6.53270721 247.09313965]
[19.75544930 238.40580750]
[26.66244698 225.09065247]
[6.47780228 210.81365967]
[-10.98804188 193.31517029]
[-25.22733307 173.10391235]
[-35.82611847 150.76742554]
[-42.47628021 126.95508575]
[-57.33932495 128.97741699]
[-72.20237732 130.99975586]
[-77.94406891 145.24505615]
[-90.04904938 154.69834900]
[-105.26114655 156.81677246]
[-119.48838043 151.03045654]
[-128.90368652 138.89588928]
[-130.97441101 123.67723083]
[-125.14353180 109.46820831]
[-112.97952271 100.09098053]
[-97.75444031 98.06797028]
[-83.56376648 103.94336700]
[-74.22470856 116.13670349]
[-59.36166000 114.11437225]
[-44.49861526 112.09204102]
[-45.00972748 90.22467041]
[-42.22278976 68.47869873]
[-36.18603516 47.34984970]
[-27.02196312 27.32207489]
[-14.92486954 8.85646152]
[-27.36430931 0.47431874]
[-39.80374908 -7.90782452]
[-55.76226807 -6.26305962]
[-66.89486694 -17.81488800]
[-64.66157532 -33.70173645]
[-50.77557373 -41.73657227]
[-35.88902283 -35.75576019]
[-31.42160606 -20.34726524]
[-18.98216629 -11.96512127]
[-6.54272604 -3.58297825]
[4.44293880 -13.79645824]
[-3.01197147 -26.81276703]
[-10.46688175 -39.82907867]
[-17.92179298 -52.84538651]
[-31.04048157 -63.58486176]
[-24.35232353 -79.16384888]
[-7.53070164 -77.04975891]
[-4.90548277 -60.30029678]
[2.54942775 -47.28398895]
[10.00433826 -34.26767731]
[17.45924759 -21.25136948]
[25.75414848 -26.40814781]
[34.36925125 -30.99877930]
[43.26600647 -35.00352097]
[52.40464783 -38.40525436]
[61.74438095 -41.18954086]
[71.24356842 -43.34471130]
[80.85990906 -44.86189270]
[90.55062103 -45.73505402]
[100.27265167 -45.96102524]
[109.98284912 -45.53950882]
[119.63816071 -44.47308731]
[129.19583130 -42.76718903]
[138.61357117 -40.43008041]
[147.84977722 -37.47282028]
[156.86367798 -33.90920258]
[165.61553955 -29.75569725]
[174.06683350 -25.03136826]
[182.18041992 -19.75779533]
[189.92068481 -13.95897007]
[197.25370789 -7.66118574]
[204.14741516 -0.89292216]
[215.44642639 -10.75864506]
[226.74542236 -20.62436867]
[238.04443359 -30.49009132]
[237.55630493 -46.12005615]
[247.26969910 -58.37501907]
[262.59823608 -61.46856308]
[276.30426025 -53.94001007]
[281.91619873 -39.34411621]
[276.78427124 -24.57261086]
[263.33160400 -16.60015106]
[247.91015625 -19.19108582]
[236.61116028 -9.32536316]
[225.31214905 0.54035956]
[214.01313782 10.40608215]
[218.71260071 16.73304558]
[223.06135559 23.30599785]
[227.04655457 30.10552025]
[230.65644836 37.11152267]
[233.88034058 44.30331421]
[236.70872498 51.65964508]
[239.13325500 59.15877914]
[241.14674377 66.77857208]
[242.74325562 74.49650574]
[243.91809082 82.28977966]
[244.66773987 90.13537598]
[244.99002075 98.01011658]
[244.88397217 105.89073181]
[244.34991455 113.75394440]
[243.38940430 121.57652283]
[242.00529480 129.33537292]
[240.20167542 137.00753784]
[237.98387146 144.57038879]
[235.35842896 152.00157166]
[232.33311462 159.27912903]
[228.91685486 166.38156128]
[225.11975098 173.28788757]
[220.95301819 179.97770691]
[216.42897034 186.43125916]
[211.56095886 192.62947083]
[206.36337280 198.55404663]
[200.85157776 204.18746948]
[195.04183960 209.51309204]
[188.95132446 214.51519775]
[182.59803772 219.17898560]
[176.00073242 223.49070740]
[169.17889404 227.43762207]
[162.15270996 231.00804138]
[154.94290161 234.19145203]
[147.57078552 236.97842407]
[140.05812073 239.36073303]
[132.42713928 241.33134460]
[124.70034027 242.88442993]
[116.90058136 244.01541138]
[109.05089569 244.72093201]
[101.17446899 244.99891663]
[93.29457855 244.84855652]
[85.43448639 244.27027893]
[77.61743164 243.26579285]
[69.86650085 241.83807373]
[62.20458603 239.99133301]
[54.65432739 237.73103333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[27 42]
[28 41]
[29 40]
[47 57]
[48 56]
[49 55]
[58 68]
[59 67]
[60 66]
[61 65]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
