%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCxxxxxxxxxxACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.41169739 427.04339600]
[84.41169739 412.04339600]
[84.41169739 397.04339600]
[84.41169739 382.04339600]
[84.41169739 367.04339600]
[84.41169739 352.04339600]
[84.41169739 337.04339600]
[84.41169739 322.04339600]
[84.41169739 307.04339600]
[84.41169739 292.04339600]
[69.75731659 288.95388794]
[56.06025314 282.88253784]
[43.92019653 274.09246826]
[33.86922455 262.96594238]
[26.34847450 249.98768616]
[21.68878937 235.72375488]
[20.09615898 220.79687500]
[21.64261627 205.85926819]
[26.26298332 191.56411743]
[33.75761795 178.53700256]
[43.80102539 167.34858704]
[55.95602036 158.48951721]
[69.69272614 152.34902954]
[84.41169739 149.19772339]
[84.41169739 134.19772339]
[84.41169739 119.19772339]
[82.16660309 89.76058960]
[74.44252014 76.90218353]
[66.71842957 64.04378510]
[58.99434662 51.18537903]
[51.27025986 38.32697678]
[50.92066574 53.32290268]
[47.70668411 67.97453308]
[41.74721146 81.73987579]
[33.26269531 94.10971832]
[22.56700516 104.62648010]
[10.05578995 112.90110779]
[-3.80812860 118.62751770]
[-18.51189423 121.59387207]
[-33.51158524 121.69043732]
[-48.25232315 118.91365051]
[-62.18882370 113.36621857]
[-74.80554199 105.25336456]
[-85.63575745 94.87519073]
[-94.27883148 82.61561584]
[-100.41505432 68.92814636]
[-103.81741333 54.31911087]
[-104.36006165 39.32892990]
[-102.02291870 24.51212120]
[-96.89244080 10.41679573]
[-89.15841675 -2.43563271]
[-79.10694885 -13.56972313]
[-67.10986328 -22.57360268]
[-53.61094666 -29.11419678]
[-39.10956573 -32.94955444]
[-24.14215660 -33.93779755]
[-9.26239395 -32.04236984]
[4.97928762 -27.33338737]
[18.05605507 -19.98504448]
[29.48417091 -10.26917171]
[38.84088516 1.45481718]
[45.77759933 14.74712563]
[47.02447510 -0.20096096]
[48.27134705 -15.14904785]
[33.91170120 -19.70407867]
[20.92593575 -27.34067535]
[9.96541023 -37.67579269]
[1.57990146 -50.19102097]
[-3.80997777 -64.25860596]
[-5.93387318 -79.17292023]
[-4.68525124 -94.18587494]
[-0.12674169 -108.54441071]
[7.51300192 -121.52832794]
[17.85077286 -132.48634338]
[30.36803436 -140.86882019]
[44.43692398 -146.25529480]
[59.35175323 -148.37557983]
[74.36440277 -147.12332153]
[88.72183990 -142.56132507]
[101.70390320 -134.91844177]
[112.65941620 -124.57801819]
[121.03886414 -112.05872345]
[126.42192078 -97.98852539]
[128.53858948 -83.07318115]
[127.28269196 -68.06084442]
[122.71722412 -53.70450974]
[115.07118988 -40.72429657]
[104.72811127 -29.77128792]
[92.20678711 -21.39487839]
[78.13529205 -16.01522636]
[63.21943665 -13.90217304]
[61.97256088 1.04591358]
[60.72568512 15.99400043]
[64.12866211 30.60289383]
[71.85274506 43.46129608]
[79.57683563 56.31969833]
[87.30091858 69.17810059]
[95.02500153 82.03649902]
[88.86705017 68.35879517]
[89.01458740 53.35952377]
[95.44039154 39.80559540]
[106.95910645 30.19730186]
[121.44586945 26.30708885]
[136.22830200 28.85258102]
[148.57949829 37.36421204]
[156.22103882 50.27184296]
[157.74328613 65.19440460]
[152.86541748 79.37912750]
[142.48727417 90.20936584]
[128.52328491 95.68725586]
[113.55236053 94.80313873]
[128.31842041 97.44200134]
[143.08447266 100.08086395]
[157.85052490 102.71973419]
[172.61657715 105.35859680]
[187.84738159 99.27954865]
[200.55815125 109.64141846]
[197.67314148 125.78479767]
[182.16020203 131.10276794]
[169.97772217 120.12464905]
[155.21166992 117.48578644]
[140.44560242 114.84692383]
[125.67955017 112.20806122]
[110.91349792 109.56919098]
[99.41169739 119.19772339]
[99.41169739 134.19772339]
[99.41169739 149.19772339]
[114.13066101 152.34902954]
[127.86737061 158.48951721]
[140.02236938 167.34858704]
[150.06578064 178.53700256]
[157.56040955 191.56411743]
[162.18077087 205.85926819]
[163.72723389 220.79687500]
[162.13459778 235.72375488]
[157.47491455 249.98768616]
[149.95416260 262.96594238]
[139.90319824 274.09246826]
[127.76313782 282.88253784]
[114.06607056 288.95388794]
[99.41169739 292.04339600]
[99.41169739 307.04339600]
[99.41169739 322.04339600]
[99.41169739 337.04339600]
[99.41169739 352.04339600]
[99.41169739 367.04339600]
[99.41169739 382.04339600]
[99.41169739 397.04339600]
[99.41169739 412.04339600]
[99.41169739 427.04339600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[24 127]
[25 126]
[26 125]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[62 93]
[63 92]
[64 91]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
