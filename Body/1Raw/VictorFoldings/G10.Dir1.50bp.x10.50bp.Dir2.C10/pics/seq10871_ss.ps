%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCAxxxxxxxxxxACGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.13011169 95.12242126]
[154.81948853 82.01904297]
[141.29528809 88.50720978]
[127.77110291 94.99537659]
[114.24691010 101.48354340]
[106.19573975 112.91464996]
[92.24125671 112.04064941]
[78.71706390 118.52881622]
[65.19287109 125.01698303]
[51.66868210 131.50514221]
[38.14449310 137.99331665]
[24.62030411 144.48147583]
[11.09611320 150.96963501]
[12.08232021 166.98724365]
[6.87145472 182.12496948]
[-3.71405530 194.08409119]
[-18.03802109 201.06057739]
[-33.90334702 202.01705933]
[-48.88903046 196.83709717]
[-60.71958923 186.33840942]
[-74.10587311 193.10652161]
[-87.49215698 199.87463379]
[-100.87844086 206.64274597]
[-105.57038116 221.73451233]
[-119.59824371 229.01425171]
[-134.63955688 224.16300964]
[-141.77056885 210.05895996]
[-136.76058960 195.06977844]
[-122.58193207 188.08828735]
[-107.64656067 193.25646973]
[-94.26027679 186.48834229]
[-80.87398529 179.72023010]
[-67.48770142 172.95211792]
[-69.07593536 158.97566223]
[-65.78079987 145.26986694]
[-57.97988510 133.49290466]
[-46.59717941 125.07675171]
[-32.99364090 121.05314636]
[-18.80449677 121.92709351]
[-5.74268198 127.61360168]
[4.60794830 137.44544983]
[18.13213730 130.95729065]
[31.65632820 124.46912384]
[45.18051910 117.98095703]
[58.70470810 111.49279022]
[72.22889709 105.00462341]
[85.75308990 98.51645660]
[93.80426025 87.08535004]
[107.75874329 87.95935059]
[121.28293610 81.47118378]
[134.80712891 74.98301697]
[148.33131409 68.49485779]
[142.68608093 54.59251785]
[137.90739441 40.36902237]
[134.01339722 25.87832260]
[131.01884460 11.17538738]
[128.93508911 -3.68400812]
[127.77005768 -18.64349747]
[127.52816010 -33.64633560]
[128.21031189 -48.63560867]
[129.81391907 -63.55445862]
[132.33290100 -78.34629059]
[135.75772095 -92.95500183]
[140.07536316 -107.32516479]
[145.26947021 -121.40226746]
[151.32031250 -135.13291931]
[158.20495605 -148.46504211]
[165.89729309 -161.34803772]
[174.36811829 -173.73306274]
[183.58532715 -185.57310486]
[193.51393127 -196.82328796]
[204.11627197 -207.44090271]
[215.35214233 -217.38569641]
[227.17890930 -226.61993408]
[239.55172729 -235.10859680]
[252.42362976 -242.81945801]
[265.74581909 -249.72329712]
[279.46774292 -255.79391479]
[293.53735352 -261.00827026]
[307.90130615 -265.34658813]
[322.50506592 -268.79244995]
[337.29324341 -271.33273315]
[352.20977783 -272.95782471]
[367.19805908 -273.66152954]
[382.20123291 -273.44125366]
[397.16238403 -272.29776001]
[412.02474976 -270.23541260]
[426.73199463 -267.26202393]
[441.22827148 -263.38888550]
[455.45864868 -258.63067627]
[469.36907959 -253.00546265]
[482.90686035 -246.53457642]
[496.02059937 -239.24256897]
[508.66055298 -231.15708923]
[520.77880859 -222.30882263]
[532.32934570 -212.73132324]
[543.26837158 -202.46092224]
[553.55444336 -191.53657532]
[563.14843750 -179.99974060]
[572.01403809 -167.89416504]
[580.11755371 -155.26577759]
[587.42834473 -142.16247559]
[593.91857910 -128.63397217]
[599.56365967 -114.73157501]
[604.34216309 -100.50803375]
[608.23608398 -86.01729584]
[611.23046875 -71.31433105]
[613.31408691 -56.45491409]
[614.47894287 -41.49541473]
[614.72070312 -26.49257278]
[614.03839111 -11.50330639]
[612.43463135 3.41552734]
[609.91552734 18.20733643]
[606.49053955 32.81600952]
[602.17279053 47.18613052]
[596.97851562 61.26318741]
[590.92755127 74.99378204]
[584.04278564 88.32582855]
[576.35034180 101.20875549]
[567.87939453 113.59368896]
[558.66204834 125.43364716]
[548.73333740 136.68373108]
[538.13085938 147.30125427]
[526.89489746 157.24592590]
[515.06805420 166.48004150]
[502.69515991 174.96858215]
[489.82318115 182.67932129]
[476.50091553 189.58302307]
[462.77893066 195.65350342]
[448.70925903 200.86773682]
[434.34530640 205.20591736]
[419.74148560 208.65161133]
[404.95327759 211.19175720]
[390.03674316 212.81669617]
[375.04846191 213.52027893]
[360.04528809 213.29983521]
[345.08413696 212.15618896]
[330.22180176 210.09368896]
[315.51458740 207.12016296]
[301.01834106 203.24688721]
[286.78802490 198.48854065]
[272.87762451 192.86318970]
[259.33990479 186.39218140]
[246.22624207 179.10003662]
[233.58636475 171.01443481]
[221.46820068 162.16604614]
[209.91775513 152.58842468]
[198.97882080 142.31791687]
[188.69290161 131.39347839]
[179.09899902 119.85655212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[20 33]
[21 32]
[22 31]
[23 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
