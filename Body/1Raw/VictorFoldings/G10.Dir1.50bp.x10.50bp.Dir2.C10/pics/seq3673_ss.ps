%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCxxxxxxxxxxGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 253.22348022]
[92.50000000 238.22348022]
[92.50000000 223.22348022]
[92.50000000 208.22348022]
[92.50000000 193.22348022]
[92.50000000 178.22348022]
[92.50000000 163.22348022]
[92.50000000 148.22348022]
[92.50000000 133.22348022]
[92.50000000 118.22348022]
[86.90211487 113.23211670]
[83.85459900 127.91928101]
[69.61135101 132.62351990]
[58.41580582 122.64055634]
[61.46364212 107.95346069]
[75.70635223 103.24938965]
[70.10846710 98.25802612]
[55.20656586 99.97071838]
[40.30466461 101.68341064]
[25.40276146 103.39609528]
[10.50085926 105.10878754]
[-4.40104342 106.82147980]
[-6.17186832 121.78680420]
[-11.34676838 135.94013977]
[-19.64666748 148.51823425]
[-30.62396431 158.84275818]
[-43.68666458 166.35691833]
[-58.13031387 170.65548706]
[-73.17598724 171.50663757]
[-88.01228333 168.86450195]
[-101.83911133 162.87153625]
[-113.91079712 153.85093689]
[-123.57633209 142.28918457]
[-130.31446838 128.80978394]
[-133.76182556 114.13966370]
[-133.73249817 99.06996155]
[-130.22805786 84.41337585]
[-123.43749237 70.96030426]
[-113.72702026 59.43626785]
[-101.62031555 50.46273422]
[-87.77026367 44.52363968]
[-72.92378998 41.93927002]
[-57.88154602 42.84899521]
[-43.45473862 47.20375824]
[-30.42138863 54.76871490]
[-19.48436737 65.13588715]
[-11.23349667 77.74619293]
[-6.11373329 91.91957855]
[8.78816891 90.20688629]
[23.69007111 88.49419403]
[38.59197235 86.78150940]
[53.49387741 85.06881714]
[68.39577484 83.35612488]
[82.15735626 79.01303864]
[93.84809875 81.62853241]
[100.65320587 88.81736755]
[108.37729645 75.95896149]
[116.10137939 63.10055923]
[123.82546234 50.24215698]
[120.21923828 35.08851242]
[128.23573303 22.15829849]
[142.70463562 18.81370163]
[150.42872620 5.95529985]
[158.15281677 -6.90310287]
[146.34733582 -16.18933678]
[135.79887390 -26.88199997]
[126.67376709 -38.81245041]
[119.11594391 -51.79253387]
[113.24459076 -65.61753082]
[109.15232086 -80.06939697]
[106.90367126 -94.92021942]
[106.53410339 -109.93576813]
[108.04944611 -124.87922668]
[111.42580414 -139.51492310]
[116.60991669 -153.61201477]
[123.52004242 -166.94818115]
[132.04718018 -179.31309509]
[142.05685425 -190.51174927]
[153.39118958 -200.36750793]
[165.87142944 -208.72494507]
[179.30075073 -215.45223999]
[193.46736145 -220.44329834]
[208.14779663 -223.61941528]
[223.11056519 -224.93048096]
[238.11965942 -224.35583496]
[252.93838501 -221.90452576]
[267.33300781 -217.61521912]
[281.07650757 -211.55555725]
[293.95211792 -203.82113647]
[305.75680542 -194.53390503]
[316.30438232 -183.84034729]
[325.42849731 -171.90913391]
[332.98522949 -158.92842102]
[338.85540771 -145.10292053]
[342.94647217 -130.65071106]
[345.19384766 -115.79970551]
[345.56216431 -100.78412628]
[344.04556274 -85.84079742]
[340.66796875 -71.20538330]
[335.48266602 -57.10872650]
[328.57144165 -43.77313614]
[320.04324341 -31.40893745]
[310.03262329 -20.21113205]
[298.69747925 -10.35632515]
[286.21652222 -1.99994242]
[272.78662109 4.72622490]
[258.61959839 9.71609592]
[243.93890381 12.89097118]
[228.97602844 14.20078087]
[213.96696472 13.62486649]
[199.14846802 11.17230988]
[184.75419617 6.88179255]
[171.01121521 0.82098228]
[163.28712463 13.67938423]
[155.56304932 26.53778648]
[159.40599060 40.88237762]
[151.75584412 54.03265762]
[136.68386841 57.96624374]
[128.95977783 70.82464600]
[121.23569489 83.68304443]
[113.51161194 96.54145050]
[122.42911530 84.48001862]
[134.44255066 75.49795532]
[148.53384399 70.35643768]
[163.50888062 69.49116516]
[178.09858704 72.97547150]
[191.06658936 80.51408386]
[201.31396484 91.46814728]
[207.97227478 104.90938568]
[210.47729492 119.69873810]
[208.61672974 134.58290100]
[202.54826355 148.30053711]
[192.78613281 159.68917847]
[180.15765381 167.78369141]
[165.73297119 171.89814758]
[150.73449707 171.68383789]
[136.43325806 167.15896606]
[124.04119110 158.70693970]
[114.60843658 147.04405212]
[108.93436432 133.15863037]
[107.50000000 118.22348022]
[107.50000000 133.22348022]
[107.50000000 148.22348022]
[107.50000000 163.22348022]
[107.50000000 178.22348022]
[107.50000000 193.22348022]
[107.50000000 208.22348022]
[107.50000000 223.22348022]
[107.50000000 238.22348022]
[107.50000000 253.22348022]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[56 121]
[57 120]
[58 119]
[59 118]
[62 115]
[63 114]
[64 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
