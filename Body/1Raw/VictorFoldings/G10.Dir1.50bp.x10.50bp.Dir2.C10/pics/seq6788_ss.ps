%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUxxxxxxxxxxAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.55029297]
[92.50000000 237.55029297]
[92.50000000 222.55029297]
[92.50000000 207.55029297]
[92.50000000 192.55029297]
[92.50000000 177.55029297]
[92.50000000 162.55029297]
[92.50000000 147.55029297]
[92.50000000 132.55029297]
[92.50000000 117.55028534]
[79.07195282 110.86392212]
[65.64510345 104.17813873]
[53.67484283 113.21765137]
[41.70458603 122.25717163]
[29.73432541 131.29669189]
[17.76406670 140.33621216]
[15.44507694 155.73945618]
[3.17676163 164.73629761]
[-11.49358940 162.43057251]
[-23.46384811 171.47009277]
[-29.35423470 186.77484131]
[-45.59362030 189.05836487]
[-55.47631454 175.97155762]
[-48.83584976 160.97702026]
[-32.50336838 159.49983215]
[-20.53310966 150.46031189]
[-18.73608589 135.71899414]
[-6.72531223 126.38111877]
[8.72454834 128.36595154]
[20.69480705 119.32643890]
[32.66506577 110.28691864]
[44.63532257 101.24739838]
[56.60558319 92.20787811]
[59.05850983 77.40979767]
[50.64509964 64.99148560]
[42.23168945 52.57316971]
[33.81827927 40.15485382]
[25.40486908 27.73653984]
[16.99145889 15.31822681]
[3.54281974 22.01281738]
[-10.67814636 26.85508537]
[-25.41765022 29.75861549]
[-40.41264725 30.67159081]
[-55.39553070 29.57771873]
[-70.09892273 26.49651909]
[-84.26041412 21.48298073]
[-97.62728119 14.62657642]
[-109.96097565 6.04966545]
[-121.04138947 -4.09468651]
[-130.67077637 -15.62544155]
[-138.67729187 -28.33682060]
[-144.91806030 -42.00197220]
[-149.28167725 -56.37702560]
[-151.69030762 -71.20544434]
[-152.10093689 -86.22259521]
[-150.50624084 -101.16048431]
[-146.93469238 -115.75251770]
[-141.45002747 -129.73828125]
[-134.15011597 -142.86820984]
[-125.16524506 -154.90795898]
[-114.65574646 -165.64265442]
[-102.80918884 -174.88075256]
[-89.83697510 -182.45738220]
[-75.97061920 -188.23731995]
[-61.45758438 -192.11741638]
[-46.55686188 -194.02842712]
[-31.53438187 -193.93624878]
[-16.65823364 -191.84252930]
[-2.19390011 -187.78463745]
[11.60048485 -181.83497620]
[24.47874451 -174.09974670]
[36.21104813 -164.71696472]
[46.58802795 -153.85411072]
[55.42448425 -141.70501709]
[62.56272507 -128.48651123]
[67.87535858 -114.43448639]
[71.26757812 -99.79972076]
[72.67884064 -84.84339142]
[72.08396149 -69.83241272]
[69.49356079 -55.03466415]
[64.95386505 -40.71424103]
[58.54589081 -27.12669754]
[50.38399506 -14.51452541]
[40.61383438 -3.10280252]
[29.40977287 6.90481615]
[37.82318497 19.32312965]
[46.23659515 31.74144554]
[54.65000534 44.15975952]
[63.06341553 56.57807159]
[71.47682190 68.99639130]
[119.35800171 85.54216766]
[134.13011169 82.93744659]
[148.90223694 80.33272552]
[156.95762634 70.20779419]
[169.35899353 68.36997223]
[179.34309387 75.26778412]
[194.16557312 72.96691132]
[208.98806763 70.66603851]
[218.31829834 58.19268799]
[233.38317871 56.07042313]
[245.21711731 65.04225159]
[260.03958130 62.74137497]
[274.86209106 60.44049835]
[279.02001953 57.08388138]
[283.59451294 55.82710266]
[287.70019531 56.46975708]
[290.66522217 58.48364258]
[305.60125732 57.09961700]
[313.40866089 43.68977737]
[327.62066650 37.46089554]
[342.77239990 40.80810165]
[353.03778076 52.44433212]
[354.46951294 67.89521027]
[346.51708984 81.21956635]
[332.23837280 87.29391479]
[317.12380981 83.78253174]
[306.98526001 72.03562927]
[292.04925537 73.41965485]
[277.16296387 75.26297760]
[262.34045410 77.56385803]
[247.51799011 79.86473083]
[238.96076965 92.00184631]
[223.96144104 94.54640961]
[211.28894043 85.48851776]
[196.46646118 87.78939056]
[181.64396667 90.09027100]
[168.62358093 101.81690216]
[151.50695801 95.10484314]
[136.73483276 97.70956421]
[121.96272278 100.31428528]
[136.17524719 105.11055756]
[151.11547852 103.77296448]
[165.03233337 109.36949158]
[174.88702393 120.67813110]
[178.52772522 135.22959900]
[175.15950012 149.84654236]
[165.51780701 161.33731079]
[151.70794678 167.19285583]
[136.74531555 166.13459778]
[123.89707184 158.39363098]
[115.96866608 145.66020203]
[114.69138336 130.71401978]
[107.50000000 117.55028534]
[107.50000000 132.55029297]
[107.50000000 147.55029297]
[107.50000000 162.55029297]
[107.50000000 177.55029297]
[107.50000000 192.55029297]
[107.50000000 207.55029297]
[107.50000000 222.55029297]
[107.50000000 237.55029297]
[107.50000000 252.55029297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[19 26]
[20 25]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[91 130]
[92 129]
[93 128]
[96 126]
[97 125]
[98 124]
[101 121]
[102 120]
[103 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
