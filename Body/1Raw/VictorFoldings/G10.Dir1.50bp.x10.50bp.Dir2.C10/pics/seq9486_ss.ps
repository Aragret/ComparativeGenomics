%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUxxxxxxxxxxUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[11.45011044 411.86840820]
[11.45011044 396.86840820]
[11.45011044 381.86840820]
[11.45011044 366.86840820]
[11.45011044 351.86840820]
[11.45011044 336.86840820]
[11.45011044 321.86840820]
[11.45011044 306.86840820]
[11.45011044 291.86840820]
[11.45011044 276.86840820]
[-14.65096283 267.42492676]
[-34.01251221 247.53584290]
[-47.67928696 253.71800232]
[-61.34606552 259.90017700]
[-74.95110321 266.21704102]
[-88.49307251 272.66802979]
[-102.03503418 279.11901855]
[-115.57700348 285.56997681]
[-117.30953217 297.39562988]
[-124.48230743 306.80517578]
[-135.20613098 311.51242065]
[-146.74812317 310.44488525]
[-156.22793579 303.98596191]
[-170.01419067 309.89691162]
[-183.80044556 315.80783081]
[-187.10478210 330.96902466]
[-198.71192932 341.26724243]
[-214.15870667 342.74267578]
[-227.50549316 334.82797241]
[-233.62020874 320.56646729]
[-230.15159607 305.44204712]
[-218.43341064 295.27032471]
[-202.97154236 293.96255493]
[-189.71139526 302.02160645]
[-175.92514038 296.11065674]
[-162.13888550 290.19970703]
[-156.42463684 272.84887695]
[-139.57705688 265.00161743]
[-122.02798462 272.02801514]
[-108.48601532 265.57705688]
[-94.94404602 259.12606812]
[-81.40207672 252.67507935]
[-76.69080353 246.92871094]
[-67.52823639 246.23339844]
[-53.86145782 240.05122375]
[-40.19467926 233.86906433]
[-42.93386078 219.49024963]
[-42.22525406 204.85932922]
[-38.10335159 190.79203796]
[-30.79309845 178.07385254]
[-20.69761276 167.41616821]
[-8.37596130 159.41644287]
[5.48780394 154.52478027]
[20.12261200 153.01852417]
[34.71326447 154.98663330]
[48.44584274 160.32435608]
[57.06970978 148.05125427]
[65.69357300 135.77816772]
[74.31744385 123.50506592]
[63.26449966 100.19985199]
[71.20085907 74.21275330]
[95.75513458 59.64444351]
[95.16253662 44.65615082]
[94.56993103 29.66786385]
[86.29347992 16.18413925]
[93.52192688 3.16112852]
[92.92932892 -11.82716084]
[83.98384094 -21.16734505]
[83.82747650 -33.69775772]
[91.99702454 -42.66392517]
[91.70066833 -57.66099930]
[77.43223572 -62.83557892]
[65.99916077 -72.81803131]
[58.94768524 -86.25830841]
[57.23145294 -101.33872986]
[61.08256912 -116.01978302]
[69.98020935 -128.31597900]
[82.72103119 -136.56436157]
[97.58195496 -139.64939880]
[112.55315399 -137.15386963]
[125.60989380 -129.41528320]
[134.98637390 -117.48019409]
[139.41447449 -102.96274567]
[138.29536438 -87.82630157]
[131.78036499 -74.11793518]
[120.75060272 -63.69159698]
[106.69773865 -57.95735550]
[106.99409485 -42.96028519]
[116.87134552 -28.48232269]
[107.91761780 -12.41976070]
[108.51021576 2.56852937]
[116.74428558 14.98019123]
[109.55822754 29.07526398]
[110.15082550 44.06355286]
[110.74342346 59.05184174]
[124.34845734 65.36872101]
[136.18077087 56.14937973]
[148.01309204 46.93003464]
[159.84539795 37.71069336]
[161.54315186 21.99785614]
[173.90650940 12.15291500]
[189.60052490 14.01669598]
[199.31419373 26.48345184]
[197.28459167 42.15687561]
[184.71583557 51.73820496]
[169.06474304 49.54300690]
[157.23243713 58.76235199]
[145.40011597 67.98169708]
[133.56781006 77.20104218]
[133.75782776 83.22379303]
[132.98355103 88.85694885]
[147.89506531 87.23008728]
[162.80657959 85.60321808]
[177.71809387 83.97635651]
[190.62011719 73.85361481]
[205.73475647 80.21597290]
[207.51336670 96.51838684]
[194.12626648 105.99032593]
[179.34495544 98.88787079]
[164.43344116 100.51473236]
[149.52192688 102.14160156]
[134.61041260 103.76846313]
[133.10334778 110.78192139]
[130.19087219 117.33762360]
[125.99661255 123.15724182]
[120.69865417 127.99370575]
[114.52191925 131.64167786]
[107.72864532 133.94627380]
[100.60724640 134.80967712]
[93.46006012 134.19519043]
[86.59053802 132.12893677]
[77.96667480 144.40202332]
[69.34280396 156.67512512]
[60.71894073 168.94822693]
[67.25879669 175.85037231]
[72.67169952 183.66206360]
[76.83317566 192.20120239]
[79.64790344 201.26898193]
[81.05187988 210.65457153]
[81.01390076 220.13992310]
[79.53624725 229.50488281]
[76.65459442 238.53234863]
[72.43714142 247.01322937]
[66.98301697 254.75129700]
[60.41996002 261.56777954]
[52.90127945 267.30541992]
[44.60232162 271.83221436]
[35.71636581 275.04428101]
[26.45011139 276.86840820]
[26.45011139 291.86840820]
[26.45011139 306.86840820]
[26.45011139 321.86840820]
[26.45011139 336.86840820]
[26.45011139 351.86840820]
[26.45011139 366.86840820]
[26.45011139 381.86840820]
[26.45011139 396.86840820]
[26.45011139 411.86840820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[12 46]
[13 45]
[14 44]
[15 42]
[16 41]
[17 40]
[18 39]
[23 36]
[24 35]
[25 34]
[56 134]
[57 133]
[58 132]
[59 131]
[62 95]
[63 94]
[64 93]
[66 91]
[67 90]
[70 88]
[71 87]
[96 109]
[97 108]
[98 107]
[99 106]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
