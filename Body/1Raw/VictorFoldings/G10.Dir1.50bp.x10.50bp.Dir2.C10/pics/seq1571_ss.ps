%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAxxxxxxxxxxCCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.48029327 448.94940186]
[104.48029327 433.94940186]
[104.48029327 418.94940186]
[104.48029327 403.94940186]
[104.48029327 388.94940186]
[104.48029327 373.94940186]
[104.48029327 358.94940186]
[104.48029327 343.94940186]
[104.48029327 328.94940186]
[104.48029327 313.94940186]
[88.15382385 310.24893188]
[73.14708710 302.81204224]
[60.30216217 292.05197144]
[50.34076309 278.56851196]
[43.82372284 263.11459351]
[41.11940765 246.55424500]
[42.38290405 229.81436157]
[47.54710388 213.83267212]
[56.32630157 199.50537109]
[68.23195648 187.63674927]
[82.59990692 178.89408875]
[98.62739563 173.77018738]
[97.38051605 158.82209778]
[96.13364410 143.87400818]
[94.88677216 128.92591858]
[76.34385681 117.41381073]
[70.86112976 96.28781891]
[56.95857620 90.65586090]
[43.05601883 85.02390289]
[29.15346527 79.39194489]
[15.25090790 73.75998688]
[22.97661781 86.61741638]
[23.97050285 101.58444977]
[18.01272583 115.35053253]
[6.42108965 124.87071991]
[-8.24044037 128.03924561]
[-22.72887039 124.15524292]
[-33.83949280 114.07784271]
[-39.11473846 100.03605652]
[-37.38777542 85.13579559]
[-29.04058838 72.67287445]
[-15.91950035 65.40396881]
[-0.92483366 64.93729401]
[-13.18720150 56.29817581]
[-28.92494965 54.67526627]
[-34.87315369 41.01993179]
[-47.13552094 32.38081741]
[-59.39789200 23.74169922]
[-71.66025543 15.10258389]
[-87.18754578 18.04859352]
[-100.20292664 9.08336067]
[-102.98460388 -6.47420359]
[-93.88226318 -19.39407158]
[-78.29616547 -22.01111412]
[-65.47325134 -12.77268600]
[-63.02114105 2.84021544]
[-50.75877380 11.47933197]
[-38.49640656 20.11844826]
[-26.23403740 28.75756454]
[-11.37337589 29.76254845]
[-4.54808569 44.03580856]
[7.71428251 52.67492294]
[20.88286591 59.85743332]
[34.78541946 65.48938751]
[48.68797684 71.12134552]
[62.59053421 76.75330353]
[76.49308777 82.38526154]
[83.84168243 69.12880707]
[98.52141571 59.71300507]
[100.69824982 44.87179947]
[87.23213959 37.94773865]
[76.74569702 27.02467537]
[70.37641907 13.28746319]
[68.81519318 -1.77378798]
[72.23136139 -16.52534676]
[80.25437927 -29.36707497]
[92.01395416 -38.90599442]
[106.23450470 -44.10740280]
[121.37349701 -44.40708160]
[135.78875732 -39.77252579]
[147.91662598 -30.70646095]
[156.44155884 -18.19230270]
[160.43884277 -3.58749533]
[159.47488403 11.52374268]
[153.65425110 25.50225639]
[143.60829163 36.83176041]
[130.42675781 44.28331757]
[115.53945160 47.04863358]
[113.36261749 61.88983917]
[119.01212311 66.82270050]
[128.87802124 55.52384949]
[140.17671204 65.38992310]
[130.31112671 76.68842316]
[135.96063232 81.62128448]
[150.37284851 77.46340179]
[164.78506470 73.30551147]
[179.19728088 69.14762115]
[179.68252563 54.02744675]
[184.81832886 39.79794693]
[194.10153198 27.85318184]
[206.62265015 19.36338043]
[221.15499878 15.16028404]
[236.27485657 15.65567207]
[250.50090027 20.80101013]
[262.43945312 30.09221077]
[270.92086792 42.61901474]
[275.11422729 57.15417862]
[274.60870361 72.27368927]
[269.45382690 86.49629211]
[260.15463257 98.42861176]
[247.62214661 106.90162659]
[233.08418274 111.08524323]
[217.96501160 110.56958771]
[203.74586487 105.40518951]
[191.81977844 96.09799957]
[183.35516357 83.55983734]
[168.94294739 87.71772766]
[154.53073120 91.87561798]
[140.11851501 96.03350067]
[134.51809692 112.36970520]
[123.31787872 123.38076782]
[109.83485413 127.67904663]
[111.08173370 142.62713623]
[112.32860565 157.57522583]
[113.57547760 172.52330017]
[126.85208130 174.10305786]
[139.59382629 178.13880920]
[151.35073853 184.48622131]
[161.70797729 192.91934204]
[170.30049133 203.13865662]
[176.82580566 214.78173828]
[181.05473328 227.43611145]
[182.83943176 240.65380859]
[182.11851501 253.96726990]
[178.91921997 266.90591431]
[173.35635376 279.01269531]
[165.62817383 289.86032104]
[156.00935364 299.06628418]
[144.84114075 306.30633545]
[132.51934814 311.32598877]
[119.48029327 313.94940186]
[119.48029327 328.94940186]
[119.48029327 343.94940186]
[119.48029327 358.94940186]
[119.48029327 373.94940186]
[119.48029327 388.94940186]
[119.48029327 403.94940186]
[119.48029327 418.94940186]
[119.48029327 433.94940186]
[119.48029327 448.94940186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 125]
[23 124]
[24 123]
[25 122]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
[69 89]
[70 88]
[94 119]
[95 118]
[96 117]
[97 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
