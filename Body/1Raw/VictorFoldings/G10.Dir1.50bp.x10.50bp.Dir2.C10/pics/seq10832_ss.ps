%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUxxxxxxxxxxGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.25051880 174.78550720]
[105.42904663 159.80802917]
[105.95714569 144.81166077]
[95.07832336 155.13885498]
[84.19949341 165.46606445]
[73.32067108 175.79327393]
[62.44184494 186.12046814]
[51.56301880 196.44767761]
[40.68419647 206.77488708]
[29.80536842 217.10208130]
[18.92654419 227.42929077]
[8.04771900 237.75650024]
[-2.83110642 248.08370972]
[1.88268077 262.60067749]
[-0.17753758 277.72412109]
[-8.60270309 290.45123291]
[-21.71999359 298.25503540]
[-36.92496109 299.58609009]
[-51.19865036 294.18011475]
[-61.70700455 283.11047363]
[-66.36358643 268.57504272]
[-64.24382782 253.45982361]
[-55.76861191 240.76599121]
[-42.62068939 233.01390076]
[-27.41059875 231.74273682]
[-13.15831089 237.20487976]
[-2.27948594 226.87767029]
[8.59933949 216.55046082]
[19.47816467 206.22326660]
[30.35698891 195.89605713]
[41.23581314 185.56884766]
[52.11463928 175.24165344]
[62.99346542 164.91444397]
[73.87229156 154.58723450]
[84.75111389 144.26004028]
[95.62994385 133.93283081]
[93.55099487 126.72672272]
[89.39311218 112.31450653]
[87.31416321 105.10839844]
[72.60620117 102.16291046]
[57.25223541 107.92378998]
[44.75978088 97.29972839]
[47.98000717 81.21985626]
[63.60022354 76.22576904]
[75.55168915 87.45495605]
[90.25965118 90.40043640]
[96.46532440 76.74358368]
[102.67046356 63.08795166]
[90.77808380 53.94621658]
[78.88570404 44.80448532]
[63.24930954 47.10203171]
[50.61813354 37.60313797]
[48.48603058 21.94332886]
[58.11793900 9.41328812]
[73.79941559 7.44686890]
[86.22692108 17.21071243]
[88.02743530 32.91210556]
[99.91981506 42.05383682]
[111.81219482 51.19557190]
[118.67222595 48.16406631]
[120.28121948 33.25061035]
[132.39227295 42.10105133]
[139.25230408 39.06954575]
[140.49917603 24.12145996]
[141.74604797 9.17337227]
[142.99293518 -5.77471447]
[144.23980713 -20.72280121]
[145.48667908 -35.67088699]
[131.53047180 -41.50864029]
[120.06260681 -51.37491989]
[112.20660400 -64.30312347]
[108.73211670 -79.02667999]
[109.97952271 -94.10311890]
[115.82662964 -108.05541992]
[125.70058441 -119.51666260]
[138.63404846 -127.36399841]
[153.35992432 -130.82862854]
[168.43553162 -129.57112122]
[182.38391113 -123.71466064]
[193.83853149 -113.83302307]
[201.67720032 -100.89430237]
[205.13195801 -86.16610718]
[203.86434937 -71.09134674]
[197.99855042 -57.14690018]
[188.10923767 -45.69890213]
[175.16526794 -37.86890411]
[160.43476868 -34.42401505]
[159.18789673 -19.47592735]
[157.94100952 -4.52783966]
[156.69413757 10.42024708]
[155.44726562 25.36833382]
[154.20039368 40.31642151]
[165.26763916 30.19139671]
[177.19989014 21.10177231]
[189.90061951 13.12108707]
[203.26708984 6.31390476]
[217.19113159 0.73529774]
[231.56011963 -3.56960177]
[246.25779724 -6.56596661]
[261.16525269 -8.22955418]
[276.16189575 -8.54690742]
[291.12640381 -7.51545811]
[305.93768311 -5.14355040]
[320.47592163 -1.45037436]
[334.62350464 3.53419185]
[348.26599121 9.76982212]
[361.29296875 17.20606804]
[373.59906006 25.78276825]
[385.08471680 35.43053818]
[395.65704346 46.07131958]
[405.23046875 57.61903381]
[413.72753906 69.98024750]
[421.07952881 83.05496979]
[427.22695923 96.73740387]
[432.12008667 110.91687012]
[435.71932983 125.47865295]
[437.99557495 140.30493164]
[438.93038940 155.27578735]
[438.51623535 170.27006531]
[436.75643921 185.16647339]
[433.66525269 199.84451294]
[429.26766968 214.18540955]
[423.59930420 228.07315063]
[416.70596313 241.39538574]
[408.64343262 254.04432678]
[399.47698975 265.91766357]
[389.28073120 276.91931152]
[378.13714600 286.96026611]
[366.13644409 295.95932007]
[353.37567139 303.84362793]
[339.95803833 310.54943848]
[325.99218750 316.02249146]
[311.59100342 320.21850586]
[296.87106323 323.10354614]
[281.95144653 324.65423584]
[266.95281982 324.85806274]
[251.99656677 323.71337891]
[237.20367432 321.22943115]
[222.69380188 317.42630005]
[208.58435059 312.33480835]
[194.98947144 305.99609375]
[182.01914978 298.46145630]
[169.77832031 289.79183960]
[158.36601257 280.05740356]
[147.87454224 269.33691406]
[138.38880920 257.71707153]
[129.98554993 245.29188538]
[122.73272705 232.16189575]
[116.68904877 218.43330383]
[111.90338898 204.21720886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[39 46]
[40 45]
[48 59]
[49 58]
[50 57]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
