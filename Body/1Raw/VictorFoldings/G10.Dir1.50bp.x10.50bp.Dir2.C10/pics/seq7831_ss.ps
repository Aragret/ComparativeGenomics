%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACAUUAGGCUUAAAAACAGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACxxxxxxxxxxCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.15843964 227.83697510]
[94.84638214 212.84022522]
[94.53432465 197.84346008]
[94.22227478 182.84671021]
[93.91021729 167.84996033]
[93.59815979 152.85321045]
[93.28610229 137.85644531]
[92.97404480 122.85969543]
[92.66198730 107.86294556]
[89.41116333 93.21944427]
[83.34815216 79.49938965]
[77.28514099 65.77933502]
[71.22212219 52.05928040]
[65.15911102 38.33922958]
[59.09609985 24.61917496]
[45.02438354 29.82786751]
[30.65870476 34.16040802]
[16.05355835 37.60036850]
[1.26434410 40.13469315]
[-13.65283489 41.75376892]
[-28.64139366 42.45145798]
[-43.64447403 42.22511292]
[-58.60516357 41.07558823]
[-73.46671295 39.00724792]
[-88.17274475 36.02793884]
[-102.66747284 32.14896011]
[-116.89591217 27.38502884]
[-130.80409241 21.75421333]
[-144.33926392 15.27787495]
[-157.45005798 7.98057985]
[-170.08677673 -0.10998975]
[-182.20144653 -8.96314335]
[-193.74812317 -18.54529762]
[-204.68302917 -28.82010460]
[-214.96466064 -39.74858856]
[-224.55401611 -51.28929138]
[-233.41473389 -63.39843750]
[-241.51318359 -76.03009033]
[-248.81866455 -89.13633728]
[-255.30343628 -102.66745758]
[-260.94293213 -116.57212830]
[-265.71575928 -130.79759216]
[-269.60375977 -145.28990173]
[-272.59225464 -159.99406433]
[-274.66986084 -174.85432434]
[-275.82873535 -189.81428528]
[-276.06445312 -204.81723022]
[-275.37609863 -219.80621338]
[-273.76632690 -234.72441101]
[-271.24124146 -249.51519775]
[-267.81039429 -264.12249756]
[-263.48681641 -278.49087524]
[-258.28692627 -292.56582642]
[-252.23039246 -306.29397583]
[-245.34024048 -319.62326050]
[-237.64259338 -332.50308228]
[-229.16665649 -344.88461304]
[-219.94456482 -356.72085571]
[-210.01132202 -367.96691895]
[-199.40458679 -378.58016968]
[-188.16462708 -388.52032471]
[-176.33404541 -397.74969482]
[-163.95773315 -406.23321533]
[-151.08262634 -413.93878174]
[-137.75759888 -420.83712769]
[-124.03316498 -426.90206909]
[-109.96139526 -432.11062622]
[-95.59568024 -436.44302368]
[-80.99049377 -439.88284302]
[-66.20125580 -442.41702271]
[-51.28406143 -444.03594971]
[-36.29549789 -444.73348999]
[-21.29241943 -444.50698853]
[-6.33173990 -443.35733032]
[8.52978802 -441.28884888]
[23.23579025 -438.30938721]
[37.73048019 -434.43026733]
[51.95887756 -429.66619873]
[65.86700439 -424.03524780]
[79.40210724 -417.55877686]
[92.51284027 -410.26135254]
[105.14945984 -402.17065430]
[117.26404572 -393.31738281]
[128.81063843 -383.73510742]
[139.74543762 -373.46020508]
[150.02696228 -362.53161621]
[159.61621094 -350.99081421]
[168.47679138 -338.88159180]
[176.57513428 -326.24984741]
[183.88047791 -313.14352417]
[190.36512756 -299.61233521]
[196.00448608 -285.70761108]
[200.77716064 -271.48211670]
[204.66503906 -256.98977661]
[207.65338135 -242.28556824]
[209.73085022 -227.42529297]
[210.88955688 -212.46530151]
[211.12512207 -197.46237183]
[210.43663025 -182.47338867]
[208.82672119 -167.55522156]
[206.30148315 -152.76445007]
[202.87049866 -138.15719604]
[198.54678345 -123.78885651]
[193.34672546 -109.71394348]
[187.29006958 -95.98584747]
[180.39979553 -82.65663910]
[172.70202637 -69.77689362]
[164.22595215 -57.39545441]
[155.00375366 -45.55929947]
[145.07040405 -34.31332016]
[134.46356201 -23.70017815]
[123.22349548 -13.76013565]
[111.39282227 -4.53089762]
[99.01642609 3.95252681]
[86.14125824 11.65795612]
[72.81615448 18.55616188]
[78.87916565 32.27621460]
[84.94217682 45.99626923]
[91.00519562 59.71632385]
[97.06820679 73.43637848]
[103.13121796 87.15643311]
[105.12845612 72.28998566]
[111.34309387 58.63794708]
[121.24311829 47.36898422]
[133.98104858 39.44779205]
[148.46643066 35.55246735]
[163.45925903 36.01646423]
[177.67604065 40.80006409]
[189.89976501 49.49377060]
[199.08401489 61.35334778]
[204.44256592 75.36355591]
[205.51669312 90.32505035]
[202.21443176 104.95703888]
[194.81851196 118.00695801]
[183.96202087 128.35765076]
[170.57437134 135.12304688]
[155.80158997 137.72398376]
[140.90830994 135.93782043]
[127.16948700 129.91746521]
[115.76123047 120.17828369]
[107.65874481 107.55088806]
[107.97080231 122.54763794]
[108.28285980 137.54438782]
[108.59490967 152.54115295]
[108.90696716 167.53790283]
[109.21902466 182.53465271]
[109.53108215 197.53140259]
[109.84313965 212.52816772]
[110.15519714 227.52491760]
[112.74619293 246.73263550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 121]
[11 120]
[12 119]
[13 118]
[14 117]
[15 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
