%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGxxxxxxxxxxACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[217.69210815 504.28710938]
[217.06813049 489.30010986]
[216.44415283 474.31307983]
[215.82017517 459.32608032]
[215.19619751 444.33905029]
[214.57221985 429.35205078]
[213.94824219 414.36502075]
[213.32426453 399.37802124]
[211.14743042 384.53680420]
[207.44126892 370.00186157]
[203.73510742 355.46691895]
[191.81271362 350.48159790]
[184.85180664 339.36315918]
[185.59692383 326.07131958]
[193.99934387 315.49508667]
[183.57641602 304.85498047]
[187.98118591 289.65930176]
[184.57821655 275.05041504]
[181.17523193 260.44152832]
[177.77226257 245.83262634]
[173.16668701 231.55715942]
[167.39042664 217.71394348]
[161.61415100 203.87072754]
[144.77783203 203.47705078]
[129.74351501 195.76707458]
[119.53272247 182.23640442]
[116.22103119 165.55581665]
[120.51622009 149.04409790]
[131.60772705 136.00773621]
[125.26059723 122.41678619]
[118.91346741 108.82583618]
[111.54851532 116.52386475]
[101.66625977 119.37614441]
[92.04651642 116.96385193]
[85.20790863 110.29837036]
[82.74892426 101.45206451]
[68.73220825 96.11054993]
[54.71549606 90.76903534]
[40.69878387 85.42752838]
[25.04798698 87.74337006]
[15.91027737 75.98107910]
[1.89356470 70.63956451]
[-11.02549076 79.23477936]
[-26.52793884 78.56118011]
[-38.65277100 68.87779236]
[-42.73774338 53.90806961]
[-37.21210098 39.40817642]
[-24.20056343 30.95361710]
[-8.70633507 31.79534531]
[3.31273794 41.60969925]
[7.23507738 56.62285614]
[21.25179100 61.96436691]
[35.90001678 59.26645660]
[46.04029465 71.41081238]
[60.05700684 76.75232697]
[74.07372284 82.09383392]
[88.09043121 87.43534851]
[100.60578918 80.91788483]
[115.29003143 85.79333496]
[117.15764618 70.91004944]
[119.02526093 56.02677155]
[109.65464020 67.73965454]
[97.95223236 77.12333679]
[84.48298645 83.72481537]
[69.89717102 87.22537231]
[54.89894485 87.45602417]
[40.21238327 84.40563202]
[26.54651451 78.22145844]
[14.56108952 69.20204926]
[4.83473492 57.78285599]
[-2.16298890 44.51515579]
[-6.09424973 30.03948212]
[-6.76925707 15.05467701]
[-4.15542364 0.28417045]
[1.62106204 -13.55895805]
[10.28132629 -25.80640030]
[21.40727615 -35.86687851]
[34.46177673 -43.25470352]
[48.81459808 -47.61321259]
[63.77281570 -48.73198318]
[78.61429596 -46.55700684]
[92.62252808 -41.19328690]
[105.12122345 -32.89976501]
[115.50699615 -22.07683563]
[123.27843475 -9.24699688]
[128.06036377 4.97035837]
[129.62190247 19.88885498]
[127.88816833 34.78621674]
[137.15312195 22.98957825]
[138.93983459 6.68805456]
[154.05764771 0.33320722]
[166.95463562 10.46235847]
[164.36349487 26.65550613]
[148.94976807 32.25452805]
[139.68481445 44.05116653]
[133.90853882 57.89438629]
[132.04092407 72.77766418]
[130.17330933 87.66094208]
[132.50440979 102.47870636]
[138.85154724 116.06965637]
[145.19866943 129.66059875]
[158.45840454 128.87390137]
[171.15988159 132.65034485]
[181.78436279 140.51554871]
[189.06921387 151.50761414]
[192.15805054 164.29470825]
[190.70124817 177.33641052]
[184.89546204 189.06933594]
[175.45736694 198.09445190]
[181.23364258 211.93766785]
[187.00991821 225.78088379]
[192.28080750 211.73747253]
[204.71041870 203.34077454]
[219.70628357 203.69322205]
[231.72770691 212.66458130]
[236.33302307 226.94012451]
[231.82064819 241.24531555]
[219.85781860 250.29467773]
[204.86457825 250.74464417]
[192.38114929 242.42964172]
[195.78413391 257.03854370]
[199.18710327 271.64743042]
[202.59008789 286.25631714]
[213.25642395 297.94134521]
[208.60824585 312.09210205]
[223.61111450 321.02804565]
[227.46531677 337.71423340]
[218.27003479 351.76077271]
[221.97619629 366.29571533]
[225.68235779 380.83062744]
[231.85131836 367.15789795]
[243.94931030 358.29006958]
[258.84481812 356.52252197]
[272.68215942 362.31283569]
[281.87960815 374.16220093]
[284.05642700 389.00341797]
[278.64913940 402.99487305]
[267.05740356 412.51495361]
[252.28173828 415.09939575]
[238.14674377 410.07925415]
[228.31127930 398.75402832]
[228.93525696 413.74105835]
[229.55923462 428.72805786]
[230.18321228 443.71508789]
[230.80718994 458.70208740]
[231.43116760 473.68911743]
[232.05514526 488.67611694]
[232.67912292 503.66314697]
[239.37910461 519.23706055]
[226.26858521 529.98651123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 130]
[10 129]
[11 128]
[15 125]
[17 123]
[18 122]
[19 121]
[20 120]
[21 111]
[22 110]
[23 109]
[29 101]
[30 100]
[31 99]
[36 57]
[37 56]
[38 55]
[39 54]
[41 52]
[42 51]
[59 98]
[60 97]
[61 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
