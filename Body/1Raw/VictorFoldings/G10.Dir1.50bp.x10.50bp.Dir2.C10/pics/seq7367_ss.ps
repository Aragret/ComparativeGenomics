%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUxxxxxxxxxxAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.85279846 127.36540222]
[82.99116516 136.54699707]
[71.12953186 145.72857666]
[59.26789474 154.91017151]
[49.38246918 166.19194031]
[41.83863068 179.15690613]
[34.29479218 192.12188721]
[26.75095177 205.08685303]
[19.20711136 218.05183411]
[11.66327286 231.01679993]
[4.11943340 243.98176575]
[1.37961698 260.71286011]
[-15.45608330 262.71176147]
[-22.03743744 247.08735657]
[-8.84553814 236.43792725]
[-1.30169868 223.47296143]
[6.24214077 210.50799561]
[13.78598022 197.54301453]
[21.32981873 184.57804871]
[28.87365913 171.61306763]
[36.41749954 158.64810181]
[31.94784546 152.62545776]
[23.25434685 164.84933472]
[8.94236946 160.35853577]
[8.79092026 145.35929871]
[23.00854111 140.58018494]
[18.53888893 134.55754089]
[3.94451523 138.02224731]
[-10.64985847 141.48696899]
[-25.24423218 144.95169067]
[-34.85153961 157.80000305]
[-50.89065170 158.15545654]
[-61.05773926 145.74539185]
[-57.55348206 130.08973694]
[-43.06604385 123.19816589]
[-28.70894814 130.35731506]
[-14.11457443 126.89259338]
[0.47979906 123.42787933]
[15.07417297 119.96316528]
[40.00468826 126.21614838]
[50.08630371 143.04853821]
[61.94794083 133.86694336]
[73.80957794 124.68535614]
[85.67121124 115.50376129]
[84.15368652 100.58072662]
[70.68662262 93.97481537]
[57.21955109 87.36889648]
[43.75248337 80.76298523]
[26.86926651 79.21595764]
[23.68209839 62.56428146]
[38.80072403 54.89202499]
[50.35839462 67.29592133]
[63.82546234 73.90183258]
[77.29253387 80.50774384]
[90.75959778 87.11365509]
[95.81562042 81.57410431]
[105.92765808 70.49499512]
[110.98368073 64.95544434]
[103.17863464 52.14602280]
[95.37358093 39.33660507]
[87.56852722 26.52718735]
[79.76348114 13.71776867]
[66.35845947 3.33789659]
[72.62180328 -12.41668606]
[89.49455261 -10.75941849]
[92.57289886 5.91271830]
[100.37795258 18.72213554]
[108.18299866 31.53155518]
[115.98805237 44.34097290]
[123.79309845 57.15039062]
[131.28962708 57.37837219]
[130.58122253 42.39511108]
[129.87280273 27.41184998]
[129.16439819 12.42858696]
[122.15133667 -0.83101511]
[127.27500153 -14.92881870]
[141.16510010 -20.59144020]
[154.68486023 -14.09406757]
[158.94114685 0.28939614]
[151.13549805 13.09677029]
[149.51789856 28.00929451]
[147.90029907 42.92181778]
[146.28269958 57.83434296]
[153.77923584 58.06232452]
[162.34826660 45.75087357]
[170.91728210 33.43942261]
[179.48631287 21.12796974]
[188.05532837 8.81651878]
[196.62435913 -3.49493289]
[205.19337463 -15.80638504]
[206.03675842 -32.18383026]
[220.76280212 -39.40017700]
[234.22261047 -30.03186607]
[232.56990051 -13.71621227]
[217.50482178 -7.23736143]
[208.93580627 5.07409000]
[200.36677551 17.38554192]
[191.79776001 29.69699287]
[183.22872925 42.00844574]
[174.65971375 54.31989670]
[166.09068298 66.63134766]
[180.28312683 61.77598190]
[194.89759827 58.39702988]
[209.78094482 56.52990723]
[224.77717590 56.19417953]
[239.72917175 57.39336395]
[254.48020935 60.11489487]
[268.87573242 64.33025360]
[282.76486206 69.99526215]
[296.00201416 77.05054474]
[308.44854736 85.42218018]
[319.97396851 95.02243042]
[330.45748901 105.75068665]
[339.78927612 117.49452209]
[347.87152100 130.13087463]
[354.61953735 143.52729797]
[359.96261597 157.54342651]
[363.84472656 172.03234863]
[366.22521973 186.84225464]
[367.07913208 201.81793213]
[366.39749146 216.80244446]
[364.18750000 231.63874817]
[360.47229004 246.17137146]
[355.29077148 260.24801636]
[348.69726562 273.72116089]
[340.76089478 286.44961548]
[331.56475830 298.30001831]
[321.20532227 309.14813232]
[309.79107666 318.88027954]
[297.44165039 327.39453125]
[284.28649902 334.60159302]
[270.46343994 340.42593384]
[256.11737061 344.80657959]
[241.39860535 347.69760132]
[226.46139526 349.06866455]
[211.46228027 348.90542603]
[196.55845642 347.20959473]
[181.90609741 343.99893188]
[167.65875244 339.30712891]
[153.96572876 333.18328857]
[140.97053528 325.69165039]
[128.80934143 316.91067505]
[117.60961151 306.93240356]
[107.48870087 295.86138916]
[98.55268097 283.81365967]
[90.89518738 270.91549683]
[84.59646606 257.30203247]
[79.72254181 243.11596680]
[76.32447815 228.50592041]
[74.43788910 213.62504578]
[74.08255005 198.62924194]
[75.26217651 183.67570496]
[77.96441650 168.92111206]
[82.16093445 154.52009583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[27 39]
[28 38]
[29 37]
[30 36]
[45 55]
[46 54]
[47 53]
[48 52]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
