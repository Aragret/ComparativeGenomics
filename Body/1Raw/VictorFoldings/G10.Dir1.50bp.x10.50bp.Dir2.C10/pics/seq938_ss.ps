%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUxxxxxxxxxxUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.30538940 354.76062012]
[140.30538940 339.76062012]
[140.30538940 324.76062012]
[140.30538940 309.76062012]
[140.30538940 294.76062012]
[140.30538940 279.76062012]
[140.30538940 264.76062012]
[140.30538940 249.76062012]
[140.30538940 234.76062012]
[140.30538940 219.76062012]
[137.28590393 205.06767273]
[131.37057495 191.28329468]
[125.80999756 186.34774780]
[125.47817230 177.15911865]
[119.84341431 163.25769043]
[114.20866394 149.35626221]
[108.57390594 135.45484924]
[102.93914795 121.55342865]
[88.53899384 117.35396576]
[76.31501007 126.04730988]
[64.09103394 134.74066162]
[57.76518250 149.87062073]
[41.46711349 151.68858337]
[31.96288109 138.32440186]
[39.02962494 123.52597809]
[55.39768219 122.51667786]
[67.62166595 113.82333374]
[79.84564209 105.12998199]
[84.91240692 91.01162720]
[81.00565338 76.52931976]
[77.09890747 62.04700851]
[73.19215393 47.56470108]
[69.28540039 33.08238983]
[56.88457489 27.73612595]
[49.94461823 16.37951660]
[50.81853485 3.29439044]
[58.96141815 -6.73568535]
[55.34897995 -21.29419708]
[52.12245941 -24.39728546]
[50.27429581 -28.01138306]
[49.79345322 -31.62820053]
[50.50100327 -34.79751205]
[52.08477020 -37.17802811]
[49.66321182 -51.98127365]
[47.24165726 -66.78451538]
[44.82009888 -81.58776093]
[42.39854050 -96.39100647]
[39.97698593 -111.19425201]
[37.55542755 -125.99749756]
[33.05760574 -134.01689148]
[35.23797607 -141.12503052]
[33.11693192 -155.97431946]
[30.99588776 -170.82359314]
[28.87484550 -185.67288208]
[26.75380325 -200.52217102]
[15.04906273 -214.70240784]
[22.14566612 -230.72508240]
[19.72410965 -245.52832031]
[17.30255318 -260.33157349]
[4.75360394 -269.55987549]
[2.50867844 -284.60696411]
[11.38379288 -296.51361084]
[8.96223545 -311.31683350]
[-6.03001261 -313.16323853]
[-19.89423370 -319.15991211]
[-31.50651741 -328.82073975]
[-39.92550659 -341.36254883]
[-44.46871185 -355.76867676]
[-44.76783752 -370.87121582]
[-40.79863358 -385.44592285]
[-32.88286591 -398.31127930]
[-21.66222954 -408.42434692]
[-8.04633236 -414.96530151]
[6.86104631 -417.40386963]
[21.85143280 -415.54241943]
[35.70962143 -409.53182983]
[47.31219482 -399.85934448]
[55.71858215 -387.30908203]
[60.24731064 -372.89840698]
[60.53126526 -357.79556274]
[56.54742050 -343.22485352]
[48.61873245 -330.36746216]
[37.38794327 -320.26568604]
[23.76548004 -313.73840332]
[26.18703842 -298.93515015]
[38.39346695 -290.47711182]
[41.06014633 -275.49899292]
[32.10579681 -262.75311279]
[34.52735519 -247.94989014]
[36.94891357 -233.14663696]
[46.60786057 -225.80342102]
[48.71818161 -213.44738770]
[41.60308456 -202.64320374]
[43.72412872 -187.79393005]
[45.84516907 -172.94464111]
[47.96621323 -158.09536743]
[50.08725739 -143.24607849]
[52.35867310 -128.41905212]
[54.78023148 -113.61580658]
[57.20178604 -98.81256104]
[59.62334442 -84.00932312]
[62.04490280 -69.20607758]
[64.46646118 -54.40282822]
[66.88801575 -39.59958649]
[69.90749359 -24.90663528]
[73.51992798 -10.34812260]
[88.26857758 -2.32162905]
[92.76470184 14.20600510]
[83.76770782 29.17563820]
[87.67446136 43.65794754]
[91.58121490 58.14025879]
[95.48796844 72.62256622]
[99.39471436 87.10487366]
[106.21127319 86.38802338]
[113.36081696 89.46444702]
[118.71479034 96.34792328]
[120.28478241 105.88288879]
[116.84056854 115.91867065]
[122.47532654 129.82009888]
[128.11007690 143.72151184]
[133.74484253 157.62294006]
[139.37959290 171.52435303]
[145.15493774 185.36796570]
[151.07028198 199.15232849]
[153.08622742 184.28842163]
[159.13700867 170.56295776]
[168.74996948 159.04814148]
[181.17416382 150.64343262]
[195.43910217 146.00537109]
[210.43046570 145.49626160]
[224.97718811 149.15586853]
[237.94296265 156.69833374]
[248.31495667 167.53445435]
[255.28297424 180.81777954]
[258.30267334 195.51068115]
[257.13821411 210.46542358]
[251.88052368 224.51379395]
[242.94032288 236.55841064]
[231.01597595 245.65840149]
[217.03895569 251.10293579]
[202.10107422 252.46669006]
[187.36921692 249.64314270]
[173.99417114 242.85285950]
[163.02072144 232.62625122]
[155.30538940 219.76062012]
[155.30538940 234.76062012]
[155.30538940 249.76062012]
[155.30538940 264.76062012]
[155.30538940 279.76062012]
[155.30538940 294.76062012]
[155.30538940 309.76062012]
[155.30538940 324.76062012]
[155.30538940 339.76062012]
[155.30538940 354.76062012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 124]
[12 123]
[14 122]
[15 121]
[16 120]
[17 119]
[18 118]
[19 28]
[20 27]
[21 26]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[37 106]
[38 105]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 98]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[57 90]
[58 89]
[59 88]
[62 85]
[63 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
