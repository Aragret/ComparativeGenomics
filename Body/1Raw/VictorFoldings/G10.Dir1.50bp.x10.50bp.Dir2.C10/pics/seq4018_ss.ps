%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCxxxxxxxxxxCUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.79750061 288.51345825]
[85.79750061 273.51345825]
[85.79750061 258.51345825]
[85.79750061 243.51345825]
[85.79750061 228.51345825]
[85.79750061 213.51345825]
[85.79750061 198.51345825]
[85.79750061 183.51345825]
[85.79750061 168.51345825]
[85.79750061 153.51345825]
[71.95428467 147.73718262]
[61.29265594 158.28846741]
[50.63103104 168.83976746]
[39.96940231 179.39105225]
[29.30777740 189.94233704]
[30.76987457 205.51142883]
[21.83980751 218.34840393]
[6.73408127 222.39204407]
[-7.41484261 215.73306274]
[-13.92627525 201.51564026]
[-9.72571659 186.45278931]
[3.20345831 177.65673828]
[18.75648689 179.28071594]
[29.41811371 168.72943115]
[40.07973862 158.17813110]
[50.74136734 147.62684631]
[61.40299225 137.07556152]
[51.60067749 121.31528473]
[47.85746002 103.36244965]
[50.48086929 85.43547821]
[59.00107574 69.69683838]
[72.24636841 57.99216843]
[88.50209045 51.63417435]
[105.73181915 51.25639343]
[109.73956299 36.80170441]
[113.74730682 22.34701729]
[109.97845459 6.98126554]
[120.83497620 -3.21604514]
[124.84272003 -17.67073441]
[128.85046387 -32.12542343]
[125.08160400 -47.49117279]
[135.93812561 -57.68848419]
[139.94587708 -72.14317322]
[129.29806519 -83.12368774]
[125.60049438 -97.86222839]
[129.74902344 -112.37622070]
[140.53326416 -122.79525757]
[154.98735046 -126.39316559]
[158.99508667 -140.84785461]
[146.41577148 -149.22747803]
[137.05506897 -161.06892395]
[131.81985474 -175.20472717]
[131.21102905 -190.24615479]
[135.27561951 -204.71963501]
[143.60348511 -217.21113586]
[155.36854553 -226.50431824]
[169.41084290 -231.69894409]
[184.35078430 -232.29808044]
[188.35853577 -246.75277710]
[176.44082642 -256.14660645]
[169.04751587 -269.35195923]
[167.27803040 -284.34140015]
[171.37110901 -298.82705688]
[180.67304993 -310.61001587]
[193.74195862 -317.91409302]
[208.57112122 -319.65338135]
[212.57885742 -334.10806274]
[216.58660889 -348.56274414]
[220.59434509 -363.01745605]
[207.38880920 -370.27764893]
[196.21395874 -380.38800049]
[187.67242432 -392.80328369]
[182.22485352 -406.85391235]
[180.16502380 -421.78219604]
[181.60401917 -436.78308105]
[186.46423340 -451.04754639]
[194.48356628 -463.80633545]
[205.22953796 -474.37142944]
[218.12263489 -482.17300415]
[232.46755981 -486.79034424]
[247.49069214 -487.97448730]
[262.38186646 -485.66152954]
[276.33801270 -479.97622681]
[288.60647583 -471.22515869]
[298.52569580 -459.88027954]
[305.56066895 -446.55337524]
[309.33203125 -431.96319580]
[309.63641357 -416.89654541]
[306.45739746 -402.16595459]
[299.96640015 -388.56579590]
[290.51348877 -376.82955933]
[278.60845947 -367.59014893]
[264.89334106 -361.34579468]
[250.10772705 -358.43328857]
[235.04902649 -359.00970459]
[231.04129028 -344.55502319]
[227.03355408 -330.10031128]
[223.02581787 -315.64562988]
[234.84213257 -306.51855469]
[242.28401184 -293.52761841]
[244.19036865 -278.63702393]
[240.23983765 -264.11181641]
[231.00434875 -252.17367554]
[217.86663818 -244.66078186]
[202.81321716 -242.74502563]
[198.80548096 -228.29034424]
[211.30387878 -220.08358765]
[220.66639709 -208.39968872]
[225.96630859 -194.37503052]
[226.67280579 -179.37863159]
[222.70413208 -164.87855530]
[214.43681335 -152.29815674]
[202.66996765 -142.87638855]
[188.54811096 -137.54576111]
[173.44978333 -136.84011841]
[169.44203186 -122.38542938]
[179.97976685 -111.85823059]
[183.85913086 -97.37352753]
[179.94154358 -82.79550171]
[169.18243408 -72.06525421]
[154.40055847 -68.13542938]
[150.39282227 -53.68074417]
[154.44833374 -39.34888840]
[143.30514526 -28.11768150]
[139.29740906 -13.66299343]
[135.28967285 0.79169500]
[139.34516907 15.12355137]
[128.20199585 26.35475731]
[124.19425201 40.80944443]
[120.18650818 55.26413345]
[130.71249390 61.20156860]
[139.54754639 69.59150696]
[146.12664795 79.96376038]
[150.01315308 91.71969604]
[150.92744446 104.16675568]
[148.76647949 116.55922699]
[143.61297607 128.14291382]
[135.73316956 138.20104980]
[125.56346130 146.09857178]
[113.68641663 151.32218933]
[100.79750061 153.51345825]
[100.79750061 168.51345825]
[100.79750061 183.51345825]
[100.79750061 198.51345825]
[100.79750061 213.51345825]
[100.79750061 228.51345825]
[100.79750061 243.51345825]
[100.79750061 258.51345825]
[100.79750061 273.51345825]
[100.79750061 288.51345825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[34 130]
[35 129]
[36 128]
[38 126]
[39 125]
[40 124]
[42 122]
[43 121]
[48 116]
[49 115]
[58 106]
[59 105]
[66 98]
[67 97]
[68 96]
[69 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
