%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCAxxxxxxxxxxACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.17955780 256.15081787]
[112.17955780 241.15081787]
[112.17955780 226.15081787]
[112.17955780 211.15081787]
[112.17955780 196.15081787]
[112.17955780 181.15081787]
[112.17955780 166.15081787]
[112.17955780 151.15081787]
[112.17955780 136.15081787]
[112.17955780 121.15081787]
[95.84465790 120.97204590]
[85.46928406 111.21047211]
[70.88553619 114.71964264]
[56.30178452 118.22880554]
[41.71803665 121.73797607]
[27.13428688 125.24713898]
[12.55053711 128.75630188]
[5.13371563 139.35792542]
[-7.13098621 141.95570374]
[-17.52079010 135.68560791]
[-4.05317736 142.29040527]
[4.42013550 154.66792297]
[5.70485020 169.61280823]
[-0.53173029 183.25483704]
[-12.67454529 192.06120300]
[-27.57902145 193.75135803]
[-41.38541031 187.88758850]
[-50.51832581 175.98843384]
[-52.61265945 161.13536072]
[-47.12604523 147.17481995]
[-35.48023605 137.72248840]
[-50.47944641 137.87648010]
[-65.47865295 138.03048706]
[-80.47786713 138.18447876]
[-90.26554871 150.38018799]
[-105.61259460 153.38052368]
[-119.27261353 145.76882935]
[-124.79574585 131.13909912]
[-119.57415009 116.39904785]
[-106.07329559 108.50849152]
[-90.66787720 111.19309235]
[-80.63186646 123.18527222]
[-65.63265228 123.03127289]
[-50.63344574 122.87727356]
[-35.63423538 122.72328186]
[-20.72978783 121.03288269]
[-8.45599270 108.52694702]
[9.04136944 114.17256165]
[23.62511826 110.66339111]
[38.20886993 107.15422058]
[52.79261780 103.64505768]
[67.37636566 100.13588715]
[81.96011353 96.62672424]
[97.79743958 78.73400879]
[122.56245422 90.69225311]
[131.72439575 78.81542969]
[140.88632202 66.93860626]
[150.04826355 55.06178284]
[159.21018982 43.18495560]
[161.20701599 24.90810394]
[177.63650513 18.81578064]
[186.55265808 6.75334978]
[175.46054077 -3.36439252]
[165.46752930 -14.56902790]
[156.67958069 -26.74178123]
[149.18983459 -39.75361633]
[143.07769775 -53.46659851]
[138.40797424 -67.73535919]
[135.23013306 -82.40865326]
[133.57789612 -97.33091736]
[133.46875000 -112.34398651]
[134.90386963 -127.28869629]
[137.86802673 -142.00663757]
[142.32981873 -156.34178162]
[148.24192810 -170.14218140]
[155.54170227 -183.26153564]
[164.15174866 -195.56077576]
[173.98078918 -206.90951538]
[184.92465210 -217.18745422]
[196.86729431 -226.28564453]
[209.68215942 -234.10763550]
[223.23335266 -240.57051086]
[237.37727356 -245.60575867]
[251.96395874 -249.16001892]
[266.83877563 -251.19560242]
[281.84405518 -251.69091797]
[296.82077026 -250.64073181]
[311.61007690 -248.05616760]
[326.05526733 -243.96463013]
[340.00317383 -238.40950012]
[353.30596924 -231.44963074]
[365.82263184 -223.15884399]
[377.42047119 -213.62500000]
[387.97656250 -202.94917297]
[397.37896729 -191.24452209]
[405.52801514 -178.63513184]
[412.33737183 -165.25466919]
[417.73480225 -151.24496460]
[421.66314697 -136.75454712]
[424.08068848 -121.93700409]
[424.96188354 -106.94942474]
[424.29730225 -91.95068359]
[422.09405518 -77.09976196]
[418.37548828 -62.55410385]
[413.18099976 -48.46789169]
[406.56567383 -34.99045563]
[398.59960938 -22.26465607]
[389.36727905 -10.42539692]
[378.96652222 0.40181929]
[367.50762939 10.10221767]
[355.11206055 18.57296944]
[341.91119385 25.72427750]
[328.04498291 31.48033714]
[313.66040039 35.78012848]
[298.90997314 38.57807541]
[283.95001221 39.84451294]
[268.93914795 39.56601715]
[254.03645325 37.74554062]
[239.39994812 34.40238571]
[225.18476868 29.57198524]
[211.54161072 23.30554771]
[198.61509705 15.66950035]
[189.69894409 27.73193169]
[191.17631531 39.77682877]
[183.79380798 49.90944290]
[171.08702087 52.34689331]
[161.92507935 64.22371674]
[152.76315308 76.10054016]
[143.60121155 87.97736359]
[134.43928528 99.85418701]
[145.93261719 90.21555328]
[160.40905762 86.28714752]
[175.19816589 88.79364777]
[187.57176208 97.27267456]
[195.24731445 110.16010284]
[196.80891418 125.07859802]
[191.96847534 139.27613831]
[181.61891174 150.13371277]
[167.66943359 155.64840698]
[152.69328308 154.80294800]
[139.45310974 147.75329590]
[130.39132690 135.79988098]
[127.17955780 121.15081787]
[127.17955780 136.15081787]
[127.17955780 151.15081787]
[127.17955780 166.15081787]
[127.17955780 181.15081787]
[127.17955780 196.15081787]
[127.17955780 211.15081787]
[127.17955780 226.15081787]
[127.17955780 241.15081787]
[127.17955780 256.15081787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[20 46]
[31 45]
[32 44]
[33 43]
[34 42]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
