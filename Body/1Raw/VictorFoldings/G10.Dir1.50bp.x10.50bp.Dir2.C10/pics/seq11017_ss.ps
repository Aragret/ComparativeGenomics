%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAxxxxxxxxxxCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.07723236 442.93289185]
[94.07723236 427.93289185]
[94.07723236 412.93289185]
[94.07723236 397.93289185]
[94.07723236 382.93289185]
[94.07723236 367.93289185]
[94.07723236 352.93289185]
[94.07723236 337.93289185]
[94.07723236 322.93289185]
[94.07723236 307.93289185]
[77.93077087 302.54360962]
[64.55944061 291.97033691]
[55.56682968 277.45980835]
[52.03858566 260.73229980]
[54.41140366 243.77746582]
[62.41904831 228.61788940]
[75.12209320 217.06764221]
[91.01812744 210.51531982]
[90.08250427 195.54452515]
[89.14687347 180.57374573]
[88.21124268 165.60295105]
[87.27561951 150.63215637]
[67.40869141 110.88195038]
[87.16041565 89.61543274]
[78.64933014 77.26385498]
[79.40721893 92.24469757]
[76.98756409 107.04825592]
[71.49927521 121.00814819]
[63.18941116 133.49598694]
[52.43202972 143.94963074]
[39.71137238 151.89852905]
[25.60005188 156.98484802]
[10.73328400 158.97962952]
[-4.21971416 157.79310608]
[-18.58583832 153.47865295]
[-31.71840668 146.23051453]
[-43.02626419 136.37492371]
[-52.00038910 124.35556793]
[-58.23682022 110.71347046]
[-61.45482635 96.06272125]
[-61.50955200 81.06282043]
[-58.39852905 66.38897705]
[-52.26180649 52.70173645]
[-43.37561798 40.61721802]
[-32.13997269 30.67939377]
[-19.06064034 23.33561707]
[-4.72637892 18.91646194]
[10.21756268 17.62085342]
[25.09849167 19.50711441]
[39.24654770 24.49033546]
[52.02486420 32.34619904]
[62.85823441 42.72107697]
[71.26007080 55.14996719]
[70.63609314 40.16294861]
[70.01211548 25.17593384]
[61.70744705 11.70956612]
[68.90861511 -1.32854903]
[68.28463745 -16.31556511]
[67.66065979 -31.30258179]
[59.35598755 -44.76894760]
[66.55715942 -57.80706406]
[63.15417862 -72.41595459]
[57.09116745 -86.13600922]
[43.53872299 -95.36981964]
[45.02887726 -111.70112610]
[60.02869034 -118.32967377]
[73.10763550 -108.43658447]
[70.81121826 -92.19902039]
[76.87422943 -78.47896576]
[78.93231964 -93.33710480]
[85.40251160 -106.86991119]
[95.67449188 -117.80088806]
[108.77936554 -125.09899139]
[123.48101044 -128.07582092]
[138.39270020 -126.45058441]
[152.10789490 -120.37658691]
[163.33291626 -110.42675781]
[171.00894165 -97.53961182]
[174.41194153 -82.93072510]
[173.22094727 -67.97808075]
[167.54826355 -54.09209061]
[157.92900085 -42.58254242]
[145.27047729 -34.53507996]
[130.76669312 -30.70877266]
[115.78575134 -31.46454048]
[101.74069977 -36.73109436]
[89.95635223 -46.01166916]
[81.54417419 -58.43104172]
[89.80421448 -46.03664398]
[82.64767456 -31.92655945]
[83.27165222 -16.93954277]
[83.89562988 -1.95252645]
[92.15567017 10.44186878]
[84.99913025 24.55195618]
[85.62310791 39.53897095]
[86.24708557 54.52598953]
[91.00090027 68.75276947]
[99.51199341 81.10433960]
[114.00759125 84.96150208]
[127.53177643 78.47333527]
[136.33822632 64.63936615]
[152.70806885 65.61921692]
[159.80142212 80.40489197]
[150.32125854 93.78616333]
[134.01994324 91.99752045]
[120.49575043 98.48568726]
[123.59407806 113.16221619]
[138.58677673 113.63025665]
[153.57946777 114.09829712]
[168.57215881 114.56633759]
[183.56486511 115.03438568]
[196.19490051 105.14189148]
[211.76995850 108.98863220]
[218.34216309 123.62371826]
[210.86988831 137.82035828]
[195.08522034 140.68811035]
[183.09681702 130.02708435]
[168.10412598 129.55903625]
[153.11141968 129.09098816]
[138.11872864 128.62295532]
[123.12602997 128.15490723]
[117.90612793 133.54031372]
[128.67675781 143.98030090]
[118.23659515 154.75076294]
[107.46631622 144.31112671]
[102.24640656 149.69653320]
[103.18203735 164.66731262]
[104.11766815 179.63810730]
[105.05329132 194.60890198]
[105.98892212 209.57969666]
[118.75777435 212.49349976]
[130.31402588 218.62797546]
[139.86230469 227.55290222]
[146.74752808 238.64630127]
[150.49984741 251.13774109]
[150.86668396 264.16183472]
[147.82977295 276.81832886]
[141.60586548 288.23403931]
[132.63131714 297.62347412]
[121.53150940 304.34252930]
[109.07723236 307.93289185]
[109.07723236 322.93289185]
[109.07723236 337.93289185]
[109.07723236 352.93289185]
[109.07723236 367.93289185]
[109.07723236 382.93289185]
[109.07723236 397.93289185]
[109.07723236 412.93289185]
[109.07723236 427.93289185]
[109.07723236 442.93289185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[24 98]
[25 97]
[53 96]
[54 95]
[55 94]
[57 92]
[58 91]
[59 90]
[61 88]
[62 69]
[63 68]
[99 106]
[100 105]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
