%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUxxxxxxxxxxAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.95229340 297.54141235]
[115.95229340 282.54141235]
[115.95229340 267.54141235]
[115.95229340 252.54142761]
[115.95229340 237.54142761]
[115.95229340 222.54142761]
[115.95229340 207.54142761]
[115.95229340 192.54142761]
[115.95229340 177.54142761]
[115.95229340 162.54142761]
[114.10897064 147.65512085]
[110.45026398 133.10816956]
[106.79155731 118.56121063]
[92.97797394 112.71442413]
[79.98759460 120.21442413]
[66.99721527 127.71442413]
[54.00683212 135.21441650]
[52.26591873 150.52047729]
[41.96651077 161.73545837]
[27.21273232 164.70024109]
[13.70392609 158.48332214]
[0.71354479 165.98332214]
[-3.13429904 181.31204224]
[-16.73690414 189.35844421]
[-32.02408600 185.34875488]
[-39.92622757 171.66183472]
[-35.75513458 156.41790771]
[-21.98543739 148.66090393]
[-6.78645515 152.99293518]
[6.20392609 145.49293518]
[7.57431459 130.68550110]
[17.51878548 119.39074707]
[32.38093948 116.07868958]
[46.50683212 122.22403717]
[59.49721146 114.72403717]
[72.48759460 107.22403717]
[85.47797394 99.72403717]
[70.75525665 96.85324097]
[62.94469452 84.04718018]
[67.13139343 69.64331055]
[80.58958435 63.01932907]
[94.55725098 68.48781586]
[99.94069672 82.48803711]
[105.07099915 68.39265442]
[110.20130157 54.29726028]
[102.08967590 49.90248871]
[96.04661560 40.92947388]
[85.49459839 30.26856613]
[74.94258118 19.60765648]
[64.39056396 8.94674778]
[53.83855057 -1.71416104]
[43.28653717 -12.37506962]
[32.73451996 -23.03597832]
[22.18250656 -33.69688797]
[11.63049126 -44.35779572]
[-4.32198381 -48.15918732]
[-8.74617481 -63.95027924]
[2.90914583 -75.48654938]
[18.65398407 -70.90047455]
[22.29140091 -54.90981293]
[32.84341431 -44.24890137]
[43.39543152 -33.58799362]
[53.94744492 -22.92708588]
[64.49945831 -12.26617622]
[75.05147552 -1.60526729]
[85.60349274 9.05564117]
[96.15550232 19.71655083]
[106.70751953 30.37745857]
[102.55836487 15.96272564]
[98.40921783 1.54799271]
[90.41946411 -11.14704227]
[87.38601685 -25.83711243]
[89.69371033 -40.65853500]
[97.04978180 -53.73095703]
[108.52098083 -63.39592361]
[122.65200043 -68.42726898]
[137.65007019 -68.18667603]
[151.61242676 -62.70467377]
[162.76773071 -52.67674255]
[169.70071411 -39.37510300]
[171.53182983 -24.48728943]
[168.02876282 -9.90207291]
[159.63594055 2.53016090]
[147.41972351 11.23142052]
[138.10026550 22.98504448]
[128.78080750 34.73866653]
[142.59439087 28.89188004]
[156.40797424 23.04509163]
[170.22155762 17.19830322]
[176.46662903 0.88921940]
[192.25216675 -5.75520372]
[207.66194153 0.91126657]
[221.35256958 -5.21790743]
[223.83967590 -8.94805717]
[227.07536316 -11.40850544]
[230.55548096 -12.52008057]
[233.80349731 -12.37998867]
[236.42713928 -11.23653603]
[250.57446289 -16.22185707]
[264.72177124 -21.20718002]
[278.86907959 -26.19250107]
[281.61236572 -41.30441666]
[291.55630493 -53.00969696]
[306.02606201 -58.15967941]
[321.12930298 -55.36904526]
[332.80334473 -45.38846207]
[337.90795898 -30.90265274]
[335.06997681 -15.80823231]
[325.05285645 -4.16552114]
[310.55111694 0.89364934]
[295.46566772 -1.99161232]
[283.85440063 -12.04518509]
[269.70709229 -7.05986309]
[255.55978394 -2.07454109]
[241.41246033 2.91078091]
[227.48175049 8.47271824]
[213.79112244 14.60189247]
[210.91148376 27.19792366]
[201.14427185 35.95179367]
[187.92193604 37.48506546]
[176.06834412 31.01188660]
[162.25476074 36.85867310]
[148.44117737 42.70546341]
[134.62759399 48.55224991]
[124.29669189 59.42756271]
[119.16638947 73.52295685]
[114.03608704 87.61833954]
[121.33850861 114.90250397]
[124.99721527 129.44946289]
[128.65592957 143.99641418]
[134.12377930 130.02850342]
[145.02934265 119.72953033]
[159.28698730 115.06910706]
[174.17004395 116.93849945]
[186.83222961 124.98020172]
[194.85200500 137.65629578]
[196.69561768 152.54255676]
[192.01051331 166.79211426]
[181.69267273 177.67982483]
[167.71531677 183.12348938]
[152.75152588 182.08206177]
[139.66299438 174.75468445]
[130.95230103 162.54142761]
[130.95230103 177.54142761]
[130.95230103 192.54142761]
[130.95230103 207.54142761]
[130.95230103 222.54142761]
[130.95230103 237.54142761]
[130.95230103 252.54142761]
[130.95230103 267.54141235]
[130.95230103 282.54141235]
[130.95230103 297.54141235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 128]
[14 37]
[15 36]
[16 35]
[17 34]
[21 30]
[22 29]
[43 127]
[44 126]
[45 125]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[86 124]
[87 123]
[88 122]
[89 121]
[92 117]
[93 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
