%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACACCCACUCCCUCxxxxxxxxxxUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.22573853 299.06649780]
[93.11521149 288.31704712]
[99.81520081 272.74316406]
[100.43917847 257.75613403]
[101.06315613 242.76911926]
[101.68713379 227.78210449]
[102.31111145 212.79508972]
[102.93508911 197.80807495]
[103.55906677 182.82106018]
[104.18304443 167.83404541]
[104.80702209 152.84703064]
[105.43099976 137.86001587]
[91.18331909 136.04806519]
[79.03305054 129.23165894]
[70.60020447 118.68813324]
[66.86837769 106.16168213]
[68.07650757 93.57946777]
[73.72770691 82.75625610]
[63.51422501 71.77059174]
[53.30074692 60.78492737]
[43.08726501 49.79926300]
[32.87378693 38.81359863]
[22.66030693 27.82793427]
[17.54414368 26.26445770]
[13.93661499 23.17607307]
[12.16875935 19.41092110]
[12.17890644 15.82380772]
[2.67054820 4.22246647]
[4.50089979 19.11037445]
[3.44722414 34.07332230]
[-0.45150113 48.55779266]
[-7.05105352 62.02798080]
[-16.10730171 73.98558807]
[-27.28523254 83.98828125]
[-40.17135239 91.66603088]
[-54.28897476 96.73483276]
[-69.11585999 99.00717163]
[-84.10352325 98.39898682]
[-98.69754791 94.93278503]
[-112.35805511 88.73677826]
[-124.57972717 80.04018402]
[-134.91044617 69.16469574]
[-142.96806335 56.51262665]
[-148.45449829 42.55200577]
[-151.16682434 27.79926491]
[-151.00466919 12.80014229]
[-147.97404480 -1.89051414]
[-142.18708801 -15.72926331]
[-133.85783386 -28.20417976]
[-123.29441071 -38.85378647]
[-110.88758850 -47.28413773]
[-97.09632111 -53.18336868]
[-82.43077087 -56.33325577]
[-67.43346405 -56.61728287]
[-52.65916824 -54.02493668]
[-38.65442657 -48.65211868]
[-25.93730164 -40.69757843]
[-14.97822666 -30.45557213]
[-6.18593359 -18.31065369]
[-7.12156200 -33.28144455]
[-8.05719090 -48.25223541]
[-8.99281883 -63.22302628]
[-9.92844772 -78.19381714]
[-24.69334793 -81.34029388]
[-38.06127930 -88.35463715]
[-49.04025650 -98.71632385]
[-56.81556320 -111.65646362]
[-60.81021881 -126.21480560]
[-60.72779846 -141.31101990]
[-56.57441330 -155.82487488]
[-48.65827560 -168.67935181]
[-37.56681061 -178.92053223]
[-24.12308502 -185.78849792]
[-9.32470894 -188.77355957]
[5.73018026 -187.65423584]
[19.92440796 -182.51356506]
[32.20466995 -173.73303223]
[41.65969086 -161.96420288]
[47.58783722 -148.08041382]
[49.54921341 -133.11193848]
[47.39826202 -118.16950989]
[41.29460144 -104.36197662]
[31.69116783 -92.71395111]
[19.30059242 -84.08978271]
[5.04234409 -79.12944794]
[5.97797251 -64.15865326]
[6.91360092 -49.18786621]
[7.84922934 -34.21707153]
[8.78485775 -19.24628258]
[14.27188969 -5.28589201]
[23.78024864 6.31544924]
[33.64596939 17.61445427]
[43.85945129 28.60011864]
[54.07292938 39.58578491]
[64.28640747 50.57144928]
[74.49989319 61.55711365]
[84.71337128 72.54277802]
[102.16915894 66.93984985]
[120.77755737 72.03775787]
[134.22241211 87.18775177]
[137.36454773 108.17107391]
[152.35725403 108.63911438]
[167.34994507 109.10716248]
[182.34263611 109.57520294]
[197.33534241 110.04324341]
[212.33453369 110.19927979]
[227.33370972 110.04324341]
[242.33290100 109.88720703]
[250.45085144 96.76842499]
[264.38247681 90.14171600]
[279.68225098 92.12165070]
[291.46810913 102.07643127]
[295.97915649 116.82952881]
[291.77600098 131.67327881]
[280.19979858 141.87109375]
[264.94451904 144.16889954]
[250.87805176 137.83345032]
[242.48893738 124.88639832]
[227.48974609 125.04243469]
[212.49057007 125.19847107]
[208.52912903 127.97019958]
[202.77072144 128.23861694]
[196.86729431 125.03594208]
[181.87460327 124.56789398]
[166.88189697 124.09985352]
[151.88920593 123.63181305]
[136.89651489 123.16377258]
[149.82945251 130.76240540]
[162.76239014 138.36102295]
[177.48913574 141.21112061]
[189.14918518 150.64738464]
[195.00724792 164.45619202]
[193.68908691 179.39814758]
[185.50393677 191.96809387]
[172.37191772 199.21722412]
[157.37364197 199.44502258]
[144.02752686 192.59802246]
[135.46441650 180.28247070]
[133.69314575 165.38697815]
[127.05558014 151.93548584]
[120.41801453 138.48399353]
[119.79403687 153.47100830]
[119.17005920 168.45802307]
[118.54608154 183.44503784]
[117.92210388 198.43205261]
[117.29812622 213.41906738]
[116.67414856 228.40608215]
[116.05017090 243.39309692]
[115.42619324 258.38012695]
[114.80221558 273.36712646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[27 91]
[28 90]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[101 127]
[102 126]
[103 125]
[104 124]
[105 123]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
