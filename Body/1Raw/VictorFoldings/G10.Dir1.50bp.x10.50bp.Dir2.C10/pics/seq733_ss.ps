%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUAxxxxxxxxxxGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.48198700 110.00617981]
[82.95779419 116.49433899]
[69.43360901 122.98250580]
[55.90941620 129.47067261]
[42.38522720 135.95883179]
[28.86103821 142.44700623]
[17.25969696 151.95536804]
[8.24216652 163.94219971]
[-0.77536339 175.92903137]
[-9.79289341 187.91586304]
[-18.81042290 199.90269470]
[-27.82795334 211.88952637]
[-25.36787224 227.50117493]
[-34.73485565 240.23046875]
[-50.37164307 242.52536011]
[-63.00119781 233.02432251]
[-65.13063812 217.36415100]
[-55.49659729 204.83573914]
[-39.81478500 202.87199402]
[-30.79725647 190.88516235]
[-21.77972603 178.89833069]
[-12.76219559 166.91149902]
[-3.74466610 154.92466736]
[5.27286386 142.93783569]
[-8.65168285 148.51519775]
[-23.51648521 150.52459717]
[-38.42209244 148.84445190]
[-52.46658325 143.57641602]
[-64.80014801 135.03924561]
[-74.67650604 123.74953461]
[-81.49803925 110.39039612]
[-84.85199738 95.77017212]
[-84.53542328 80.77350616]
[-80.56748962 66.30784607]
[-73.18827820 53.24847031]
[-62.84429932 42.38559341]
[-50.16145325 34.37651062]
[-35.90716171 29.70583916]
[-20.94393349 28.65619850]
[-6.17716932 31.29109955]
[7.49961042 37.45110703]
[19.25884247 46.76348877]
[28.38899422 58.66476440]
[34.33760834 72.43479919]
[36.74474716 87.24040222]
[35.46475220 102.18568420]
[30.57508087 116.36634827]
[22.37287331 128.92280579]
[35.89706421 122.43464661]
[49.42125320 115.94647980]
[62.94544220 109.45832062]
[76.46963501 102.97015381]
[89.99382019 96.48198700]
[93.24464417 81.83848572]
[83.73628998 70.23714447]
[74.22792816 58.63580322]
[58.46927261 55.62844467]
[51.12295151 41.36621475]
[57.82444382 26.78987885]
[73.43292999 23.08115196]
[85.97492218 33.08505249]
[85.82926941 49.12744522]
[95.33763123 60.72878647]
[104.84598541 72.33013153]
[109.88338470 58.20126724]
[115.88800049 44.45555878]
[122.83095551 31.15911674]
[130.67884827 18.37590408]
[139.39393616 6.16741467]
[148.93429565 -5.40762806]
[159.25402832 -16.29354286]
[170.30349731 -26.43796539]
[182.02954102 -35.79209518]
[194.37577820 -44.31093979]
[207.28279114 -51.95352173]
[220.68849182 -58.68307114]
[234.52842712 -64.46722412]
[248.73599243 -69.27814484]
[263.24285889 -73.09271240]
[277.97924805 -75.89255524]
[292.87423706 -77.66421509]
[307.85623169 -78.39917755]
[322.85311890 -78.09389496]
[337.79278564 -76.74983215]
[352.60336304 -74.37347412]
[367.21359253 -70.97623444]
[381.55319214 -66.57446289]
[395.55319214 -61.18932724]
[409.14627075 -54.84673691]
[422.26699829 -47.57720184]
[434.85229492 -39.41569138]
[446.84161377 -30.40145874]
[458.17727661 -20.57787323]
[468.80474854 -9.99218559]
[478.67291260 1.30468357]
[487.73431396 13.25839138]
[495.94534302 25.81143761]
[503.26651001 38.90343857]
[509.66259766 52.47141647]
[515.10284424 66.45010376]
[519.56109619 80.77226257]
[523.01586914 95.36898804]
[525.45056152 110.17008209]
[526.85345459 125.10433197]
[527.21783447 140.09989929]
[526.54187012 155.08467102]
[524.82891846 169.98654175]
[522.08715820 184.73384094]
[518.32977295 199.25561523]
[513.57489014 213.48202515]
[507.84527588 227.34463501]
[501.16860962 240.77674866]
[493.57693481 253.71377563]
[485.10678101 266.09347534]
[475.79891968 277.85629272]
[465.69812012 288.94561768]
[454.85293579 299.30816650]
[443.31558228 308.89404297]
[431.14151001 317.65716553]
[418.38931274 325.55535889]
[405.12033081 332.55065918]
[391.39837646 338.60937500]
[377.28948975 343.70239258]
[362.86148071 347.80520630]
[348.18380737 350.89807129]
[333.32705688 352.96612549]
[318.36270142 353.99942017]
[303.36270142 353.99295044]
[288.39923096 352.94680786]
[273.54425049 350.86596680]
[258.86923218 347.76046753]
[244.44477844 343.64526367]
[230.34027100 338.54010010]
[216.62353516 332.46957397]
[203.36056519 325.46286011]
[190.61517334 317.55371094]
[178.44865417 308.78012085]
[166.91954041 299.18432617]
[156.08328247 288.81243896]
[145.99201965 277.71441650]
[136.69427490 265.94360352]
[128.23478699 253.55662537]
[120.65425873 240.61308289]
[113.98912811 227.17521667]
[108.27147675 213.30769348]
[103.52880096 199.07719421]
[99.78391266 184.55218506]
[97.05483246 169.80253601]
[95.35468292 154.89920044]
[94.69165039 139.91386414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
