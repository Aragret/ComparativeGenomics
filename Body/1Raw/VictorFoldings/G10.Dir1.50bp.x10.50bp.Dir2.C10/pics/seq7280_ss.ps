%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCxxxxxxxxxxGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.17495728 303.16580200]
[134.17495728 288.16580200]
[134.17495728 273.16580200]
[134.17495728 258.16580200]
[134.17495728 243.16578674]
[134.17495728 228.16578674]
[134.17495728 213.16578674]
[134.17495728 198.16578674]
[134.17495728 183.16578674]
[134.17495728 168.16578674]
[129.56939697 153.89033508]
[120.80318451 141.71849060]
[112.03697968 129.54666138]
[98.10733795 135.32186890]
[81.58626556 134.19836426]
[65.97564697 125.14697266]
[54.47384644 134.77549744]
[42.97204208 144.40402222]
[40.12877655 160.19311523]
[25.94373894 167.68739319]
[11.29847908 161.13789368]
[7.42758608 145.56883240]
[17.30047798 132.92346191]
[33.34351730 132.90222168]
[44.84532166 123.27369690]
[56.34712601 113.64517212]
[49.99999619 100.05421448]
[35.23394012 102.69308472]
[20.46788406 105.33194733]
[5.70182800 107.97080994]
[-9.06422710 110.60967255]
[-21.24671555 121.58779144]
[-36.75965500 116.26982117]
[-39.64466095 100.12644196]
[-26.93389130 89.76457214]
[-11.70309162 95.84362030]
[3.06296396 93.20475769]
[17.82901955 90.56588745]
[32.59507370 87.92702484]
[47.36112976 85.28816223]
[55.74327469 72.84872437]
[52.64495087 58.17219543]
[42.22401428 46.26779938]
[47.16558075 32.21681595]
[44.06726074 17.54029083]
[40.96893692 2.86376452]
[37.87061691 -11.81276131]
[27.44967842 -23.71715736]
[32.39124680 -37.76814270]
[29.29292297 -52.44466782]
[14.29014874 -51.56467056]
[-0.67620552 -52.93065262]
[-15.27178478 -56.51209259]
[-29.17051888 -62.22898865]
[-42.06190491 -69.95361328]
[-53.65793991 -79.51340485]
[-63.69957352 -90.69478607]
[-71.96246338 -103.24796295]
[-78.26201630 -116.89249420]
[-82.45750427 -131.32356262]
[-84.45519257 -146.21875000]
[-84.21044922 -161.24531555]
[-81.72874451 -176.06756592]
[-77.06552124 -190.35433960]
[-70.32495880 -203.78648376]
[-61.65763855 -216.06391907]
[-51.25719833 -226.91235352]
[-39.35598755 -236.08943176]
[-26.21987724 -243.39013672]
[-12.14233875 -248.65136719]
[2.56213212 -251.75558472]
[17.56503296 -252.63345337]
[32.53119278 -251.26533508]
[47.12625885 -247.68180847]
[61.02418137 -241.96293640]
[73.91446686 -234.23648071]
[85.50914001 -224.67503357]
[95.54917908 -213.49223328]
[103.81027985 -200.93786621]
[110.10789490 -187.29243469]
[114.30132294 -172.86077881]
[116.29689026 -157.96530151]
[116.05000305 -142.93876648]
[113.56618500 -128.11688232]
[108.90093231 -113.83076477]
[102.15845490 -100.39958191]
[93.48938751 -88.12339020]
[83.08740234 -77.27643585]
[71.18488312 -68.10105133]
[58.04773712 -60.80221558]
[43.96944809 -55.54298782]
[47.06777191 -40.86646271]
[57.26709747 -30.01183128]
[52.54714203 -14.91108322]
[55.64546204 -0.23455733]
[58.74378586 14.44196796]
[61.84210587 29.11849403]
[72.04143524 39.97312546]
[67.32147980 55.07387543]
[70.41979980 69.75039673]
[84.31755066 62.10895920]
[99.57817841 60.29459763]
[113.93049622 64.20827484]
[125.37363434 72.92460632]
[132.45573425 84.87722015]
[134.45475769 98.12913513]
[131.43960571 110.68277740]
[124.20881653 120.78044891]
[132.97502136 132.95228577]
[141.74122620 145.12413025]
[140.84307861 130.15103149]
[142.82801819 115.28295135]
[147.62261963 101.06987000]
[155.04953003 88.03755951]
[164.83399963 76.66812134]
[176.61408997 67.38213348]
[189.95402527 60.52310562]
[204.36032104 56.34476852]
[219.30006409 55.00168610]
[234.22061157 56.54354095]
[248.57000732 60.91329956]
[261.81744385 67.94931793]
[273.47286987 77.39131165]
[283.10510254 88.88999939]
[290.35784912 102.02002716]
[294.96282959 116.29568481]
[296.74963379 131.18887329]
[295.65225220 146.14868164]
[291.71118164 160.62168884]
[285.07229614 174.07252502]
[275.98114014 186.00361633]
[264.77401733 195.97358704]
[251.86550903 203.61364746]
[237.73312378 208.64115906]
[222.89965820 210.87014771]
[207.91383362 210.21815491]
[193.33001709 206.70932007]
[179.68766785 200.47340393]
[167.49147034 191.74111938]
[157.19258118 180.83547974]
[149.17495728 168.16578674]
[149.17495728 183.16578674]
[149.17495728 198.16578674]
[149.17495728 213.16578674]
[149.17495728 228.16578674]
[149.17495728 243.16578674]
[149.17495728 258.16580200]
[149.17495728 273.16580200]
[149.17495728 288.16580200]
[149.17495728 303.16580200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 108]
[16 26]
[17 25]
[18 24]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 100]
[42 99]
[44 97]
[45 96]
[46 95]
[47 94]
[49 92]
[50 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
