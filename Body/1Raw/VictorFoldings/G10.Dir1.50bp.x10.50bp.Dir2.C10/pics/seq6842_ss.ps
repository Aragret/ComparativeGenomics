%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAxxxxxxxxxxAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.52165222 299.92858887]
[117.52165222 284.92858887]
[117.52165222 269.92858887]
[117.52165222 254.92858887]
[117.52165222 239.92858887]
[117.52165222 224.92858887]
[117.52165222 209.92858887]
[117.52165222 194.92858887]
[117.52165222 179.92858887]
[117.52165222 164.92858887]
[114.76541138 150.18399048]
[109.34678650 136.19691467]
[103.92816162 122.20983124]
[89.41953278 118.40196991]
[77.83049011 127.92530823]
[66.24143982 137.44863892]
[54.65238953 146.97198486]
[55.71022415 162.45295715]
[47.43803787 175.58119202]
[33.01665497 181.30860901]
[17.99139023 177.43290710]
[8.13976860 165.44436646]
[7.24993515 149.95281982]
[15.66405201 136.91510010]
[30.14671707 131.34446716]
[45.12905121 135.38293457]
[56.71810150 125.85959625]
[68.30715179 116.33625793]
[79.89619446 106.81291962]
[73.62679291 93.18594360]
[58.85467529 95.79066467]
[44.08256149 98.39538574]
[29.53399658 107.10031128]
[17.14182472 95.53006744]
[24.82940102 80.41922760]
[41.47783661 83.62327576]
[56.24995422 81.01854706]
[71.02207184 78.41382599]
[81.24077606 67.43302155]
[82.77806854 52.51200867]
[84.31536102 37.59099197]
[85.85265350 22.66997528]
[87.38994598 7.74895906]
[85.14739227 -1.17106068]
[89.11505127 -7.46152020]
[75.65694427 -14.39727879]
[65.40305328 -25.49816322]
[59.57677460 -39.41127777]
[58.86349869 -54.44993591]
[63.33003235 -68.79815674]
[72.41886902 -80.72994995]
[85.01769257 -88.81690216]
[99.59547424 -92.09922028]
[101.43879700 -106.98552704]
[95.45601654 -121.63192749]
[104.69870758 -133.31190491]
[106.54203033 -148.19821167]
[108.38536072 -163.08451843]
[110.22868347 -177.97082520]
[112.07200623 -192.85713196]
[113.91532898 -207.74343872]
[115.45262146 -222.66445923]
[116.68323517 -237.61389160]
[117.91384888 -252.56332397]
[103.49139404 -256.88610840]
[90.28305054 -264.11337280]
[78.86623383 -273.92916870]
[69.74003601 -285.90441895]
[63.30340958 -299.51556396]
[59.83774567 -314.16763306]
[59.49454498 -329.22006226]
[62.28881073 -344.01486206]
[68.09838867 -357.90524292]
[76.66930389 -370.28396606]
[87.62688446 -380.60992432]
[100.49210358 -388.43167114]
[114.70255280 -393.40728760]
[129.63700867 -395.31927490]
[144.64260864 -394.08404541]
[159.06335449 -389.75558472]
[172.26885986 -382.52313232]
[183.68180847 -372.70281982]
[192.80329895 -360.72399902]
[199.23455811 -347.11032104]
[202.69445801 -332.45690918]
[203.03173828 -317.40432739]
[200.23165894 -302.61062622]
[194.41661072 -288.72256470]
[185.84083557 -276.34719849]
[174.87919617 -266.02554321]
[162.01089478 -258.20886230]
[147.79849243 -253.23883057]
[132.86328125 -251.33271790]
[131.63267517 -236.38328552]
[130.40205383 -221.43385315]
[132.79386902 -217.23522949]
[132.53038025 -211.48036194]
[128.80163574 -205.90011597]
[126.95831299 -191.01380920]
[125.11499023 -176.12750244]
[123.27166748 -161.24119568]
[121.42833710 -146.35488892]
[119.58501434 -131.46858215]
[125.69963837 -117.88695526]
[116.32510376 -105.14220428]
[114.48178101 -90.25589752]
[127.81866455 -83.51699066]
[138.06443787 -72.60126495]
[143.96844482 -58.81296158]
[144.80035400 -43.80864716]
[140.44047546 -29.39818001]
[131.39657593 -17.32639694]
[118.74472046 -9.06185627]
[104.00135803 -5.61819601]
[102.31096649 9.28625202]
[100.77367401 24.20726776]
[99.23638153 39.12828445]
[97.69908905 54.04930115]
[96.16179657 68.97031403]
[118.53515625 77.65903473]
[126.73892212 98.32376862]
[117.91524506 116.79120636]
[123.33386993 130.77828979]
[128.75248718 144.76536560]
[131.45320129 130.01049805]
[138.50535583 116.77165222]
[149.24345398 106.29820251]
[162.65412903 99.57854462]
[177.47178650 97.24681091]
[192.29806519 99.52305603]
[205.73381042 106.19247437]
[216.51103210 116.62565613]
[223.61270142 129.83801270]
[226.36862183 144.58267212]
[224.51869202 159.46815491]
[218.23751831 173.08972168]
[208.11784363 184.16184998]
[195.11468506 191.63967896]
[180.45516968 194.81750488]
[165.52273560 193.39543152]
[151.72656250 187.50765991]
[140.36863708 177.70982361]
[132.52165222 164.92858887]
[132.52165222 179.92858887]
[132.52165222 194.92858887]
[132.52165222 209.92858887]
[132.52165222 224.92858887]
[132.52165222 239.92858887]
[132.52165222 254.92858887]
[132.52165222 269.92858887]
[132.52165222 284.92858887]
[132.52165222 299.92858887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 124]
[12 123]
[13 122]
[14 29]
[15 28]
[16 27]
[17 26]
[30 38]
[31 37]
[32 36]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[45 114]
[53 106]
[54 105]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[62 95]
[63 94]
[64 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
