%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAxxxxxxxxxxUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.91168976 442.77648926]
[90.91168976 427.77648926]
[90.91168976 412.77648926]
[90.91168976 397.77648926]
[90.91168976 382.77648926]
[90.91168976 367.77648926]
[90.91168976 352.77648926]
[90.91168976 337.77648926]
[90.91168976 322.77648926]
[90.91168976 307.77648926]
[76.55967712 305.06451416]
[62.95156097 299.74707031]
[50.55608749 292.00570679]
[39.80052948 282.10540771]
[31.05595970 270.38574219]
[24.62445450 257.24896240]
[20.72866058 243.14637756]
[19.50408173 228.56278992]
[20.99436951 213.99978638]
[25.14977074 199.95857239]
[31.82878304 186.92266846]
[40.80297470 175.34127808]
[51.76479721 165.61375427]
[64.33812714 158.07594299]
[78.09116364 152.98847961]
[92.55127716 150.52783203]
[92.86332703 135.53108215]
[93.17538452 120.53432465]
[93.48744202 105.53757477]
[87.26075745 110.22613525]
[80.76873779 114.56331635]
[65.83442688 115.96562195]
[50.90011978 117.36791992]
[37.84724045 127.29537964]
[22.83004379 120.70629883]
[21.29693794 104.37897491]
[34.82505035 95.10955048]
[49.49781799 102.43361664]
[64.43212128 101.03131104]
[79.36643219 99.62900543]
[65.60886383 93.65160370]
[60.74288177 79.46279144]
[67.93650055 66.30027771]
[82.50628662 62.73357010]
[94.96650696 71.08478546]
[97.20500183 85.91640472]
[102.40041351 71.84488678]
[107.59583282 57.77336884]
[112.79124451 43.70185089]
[117.98666382 29.63032913]
[110.96643829 18.09022141]
[111.88205719 4.80904675]
[120.17313385 -5.35620832]
[132.62345886 -8.81831646]
[138.11048889 -22.77870750]
[143.59751892 -36.73909760]
[149.08454895 -50.69948578]
[143.01759338 -65.04625702]
[148.78109741 -79.12590790]
[162.49594116 -84.82141876]
[167.98297119 -98.78180695]
[154.83845520 -106.05345154]
[142.75556946 -114.97864532]
[131.94108582 -125.40465546]
[122.58001709 -137.15307617]
[114.83256531 -150.02288818]
[108.83129883 -163.79386902]
[104.67890167 -178.23037720]
[102.44643402 -193.08537292]
[102.17208862 -208.10469055]
[103.86056519 -223.03131104]
[107.48297119 -237.60983276]
[112.97731781 -251.59078979]
[120.24958801 -264.73495483]
[129.17535400 -276.81741333]
[139.60188293 -287.63140869]
[151.35075378 -296.99191284]
[164.22093201 -304.73873901]
[177.99218750 -310.73934937]
[192.42889404 -314.89105225]
[207.28399658 -317.12283325]
[222.30332947 -317.39645386]
[237.22987366 -315.70727539]
[251.80821228 -312.08416748]
[265.78890991 -306.58917236]
[278.93273926 -299.31625366]
[291.01477051 -290.38992310]
[301.82827759 -279.96289062]
[311.18820190 -268.21356201]
[318.93444824 -255.34301758]
[324.93438721 -241.57147217]
[329.08541870 -227.13456726]
[331.31646729 -212.27935791]
[331.58938599 -197.26000977]
[329.89947510 -182.33355713]
[326.27569580 -167.75538635]
[320.78002930 -153.77494812]
[313.50650024 -140.63146973]
[304.57958984 -128.54986572]
[294.15200806 -117.73686218]
[282.40225220 -108.37747955]
[269.53134155 -100.63186646]
[255.75950623 -94.63256073]
[241.32241821 -90.48223114]
[226.46708679 -88.25188446]
[211.44773865 -87.97968292]
[196.52136230 -89.67028809]
[181.94335938 -93.29477692]
[176.45632935 -79.33438110]
[182.62271118 -65.82470703]
[177.25694275 -51.58872223]
[163.04493713 -45.21245575]
[157.55790710 -31.25206566]
[152.07087708 -17.29167557]
[146.58384705 -3.33128524]
[153.95867920 11.75081921]
[148.05690002 27.82729721]
[132.05818176 34.82574463]
[126.86277008 48.89726639]
[121.66735077 62.96878433]
[116.47193909 77.04030609]
[111.27651978 91.11182404]
[108.48419952 105.84963226]
[108.17214203 120.84638214]
[107.86008453 135.84313965]
[107.54802704 150.83988953]
[122.61722565 154.13046265]
[136.75675964 160.28186035]
[149.42938232 169.05836487]
[160.15402222 180.12463379]
[168.52394104 193.05836487]
[174.22221375 207.36654663]
[177.03373718 222.50415039]
[176.85330200 237.89494324]
[173.68955994 252.95339966]
[167.66467285 267.10699463]
[159.00947571 279.81796265]
[148.05476379 290.60372925]
[135.21855164 299.05523682]
[120.99019623 304.85247803]
[105.91168976 307.77648926]
[105.91168976 322.77648926]
[105.91168976 337.77648926]
[105.91168976 352.77648926]
[105.91168976 367.77648926]
[105.91168976 382.77648926]
[105.91168976 397.77648926]
[105.91168976 412.77648926]
[105.91168976 427.77648926]
[105.91168976 442.77648926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 126]
[27 125]
[28 124]
[29 123]
[31 40]
[32 39]
[33 38]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[54 115]
[55 114]
[56 113]
[57 112]
[60 109]
[61 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
