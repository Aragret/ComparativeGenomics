%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCxxxxxxxxxxUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.68661499 551.92950439]
[97.27761841 532.72174072]
[97.58967590 517.72497559]
[97.90173340 502.72824097]
[98.21378326 487.73147583]
[98.52584076 472.73474121]
[98.83789825 457.73797607]
[99.14995575 442.74124146]
[99.46201324 427.74447632]
[99.77407074 412.74771118]
[85.48157501 409.73776245]
[71.98703003 404.13836670]
[59.75529099 396.14077759]
[49.20802307 386.01889038]
[40.70915604 374.11984253]
[34.55233765 360.85211182]
[30.95077515 346.67150879]
[30.02985382 332.06561279]
[31.82278633 317.53677368]
[36.26939774 303.58505249]
[43.21815872 290.69091797]
[52.43134308 279.29870605]
[63.59316254 269.80136108]
[76.32058716 262.52673340]
[90.17648315 257.72650146]
[104.68465424 255.56719971]
[105.30863190 240.58018494]
[96.33580017 225.53065491]
[106.24284363 210.04420471]
[106.55490112 195.04745483]
[105.61927032 180.07666016]
[103.44243622 165.23545837]
[101.11132812 150.41769409]
[98.62621307 135.62498474]
[96.14109039 120.83228302]
[93.65597534 106.03957367]
[91.26100922 104.04004669]
[89.56193542 101.10274506]
[88.91556549 97.49189758]
[89.57290649 93.60269928]
[91.63298035 89.91804504]
[90.38610840 74.96996307]
[89.13922882 60.02187347]
[87.89235687 45.07378769]
[86.64548492 30.12570000]
[77.78781891 17.01645088]
[84.44039154 3.69006395]
[83.19351196 -11.25802326]
[81.94664001 -26.20611000]
[78.88877106 -30.59576035]
[77.95924377 -35.25283432]
[78.89452362 -39.30585098]
[81.11812592 -42.12064362]
[73.09540558 -55.75686264]
[80.56626129 -68.64234924]
[76.10944366 -82.96494293]
[67.85715485 -95.49090576]
[59.60486603 -108.01686859]
[51.35257339 -120.54283142]
[36.45761108 -127.40373993]
[35.22149277 -143.75622559]
[48.91583252 -152.77825928]
[63.45306778 -145.18875122]
[63.87853622 -128.79512024]
[72.13082886 -116.26915741]
[80.38311768 -103.74319458]
[88.63540649 -91.21723175]
[88.18933105 -106.21060181]
[90.91643524 -120.96060944]
[96.69395447 -134.80331421]
[105.26181793 -147.11557007]
[116.23434448 -157.34315491]
[129.11761475 -165.02569580]
[143.33169556 -169.81735229]
[158.23674011 -171.50241089]
[173.16181946 -170.00506592]
[187.43508911 -165.39268494]
[200.41401672 -157.87289429]
[211.51438904 -147.78421021]
[220.23652649 -135.58074951]
[226.18780518 -121.81185913]
[229.10032654 -107.09733582]
[228.84298706 -92.09954071]
[225.42736816 -77.49359894]
[219.00721741 -63.93698502]
[209.87155151 -52.03994751]
[198.43159485 -42.33801651]
[185.20231628 -35.26792908]
[170.77922058 -31.14793587]
[155.81156921 -30.16349983]
[140.97309875 -32.35893250]
[126.93177032 -37.63540649]
[114.31964874 -45.75540543]
[103.70446014 -56.35341263]
[95.56301117 -68.95439911]
[103.56341553 -56.39085007]
[96.11488342 -42.43269730]
[96.89472961 -27.45298386]
[98.14160156 -12.50489712]
[99.38847351 2.44318962]
[108.15695190 14.48325157]
[101.59356689 28.87882614]
[102.84044647 43.82691193]
[104.08731842 58.77500153]
[105.33419037 73.72308350]
[106.58106995 88.67117310]
[108.44868469 103.55445099]
[110.93379974 118.34716034]
[113.41891479 133.13986206]
[115.90403748 147.93257141]
[120.43869019 155.93812561]
[118.28363800 163.05860901]
[120.46047211 177.89982605]
[129.03775024 165.59411621]
[143.15664673 160.52883911]
[157.60047913 164.57550049]
[167.03257751 176.23893738]
[167.96794128 191.20974731]
[160.06097412 203.95651245]
[146.23315430 209.76954651]
[131.59358215 206.50106812]
[121.55165100 195.35951233]
[121.23959351 210.35626221]
[129.60937500 220.22543335]
[129.00344849 232.74948120]
[120.29564667 241.20416260]
[119.67167664 256.19116211]
[134.66915894 259.79452515]
[148.67764282 266.23873901]
[161.16496277 275.27700806]
[171.65705872 286.56396484]
[179.75608826 299.66903687]
[185.15547180 314.09268188]
[187.65145874 329.28549194]
[187.15086365 344.66918945]
[183.67454529 359.65856934]
[177.35650635 373.68377686]
[168.43875122 386.21194458]
[157.26202393 396.76745605]
[144.25277710 404.95010376]
[129.90689087 410.45007324]
[114.77082062 413.05978394]
[114.45876312 428.05651855]
[114.14670563 443.05328369]
[113.83465576 458.05004883]
[113.52259827 473.04678345]
[113.21054077 488.04354858]
[112.89848328 503.04031372]
[112.58642578 518.03704834]
[112.27436829 533.03381348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[26 127]
[27 126]
[29 123]
[30 122]
[31 113]
[32 112]
[33 110]
[34 109]
[35 108]
[36 107]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[47 100]
[48 99]
[49 98]
[53 97]
[55 95]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
