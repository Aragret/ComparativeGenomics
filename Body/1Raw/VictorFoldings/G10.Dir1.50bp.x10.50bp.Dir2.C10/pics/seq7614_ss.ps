%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUxxxxxxxxxxCCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.55518532 123.75358582]
[-35.42178345 125.74964142]
[-48.06961823 135.25453186]
[-61.71330643 129.27966309]
[-76.57991028 131.27571106]
[-91.44650269 133.27177429]
[-104.09433746 142.77665710]
[-117.73802948 136.80178833]
[-132.60462952 138.79785156]
[-147.47122192 140.79391479]
[-160.11906433 150.29879761]
[-173.76275635 144.32392883]
[-188.62934875 146.31997681]
[-201.27719116 155.82487488]
[-214.92086792 149.85000610]
[-202.32511902 157.99536133]
[-195.99971008 171.59643555]
[-197.88676453 186.47726440]
[-207.40689087 198.06893921]
[-221.63710022 202.81246948]
[-236.20826721 199.25140381]
[-246.64657593 188.47912598]
[-249.74710083 173.80307007]
[-244.55790710 159.72924805]
[-232.67395020 150.57946777]
[-247.65419006 149.80981445]
[-262.63442993 149.04014587]
[-277.61465454 148.27049255]
[-292.59490967 147.50082397]
[-307.57516479 146.73117065]
[-322.55538940 145.96151733]
[-328.44104004 159.93058777]
[-338.75170898 171.04209900]
[-352.24234009 177.95429993]
[-367.28390503 179.83248901]
[-382.05999756 176.44985962]
[-394.78640747 168.21490479]
[-403.92630005 156.12200928]
[-408.37603760 141.63146973]
[-407.59826660 126.49308014]
[-401.68688965 112.53487396]
[-391.35574341 101.44237518]
[-377.85238647 94.55505371]
[-362.80740356 92.70459747]
[-348.03753662 96.11444092]
[-335.32635498 104.37284088]
[-326.20874023 116.48255157]
[-321.78573608 130.98126221]
[-306.80548096 131.75093079]
[-291.82525635 132.52058411]
[-276.84500122 133.29025269]
[-261.86477661 134.05990601]
[-246.88452148 134.82957458]
[-231.90428162 135.59922791]
[-216.91693115 134.98339844]
[-205.33245850 125.62129211]
[-190.62541199 131.45338440]
[-175.75880432 129.45732117]
[-164.17433167 120.09521484]
[-149.46728516 125.92730713]
[-134.60069275 123.93125153]
[-119.73408508 121.93519592]
[-108.14961243 112.57308197]
[-93.44256592 118.40517426]
[-78.57596588 116.40911865]
[-63.70936584 114.41306305]
[-52.12488937 105.05094910]
[-37.41783905 110.88304138]
[-22.55124092 108.88698578]
[-22.47116852 90.07033539]
[-19.51890564 71.48654938]
[-13.76368713 53.57146454]
[-5.34048748 36.74522018]
[5.55315495 21.40242577]
[18.66176224 7.90289736]
[33.67790985 -3.43677187]
[50.24944305 -12.35064507]
[67.98772430 -18.62967300]
[86.47675323 -22.12660408]
[105.28293610 -22.75942230]
[123.96521759 -20.51329231]
[142.08546448 -15.44088745]
[148.07376099 -29.19371605]
[154.06205750 -42.94654465]
[151.67735291 -59.17137909]
[164.70230103 -69.13545990]
[179.73794556 -62.58859634]
[181.31690979 -46.26564026]
[167.81489563 -36.95824814]
[161.82659912 -23.20541954]
[155.83830261 -9.45259094]
[177.01533508 4.25856209]
[194.94572449 22.00579453]
[208.87356567 43.04095078]
[222.56419373 36.91177750]
[236.25480652 30.78260422]
[249.94543457 24.65343094]
[263.63607788 18.52425766]
[264.00982666 3.26571679]
[270.97467041 -10.31566238]
[283.14770508 -19.52328682]
[298.11193848 -22.52897835]
[312.89624023 -18.73595047]
[324.56518555 -8.89731693]
[330.80184937 5.03345823]
[330.36801147 20.29040909]
[323.34973145 33.84425354]
[311.14056396 43.00387192]
[296.16458130 45.95061111]
[281.39532471 42.09939194]
[269.76522827 32.21488190]
[256.07461548 38.34405518]
[242.38398743 44.47322845]
[228.69335938 50.60240555]
[215.00273132 56.73157883]
[218.25399780 66.62670898]
[220.65556335 76.76165009]
[222.19015503 87.06356049]
[222.84675598 97.45843506]
[222.62065125 107.87156677]
[221.51345825 118.22813416]
[219.53314209 128.45372009]
[216.69390869 138.47486877]
[213.01618958 148.21954346]
[208.52639771 157.61775208]
[203.25680542 166.60194397]
[197.24525452 175.10755920]
[190.53494263 183.07351685]
[183.17411804 190.44253540]
[175.21563721 197.16168213]
[166.71669006 203.18269348]
[157.73837280 208.46228027]
[148.34516907 212.96252441]
[138.60458374 216.65106201]
[128.58659363 219.50143433]
[118.36321259 221.49311829]
[108.00788116 222.61181641]
[97.59500885 222.84950256]
[87.19941711 222.20446777]
[76.89580536 220.68132019]
[66.75820160 218.29103088]
[56.85945892 215.05076599]
[47.27070236 210.98381042]
[38.06082535 206.11938477]
[29.29601288 200.49244690]
[21.03923988 194.14341736]
[13.34983540 187.11793518]
[6.28305149 179.46646118]
[-0.11033396 171.24398804]
[-5.78438139 162.50959778]
[-10.69831944 153.32604980]
[-14.81684113 143.75932312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[4 66]
[5 65]
[6 64]
[8 62]
[9 61]
[10 60]
[12 58]
[13 57]
[15 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[82 91]
[83 90]
[84 89]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
