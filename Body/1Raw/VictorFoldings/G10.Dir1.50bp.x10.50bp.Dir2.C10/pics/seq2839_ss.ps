%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGAxxxxxxxxxxGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.32887268 236.02774048]
[95.01682281 221.03099060]
[94.70476532 206.03422546]
[94.39270782 191.03747559]
[94.08065033 176.04072571]
[93.76859283 161.04397583]
[93.45653534 146.04721069]
[93.14448547 131.05046082]
[92.83242798 116.05371094]
[87.63700867 101.98219299]
[78.12865448 90.38085175]
[68.62029266 78.77951050]
[59.11193466 67.17816925]
[48.09038162 69.82749176]
[36.93120575 68.27866364]
[27.16871643 62.79577255]
[20.12650490 54.18024063]
[16.73802567 43.65409470]
[1.83612394 41.94140244]
[-13.06577873 40.22871399]
[-27.96767998 38.51602554]
[-42.41743088 52.42372513]
[-62.19995880 52.21380997]
[-75.96772003 38.38767624]
[-90.86962891 40.10036469]
[-105.77153015 41.81305695]
[-120.67343140 43.52574539]
[-135.57533264 45.23843384]
[-140.10020447 59.77959824]
[-150.15318298 71.21889496]
[-163.99253845 77.57439423]
[-179.22048950 77.74497223]
[-193.19873047 71.70107269]
[-203.50543213 60.48984146]
[-208.35490417 46.05368805]
[-206.90693665 30.89376450]
[-199.41241455 17.63661957]
[-187.16978455 8.57913303]
[-172.30018616 5.29056931]
[-157.37983704 8.34069252]
[-144.99380493 17.20104980]
[-137.28802490 30.33653259]
[-122.38612366 28.62384224]
[-107.48421478 26.91115379]
[-92.58231354 25.19846344]
[-77.68041229 23.48577309]
[-77.37937927 22.08159447]
[-77.00002289 20.69652176]
[-89.43946075 12.31437874]
[-101.87890625 3.93223548]
[-118.39298248 0.09538248]
[-119.27763367 -16.83546829]
[-103.25333405 -22.37246895]
[-93.49675751 -8.50720501]
[-81.05731964 -0.12506160]
[-68.61788177 8.25708199]
[-56.65014648 2.62398219]
[-43.32769394 3.69692755]
[-32.18732071 11.32907963]
[-26.25499153 23.61412239]
[-11.35308838 25.32681274]
[3.54881358 27.03950119]
[18.45071602 28.75219154]
[30.30663109 14.37375546]
[48.39861679 9.90362453]
[53.30017090 -4.27293348]
[58.20172119 -18.44949150]
[63.10327148 -32.62604904]
[68.00482178 -46.80260849]
[72.90637207 -60.97916794]
[60.11738205 -68.94091797]
[49.42105865 -79.54923248]
[41.35393143 -92.27201843]
[36.32064056 -106.47109222]
[34.57365036 -121.43423462]
[36.20059586 -136.41091919]
[41.11986923 -150.64988708]
[49.08471680 -163.43695068]
[59.69562531 -174.13070679]
[72.42036438 -182.19474792]
[86.62065887 -187.22459412]
[101.58422852 -188.96795654]
[116.56050873 -187.33738708]
[130.79829407 -182.41467285]
[143.58341980 -174.44671631]
[154.27459717 -163.83322144]
[162.33557129 -151.10653687]
[167.36196899 -136.90501404]
[169.10171509 -121.94102478]
[167.46751404 -106.96514130]
[162.54133606 -92.72854614]
[154.57029724 -79.94535065]
[143.95420837 -69.25674438]
[131.22555542 -61.19886398]
[117.02283478 -56.17589569]
[102.05841827 -54.43978500]
[87.08293152 -56.07761383]
[82.18138123 -41.90105820]
[77.27983093 -27.72449875]
[72.37828064 -13.54794121]
[67.47673035 0.62861717]
[62.57517624 14.80517483]
[73.19491577 26.63949013]
[76.25333405 42.41217041]
[70.71327972 57.66980743]
[80.22163391 69.27114868]
[89.72999573 80.87248993]
[99.23834991 92.47383118]
[103.32058716 84.63526917]
[111.99800110 79.35949707]
[123.85551453 78.62757111]
[136.74296570 83.73017883]
[150.96975708 88.48399353]
[160.63269043 76.77963257]
[173.87312317 69.35970306]
[188.90040588 67.22770691]
[203.68220520 70.67195892]
[216.21940613 79.22666168]
[224.81645203 91.73486328]
[228.31068420 106.50492859]
[226.22952271 121.53932953]
[218.85441589 134.80477905]
[207.18280029 144.50724792]
[192.79316711 149.33454895]
[177.63159180 148.63383484]
[163.74855042 142.49986267]
[153.02160645 131.76220703]
[146.90150452 117.87303925]
[146.21594238 102.71076965]
[131.98915100 97.95695496]
[125.94916534 102.40312958]
[136.15524292 113.39567566]
[146.36131287 124.38822174]
[158.87677002 132.65641785]
[159.25711060 147.65159607]
[147.17687988 156.54362488]
[132.97215271 151.72434998]
[128.79653931 137.31803894]
[121.33285522 124.30676270]
[113.86917114 111.29547882]
[107.82917786 115.74165344]
[108.14123535 130.73840332]
[108.45329285 145.73516846]
[108.76535034 160.73191833]
[109.07740784 175.72866821]
[109.38945770 190.72541809]
[109.70151520 205.72216797]
[110.01357269 220.71893311]
[110.32563019 235.71568298]
[112.91662598 254.92340088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 108]
[11 107]
[12 106]
[13 105]
[18 63]
[19 62]
[20 61]
[21 60]
[24 46]
[25 45]
[26 44]
[27 43]
[28 42]
[48 56]
[49 55]
[50 54]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[112 130]
[113 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
