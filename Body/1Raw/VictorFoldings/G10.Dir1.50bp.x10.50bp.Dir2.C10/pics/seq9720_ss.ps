%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUxxxxxxxxxxACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 246.47631836]
[92.50000000 231.47631836]
[92.50000000 216.47631836]
[92.50000000 201.47631836]
[92.50000000 186.47631836]
[92.50000000 171.47631836]
[92.50000000 156.47631836]
[92.50000000 141.47631836]
[92.50000000 126.47631836]
[92.50000000 111.47631836]
[87.30458069 97.40480042]
[77.55693054 86.00378418]
[67.80928040 74.60276031]
[58.06162643 63.20174026]
[43.21280289 57.74070358]
[40.82294083 43.03907394]
[31.07528877 31.63805389]
[21.32763672 20.23703384]
[6.47881079 14.77599716]
[4.08895111 0.07437048]
[-5.65870094 -11.32665062]
[-15.40635300 -22.72767067]
[-25.15400505 -34.12869263]
[-37.36881638 -25.40586090]
[-50.29739380 -17.78082275]
[-63.84134674 -11.31161213]
[-77.89759827 -6.04746246]
[-92.35916138 -2.02843809]
[-107.11597443 0.71487284]
[-122.05573273 2.16159177]
[-137.06472778 2.30070806]
[-152.02873230 1.13116288]
[-166.83386230 -1.33814251]
[-181.36744690 -5.08841467]
[-195.51885986 -10.09111214]
[-209.18038940 -16.30815887]
[-222.24809265 -23.69224167]
[-234.62248230 -32.18716049]
[-246.20941162 -41.72826004]
[-256.92068481 -52.24292755]
[-266.67474365 -63.65114212]
[-275.39739990 -75.86607361]
[-283.02227783 -88.79476166]
[-289.49127197 -102.33880615]
[-294.75524902 -116.39512634]
[-298.77404785 -130.85675049]
[-301.51715088 -145.61360168]
[-302.96368408 -160.55337524]
[-303.10256958 -175.56237793]
[-301.93283081 -190.52636719]
[-299.46331787 -205.33146667]
[-295.71282959 -219.86499023]
[-290.70993042 -234.01632690]
[-284.49270630 -247.67778015]
[-277.10842896 -260.74536133]
[-268.61334229 -273.11965942]
[-259.07208252 -284.70645142]
[-248.55726624 -295.41754150]
[-237.14891052 -305.17147827]
[-224.93385315 -313.89395142]
[-212.00506592 -321.51864624]
[-198.46093750 -327.98745728]
[-184.40454102 -333.25122070]
[-169.94285583 -337.26983643]
[-155.18597412 -340.01272583]
[-140.24617004 -341.45904541]
[-125.23716736 -341.59771729]
[-110.27319336 -340.42776489]
[-95.46813202 -337.95803833]
[-80.93466187 -334.20736694]
[-66.78339386 -329.20428467]
[-53.12202454 -322.98684692]
[-40.05453491 -315.60238647]
[-27.68037415 -307.10711670]
[-16.09372139 -297.56570435]
[-5.38275528 -287.05072021]
[4.37100315 -275.64224243]
[13.09332085 -263.42706299]
[20.71781349 -250.49816895]
[27.18645477 -236.95394897]
[32.45001221 -222.89747620]
[36.46842957 -208.43574524]
[39.21112061 -193.67881775]
[40.65721130 -178.73899841]
[40.79569626 -163.72999573]
[39.62551880 -148.76603699]
[37.15559387 -133.96099854]
[33.40470886 -119.42758942]
[28.40141487 -105.27639008]
[22.18379402 -91.61511230]
[14.79916191 -78.54772186]
[6.30372381 -66.17368317]
[-3.23786426 -54.58716202]
[-13.75298405 -43.87634277]
[-4.00533199 -32.47532272]
[5.74232006 -21.07430267]
[15.48997211 -9.67328167]
[29.64158249 -5.02772284]
[32.72865677 10.48938179]
[42.47631073 21.89040184]
[52.22396088 33.29142380]
[66.37557220 37.93698120]
[69.46264648 53.45408630]
[79.21030426 64.85511017]
[88.95795441 76.25612640]
[98.70560455 87.65715027]
[133.64816284 77.75164032]
[148.35612488 80.69712830]
[155.54734802 67.40134430]
[166.33924866 56.81710434]
[179.77223206 49.88553619]
[194.65182495 47.22299576]
[209.65495300 49.06623459]
[223.44754028 55.25135040]
[234.80317688 65.22837067]
[242.71212769 78.11014557]
[246.47111511 92.75122833]
[245.74589539 107.84975433]
[240.60096741 122.06317139]
[231.49380493 134.12762451]
[219.23422241 142.97035217]
[204.91232300 147.80508423]
[189.80160522 148.20188904]
[175.24569702 144.12550354]
[162.53889465 135.93838501]
[152.81109619 124.36853790]
[146.92729187 110.44474030]
[145.41064453 95.40509033]
[130.70268250 92.45960236]
[124.90200806 97.21378326]
[136.39732361 106.85005951]
[147.89263916 116.48633575]
[161.35064697 123.11066437]
[165.98876953 137.37557983]
[159.00003052 150.64801025]
[144.61396790 154.89553833]
[131.53700256 147.54756165]
[127.68343353 133.04962158]
[120.49205017 119.88587952]
[113.30066681 106.72214508]
[107.50000000 111.47631836]
[107.50000000 126.47631836]
[107.50000000 141.47631836]
[107.50000000 156.47631836]
[107.50000000 171.47631836]
[107.50000000 186.47631836]
[107.50000000 201.47631836]
[107.50000000 216.47631836]
[107.50000000 231.47631836]
[107.50000000 246.47631836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 106]
[12 105]
[13 104]
[14 103]
[16 101]
[17 100]
[18 99]
[20 97]
[21 96]
[22 95]
[23 94]
[107 129]
[108 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
