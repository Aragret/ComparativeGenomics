%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCxxxxxxxxxxUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.37028503 113.72991943]
[142.26139832 100.66613007]
[127.44364166 102.99723053]
[112.62588501 105.32833862]
[99.93095398 113.31825256]
[91.41986084 125.66982269]
[82.90877533 138.02139282]
[74.39768219 150.37297058]
[72.93856812 166.12675476]
[59.34585190 172.21667480]
[50.83475876 184.56825256]
[42.32366943 196.91983032]
[41.55724335 213.30105591]
[26.86526489 220.58650208]
[13.36157990 211.28152466]
[14.93762398 194.95828247]
[29.97209740 188.40873718]
[38.48318863 176.05715942]
[46.99427795 163.70559692]
[47.84461975 148.83528137]
[62.04610825 141.86187744]
[70.55719757 129.51031494]
[79.06829071 117.15873718]
[87.57937622 104.80715942]
[85.12860107 97.71888733]
[80.22705078 83.54232788]
[77.77627563 76.45404816]
[63.45368195 71.99723053]
[49.13108444 67.54041290]
[33.65521622 70.82797241]
[23.80162239 59.65855408]
[8.32575417 62.94611359]
[-1.52783716 51.77669144]
[-15.85043430 47.31987381]
[-30.17303085 42.86306000]
[-44.49562836 38.40624619]
[-53.42829132 50.63270187]
[-65.84831238 59.29421616]
[-80.40845490 63.45125580]
[-95.52934265 62.65289307]
[-109.57078552 56.98573303]
[-121.00965881 47.06449890]
[-128.60516357 33.96537781]
[-131.53340149 19.10926437]
[-129.47674561 4.10763645]
[-122.65826416 -9.41224098]
[-111.81758881 -19.98383331]
[-98.13063812 -26.46041107]
[-83.08206940 -28.13944626]
[-68.30422974 -24.83880806]
[-55.40011215 -16.91652489]
[-45.76946640 -5.23194742]
[-40.45694351 8.94746876]
[-40.03881454 24.08364677]
[-25.71621513 28.54046249]
[-11.39361858 32.99728012]
[2.92897868 37.45409393]
[17.38039970 33.84775162]
[28.25843811 45.33595657]
[42.70985794 41.72961426]
[53.58789825 53.21781921]
[67.91049957 57.67463303]
[82.23309326 62.13145065]
[110.29477692 90.51058197]
[125.11253357 88.17947388]
[139.93029785 85.84837341]
[138.76373291 68.87344360]
[139.17179871 51.86386490]
[141.15092468 34.96538162]
[144.68405151 18.32278252]
[149.74082947 2.07865953]
[156.27783203 -13.62782001]
[164.23895264 -28.66210556]
[173.55590820 -42.89541245]
[184.14877319 -56.20582581]
[195.92671204 -68.47934723]
[208.78875732 -79.61087036]
[222.62460327 -89.50507355]
[237.31565857 -98.07725525]
[252.73599243 -105.25403595]
[268.75341797 -110.97399902]
[285.23068237 -115.18821716]
[302.02655029 -117.86067200]
[318.99707031 -118.96855164]
[335.99685669 -118.50244141]
[352.88021851 -116.46643829]
[369.50250244 -112.87807465]
[385.72128296 -107.76818848]
[401.39761353 -101.18064880]
[416.39721680 -93.17198944]
[430.59161377 -83.81091309]
[443.85916138 -73.17770386]
[456.08630371 -61.36355972]
[467.16827393 -48.46976852]
[477.01022339 -34.60688019]
[489.94830322 -42.19678879]
[502.88635254 -49.78669739]
[515.82440186 -57.37660599]
[523.45043945 -71.89472961]
[539.84503174 -72.27901459]
[548.14294434 -58.13414383]
[539.80786133 -44.01114273]
[523.41430664 -44.43854904]
[510.47625732 -36.84864044]
[497.53820801 -29.25873375]
[484.60012817 -21.66882515]
[490.47732544 -9.60678864]
[495.45828247 2.85236049]
[499.51638794 15.64213562]
[502.62997437 28.69428635]
[504.78240967 41.93915558]
[505.96209717 55.30606079]
[506.16278076 68.72366333]
[505.38330078 82.12033844]
[503.62783813 95.42459869]
[500.90567017 108.56542206]
[497.23132324 121.47267151]
[492.62435913 134.07743835]
[487.10937500 146.31243896]
[480.71572876 158.11236572]
[473.47750854 169.41421509]
[465.43338013 180.15763855]
[456.62615967 190.28529358]
[447.10290527 199.74310303]
[436.91439819 208.48054504]
[426.11495972 216.45095825]
[414.76223755 223.61180115]
[402.91683960 229.92480469]
[390.64190674 235.35624695]
[378.00296021 239.87710571]
[365.06747437 243.46322632]
[351.90444946 246.09542847]
[338.58416748 247.75962830]
[325.17767334 248.44692993]
[311.75653076 248.15359497]
[298.39239502 246.88117981]
[285.15658569 244.63642883]
[272.11975098 241.43128967]
[259.35150146 237.28285217]
[246.91993713 232.21319580]
[234.89147949 226.24937439]
[223.33032227 219.42315674]
[212.29818726 211.77098083]
[201.85397339 203.33364868]
[192.05345154 194.15614319]
[182.94895935 184.28744507]
[174.58911133 173.78021240]
[167.01853943 162.69047546]
[160.27767944 151.07740784]
[154.40257263 139.00299072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 24]
[6 23]
[7 22]
[8 21]
[10 19]
[11 18]
[12 17]
[27 63]
[28 62]
[29 61]
[31 59]
[33 57]
[34 56]
[35 55]
[36 54]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
