%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAxxxxxxxxxxCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.90433502 417.16601562]
[108.90433502 402.16601562]
[108.90433502 387.16601562]
[108.90433502 372.16601562]
[108.90433502 357.16601562]
[108.90433502 342.16601562]
[108.90433502 327.16601562]
[108.90433502 312.16601562]
[108.90433502 297.16601562]
[108.90433502 282.16601562]
[91.14202118 277.63168335]
[75.29161835 268.39837646]
[62.56941986 255.16717529]
[53.95370483 238.94624329]
[50.10951614 220.97401428]
[51.33732986 202.62455750]
[57.54957962 185.30265808]
[68.27687073 170.33613586]
[82.70343781 158.87416077]
[99.72917938 151.79895020]
[97.63497162 136.94586182]
[95.54077148 122.09276581]
[89.86126709 120.12911224]
[84.90254211 116.73444366]
[81.01711273 112.15010834]
[66.41252136 115.57147217]
[51.80792236 118.99283600]
[37.20332336 122.41420746]
[22.59872818 125.83557129]
[7.99413157 129.25694275]
[-6.61046553 132.67829895]
[-18.19112015 144.28952026]
[-33.96521759 139.80511475]
[-37.70571899 123.83825684]
[-25.56471443 112.81427765]
[-10.03183174 118.07370758]
[4.57276487 114.65234375]
[19.17736244 111.23097992]
[33.78195953 107.80960846]
[48.38655472 104.38824463]
[62.99115372 100.96687317]
[77.59574890 97.54550934]
[81.10624695 87.71175385]
[88.67189789 80.51541138]
[98.66889191 77.50104523]
[102.81627655 63.08580017]
[106.96366119 48.67055511]
[111.11103821 34.25531387]
[93.45142365 33.47215652]
[87.14495087 18.56096649]
[75.02735901 9.71992302]
[62.90977478 0.87887907]
[46.90094757 1.92626536]
[36.20771027 -10.03342628]
[39.03299713 -25.82574463]
[53.20949173 -33.33617401]
[67.86219788 -26.80335617]
[71.75081635 -11.23870945]
[83.86840820 -2.39766502]
[95.98599243 6.44337893]
[109.25505829 5.88740396]
[118.64476776 16.93156242]
[126.36032867 4.06804609]
[134.07589722 -8.79547119]
[134.53903198 -24.60989761]
[147.72084045 -31.54455376]
[155.43640137 -44.40807343]
[163.15196228 -57.27158737]
[157.24301147 -71.49798584]
[160.80241394 -86.30284882]
[172.26142883 -96.05760193]
[187.08964539 -97.18090057]
[194.80520630 -110.04441833]
[181.54127502 -103.03955078]
[166.77648926 -100.39360809]
[151.90548706 -102.35651398]
[138.33291626 -108.74286652]
[127.34082794 -118.94943237]
[119.96748352 -132.01211548]
[116.90934753 -146.69706726]
[118.45529938 -161.61718750]
[124.45928955 -175.36317444]
[134.35421753 -186.63661194]
[147.20542908 -194.37266541]
[161.79904175 -197.84057617]
[176.75659180 -196.71281433]
[190.66522217 -191.09588623]
[202.21116638 -181.52033997]
[210.30384827 -168.89067078]
[214.17884827 -154.39982605]
[213.47013855 -139.41658020]
[208.24482727 -125.35648346]
[219.99899292 -134.67526245]
[231.75314331 -143.99404907]
[243.50730896 -153.31283569]
[240.59892273 -168.33947754]
[245.01799011 -182.99316406]
[255.74906921 -193.90657043]
[270.32623291 -198.57189941]
[285.39971924 -195.91706848]
[297.50579834 -186.55216980]
[303.86254883 -172.62915039]
[303.00927734 -157.34745789]
[295.14199829 -144.21867371]
[282.06860352 -136.25973511]
[266.79324341 -135.29951477]
[252.82609558 -141.55868530]
[241.07192993 -132.23989868]
[229.31777954 -122.92111206]
[217.56361389 -113.60232544]
[207.66873169 -102.32884979]
[199.95317078 -89.46533203]
[205.94396973 -75.85474396]
[202.73359680 -61.15245056]
[191.34843445 -51.04148102]
[176.01548767 -49.55602646]
[168.29991150 -36.69250870]
[160.58435059 -23.82899094]
[160.67308044 -8.93464947]
[146.93940735 -1.07990813]
[139.22384644 11.78360939]
[131.50828552 24.64712715]
[125.52628326 38.40269470]
[121.37889862 52.81793976]
[117.23152161 67.23317719]
[113.08413696 81.64842224]
[122.48304749 101.57719421]
[110.39386749 119.99856567]
[112.48806763 134.85165405]
[114.58226776 149.70474243]
[126.52137756 150.47714233]
[138.12574768 153.37036133]
[149.02189636 158.28961182]
[158.85945129 165.07496643]
[167.32235718 173.50650024]
[174.13909912 183.31144714]
[179.09136963 194.17298889]
[182.02105713 205.74055481]
[182.83535767 217.64105225]
[181.50959778 229.49096680]
[178.08808899 240.90872192]
[172.68260193 251.52691650]
[165.46870422 261.00418091]
[156.68008423 269.03613281]
[146.60096741 275.36523438]
[135.55691528 279.78884888]
[123.90433502 282.16601562]
[123.90433502 297.16601562]
[123.90433502 312.16601562]
[123.90433502 327.16601562]
[123.90433502 342.16601562]
[123.90433502 357.16601562]
[123.90433502 372.16601562]
[123.90433502 387.16601562]
[123.90433502 402.16601562]
[123.90433502 417.16601562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[20 130]
[21 129]
[22 128]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[45 126]
[46 125]
[47 124]
[48 123]
[50 60]
[51 59]
[52 58]
[62 122]
[63 121]
[64 120]
[66 118]
[67 117]
[68 116]
[72 112]
[73 111]
[92 110]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
