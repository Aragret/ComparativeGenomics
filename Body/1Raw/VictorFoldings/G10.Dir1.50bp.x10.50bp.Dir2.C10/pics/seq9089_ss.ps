%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAAxxxxxxxxxxAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.20497131 291.00381470]
[89.20497131 276.00381470]
[89.20497131 261.00381470]
[89.20497131 246.00379944]
[89.20497131 231.00379944]
[89.20497131 216.00379944]
[89.20497131 201.00379944]
[89.20497131 186.00379944]
[89.20497131 171.00379944]
[89.20497131 156.00379944]
[84.28028870 97.88456726]
[68.45957947 98.01003265]
[61.03936005 85.09532928]
[47.89772797 77.86362457]
[34.75609589 70.63192749]
[21.61446381 63.40022278]
[7.36777210 58.70642090]
[-7.49882650 56.71036530]
[-22.36542511 54.71430588]
[-37.23202515 52.71825027]
[-52.09862137 50.72219467]
[-58.73215103 62.96722794]
[-72.30754089 70.62125397]
[-89.54147339 69.88138580]
[-105.20232391 59.26419830]
[-120.19520569 59.72612381]
[-128.73748779 63.13572311]
[-135.49996948 60.04042816]
[-150.49919128 60.19442368]
[-165.49839783 60.34841919]
[-180.49760437 60.50241852]
[-195.49681091 60.65641403]
[-202.41328430 74.31002045]
[-214.88938904 83.17598724]
[-230.05821228 85.21698761]
[-244.43405151 79.96401215]
[-254.71345520 68.62414551]
[-258.53430176 53.80322647]
[-255.01855469 38.90697479]
[-244.97415161 27.35845184]
[-230.70919800 21.81141853]
[-215.50167847 23.54054260]
[-202.84616089 32.14848709]
[-195.65080261 45.65720367]
[-180.65159607 45.50320816]
[-165.65238953 45.34921265]
[-150.65318298 45.19521332]
[-135.65397644 45.04121780]
[-120.65713501 44.73323822]
[-105.66424561 44.27131271]
[-103.02687836 37.25032425]
[-97.75213623 23.20834923]
[-95.11476135 16.18736076]
[-106.09556580 5.96865368]
[-122.19065857 2.82539606]
[-127.25942230 -12.77074623]
[-116.08755493 -24.77579880]
[-100.16770935 -20.83999443]
[-95.87686157 -5.01214886]
[-84.89605713 5.20655823]
[-58.10704803 14.16034126]
[-50.10256577 35.85559464]
[-35.23596573 37.85165024]
[-20.36936760 39.84770966]
[-5.50276947 41.84376526]
[9.36382866 43.83982086]
[-2.26099896 34.36019135]
[-10.45972443 21.79910660]
[-14.45862293 7.34196949]
[-13.88031292 -7.64687824]
[-8.77936935 -21.75291824]
[0.36282346 -33.64494705]
[12.68350506 -42.20069122]
[27.01995659 -46.61274338]
[42.01922607 -46.46472168]
[56.26581192 -41.77060318]
[68.41524506 -32.97337341]
[77.32096863 -20.90324020]
[82.14253998 -6.69927979]
[82.42492676 8.29806232]
[78.14149475 22.67346573]
[69.69647217 35.07030487]
[57.88682938 44.31867218]
[43.82705688 49.54578400]
[28.84616661 50.25859070]
[41.98779678 57.49029160]
[55.12942886 64.72199249]
[68.27106476 71.95369720]
[83.15179443 71.31097412]
[91.51198578 84.74293518]
[106.33447266 82.44206238]
[116.66537476 71.56674957]
[117.69270325 55.55662155]
[130.93235779 46.49621201]
[146.22801208 51.33589172]
[151.84614563 66.36307526]
[143.47700500 80.05018616]
[127.54068756 81.89765167]
[117.20978546 92.77296448]
[119.84715271 99.79395294]
[134.64523315 102.24684906]
[125.12189484 113.83592987]
[127.75926971 120.85691833]
[142.69528198 122.24094391]
[157.63128662 123.62496948]
[172.56730652 125.00899506]
[177.41838074 122.76793671]
[182.16127014 122.66490173]
[185.98619080 124.28957367]
[188.37046814 126.96585083]
[203.19294739 129.26672363]
[215.86544800 120.20883179]
[230.86477661 122.75339508]
[239.42199707 134.89051819]
[254.24447632 137.19139099]
[269.06695557 139.49226379]
[284.15490723 133.06687927]
[297.09906006 143.13569641]
[294.58358765 159.34077454]
[279.19616699 165.01171875]
[266.76608276 154.31474304]
[251.94360352 152.01387024]
[237.12112427 149.71299744]
[225.28718567 158.68481445]
[210.22230530 156.56256104]
[200.89207458 144.08920288]
[186.06958008 141.78833008]
[171.18327332 139.94500732]
[156.24726868 138.56097412]
[141.31124878 137.17695618]
[126.37524414 135.79292297]
[120.83267212 140.84564209]
[133.27671814 149.22094727]
[145.72076416 157.59625244]
[159.08772278 164.40248108]
[163.90953064 178.60635376]
[157.44859314 192.14356995]
[143.37313843 197.32832336]
[129.67456055 191.21691895]
[124.13031006 177.27856445]
[116.93892670 164.11482239]
[109.74754333 150.95108032]
[104.20497131 156.00379944]
[104.20497131 171.00379944]
[104.20497131 186.00379944]
[104.20497131 201.00379944]
[104.20497131 216.00379944]
[104.20497131 231.00379944]
[104.20497131 246.00379944]
[104.20497131 261.00381470]
[104.20497131 276.00381470]
[104.20497131 291.00381470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 90]
[13 88]
[14 87]
[15 86]
[16 85]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[53 60]
[54 59]
[91 99]
[92 98]
[103 131]
[104 130]
[105 129]
[106 128]
[110 127]
[111 126]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
