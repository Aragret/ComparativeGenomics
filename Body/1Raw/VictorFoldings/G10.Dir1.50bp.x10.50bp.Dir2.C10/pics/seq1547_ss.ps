%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGxxxxxxxxxxAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[180.49473572 343.79241943]
[180.18267822 328.79565430]
[179.87062073 313.79888916]
[179.55857849 298.80215454]
[179.24652100 283.80538940]
[178.93446350 268.80862427]
[178.62240601 253.81188965]
[178.31034851 238.81512451]
[177.99829102 223.81837463]
[173.09674072 209.64181519]
[164.07920837 197.65498352]
[149.21478271 198.08735657]
[136.79917908 189.58345032]
[131.71217346 175.23159790]
[136.10215759 160.46560669]
[127.08461761 148.47877502]
[118.06709290 136.49194336]
[109.04956055 124.50511169]
[98.48685455 126.88445282]
[87.53477478 124.77183533]
[78.07596588 118.26522827]
[71.84052277 108.23864746]
[70.09228516 96.23117828]
[73.38123322 84.21221161]
[81.40916443 74.25849915]
[70.53034210 63.93128967]
[59.65151596 53.60408401]
[48.77268982 43.27688217]
[37.89386749 32.94967651]
[17.31333351 42.76070023]
[-5.43882608 42.92519760]
[-26.07420349 33.45172882]
[-40.72013855 16.16173172]
[-46.64649200 -5.66055202]
[-61.58079910 -7.06285572]
[-71.01709747 5.14205408]
[-85.56152344 10.28629208]
[-100.57300568 6.72835112]
[-111.26143646 -4.39644337]
[-114.21617126 -19.53820992]
[-108.49436951 -33.86526489]
[-95.92182922 -42.80589676]
[-80.51041412 -43.50718689]
[-67.17784882 -35.74534988]
[-60.17849350 -21.99716377]
[-45.24418640 -20.59486008]
[-43.11733627 -27.32398987]
[-40.09949112 -33.70343399]
[-36.24616241 -39.61584091]
[-31.62823296 -44.95245361]
[-40.64576340 -56.93928528]
[-49.66329193 -68.92611694]
[-58.68082047 -80.91294861]
[-67.69834900 -92.89978027]
[-82.17762756 -99.27638245]
[-83.64582062 -114.09844971]
[-92.66335297 -126.08528137]
[-108.28326416 -129.74557495]
[-115.02993774 -144.30105591]
[-107.72789764 -158.58599854]
[-91.97864532 -161.64222717]
[-79.86365509 -151.12525940]
[-80.67651367 -135.10281372]
[-71.65898895 -123.11598206]
[-57.82470322 -117.59675598]
[-55.71151733 -101.91731262]
[-46.69398880 -89.93048096]
[-37.67646027 -77.94364929]
[-28.65892982 -65.95681763]
[-19.64139938 -53.96998215]
[-9.75101376 -58.16081238]
[0.79735208 -60.23402023]
[11.55519867 -60.09788513]
[22.06438828 -57.75470734]
[31.87664986 -53.30083847]
[40.57270432 -46.92274475]
[47.78018570 -38.88919830]
[53.18956757 -29.53994751]
[56.56747818 -19.27134895]
[57.76674652 -8.51956844]
[56.73282242 2.25794363]
[53.50624847 12.60192204]
[48.22106934 22.07085037]
[59.09989548 32.39805603]
[69.97872162 42.72526169]
[80.85754395 53.05246353]
[91.73637390 63.37966919]
[106.73312378 63.06761551]
[117.17293549 52.29680634]
[127.61274719 41.52599716]
[138.05256653 30.75518799]
[139.24093628 14.75621033]
[152.57110596 5.82948399]
[167.81727600 10.82283115]
[173.28392029 25.90578270]
[164.77748108 39.50798798]
[148.82336426 41.19499969]
[138.38356018 51.96580887]
[127.94374847 62.73661804]
[117.50393677 73.50742340]
[128.48999023 94.92893219]
[121.03639221 115.48757935]
[130.05392456 127.47441101]
[139.07145691 139.46124268]
[148.08898926 151.44807434]
[163.49322510 151.32313538]
[175.87261963 160.18904114]
[180.60177612 174.47535706]
[176.06604004 188.63745117]
[185.08357239 200.62428284]
[183.87411499 185.67312622]
[185.54931641 170.76696777]
[190.04719543 156.45721436]
[197.20138550 143.27322388]
[206.74720764 131.70268250]
[218.33155823 122.17363739]
[231.52590942 115.03857422]
[245.84216309 110.56143188]
[260.75073242 108.90783691]
[275.70013428 110.13896179]
[290.13732910 114.20925140]
[303.52828979 120.96814728]
[315.37759399 130.16561890]
[325.24697876 141.46144104]
[332.77130127 154.43774414]
[337.67227173 168.61450195]
[339.76852417 183.46730042]
[338.98257446 198.44670105]
[335.34347534 212.99856567]
[328.98583984 226.58460999]
[320.14486694 238.70223999]
[309.14758301 248.90321350]
[296.40081787 256.81015015]
[282.37609863 262.13058472]
[267.59219360 264.66769409]
[252.59605408 264.32760620]
[237.94239807 261.12289429]
[224.17327881 255.17216492]
[211.79804993 246.69549561]
[201.27452087 236.00646973]
[192.99504089 223.50631714]
[193.30709839 238.50308228]
[193.61915588 253.49983215]
[193.93121338 268.49658203]
[194.24327087 283.49334717]
[194.55532837 298.49008179]
[194.86738586 313.48684692]
[195.17944336 328.48361206]
[195.49150085 343.48034668]
[198.08248901 362.68807983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 110]
[11 109]
[15 105]
[16 104]
[17 103]
[18 102]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[34 46]
[35 45]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[56 64]
[57 63]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
