%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCxxxxxxxxxxAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[206.87400818 68.33927155]
[191.93635559 69.70548248]
[176.99870300 71.07170105]
[162.06105042 72.43791962]
[147.12339783 73.80413818]
[132.18574524 75.17035675]
[103.54401398 142.97850037]
[93.09986877 153.74510193]
[82.65571594 164.51170349]
[72.21157074 175.27830505]
[61.76741791 186.04490662]
[68.13502502 199.82235718]
[69.09174347 214.96994019]
[64.50819397 229.43905640]
[55.00426102 241.27290344]
[41.86527252 248.87101746]
[26.86817360 251.20584106]
[12.04119301 247.96160889]
[-0.61043972 239.57705688]
[-9.37569427 227.18614197]
[-13.06914330 212.46463013]
[-11.19127750 197.40348816]
[-3.99606323 184.03961182]
[7.54340649 174.18034363]
[21.86651230 169.15908813]
[37.03617096 169.65490723]
[51.00081635 175.60076904]
[61.44496536 164.83416748]
[71.88911438 154.06755066]
[82.33325958 143.30094910]
[92.77741241 132.53434753]
[90.82403564 125.29319763]
[80.23528290 135.91761780]
[65.73991394 132.05960083]
[61.83348083 117.57720947]
[72.42246246 106.95301056]
[86.91728210 110.81088257]
[84.96390533 103.56973267]
[70.52193451 99.51641846]
[56.07995605 95.46310425]
[45.14814758 106.25157166]
[30.28264618 110.11323547]
[15.48219395 106.00930786]
[4.72803974 95.04373932]
[0.91299659 80.16620636]
[5.06329203 65.37868500]
[16.06251717 54.65895844]
[30.95193672 50.89056778]
[45.72637177 55.08719635]
[56.41157150 66.11996460]
[60.13327026 81.02112579]
[74.57524872 85.07444000]
[89.01721954 89.12775421]
[93.11263275 82.84463501]
[105.39886475 63.99527359]
[95.86095428 52.41821671]
[86.32303619 40.84116364]
[70.56981659 39.57162476]
[60.39208984 27.48074722]
[61.82810974 11.74183369]
[74.02591705 1.69250345]
[89.74876404 3.29484510]
[99.66857147 15.59821796]
[97.90009308 31.30324936]
[107.43800354 42.88030243]
[116.97592163 54.45735931]
[130.81951904 60.23270035]
[145.75717163 58.86648560]
[160.69482422 57.50026703]
[175.63247681 56.13405228]
[190.57012939 54.76783371]
[205.50778198 53.40161514]
[205.50189209 38.14651108]
[206.88607788 22.95480156]
[209.64877319 7.95288658]
[213.76689148 -6.73441458]
[219.20608521 -20.98491287]
[225.92102051 -34.68006134]
[233.85572815 -47.70593643]
[242.94412231 -59.95420074]
[253.11051941 -71.32298279]
[264.27026367 -81.71773529]
[276.33041382 -91.05203247]
[289.19058228 -99.24826813]
[302.74371338 -106.23831177]
[316.87698364 -111.96407318]
[331.47277832 -116.37799072]
[346.40960693 -119.44341278]
[361.56314087 -121.13492584]
[376.80731201 -121.43852997]
[392.01528931 -120.35177612]
[407.06045532 -117.88381195]
[421.81771851 -114.05523682]
[436.16427612 -108.89800262]
[449.98074341 -102.45510101]
[463.15225220 -94.78021240]
[475.56918335 -85.93728638]
[487.12829590 -75.99996185]
[497.73345947 -65.05099487]
[507.29650879 -53.18155289]
[515.73791504 -40.49045563]
[522.98748779 -27.08334732]
[528.98498535 -13.07183266]
[533.68060303 1.42746592]
[537.03540039 16.29387283]
[551.90539551 14.32342148]
[566.77539062 12.35297012]
[581.64538574 10.38251877]
[588.11572266 -3.62243438]
[601.14276123 -11.88675404]
[616.56976318 -11.77332592]
[629.47387695 -3.31834388]
[635.73754883 10.78023720]
[633.36199951 26.02361298]
[623.10534668 37.54767609]
[608.24035645 41.67514038]
[593.51043701 37.08894730]
[583.61584473 25.25253296]
[568.74584961 27.22298431]
[553.87585449 29.19343567]
[539.00579834 31.16388702]
[539.63995361 45.90678406]
[538.97070312 60.64855576]
[537.00323486 75.27419281]
[533.75280762 89.66958618]
[529.24468994 103.72241974]
[523.51397705 117.32304382]
[516.60534668 130.36532593]
[508.57260132 142.74748230]
[499.47833252 154.37287903]
[489.39346313 165.15078735]
[478.39657593 174.99705505]
[466.57345581 183.83482361]
[454.01623535 191.59509277]
[440.82284546 198.21725464]
[427.09622192 203.64959717]
[412.94338989 207.84963989]
[398.47473145 210.78456116]
[383.80313110 212.43139648]
[369.04299927 212.77722168]
[354.30950928 211.81925964]
[339.71762085 209.56492615]
[325.38113403 206.03170776]
[311.41192627 201.24710083]
[297.91900635 195.24836731]
[285.00765991 188.08224487]
[272.77868652 179.80455017]
[261.32745361 170.47982788]
[250.74339294 160.18072510]
[241.10911560 148.98756409]
[232.49984741 136.98760986]
[224.98278809 124.27442169]
[218.61665344 110.94715118]
[213.45118713 97.10972595]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[38 53]
[39 52]
[40 51]
[55 66]
[56 65]
[57 64]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
