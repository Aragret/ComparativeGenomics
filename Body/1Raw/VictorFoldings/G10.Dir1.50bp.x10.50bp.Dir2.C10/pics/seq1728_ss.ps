%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUxxxxxxxxxxUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.46481323 438.61389160]
[166.46481323 423.61389160]
[166.46481323 408.61389160]
[166.46481323 393.61389160]
[166.46481323 378.61389160]
[166.46481323 363.61389160]
[166.46481323 348.61389160]
[166.46481323 333.61389160]
[166.46481323 318.61389160]
[166.46481323 303.61389160]
[171.49635315 279.64944458]
[187.04188538 269.89178467]
[179.85937500 256.72320557]
[172.67686462 243.55462646]
[165.49436951 230.38604736]
[158.31185913 217.21746826]
[150.99275208 204.12431335]
[143.53784180 191.10800171]
[136.08293152 178.09169006]
[128.62802124 165.07537842]
[121.17310333 152.05906677]
[113.71819305 139.04275513]
[106.26328278 126.02645111]
[81.22138214 130.52964783]
[56.28493500 110.31617737]
[41.38302994 112.02886963]
[26.49975014 113.89648438]
[11.63670444 115.91881561]
[-3.22634268 117.94115448]
[-8.96803570 132.18644714]
[-21.07302094 141.63975525]
[-36.28511810 143.75816345]
[-50.51234818 137.97184753]
[-59.92766190 125.83729553]
[-61.99838257 110.61862946]
[-56.16749954 96.40960693]
[-44.00349045 87.03237915]
[-28.77840996 85.00936890]
[-14.58773327 90.88475800]
[-5.24867725 103.07810211]
[9.61436939 101.05577087]
[24.47741699 99.03343201]
[30.72152519 94.98908234]
[39.67034149 97.12696838]
[54.57224274 95.41427612]
[56.87502670 88.27655029]
[46.81466675 77.15048981]
[61.48059082 74.00108337]
[63.78337097 66.86335754]
[52.69205856 56.76470566]
[37.27883530 53.19495392]
[33.07710648 38.90528107]
[21.98579216 28.80663300]
[5.85745907 25.83864975]
[0.61933380 10.29856968]
[11.65995026 -1.82730520]
[27.62166786 1.93508589]
[32.08444214 17.71531677]
[43.17575836 27.81396675]
[57.79565430 30.66139412]
[62.79070663 45.67338943]
[73.88201904 55.77204132]
[88.25020599 51.46445465]
[91.95636749 36.92951965]
[95.66252899 22.39458275]
[99.36869049 7.85964727]
[103.07485199 -6.67528915]
[89.57512665 -13.34245968]
[77.75683594 -22.67099762]
[68.13661194 -34.25309753]
[61.13502121 -47.58243942]
[57.05813599 -62.07632446]
[56.08418655 -77.10114288]
[58.25574112 -92.00006866]
[63.47787857 -106.12178802]
[71.52230072 -118.84896088]
[82.03734589 -129.62521362]
[94.56333923 -137.97944641]
[108.55269623 -143.54644775]
[123.39386749 -146.08287048]
[138.43804932 -145.47779846]
[153.02758789 -141.75772095]
[166.52468872 -135.08523560]
[178.33930969 -125.75205231]
[187.95497131 -114.16616821]
[194.95132446 -100.83406830]
[199.02250671 -86.33858490]
[199.99053955 -71.31338501]
[197.81312561 -56.41531372]
[192.58543396 -42.29564667]
[184.53601074 -29.57164001]
[174.01672363 -18.79952812]
[161.48744202 -10.45022392]
[147.49589539 -4.88872242]
[132.65373230 -2.35814834]
[117.60978699 -2.96912766]
[113.90362549 11.56580830]
[110.19746399 26.10074425]
[106.49130249 40.63568115]
[102.78514099 55.17061615]
[128.43148804 73.49910736]
[132.81715393 100.26953888]
[119.27959442 118.57154083]
[126.73450470 131.58784485]
[134.18942261 144.60415649]
[141.64433289 157.62046814]
[149.09924316 170.63677979]
[156.55415344 183.65309143]
[164.00906372 196.66940308]
[171.03582764 202.60877991]
[171.48043823 210.03495789]
[178.66294861 223.20353699]
[185.84545898 236.37211609]
[193.02796936 249.54069519]
[200.21046448 262.70928955]
[211.50947571 272.57501221]
[225.52618408 277.91653442]
[239.54290771 283.25802612]
[253.11238098 275.48608398]
[268.49368286 278.30557251]
[278.42422485 290.38525391]
[278.21511841 306.02142334]
[267.96508789 317.83120728]
[252.51387024 320.23837280]
[239.15708923 312.10629272]
[234.20138550 297.27474976]
[220.18467712 291.93322754]
[206.16796875 286.59173584]
[199.99217224 290.84725952]
[209.73214722 302.25485229]
[219.47210693 313.66244507]
[229.21206665 325.07003784]
[240.91375732 334.45462036]
[240.36904907 349.44473267]
[228.01707458 357.95523071]
[213.81608582 353.12493896]
[209.21475220 338.84957886]
[202.02337646 325.68582153]
[194.83198547 312.52209473]
[187.64060974 299.35836792]
[181.46481323 303.61389160]
[181.46481323 318.61389160]
[181.46481323 333.61389160]
[181.46481323 348.61389160]
[181.46481323 363.61389160]
[181.46481323 378.61389160]
[181.46481323 393.61389160]
[181.46481323 408.61389160]
[181.46481323 423.61389160]
[181.46481323 438.61389160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 115]
[13 114]
[14 113]
[15 112]
[16 111]
[17 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[25 45]
[26 44]
[27 42]
[28 41]
[29 40]
[49 62]
[50 61]
[52 59]
[53 58]
[63 100]
[64 99]
[65 98]
[66 97]
[67 96]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
