%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCAGUACAUGCxxxxxxxxxxUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.90189362 270.52371216]
[104.90189362 255.52372742]
[104.90189362 240.52372742]
[104.90189362 225.52372742]
[104.90189362 210.52372742]
[104.90189362 195.52372742]
[104.90189362 180.52372742]
[104.90189362 165.52372742]
[104.90189362 150.52372742]
[104.90189362 135.52372742]
[87.86599731 137.27017212]
[70.49618530 130.63345337]
[61.23123932 142.43009949]
[51.96628952 154.22673035]
[46.93813705 170.41790771]
[29.98779297 170.06842041]
[25.63129997 153.68376160]
[40.16965103 144.96179199]
[49.43459702 133.16514587]
[58.69954681 121.36850739]
[55.59684372 114.54039001]
[40.66745758 113.08661652]
[49.39143753 100.88414764]
[46.28873444 94.05602264]
[31.30901909 93.27618408]
[16.32930565 92.49633789]
[1.34959102 91.71649170]
[-13.63012314 90.93664551]
[-28.60983849 90.15679932]
[-43.58955383 89.37695312]
[-58.58874130 89.22091675]
[-73.58143616 89.68895721]
[-81.42470551 102.97379303]
[-95.21546173 109.88889313]
[-110.55312347 108.22767639]
[-122.54350281 98.52024078]
[-127.36051178 83.86418152]
[-123.46705627 68.93620300]
[-112.10552979 58.49976349]
[-96.90135193 55.88509750]
[-82.70611572 61.92652893]
[-74.04947662 74.69626617]
[-59.05678177 74.22822571]
[-57.02340317 72.21012878]
[-54.04251862 70.90309906]
[-50.39108658 70.68195343]
[-46.47988892 71.81050110]
[-42.80970764 74.39723969]
[-27.82999229 75.17708588]
[-12.85027790 75.95693207]
[2.12943625 76.73677826]
[17.10914993 77.51662445]
[32.08886337 78.29646301]
[47.06858063 79.07630920]
[57.61986923 68.41468811]
[56.68424225 53.44389343]
[55.74861145 38.47310257]
[54.81298447 23.50230980]
[53.72167206 8.54206181]
[52.47480011 -6.40602493]
[48.62130356 -14.76080894]
[51.36078262 -21.67752075]
[50.42515564 -36.64831161]
[49.48952866 -51.61910248]
[48.55389786 -66.58989716]
[33.94798660 -70.58315277]
[21.43147659 -79.10462952]
[12.36206150 -91.22999573]
[7.72352695 -105.64397430]
[8.01902580 -120.78304291]
[13.21650314 -135.00503540]
[22.75217628 -146.76724243]
[35.59169006 -154.79380798]
[50.34230423 -158.21405029]
[65.40398407 -156.65698242]
[79.14295197 -150.29148865]
[90.06891632 -139.80807495]
[96.99668884 -126.34387207]
[99.17481995 -111.35939789]
[96.36702728 -96.48004913]
[88.87788391 -83.31982422]
[77.51976013 -73.30625153]
[63.52468872 -67.52552032]
[64.46031952 -52.55473328]
[65.39595032 -37.58393860]
[66.33157349 -22.61314774]
[67.42288971 -7.65289974]
[68.66976166 7.29518747]
[72.38401031 13.74111557]
[69.78377533 22.56668282]
[70.71940613 37.53747177]
[71.65502930 52.50826645]
[72.59066010 67.47905731]
[103.98249817 59.88979721]
[129.79043579 76.27423859]
[135.57279968 104.53209686]
[150.57197571 104.37606049]
[165.57116699 104.22002411]
[180.57035828 104.06398773]
[183.64872742 89.32160950]
[189.82472229 75.58584595]
[198.80946350 63.49913788]
[210.18272400 53.62681198]
[223.41256714 46.43060684]
[237.88020325 42.24710464]
[252.90895081 41.27197266]
[267.79589844 43.55082703]
[281.84472656 48.97707367]
[294.39837646 57.29692078]
[304.86968994 68.12123871]
[312.76889038 80.94374084]
[317.72653198 95.16471100]
[319.51071167 110.11899567]
[318.03802490 125.10716248]
[313.37731934 139.42819214]
[305.74658203 152.41226196]
[295.50271606 163.45207214]
[283.12484741 172.03128052]
[269.19195557 177.74862671]
[254.35563660 180.33668518]
[239.30986023 179.67442322]
[224.75833130 175.79280090]
[211.38163757 168.87338257]
[199.80545044 159.23980713]
[190.57119751 147.34263611]
[184.11079407 133.73832703]
[180.72639465 119.06317902]
[165.72720337 119.21921539]
[150.72801208 119.37525177]
[135.72883606 119.53128815]
[148.96665955 126.58534241]
[163.88731384 128.12620544]
[175.69175720 137.38121033]
[180.74850464 151.50314331]
[177.50190735 166.14758301]
[166.95072937 176.80932617]
[152.34094238 180.20841980]
[138.16703796 175.29914856]
[128.78948975 163.59182739]
[127.09327698 148.68746948]
[119.90189362 135.52372742]
[119.90189362 150.52372742]
[119.90189362 165.52372742]
[119.90189362 180.52372742]
[119.90189362 195.52372742]
[119.90189362 210.52372742]
[119.90189362 225.52372742]
[119.90189362 240.52372742]
[119.90189362 255.52372742]
[119.90189362 270.52371216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 20]
[13 19]
[14 18]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 43]
[32 42]
[55 93]
[56 92]
[57 91]
[58 90]
[59 88]
[60 87]
[62 86]
[63 85]
[64 84]
[65 83]
[96 130]
[97 129]
[98 128]
[99 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
