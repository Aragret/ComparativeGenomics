%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCAxxxxxxxxxxCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-10.27948761 228.60368347]
[-21.24277687 218.32438660]
[-32.43107224 228.31549072]
[-43.61936951 238.30657959]
[-54.80766678 248.29768372]
[-65.99596405 258.28878784]
[-76.87127686 268.61968994]
[-87.42329407 279.28057861]
[-97.97530365 289.94149780]
[-108.52732086 300.60241699]
[-119.07933807 311.26330566]
[-112.85076904 325.10415649]
[-112.04659271 340.26062012]
[-116.77558136 354.68286133]
[-126.39817810 366.42041016]
[-139.61299133 373.88586426]
[-154.63284302 376.06958008]
[-169.42640686 372.67623901]
[-181.99298096 364.16473389]
[-190.63304138 351.68621826]
[-194.17810059 336.92825317]
[-192.14869690 321.88677979]
[-184.81929016 308.59600830]
[-173.18115234 298.85342407]
[-158.80821228 293.97662354]
[-143.64431763 294.62515259]
[-129.74024963 300.71130371]
[-119.18823242 290.05038452]
[-108.63621521 279.38946533]
[-98.08419800 268.72857666]
[-87.53218842 258.06765747]
[-87.20565033 254.49826050]
[-85.09551239 250.91819763]
[-81.22021484 248.18182373]
[-75.98706055 247.10047913]
[-64.79876709 237.10937500]
[-53.61046600 227.11828613]
[-42.42216873 217.12718201]
[-31.23387337 207.13609314]
[-42.78711319 191.17187500]
[-52.40836334 173.97406006]
[-59.96744537 155.77532959]
[-65.36207581 136.82192993]
[-68.51926422 117.37031555]
[-69.39630127 97.68367004]
[-67.98130035 78.02835846]
[-64.29342651 58.67033768]
[-58.38257217 39.87153244]
[-50.32870865 21.88629532]
[-40.24081421 4.95798254]
[-28.25538635 -10.68435955]
[-14.53458977 -24.82908058]
[-24.17640305 -36.31974792]
[-38.97409821 -41.91785049]
[-41.22791672 -56.64094925]
[-50.86973190 -68.13161469]
[-66.63374329 -69.25919342]
[-76.91997528 -81.25790405]
[-75.62579346 -97.00910950]
[-63.51900482 -107.16791534]
[-47.78235626 -105.70726776]
[-37.75212479 -93.49375153]
[-39.37906265 -77.77342987]
[-29.73724937 -66.28276062]
[-15.62920094 -61.50654602]
[-12.68573666 -45.96155930]
[-3.04392290 -34.47089386]
[6.33343458 -41.16318893]
[16.14394188 -47.20269394]
[26.34222984 -52.56147766]
[36.88113785 -57.21475983]
[47.71193314 -61.14102173]
[58.78452682 -64.32211304]
[70.04771423 -66.74330902]
[81.44941711 -68.39343262]
[92.93689728 -69.26483154]
[104.45704651 -69.35349274]
[115.95658112 -68.65900421]
[127.38233185 -67.18457031]
[138.68144226 -64.93701172]
[149.80169678 -61.92671967]
[160.69163513 -58.16762161]
[171.30091858 -53.67710114]
[181.58047485 -48.47591400]
[191.48277283 -42.58812332]
[200.96202087 -36.04095078]
[209.97439575 -28.86467743]
[218.47819519 -21.09248352]
[226.43411255 -12.76031208]
[233.80534363 -3.90669632]
[240.55781555 5.42742300]
[246.66029358 15.19888115]
[252.08456421 25.36249161]
[256.80554199 35.87125397]
[260.80139160 46.67657089]
[264.05361938 57.72847366]
[266.54721069 68.97585297]
[268.27062988 80.36670685]
[283.23190308 79.28963470]
[298.19320679 78.21257019]
[313.15447998 77.13549805]
[328.11575317 76.05842590]
[343.07702637 74.98136139]
[358.03833008 73.90428925]
[372.99960327 72.82721710]
[387.96087646 71.75014496]
[393.10037231 57.41468811]
[403.63098145 46.41350174]
[417.72821045 40.65261078]
[432.94964600 41.13013077]
[446.65805054 47.76332092]
[456.47839355 59.40294647]
[460.70922852 74.03237152]
[458.61752319 89.11695099]
[450.56570435 102.04320526]
[437.94876099 110.57157135]
[422.95269775 113.22445679]
[408.17565918 109.54224396]
[396.17782593 100.16289520]
[389.03793335 86.71142578]
[374.07666016 87.78849792]
[359.11538696 88.86557007]
[344.15411377 89.94264221]
[329.19281006 91.01970673]
[314.23153687 92.09677887]
[299.27026367 93.17385101]
[284.30899048 94.25091553]
[269.34768677 95.32798767]
[269.09539795 110.35442352]
[267.51242065 125.29938507]
[264.61120605 140.04524231]
[260.41458130 154.47596741]
[254.95558167 168.47799683]
[248.27717590 181.94114685]
[240.43188477 194.75946045]
[231.48149109 206.83206177]
[221.49639893 218.06394958]
[210.55519104 228.36674500]
[198.74397278 237.65936279]
[186.15568542 245.86866760]
[172.88940430 252.93006897]
[159.04953003 258.78799438]
[144.74496460 263.39633179]
[130.08827209 266.71884155]
[115.19480133 268.72933960]
[100.18175507 269.41204834]
[85.16728973 268.76156616]
[70.26953888 266.78302002]
[55.60575485 263.49197388]
[41.29132843 258.91433716]
[27.43890953 253.08612061]
[14.15750885 246.05320740]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[52 67]
[53 66]
[55 64]
[56 63]
[98 128]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
