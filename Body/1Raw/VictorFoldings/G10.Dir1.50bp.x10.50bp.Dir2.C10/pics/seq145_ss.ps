%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGxxxxxxxxxxCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.76437378 292.43478394]
[80.76437378 277.43478394]
[80.76437378 262.43478394]
[80.76437378 247.43476868]
[80.76437378 232.43476868]
[80.76437378 217.43476868]
[80.76437378 202.43476868]
[80.76437378 187.43476868]
[80.76437378 172.43476868]
[80.76437378 157.43476868]
[67.24018097 150.94660950]
[55.54055786 160.33377075]
[43.84093475 169.72093201]
[32.14131165 179.10809326]
[20.44168663 188.49525452]
[8.74206352 197.88241577]
[-2.95756006 207.26957703]
[-14.65718365 216.65673828]
[-26.35680771 226.04389954]
[-31.79518509 241.51504517]
[-47.96050262 244.27449036]
[-58.22326660 231.48356628]
[-52.02602386 216.30047607]
[-35.74396896 214.34428406]
[-24.04434586 204.95712280]
[-12.34472179 195.56996155]
[-0.64509815 186.18280029]
[11.05452538 176.79563904]
[22.75414848 167.40846252]
[34.45377350 158.02130127]
[46.15339661 148.63414001]
[57.85301971 139.24697876]
[49.44592285 123.15213013]
[46.70296860 105.83982849]
[31.71027184 105.37178802]
[16.71757698 104.90373993]
[2.53022122 113.12876129]
[-11.54973030 104.72120667]
[-11.03803062 88.33004761]
[3.53892708 80.81710052]
[17.18561935 89.91104889]
[32.17831421 90.37908936]
[47.17100906 90.84712982]
[53.22561646 73.79248047]
[64.60934448 59.72372055]
[80.02522278 50.24374008]
[97.71687317 46.43261719]
[115.66864777 48.72456360]
[122.01577759 35.13360977]
[128.36291504 21.54265976]
[134.71003723 7.95170927]
[135.80134583 -7.00853968]
[131.49375916 -21.37672424]
[127.18618011 -35.74490738]
[122.87859344 -50.11309052]
[107.84793854 -49.09963608]
[92.96869659 -51.45674133]
[78.98721313 -57.06617355]
[66.60478210 -65.64656830]
[56.44250870 -76.76753998]
[49.01012421 -89.87125397]
[44.68043900 -104.30044556]
[43.67062759 -119.33135223]
[46.03133774 -134.21002197]
[51.64415741 -148.19015503]
[60.22755432 -160.57049561]
[71.35098267 -170.73007202]
[84.45650482 -178.15928650]
[98.88674164 -182.48547363]
[113.91789246 -183.49163818]
[128.79598999 -181.12733459]
[142.77474976 -175.51112366]
[155.15303040 -166.92472839]
[165.30990601 -155.79882812]
[172.73593140 -142.69151306]
[177.05862427 -128.26022339]
[178.06115723 -113.22883606]
[175.69323730 -98.35131073]
[170.07363892 -84.37390900]
[161.48425293 -71.99771881]
[150.35589600 -61.84353256]
[137.24678040 -54.42067719]
[141.55436707 -40.05249405]
[145.86195374 -25.68430901]
[150.16952515 -11.31612396]
[157.02955627 -8.28461742]
[155.42016602 -23.19802856]
[167.53080750 -32.04858780]
[181.25097656 -25.98582649]
[182.86064148 -11.07244492]
[170.74961853 -2.22160459]
[177.60963440 0.80990207]
[191.13383484 -5.67826319]
[204.65802002 -12.16642857]
[218.18220520 -18.65459251]
[231.70640564 -25.14275742]
[231.67756653 -40.40584946]
[238.28172302 -54.16621780]
[250.20764160 -63.69173050]
[265.08740234 -67.09109497]
[279.96661377 -63.68936157]
[291.89099121 -54.16194534]
[298.49298096 -40.40052414]
[298.46170044 -25.13743973]
[291.80340576 -11.40318584]
[279.84005737 -1.92470908]
[264.94705200 1.41603172]
[250.08134460 -2.04426980]
[238.19456482 -11.61856842]
[224.67037964 -5.13040352]
[211.14617920 1.35776186]
[197.62199402 7.84592676]
[184.09780884 14.33409214]
[199.07699585 15.12403393]
[201.37429810 29.94706917]
[195.18362427 43.60999298]
[182.52426147 51.65615082]
[167.52552795 51.46100616]
[155.07980347 43.08820343]
[149.24670410 29.26899529]
[148.30099487 14.29883862]
[141.95385742 27.88978958]
[135.60673523 41.48073959]
[129.25959778 55.07168961]
[136.00811768 59.95978928]
[141.94508362 65.85840607]
[146.91970825 72.63350677]
[150.80323792 80.12867737]
[153.49226379 88.16867065]
[154.91143799 96.56353760]
[155.01557922 105.11312103]
[153.79096985 113.61179352]
[151.25599670 121.85342407]
[147.46098328 129.63638306]
[142.48716736 136.76847839]
[136.44506836 143.07164001]
[129.47200012 148.38644409]
[121.72898865 152.57609558]
[113.39701843 155.52992249]
[104.67285919 157.16627502]
[95.76437378 157.43476868]
[95.76437378 172.43476868]
[95.76437378 187.43476868]
[95.76437378 202.43476868]
[95.76437378 217.43476868]
[95.76437378 232.43476868]
[95.76437378 247.43476868]
[95.76437378 262.43478394]
[95.76437378 277.43478394]
[95.76437378 292.43478394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[34 43]
[35 42]
[36 41]
[48 124]
[49 123]
[50 122]
[51 121]
[52 85]
[53 84]
[54 83]
[55 82]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
