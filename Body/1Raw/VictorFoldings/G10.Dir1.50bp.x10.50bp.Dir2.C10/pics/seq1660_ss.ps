%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGUAGAGUGCUUAGUUGAACAGGGxxxxxxxxxxCAUAACACUUGGGGGUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[63.76139069 424.82003784]
[63.76139069 409.82003784]
[63.76139069 394.82003784]
[63.76139069 379.82003784]
[63.76139069 364.82003784]
[63.76139069 349.82003784]
[63.76139069 334.82003784]
[63.76139069 319.82003784]
[63.76139069 304.82003784]
[63.76139069 289.82003784]
[50.04278946 286.80468750]
[37.25572586 280.97702026]
[25.96989059 272.59375000]
[16.68870354 262.02557373]
[9.82685947 249.74058533]
[5.69179678 236.28378296]
[4.46992540 222.25274658]
[6.21822739 208.27116394]
[10.86160088 194.96104431]
[18.19608498 182.91511536]
[27.89781952 172.67041016]
[39.53733826 164.68426514]
[52.59858704 159.31401062]
[66.50179291 156.80087280]
[67.11762238 141.81352234]
[67.73344421 126.82616425]
[88.10285950 87.43011475]
[85.64993286 72.63204193]
[83.19699860 57.83396149]
[80.74407196 43.03588104]
[78.29114532 28.23780251]
[74.89202118 24.11455154]
[73.58834076 19.55318832]
[74.18881226 15.44112873]
[76.17214966 12.45556736]
[74.63485718 -2.46544909]
[73.09756470 -17.38646507]
[71.56027222 -32.30748367]
[70.02297974 -47.22849655]
[51.42473602 -60.55151749]
[53.51811600 -86.73946381]
[40.84659958 -94.76645660]
[28.17508507 -102.79345703]
[15.50356865 -110.82044983]
[2.83205271 -118.84745026]
[-9.83946323 -126.87445068]
[-22.51097870 -134.90144348]
[-36.45839691 -128.30802917]
[-51.75340652 -130.32449341]
[-63.51543427 -140.30740356]
[-67.99125671 -155.07122803]
[-63.75264740 -169.90489197]
[-52.15214157 -180.07504272]
[-36.89141464 -182.33639526]
[-22.84010887 -175.96737671]
[-14.48194504 -163.00032043]
[-14.48398209 -147.57296753]
[-1.81246603 -139.54595947]
[10.85904980 -131.51896667]
[23.53056526 -123.49196625]
[36.20208359 -115.46497345]
[48.87359619 -107.43797302]
[61.54511261 -99.41098022]
[54.27315903 -112.53038025]
[47.00120544 -125.64978027]
[39.72925186 -138.76918030]
[27.81984138 -147.88871765]
[18.93133163 -159.97152710]
[13.77111912 -174.05599976]
[12.74988556 -189.02119446]
[15.94890690 -203.67610168]
[23.11358643 -216.85438538]
[33.67371750 -227.50726318]
[46.78886032 -234.78689575]
[61.41523361 -238.11393738]
[76.38878632 -237.22358704]
[90.51782990 -232.18672180]
[102.67790222 -223.40420532]
[111.90122223 -211.57498169]
[117.45375061 -197.64051819]
[118.89357758 -182.70977783]
[116.10611725 -167.97105408]
[109.31320953 -154.59733582]
[99.05526733 -143.65280151]
[94.02659607 -129.52082825]
[88.99793243 -115.38886261]
[83.96926880 -101.25689697]
[95.15756226 -111.24799347]
[106.34585571 -121.23908997]
[117.53415680 -131.23019409]
[128.72245789 -141.22128296]
[124.93911743 -156.05181885]
[128.49252319 -170.93913269]
[138.56610107 -182.46221924]
[152.84504700 -187.97314453]
[168.04815674 -186.20555115]
[180.68183899 -177.56562805]
[187.84300232 -164.03875732]
[187.88604736 -148.73330688]
[180.80108643 -135.16636658]
[168.21617126 -126.45552063]
[153.02325439 -124.60245514]
[138.71354675 -130.03298950]
[127.52525330 -120.04189301]
[116.33695221 -110.05079651]
[105.14865875 -100.05970001]
[93.96036530 -90.06860352]
[100.37682343 -65.08760071]
[84.94400024 -48.76578903]
[86.48129272 -33.84477615]
[88.01858521 -18.92375755]
[89.55587769 -4.00274134]
[91.09317017 10.91827488]
[93.08922577 25.78487396]
[95.54215240 40.58295441]
[97.99507904 55.38103104]
[100.44800568 70.17910767]
[102.90093994 84.97718811]
[112.54274750 96.46785736]
[126.69006348 101.45317841]
[141.72242737 95.84890747]
[155.40180969 104.23066711]
[157.23457336 120.16868591]
[145.81477356 131.43669128]
[129.90270996 129.39080811]
[121.70474243 115.60049438]
[107.55742645 110.61517334]
[101.34827423 114.82187653]
[82.72080231 127.44199371]
[82.10497284 142.42935181]
[81.48915100 157.41670227]
[96.90284729 161.76901245]
[110.83584595 169.65115356]
[122.49385834 180.60919189]
[131.21339417 194.01400757]
[136.49949646 209.09739685]
[138.05383301 224.99606323]
[135.79153442 240.80104065]
[129.84584045 255.60969543]
[120.56021881 268.57723999]
[108.46854401 278.96493530]
[94.26442719 286.18218994]
[78.76139069 289.82003784]
[78.76139069 304.82003784]
[78.76139069 319.82003784]
[78.76139069 334.82003784]
[78.76139069 349.82003784]
[78.76139069 364.82003784]
[78.76139069 379.82003784]
[78.76139069 394.82003784]
[78.76139069 409.82003784]
[78.76139069 424.82003784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 131]
[25 130]
[26 129]
[27 118]
[28 117]
[29 116]
[30 115]
[31 114]
[35 113]
[36 112]
[37 111]
[38 110]
[39 109]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
