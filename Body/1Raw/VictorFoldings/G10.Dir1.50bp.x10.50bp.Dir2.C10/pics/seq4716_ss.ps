%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUxxxxxxxxxxACCCCAUUACUAAACCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.42533875]
[92.50000000 235.42533875]
[92.50000000 220.42533875]
[92.50000000 205.42533875]
[92.50000000 190.42533875]
[92.50000000 175.42533875]
[92.50000000 160.42533875]
[92.50000000 145.42533875]
[92.50000000 130.42533875]
[92.50000000 115.42533875]
[79.72264099 107.56791687]
[66.33635712 114.33602905]
[56.65880966 129.96691895]
[39.20882034 128.38648987]
[25.96623230 135.43162537]
[12.87307835 142.75073242]
[-0.06497727 150.34063721]
[-13.00303364 157.93054199]
[-11.26425171 173.05987549]
[-15.83563995 187.58647156]
[-25.92517853 198.99354553]
[-39.78479385 205.30471802]
[-55.01322174 205.42655945]
[-68.97204590 199.33796692]
[-79.24282074 188.09379578]
[-84.04606628 173.64219666]
[-82.54959106 158.48698425]
[-75.01267242 145.25389099]
[-62.74112320 136.23564148]
[-47.86106491 132.99467468]
[-32.95056152 136.09252930]
[-20.59294128 144.99249268]
[-7.65488577 137.40257263]
[5.28317022 129.81266785]
[7.34319162 125.43867493]
[12.20667076 122.34386444]
[18.92109871 122.18903351]
[32.16368484 115.14389801]
[36.02001953 103.63581848]
[47.04977036 97.67229462]
[59.56824112 100.94974518]
[72.95452881 94.18162537]
[86.82772064 84.28306580]
[99.51699066 86.65928650]
[106.42398834 73.34413147]
[113.33098602 60.02897644]
[120.23798370 46.71381760]
[127.14498138 33.39866257]
[122.60057068 18.49946785]
[129.79492188 5.09439850]
[144.02703857 0.85381401]
[150.93403625 -12.46134186]
[157.84103394 -25.77649689]
[151.06536865 -39.61111450]
[153.70434570 -54.60742188]
[164.53948975 -65.05076599]
[179.27012634 -67.08702087]
[186.17712402 -80.40217590]
[193.08412170 -93.71733093]
[199.99113464 -107.03249359]
[206.89813232 -120.34764862]
[202.35371399 -135.24684143]
[209.54806519 -148.65191650]
[223.78018188 -152.89250183]
[230.68717957 -166.20765686]
[237.59417725 -179.52281189]
[225.40338135 -188.30929565]
[214.62188721 -198.77719116]
[205.47949219 -210.70341492]
[198.17108154 -223.83370972]
[192.85241699 -237.88824463]
[189.63688660 -252.56741333]
[188.59301758 -267.55834961]
[189.74307251 -282.54153442]
[193.06251526 -297.19754028]
[198.48062134 -311.21405029]
[205.88186646 -324.29223633]
[215.10853577 -336.15338135]
[225.96392822 -346.54464722]
[238.21665955 -355.24453735]
[251.60559082 -362.06762695]
[265.84530640 -366.86846924]
[280.63232422 -369.54473877]
[295.65142822 -370.03936768]
[310.58245850 -368.34185791]
[325.10720825 -364.48837280]
[338.91607666 -358.56106567]
[351.71472168 -350.68621826]
[363.23031616 -341.03173828]
[373.21740723 -329.80340576]
[381.46316528 -317.24053955]
[387.79177856 -303.61093140]
[392.06835938 -289.20507812]
[394.20178223 -274.33004761]
[394.14657593 -259.30291748]
[391.90386963 -244.44396973]
[387.52148438 -230.06993103]
[381.09286499 -216.48719788]
[372.75500488 -203.98529053]
[362.68563843 -192.83065796]
[351.09939575 -183.26107788]
[338.24325562 -175.48052979]
[324.39117432 -169.65486145]
[309.83850098 -165.90823364]
[294.89538574 -164.32052612]
[279.88031006 -164.92555237]
[265.11340332 -167.71043396]
[250.90933228 -172.61581421]
[244.00233459 -159.30065918]
[237.09533691 -145.98550415]
[241.82556152 -131.90853882]
[235.01055908 -118.30668640]
[220.21328735 -113.44065094]
[213.30628967 -100.12548828]
[206.39929199 -86.81033325]
[199.49227905 -73.49517822]
[192.58528137 -60.18002319]
[199.40464783 -46.96509171]
[197.10771179 -32.09269714]
[186.36825562 -21.29837990]
[171.15618896 -18.86949921]
[164.24919128 -5.55434322]
[157.34219360 7.76081276]
[162.07241821 21.83776665]
[155.25741577 35.43962097]
[140.46014404 40.30566406]
[133.55313110 53.62081909]
[126.64614105 66.93597412]
[119.73914337 80.25112915]
[112.83214569 93.56628418]
[124.31437683 83.91442871]
[139.02369690 80.97571564]
[153.33306885 85.47477722]
[163.71412659 96.30223846]
[167.60708618 110.78826141]
[164.05201721 125.36089325]
[153.92555237 136.42681885]
[139.72465515 141.25740051]
[124.95098877 138.66152954]
[113.24742126 129.27928162]
[107.50000000 115.42533875]
[107.50000000 130.42533875]
[107.50000000 145.42533875]
[107.50000000 160.42533875]
[107.50000000 175.42533875]
[107.50000000 190.42533875]
[107.50000000 205.42533875]
[107.50000000 220.42533875]
[107.50000000 235.42533875]
[107.50000000 250.42533875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 42]
[12 41]
[14 38]
[15 37]
[16 34]
[17 33]
[18 32]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[51 123]
[52 122]
[53 121]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[64 110]
[65 109]
[66 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
