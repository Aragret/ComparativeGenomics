%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAxxxxxxxxxxUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.42388916 410.54547119]
[182.42388916 395.54547119]
[182.42388916 380.54547119]
[182.42388916 365.54547119]
[182.42388916 350.54547119]
[182.42388916 335.54547119]
[182.42388916 320.54547119]
[182.42388916 305.54547119]
[182.42388916 290.54547119]
[182.42388916 275.54547119]
[170.01292419 269.21963501]
[161.22930908 259.23291016]
[156.97079468 247.29991150]
[157.41007996 235.26701355]
[162.02748108 224.83047485]
[169.74499512 217.29739380]
[162.92141724 203.93930054]
[156.09785461 190.58119202]
[148.20137024 177.82794189]
[139.28521729 165.76550293]
[130.36906433 153.70307922]
[121.45291138 141.64064026]
[112.53676605 129.57821655]
[105.65015411 134.49159241]
[97.12580109 137.66773987]
[87.43270874 138.60931396]
[77.18144989 136.95127869]
[67.08612823 132.49923706]
[57.91633987 125.25667572]
[50.44239807 115.43894958]
[45.37751007 103.47205353]
[30.39727020 102.70239258]
[15.41702843 101.93273163]
[0.43678752 101.16307068]
[-14.54345322 100.39340973]
[-29.52369499 99.62374878]
[-44.50393677 98.85408783]
[-58.85393906 106.79193878]
[-72.76184082 98.10274506]
[-71.92039490 81.72519684]
[-57.19519806 74.50711823]
[-43.73427582 83.87384796]
[-28.75403404 84.64350891]
[-13.77379322 85.41316986]
[1.20644760 86.18283081]
[16.18668938 86.95249176]
[31.16692924 87.72215271]
[46.14717102 88.49181366]
[49.35165787 81.71086121]
[35.78976059 75.30188751]
[22.22796440 68.89270020]
[28.63735962 55.33100510]
[42.19873810 61.73999023]
[55.76063538 68.14896393]
[58.96512222 61.36801910]
[48.85968781 50.28288269]
[33.07672882 45.82976913]
[29.30457115 29.87035561]
[41.42368698 18.82232094]
[56.96696854 24.05093575]
[59.94482040 40.17744827]
[70.05025482 51.26258469]
[77.30456543 49.35865402]
[73.49694824 34.84996414]
[88.00569916 31.04258919]
[91.81319427 45.55079651]
[99.06750488 43.64686584]
[102.42676544 29.02785873]
[105.78602600 14.40885067]
[109.14528656 -0.21015640]
[112.50453949 -14.82916355]
[99.24349213 -22.04353714]
[88.42141724 -32.56899643]
[80.84139252 -45.62448502]
[77.06589508 -60.24119568]
[77.37509918 -75.33447266]
[81.74605560 -89.78429413]
[89.85441589 -102.51838684]
[101.09847260 -112.59179688]
[114.64385986 -119.25701141]
[129.48541260 -122.01942444]
[144.52178955 -120.67404938]
[158.63719177 -115.32072449]
[170.78414917 -106.35669708]
[180.06129456 -94.44715881]
[185.78021240 -80.47587585]
[187.51649475 -65.47961426]
[185.14129639 -50.57118988]
[178.83090210 -36.85691452]
[169.05355835 -25.35446930]
[156.53482056 -16.91741943]
[142.20365906 -12.17184734]
[127.12355042 -11.46990490]
[123.76428986 3.14910245]
[120.40502930 17.76811028]
[117.04577637 32.38711929]
[113.68651581 47.00612640]
[141.36277771 86.76351166]
[124.59919739 120.66206360]
[133.51535034 132.72450256]
[142.43148804 144.78692627]
[151.34764099 156.84936523]
[160.26379395 168.91178894]
[162.00267029 154.01292419]
[172.04971313 142.87483215]
[186.69111633 139.61463928]
[200.51484680 145.43742371]
[208.41104126 158.19084167]
[207.46096802 173.16073608]
[198.01579285 184.81356812]
[183.56686401 188.84201050]
[169.45594788 183.75762939]
[176.27952576 197.11572266]
[183.10310364 210.47381592]
[211.50088501 213.92231750]
[226.42436218 243.71508789]
[240.67105103 248.40888977]
[254.91773987 253.10269165]
[269.16442871 257.79647827]
[283.41113281 262.49029541]
[299.34671021 258.61871338]
[310.47009277 270.66873169]
[305.33847046 286.24429321]
[289.23083496 289.32263184]
[278.71731567 276.73696899]
[264.47064209 272.04318237]
[250.22393799 267.34939575]
[235.97724915 262.65557861]
[221.73056030 257.96179199]
[215.65390015 262.35769653]
[225.90621948 273.30712891]
[236.15853882 284.25656128]
[246.41085815 295.20599365]
[259.41238403 302.68664551]
[263.14398193 317.21505737]
[255.35670471 330.03530884]
[240.74375916 333.42086792]
[228.11206055 325.33135986]
[225.07470703 310.64074707]
[217.88333130 297.47702026]
[210.69194031 284.31329346]
[203.50056458 271.14953613]
[197.42388916 275.54547119]
[197.42388916 290.54547119]
[197.42388916 305.54547119]
[197.42388916 320.54547119]
[197.42388916 335.54547119]
[197.42388916 350.54547119]
[197.42388916 365.54547119]
[197.42388916 380.54547119]
[197.42388916 395.54547119]
[197.42388916 410.54547119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 114]
[17 113]
[18 112]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[55 62]
[56 61]
[67 97]
[68 96]
[69 95]
[70 94]
[71 93]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
