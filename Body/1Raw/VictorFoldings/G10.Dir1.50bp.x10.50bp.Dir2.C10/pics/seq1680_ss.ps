%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCACCCUCCUCAAGUAUACUUCAAAGGAxxxxxxxxxxCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 278.29339600]
[92.50000000 263.29339600]
[92.50000000 248.29339600]
[92.50000000 233.29339600]
[92.50000000 218.29339600]
[92.50000000 203.29339600]
[92.50000000 188.29339600]
[92.50000000 173.29339600]
[92.50000000 158.29339600]
[92.50000000 143.29339600]
[71.10117340 133.09721375]
[58.11304474 113.26844025]
[43.25000000 115.29077148]
[28.54203606 118.23625946]
[14.04644012 122.09341431]
[-0.44915634 125.95057678]
[-14.94475269 129.80773926]
[-18.72798729 133.59014893]
[-23.14890289 135.32447815]
[-27.30324554 135.11682129]
[-30.46532249 133.42308044]
[-45.17328262 136.36856079]
[-59.88124466 139.31404114]
[-71.89340210 149.61058044]
[-85.89221954 144.52311707]
[-97.90437317 154.81965637]
[-111.90319824 149.73219299]
[-126.61116028 152.67767334]
[-141.31912231 155.62315369]
[-148.66354370 169.42871094]
[-163.18301392 175.23551941]
[-178.02189636 170.30175781]
[-186.17369080 156.95701599]
[-183.78939819 141.50227356]
[-171.99479675 131.23477173]
[-156.35894775 131.00253296]
[-144.26460266 140.91519165]
[-129.55664062 137.96971130]
[-114.84867859 135.02423096]
[-103.88853455 124.93836975]
[-88.83769989 129.81515503]
[-77.87756348 119.72929382]
[-62.82672882 124.60607910]
[-48.11876678 121.66059875]
[-33.41080475 118.71511841]
[-18.80191231 115.31214142]
[-4.30631590 111.45497894]
[10.18928051 107.59781647]
[24.68487740 103.74066162]
[12.53106022 94.94948578]
[9.96344471 80.17087555]
[18.43980408 67.79544067]
[33.14765167 64.84938812]
[45.73654556 73.00534821]
[49.05909729 87.63274384]
[41.22766495 100.42772675]
[56.09070969 98.40539551]
[59.68753433 82.52220154]
[68.82230377 69.04003143]
[82.24012756 59.81100464]
[98.09772491 56.10296249]
[114.21664429 58.42530441]
[128.38255310 66.45899200]
[139.88435364 56.83046341]
[151.38615417 47.20193863]
[162.88795471 37.57341003]
[174.38975525 27.94488525]
[185.89157104 18.31635857]
[177.55412292 5.82899237]
[170.61570740 -7.48662090]
[165.15765381 -21.47436333]
[161.24395752 -35.97023392]
[158.92053223 -50.80427933]
[158.21458435 -65.80257416]
[159.13439941 -80.78927612]
[161.66920471 -95.58866882]
[165.78926086 -110.02723694]
[171.44628906 -123.93569946]
[178.57394409 -137.15098572]
[187.08866882 -149.51815796]
[196.89060974 -160.89219666]
[207.86488342 -171.13977051]
[219.88278198 -180.14073181]
[232.80342102 -187.78953552]
[246.47532654 -193.99650574]
[260.73818970 -198.68887329]
[275.42474365 -201.81161499]
[290.36288452 -203.32814026]
[305.37738037 -203.22064209]
[320.29226685 -201.49038696]
[334.93261719 -198.15766907]
[349.12683105 -193.26156616]
[362.70846558 -186.85948181]
[375.51824951 -179.02645874]
[387.40606689 -169.85435486]
[398.23245239 -159.45068359]
[407.87054443 -147.93746948]
[416.20733643 -135.44964600]
[423.14501953 -122.13365936]
[428.60232544 -108.14562225]
[432.51522827 -93.64954376]
[434.83786011 -78.81537628]
[435.54299927 -63.81703949]
[434.62237549 -48.83039093]
[432.08679199 -34.03113556]
[427.96594238 -19.59278679]
[422.30816650 -5.68462801]
[415.17980957 7.53027391]
[406.66442871 19.89698219]
[396.86187744 31.27050209]
[385.88705444 41.51748657]
[373.86865234 50.51779556]
[360.94760132 58.16590118]
[347.27536011 64.37213898]
[333.01226807 69.06373596]
[318.32553101 72.18569946]
[303.38732910 73.70140839]
[288.37280273 73.59310150]
[273.45803833 71.86205292]
[258.81784058 68.52854919]
[244.62390137 63.63167953]
[231.04263306 57.22885513]
[218.23324585 49.39514923]
[206.34594727 40.22240067]
[195.52009583 29.81816101]
[184.01829529 39.44668961]
[172.51647949 49.07521439]
[161.01467896 58.70373917]
[149.51287842 68.33226776]
[138.01107788 77.96079254]
[141.26731873 84.91433716]
[143.26335144 92.32855225]
[143.93823242 99.97704315]
[143.27134705 107.62623596]
[141.28305054 115.04253387]
[138.03408813 121.99947357]
[133.62364197 128.28460693]
[128.18641663 133.70599365]
[121.88845825 138.09808350]
[114.92207336 141.32675171]
[107.50000000 143.29339600]
[107.50000000 158.29339600]
[107.50000000 173.29339600]
[107.50000000 188.29339600]
[107.50000000 203.29339600]
[107.50000000 218.29339600]
[107.50000000 233.29339600]
[107.50000000 248.29339600]
[107.50000000 263.29339600]
[107.50000000 278.29339600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 57]
[13 56]
[14 49]
[15 48]
[16 47]
[17 46]
[21 45]
[22 44]
[23 43]
[25 41]
[27 39]
[28 38]
[29 37]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
[68 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
