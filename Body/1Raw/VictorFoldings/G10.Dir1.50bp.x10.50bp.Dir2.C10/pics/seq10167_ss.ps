%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAAxxxxxxxxxxAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.14476013 355.00100708]
[118.14476013 340.00100708]
[118.14476013 325.00100708]
[118.14476013 310.00100708]
[118.14476013 295.00100708]
[118.14476013 280.00100708]
[118.14476013 265.00100708]
[118.14476013 250.00099182]
[118.14476013 235.00099182]
[118.14476013 220.00099182]
[116.45436859 205.09654236]
[113.09510803 190.47753906]
[109.73584747 175.85853577]
[106.37658691 161.23953247]
[93.31509399 161.20663452]
[80.55443573 158.41926575]
[68.66889191 153.00285339]
[58.19333649 145.20114136]
[49.59921265 135.36524963]
[43.27327347 123.93781281]
[28.84589005 128.04275513]
[14.41850471 132.14770508]
[-0.00887972 136.25265503]
[-14.43626404 140.35758972]
[-16.15330315 155.46124268]
[-23.52392769 168.75569153]
[-35.42417145 178.21362305]
[-50.03933716 182.39279175]
[-65.14071655 180.65588379]
[-78.42545319 173.26777649]
[-87.86772919 161.35510254]
[-92.02766418 146.73445129]
[-90.27089691 131.63537598]
[-82.86531830 118.36036682]
[-70.94023132 108.93376923]
[-56.31412125 104.79306793]
[-41.21736908 106.56970215]
[-27.95211029 113.99273682]
[-18.54120827 125.93021393]
[-4.11382437 121.82526398]
[10.31356049 117.72032166]
[24.74094391 113.61537933]
[39.16833115 109.51042938]
[38.60047150 95.41322327]
[41.25656891 81.55685425]
[46.99715042 68.66889191]
[55.52079391 57.42605591]
[66.37994385 48.41868591]
[79.00440216 42.11973190]
[75.64514160 27.50072479]
[72.28588867 12.88171768]
[68.77671814 -1.70203173]
[65.11801147 -16.24898529]
[61.45930481 -30.79594040]
[54.91143417 -44.29132462]
[45.74950027 -56.16814804]
[36.58756638 -68.04496765]
[20.88313484 -69.81879425]
[11.09818172 -82.22968292]
[13.03794289 -97.91448212]
[25.55159378 -107.56767273]
[41.21500397 -105.46219635]
[50.73535538 -92.84718323]
[48.46438980 -77.20690918]
[57.62632370 -65.33008575]
[66.78826141 -53.45325851]
[65.08814240 -68.35659790]
[67.57791901 -83.14852142]
[74.06319427 -96.67410278]
[84.03760529 -107.87728119]
[96.72236633 -115.88332367]
[111.12707520 -120.06714630]
[126.12702942 -120.10208130]
[140.55107117 -115.98539734]
[153.27297974 -108.03851318]
[163.29946899 -96.88191986]
[169.84767151 -83.38669586]
[172.40631104 -68.60652924]
[170.77563477 -53.69542694]
[165.08293152 -39.81763077]
[155.77270508 -28.05669022]
[143.57188416 -19.33088112]
[129.43305969 -14.32149982]
[114.46019745 -13.41967106]
[99.82234192 -16.69580841]
[86.66238403 -23.89411545]
[76.00626373 -34.45464706]
[79.66496277 -19.90769196]
[83.32366943 -5.36073732]
[88.03427887 0.39446491]
[86.90489197 9.52245903]
[90.26415253 24.14146614]
[93.62341309 38.76047516]
[110.52760315 39.33609009]
[126.63733673 44.48970413]
[140.73687744 53.83240128]
[151.76222229 66.65913391]
[158.88131714 82.00193787]
[173.65344238 79.39720917]
[188.42555237 76.79248810]
[203.19767761 74.18776703]
[205.28500366 59.20450211]
[211.90208435 45.60047913]
[222.40063477 34.70848083]
[235.75212097 27.59559631]
[250.64848328 24.95867157]
[265.63034058 27.05604553]
[279.22994995 33.68223953]
[290.11489868 44.18808746]
[297.21884155 57.54433060]
[299.84576416 72.44246674]
[297.73837280 87.42292023]
[291.10305786 101.01805878]
[280.58990479 111.89598083]
[267.22891235 118.99096680]
[252.32902527 121.60792542]
[237.34999084 119.49047089]
[223.75929260 112.84606171]
[212.88842773 102.32563782]
[205.80239868 88.95988464]
[191.03027344 91.56460571]
[176.25816345 94.16932678]
[161.48603821 96.77404785]
[160.31094360 112.39076233]
[155.23390198 127.20582581]
[146.58338928 140.26075745]
[134.91906738 150.71093750]
[120.99559784 157.88026428]
[124.35485840 172.49926758]
[127.71411133 187.11828613]
[131.07337952 201.73728943]
[137.14682007 188.02185059]
[148.81919861 178.60083008]
[163.50753784 175.55902100]
[177.96147156 179.56951904]
[188.98246765 189.74484253]
[194.13172913 203.83332825]
[192.26974487 218.71731567]
[183.80859375 231.10313416]
[170.62059021 238.24995422]
[155.62414551 238.57623291]
[142.13778687 232.00978088]
[133.14476013 220.00099182]
[133.14476013 235.00099182]
[133.14476013 250.00099182]
[133.14476013 265.00100708]
[133.14476013 280.00100708]
[133.14476013 295.00100708]
[133.14476013 310.00100708]
[133.14476013 325.00100708]
[133.14476013 340.00100708]
[133.14476013 355.00100708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[13 129]
[14 128]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[49 93]
[50 92]
[51 91]
[52 89]
[53 88]
[54 87]
[55 66]
[56 65]
[57 64]
[98 123]
[99 122]
[100 121]
[101 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
