%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAxxxxxxxxxxCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.18907928 297.90112305]
[88.78008270 278.69338989]
[89.09213257 263.69665527]
[89.40419006 248.69989014]
[89.71624756 233.70314026]
[90.02830505 218.70637512]
[90.34036255 203.70962524]
[90.65242004 188.71287537]
[90.96446991 173.71612549]
[91.27652740 158.71936035]
[91.58858490 143.72261047]
[86.92129517 143.63377380]
[82.18897247 143.03924561]
[77.44702148 141.92532349]
[72.75292206 140.28446960]
[68.16552734 138.11550903]
[56.46590805 147.50267029]
[44.76628113 156.88983154]
[33.06665802 166.27699280]
[27.62828064 181.74812317]
[11.46296310 184.50756836]
[1.20020008 171.71664429]
[7.39744139 156.53355408]
[23.67949677 154.57736206]
[35.37911987 145.19020081]
[47.07874298 135.80303955]
[58.77836990 126.41587830]
[52.71535492 112.69582367]
[37.89759827 115.02693176]
[23.07983971 117.35803223]
[8.26208115 119.68914032]
[-6.55567741 122.02024078]
[-21.26272964 130.45463562]
[-33.43881989 118.65721130]
[-25.47311974 103.69111633]
[-8.88678169 107.20248413]
[5.93097687 104.87138367]
[20.74873543 102.54027557]
[35.56649399 100.20917511]
[50.38425064 97.87806702]
[61.77787399 71.04897308]
[85.58530426 56.06777191]
[112.66618347 57.31526566]
[119.29467773 43.85929871]
[125.92317963 30.40333366]
[132.55168152 16.94736671]
[139.18017578 3.49140215]
[125.54300690 -15.79909039]
[136.73957825 -44.32884979]
[134.25445557 -59.12155533]
[131.76933289 -73.91426086]
[128.82385254 -88.62222290]
[125.42087555 -103.23111725]
[122.01789856 -117.84001160]
[118.61492157 -132.44889832]
[115.21194458 -147.05780029]
[100.15279388 -146.86801147]
[85.40500641 -149.92037964]
[71.65837860 -156.07212830]
[59.55584335 -165.03555298]
[49.66347504 -176.39138794]
[42.44395065 -189.60852051]
[38.23493958 -204.06875610]
[37.23331070 -219.09574890]
[39.48590469 -233.98667908]
[44.88736725 -248.04507446]
[53.18506622 -260.61337280]
[63.99089432 -271.10375977]
[76.79945374 -279.02557373]
[91.01165771 -284.00827026]
[105.96276855 -285.81884766]
[120.95351410 -284.37255859]
[135.28274536 -279.73712158]
[148.28024292 -272.12927246]
[159.33810425 -261.90490723]
[167.93913269 -249.54220581]
[173.68103027 -235.61940002]
[176.29525757 -220.78768921]
[175.65953064 -205.74075317]
[171.80357361 -191.18240356]
[164.90776062 -177.79353333]
[155.29460144 -166.20037842]
[143.41372681 -156.94515991]
[129.82083130 -150.46076965]
[133.22381592 -135.85188293]
[136.62680054 -121.24298859]
[140.02976990 -106.63409424]
[143.43275452 -92.02519989]
[146.28288269 -89.84708405]
[148.19058228 -86.15081787]
[148.44052124 -81.40846252]
[146.56204224 -76.39938354]
[149.04716492 -61.60667419]
[151.53228760 -46.81396866]
[164.54859924 -39.35905838]
[178.56530762 -44.70056915]
[192.58201599 -50.04208374]
[206.59873962 -55.38359451]
[220.61544800 -60.72510910]
[227.57467651 -66.74348450]
[234.97972107 -66.02861023]
[249.10452271 -71.07736969]
[263.22933960 -76.12612915]
[276.10919189 -87.15087891]
[290.26861572 -77.82630920]
[285.22814941 -61.63896179]
[268.27807617 -62.00132370]
[254.15327454 -56.95256805]
[240.02847290 -51.90380859]
[225.95695496 -46.70839310]
[211.94024658 -41.36688232]
[197.92353821 -36.02537155]
[183.90681458 -30.68385696]
[169.89010620 -25.34234428]
[170.51408386 -10.35532856]
[184.92630005 -6.19744110]
[199.33851624 -2.03955364]
[213.75073242 2.11833382]
[230.64520264 0.69941217]
[236.68551636 16.54084015]
[223.13531494 26.73044777]
[209.59284973 16.53055000]
[195.18063354 12.37266254]
[180.76841736 8.21477509]
[166.35620117 4.05688763]
[152.63613892 10.11990070]
[146.00764465 23.57586670]
[139.37915039 37.03182983]
[132.75064087 50.48779678]
[126.12214661 63.94376373]
[133.21640015 70.35054779]
[138.77960205 78.12395477]
[142.55535889 86.90569305]
[144.36961365 96.29098511]
[144.13874817 105.84722900]
[141.87339783 115.13396454]
[137.67800903 123.72312927]
[131.74591064 131.21882629]
[124.35057831 137.27557373]
[115.83284760 141.61418152]
[106.58534241 144.03466797]
[106.27328491 159.03141785]
[105.96122742 174.02818298]
[105.64916992 189.02493286]
[105.33711243 204.02168274]
[105.02505493 219.01843262]
[104.71300507 234.01519775]
[104.40094757 249.01194763]
[104.08889008 264.00869751]
[103.77683258 279.00546265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[16 27]
[17 26]
[18 25]
[19 24]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
[49 94]
[50 93]
[51 92]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[101 109]
[102 108]
[103 107]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
