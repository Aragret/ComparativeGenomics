%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUxxxxxxxxxxGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.46409607 306.34423828]
[136.46409607 291.34423828]
[136.46409607 276.34423828]
[136.46409607 261.34423828]
[136.46409607 246.34425354]
[136.46409607 231.34425354]
[136.46409607 216.34425354]
[136.46409607 201.34425354]
[136.46409607 186.34425354]
[136.46409607 171.34425354]
[131.85852051 157.06878662]
[123.09232330 144.89694214]
[114.32611084 132.72511292]
[95.98021698 144.68481445]
[69.85967255 144.81423950]
[58.98085022 155.14144897]
[48.10202408 165.46865845]
[43.96850586 181.33831787]
[28.08851242 185.43196106]
[16.79802322 173.53839111]
[21.71172142 157.89270020]
[37.77481842 154.58982849]
[48.65364456 144.26261902]
[59.53247070 133.93542480]
[56.57248688 127.04422760]
[45.29401779 136.93342590]
[32.40361023 129.26286316]
[35.71541214 114.63303375]
[50.65252304 113.26184845]
[47.69254303 106.37065887]
[32.71282959 107.15050507]
[17.73311424 107.93035126]
[2.75340033 108.71019745]
[-7.63827610 120.61769867]
[-23.41162300 121.60617828]
[-35.20859146 111.08918762]
[-36.03025055 95.30627441]
[-25.38912582 83.62115479]
[-9.59840584 82.96640778]
[1.97355521 93.73047638]
[16.95326996 92.95063782]
[31.93298340 92.17079163]
[46.91269684 91.39094543]
[50.92043686 76.93625641]
[38.48099899 68.55411530]
[26.04155731 60.17197037]
[13.60211754 51.78982544]
[-0.52618527 57.98616409]
[-15.75805378 55.53795242]
[-27.23305321 45.22640991]
[-31.28955460 30.34191132]
[-26.63314056 15.63404369]
[-14.74965954 5.79603577]
[0.56891650 3.96716046]
[14.43448353 10.73100471]
[22.42259026 23.92925072]
[21.98426056 39.35038757]
[34.42370224 47.73252869]
[46.86314011 56.11467361]
[59.30258179 64.49681854]
[76.12747192 58.45832443]
[92.11436462 58.93220901]
[105.06171417 64.63689423]
[110.25713348 50.56537247]
[106.70169830 32.52822113]
[120.55780029 21.80402374]
[125.45935059 7.62746668]
[130.36090088 -6.54909182]
[118.11911774 2.11917162]
[103.34915161 4.73605108]
[88.87442017 0.80130446]
[77.46192169 -8.93290234]
[71.29325867 -22.60578156]
[71.54763031 -37.60362244]
[78.17642212 -51.05944443]
[89.91246796 -60.40103531]
[104.51230621 -63.84265137]
[119.18502808 -60.72639847]
[131.12580872 -51.64797974]
[138.05204773 -38.34281921]
[138.63999939 -23.35579491]
[146.89228821 -35.88175583]
[155.14457703 -48.40771866]
[147.26028442 -61.47679901]
[145.83581543 -76.67330170]
[151.15396118 -90.97994232]
[162.15882874 -101.55613708]
[176.66537476 -106.30196381]
[191.79331970 -104.27513885]
[204.53900146 -95.87809753]
[212.37174988 -82.77806854]
[213.73637390 -67.57608032]
[208.36192322 -53.29048920]
[197.31550598 -42.75771713]
[182.79037476 -38.06904984]
[167.67053223 -40.15542984]
[159.41824341 -27.62946892]
[151.16595459 -15.10350609]
[144.53746033 -1.64754081]
[139.63591003 12.52901745]
[134.73435974 26.70557594]
[139.74589539 37.75961304]
[135.72851562 49.63730240]
[124.32865143 55.76078796]
[119.13323975 69.83230591]
[132.54032898 85.25899506]
[135.29589844 105.51089478]
[126.49794769 123.95890808]
[135.26416016 136.13073730]
[144.03036499 148.30258179]
[143.13221741 133.32949829]
[145.11715698 118.46140289]
[149.91175842 104.24832153]
[157.33866882 91.21601105]
[167.12313843 79.84657288]
[178.90322876 70.56058502]
[192.24314880 63.70155716]
[206.64945984 59.52322006]
[221.58920288 58.18013763]
[236.50975037 59.72199249]
[250.85914612 64.09175110]
[264.10656738 71.12776947]
[275.76199341 80.56976318]
[285.39425659 92.06845093]
[292.64700317 105.19847870]
[297.25195312 119.47413635]
[299.03878784 134.36732483]
[297.94137573 149.32713318]
[294.00033569 163.80014038]
[287.36141968 177.25099182]
[278.27026367 189.18206787]
[267.06314087 199.15203857]
[254.15463257 206.79209900]
[240.02226257 211.81961060]
[225.18879700 214.04859924]
[210.20297241 213.39660645]
[195.61914062 209.88777161]
[181.97680664 203.65185547]
[169.78060913 194.91957092]
[159.48171997 184.01393127]
[151.46409607 171.34425354]
[151.46409607 186.34425354]
[151.46409607 201.34425354]
[151.46409607 216.34425354]
[151.46409607 231.34425354]
[151.46409607 246.34425354]
[151.46409607 261.34423828]
[151.46409607 276.34423828]
[151.46409607 291.34423828]
[151.46409607 306.34423828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 110]
[12 109]
[13 108]
[15 24]
[16 23]
[17 22]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[63 105]
[64 104]
[66 101]
[67 100]
[68 99]
[81 98]
[82 97]
[83 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
