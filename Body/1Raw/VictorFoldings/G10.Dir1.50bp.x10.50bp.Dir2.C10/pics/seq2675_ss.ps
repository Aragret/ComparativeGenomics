%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCxxxxxxxxxxAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.60771179]
[92.50000000 233.60771179]
[92.50000000 218.60771179]
[92.50000000 203.60771179]
[92.50000000 188.60771179]
[92.50000000 173.60771179]
[92.50000000 158.60771179]
[92.50000000 143.60771179]
[92.50000000 128.60771179]
[92.50000000 113.60771179]
[83.55733490 125.65049744]
[68.63455963 127.17066193]
[57.44722366 117.17848969]
[57.27888870 102.17943573]
[68.23915100 91.93869781]
[83.19188690 93.12335205]
[71.89288330 83.25762939]
[60.59387970 73.39190674]
[49.29487610 63.52618408]
[31.80700684 68.10740662]
[15.19625568 61.37945557]
[5.98791218 46.18711853]
[7.67833042 28.65970421]
[-4.02129316 19.27254295]
[-15.72091675 9.88538074]
[-27.42053986 0.49821913]
[-47.90155029 12.94938850]
[-72.15062714 14.87231064]
[-94.99800110 5.53533792]
[-111.42780304 -13.35814285]
[-117.67850494 -37.97126389]
[-132.63874817 -39.06257629]
[-147.59899902 -40.15388489]
[-155.15963745 -26.89494705]
[-167.72926331 -18.23656464]
[-182.81213379 -15.89786816]
[-197.41355896 -20.34320641]
[-208.63441467 -30.68995476]
[-214.24679565 -44.88375854]
[-213.13633728 -60.10642624]
[-205.52354431 -73.33548737]
[-192.91992188 -81.94430542]
[-177.82795715 -84.22358704]
[-163.24414062 -79.72078705]
[-152.06411743 -69.32992554]
[-146.50769043 -55.11413574]
[-131.54743958 -54.02282333]
[-116.58719635 -52.93151474]
[-110.52418518 -66.65156555]
[-121.40300751 -76.97877502]
[-132.28182983 -87.30597687]
[-143.16065979 -97.63317871]
[-154.03948975 -107.96038818]
[-170.04995728 -108.98226929]
[-179.11486816 -122.21884918]
[-174.28038025 -137.51614380]
[-159.25511169 -143.13938904]
[-145.56515503 -134.77490234]
[-143.71228027 -118.83921051]
[-132.83345032 -108.51200867]
[-121.95462799 -98.18479919]
[-111.07580566 -87.85759735]
[-100.19697571 -77.53039551]
[-93.62092590 -82.56311035]
[-86.39223480 -86.54000854]
[-78.67821503 -89.37941742]
[-70.65586853 -91.02590179]
[-62.50784302 -91.45127869]
[-54.41824722 -90.65504456]
[-46.56851578 -88.66421509]
[-39.13333130 -85.53248596]
[-32.27674484 -81.33883667]
[-26.14854050 -76.18555450]
[-20.88098526 -70.19576263]
[-16.58596611 -63.51049042]
[-13.35263157 -56.28533173]
[-11.24554825 -48.68686676]
[-10.30343246 -40.88880539]
[-10.53848076 -33.06800079]
[-11.93629169 -25.40047264]
[-14.45639706 -18.05741882]
[-18.03337860 -11.20140457]
[-6.33375502 -1.81424272]
[5.36586857 7.57291889]
[17.06549263 16.96008110]
[28.24446297 12.04366016]
[40.52475357 12.37414646]
[51.55238342 17.95006180]
[59.18708801 27.75852585]
[61.91762161 39.95870972]
[59.16059875 52.22717667]
[70.45960236 62.09290314]
[81.75860596 71.95862579]
[93.05760956 81.82434845]
[122.21096039 82.30976105]
[137.19067383 81.52991486]
[152.17039490 80.75006866]
[167.15010071 79.97023010]
[169.61254883 65.11255646]
[175.21180725 51.13176727]
[183.68598938 38.68177032]
[194.63873291 28.34487915]
[207.55776978 20.60456085]
[221.83885193 15.82284832]
[236.81402588 14.22338963]
[251.78286743 15.88099480]
[266.04528809 20.71813583]
[278.93414307 28.50856781]
[289.84667969 38.88792038]
[298.27243042 51.37073517]
[303.81735229 65.37316132]
[306.22207642 80.24028778]
[305.37414551 95.27674103]
[301.31320190 109.77925110]
[294.22918701 123.06950378]
[284.45343018 134.52589417]
[272.44317627 143.61257935]
[258.76016235 149.90455627]
[244.04434204 153.10754395]
[228.98403931 153.07173157]
[214.28363037 149.79879761]
[200.63069153 143.44183350]
[188.66377258 134.29812622]
[178.94262695 122.79538727]
[171.92189026 109.47159576]
[167.92994690 94.94994354]
[152.95024109 95.72978973]
[137.97052002 96.50962830]
[122.99080658 97.28947449]
[136.51062012 103.78675842]
[151.50920105 103.99350739]
[164.46243286 111.55747223]
[172.01333618 124.51833344]
[172.20495605 139.51710510]
[164.98765564 152.66665649]
[152.23187256 160.55906677]
[137.24348450 161.14894104]
[123.90691376 154.28338623]
[115.67853546 141.74169922]
[114.69138336 126.77145386]
[107.50000000 113.60771179]
[107.50000000 128.60771179]
[107.50000000 143.60771179]
[107.50000000 158.60771179]
[107.50000000 173.60771179]
[107.50000000 188.60771179]
[107.50000000 203.60771179]
[107.50000000 218.60771179]
[107.50000000 233.60771179]
[107.50000000 248.60771179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 94]
[17 93]
[18 92]
[19 91]
[23 85]
[24 84]
[25 83]
[26 82]
[31 48]
[32 47]
[33 46]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[95 129]
[96 128]
[97 127]
[98 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
