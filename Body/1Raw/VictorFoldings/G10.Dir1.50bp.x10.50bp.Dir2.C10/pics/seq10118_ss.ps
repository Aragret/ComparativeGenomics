%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGxxxxxxxxxxCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.69872284 429.98254395]
[120.69872284 414.98254395]
[120.69872284 399.98254395]
[120.69872284 384.98254395]
[120.69872284 369.98254395]
[120.69872284 354.98254395]
[120.69872284 339.98254395]
[120.69872284 324.98254395]
[120.69872284 309.98254395]
[120.69872284 294.98254395]
[104.82518005 291.58309937]
[90.07823944 284.78137207]
[77.17758179 274.90618896]
[66.75348663 262.43643188]
[59.31601334 247.97781372]
[55.23007202 232.23350525]
[54.69747925 215.96989441]
[57.74703217 199.97927856]
[64.23293304 185.04127502]
[73.84178925 171.88485718]
[86.10772705 161.15267944]
[100.43499756 153.36979675]
[116.12689972 148.91789246]
[115.19126892 133.94711304]
[114.25564575 118.97631836]
[102.79373932 122.54689789]
[91.59336853 120.01001740]
[83.55551910 112.55456543]
[80.49472809 102.57078552]
[65.99913025 98.71362305]
[51.50353622 94.85646820]
[44.38109589 108.13681030]
[34.38753128 119.41623688]
[22.06178284 128.08645630]
[8.06856346 133.67988586]
[-6.83749104 135.89489746]
[-21.85251617 134.61203003]
[-36.16676712 129.90045166]
[-49.00830078 122.01428223]
[-59.68458557 111.37879181]
[-67.61986542 98.56754303]
[-72.38619232 84.27143097]
[-73.72653198 69.26142883]
[-71.56860352 54.34700012]
[-66.02877808 40.33246994]
[-57.40580750 27.97362328]
[-46.16472244 17.93695259]
[-32.91174316 10.76372623]
[-18.36157799 6.84078550]
[-3.29890537 6.37969017]
[11.46396542 9.40530682]
[25.13089180 15.75446701]
[36.96483231 25.08477020]
[46.32760239 36.89304352]
[52.71427155 50.54248047]
[55.78042221 65.29698944]
[55.36069489 80.36087036]
[69.85629272 84.21802521]
[84.35189056 88.07518768]
[90.65489960 81.76959991]
[99.40906525 78.71004486]
[108.97905731 79.79505920]
[117.43303680 85.11634064]
[122.93222046 93.88140106]
[132.91494751 82.68563843]
[142.89767456 71.48986816]
[152.88040161 60.29410553]
[162.86312866 49.09833908]
[172.84585571 37.90257263]
[182.82858276 26.70680809]
[168.31134033 30.48169899]
[153.44021606 28.51963997]
[140.39880371 21.10873032]
[131.10203552 9.33714962]
[126.91500854 -5.06662560]
[128.45249939 -19.98762131]
[135.48878479 -33.23491287]
[146.99067688 -42.86334229]
[161.26928711 -47.45911789]
[176.22802734 -46.34742355]
[189.67045593 -39.69149017]
[199.62272644 -28.46864128]
[204.62350464 -14.32678318]
[203.93852234 0.65756851]
[197.66871643 14.28365135]
[210.44607544 6.42622519]
[223.22343445 -1.43120039]
[221.42291260 -17.57127762]
[226.80712891 -32.83142090]
[238.25506592 -44.18621063]
[253.44886780 -49.40784836]
[269.34313965 -47.50315094]
[282.77520752 -38.90200424]
[295.38635254 -47.02354431]
[307.99746704 -55.14508820]
[320.60858154 -63.26662827]
[323.70806885 -78.76401520]
[336.90417480 -87.46102905]
[352.36791992 -84.19789124]
[360.92492676 -70.91056824]
[357.49847412 -55.48218155]
[344.12142944 -47.06612778]
[328.73013306 -50.65550232]
[316.11901855 -42.53395844]
[303.50787354 -34.41241837]
[290.89675903 -26.29087448]
[293.27905273 -12.58957958]
[290.23803711 1.02519333]
[282.20248413 12.48173523]
[270.36373901 20.02379227]
[256.49911499 22.47976494]
[242.70524597 19.44459915]
[231.08085632 11.34615707]
[218.30351257 19.20358276]
[205.52615356 27.06100845]
[194.02433777 36.68953323]
[184.04162598 47.88529968]
[174.05889893 59.08106613]
[164.07617188 70.27683258]
[154.09344482 81.47259521]
[144.11071777 92.66836548]
[134.12799072 103.86412811]
[129.22644043 118.04068756]
[130.16206360 133.01147461]
[131.09768677 147.98226929]
[144.80900574 149.84048462]
[157.92935181 154.22071838]
[169.99926758 160.96781921]
[180.59642029 169.84379578]
[189.35038757 180.53620911]
[195.95553589 192.66914368]
[200.18177795 205.81643677]
[201.88253784 219.51669312]
[200.99983215 233.28938293]
[197.56626892 246.65177917]
[191.70384216 259.13583374]
[183.61958313 270.30459595]
[173.59825134 279.76748657]
[161.99230957 287.19400024]
[149.20954895 292.32510376]
[135.69871521 294.98254395]
[135.69871521 309.98254395]
[135.69871521 324.98254395]
[135.69871521 339.98254395]
[135.69871521 354.98254395]
[135.69871521 369.98254395]
[135.69871521 384.98254395]
[135.69871521 399.98254395]
[135.69871521 414.98254395]
[135.69871521 429.98254395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 125]
[24 124]
[25 123]
[29 59]
[30 58]
[31 57]
[64 122]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[70 116]
[85 115]
[86 114]
[87 113]
[93 106]
[94 105]
[95 104]
[96 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
