%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGxxxxxxxxxxACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.14794159 407.90411377]
[83.14794159 392.90411377]
[83.14794159 377.90411377]
[83.14794159 362.90411377]
[83.14794159 347.90411377]
[83.14794159 332.90411377]
[83.14794159 317.90411377]
[83.14794159 302.90411377]
[83.14794159 287.90411377]
[83.14794159 272.90411377]
[68.68308258 269.06777954]
[55.69422531 261.61215210]
[45.06975555 251.04025269]
[37.53814697 238.06846619]
[33.61800003 223.57801819]
[33.58233261 208.55511475]
[37.43958664 194.02378845]
[44.93262482 180.97615051]
[55.55588531 170.30458069]
[68.58946991 162.74078369]
[83.14794159 158.80554199]
[83.14794159 143.80554199]
[83.14794159 128.80554199]
[75.78164673 114.25797272]
[77.17139435 100.51873016]
[84.47396088 91.78527069]
[93.31526947 89.67971802]
[87.82823944 75.71932983]
[82.34120941 61.75893784]
[76.85417175 47.79854965]
[61.71759415 48.12910461]
[47.40807343 43.27013397]
[35.64647293 33.82635117]
[27.84025955 20.95261383]
[24.91508865 6.21270800]
[27.20507622 -8.61059952]
[34.41476440 -21.73117638]
[45.65706635 -31.57474709]
[40.17003632 -45.53513718]
[27.92085648 -55.54853439]
[30.46624184 -70.22403717]
[24.97920990 -84.18442535]
[16.59706688 -96.62386322]
[5.71824169 -106.95106506]
[-5.16058350 -117.27827454]
[-9.56348133 -118.15917206]
[-13.07474232 -120.21880341]
[-15.42829609 -123.01927948]
[-16.53264809 -126.08104706]
[-16.46895599 -128.94517517]
[-26.45168304 -140.14094543]
[-36.43441010 -151.33671570]
[-51.26777649 -147.56446838]
[-66.15242004 -151.12899780]
[-77.66796875 -161.21121216]
[-83.16821289 -175.49426270]
[-81.38925934 -190.69604492]
[-72.73988342 -203.32327271]
[-59.20765686 -210.47431946]
[-43.90217972 -210.50590515]
[-30.34054375 -203.41079712]
[-21.63911057 -190.81938171]
[-19.79740715 -175.62509155]
[-25.23864365 -161.31944275]
[-15.25591755 -150.12367249]
[-5.27319098 -138.92790222]
[5.16662121 -128.15710449]
[16.04544640 -117.82989502]
[26.92427254 -107.50268555]
[22.97893524 -121.97453308]
[23.00783920 -136.97450256]
[27.00891876 -151.43104553]
[34.69634628 -164.31138611]
[45.52094650 -174.69541931]
[58.70943451 -181.84130859]
[73.31965637 -185.23857117]
[88.30789185 -184.64451599]
[102.60340881 -180.10159302]
[115.18496704 -171.93432617]
[125.15377045 -160.72615051]
[131.79766846 -147.27778625]
[134.64204407 -132.54994202]
[133.48368835 -117.59473419]
[128.40534973 -103.48053741]
[119.76982880 -91.21563721]
[108.19402313 -81.67620850]
[94.50487518 -75.54373169]
[79.68031311 -73.25630188]
[64.77937317 -74.97731018]
[50.86653519 -80.58383179]
[38.93960190 -89.67145538]
[44.42663193 -75.71106720]
[56.28334427 -66.69620514]
[54.13042450 -51.02216721]
[59.61745834 -37.06177902]
[74.55354309 -37.50743866]
[88.76753998 -32.80728531]
[100.53784943 -23.51027679]
[108.43190002 -10.72335339]
[111.48051453 4.02032375]
[109.29683685 18.94519615]
[102.12533569 32.24713135]
[90.81456757 42.31151581]
[96.30159760 56.27190781]
[101.78862762 70.23229980]
[107.27565765 84.19268799]
[119.62722778 92.70377350]
[134.62641907 92.85980988]
[149.62561035 93.01584625]
[158.76794434 80.47801208]
[173.54411316 75.74047089]
[188.27238464 80.62490082]
[197.28942871 93.25314331]
[197.12802124 108.76937866]
[187.85020447 121.20729828]
[173.02351379 125.78427124]
[158.34909058 120.74035645]
[149.46957397 108.01503754]
[134.47038269 107.85900116]
[119.47119141 107.70296478]
[114.14038086 112.97860718]
[129.03713989 114.73542786]
[136.95172119 127.47747040]
[131.92439270 141.60990906]
[117.74076080 146.49096680]
[105.08116913 138.44517517]
[103.47875214 123.52989960]
[98.14794159 128.80554199]
[98.14794159 143.80554199]
[98.14794159 158.80554199]
[112.70641327 162.74078369]
[125.73999786 170.30458069]
[136.36326599 180.97615051]
[143.85629272 194.02378845]
[147.71354675 208.55511475]
[147.67788696 223.57801819]
[143.75773621 238.06846619]
[136.22613525 251.04025269]
[125.60166168 261.61215210]
[112.61280060 269.06777954]
[98.14794159 272.90411377]
[98.14794159 287.90411377]
[98.14794159 302.90411377]
[98.14794159 317.90411377]
[98.14794159 332.90411377]
[98.14794159 347.90411377]
[98.14794159 362.90411377]
[98.14794159 377.90411377]
[98.14794159 392.90411377]
[98.14794159 407.90411377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 128]
[27 106]
[28 105]
[29 104]
[30 103]
[38 95]
[39 94]
[41 92]
[42 91]
[43 69]
[44 68]
[45 67]
[50 66]
[51 65]
[52 64]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
