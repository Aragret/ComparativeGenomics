%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCxxxxxxxxxxUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.90502930 285.52505493]
[107.28105164 270.53805542]
[106.65708160 255.55102539]
[106.03310394 240.56401062]
[105.40912628 225.57699585]
[104.78514862 210.58998108]
[104.16117096 195.60296631]
[103.53719330 180.61595154]
[100.59170532 165.90798950]
[95.39629364 151.83647156]
[90.20087433 137.76493835]
[76.67668915 131.27677917]
[62.44990921 136.03059387]
[48.22312927 140.78440857]
[33.99634933 145.53822327]
[19.76957130 150.29203796]
[5.54279184 155.04585266]
[6.90131378 170.05422974]
[4.76145124 184.97125244]
[-0.76139629 198.99247742]
[-9.36938858 211.36177063]
[-20.59830666 221.41204834]
[-33.84259033 228.60131836]
[-48.38799286 232.54188538]
[-63.45009613 233.02122498]
[-78.21662140 230.01348877]
[-91.89122772 223.68089294]
[-103.73645782 214.36492920]
[-113.11352539 202.56800842]
[-119.51672363 188.92631531]
[-122.60074615 174.17553711]
[-122.19926453 159.11114502]
[-118.33393860 144.54557800]
[-111.21321869 131.26431274]
[-101.22111511 119.98358917]
[-88.89649200 111.31177521]
[-74.90399170 105.71652985]
[-59.99822617 103.49958801]
[-44.98303604 104.78051758]
[-30.66817284 109.49023438]
[-17.82562065 117.37474060]
[-7.14795876 128.00885010]
[0.78897691 140.81907654]
[15.01575565 136.06526184]
[29.24253464 131.31144714]
[43.46931458 126.55763245]
[57.69609451 121.80381775]
[71.92287445 117.05000305]
[70.60421753 93.15228271]
[85.21293640 76.79367065]
[80.90535736 62.42549133]
[76.59777069 48.05730438]
[71.72995758 62.24548340]
[61.27412415 73.00074005]
[47.22900009 78.26709747]
[32.27945328 77.03784180]
[19.28323746 69.54795837]
[10.72470665 57.22921371]
[8.23990726 42.43645096]
[12.30383492 27.99745941]
[22.13962936 16.67239189]
[35.86708069 10.62614727]
[50.86205292 11.01452637]
[64.25811005 17.76328468]
[73.49382019 29.58099174]
[72.86984253 14.59397507]
[72.24586487 -0.39304081]
[71.62188721 -15.38005733]
[57.58639145 -21.37735558]
[47.54944229 -32.87615967]
[43.50388718 -47.59336853]
[46.25297165 -62.60686874]
[55.25086594 -74.93572998]
[68.71102905 -82.13203430]
[83.96092987 -82.76695251]
[97.97270203 -76.71443176]
[107.96429443 -65.17619324]
[111.95185852 -50.44316483]
[109.14366913 -35.44060516]
[100.09729767 -23.14727783]
[86.60890198 -16.00403404]
[87.23287964 -1.01701820]
[87.85685730 13.96999836]
[88.48083496 28.95701408]
[90.96595764 43.74972153]
[95.27353668 58.11790466]
[99.58112335 72.48609161]
[108.13368225 73.71247864]
[115.88435364 77.53050995]
[122.06900787 83.56377411]
[136.08572388 78.22225952]
[150.10243225 72.88074493]
[164.11914062 67.53923798]
[178.13586426 62.19772339]
[182.66867065 57.24179840]
[188.19866943 55.61380386]
[192.84835815 56.93889999]
[207.07513428 52.18508530]
[221.30192566 47.43127060]
[223.17367554 32.28335571]
[231.43972778 19.45233154]
[244.45883179 11.48580360]
[259.64605713 9.96553421]
[273.98593140 15.19337177]
[284.63131714 26.13132668]
[289.46850586 40.60766220]
[287.53710938 55.74808502]
[279.22061157 68.54646301]
[266.17022705 76.46165466]
[250.97714233 77.92211151]
[236.65794373 72.63784027]
[226.05574036 61.65805054]
[211.82894897 66.41186523]
[197.60217285 71.16567993]
[183.47737122 76.21443176]
[169.46066284 81.55594635]
[155.44395447 86.89746094]
[141.42723083 92.23897552]
[127.41052246 97.58048248]
[127.61157990 108.36187744]
[123.54203033 118.88851166]
[115.45489502 127.46607208]
[104.27239990 132.56953430]
[109.46781158 146.64105225]
[114.66323090 160.71257019]
[117.97406006 146.08251953]
[126.26216888 133.58023071]
[138.44824219 124.83381653]
[152.94532776 120.98227692]
[167.86555481 122.52718353]
[181.26593018 129.26734924]
[191.40139771 140.32504272]
[196.95205688 154.26025391]
[197.19505310 169.25828552]
[192.09877014 183.36601257]
[182.32687378 194.74624634]
[169.15188599 201.91700745]
[154.28953552 203.94447327]
[139.67527771 200.56460571]
[127.21224976 192.21757507]
[118.52420807 179.99197388]
[119.14818573 194.97898865]
[119.77216339 209.96600342]
[120.39614105 224.95301819]
[121.02011871 239.94003296]
[121.64409637 254.92704773]
[122.26807404 269.91406250]
[122.89205170 284.90109253]
[129.59204102 300.47497559]
[116.48151398 311.22442627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 125]
[10 124]
[11 123]
[12 48]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[50 87]
[51 86]
[52 85]
[65 84]
[66 83]
[67 82]
[68 81]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
