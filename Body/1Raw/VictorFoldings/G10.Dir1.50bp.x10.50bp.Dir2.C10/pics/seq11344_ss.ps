%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCxxxxxxxxxxAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[152.65602112 76.42385864]
[139.87866211 84.28128815]
[127.10130310 92.13871002]
[114.32394409 99.99613953]
[107.50328827 112.20147705]
[93.53347778 112.78121948]
[80.75612640 120.63864136]
[73.05382538 134.45838928]
[58.15941620 134.53446960]
[45.38205719 142.39189148]
[49.16452026 157.72052002]
[48.03663635 173.44914246]
[42.12028503 188.04528809]
[32.00332260 200.09051514]
[18.68117905 208.41824341]
[3.45893407 212.22677612]
[-12.17653656 211.15644836]
[-26.70178986 205.32350159]
[-38.70525742 195.30769348]
[-51.31638336 203.42924500]
[-63.92751312 211.55078125]
[-68.71451569 226.86300659]
[-83.72226715 232.53283691]
[-97.43811035 224.21084595]
[-99.34041595 208.28097534]
[-87.96990204 196.96325684]
[-72.04905701 198.93965149]
[-59.43792725 190.81811523]
[-46.82679749 182.69657898]
[-50.80795288 168.97621155]
[-50.75198746 154.67410278]
[-46.65445328 140.95475769]
[-38.84034348 128.93780518]
[-27.93834686 119.60662079]
[-14.83026123 113.72779083]
[-0.57968032 111.78819275]
[13.65430737 113.95468903]
[26.71139145 120.05977631]
[37.52463150 129.61454773]
[50.30199051 121.75711823]
[57.09036636 108.49938965]
[72.89869690 107.86128998]
[85.67605591 100.00386047]
[92.49671173 87.79852295]
[106.46652222 87.21878052]
[119.24387360 79.36135864]
[132.02124023 71.50392914]
[144.79858398 63.64650345]
[138.01025391 50.64950943]
[132.13453674 37.21547699]
[127.19935608 23.40838623]
[123.22822571 9.29399872]
[120.24000549 -5.06046295]
[118.24890900 -19.58663559]
[117.26438904 -34.21534348]
[117.29110718 -48.87691879]
[118.32891083 -63.50154495]
[120.37282562 -78.01957703]
[123.41309357 -92.36189270]
[127.43521118 -106.46018219]
[132.41999817 -120.24732208]
[138.34368896 -133.65766907]
[145.17803955 -146.62738037]
[152.89050293 -159.09469604]
[161.44432068 -171.00025940]
[170.79872131 -182.28739929]
[180.90914917 -192.90235901]
[191.72744751 -202.79464722]
[203.20205688 -211.91714478]
[215.27833557 -220.22645569]
[227.89875793 -227.68299866]
[241.00320435 -234.25132751]
[254.52925110 -239.90016174]
[268.41250610 -244.60264587]
[282.58679199 -248.33638000]
[296.98468018 -251.08364868]
[311.53753662 -252.83137512]
[326.17608643 -253.57125854]
[340.83059692 -253.29981995]
[355.43130493 -252.01837158]
[369.90866089 -249.73304749]
[384.19375610 -246.45474243]
[398.21856689 -242.19911194]
[411.91629028 -236.98643494]
[425.22171021 -230.84156799]
[438.07147217 -223.79379272]
[450.40441895 -215.87670898]
[462.16183472 -207.12802124]
[473.28775024 -197.58943176]
[483.72915649 -187.30636597]
[493.43640137 -176.32783508]
[502.36325073 -164.70613098]
[510.46722412 -152.49659729]
[517.70977783 -139.75740051]
[531.23394775 -146.24555969]
[544.75811768 -152.73373413]
[558.28234863 -159.22189331]
[571.80651855 -165.71005249]
[574.46728516 -180.99729919]
[585.62896729 -191.77677917]
[600.99963379 -193.90354919]
[614.66888428 -186.55982971]
[621.38073730 -172.56944275]
[618.55426025 -157.31196594]
[607.27630615 -146.65420532]
[591.88348389 -144.69430542]
[578.29467773 -152.18586731]
[564.77050781 -145.69770813]
[551.24627686 -139.20953369]
[537.72210693 -132.72137451]
[524.19793701 -126.23320770]
[529.83966064 -111.94309235]
[534.43347168 -97.28224945]
[537.95538330 -82.32740784]
[540.38677979 -67.15683746]
[541.71502686 -51.84994888]
[541.93310547 -36.48685074]
[541.03979492 -21.14795876]
[539.03979492 -5.91356468]
[535.94354248 9.13658428]
[531.76715088 23.92370415]
[526.53253174 38.37038803]
[520.26696777 52.40100479]
[513.00323486 65.94209290]
[504.77938843 78.92277527]
[495.63839722 91.27507019]
[485.62808228 102.93431854]
[474.80084229 113.83945465]
[463.21328735 123.93338013]
[450.92608643 133.16323853]
[438.00350952 141.48069763]
[424.51318359 148.84216309]
[410.52572632 155.20910645]
[396.11428833 160.54815674]
[381.35433960 164.83134460]
[366.32312012 168.03619385]
[351.09930420 170.14591980]
[335.76254272 171.14944458]
[320.39312744 171.04145813]
[305.07153320 169.82252502]
[289.87789917 167.49897766]
[274.89184570 164.08293152]
[260.19174194 159.59225464]
[245.85456848 154.05041504]
[231.95539856 147.48638916]
[218.56698608 139.93449402]
[205.75942993 131.43423462]
[193.59979248 122.03008270]
[182.15173340 111.77122498]
[171.47520447 100.71134186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 48]
[2 47]
[3 46]
[4 45]
[6 43]
[7 42]
[9 40]
[10 39]
[19 29]
[20 28]
[21 27]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
