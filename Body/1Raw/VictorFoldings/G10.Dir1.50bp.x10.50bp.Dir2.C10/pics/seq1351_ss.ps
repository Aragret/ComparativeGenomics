%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAxxxxxxxxxxCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.77303314 239.78195190]
[109.46097565 224.78520203]
[109.14891815 209.78843689]
[108.83686066 194.79168701]
[108.52481079 179.79493713]
[108.21275330 164.79818726]
[107.90069580 149.80142212]
[107.58863831 134.80467224]
[107.27658081 119.80792236]
[94.03399658 112.76278687]
[81.42286682 120.88433075]
[68.81173706 129.00587463]
[67.81562805 144.37837219]
[58.07257843 156.07994080]
[43.48004913 159.75717163]
[29.68547440 154.20310974]
[17.07434654 162.32466125]
[4.46321774 170.44619751]
[-8.14791107 178.56773376]
[-8.03049374 193.99465942]
[-16.29144478 207.02386475]
[-30.29472351 213.49778748]
[-45.57193756 211.35061646]
[-57.24818039 201.26751709]
[-61.59760666 186.46597290]
[-57.23233032 171.66908264]
[-45.54529572 161.59849548]
[-30.26579094 159.46769714]
[-16.26945305 165.95660400]
[-3.65832472 157.83506775]
[8.95280361 149.71353149]
[21.56393242 141.59197998]
[22.21415329 126.73549652]
[31.59881210 114.97147369]
[46.28273392 110.94210815]
[60.69019699 116.39474487]
[73.30133057 108.27320099]
[85.91245270 100.15165710]
[95.42081451 88.55031586]
[100.90784454 74.58992767]
[106.39487457 60.62953949]
[111.88190460 46.66914749]
[98.35310364 40.17501068]
[85.33443451 32.71065140]
[72.89536285 24.31589890]
[61.10225296 15.03554249]
[50.01803207 4.91909742]
[39.70183563 -5.97945976]
[30.20871162 -17.60198021]
[21.58930588 -29.88645172]
[13.88960743 -42.76733017]
[7.15069866 -56.17589188]
[1.40853488 -70.04059601]
[-3.30624676 -84.28746033]
[-6.96849060 -98.84048462]
[-9.55865669 -113.62200165]
[-11.06292534 -128.55316162]
[-11.47326946 -143.55430603]
[-10.78750229 -158.54536438]
[-9.00928020 -173.44638062]
[-6.14809179 -188.17785645]
[-2.21920300 -202.66116333]
[2.75642371 -216.81903076]
[8.75224113 -230.57594299]
[15.73625755 -243.85848999]
[23.67121124 -256.59579468]
[32.51476669 -268.71990967]
[42.21973419 -280.16610718]
[52.73433685 -290.87338257]
[64.00247955 -300.78457642]
[75.96402740 -309.84677124]
[88.55516815 -318.01168823]
[101.70872498 -325.23568726]
[115.35451508 -331.48028564]
[129.41972351 -336.71212769]
[143.82931519 -340.90332031]
[158.50640869 -344.03149414]
[173.37268066 -346.07995605]
[188.34883118 -347.03778076]
[203.35493469 -346.89984131]
[218.31094360 -345.66690063]
[233.13706970 -343.34552002]
[247.75418091 -339.94812012]
[262.08428955 -335.49276733]
[276.05096436 -330.00326538]
[289.57965088 -323.50891113]
[302.59820557 -316.04434204]
[315.03713989 -307.64938354]
[326.83010864 -298.36883545]
[337.91415405 -288.25219727]
[348.23016357 -277.35345459]
[357.72311401 -265.73080444]
[366.34231567 -253.44618225]
[374.04177856 -240.56517029]
[380.78048706 -227.15649414]
[386.52243042 -213.29170227]
[391.23696899 -199.04475403]
[394.89895630 -184.49168396]
[397.48889160 -169.71011353]
[398.99291992 -154.77893066]
[399.40301514 -139.77778625]
[398.71701050 -124.78672791]
[396.93853760 -109.88574219]
[394.07708740 -95.15432739]
[390.14797974 -80.67108154]
[385.17211914 -66.51328278]
[379.17608643 -52.75646973]
[372.19183350 -39.47404480]
[364.25668335 -26.73686981]
[355.41293335 -14.61290932]
[345.70776367 -3.16684723]
[335.19299316 7.54024458]
[323.92468262 17.45123863]
[311.96298218 26.51325607]
[299.37170410 34.67794418]
[286.21804810 41.90174484]
[272.57214355 48.14611053]
[258.50683594 53.37772751]
[244.09718323 57.56867981]
[229.42004395 60.69661331]
[214.55374146 62.74483109]
[199.57757568 63.70240784]
[184.57145691 63.56423187]
[169.61547852 62.33104706]
[154.78939819 60.00942612]
[140.17234802 56.61176300]
[125.84230042 52.15618134]
[120.35526276 66.11656952]
[114.86823273 80.07695770]
[109.38120270 94.03734589]
[120.88949585 84.41658020]
[133.39492798 76.13320923]
[148.33210754 74.76180267]
[162.13677979 80.62959290]
[171.51493835 92.33643341]
[174.22880554 107.08889008]
[169.63082886 121.36679077]
[158.81811523 131.76321411]
[144.37078857 135.79739380]
[129.73701477 132.50714111]
[122.27333832 119.49586487]
[122.58539581 134.49261475]
[122.89744568 149.48937988]
[123.20950317 164.48612976]
[123.52156067 179.48287964]
[123.83361816 194.47962952]
[124.14567566 209.47639465]
[124.45773315 224.47314453]
[124.76978302 239.46989441]
[127.36078644 258.67761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 38]
[11 37]
[12 36]
[16 32]
[17 31]
[18 30]
[19 29]
[39 130]
[40 129]
[41 128]
[42 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
