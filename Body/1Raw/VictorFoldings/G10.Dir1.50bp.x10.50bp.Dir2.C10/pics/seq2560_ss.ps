%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACxxxxxxxxxxUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.89488220 361.38848877]
[135.89488220 346.38848877]
[135.89488220 331.38848877]
[135.89488220 316.38848877]
[135.89488220 301.38848877]
[135.89488220 286.38848877]
[135.89488220 271.38848877]
[135.89488220 256.38848877]
[135.89488220 241.38848877]
[135.89488220 226.38848877]
[133.25601196 211.62243652]
[127.95455170 206.40322876]
[128.10221863 197.20376587]
[123.20066833 183.02720642]
[118.29911804 168.85064697]
[113.39756775 154.67408752]
[77.84429169 129.54075623]
[82.45619202 100.76327515]
[67.69013977 98.12441254]
[52.92408371 95.48554993]
[38.15802765 92.84667969]
[33.39048767 107.09759521]
[26.59872246 120.50243378]
[17.92749786 132.77548218]
[7.56164265 143.65513611]
[-4.27789593 152.90950012]
[-17.33875656 160.34130859]
[-31.34254456 165.79216003]
[-45.99077225 169.14585876]
[-60.97120667 170.33093262]
[-75.96454620 169.32211304]
[-90.65119934 166.14089966]
[-104.71812439 160.85511780]
[-117.86547852 153.57742310]
[-129.81303406 144.46293640]
[-140.30610657 133.70593262]
[-149.12106323 121.53570557]
[-156.07000732 108.21166229]
[-161.00480652 94.01780701]
[-163.82028198 79.25667572]
[-164.45643616 64.24291229]
[-162.89968872 49.29652405]
[-159.18322754 34.73610687]
[-153.38627625 20.87200928]
[-145.63238525 7.99974823]
[-136.08685303 -3.60630512]
[-124.95310974 -13.69876575]
[-112.46849823 -22.06251335]
[-98.89911652 -28.51927185]
[-84.53419495 -32.93141937]
[-69.67993164 -35.20490646]
[-54.65294647 -35.29127502]
[-39.77353287 -33.18868256]
[-25.35884857 -28.94194984]
[-11.71614456 -22.64159393]
[0.86378419 -14.42190647]
[12.11279583 -4.45809126]
[21.79111671 7.03747129]
[29.69245338 19.81975365]
[35.64838791 33.61629868]
[39.53196716 48.13303757]
[41.26041794 63.06053925]
[40.79689407 78.08062744]
[55.56294632 80.71949005]
[70.32900238 83.35835266]
[85.09506226 85.99722290]
[73.40176392 76.60217285]
[58.86823654 72.89050293]
[46.75561142 64.04266357]
[38.79955673 51.32648087]
[36.14012527 36.56411743]
[39.15839386 21.87091827]
[47.42186356 9.35233116]
[59.74643326 0.80218750]
[74.36607361 -2.55433035]
[89.18587494 -0.23625439]
[102.08225250 7.42424965]
[111.20725250 19.32947922]
[115.25329590 33.77349091]
[113.64063263 48.68655014]
[106.60067749 61.93128204]
[105.67514038 76.90270233]
[113.66505432 64.20777130]
[121.65496826 51.51284027]
[129.64488220 38.81790924]
[137.63481140 26.12298012]
[145.62472534 13.42805099]
[148.94441223 -3.19770980]
[165.83941650 -4.61021471]
[171.87373352 11.23350620]
[158.31965637 21.41796684]
[150.32972717 34.11289597]
[142.33981323 46.80782700]
[134.34989929 59.50275803]
[126.35998535 72.19768524]
[118.37007141 84.89261627]
[122.94093323 90.83880615]
[132.08267212 102.73118591]
[136.65353394 108.67737579]
[150.97613525 104.22055817]
[165.29873657 99.76374054]
[179.62132263 95.30693054]
[193.94392395 90.85011292]
[208.26652527 86.39329529]
[221.59385681 75.91387177]
[235.35311890 85.81938171]
[229.64366150 101.78304291]
[212.72334290 100.71589661]
[198.40074158 105.17270660]
[184.07814026 109.62952423]
[169.75555420 114.08634186]
[155.43295288 118.54315948]
[141.11035156 122.99996948]
[137.72630310 129.69311523]
[152.54884338 131.99357605]
[154.94120789 146.80155945]
[141.59718323 153.65258789]
[130.95817566 143.07940674]
[127.57412720 149.77253723]
[132.47567749 163.94909668]
[137.37722778 178.12565613]
[142.27877808 192.30221558]
[147.32752991 206.42701721]
[150.39083862 191.74314880]
[157.97720337 178.80302429]
[169.29434204 168.95809937]
[183.16027832 163.23658752]
[198.12687683 162.23602295]
[212.63102722 166.06091309]
[225.15791321 174.31179810]
[234.39924622 186.12693787]
[239.38987732 200.27238464]
[239.60856628 215.27079773]
[235.03248596 229.55574036]
[226.13955688 241.63529968]
[213.85856628 250.24790955]
[199.47210693 254.49404907]
[184.48269653 253.93028259]
[170.45584106 248.61547852]
[158.85647583 239.10470581]
[150.89488220 226.38848877]
[150.89488220 241.38848877]
[150.89488220 256.38848877]
[150.89488220 271.38848877]
[150.89488220 286.38848877]
[150.89488220 301.38848877]
[150.89488220 316.38848877]
[150.89488220 331.38848877]
[150.89488220 346.38848877]
[150.89488220 361.38848877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[13 122]
[14 121]
[15 120]
[16 119]
[18 66]
[19 65]
[20 64]
[21 63]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
