%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAxxxxxxxxxxACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUACCCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.43276215 327.91778564]
[118.02375793 308.71005249]
[118.33581543 293.71328735]
[118.64787292 278.71655273]
[118.95993042 263.71978760]
[119.27198029 248.72303772]
[119.58403778 233.72628784]
[119.89609528 218.72953796]
[120.20815277 203.73277283]
[120.52021027 188.73602295]
[120.83226776 173.73927307]
[117.88677979 159.03131104]
[111.82376862 145.31124878]
[105.76075745 131.59120178]
[98.41128540 132.07283020]
[91.14539337 130.86723328]
[84.34530640 128.03784180]
[78.36875153 123.73350525]
[73.53012085 118.18064117]
[70.08396149 111.67137146]
[68.21155548 104.54811859]
[53.27725220 103.14581299]
[38.34294510 101.74350739]
[29.44054031 104.06709290]
[23.11364555 100.15351868]
[8.21174335 98.44083405]
[-6.69015932 96.72814178]
[-21.28351974 102.83914948]
[-33.04411697 93.69925690]
[-47.94602203 91.98656464]
[-54.25172424 94.29862213]
[-59.91021729 93.19737244]
[-63.42748260 89.88008881]
[-78.24523926 87.54898834]
[-93.06299591 85.21788025]
[-107.88075256 82.88677979]
[-117.47145844 94.88319397]
[-131.78129578 100.46209717]
[-146.96099854 98.12278748]
[-158.92729187 88.49452972]
[-164.46130371 74.16727448]
[-162.07443237 58.99498749]
[-152.40870667 47.05892944]
[-138.06417847 41.56984329]
[-122.89944458 44.00426865]
[-110.99374390 53.70735550]
[-105.54965210 68.06901550]
[-90.73189545 70.40012360]
[-75.91413879 72.73122406]
[-61.09637833 75.06233215]
[-46.23332977 77.08466339]
[-31.33142853 78.79735565]
[-17.80395126 72.56384277]
[-4.97746944 81.82624054]
[9.92443275 83.53893280]
[24.82633591 85.25161743]
[39.74524689 86.80920410]
[54.67955399 88.21150208]
[69.61386108 89.61380768]
[84.62361145 71.80856323]
[107.72004700 68.82964325]
[114.62704468 55.51448441]
[121.39515686 42.12820053]
[128.02365112 28.67223549]
[134.65216064 15.21627045]
[141.28065491 1.76030505]
[128.62951660 9.81937790]
[114.43928528 14.68121147]
[99.50406647 16.07373619]
[84.65962982 13.91902351]
[70.73668671 8.33765411]
[58.51437378 -0.35803613]
[48.67665482 -11.68143177]
[41.77405548 -24.99886894]
[38.19284821 -39.56509399]
[38.13344193 -54.56497574]
[41.59915924 -69.15911102]
[48.39605713 -82.53080750]
[58.14377594 -93.93177032]
[70.29682922 -102.72399902]
[84.17512512 -108.41547394]
[99.00202179 -110.68769836]
[113.94780731 -109.41352081]
[128.17610168 -104.66423798]
[140.89068604 -96.70562744]
[151.38003540 -85.98305511]
[159.05715942 -73.09656525]
[163.49244690 -58.76728439]
[164.43769836 -43.79710007]
[161.84002686 -29.02374268]
[155.84515381 -15.27458572]
[161.10162354 -22.82583809]
[168.45370483 -23.96274757]
[180.89314270 -32.34489059]
[193.33258057 -40.72703552]
[205.77201843 -49.10917664]
[210.23944092 -64.51766968]
[225.12599182 -70.49848938]
[239.01199341 -62.46364975]
[241.24528503 -46.57680130]
[230.11268616 -35.02497101]
[214.15415955 -36.66973877]
[201.71472168 -28.28759384]
[189.27528381 -19.90545082]
[176.83584595 -11.52330780]
[164.48426819 -3.01221728]
[154.73661804 8.38880348]
[148.10812378 21.84476852]
[141.47962952 35.30073547]
[134.85112000 48.75669861]
[134.71582031 56.19493484]
[127.94219971 62.42148590]
[121.03520203 75.73664093]
[129.41647339 87.12129974]
[132.09651184 101.00199127]
[128.55589294 114.68848419]
[119.48081207 125.52819061]
[125.54382324 139.24824524]
[131.60684204 152.96829224]
[137.83708191 146.92155457]
[146.96664429 143.27102661]
[158.09791565 143.03390503]
[170.02360535 146.90895081]
[182.80096436 154.76637268]
[199.19989014 154.68011475]
[207.23931885 168.97344971]
[198.64897156 182.94264221]
[182.26586914 182.21736145]
[174.94354248 167.54373169]
[162.16618347 159.68630981]
[155.58189392 163.27755737]
[163.02803040 176.29888916]
[170.47416687 189.32022095]
[183.03152466 197.52465820]
[182.43612671 212.51283264]
[169.26751709 219.69529724]
[156.34399414 212.08065796]
[156.24525452 197.08106995]
[149.32928467 183.77056885]
[142.41331482 170.46006775]
[135.82902527 174.05133057]
[135.51696777 189.04808044]
[135.20491028 204.04483032]
[134.89285278 219.04159546]
[134.58079529 234.03834534]
[134.26873779 249.03509521]
[133.95668030 264.03186035]
[133.64462280 279.02859497]
[133.33256531 294.02536011]
[133.02050781 309.02212524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 119]
[13 118]
[14 117]
[21 59]
[22 58]
[23 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[33 50]
[34 49]
[35 48]
[36 47]
[61 113]
[62 112]
[63 110]
[64 109]
[65 108]
[66 107]
[91 106]
[93 105]
[94 104]
[95 103]
[96 102]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
