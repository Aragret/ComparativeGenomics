%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCCxxxxxxxxxxUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.35763550 237.40994263]
[95.04557800 222.41319275]
[94.73352814 207.41642761]
[94.42147064 192.41967773]
[94.10941315 177.42292786]
[93.79735565 162.42617798]
[93.48529816 147.42942810]
[93.17324066 132.43266296]
[92.86119080 117.43591309]
[86.37302399 103.91172028]
[74.87121582 94.28319550]
[64.44238281 105.07359314]
[53.27033234 115.09250641]
[41.41200638 124.28887939]
[28.92782974 132.61585999]
[15.88141727 140.03100586]
[2.33925271 146.49653625]
[-11.62965488 151.97949219]
[-25.95412254 156.45195007]
[-40.56115723 159.89111328]
[-55.37631989 162.27944946]
[-70.32411957 163.60479736]
[-85.32838440 163.86041260]
[-100.31265259 163.04495239]
[-115.20056915 161.16261292]
[-129.91627502 158.22297668]
[-144.38476562 154.24101257]
[-158.53231812 149.23703003]
[-172.28683472 143.23649597]
[-185.57824707 136.27003479]
[-198.33880615 128.37310791]
[-210.50347900 119.58596039]
[-222.01029968 109.95339203]
[-232.80061340 99.52446747]
[-242.81944275 88.35234833]
[-252.01573181 76.49394989]
[-260.34262085 64.00970459]
[-267.75765991 50.96323776]
[-274.22308350 37.42102432]
[-279.70593262 23.45207596]
[-284.17828369 9.12757301]
[-287.61734009 -5.47948742]
[-290.00555420 -20.29467010]
[-291.33081055 -35.24248123]
[-291.58627319 -50.24674606]
[-290.77072144 -65.23101044]
[-288.88827515 -80.11891174]
[-285.94851685 -94.83458710]
[-281.96643066 -109.30304718]
[-276.96234131 -123.45056152]
[-270.96170044 -137.20504761]
[-263.99514771 -150.49639893]
[-256.09811401 -163.25689697]
[-247.31088257 -175.42150879]
[-237.67822266 -186.92825317]
[-227.24922180 -197.71849060]
[-216.07701111 -207.73722839]
[-204.21855164 -216.93342590]
[-191.73423767 -225.26020813]
[-178.68771362 -232.67515564]
[-165.14546204 -239.14047241]
[-151.17646790 -244.62322998]
[-136.85192871 -249.09545898]
[-122.24484253 -252.53439331]
[-107.42964172 -254.92251587]
[-92.48181915 -256.24761963]
[-77.47755432 -256.50299072]
[-62.49329376 -255.68733215]
[-47.60540771 -253.80476379]
[-32.88975525 -250.86489868]
[-18.42132378 -246.88270569]
[-4.27384424 -241.87849426]
[9.48059082 -235.87776184]
[22.77189064 -228.91108704]
[35.53232574 -221.01396179]
[47.69687271 -212.22663879]
[59.20354080 -202.59388733]
[69.99369812 -192.16481018]
[80.01235199 -180.99252319]
[89.20845795 -169.13398743]
[97.53514862 -156.64962769]
[104.94998932 -143.60304260]
[111.41520691 -130.06072998]
[116.89785004 -116.09169006]
[121.36997986 -101.76712036]
[124.80880737 -87.16001129]
[127.19680786 -72.34478760]
[128.52180481 -57.39696121]
[128.77706909 -42.39268875]
[127.96127319 -27.40843964]
[126.07859039 -12.52056694]
[123.13861084 2.19506383]
[119.15631866 16.66346359]
[114.15200043 30.81090355]
[108.15116119 44.56529236]
[101.18438721 57.85654068]
[93.28716278 70.61691284]
[84.49974823 82.78139496]
[96.00154877 92.40991974]
[98.45127106 84.52111053]
[106.34436798 78.37808228]
[118.33842468 76.87880707]
[131.75326538 82.02465820]
[146.65516663 83.73734283]
[161.55706787 85.45003510]
[176.45896912 87.16272736]
[191.36087036 88.87541199]
[201.96928406 81.46492767]
[214.38183594 83.23903656]
[221.98542786 92.69910431]
[236.84848022 94.72143555]
[251.71151733 96.74376678]
[266.57455444 98.76610565]
[279.00125122 89.00120544]
[294.68289185 90.96628571]
[304.31585693 103.49550629]
[302.18508911 119.15550232]
[289.55471802 128.65547180]
[273.91812134 126.35925293]
[264.55224609 113.62915039]
[249.68917847 111.60681915]
[234.82614136 109.58448029]
[219.96308899 107.56214905]
[204.14064026 115.08875275]
[189.64817810 103.77731323]
[174.74627686 102.06462860]
[159.84437561 100.35193634]
[144.94247437 98.63924408]
[130.04057312 96.92655945]
[124.49491119 101.97588348]
[136.75144958 110.62326050]
[149.00799561 119.27063751]
[162.54833984 125.72502899]
[167.58883667 139.85278320]
[161.19190979 153.42036438]
[147.08564758 158.52070618]
[133.49105835 152.18135071]
[128.33096313 138.09709167]
[120.86727905 125.08581543]
[113.40359497 112.07453156]
[107.85794067 117.12385559]
[108.16999817 132.12060547]
[108.48205566 147.11737061]
[108.79411316 162.11412048]
[109.10616302 177.11087036]
[109.41822052 192.10762024]
[109.73027802 207.10438538]
[110.04233551 222.10113525]
[110.35439301 237.09788513]
[112.94538879 256.30560303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 99]
[11 98]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
