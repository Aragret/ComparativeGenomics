%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUAxxxxxxxxxxAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[58.71246338 613.28417969]
[58.71246338 598.28417969]
[58.71246338 583.28417969]
[58.71246338 568.28417969]
[58.71246338 553.28417969]
[58.71246338 538.28417969]
[58.71246338 523.28417969]
[58.71246338 508.28417969]
[58.71246338 493.28417969]
[58.71246338 478.28417969]
[43.17589951 473.53051758]
[29.83851814 464.21926880]
[19.99917984 451.24328613]
[14.62036133 435.85296631]
[14.23401356 419.53579712]
[18.88897705 403.87258911]
[28.14514351 390.38427734]
[41.11503983 380.38424683]
[56.54891586 374.85052490]
[55.92493820 359.86349487]
[55.30096054 344.87649536]
[54.67698288 329.88946533]
[41.89962387 322.03204346]
[28.24338341 328.23745728]
[14.58714199 334.44284058]
[5.49480820 348.09060669]
[-10.85111237 346.77041626]
[-17.63533783 331.84039307]
[-7.87883902 318.65924072]
[8.38173485 320.78662109]
[22.03797722 314.58120728]
[35.69421768 308.37579346]
[34.74753952 296.54605103]
[38.07455063 285.59487915]
[44.92000961 276.95458984]
[54.09155655 271.63717651]
[64.15756226 270.11889648]
[67.25588226 255.44235229]
[70.35420227 240.76583862]
[73.45252991 226.08930969]
[76.09139252 211.32325745]
[78.26822662 196.48204041]
[80.44506836 181.64083862]
[82.62190247 166.79963684]
[84.79873657 151.95843506]
[86.97557831 137.11721802]
[89.15241241 122.27601624]
[76.75682831 108.58172607]
[77.27916718 90.11794281]
[65.98016357 80.25222015]
[54.68115997 70.38649750]
[43.38215637 60.52077103]
[27.34303093 60.16578293]
[17.73534584 47.31774902]
[21.92929649 31.83258438]
[36.70764160 25.58918190]
[50.73369980 33.37694550]
[53.24787903 49.22176743]
[64.54688263 59.08749008]
[75.84588623 68.95321655]
[87.14488983 78.81893921]
[92.59668732 72.43171692]
[100.67138672 67.69372559]
[104.07436371 53.08483505]
[95.98958588 39.77039719]
[99.64880371 25.00337982]
[112.39190674 17.37783813]
[115.79488373 2.76894546]
[119.19786072 -11.83994675]
[105.81758881 -18.79833221]
[94.58871460 -28.86626053]
[86.21708679 -41.41085052]
[81.22896576 -55.64353943]
[79.93789673 -70.66964722]
[82.42504883 -85.54462433]
[88.53406525 -99.33341217]
[97.88093567 -111.16924286]
[109.87810516 -120.30809784]
[123.77143097 -126.17550659]
[138.68754578 -128.40263367]
[153.68884277 -126.84948730]
[167.83229065 -121.61369324]
[180.22883606 -113.02438354]
[190.09924316 -101.62148285]
[196.82301331 -88.12178802]
[199.97750854 -73.37390900]
[199.36442566 -58.30490494]
[195.02230835 -43.86202240]
[187.22410583 -30.95315742]
[176.46000671 -20.38977051]
[163.40667725 -12.83588696]
[148.88462830 -8.76634789]
[133.80674744 -8.43696880]
[130.40377808 6.17192316]
[127.00080109 20.78081512]
[135.06245422 33.25259399]
[131.81945801 48.11656570]
[118.68325043 56.48781204]
[115.28027344 71.09670258]
[126.57927704 80.96242523]
[140.59599304 75.62091827]
[154.61270142 70.27940369]
[164.53862000 57.22534943]
[180.77035522 59.56254959]
[186.61010742 74.88669586]
[176.05043030 87.43361664]
[159.95422363 84.29611206]
[145.93750000 89.63762665]
[131.92079163 94.97914124]
[123.12478638 116.73509979]
[103.99362183 124.45285797]
[101.81678009 139.29406738]
[99.63994598 154.13526917]
[97.46310425 168.97647095]
[95.28627014 183.81767273]
[93.10943604 198.65888977]
[90.93259430 213.50009155]
[92.91487885 218.46900940]
[92.76364136 223.21553040]
[90.93325806 226.95068359]
[88.12905121 229.18763733]
[85.03073120 243.86415100]
[81.93241119 258.54067993]
[78.83409119 273.21719360]
[94.15285492 290.27078247]
[91.20403290 314.58706665]
[69.66400146 329.26547241]
[70.28797913 344.25250244]
[70.91194916 359.23953247]
[71.53592682 374.22653198]
[84.98106384 377.46438599]
[97.10896301 384.08374023]
[107.08693695 393.62249756]
[114.23190308 405.41842651]
[118.05711365 418.65509033]
[118.30532837 432.41836548]
[114.96611023 445.75952148]
[108.27605438 457.76071167]
[98.70208740 467.59799194]
[86.90881348 474.59805298]
[73.71246338 478.28417969]
[73.71246338 493.28417969]
[73.71246338 508.28417969]
[73.71246338 523.28417969]
[73.71246338 538.28417969]
[73.71246338 553.28417969]
[73.71246338 568.28417969]
[73.71246338 583.28417969]
[73.71246338 598.28417969]
[73.71246338 613.28417969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 130]
[20 129]
[21 128]
[22 127]
[23 32]
[24 31]
[25 30]
[37 124]
[38 123]
[39 122]
[40 121]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[49 61]
[50 60]
[51 59]
[52 58]
[63 99]
[64 98]
[67 95]
[68 94]
[69 93]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
