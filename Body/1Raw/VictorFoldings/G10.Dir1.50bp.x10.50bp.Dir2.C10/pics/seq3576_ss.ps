%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-0.25429803 299.47164917]
[-7.43680668 312.64025879]
[-14.61931610 325.80883789]
[-21.80182457 338.97741699]
[-28.98433304 352.14599609]
[-36.16684341 365.31457520]
[-43.34934998 378.48315430]
[-50.53186035 391.65173340]
[-57.71437073 404.82031250]
[-64.89688110 417.98889160]
[-67.17308044 434.78936768]
[-83.94707489 437.25296021]
[-90.95788574 421.81646729]
[-78.06546021 410.80639648]
[-70.88294983 397.63781738]
[-63.70044327 384.46923828]
[-56.51793289 371.30065918]
[-49.33542633 358.13208008]
[-42.15291595 344.96347046]
[-34.97040558 331.79489136]
[-27.78789902 318.62631226]
[-20.60538864 305.45773315]
[-13.42288017 292.28915405]
[-33.63716125 278.83227539]
[-52.27024841 263.25942993]
[-69.10167694 245.75491333]
[-83.93228912 226.52581787]
[-96.58661652 205.79966736]
[-106.91493225 183.82170105]
[-114.79503632 160.85195923]
[-120.13368225 137.16221619]
[-122.86770630 113.03276825]
[-122.96476746 88.74912262]
[-120.42370605 64.59858704]
[-115.27458954 40.86692810]
[-129.59718323 36.41011429]
[-143.91978455 31.95329666]
[-158.28796387 27.64571381]
[-172.70018005 23.48782539]
[-187.11239624 19.32993889]
[-199.27226257 28.96929741]
[-214.77705383 29.58667374]
[-227.66485596 20.94467163]
[-232.98005676 6.36632013]
[-228.67883301 -8.54270935]
[-216.41511536 -18.04959106]
[-200.90454102 -18.49873161]
[-188.11125183 -9.71743202]
[-182.95451355 4.91772223]
[-168.54229736 9.07560921]
[-154.13008118 13.23349667]
[-146.78405762 12.05812454]
[-139.46296692 17.63070107]
[-125.14037323 22.08751678]
[-110.81777191 26.54433250]
[-106.33973694 14.77217960]
[-101.20494080 3.27130079]
[-95.42971802 -7.92169809]
[-89.03246307 -18.77119064]
[-82.03353882 -29.24264336]
[-74.45520782 -39.30272675]
[-66.32160187 -48.91942215]
[-57.65860367 -58.06211853]
[-48.49379349 -66.70171356]
[-38.85634232 -74.81071472]
[-28.77691841 -82.36330414]
[-18.28760910 -89.33544159]
[-7.42180014 -95.70494843]
[3.78592443 -101.45153046]
[15.29989052 -106.55691528]
[27.08345032 -111.00484467]
[39.09909821 -114.78116608]
[51.30858994 -117.87385559]
[63.67306137 -120.27306366]
[76.15316010 -121.97116089]
[88.70915985 -122.96274567]
[101.30109406 -123.24465179]
[113.88889313 -122.81599426]
[126.43247986 -121.67813110]
[138.89193726 -119.83467865]
[151.22760010 -117.29151154]
[163.40022278 -114.05672455]
[175.37103271 -110.14060974]
[187.10194397 -105.55563354]
[198.55561829 -100.31639099]
[209.69560242 -94.43955994]
[220.48643494 -87.94384003]
[230.89376831 -80.84991455]
[240.88447571 -73.18035126]
[250.42675781 -64.95957184]
[259.49023438 -56.21373749]
[268.04608154 -46.97069168]
[276.06704712 -37.25984573]
[283.52758789 -27.11211205]
[296.13873291 -35.23365402]
[308.74984741 -43.35519791]
[321.36099243 -51.47673798]
[328.37646484 -66.29953003]
[344.74093628 -67.36547089]
[353.62002563 -53.57802200]
[345.87969971 -39.12052155]
[329.48251343 -38.86561203]
[316.87139893 -30.74406815]
[304.26028442 -22.62252617]
[291.64913940 -14.50098419]
[297.63177490 -3.83423686]
[303.02130127 7.14412117]
[307.80157471 18.40114212]
[311.95822144 29.90304756]
[315.47875977 41.61531448]
[318.35266113 53.50279617]
[320.57125854 65.52981567]
[322.12789917 77.66028595]
[323.01794434 89.85779572]
[323.23870850 102.08574677]
[322.78952026 114.30743408]
[321.67172241 126.48618317]
[319.88867188 138.58544922]
[317.44573975 150.56892395]
[314.35025024 162.40063477]
[310.61148071 174.04507446]
[306.24066162 185.46730042]
[301.25088501 196.63304138]
[295.65716553 207.50878906]
[289.47628784 218.06188965]
[282.72674561 228.26068115]
[275.42886353 238.07455444]
[267.60449219 247.47406006]
[259.27716064 256.43099976]
[250.47180176 264.91848755]
[241.21488953 272.91104126]
[231.53417969 280.38467407]
[221.45872498 287.31695557]
[211.01876831 293.68713379]
[200.24565125 299.47601318]
[189.17167664 304.66625977]
[177.83010864 309.24230957]
[166.25495911 313.19039917]
[154.48098755 316.49871826]
[142.54350281 319.15728760]
[130.47834778 321.15817261]
[118.32173157 322.49536133]
[106.11013031 323.16482544]
[93.88018799 323.16455078]
[81.66861725 322.49456787]
[69.51205444 321.15686035]
[57.44698715 319.15545654]
[45.50962448 316.49633789]
[33.73579025 313.18753052]
[22.16081810 309.23892212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[35 55]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
