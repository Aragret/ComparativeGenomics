%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAxxxxxxxxxxCUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 258.52212524]
[92.50000000 243.52214050]
[92.50000000 228.52214050]
[92.50000000 213.52214050]
[92.50000000 198.52214050]
[92.50000000 183.52214050]
[92.50000000 168.52214050]
[92.50000000 153.52214050]
[92.50000000 138.52214050]
[92.50000000 123.52214050]
[78.23415375 118.88688660]
[69.41737366 131.02214050]
[60.60059357 143.15739441]
[59.42547226 159.51438904]
[44.55619812 166.43080139]
[31.28900909 156.79162598]
[33.27205276 140.51281738]
[48.46533966 134.34060669]
[57.28211975 122.20536041]
[66.09889984 110.07010651]
[66.55486298 95.07703400]
[58.49180984 82.42843628]
[50.42875290 69.77983093]
[42.36569977 57.13122940]
[27.57361984 60.35918808]
[12.59777164 58.33533859]
[-0.75694221 51.32307434]
[-10.88766670 40.18581772]
[-16.58596611 26.28075218]
[-17.18194962 11.29344749]
[-12.62297535 -2.96645641]
[-3.47766519 -14.78375721]
[-11.54071999 -27.43235970]
[-19.60377502 -40.08096313]
[-33.54627991 -47.55873489]
[-33.86325836 -62.44996643]
[-41.92631149 -75.09857178]
[-49.98936844 -87.74716949]
[-63.53392029 -81.25852966]
[-77.76184845 -76.44985962]
[-92.46567535 -73.39127350]
[-107.43096924 -72.12738037]
[-122.43948364 -72.67662048]
[-137.27236938 -75.03096771]
[-151.71330261 -79.15609741]
[-165.55171204 -84.99185944]
[-178.58576965 -92.45314026]
[-190.62539673 -101.43113708]
[-201.49505615 -111.79492188]
[-211.03620911 -123.39336395]
[-219.10971069 -136.05731201]
[-225.59783936 -149.60211182]
[-230.40599060 -163.83023071]
[-233.46401978 -178.53416443]
[-234.72735596 -193.49949646]
[-234.17755127 -208.50799561]
[-231.82264709 -223.34078979]
[-227.69697571 -237.78157043]
[-221.86070251 -251.61975098]
[-214.39894104 -264.65353394]
[-205.42048645 -276.69284058]
[-195.05630493 -287.56210327]
[-183.45750427 -297.10281372]
[-170.79324341 -305.17584229]
[-157.24819946 -311.66348267]
[-143.01991272 -316.47109985]
[-128.31585693 -319.52856445]
[-113.35047913 -320.79135132]
[-98.34199524 -320.24099731]
[-83.50929260 -317.88552856]
[-69.06866455 -313.75930786]
[-55.23070145 -307.92251587]
[-42.19720078 -300.46026611]
[-30.15823174 -291.48138428]
[-19.28935623 -281.11679077]
[-9.74907494 -269.51760864]
[-1.67651331 -256.85305786]
[4.81060743 -243.30778503]
[9.61768627 -229.07931519]
[12.67462063 -214.37515259]
[13.93683243 -199.40971375]
[13.38591480 -184.40126038]
[11.02990055 -169.56863403]
[6.90314865 -155.12815857]
[1.06583917 -141.29042053]
[-6.39690351 -128.25720215]
[-15.37624931 -116.21856689]
[-25.74125481 -105.35007477]
[-37.34076691 -95.81022644]
[-29.27771187 -83.16162872]
[-21.21465683 -70.51302338]
[-7.84887409 -63.93996048]
[-6.95517302 -48.14401627]
[1.10788214 -35.49541473]
[9.17093754 -22.84681129]
[23.74416733 -26.14927673]
[38.59579849 -24.26297569]
[51.93090439 -17.39642906]
[62.13118362 -6.36122179]
[67.95135498 7.52386570]
[68.67116547 22.59045410]
[64.18444824 37.02102661]
[55.01430130 49.06817245]
[63.07735825 61.71677780]
[71.14041138 74.36537933]
[79.20346832 87.01398468]
[84.48558807 78.79349518]
[93.04760742 72.84237671]
[103.87299347 70.46170807]
[115.43904877 72.48702240]
[125.93097687 79.09762573]
[133.52453613 89.72351837]
[148.24732971 92.59394073]
[152.42236328 90.97879028]
[156.47882080 90.82888794]
[159.96060181 91.91966248]
[162.53506470 93.89888000]
[164.02459717 96.33947754]
[178.46656799 100.39279175]
[192.90853882 104.44610596]
[207.35050964 108.49942017]
[224.23425293 106.95808411]
[230.38923645 122.75531006]
[216.91323853 133.04286194]
[203.29719543 122.94139862]
[188.85522461 118.88807678]
[174.41325378 114.83476257]
[159.97128296 110.78144836]
[145.37690735 107.31673431]
[130.65411377 104.44631195]
[124.86557770 109.21526337]
[136.40989685 118.79278564]
[147.95420837 128.37030029]
[159.49851990 137.94781494]
[173.13803101 144.18991089]
[179.89349365 157.58258057]
[176.80688477 172.26158142]
[165.22973633 181.79937744]
[150.23135376 182.01966858]
[138.37908936 172.82597351]
[134.86267090 158.24440002]
[127.67129517 145.08065796]
[120.47991180 131.91691589]
[113.28852844 118.75318146]
[107.50000000 123.52214050]
[107.50000000 138.52214050]
[107.50000000 153.52214050]
[107.50000000 168.52214050]
[107.50000000 183.52214050]
[107.50000000 198.52214050]
[107.50000000 213.52214050]
[107.50000000 228.52214050]
[107.50000000 243.52214050]
[107.50000000 258.52212524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 20]
[12 19]
[13 18]
[21 106]
[22 105]
[23 104]
[24 103]
[32 95]
[33 94]
[34 93]
[36 91]
[37 90]
[38 89]
[112 130]
[113 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
