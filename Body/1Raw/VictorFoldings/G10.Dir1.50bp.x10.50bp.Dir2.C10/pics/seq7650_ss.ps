%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.03896332 158.62701416]
[24.14658546 167.76875305]
[12.25420475 176.91049194]
[0.55458146 186.29765320]
[-10.94722176 195.92617798]
[-22.44902611 205.55470276]
[-33.95082855 215.18322754]
[-45.45263290 224.81175232]
[-56.95443726 234.44027710]
[-68.45623779 244.06880188]
[-79.95804596 253.69732666]
[-74.08801270 267.62695312]
[-72.58625793 282.66809082]
[-75.58631134 297.48333740]
[-82.82140350 310.75527954]
[-93.64820862 321.30383301]
[-107.10399628 328.19100952]
[-121.99230194 330.80438232]
[-136.98925781 328.91159058]
[-150.76135254 322.68096924]
[-162.08398438 312.66650391]
[-169.95033264 299.75866699]
[-173.66094971 285.10525513]
[-172.88587952 270.00921631]
[-167.69404602 255.81286621]
[-158.54708862 243.77854919]
[-146.25836182 234.97636414]
[-131.92057800 230.18896484]
[-116.80862427 229.84205627]
[-102.26625061 233.96649170]
[-89.58657074 242.19552612]
[-78.08476257 232.56700134]
[-66.58296204 222.93847656]
[-55.08115768 213.30995178]
[-43.57935333 203.68142700]
[-32.07755280 194.05290222]
[-20.57574844 184.42437744]
[-9.07394505 174.79585266]
[-7.76705170 170.14100647]
[-3.48351574 166.28320312]
[3.11247087 165.01811218]
[15.00485039 155.87637329]
[26.89723015 146.73463440]
[22.41335869 138.83883667]
[18.77922440 130.51765442]
[16.03462791 121.86224365]
[14.20962715 112.96739960]
[13.32421112 103.93053436]
[13.38807583 94.85062408]
[14.40052223 85.82710266]
[16.35046196 76.95880890]
[19.21654129 68.34286499]
[22.96736717 60.07363129]
[27.56186104 52.24167633]
[32.94970322 44.93277359]
[39.07188797 38.22697449]
[45.86136246 32.19771576]
[53.24377060 26.91103745]
[61.13825607 22.42483330]
[69.45835876 18.78824234]
[78.11295319 16.04108810]
[87.00726318 14.21346092]
[96.04386902 13.32537556]
[105.12379456 13.38655853]
[107.30063629 -1.45464683]
[109.47747040 -16.29585266]
[111.65431213 -31.13705826]
[113.83114624 -45.97826385]
[116.00798035 -60.81946945]
[102.35631561 -67.30972290]
[91.22531891 -77.53676605]
[83.60475159 -90.59120178]
[80.17222595 -105.31224823]
[81.23296356 -120.39091492]
[86.69264221 -134.48641968]
[96.06579590 -146.34539795]
[108.51896667 -154.91336060]
[122.94482422 -159.42845154]
[138.06063843 -159.48919678]
[152.52230835 -155.09016418]
[165.04393005 -146.62255859]
[174.51206970 -134.83927917]
[180.08483887 -120.78810120]
[181.26672363 -105.71844482]
[177.95260620 -90.97029114]
[170.43717957 -77.85503387]
[159.38871765 -67.53887939]
[145.78965759 -60.93913269]
[130.84918213 -58.64263153]
[128.67234802 -43.80142593]
[126.49551392 -28.96022034]
[124.31867981 -14.11901569]
[122.14183807 0.72219014]
[119.96500397 15.56339550]
[152.23718262 30.72217178]
[175.68804932 57.57994080]
[186.35740662 91.60121918]
[201.35659790 91.44518280]
[215.07553101 83.56474304]
[227.88259888 91.16923523]
[242.88179016 91.01319122]
[248.85057068 87.93402100]
[254.60214233 88.32218170]
[258.50506592 91.17572021]
[273.49777222 91.64376831]
[288.49044800 92.11180878]
[303.48315430 92.57984924]
[318.47586060 93.04788971]
[333.46853638 93.51593781]
[342.12518311 80.74620056]
[356.32040405 74.70476532]
[371.52459717 77.31943512]
[382.88610840 87.75587463]
[386.77957153 102.68385315]
[381.96255493 117.33990479]
[369.97219849 127.04734802]
[354.63452148 128.70855713]
[340.84378052 121.79345703]
[333.00048828 108.50862885]
[318.00781250 108.04058838]
[303.01510620 107.57254791]
[288.02239990 107.10450745]
[273.02972412 106.63645935]
[258.03701782 106.16841888]
[243.03782654 106.01238251]
[228.03863525 106.16841888]
[215.39254761 114.03769684]
[201.51263428 106.44436646]
[186.51344299 106.60040283]
[185.40669250 115.29175568]
[183.42904663 123.82717896]
[180.60069275 132.11962891]
[176.95043945 140.08456421]
[172.51551819 147.64076233]
[167.34115601 154.71115112]
[161.48011780 161.22366333]
[154.99217224 167.11186218]
[147.94346619 172.31573486]
[140.40588379 176.78219604]
[132.45628357 180.46571350]
[124.17572021 183.32872009]
[115.64863586 185.34202576]
[106.96199036 186.48509216]
[98.20434570 186.74627686]
[89.46501923 186.12290955]
[80.83311462 184.62133789]
[72.39665222 182.25689697]
[64.24166107 179.05366516]
[56.45130157 175.04434204]
[49.10500717 170.26977539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[97 129]
[98 128]
[100 126]
[101 125]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
