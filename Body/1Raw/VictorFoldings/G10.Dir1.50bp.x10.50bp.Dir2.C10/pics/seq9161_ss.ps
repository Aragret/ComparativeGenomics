%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUxxxxxxxxxxAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.60931396 295.61627197]
[88.60931396 280.61627197]
[88.60931396 265.61627197]
[88.60931396 250.61627197]
[88.60931396 235.61627197]
[88.60931396 220.61627197]
[88.60931396 205.61627197]
[88.60931396 190.61627197]
[88.60931396 175.61627197]
[88.60931396 160.61627197]
[66.88343048 117.01417542]
[88.40941620 94.60205078]
[76.51703644 85.46031952]
[69.23289490 90.42450714]
[61.03812790 93.61586761]
[52.35593796 94.87952423]
[43.63250351 94.15990448]
[35.31400299 91.50310516]
[27.82382011 87.05408478]
[21.54098129 81.04873657]
[16.78098869 73.80145264]
[2.36877346 77.95934296]
[-12.04344273 82.11723328]
[-26.45565796 86.27511597]
[-31.38473701 90.83710480]
[-37.03092957 91.99977875]
[-41.55438232 90.29276276]
[-56.12708282 93.84752655]
[-70.69978333 97.40229034]
[-80.22757721 110.30967712]
[-96.26419067 110.76416779]
[-106.50771332 98.41710663]
[-103.10018158 82.74010468]
[-88.65557098 75.75922394]
[-74.25454712 82.82958221]
[-59.68184662 79.27482605]
[-45.10914230 75.72006226]
[-30.61354637 71.86289978]
[-16.20133018 67.70501709]
[-1.78911388 63.54712677]
[12.62310219 59.38924026]
[14.02459526 45.46580124]
[20.33870316 32.97747040]
[30.72086334 23.59466553]
[25.52544785 9.52314568]
[20.33003235 -4.54837370]
[15.13461685 -18.61989403]
[9.93920135 -32.69141388]
[5.81966162 -36.10447311]
[3.67963219 -40.34388733]
[3.49801445 -44.49945068]
[4.88872194 -47.80602264]
[0.58113748 -62.17420578]
[-3.72644711 -76.54238892]
[-10.49456215 -89.92867279]
[-19.51209259 -101.91551208]
[-28.52962112 -113.90234375]
[-44.14953995 -117.56262970]
[-50.89620972 -132.11811829]
[-43.59416962 -146.40306091]
[-27.84491348 -149.45928955]
[-15.72992706 -138.94232178]
[-16.54278946 -122.91986847]
[-7.52525902 -110.93303680]
[1.49227071 -98.94620514]
[0.20974025 -113.89127350]
[3.76052427 -128.46495056]
[11.77378082 -141.14515686]
[23.41261101 -150.60758972]
[37.46146011 -155.86399841]
[52.45307922 -156.36540222]
[66.82174683 -152.05943298]
[79.06681061 -143.39581299]
[87.90940857 -131.27935791]
[92.42601776 -116.97550201]
[92.14492798 -101.97813416]
[87.09549713 -87.85356903]
[77.80508423 -76.07697296]
[65.24397278 -67.87828064]
[50.72404480 -64.11376190]
[35.76174545 -65.17658234]
[21.91972923 -70.95573425]
[10.64173698 -80.84997559]
[14.94932175 -66.48178864]
[19.25690651 -52.11360550]
[24.01072121 -37.88682938]
[29.20613670 -23.81530952]
[34.40155029 -9.74378967]
[39.59696579 4.32773018]
[44.79238510 18.39925003]
[65.39878082 20.64952278]
[81.90232086 33.35417938]
[89.41947937 52.88300323]
[85.65876770 73.56793976]
[97.55114746 82.70967102]
[112.53086090 83.48951721]
[125.30821991 75.63209534]
[138.08557129 67.77466583]
[148.41047668 54.32726288]
[164.19058228 60.52605820]
[162.60240173 77.40545654]
[145.94300842 80.55202484]
[133.16564941 88.40944672]
[120.38829041 96.26687622]
[122.08977509 103.57131958]
[127.19424438 125.48465729]
[142.12855530 126.88696289]
[157.06286621 128.28926086]
[171.99716187 129.69157410]
[186.93147278 131.09387207]
[195.75521851 118.52259827]
[209.68920898 112.06198120]
[224.98526001 113.44989777]
[237.52882385 122.31300354]
[243.94573975 136.26716614]
[242.50987244 151.55880737]
[233.60749817 164.07450867]
[219.63328552 170.44766235]
[204.34622192 168.96388245]
[191.85847473 160.02230835]
[185.52917480 146.02818298]
[170.59486389 144.62588501]
[155.66055298 143.22357178]
[140.72624207 141.82127380]
[125.79193878 140.41896057]
[120.24628448 145.46829224]
[132.68006897 153.85882568]
[145.11386108 162.24934387]
[157.54765320 170.63987732]
[171.70512390 175.59628296]
[180.70745850 187.59452820]
[181.50733948 202.57318115]
[173.83401489 215.46194458]
[160.28491211 221.89793396]
[145.44644165 219.70254517]
[134.34144592 209.61894226]
[130.72911072 195.05815125]
[123.53773499 181.89442444]
[116.34635162 168.73068237]
[109.15496826 155.56694031]
[103.60931396 160.61627197]
[103.60931396 175.61627197]
[103.60931396 190.61627197]
[103.60931396 205.61627197]
[103.60931396 220.61627197]
[103.60931396 235.61627197]
[103.60931396 250.61627197]
[103.60931396 265.61627197]
[103.60931396 280.61627197]
[103.60931396 295.61627197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 95]
[13 94]
[21 41]
[22 40]
[23 39]
[24 38]
[27 37]
[28 36]
[29 35]
[44 90]
[45 89]
[46 88]
[47 87]
[48 86]
[52 85]
[53 84]
[54 83]
[55 65]
[56 64]
[57 63]
[96 104]
[97 103]
[98 102]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
