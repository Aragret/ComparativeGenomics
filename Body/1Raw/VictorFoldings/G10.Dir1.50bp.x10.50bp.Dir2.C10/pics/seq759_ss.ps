%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCxxxxxxxxxxGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.97611237 127.12643433]
[82.47431183 136.75495911]
[70.97251129 146.38348389]
[59.47070694 156.01200867]
[47.96890259 165.64054871]
[36.46709824 175.26907349]
[25.69629097 185.70887756]
[15.71356392 196.90464783]
[5.73083735 208.10041809]
[-4.25188875 219.29617310]
[2.39030385 232.96913147]
[3.28948593 248.14344788]
[-1.69146144 262.50515747]
[-11.79298019 273.86419678]
[-25.47466087 280.48840332]
[-40.65014648 281.36761475]
[-55.00529099 276.36776733]
[-66.35102844 266.25134277]
[-72.95722961 252.56094360]
[-73.81648254 237.38432312]
[-68.79776764 223.03576660]
[-58.66640091 211.70333862]
[-44.96733856 205.11515808]
[-29.78959274 204.27586365]
[-15.44765472 209.31344604]
[-5.46492815 198.11769104]
[4.51779795 186.92192078]
[14.50052452 175.72615051]
[-0.49235317 176.18833923]
[-12.38220596 167.04331970]
[-15.78281498 152.43388367]
[-9.15367031 138.97822571]
[4.50216055 132.77192688]
[18.99845314 136.62646484]
[27.76824379 148.79571533]
[26.83857346 163.76725769]
[38.34037781 154.13873291]
[49.84217834 144.51020813]
[61.34398270 134.88168335]
[72.84578705 125.25315857]
[84.34758759 115.62463379]
[82.01648712 100.80687714]
[68.11392975 95.17491913]
[54.21137238 89.54296112]
[38.93673325 94.44856262]
[25.65812302 85.44534302]
[24.56175232 69.43979645]
[36.48866653 58.71001053]
[52.28955460 61.48696136]
[59.84333038 75.64040375]
[73.74588776 81.27236176]
[87.64844513 86.90431976]
[92.46270752 81.15341949]
[106.90549469 63.90071106]
[98.91558075 51.20578384]
[90.92565918 38.51085281]
[82.93574524 25.81592369]
[67.50844574 25.77285767]
[54.56587601 17.37681770]
[48.23796844 3.30695081]
[50.54393768 -11.94709969]
[60.74795151 -23.51782227]
[75.59394836 -27.71304131]
[90.34462738 -23.19407654]
[100.29309845 -11.40291595]
[102.26483917 3.89792681]
[95.63067627 17.82600784]
[103.62059021 30.52093697]
[111.61051178 43.21586609]
[119.60042572 55.91079712]
[118.67488861 40.93937683]
[117.74935150 25.96795845]
[109.82213593 13.23378181]
[107.42361450 -1.57321286]
[110.92543030 -16.15872765]
[119.78499603 -28.26278305]
[132.62954712 -36.00988770]
[147.46884155 -38.19965744]
[162.00360107 -34.49279022]
[173.98168945 -25.46365738]
[181.54714966 -12.51129055]
[183.52774048 2.35737705]
[179.61656189 16.83849144]
[170.41964722 28.68824959]
[157.36553955 36.06941223]
[149.38418579 48.76972580]
[141.40283203 61.47003937]
[154.49598694 54.15093231]
[167.58914185 46.83182526]
[180.68229675 39.51272202]
[193.77545166 32.19361496]
[179.22204590 28.56066513]
[169.46105957 17.17105865]
[168.09898376 2.23302841]
[175.63906860 -10.73412037]
[189.29542542 -16.93928528]
[204.02227783 -14.08978081]
[214.37835693 -3.23844218]
[216.53730774 11.60537720]
[209.70204163 24.95656013]
[223.82684326 19.90780258]
[237.95164490 14.85904694]
[246.08764648 1.03207803]
[261.99035645 -1.08517408]
[273.46063232 10.13146496]
[271.69940186 26.07755089]
[258.05773926 34.52061081]
[243.00039673 28.98385048]
[228.87559509 34.03260803]
[214.75079346 39.08136368]
[201.09455872 45.28676987]
[188.00140381 52.60587692]
[174.90824890 59.92498016]
[161.81509399 67.24408722]
[148.72193909 74.56319427]
[163.03143311 70.06449127]
[177.85009766 67.73913574]
[192.84976196 67.63863373]
[207.69824219 69.76520538]
[222.06674194 74.07175446]
[235.63703918 80.46292114]
[248.10862732 88.79715729]
[259.20532227 98.88990784]
[268.68136597 110.51766205]
[276.32690430 123.42291260]
[281.97265625 137.31987000]
[285.49356079 151.90080261]
[286.81167603 166.84277344]
[285.89776611 181.81491089]
[282.77212524 196.48564148]
[277.50393677 210.53007507]
[270.20986938 223.63719177]
[261.05148315 235.51673889]
[250.23155212 245.90563965]
[237.98970032 254.57382202]
[224.59704590 261.32931519]
[210.35015869 266.02252197]
[195.56454468 268.54953003]
[180.56764221 268.85437012]
[165.69157410 266.93026733]
[151.26574707 262.81982422]
[137.60963440 256.61413574]
[125.02568054 248.45054626]
[113.79253387 238.50990295]
[104.15897369 227.01231384]
[96.33833313 214.21240234]
[90.50380707 200.39364624]
[86.78459930 185.86204529]
[85.26306915 170.93940735]
[85.97292328 155.95620728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 37]
[6 36]
[7 28]
[8 27]
[9 26]
[10 25]
[42 52]
[43 51]
[44 50]
[54 70]
[55 69]
[56 68]
[57 67]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
