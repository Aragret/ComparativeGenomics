%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUCACCxxxxxxxxxxCCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.37020111 238.01373291]
[95.05814362 223.01698303]
[94.74608612 208.02023315]
[94.43403625 193.02348328]
[94.12197876 178.02671814]
[93.80992126 163.02996826]
[93.49786377 148.03321838]
[93.18580627 133.03646851]
[92.87374878 118.03971100]
[80.98136902 108.89797974]
[66.40866852 112.45273590]
[51.83596420 116.00749969]
[37.34037018 119.86466217]
[22.92815399 124.02254486]
[15.49272442 129.44160461]
[8.17273712 128.11366272]
[-6.32285976 131.97082520]
[-20.81845665 135.82798767]
[-32.16497040 146.85372925]
[-46.45386505 142.64935303]
[-60.94946289 146.50651550]
[-65.97238159 150.96496582]
[-71.64154053 152.00993347]
[-76.12850189 150.20918274]
[-90.77200317 153.46000671]
[-105.41550446 156.71083069]
[-120.05900574 159.96166992]
[-124.59668732 174.63493347]
[-135.87396240 185.06175232]
[-150.85733032 188.43733215]
[-165.51631165 183.85368347]
[-175.90771484 172.54377747]
[-179.23632812 157.54991150]
[-174.60675049 142.90536499]
[-163.26431274 132.54945374]
[-148.26008606 129.26786804]
[-133.63012695 133.94332886]
[-123.30982971 145.31816101]
[-108.66632843 142.06733704]
[-94.02282715 138.81651306]
[-79.37932587 135.56568909]
[-64.80661774 132.01092529]
[-50.31102371 128.15376282]
[-40.00133133 117.40390015]
[-24.67561531 121.33238983]
[-10.18001938 117.47522736]
[4.31557751 113.61807251]
[18.77026558 109.61032867]
[33.18248367 105.45244598]
[36.25934982 101.72304535]
[41.73669815 99.92584229]
[48.28120422 101.43479919]
[62.85390854 97.88003540]
[77.42661285 94.32527161]
[85.84970856 85.56526947]
[96.15020752 83.28604889]
[104.46786499 86.63764954]
[114.45059204 75.44188690]
[124.43331909 64.24611664]
[133.69825745 52.44947815]
[142.20935059 40.09790421]
[150.72044373 27.74633217]
[159.23153687 15.39476013]
[167.61367798 2.95531940]
[175.86596680 -9.57064247]
[184.11825562 -22.09660530]
[172.75920105 -31.92650223]
[162.78042603 -43.15499878]
[154.35269165 -55.58995819]
[147.62019348 -69.01860046]
[142.69813538 -83.21115112]
[139.67074585 -97.92474365]
[138.58982849 -112.90762329]
[139.47387695 -127.90340424]
[142.30775452 -142.65548706]
[147.04298401 -156.91146851]
[153.59852600 -170.42736816]
[161.86222839 -182.97193909]
[171.69267273 -194.33053589]
[182.92163086 -204.30877686]
[195.35699463 -212.73591614]
[208.78596497 -219.46777344]
[222.97874451 -224.38916016]
[237.69248962 -227.41584778]
[252.67541504 -228.49604797]
[267.67114258 -227.61129761]
[282.42309570 -224.77671814]
[296.67883301 -220.04080200]
[310.19445801 -213.48460388]
[322.73861694 -205.22032166]
[334.09674072 -195.38934326]
[344.07446289 -184.15989685]
[352.50100708 -171.72413635]
[359.23223877 -158.29484558]
[364.15292358 -144.10183716]
[367.17892456 -129.38793945]
[368.25842285 -114.40496826]
[367.37292480 -99.40927124]
[364.53765869 -84.65744781]
[359.80105591 -70.40193176]
[353.24423218 -56.88664627]
[344.97933960 -44.34286118]
[335.14782715 -32.98521042]
[323.91790771 -23.00803947]
[311.48175049 -14.58207512]
[298.05212402 -7.85149384]
[283.85888672 -2.93146515]
[269.14486694 0.09382273]
[254.16181946 1.17260337]
[239.16616821 0.28641719]
[224.41448975 -2.54957175]
[210.15919495 -7.28683615]
[196.64422607 -13.84431553]
[188.39192200 -1.31835341]
[180.13963318 11.20760822]
[179.07926941 18.57111740]
[171.58311462 23.90584946]
[163.07202148 36.25742340]
[154.56092834 48.60899353]
[146.04983521 60.96056747]
[161.00045776 59.74438095]
[172.55580139 69.30857849]
[174.15528870 84.22306061]
[164.89079285 96.02005768]
[150.02227783 98.00178528]
[137.99139404 89.04310608]
[135.62907410 74.22884369]
[125.64635468 85.42460632]
[115.66362762 96.62037659]
[127.76673126 87.75950623]
[142.55767822 85.26393890]
[156.89805603 89.66320038]
[167.74505615 100.02381897]
[172.79711914 114.14744568]
[170.98225403 129.03724670]
[162.68554688 141.53384399]
[149.66744995 148.98564148]
[134.69020081 149.81147766]
[120.93174744 143.83612061]
[111.31141663 132.32746887]
[107.87050629 117.72765350]
[108.18256378 132.72441101]
[108.49462128 147.72116089]
[108.80667114 162.71791077]
[109.11872864 177.71467590]
[109.43078613 192.71142578]
[109.74284363 207.70817566]
[110.05490112 222.70492554]
[110.36695862 237.70169067]
[112.95795441 256.90939331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 54]
[11 53]
[12 52]
[13 49]
[14 48]
[16 47]
[17 46]
[18 45]
[20 43]
[21 42]
[24 41]
[25 40]
[26 39]
[27 38]
[57 129]
[58 128]
[59 127]
[60 120]
[61 119]
[62 118]
[63 117]
[64 115]
[65 114]
[66 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
