%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.85404205 344.16500854]
[121.85404205 329.16500854]
[121.85404205 314.16500854]
[121.85404205 299.16500854]
[121.85404205 284.16500854]
[121.85404205 269.16500854]
[121.85404205 254.16499329]
[121.85404205 239.16499329]
[121.85404205 224.16499329]
[121.85404205 209.16499329]
[119.09780121 194.42039490]
[113.67917633 180.43331909]
[108.26055145 166.44622803]
[97.29481506 161.24865723]
[92.68573761 149.58984375]
[97.42648315 137.55119324]
[92.29618073 123.45581055]
[83.39115906 135.52645874]
[69.73670959 141.73580933]
[54.78661728 140.51324463]
[42.32238388 132.16801453]
[35.49673843 118.81098175]
[36.03617477 103.82067871]
[43.80424881 90.98880768]
[56.83608627 83.56107330]
[71.83538818 83.41626740]
[85.00746918 90.59033203]
[71.83932495 81.82045746]
[72.93999481 66.96658325]
[66.11642456 53.60847855]
[59.29284668 40.25038147]
[52.33249283 26.96303940]
[45.23608780 13.74785614]
[38.13968658 0.53267348]
[31.04328156 -12.68250942]
[23.94687843 -25.89769173]
[16.85047531 -39.11287689]
[9.75407124 -52.32805634]
[-4.21124506 -46.80660248]
[-18.72314453 -42.94379425]
[-33.58536911 -40.79187012]
[-48.59692764 -40.37992859]
[-63.55479813 -41.71354675]
[-78.25669861 -44.77468872]
[-92.50380707 -49.52195358]
[-106.10343933 -55.89113998]
[-118.87168121 -63.79611206]
[-130.63584900 -73.12996674]
[-141.23684692 -83.76647186]
[-150.53132629 -95.56178284]
[-158.39356995 -108.35637665]
[-164.71725464 -121.97722626]
[-169.41687012 -136.24011230]
[-172.42883301 -150.95217896]
[-173.71244812 -165.91442871]
[-173.25032043 -180.92451477]
[-171.04872131 -195.77946472]
[-167.13742065 -210.27836609]
[-161.56930542 -224.22514343]
[-154.41969299 -237.43118286]
[-145.78526306 -249.71789551]
[-135.78277588 -260.91909790]
[-124.54753876 -270.88333130]
[-112.23146057 -279.47579956]
[-99.00111389 -286.58035278]
[-85.03543091 -292.10086060]
[-70.52327728 -295.96270752]
[-55.66090775 -298.11364746]
[-40.64932251 -298.52459717]
[-25.69153786 -297.18997192]
[-10.98983955 -294.12783813]
[3.25694847 -289.37963867]
[16.85615540 -283.00955200]
[29.62386703 -275.10369873]
[41.38741302 -265.76907349]
[51.98770905 -255.13186646]
[61.28139496 -243.33593750]
[69.14278412 -230.54081726]
[75.46556091 -216.91954041]
[80.16421509 -202.65634155]
[83.17520905 -187.94407654]
[84.45781708 -172.98175049]
[83.99468994 -157.97167969]
[81.79209900 -143.11688232]
[77.87982941 -128.61824036]
[72.31079102 -114.67182922]
[65.16029358 -101.46626282]
[56.52503967 -89.18013763]
[46.52181625 -77.97959900]
[35.28590393 -68.01612854]
[22.96925354 -59.42446136]
[30.06565857 -46.20927811]
[37.16205978 -32.99409485]
[44.25846481 -19.77891350]
[51.35486603 -6.56372976]
[58.45127106 6.65145302]
[65.54767609 19.86663628]
[71.51978302 24.29903221]
[72.65094757 33.42680359]
[79.47452545 46.78490448]
[86.29809570 60.14300537]
[98.97817230 67.95741272]
[98.36556244 83.76675415]
[111.72366333 90.59033203]
[126.54615021 88.28945160]
[141.36862183 85.98857880]
[156.19111633 83.68770599]
[171.01359558 81.38682556]
[185.83607483 79.08595276]
[200.56030273 70.68157959]
[212.71229553 82.50381470]
[204.71609497 97.45362854]
[188.13694763 93.90843964]
[173.31446838 96.20931244]
[158.49198914 98.51018524]
[143.66950989 100.81105804]
[128.84701538 103.11193848]
[114.02453613 105.41281128]
[106.39157104 118.32550812]
[111.52187347 132.42089844]
[125.89299774 143.88830566]
[122.24763489 161.02760315]
[127.66625977 175.01469421]
[133.08488464 189.00177002]
[135.78558350 174.24690247]
[142.83775330 161.00805664]
[153.57585144 150.53460693]
[166.98652649 143.81494141]
[181.80418396 141.48321533]
[196.63046265 143.75946045]
[210.06619263 150.42887878]
[220.84342957 160.86206055]
[227.94509888 174.07441711]
[230.70100403 188.81907654]
[228.85108948 203.70455933]
[222.56990051 217.32611084]
[212.45022583 228.39825439]
[199.44708252 235.87608337]
[184.78755188 239.05390930]
[169.85511780 237.63183594]
[156.05895996 231.74406433]
[144.70103455 221.94622803]
[136.85404968 209.16499329]
[136.85404968 224.16499329]
[136.85404968 239.16499329]
[136.85404968 254.16499329]
[136.85404968 269.16500854]
[136.85404968 284.16500854]
[136.85404968 299.16500854]
[136.85404968 314.16500854]
[136.85404968 329.16500854]
[136.85404968 344.16500854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 124]
[12 123]
[13 122]
[16 120]
[17 119]
[27 103]
[29 101]
[30 100]
[31 99]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
