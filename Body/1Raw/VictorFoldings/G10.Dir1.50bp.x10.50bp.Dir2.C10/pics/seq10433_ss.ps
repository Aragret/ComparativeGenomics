%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUxxxxxxxxxxCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-31.81576920 129.95558167]
[-46.60472107 132.46295166]
[-58.91736984 142.39820862]
[-72.75892639 136.89724731]
[-87.54787445 139.40461731]
[-102.33683014 141.91198730]
[-114.64947510 151.84724426]
[-128.49102783 146.34628296]
[-143.27998352 148.85365295]
[-158.06893921 151.36102295]
[-172.85787964 153.86840820]
[-178.67230225 163.14001465]
[-188.44160461 167.56251526]
[-198.81004333 165.88377380]
[-206.36105347 158.90330505]
[-221.23750305 160.82444763]
[-236.11396790 162.74560547]
[-250.99043274 164.66676331]
[-265.86691284 166.58792114]
[-280.74337769 168.50907898]
[-295.61981201 170.43023682]
[-310.49627686 172.35139465]
[-311.70916748 187.35881042]
[-316.01611328 201.78601074]
[-323.22888184 215.00227356]
[-333.03213501 226.42985535]
[-344.99734497 235.56918335]
[-358.60144043 242.02073669]
[-373.24969482 245.50247192]
[-388.30175781 245.86219788]
[-403.09957886 243.08416748]
[-416.99633789 237.28984070]
[-429.38446045 228.73251343]
[-439.72241211 217.78627014]
[-447.55828857 204.92964172]
[-452.54949951 190.72465515]
[-454.47787476 175.79231262]
[-453.25912476 160.78536987]
[-448.94647217 146.35987854]
[-441.72851562 133.14643860]
[-431.92074585 121.72271729]
[-419.95193481 112.58809662]
[-406.34533691 106.14189148]
[-391.69570923 102.66591644]
[-376.64352417 102.31211853]
[-361.84677124 105.09597015]
[-347.95230103 110.89576721]
[-335.56753540 119.45796967]
[-325.23388672 130.40827942]
[-317.40307617 143.26799011]
[-312.41744995 157.47492981]
[-297.54098511 155.55377197]
[-282.66452026 153.63261414]
[-267.78805542 151.71145630]
[-252.91159058 149.79029846]
[-238.03512573 147.86915588]
[-223.15866089 145.94799805]
[-208.28219604 144.02684021]
[-193.87303162 131.17904663]
[-175.36526489 139.07945251]
[-160.57630920 136.57208252]
[-145.78735352 134.06469727]
[-130.99841309 131.55732727]
[-119.74356079 121.80142212]
[-104.84420013 127.12303925]
[-90.05525208 124.61566925]
[-75.26630402 122.10829163]
[-64.01145172 112.35238647]
[-49.11209488 117.67400360]
[-34.32314682 115.16663361]
[-35.17226791 98.90838623]
[-34.06068039 82.66597748]
[-31.00449944 66.67500305]
[-26.04805946 51.16741943]
[-19.26325417 36.36816788]
[-10.74850082 22.49191093]
[-0.62730610 9.73993492]
[10.95351696 -1.70279253]
[23.82598686 -11.67029095]
[37.80338287 -20.01797676]
[52.68296051 -26.62476730]
[68.24888611 -31.39482689]
[84.27536774 -34.25896454]
[100.52994537 -35.17564011]
[116.77683258 -34.13154602]
[132.78036499 -31.14183807]
[148.30841064 -26.24987602]
[163.13572693 -19.52662277]
[177.04724121 -11.06960106]
[189.84117126 -1.00147998]
[201.33190918 10.53169727]
[211.35281372 23.36264038]
[219.75849915 37.30522919]
[226.42706299 52.15722656]
[240.72909546 47.63486099]
[255.03114319 43.11249924]
[269.33316040 38.59013748]
[283.54306030 33.78609085]
[297.65527344 28.70223236]
[311.76748657 23.61837387]
[316.18844604 8.86163616]
[328.30923462 -0.35462090]
[343.35479736 -0.66285360]
[355.55087280 7.84561014]
[369.66308594 2.76175284]
[383.77529907 -2.32210445]
[397.88751221 -7.40596151]
[411.99969482 -12.48981857]
[422.16308594 -25.35985947]
[438.34927368 -22.72571564]
[443.90734863 -7.29717159]
[433.11959839 5.05421114]
[417.08355713 1.62238836]
[402.97134399 6.70624542]
[388.85916138 11.79010296]
[374.74694824 16.87396049]
[360.63473511 21.95781708]
[356.66665649 36.28933716]
[344.88107300 45.64690018]
[329.66741943 46.27775955]
[316.85134888 37.73058319]
[302.73913574 42.81443787]
[288.62692261 47.89829636]
[285.80218506 51.80920410]
[280.46801758 53.95660019]
[273.85552979 52.89217377]
[259.55349731 57.41453552]
[245.25146484 61.93689728]
[230.94943237 66.45925903]
[233.68849182 79.99694824]
[235.03181458 93.74346924]
[234.96537781 107.55531311]
[233.48986816 121.28827667]
[230.62069702 134.79898071]
[226.38781738 147.94638062]
[220.83541870 160.59320068]
[214.02146912 172.60743713]
[206.01712036 183.86361694]
[196.90591431 194.24424744]
[186.78300476 203.64094543]
[175.75404358 211.95561218]
[163.93421936 219.10142517]
[151.44688416 225.00381470]
[138.42243958 229.60112000]
[124.99686432 232.84536743]
[111.31031036 234.70268250]
[97.50566864 235.15365601]
[83.72707367 234.19361877]
[70.11837006 231.83255005]
[56.82164001 228.09513855]
[43.97570038 223.02037048]
[31.71466827 216.66125488]
[20.16654778 209.08416748]
[9.45190716 200.36820984]
[-0.31739208 190.60438538]
[-9.03935528 179.89463806]
[-16.62292290 168.35076904]
[-22.98892212 156.09330750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[4 67]
[5 66]
[6 65]
[8 63]
[9 62]
[10 61]
[11 60]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[94 129]
[95 128]
[96 127]
[97 126]
[98 123]
[99 122]
[100 121]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
