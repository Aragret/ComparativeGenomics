%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAxxxxxxxxxxUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-0.51454335 331.77529907]
[-14.68696022 325.09967041]
[-28.41836739 317.55847168]
[-41.65596008 309.18066406]
[-54.34883499 299.99850464]
[-66.44818878 290.04727173]
[-76.66166687 301.03292847]
[-86.87514496 312.01861572]
[-97.08863068 323.00427246]
[-107.30210876 333.98992920]
[-117.51558685 344.97558594]
[-111.50532532 358.96832275]
[-111.71251678 374.19583130]
[-118.10128021 388.01986694]
[-129.56472778 398.04528809]
[-144.11671448 402.53518677]
[-159.23606873 400.71163940]
[-172.30323792 392.89056396]
[-181.05426025 380.42706299]
[-183.97297668 365.48043823]
[-180.55369568 350.64035034]
[-171.38883972 338.47790527]
[-158.06625366 331.10031128]
[-142.89418030 329.78579712]
[-128.50125122 334.76211548]
[-118.28777313 323.77645874]
[-108.07429504 312.79080200]
[-97.86081696 301.80511475]
[-87.64733124 290.81945801]
[-77.43385315 279.83380127]
[-87.42076874 269.40017700]
[-96.79511261 258.41290283]
[-105.52626038 246.90786743]
[-113.58566284 234.92268372]
[-120.94698334 222.49652100]
[-127.58615875 209.66998291]
[-133.48149109 196.48500061]
[-138.61372375 182.98466492]
[-142.96606445 169.21311951]
[-146.52430725 155.21533203]
[-149.27679443 141.03709412]
[-151.21455383 126.72473907]
[-152.33125305 112.32502747]
[-152.62321472 97.88503265]
[-152.08952332 83.45195007]
[-150.73188782 69.07295227]
[-148.55477905 54.79503632]
[-145.56527710 40.66487122]
[-141.77317810 26.72863579]
[-137.19087219 13.03187943]
[-131.83332825 -0.38063097]
[-125.71807098 -13.46505737]
[-118.86506653 -26.17863464]
[-111.29673004 -38.47981262]
[-103.03778839 -50.32838058]
[-94.11524200 -61.68561935]
[-84.55825043 -72.51440430]
[-74.39804840 -82.77934265]
[-63.66783905 -92.44688416]
[-52.40270615 -101.48543549]
[-40.63945770 -109.86545563]
[-28.41654396 -117.55954742]
[-15.77391529 -124.54257202]
[-2.75289154 -130.79170227]
[10.60396957 -136.28651428]
[24.25301170 -141.00904846]
[38.14962769 -144.94386292]
[52.24839020 -148.07810974]
[66.50322723 -150.40153503]
[80.86754608 -151.90655518]
[95.29439545 -152.58824158]
[109.73662567 -152.44438171]
[124.14702606 -151.47541809]
[138.47851562 -149.68453979]
[152.68423462 -147.07759094]
[166.71775818 -143.66310120]
[180.53323364 -139.45220947]
[194.08547974 -134.45870972]
[207.33023071 -128.69889832]
[220.22418213 -122.19161224]
[232.72518921 -114.95811462]
[244.79238892 -107.02204895]
[256.38635254 -98.40934753]
[267.46920776 -89.14817810]
[278.00466919 -79.26878357]
[287.95837402 -68.80347443]
[297.29776001 -57.78645325]
[305.99227905 -46.25371933]
[314.01351929 -34.24296951]
[326.95159912 -41.83287811]
[339.88964844 -49.42278671]
[352.82769775 -57.01269531]
[365.76574707 -64.60260010]
[363.64251709 -79.65452576]
[367.44583130 -94.37196350]
[376.59579468 -106.51062012]
[389.69702148 -114.21944427]
[404.75170898 -116.32289124]
[419.46414185 -112.50019073]
[431.59075928 -103.33429718]
[439.28234863 -90.22292328]
[441.36596680 -75.16547394]
[437.52392578 -60.45808792]
[428.34210205 -48.34354401]
[415.22061157 -40.66921616]
[400.16043091 -38.60538864]
[385.45812988 -42.46677780]
[373.35565186 -51.66454697]
[360.41760254 -44.07463837]
[347.47955322 -36.48472977]
[334.54150391 -28.89482307]
[321.60342407 -21.30491447]
[328.69598389 -7.33647346]
[334.90908813 7.04471254]
[340.21890259 21.78334427]
[344.60498047 36.82274628]
[348.05047607 52.10508347]
[350.54214478 67.57159424]
[352.07037354 83.16281128]
[352.62930298 98.81876373]
[352.21679688 114.47926331]
[350.83444214 130.08407593]
[348.48751831 145.57321167]
[345.18508911 160.88711548]
[340.93981934 175.96687317]
[335.76806641 190.75451660]
[329.68969727 205.19316101]
[322.72811890 219.22732544]
[314.91003418 232.80300903]
[306.26556396 245.86801147]
[296.82794189 258.37210083]
[286.63345337 270.26721191]
[275.72125244 281.50756836]
[264.13339233 292.04998779]
[251.91435242 301.85388184]
[239.11116028 310.88159180]
[225.77302551 319.09841919]
[211.95126343 326.47268677]
[197.69900513 332.97610474]
[183.07106018 338.58364868]
[168.12367249 343.27377319]
[152.91433716 347.02841187]
[137.50152588 349.83316040]
[121.94450378 351.67718506]
[106.30310059 352.55343628]
[90.63745880 352.45852661]
[75.00782013 351.39282227]
[59.47428131 349.36044312]
[44.09658051 346.36917114]
[28.93384552 342.43054199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
