%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAxxxxxxxxxxUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[54.40341949 332.96371460]
[54.09136581 317.96697998]
[53.77930832 302.97021484]
[53.46725082 287.97348022]
[53.15519714 272.97671509]
[52.84313965 257.97994995]
[52.53108215 242.98320007]
[52.21902847 227.98645020]
[51.90697098 212.98970032]
[38.81381607 205.67059326]
[25.87576103 213.26049805]
[12.93770504 220.85040283]
[-0.00035135 228.44032288]
[-7.98848486 242.09683228]
[-22.88125610 241.86303711]
[-35.81931305 249.45294189]
[-48.75736618 257.04284668]
[-61.61576843 264.76693726]
[-74.39312744 272.62435913]
[-87.17048645 280.48178101]
[-99.94783783 288.33923340]
[-103.36903381 303.76876831]
[-116.74322510 312.18936157]
[-132.13574219 308.60525513]
[-140.41447449 295.14276123]
[-136.66780090 279.78900146]
[-123.11856079 271.65307617]
[-107.80526733 275.56185913]
[-95.02790833 267.70443726]
[-82.25054932 259.84701538]
[-69.47319794 251.98957825]
[-65.39662170 245.76646423]
[-56.34727478 244.10479736]
[-43.40921783 236.51489258]
[-30.47116280 228.92498779]
[-23.40844727 215.81135559]
[-7.59025955 215.50225830]
[5.34779644 207.91235352]
[18.28585243 200.32244873]
[31.22390747 192.73252869]
[26.42408752 169.14328003]
[35.49012756 147.57766724]
[54.56398010 135.24244690]
[76.59340668 135.78900146]
[83.50040436 122.47385406]
[90.40740204 109.15869904]
[83.47390747 103.03096771]
[81.26082611 92.08860016]
[86.70550537 80.16314697]
[77.31018829 67.43370819]
[83.40264130 53.84212112]
[81.53502655 38.95884323]
[72.13970184 26.22940636]
[78.23215485 12.63781643]
[74.03444672 4.45056438]
[76.48383331 -2.57411766]
[74.92625427 -17.49303055]
[73.36867523 -32.41194153]
[71.81109619 -47.33085251]
[70.09840393 -62.23275757]
[68.23078918 -77.11603546]
[66.36317444 -91.99931335]
[51.45024872 -94.40373230]
[37.81939316 -100.91345215]
[26.57560539 -111.00077057]
[18.63036919 -123.84794617]
[14.62776756 -138.41351318]
[14.89227486 -153.51672363]
[19.40244865 -167.93319702]
[27.79266739 -180.49429321]
[39.38277817 -190.18170166]
[53.23321533 -196.21014404]
[68.22119141 -198.09089661]
[83.13169861 -195.67149353]
[96.75600433 -189.14808655]
[107.98965454 -179.04946899]
[115.92198181 -166.19432068]
[119.90995026 -151.62474060]
[119.63027191 -136.52182007]
[115.10561371 -122.10986328]
[106.70278168 -109.55721283]
[95.10294342 -99.88144684]
[81.24645996 -93.86692810]
[83.11406708 -78.98365021]
[84.98168182 -64.10037231]
[88.96086121 -57.81452942]
[86.73000336 -48.88843536]
[88.28758240 -33.96952438]
[89.84516907 -19.05061150]
[91.40274811 -4.13169861]
[93.11544037 10.77020359]
[102.37717438 22.43508720]
[96.41830444 37.09122849]
[98.28591919 51.97451019]
[107.54765320 63.63939285]
[101.58878326 78.29553223]
[103.46218109 63.41297913]
[114.83170319 53.62861252]
[129.82725525 53.99411774]
[140.70658875 64.32078552]
[141.85267639 79.27693939]
[132.67381287 91.14067841]
[117.90702057 93.78633881]
[132.86726379 94.87765503]
[147.82751465 95.96896362]
[162.78776550 97.06027222]
[174.68400574 87.00457001]
[189.84028625 88.32443237]
[199.35354614 99.72765350]
[214.31379700 100.81896210]
[229.27404785 101.91027069]
[240.04006958 90.56890869]
[255.58319092 88.85256195]
[268.56439209 97.57164001]
[272.85437012 112.60926819]
[266.42749023 126.86512756]
[252.31838989 133.60804749]
[237.18890381 129.65422058]
[228.18273926 116.87052155]
[213.22248840 115.77921295]
[198.26223755 114.68789673]
[187.19482422 124.58981323]
[172.00746155 123.69618225]
[161.69645691 112.02052307]
[146.73620605 110.92921448]
[131.77595520 109.83789825]
[116.81571198 108.74658966]
[103.72255707 116.06569672]
[96.81555939 129.38084412]
[89.90856171 142.69601440]
[95.97381592 148.28421021]
[100.70275879 155.15441895]
[103.82626343 162.98838806]
[105.15071106 171.41189575]
[104.56952667 180.01257324]
[102.07044220 188.36009216]
[97.73815918 196.02772522]
[91.75207520 202.61407471]
[84.37915802 207.76409912]
[75.96215057 211.18806458]
[66.90372467 212.67764282]
[67.21578217 227.67439270]
[67.52783966 242.67114258]
[67.83988953 257.66790771]
[68.15194702 272.66464233]
[68.46400452 287.66140747]
[68.77606201 302.65817261]
[69.08811951 317.65490723]
[69.40017700 332.65167236]
[71.99117279 351.85940552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 40]
[11 39]
[12 38]
[13 37]
[15 35]
[16 34]
[17 33]
[18 31]
[19 30]
[20 29]
[21 28]
[44 130]
[45 129]
[46 128]
[49 96]
[51 94]
[52 93]
[54 91]
[56 90]
[57 89]
[58 88]
[59 87]
[60 85]
[61 84]
[62 83]
[103 127]
[104 126]
[105 125]
[106 124]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
