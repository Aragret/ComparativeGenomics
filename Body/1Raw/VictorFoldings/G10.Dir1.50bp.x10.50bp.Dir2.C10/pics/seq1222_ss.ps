%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[17.69397354 296.84204102]
[11.42456913 310.46902466]
[5.15516376 324.09600830]
[-1.11424124 337.72296143]
[-7.24341536 351.41360474]
[-13.23171139 365.16644287]
[-19.22000885 378.91925049]
[-25.20830536 392.67208862]
[-25.98798180 409.60809326]
[-42.47796249 413.54724121]
[-50.82804871 398.79217529]
[-38.96113205 386.68377686]
[-32.97283554 372.93096924]
[-26.98454094 359.17813110]
[-20.99624443 345.42529297]
[-21.21079636 337.99118042]
[-14.74122047 331.45358276]
[-8.47181511 317.82659912]
[-2.20240998 304.19961548]
[4.06699514 290.57263184]
[-14.60818195 279.96121216]
[-32.12178421 267.52581787]
[-48.29630661 253.39254761]
[-62.96781540 237.70462036]
[-75.98761749 220.62101746]
[-87.22374725 202.31489563]
[-96.56233215 182.97178650]
[-103.90872192 162.78775024]
[-109.18846130 141.96734619]
[-112.34803009 120.72160339]
[-113.35540771 99.26583862]
[-112.20039368 77.81751251]
[-108.89468384 56.59401321]
[-103.47179413 35.81044006]
[-95.98667145 15.67744064]
[-109.54856873 9.26846504]
[-123.11046600 2.85948920]
[-138.89344788 3.95865560]
[-147.09463501 -8.47476006]
[-160.65652466 -14.88373566]
[-174.21841431 -21.29271126]
[-187.84539795 -27.56211662]
[-201.53602600 -33.69129181]
[-215.22665405 -39.82046509]
[-228.91728210 -45.94963837]
[-243.59225464 -40.08273315]
[-258.08444214 -46.38768387]
[-263.79586792 -61.12386703]
[-257.33804321 -75.54857635]
[-242.54229736 -81.10388184]
[-228.18666077 -74.49391937]
[-222.78810120 -59.64026260]
[-209.09747314 -53.51108932]
[-195.40684509 -47.38191605]
[-181.71623230 -41.25274277]
[-174.28028870 -41.39096069]
[-167.80944824 -34.85460663]
[-154.24754333 -28.44563293]
[-140.68565369 -22.03665733]
[-125.87271118 -23.59423637]
[-116.70149231 -10.70240688]
[-103.13959503 -4.29343128]
[-89.57769775 2.11554432]
[-83.15913391 -9.42486382]
[-76.03894043 -20.54609299]
[-68.24439240 -31.20554543]
[-59.80533981 -41.36238098]
[-50.75411606 -50.97769928]
[-41.12539673 -60.01465988]
[-30.95606422 -68.43865204]
[-20.28507423 -76.21739960]
[-9.15330315 -83.32109833]
[2.39660358 -89.72254944]
[14.32040310 -95.39722443]
[26.57241821 -100.32338715]
[39.10571289 -104.48216248]
[51.87228012 -107.85762787]
[64.82321167 -110.43683624]
[77.90888977 -112.20992279]
[91.07920074 -113.17009735]
[104.28368378 -113.31366730]
[117.47175598 -112.64009094]
[130.59289551 -111.15194702]
[143.59684753 -108.85493469]
[156.43377686 -105.75786591]
[169.05453491 -101.87258148]
[181.41076660 -97.21398926]
[193.45513916 -91.79991150]
[205.14149475 -85.65110779]
[216.42509460 -78.79112244]
[227.26269531 -71.24623871]
[237.61279297 -63.04535675]
[247.43572998 -54.21989059]
[256.69387817 -44.80364990]
[265.35177612 -34.83270645]
[273.37625122 -24.34525299]
[280.73657227 -13.38146877]
[287.40454102 -1.98334956]
[293.35461426 9.80543995]
[298.56399536 21.93974113]
[303.01275635 34.37306976]
[306.68380737 47.05779648]
[321.33651733 43.84880066]
[335.98925781 40.63980484]
[340.56881714 25.97954559]
[351.87582397 15.58498001]
[366.86877441 12.25219345]
[381.51458740 16.87768745]
[391.87365723 28.21722794]
[395.15945435 43.22053528]
[390.48806763 57.85179901]
[379.11611938 68.17527771]
[364.10256958 71.41400909]
[349.48602295 66.69678497]
[339.19824219 55.29253006]
[324.54553223 58.50152588]
[309.89279175 61.71052170]
[311.76028442 73.94916534]
[312.91479492 86.27552032]
[313.35238647 98.64808655]
[313.07162476 111.02520752]
[312.07342529 123.36521149]
[310.36117554 135.62654114]
[307.94061279 147.76789856]
[304.81991577 159.74844360]
[301.00955200 171.52778625]
[296.52239990 183.06631470]
[291.37356567 194.32513428]
[285.58032227 205.26637268]
[279.16226196 215.85316467]
[272.14093018 226.04988098]
[264.53997803 235.82217407]
[256.38504028 245.13714600]
[247.70353699 253.96342468]
[238.52468872 262.27130127]
[228.87944031 270.03280640]
[218.80024719 277.22180176]
[208.32102966 283.81408691]
[197.47711182 289.78747559]
[186.30496216 295.12182617]
[174.84223938 299.79916382]
[163.12750244 303.80380249]
[151.20022583 307.12219238]
[139.10054016 309.74322510]
[126.86920929 311.65802002]
[114.54740143 312.86013794]
[102.17662048 313.34558105]
[89.79850769 313.11264038]
[77.45474243 312.16217041]
[65.18688965 310.49731445]
[53.03625488 308.12371826]
[41.04374695 305.04934692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[5 15]
[6 14]
[7 13]
[8 12]
[35 63]
[36 62]
[37 61]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[102 117]
[103 116]
[104 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
