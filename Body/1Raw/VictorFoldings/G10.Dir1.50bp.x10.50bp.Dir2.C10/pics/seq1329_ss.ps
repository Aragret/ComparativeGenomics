%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAxxxxxxxxxxUGCCCAAGAACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.65027618 263.99157715]
[110.65027618 248.99159241]
[110.65027618 233.99159241]
[110.65027618 218.99159241]
[110.65027618 203.99159241]
[110.65027618 188.99159241]
[110.65027618 173.99159241]
[110.65027618 158.99159241]
[110.65027618 143.99159241]
[110.65027618 128.99159241]
[104.95474243 124.11194611]
[99.19313049 137.96127319]
[84.24120331 136.76130676]
[80.76206207 122.17037201]
[93.56366730 114.35267639]
[87.86813354 109.47303772]
[73.04564667 111.77391052]
[58.22316742 114.07478333]
[43.40068436 116.37566376]
[28.81693459 119.88482666]
[14.57024193 124.57862854]
[0.32354993 129.27243042]
[-13.92314243 133.96623230]
[-20.44519615 145.14059448]
[-32.45542908 148.73582458]
[-43.32461166 143.33924866]
[-57.66467285 147.73954773]
[-72.00473785 152.13984680]
[-86.34479523 156.54014587]
[-99.71335602 166.96693420]
[-113.43344879 157.00724792]
[-107.66108704 141.06622314]
[-90.74509430 142.20008850]
[-76.40503693 137.79978943]
[-62.06497574 133.39949036]
[-47.72491455 128.99919128]
[-36.51848984 115.52845001]
[-18.61694336 119.71953583]
[-4.37025070 115.02573395]
[9.87644100 110.33193970]
[24.12313271 105.63813782]
[10.51661873 99.32444000]
[3.08181477 86.29663849]
[4.56693316 71.37033844]
[14.42301273 60.06291962]
[29.00683975 56.55407333]
[42.92762756 62.14081192]
[51.03968048 74.75804901]
[50.34444427 89.74192810]
[41.09980774 101.55317688]
[55.92229080 99.25230408]
[70.74477386 96.95143127]
[85.56725311 94.65055084]
[98.32051086 86.75407410]
[106.98712158 74.51111603]
[115.65372467 62.26816559]
[104.20508575 52.56156921]
[93.64600372 41.89408493]
[84.05684662 30.34690475]
[75.51058960 18.00790787]
[68.07228088 4.97100258]
[61.79852676 -8.66458988]
[56.73707581 -22.79509163]
[52.92645264 -37.31296158]
[50.39565659 -52.10770416]
[49.16395187 -67.06672668]
[49.24070740 -82.07617188]
[50.62534332 -97.02181244]
[53.30731964 -111.78989410]
[57.26622391 -126.26802826]
[62.47193146 -140.34602356]
[68.88481140 -153.91674805]
[76.45606995 -166.87689209]
[85.12807465 -179.12783813]
[94.83483124 -190.57633972]
[105.50246429 -201.13526917]
[117.04978180 -210.72427368]
[129.38890076 -219.27035522]
[142.42590332 -226.70848083]
[156.06158447 -232.98204041]
[170.19215393 -238.04328918]
[184.71008301 -241.85371399]
[199.50486755 -244.38430786]
[214.46389771 -245.61579895]
[229.47334290 -245.53883362]
[244.41896057 -244.15399170]
[259.18701172 -241.47180176]
[273.66510010 -237.51269531]
[287.74301147 -232.30679321]
[301.31362915 -225.89372253]
[314.27368164 -218.32228088]
[326.52450562 -209.65010071]
[337.97286987 -199.94317627]
[348.53164673 -189.27540588]
[358.12048340 -177.72795105]
[366.66641235 -165.38871765]
[374.10433960 -152.35160828]
[380.37771606 -138.71583557]
[385.43878174 -124.58518982]
[389.24899292 -110.06721497]
[391.77935791 -95.27239990]
[393.01065063 -80.31334686]
[392.93347168 -65.30390167]
[391.54843140 -50.35830307]
[388.86602783 -35.59029007]
[384.90670776 -21.11226654]
[379.70062256 -7.03441525]
[373.28735352 6.53611898]
[365.71572876 19.49605370]
[357.04339600 31.74675751]
[347.33630371 43.19498825]
[336.66839600 53.75362015]
[325.12078857 63.34229279]
[312.78143311 71.88803101]
[299.74423218 79.32579041]
[286.10836792 85.59897614]
[271.97766113 90.65982819]
[257.45962524 94.46984100]
[242.66476440 97.00001526]
[227.70570374 98.23109436]
[212.69625854 98.15370178]
[197.75067139 96.76844025]
[182.98269653 94.08583832]
[168.50473022 90.12632751]
[154.42695618 84.92002869]
[140.85650635 78.50657654]
[127.89668274 70.93476868]
[119.23007202 83.17772675]
[110.56346893 95.42067719]
[124.03871155 88.83146667]
[134.94752502 78.53594971]
[148.96958923 73.20851135]
[163.96270752 73.66306305]
[177.63629150 79.83016205]
[187.90138245 90.76762390]
[193.18971252 104.80448914]
[192.69337463 119.79627228]
[186.48820496 133.45262146]
[175.52217102 143.68717957]
[161.47062683 148.93637085]
[146.48028564 148.39826965]
[132.84165955 142.15531921]
[125.65027618 128.99159241]
[125.65027618 143.99159241]
[125.65027618 158.99159241]
[125.65027618 173.99159241]
[125.65027618 188.99159241]
[125.65027618 203.99159241]
[125.65027618 218.99159241]
[125.65027618 233.99159241]
[125.65027618 248.99159241]
[125.65027618 263.99157715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 53]
[17 52]
[18 51]
[19 50]
[20 41]
[21 40]
[22 39]
[23 38]
[26 36]
[27 35]
[28 34]
[29 33]
[54 129]
[55 128]
[56 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
