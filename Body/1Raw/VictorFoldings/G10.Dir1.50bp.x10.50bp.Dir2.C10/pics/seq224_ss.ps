%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUCCACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCxxxxxxxxxxUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.28047180 117.79131317]
[70.92361450 122.13648987]
[56.56675339 126.48166656]
[42.20989227 130.82684326]
[27.85303116 135.17202759]
[13.54094315 139.66247559]
[-0.72490484 144.29772949]
[-14.99075222 148.93298340]
[-29.25659943 153.56823730]
[-43.52244949 158.20349121]
[-41.00728226 173.01875305]
[-40.67613602 188.04232788]
[-42.53605652 202.95402527]
[-46.54740906 217.43597412]
[-52.62468719 231.17950439]
[-60.63835526 243.89166260]
[-70.41759491 255.30149841]
[-81.75397491 265.16580200]
[-94.40584564 273.27432251]
[-108.10353851 279.45419312]
[-122.55508423 283.57376099]
[-137.45245361 285.54513550]
[-152.47808838 285.32635498]
[-167.31175232 282.92205811]
[-181.63722229 278.38351440]
[-195.14918518 271.80743408]
[-207.55961609 263.33398438]
[-218.60397339 253.14379883]
[-228.04687500 241.45408630]
[-235.68702698 228.51399231]
[-241.36158752 214.59936523]
[-244.94960022 200.00675964]
[-246.37457275 185.04722595]
[-245.60615540 170.03965759]
[-242.66070557 155.30390930]
[-237.60102844 141.15408325]
[-230.53494263 127.89179993]
[-221.61308289 115.79972076]
[-211.02561951 105.13560486]
[-198.99821472 96.12675476]
[-185.78723145 88.96519470]
[-171.67428589 83.80356598]
[-156.96017456 80.75190735]
[-141.95852661 79.87524414]
[-126.98911285 81.19227600]
[-112.37100983 84.67493439]
[-98.41579437 90.24897003]
[-85.42092896 97.79557800]
[-73.66339874 107.15391541]
[-63.39381790 118.12448883]
[-54.83108139 130.47346497]
[-48.15770340 143.93763733]
[-33.89185333 139.30238342]
[-19.62600708 134.66712952]
[-5.36015987 130.03187561]
[8.90568829 125.39662170]
[14.32718468 120.30869293]
[23.50785446 120.81516266]
[37.86471558 116.46998596]
[52.22157288 112.12480927]
[66.57843781 107.77963257]
[80.93529510 103.43445587]
[87.12878418 89.77280426]
[80.93529510 76.11115265]
[66.48595428 69.14006805]
[63.06778717 53.46538544]
[73.30292511 41.11137772]
[89.33984375 41.55498505]
[98.87638855 54.45590591]
[94.59694672 69.91766357]
[100.79043579 83.57931519]
[101.90487671 68.62077332]
[103.01932526 53.66222763]
[104.13377380 38.70368195]
[105.24821472 23.74514008]
[99.84923553 9.75046349]
[96.70217896 -4.91568995]
[95.88428497 -19.89337540]
[97.41562653 -34.81500244]
[101.25862885 -49.31436157]
[107.31896210 -63.03559875]
[115.44789886 -75.64196014]
[125.44593048 -86.82405853]
[137.06767273 -96.30746460]
[150.02792358 -103.85941315]
[164.00859070 -109.29457855]
[178.66654968 -112.47956085]
[193.64207458 -113.33618927]
[208.56761169 -111.84344482]
[223.07685852 -108.03797150]
[236.81373596 -102.01314545]
[249.44108582 -93.91684723]
[260.64901733 -83.94776917]
[270.16244507 -72.35058594]
[277.74789429 -59.40991974]
[283.21917725 -45.44335938]
[286.44207764 -30.79368401]
[287.33743286 -15.82042980]
[285.88330078 -0.89107960]
[282.11538696 13.62796497]
[276.12609863 27.38037109]
[268.06250000 40.02861786]
[258.12243652 51.26229095]
[246.54991150 60.80568695]
[233.62890625 68.42458344]
[219.67654419 73.93199921]
[205.03524780 77.19277191]
[190.06436157 78.12686157]
[175.12519836 76.71028900]
[161.02429199 81.82538605]
[146.92337036 86.94048309]
[132.82246399 92.05558014]
[118.72154236 97.17068481]
[133.54856873 99.44210052]
[148.37559509 101.71351624]
[157.39239502 99.91396332]
[163.47886658 104.18415070]
[178.25682068 106.75559998]
[193.45971680 100.60710907]
[206.21763611 110.91086578]
[203.40634155 127.06724548]
[187.91783142 132.45594788]
[175.68536377 121.53354645]
[160.90742493 118.96209717]
[146.10417175 116.54054260]
[131.27714539 114.26912689]
[116.45012665 111.99770355]
[128.37309265 121.09951782]
[142.49934387 126.14423370]
[155.30488586 133.95562744]
[166.25483704 144.20739746]
[174.89176941 156.47129822]
[180.85490417 170.23506165]
[183.89514160 184.92372131]
[183.88549805 199.92372131]
[180.82638550 214.60845947]
[174.84556580 228.36454773]
[166.19287109 240.61734009]
[155.22976685 250.85502625]
[142.41418457 258.64996338]
[128.28146362 263.67651367]
[113.42196655 265.72473145]
[98.45639038 264.70904541]
[84.00988770 260.67187500]
[70.68592834 253.78189087]
[59.04106522 244.32688904]
[49.56174088 232.70179749]
[42.64392471 219.39227295]
[38.57658768 204.95423889]
[37.52963257 189.99081421]
[39.54678726 175.12705994]
[44.54380035 160.98387146]
[52.31192780 148.15203857]
[62.52668381 137.16755676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[63 71]
[64 70]
[113 127]
[114 126]
[115 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
