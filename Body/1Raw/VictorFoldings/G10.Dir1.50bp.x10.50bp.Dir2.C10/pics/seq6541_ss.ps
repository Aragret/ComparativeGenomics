%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUxxxxxxxxxxACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.95173454 247.46972656]
[25.04473686 260.78488159]
[18.13773727 274.10003662]
[18.65144348 289.91290283]
[5.92273664 297.64785767]
[-0.98426175 310.96301270]
[-7.89126015 324.27816772]
[-14.79825878 337.59332275]
[-21.70525742 350.90847778]
[-20.42613411 367.25765991]
[-34.09669495 376.31567383]
[-48.65384293 368.76440430]
[-49.12242889 352.37197876]
[-35.02041245 344.00146484]
[-28.11341476 330.68630981]
[-21.20641518 317.37115479]
[-14.29941750 304.05599976]
[-7.39241886 290.74084473]
[-8.40015984 275.88037109]
[4.82258224 267.19305420]
[11.72958088 253.87788391]
[18.63657951 240.56272888]
[-18.94743919 210.58659363]
[-46.10974884 170.92129517]
[-59.89213181 176.84126282]
[-73.67451477 182.76121521]
[-85.84163666 194.56788635]
[-100.55509186 186.14466858]
[-96.53414917 169.67445374]
[-79.59447479 168.97883606]
[-65.81209564 163.05886841]
[-52.02971268 157.13891602]
[-55.02985001 148.41110229]
[-57.52938843 139.52696228]
[-59.52025604 130.51519775]
[-60.99602509 121.40489197]
[-61.95192719 112.22546387]
[-62.38488007 103.00656891]
[-62.29348373 93.77796173]
[-61.67803574 84.56944275]
[-60.54051590 75.41075134]
[-58.88460922 66.33146667]
[-56.71565247 57.36089325]
[-54.04065323 48.52800369]
[-50.86824799 39.86132050]
[-47.20867920 31.38882828]
[-43.07377243 23.13788414]
[-38.47686768 15.13513279]
[-33.43281555 7.40641403]
[-27.95790482 -0.02331543]
[-22.06980896 -7.13006449]
[-15.78754330 -13.89088440]
[-9.13139439 -20.28394508]
[-2.12285447 -26.28860283]
[5.21544504 -31.88546944]
[12.85980892 -37.05646896]
[5.40489864 -50.07278061]
[-2.05001140 -63.08908844]
[-9.50492191 -76.10540009]
[-16.95983124 -89.12170410]
[-24.41474152 -102.13801575]
[-37.53343201 -112.87749481]
[-30.84527397 -128.45648193]
[-14.02365208 -126.34239197]
[-11.39843273 -109.59292603]
[-3.94352269 -96.57661438]
[3.51138759 -83.56031036]
[10.96629810 -70.54399872]
[18.42120743 -57.52769089]
[25.87611771 -44.51137924]
[36.30633926 -49.40216446]
[47.05700302 -53.54129028]
[58.07403183 -56.90793991]
[69.30199432 -59.48517609]
[80.68439484 -61.26002502]
[92.16397858 -62.22356796]
[103.68298340 -62.37094879]
[115.18346405 -61.70142746]
[126.60755157 -60.21837234]
[137.89776611 -57.92924881]
[148.99732971 -54.84556961]
[159.85037231 -50.98284912]
[170.40231323 -46.36052704]
[180.60005188 -41.00185013]
[190.39227295 -34.93378067]
[199.72973633 -28.18684959]
[209.47738647 -39.58787155]
[212.70513916 -48.20375824]
[219.54837036 -51.12194824]
[229.53109741 -62.31771469]
[239.51382446 -73.51348114]
[245.54211426 -89.35948944]
[262.43765259 -87.95340729]
[265.76367188 -71.32890320]
[250.70957947 -63.53075409]
[240.72685242 -52.33498764]
[230.74412537 -41.13922501]
[220.87840271 -29.84021950]
[211.13075256 -18.43919754]
[221.48245239 -7.79565954]
[230.81889343 3.74873710]
[239.06207275 16.09751320]
[246.14311218 29.14747238]
[252.00280762 42.78955078]
[256.59219360 56.90974045]
[259.87295532 71.39004517]
[261.81762695 86.10943604]
[262.40997314 100.94491577]
[277.38967896 101.72476196]
[292.36938477 102.50460815]
[307.34909058 103.28445435]
[318.92105103 92.52037811]
[334.71179199 93.17512512]
[345.35290527 104.86024475]
[344.53125000 120.64316559]
[332.73428345 131.16015625]
[316.96093750 130.17167664]
[306.56927490 118.26416779]
[291.58953857 117.48432159]
[276.60983276 116.70447540]
[261.63012695 115.92463684]
[260.34713745 125.82031250]
[258.45886230 135.61851501]
[255.97244263 145.28228760]
[252.89727783 154.77511597]
[249.24494934 164.06117249]
[245.02925110 173.10542297]
[240.26611328 181.87371826]
[234.97349548 190.33296204]
[229.17138672 198.45120239]
[222.88169861 206.19783020]
[216.12814331 213.54357910]
[208.93623352 220.46072388]
[201.33311462 226.92315674]
[193.34748840 232.90649414]
[185.00949097 238.38813782]
[176.35061646 243.34738159]
[167.40351868 247.76553345]
[158.20199585 251.62591553]
[148.78077698 254.91392517]
[139.17541504 257.61718750]
[129.42218018 259.72546387]
[119.55787659 261.23083496]
[109.61975861 262.12756348]
[99.64531708 262.41232300]
[89.67221832 262.08401489]
[79.73810577 261.14385986]
[69.88047791 259.59542847]
[60.13653946 257.44458008]
[50.54307938 254.69938660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[24 32]
[25 31]
[26 30]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[86 99]
[87 98]
[89 97]
[90 96]
[91 95]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
