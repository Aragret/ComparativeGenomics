%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGxxxxxxxxxxCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.64013672 322.22628784]
[139.71672058 307.25473022]
[138.79330444 292.28317261]
[137.86988831 277.31161499]
[136.94648743 262.34008789]
[136.02307129 247.36853027]
[135.09965515 232.39697266]
[132.19218445 217.68145752]
[127.35236359 203.48370361]
[122.51255035 189.28594971]
[117.67272949 175.08819580]
[112.83291626 160.89044189]
[107.99309540 146.69268799]
[82.96500397 144.20300293]
[62.73902130 129.25262451]
[53.01679611 106.05602264]
[38.02391052 105.59409332]
[23.03102493 105.13217163]
[8.03813934 104.67024231]
[-3.42520332 115.21678162]
[-18.62354088 114.53474426]
[-28.60741043 103.54120636]
[-43.60029602 103.07928467]
[-58.59713364 102.77130127]
[-73.59634399 102.61730957]
[-88.59555054 102.46331024]
[-104.38415527 111.88407135]
[-119.14691162 102.44450378]
[-134.14611816 102.59850311]
[-149.14532471 102.75249481]
[-164.14454651 102.90649414]
[-177.86454773 110.78506470]
[-190.67059326 103.17883301]
[-198.79031372 116.29651642]
[-212.72283936 122.92132568]
[-228.02235413 120.93931580]
[-239.80683899 110.98292542]
[-244.31590271 96.22921753]
[-240.11071777 81.38603973]
[-228.53314209 71.18979645]
[-213.27754211 68.89407349]
[-199.21192932 75.23142242]
[-190.82458496 88.17962646]
[-178.17741394 80.31207275]
[-164.29853821 87.90728760]
[-149.29933167 87.75328827]
[-134.30012512 87.59928894]
[-119.30091095 87.44529724]
[-110.57919312 79.00764465]
[-98.04423523 78.79275513]
[-88.44155884 87.46410370]
[-73.44234467 87.61809540]
[-58.44313812 87.77209473]
[-51.68064499 84.67679596]
[-43.13837051 88.08639526]
[-28.14548492 88.54832458]
[-17.50377846 78.19024658]
[-2.29228067 78.44512939]
[8.50006580 89.67736053]
[23.49295235 90.13928223]
[38.48583603 90.60121155]
[53.47872162 91.06313324]
[58.03480911 78.02229309]
[66.15930939 66.85027313]
[77.16136932 58.49706268]
[90.10546112 53.67295837]
[103.89090729 52.78816223]
[117.34550476 55.91791534]
[124.97846985 43.00521469]
[111.26634216 49.08612823]
[96.27046967 48.73417664]
[82.85871887 42.01667786]
[73.59597778 30.21830177]
[70.25369263 15.59540462]
[73.47104645 0.94451255]
[82.63274384 -10.93249321]
[95.98667908 -17.76422119]
[110.97899628 -18.24414825]
[124.74253082 -12.28049469]
[134.64509583 -1.01376569]
[138.79290771 13.40135574]
[136.39219666 28.20934677]
[146.94421387 17.54843903]
[157.49623108 6.88752985]
[168.04824829 -3.77337909]
[178.60025024 -14.43428802]
[182.80912781 -29.68538666]
[197.26145935 -33.28806686]
[207.81347656 -43.94897461]
[202.64997864 -58.31216049]
[204.23834229 -73.49240875]
[212.26316833 -86.47566223]
[225.13111877 -94.68409729]
[240.28727722 -96.48791504]
[254.72236633 -91.52896118]
[265.57028198 -80.79185486]
[270.67715454 -66.40844727]
[269.02905273 -51.23456955]
[260.95315552 -38.28301620]
[248.05296326 -30.12532234]
[232.88981628 -28.38120461]
[218.47438049 -33.39695740]
[207.92236328 -22.73604965]
[204.46824646 -8.24749088]
[189.26116943 -3.88227272]
[178.70915222 6.77863598]
[168.15713501 17.43954468]
[157.60511780 28.10045433]
[147.05310059 38.76136398]
[137.89117432 50.63818741]
[130.25819397 63.55088425]
[135.39250183 68.51241302]
[139.72279358 74.18922424]
[143.15074158 80.45236969]
[145.59846497 87.15956116]
[147.01034546 94.15843964]
[147.35432434 101.29002380]
[146.62258911 108.39229584]
[144.83175659 115.30393219]
[142.02250671 121.86791229]
[138.25866699 127.93513489]
[133.62571716 133.36776733]
[128.22891235 138.04241943]
[122.19084930 141.85287476]
[127.03067017 156.05062866]
[131.87048340 170.24838257]
[136.71029663 184.44613647]
[141.55010986 198.64387512]
[146.38993835 212.84162903]
[150.42350769 198.39413452]
[159.89836121 186.76541138]
[173.23312378 179.89633179]
[188.20217896 178.93334961]
[202.30717468 184.03720093]
[213.19393921 194.35603333]
[219.04545593 208.16760254]
[218.88510132 223.16674805]
[212.73963928 236.85006714]
[201.63473511 246.93379211]
[187.42385864 251.73490906]
[172.47880554 250.45211792]
[159.29396057 243.29951477]
[150.07119751 231.47355652]
[150.99461365 246.44511414]
[151.91802979 261.41665649]
[152.84144592 276.38821411]
[153.76486206 291.35977173]
[154.68827820 306.33129883]
[155.61167908 321.30285645]
[165.11611938 334.66690063]
[158.04959106 349.46542358]
[141.68154907 350.47497559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 129]
[9 128]
[10 127]
[11 126]
[12 125]
[13 124]
[16 62]
[17 61]
[18 60]
[19 59]
[22 56]
[23 55]
[24 53]
[25 52]
[26 51]
[28 48]
[29 47]
[30 46]
[31 45]
[33 43]
[68 111]
[69 110]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[88 103]
[89 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
