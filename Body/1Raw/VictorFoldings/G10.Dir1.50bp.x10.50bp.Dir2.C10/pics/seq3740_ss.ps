%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCxxxxxxxxxxAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.92991638 298.14334106]
[93.92991638 283.14334106]
[93.92991638 268.14334106]
[93.92991638 253.14334106]
[93.92991638 238.14334106]
[93.92991638 223.14334106]
[93.92991638 208.14334106]
[93.92991638 193.14334106]
[93.92991638 178.14334106]
[93.92991638 163.14334106]
[92.37233734 148.22444153]
[89.27401733 133.54791260]
[90.77592468 148.47253418]
[82.82778168 161.19364929]
[68.75576019 166.38769531]
[54.44876480 161.88104248]
[45.89404678 149.55964661]
[46.67161942 134.57981873]
[56.45607376 123.21036530]
[71.15403748 120.20938873]
[56.21972656 121.61168671]
[41.28541946 123.01399231]
[36.75128555 137.49560547]
[27.04432297 149.10671997]
[13.66761208 156.09794617]
[-1.32602465 157.43153381]
[-15.64903355 152.93528748]
[-27.12813759 143.32406616]
[-34.03409195 130.08634949]
[-48.96839905 131.48866272]
[-63.90270996 132.89096069]
[-78.83701324 134.29325867]
[-88.72436523 146.62274170]
[-104.44293976 148.26651001]
[-116.66718292 138.24935913]
[-118.14468384 122.51428986]
[-107.99884796 110.39662933]
[-92.24903107 109.08557892]
[-80.23931885 119.35895538]
[-65.30501556 117.95665741]
[-50.37070465 116.55435181]
[-35.43639755 115.15204620]
[-31.11542130 100.86014557]
[-21.62614250 89.28002930]
[-8.39049435 82.19607544]
[6.58931351 80.71520996]
[21.03365707 85.09409332]
[32.73241043 94.69525146]
[39.88311768 108.07968140]
[54.81742477 106.67738342]
[69.75173187 105.27507782]
[75.56867981 86.60337067]
[90.37130737 76.90517426]
[106.11287689 78.67892456]
[114.87908936 66.50708771]
[123.64529419 54.33525085]
[132.41149902 42.16341400]
[118.60599518 48.02925491]
[103.78621674 50.34746170]
[88.84888458 48.97776794]
[74.69783020 44.00305176]
[62.18933105 35.72432327]
[52.08024597 24.64251709]
[44.98226547 11.42818069]
[41.32488251 -3.11910582]
[41.32939529 -18.11910439]
[44.99553299 -32.66418839]
[52.10146332 -45.87425232]
[62.21721268 -56.94997025]
[74.73069763 -65.22116852]
[88.88473511 -70.18737030]
[103.82289124 -71.54808044]
[118.64127350 -69.22095490]
[132.44325256 -63.34680557]
[144.39366150 -54.28107452]
[153.76942444 -42.57231903]
[160.00323486 -28.92901230]
[162.71784973 -14.17669773]
[161.74905396 0.79198432]
[157.15545654 15.07129860]
[149.21624756 27.79568481]
[162.60252380 21.02757072]
[175.98881531 14.25945568]
[189.37509155 7.49134064]
[202.76138306 0.72322571]
[203.95114136 -13.04571056]
[211.74116516 -24.32971001]
[223.99888611 -30.22875023]
[237.46118164 -29.29162216]
[248.60281372 -21.87136841]
[262.12701416 -28.35953331]
[275.65118408 -34.84769821]
[289.17538452 -41.33586502]
[287.14889526 -56.32748032]
[289.85626221 -71.21121216]
[297.03222656 -84.52889252]
[307.97375488 -94.97579956]
[321.60894775 -101.52845001]
[336.60189819 -103.54488373]
[351.48382568 -100.82755280]
[364.79669189 -93.64266205]
[375.23626709 -82.69412231]
[381.77978516 -69.05456543]
[383.78616333 -54.06024551]
[381.05886841 -39.18016052]
[373.86505127 -25.87210464]
[362.90951538 -15.43986797]
[349.26559448 -8.90549469]
[334.26992798 -6.90915680]
[319.39166260 -9.64643383]
[306.08843994 -16.84915733]
[295.66354370 -27.81167412]
[282.13934326 -21.32350922]
[268.61517334 -14.83534431]
[255.09097290 -8.34717941]
[252.67269897 7.85952377]
[240.97026062 19.56504059]
[224.43627930 22.03667259]
[209.52949524 14.10951042]
[196.14321899 20.87762451]
[182.75692749 27.64574051]
[169.37063599 34.41385651]
[155.98435974 41.18196869]
[144.58334351 50.92962265]
[135.81712341 63.10145950]
[127.05092621 75.27329254]
[118.28471375 87.44512939]
[124.14386749 110.78313446]
[103.95054626 130.44958496]
[107.04886627 145.12611389]
[113.78125000 131.72181702]
[126.23765564 123.36491394]
[141.19378662 122.21855927]
[154.77828979 128.57946777]
[163.47486877 140.80116272]
[165.03240967 155.72007751]
[159.04779053 169.47450256]
[147.07008362 178.50415039]
[132.19967651 180.47171021]
[118.28575897 174.86790466]
[108.92991638 163.14334106]
[108.92991638 178.14334106]
[108.92991638 193.14334106]
[108.92991638 208.14334106]
[108.92991638 223.14334106]
[108.92991638 238.14334106]
[108.92991638 253.14334106]
[108.92991638 268.14334106]
[108.92991638 283.14334106]
[108.92991638 298.14334106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[20 51]
[21 50]
[22 49]
[29 42]
[30 41]
[31 40]
[32 39]
[54 127]
[55 126]
[56 125]
[57 124]
[81 123]
[82 122]
[83 121]
[84 120]
[85 119]
[90 115]
[91 114]
[92 113]
[93 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
