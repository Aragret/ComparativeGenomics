%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUxxxxxxxxxxACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.43088531 439.70150757]
[115.02188110 420.49377441]
[115.33393860 405.49703979]
[115.64599609 390.50027466]
[115.95805359 375.50350952]
[116.27011108 360.50677490]
[116.58216858 345.51000977]
[116.89421844 330.51324463]
[117.20627594 315.51651001]
[117.51833344 300.51974487]
[117.83039093 285.52301025]
[116.58351898 270.57492065]
[113.79119110 255.83709717]
[97.52335358 249.09727478]
[88.43590546 233.83232117]
[90.29787445 216.00773621]
[102.55598450 202.72045898]
[99.15299988 188.11155701]
[95.75002289 173.50267029]
[92.34704590 158.89378357]
[81.92411041 148.25367737]
[86.32889557 133.05799866]
[73.97731781 124.54691315]
[59.11427307 126.56925201]
[50.97113037 130.85189819]
[43.92134857 128.47572327]
[29.01944733 130.18841553]
[14.11754417 131.90109253]
[-0.78435814 133.61378479]
[-6.24372864 147.91252136]
[-17.73038292 158.02763367]
[-32.60477066 161.63473511]
[-47.44886780 157.90493774]
[-58.85160828 147.69532776]
[-64.19272614 133.35200500]
[-62.24487305 118.17094421]
[-53.45565033 105.64065552]
[-39.84475708 98.64050293]
[-24.53987503 98.77906799]
[-11.05795765 106.02451324]
[-2.49704790 118.71188354]
[12.40485477 116.99919891]
[27.30675697 115.28650665]
[42.20866013 113.57381439]
[57.09193802 111.70619965]
[71.95498657 109.68386841]
[73.32828522 92.36776733]
[83.74982452 79.94194794]
[98.33600616 76.17105103]
[102.04216766 61.63611603]
[105.74832916 47.10118103]
[109.45449066 32.56624222]
[111.78559113 17.74848557]
[104.92414856 3.49256921]
[113.44024658 -8.72730350]
[114.37587738 -23.69809532]
[115.31150055 -38.66888809]
[116.24713135 -53.63967896]
[106.20861053 -62.67769241]
[103.27167511 -75.66239166]
[108.29434204 -87.78044128]
[119.22602844 -94.67211151]
[120.47290039 -109.62019348]
[121.71977234 -124.56828308]
[107.36013031 -129.12332153]
[94.37435913 -136.75991821]
[83.41383362 -147.09503174]
[75.02832794 -159.61026001]
[69.63845062 -173.67784119]
[67.51455688 -188.59216309]
[68.76317596 -203.60510254]
[73.32168579 -217.96365356]
[80.96142578 -230.94757080]
[91.29920197 -241.90559387]
[103.81645966 -250.28805542]
[117.88535309 -255.67453003]
[132.80018616 -257.79479980]
[147.81283569 -256.54254150]
[162.17027283 -251.98056030]
[175.15232849 -244.33767700]
[186.10784912 -233.99725342]
[194.48728943 -221.47796631]
[199.87034607 -207.40776062]
[201.98701477 -192.49241638]
[200.73112488 -177.48007202]
[196.16564941 -163.12374878]
[188.51962280 -150.14353943]
[178.17654419 -139.19052124]
[165.65521240 -130.81411743]
[151.58370972 -125.43446350]
[136.66786194 -123.32141113]
[135.42098999 -108.37332153]
[134.17411804 -93.42523193]
[145.56947327 -81.09625244]
[144.53300476 -64.00210571]
[131.21792603 -52.70405197]
[130.28230286 -37.73325729]
[129.34666443 -22.76246643]
[128.41104126 -7.79167557]
[135.33940125 5.39342928]
[126.75638580 18.68411446]
[137.21675110 7.93326235]
[151.79470825 4.40010262]
[166.01646423 9.16891575]
[175.51754761 20.77621269]
[177.38220215 35.65986633]
[171.03817749 49.25226593]
[158.43237305 57.38208389]
[143.43336487 57.55437851]
[130.64414978 49.71627808]
[123.98942566 36.27240372]
[120.28326416 50.80734253]
[116.57710266 65.34227753]
[112.87094116 79.87721252]
[123.65011597 90.92158508]
[125.81741333 107.10948944]
[117.45694733 122.17784119]
[100.93778229 129.65502930]
[111.60412598 141.34005737]
[106.95594025 155.49079895]
[110.35891724 170.09968567]
[113.76189423 184.70858765]
[117.16487122 199.31747437]
[129.29086304 202.64567566]
[138.77919006 210.78642273]
[143.85266113 222.13343811]
[143.59588623 234.48793030]
[138.11990356 245.48466492]
[128.52899170 253.04478455]
[131.32131958 267.78259277]
[138.33111572 254.52125549]
[150.95867920 246.42529297]
[165.93542480 245.59033203]
[179.38465881 252.23246765]
[187.82508850 264.63244629]
[189.07192993 279.58053589]
[182.80245972 293.20748901]
[170.63948059 301.98599243]
[155.73136902 303.64376831]
[141.93704224 297.75170898]
[132.82714844 285.83505249]
[132.51509094 300.83181763]
[132.20303345 315.82855225]
[131.89097595 330.82531738]
[131.57891846 345.82205200]
[131.26686096 360.81881714]
[130.95480347 375.81558228]
[130.64274597 390.81231689]
[130.33068848 405.80908203]
[130.01863098 420.80584717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 130]
[13 129]
[17 123]
[18 122]
[19 121]
[20 120]
[22 118]
[23 46]
[24 45]
[26 44]
[27 43]
[28 42]
[29 41]
[49 114]
[50 113]
[51 112]
[52 111]
[53 101]
[55 99]
[56 98]
[57 97]
[58 96]
[62 93]
[63 92]
[64 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
