%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGAxxxxxxxxxxCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.58296204 263.76538086]
[73.58296204 248.76538086]
[73.58296204 233.76538086]
[73.58296204 218.76538086]
[73.58296204 203.76538086]
[73.58296204 188.76538086]
[73.58296204 173.76538086]
[73.58296204 158.76538086]
[73.58296204 143.76538086]
[73.58296204 128.76538086]
[87.66710663 95.91794586]
[78.33132172 84.17728424]
[68.99553680 72.43662262]
[61.16148376 67.63413239]
[59.59403229 60.37052155]
[50.49203110 48.44770813]
[41.39002991 36.52489090]
[32.28802490 24.60207367]
[22.27311134 13.43509102]
[11.40780926 3.09366012]
[0.54250681 -7.24777079]
[-8.14823914 -4.61398840]
[-17.58104324 -6.26736021]
[-25.65596199 -12.28817749]
[-40.04455566 -16.52709007]
[-54.43314743 -20.76600266]
[-68.82173920 -25.00491524]
[-83.69820404 -26.92607117]
[-98.69161987 -26.48157120]
[-113.68502808 -26.03707123]
[-128.67843628 -25.59257126]
[-143.67185974 -25.14807129]
[-149.41195679 -11.04236126]
[-160.39761353 -0.49554595]
[-174.72547913 4.66507339]
[-189.91317749 3.54538894]
[-203.32934570 -3.66060758]
[-212.64955139 -15.70443344]
[-216.25900269 -30.49942398]
[-213.53234863 -45.48225403]
[-204.94200134 -58.05706406]
[-191.97628784 -66.04518890]
[-176.88159180 -68.06263733]
[-162.27316284 -63.75986862]
[-150.68200684 -53.88237381]
[-144.11634827 -40.14148331]
[-129.12294006 -40.58598328]
[-114.12953186 -41.03048325]
[-99.13611603 -41.47498322]
[-84.14270782 -41.91948318]
[-97.11337280 -49.45352936]
[-106.79492188 -60.91073608]
[-112.05957794 -74.95649719]
[-112.29409027 -89.95466614]
[-107.47113037 -104.15814972]
[-98.15251923 -115.91244507]
[-85.42373657 -123.84832001]
[-70.76752472 -127.04136658]
[-55.89113998 -125.11962128]
[-42.52747345 -118.30695343]
[-32.23322296 -107.39694214]
[-26.20752335 -93.66046143]
[-25.15229225 -78.69762421]
[-29.19045067 -64.25140381]
[-37.85160446 -52.00458908]
[-50.12684631 -43.38377762]
[-64.58283234 -39.39350891]
[-50.19423676 -35.15459442]
[-35.80564117 -30.91568375]
[-21.41704941 -26.67677116]
[-8.73310947 -34.68412018]
[-6.37195730 -49.49711990]
[-4.01080513 -64.31011963]
[-1.64965296 -79.12312317]
[-15.13026237 -85.98812866]
[-25.82824707 -96.68431091]
[-32.69552612 -110.16376495]
[-35.05931091 -125.10591125]
[-32.68803024 -140.04687500]
[-25.81398964 -153.52287292]
[-15.11064053 -164.21368408]
[-1.62658799 -171.07192993]
[13.31713772 -173.42570496]
[28.25650215 -171.04441833]
[41.72790146 -164.16134644]
[52.41154099 -153.45083618]
[59.26074982 -139.96218872]
[61.60450745 -125.01689148]
[59.21320343 -110.07912445]
[52.32110977 -96.61234283]
[41.60344315 -85.93588257]
[28.11021233 -79.09571075]
[13.16334724 -76.76197052]
[10.80219460 -61.94896698]
[8.44104195 -47.13596725]
[6.07989025 -32.32296753]
[10.88393784 -18.11307335]
[21.74924088 -7.77164268]
[32.61454391 2.56978846]
[31.68436241 -12.40134239]
[39.60258102 -25.14111519]
[53.43864441 -30.93450737]
[68.07178497 -27.63736916]
[78.08624268 -16.46997833]
[79.77564240 -1.56541705]
[72.51472473 11.56009674]
[58.99078369 18.04877472]
[44.21084213 15.50007153]
[53.31284714 27.42288780]
[62.41484833 39.34570312]
[71.51685333 51.26852036]
[80.73619080 63.10083771]
[90.07198334 74.84149933]
[99.40776825 86.58215332]
[112.54379272 93.82403564]
[127.45530701 95.45090485]
[142.36682129 97.07776642]
[157.27833557 98.70463562]
[168.44398499 87.75646973]
[184.03863525 86.59837341]
[196.69894409 95.77717590]
[200.44712830 110.95890808]
[193.51341248 124.97523499]
[179.17166138 131.20806885]
[164.19361877 126.71446228]
[155.65147400 113.61614990]
[140.73995972 111.98928833]
[125.82844543 110.36241913]
[110.91692352 108.73555756]
[105.33343506 113.74301147]
[117.63956451 122.31967926]
[129.94569397 130.89634705]
[142.25181580 139.47302246]
[154.55793762 148.04969788]
[169.09707642 151.73931885]
[180.28491211 161.73092651]
[185.58822632 175.76214600]
[183.80619812 190.65591431]
[175.34231567 203.03988647]
[162.11303711 210.10998535]
[147.11384583 210.26536560]
[133.74095154 203.47084045]
[125.02234650 191.26486206]
[122.93198395 176.41288757]
[115.74060059 163.24914551]
[108.54921722 150.08540344]
[101.35783386 136.92166138]
[94.16645050 123.75792694]
[88.58296204 128.76538086]
[88.58296204 143.76538086]
[88.58296204 158.76538086]
[88.58296204 173.76538086]
[88.58296204 188.76538086]
[88.58296204 203.76538086]
[88.58296204 218.76538086]
[88.58296204 233.76538086]
[88.58296204 248.76538086]
[88.58296204 263.76538086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 114]
[12 113]
[13 112]
[15 111]
[16 110]
[17 109]
[18 108]
[19 99]
[20 98]
[21 97]
[24 70]
[25 69]
[26 68]
[27 67]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[71 96]
[72 95]
[73 94]
[74 93]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
