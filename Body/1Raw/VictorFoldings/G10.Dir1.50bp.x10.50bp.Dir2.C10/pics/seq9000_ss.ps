%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCxxxxxxxxxxUAUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.10650635 344.75344849]
[116.10650635 329.75344849]
[116.10650635 314.75344849]
[116.10650635 299.75344849]
[116.10650635 284.75344849]
[116.10650635 269.75344849]
[116.10650635 254.75344849]
[116.10650635 239.75344849]
[116.10650635 224.75344849]
[116.10650635 209.75344849]
[114.39381409 194.85154724]
[110.99083710 180.24266052]
[100.56790161 169.60255432]
[104.97268677 154.40687561]
[101.56970978 139.79798889]
[81.29331970 135.16253662]
[66.11851501 120.93774414]
[52.10180664 126.27925873]
[38.08509064 131.62077332]
[31.56133080 145.76567078]
[17.27029800 150.98304749]
[3.82549882 144.67646790]
[-10.19121456 150.01799011]
[-24.20792770 155.35949707]
[-38.22463989 160.70100403]
[-43.18033981 175.53256226]
[-56.53712082 183.66462708]
[-71.98832703 181.25747681]
[-82.23835754 169.44770813]
[-82.44747925 153.81150818]
[-72.51693726 141.73184204]
[-57.13563538 138.91235352]
[-43.56615448 146.68429565]
[-29.54944038 141.34278870]
[-15.53272724 136.00126648]
[-1.51601374 130.65975952]
[4.32185078 117.00491333]
[18.46069908 111.38818359]
[32.74357986 117.60405731]
[46.76029205 112.26254272]
[60.77700424 106.92102814]
[60.17178726 99.76015472]
[60.86320496 92.60708618]
[62.82874298 85.69470215]
[66.00441742 79.24803162]
[70.28683472 73.47695923]
[75.53658295 68.56935883]
[81.58275604 64.68500519]
[77.27516937 50.31681824]
[72.96759033 35.94863510]
[68.66000366 21.58045006]
[53.72375488 23.33532333]
[38.70970154 22.46969604]
[24.07410240 19.00987244]
[10.26171780 13.06099033]
[-2.30770779 4.80383301]
[-13.25220585 -5.51067591]
[-22.23918343 -17.56908989]
[-28.99554062 -31.00496674]
[-33.31595230 -45.41000366]
[-35.06913376 -60.34645462]
[-34.20180511 -75.36040497]
[-30.74032021 -89.99561310]
[-24.78987312 -103.80731964]
[-16.53129005 -116.37580872]
[-6.21553946 -127.31913757]
[5.84389305 -136.30474854]
[19.28053665 -143.05958557]
[33.68606567 -147.37835693]
[48.62271118 -149.12985229]
[63.63656998 -148.26081848]
[78.27138519 -144.79766846]
[92.08241272 -138.84565735]
[104.64997101 -130.58564758]
[115.59212494 -120.26866150]
[124.57637024 -108.20820618]
[131.32968140 -94.77079773]
[135.64682007 -80.36478424]
[137.39662170 -65.42793274]
[136.52587891 -50.41417694]
[133.06108093 -35.77975845]
[127.10749817 -21.96939850]
[118.84606171 -9.40278244]
[108.52783203 1.53820527]
[96.46636200 10.52108097]
[83.02819061 17.27286530]
[87.33576965 31.64104843]
[91.64335632 46.00923157]
[95.95094299 60.37741852]
[111.99353027 62.01975250]
[126.06992340 69.88849640]
[135.87246704 82.69364929]
[150.36807251 78.83649445]
[164.86366272 74.97933197]
[168.87181091 61.75307465]
[178.82460022 52.32147980]
[192.03646851 49.08154297]
[205.01487732 52.77916336]
[214.38354492 62.34075546]
[228.95625305 58.78599548]
[243.52894592 55.23123169]
[258.10165405 51.67647171]
[262.33309937 36.91196823]
[273.39102173 26.25280380]
[288.30090332 22.56623650]
[303.05206299 26.84393501]
[313.67651367 37.93522263]
[317.31634521 52.85659409]
[312.99243164 67.59427643]
[301.86788940 78.18390656]
[286.93518066 81.77693176]
[272.21112061 77.40684509]
[261.65640259 66.24917603]
[247.08370972 69.80393219]
[232.51101685 73.35869598]
[217.93830872 76.91345978]
[212.22460938 92.27115631]
[198.35670471 101.30705261]
[181.66874695 100.31021118]
[168.72082520 89.47492981]
[154.22523499 93.33209229]
[139.72962952 97.18924713]
[137.58752441 113.17278290]
[129.28338623 126.99679565]
[116.17859650 136.39500427]
[119.58158112 151.00390625]
[130.24790955 162.68893433]
[125.59973145 176.83967590]
[129.00271606 191.44856262]
[135.06399536 177.72775269]
[146.72698975 168.29512024]
[161.41197205 165.23710632]
[175.87074280 169.23010254]
[186.90515137 179.39088440]
[192.07450867 193.47200012]
[190.23538208 208.35884094]
[181.79457092 220.75854492]
[168.61911011 227.92843628]
[153.62329102 228.28259277]
[140.12405396 221.74267578]
[131.10650635 209.75344849]
[131.10650635 224.75344849]
[131.10650635 239.75344849]
[131.10650635 254.75344849]
[131.10650635 269.75344849]
[131.10650635 284.75344849]
[131.10650635 299.75344849]
[131.10650635 314.75344849]
[131.10650635 329.75344849]
[131.10650635 344.75344849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[14 126]
[15 125]
[17 41]
[18 40]
[19 39]
[22 36]
[23 35]
[24 34]
[25 33]
[48 89]
[49 88]
[50 87]
[51 86]
[92 122]
[93 121]
[94 120]
[99 116]
[100 115]
[101 114]
[102 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
