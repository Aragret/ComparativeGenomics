%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCxxxxxxxxxxCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.59526062 287.73974609]
[87.59526062 272.73974609]
[87.59526062 257.73974609]
[87.59526062 242.73973083]
[87.59526062 227.73973083]
[87.59526062 212.73973083]
[87.59526062 197.73973083]
[87.59526062 182.73973083]
[87.59526062 167.73973083]
[87.59526062 152.73973083]
[73.63487244 147.25270081]
[63.42139053 158.23837280]
[53.20791245 169.22402954]
[57.13333130 184.14364624]
[52.34772873 198.80998230]
[40.37817001 208.54307556]
[25.04409981 210.23713684]
[11.23856354 203.35159302]
[3.36685777 190.08360291]
[3.94081497 174.66691589]
[12.77728748 162.02095032]
[27.05658913 156.18099976]
[42.22224808 159.01055908]
[52.43572617 148.02488708]
[62.64920425 137.03923035]
[59.26514816 130.34608459]
[44.28822708 129.51432800]
[52.49703217 116.95980072]
[49.11297607 110.26665497]
[34.21107483 111.97934723]
[19.30917168 113.69203949]
[6.48268986 122.95442963]
[-7.04478693 116.72092438]
[-22.08996773 124.53621674]
[-33.76476288 112.24250031]
[-25.18339157 97.62071991]
[-8.75747681 101.81901550]
[3.00312114 92.67913055]
[17.59648132 98.79013062]
[32.49838257 97.07744598]
[47.40028763 95.36475372]
[74.52574158 64.43337250]
[108.24044037 66.29959869]
[114.86893463 52.84363174]
[121.49743652 39.38766861]
[128.12593079 25.93170166]
[134.75444031 12.47573662]
[141.38293457 -0.98022836]
[148.01142883 -14.43619347]
[153.35293579 -28.45290756]
[157.36068726 -42.90759659]
[161.36842346 -57.36228561]
[160.64723206 -66.53462219]
[165.61280823 -72.07434082]
[169.92039490 -86.44252777]
[174.22798157 -100.81071472]
[170.77961731 -116.25154877]
[181.84593201 -126.22079468]
[186.15351868 -140.58897400]
[190.01068115 -155.08457947]
[193.41365051 -169.69346619]
[189.00888062 -184.88914490]
[199.43180847 -195.52923584]
[202.83479309 -210.13813782]
[206.23776245 -224.74702454]
[209.64074707 -239.35591125]
[195.96591187 -245.64747620]
[183.83769226 -254.56326294]
[173.75273132 -265.73815918]
[166.12399292 -278.71456909]
[161.26387024 -292.96112061]
[159.37139893 -307.89443970]
[160.52406311 -322.90295410]
[164.67465210 -337.37216187]
[171.65321350 -350.70950317]
[181.17398071 -362.36880493]
[192.84707642 -371.87268066]
[206.19450378 -378.83193970]
[220.66969299 -382.96157837]
[235.67988586 -384.09249878]
[250.61042786 -382.17840576]
[264.84991455 -377.29766846]
[277.81527710 -369.65014648]
[288.97555542 -359.54901123]
[297.87377930 -347.40789795]
[304.14553833 -333.72396851]
[307.53402710 -319.05758667]
[307.90048218 -304.00930786]
[305.22988892 -289.19537354]
[299.63162231 -275.22238159]
[291.33493042 -262.66253662]
[280.67956543 -252.03013611]
[268.10180664 -243.76060486]
[254.11676025 -238.19253540]
[239.29708862 -235.55397034]
[224.24963379 -235.95294189]
[220.84664917 -221.34403992]
[217.44367981 -206.73515320]
[214.04069519 -192.12626648]
[218.68888855 -177.97550964]
[208.02255249 -166.29048157]
[204.61956787 -151.68159485]
[206.21382141 -148.46820068]
[206.29176331 -144.30940247]
[204.42033386 -139.94476318]
[200.52169800 -136.28138733]
[196.21411133 -121.91320801]
[199.97059631 -107.50008392]
[188.59617615 -96.50312805]
[184.28858948 -82.13494110]
[179.98100281 -67.76676178]
[175.82310486 -53.35454178]
[171.81536865 -38.89985657]
[167.80763245 -24.44516563]
[180.26306152 -32.80353928]
[195.25642395 -33.24935913]
[208.18647766 -25.64581299]
[215.08512878 -12.32633114]
[213.83528137 2.62150717]
[204.82049561 14.61040115]
[190.80728149 19.96111298]
[176.09614563 17.03157425]
[165.20172119 6.72082758]
[161.46739197 -7.80769539]
[154.83889771 5.64827013]
[148.21040344 19.10423660]
[141.58189392 32.56019974]
[134.95339966 46.01616669]
[128.32490540 59.47213364]
[121.69640350 72.92810059]
[128.35992432 77.27810669]
[134.10867310 83.28061676]
[138.53338623 90.73136902]
[141.27330017 99.32548523]
[142.04060364 108.66958618]
[140.64169312 118.29972839]
[136.99415588 127.70442200]
[131.13781738 136.35156250]
[123.23937225 143.71781921]
[113.58994293 149.31904602]
[102.59526062 152.73973083]
[102.59526062 167.73973083]
[102.59526062 182.73973083]
[102.59526062 197.73973083]
[102.59526062 212.73973083]
[102.59526062 227.73973083]
[102.59526062 242.73973083]
[102.59526062 257.73974609]
[102.59526062 272.73974609]
[102.59526062 287.73974609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 25]
[12 24]
[13 23]
[29 41]
[30 40]
[31 39]
[33 37]
[43 130]
[44 129]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 114]
[51 113]
[52 112]
[54 111]
[55 110]
[56 109]
[58 107]
[59 106]
[60 102]
[61 101]
[63 99]
[64 98]
[65 97]
[66 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
