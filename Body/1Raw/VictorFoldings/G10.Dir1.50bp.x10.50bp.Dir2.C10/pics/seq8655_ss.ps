%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACxxxxxxxxxxUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.84748077 263.28659058]
[116.84748077 248.28657532]
[116.84748077 233.28657532]
[116.84748077 218.28657532]
[116.84748077 203.28657532]
[116.84748077 188.28657532]
[116.84748077 173.28657532]
[116.84748077 158.28657532]
[116.84748077 143.28657532]
[116.84748077 128.28657532]
[110.54192352 124.22580719]
[97.93079376 116.10426331]
[91.62522888 112.04349518]
[77.96898651 118.24890137]
[64.31274414 124.45430756]
[53.99335098 139.66909790]
[36.62421036 137.36413574]
[23.10001945 143.85231018]
[9.57582951 150.34046936]
[-3.94836020 156.82864380]
[-13.04404449 169.77386475]
[-27.86583900 168.30293274]
[-29.67010307 183.62442017]
[-39.48900604 195.52369690]
[-54.18937683 200.20373535]
[-69.08037567 196.17114258]
[-79.41033936 184.71272278]
[-81.88301086 169.48481750]
[-75.70938110 155.34657288]
[-62.85942459 146.80947876]
[-47.43351364 146.59767151]
[-34.35400391 154.77874756]
[-26.22566032 142.29759216]
[-10.43652534 143.30444336]
[3.08766460 136.81628418]
[16.61185455 130.32810974]
[30.13604355 123.83995056]
[34.46776199 112.50224304]
[45.73603821 107.00270844]
[58.10733795 110.79806519]
[71.76358032 104.59265900]
[85.41982269 98.38725281]
[95.04834747 86.88545227]
[98.75450897 72.35051727]
[102.46067047 57.81557846]
[106.16683197 43.28064346]
[98.36080170 29.80089378]
[102.32643127 15.11319733]
[115.22541809 7.75440979]
[109.81624603 -9.81604099]
[122.48385620 -21.92106628]
[125.88683319 -36.52995682]
[129.28981018 -51.13885117]
[112.31336212 -68.87866211]
[113.39990997 -94.87859344]
[133.99049377 -113.09441376]
[132.12289429 -127.97769165]
[130.25527954 -142.86097717]
[128.38766479 -157.74424744]
[126.52005005 -172.62753296]
[111.54656982 -174.37638855]
[97.42697144 -179.65846252]
[84.98214722 -188.16667175]
[74.93561554 -199.40635681]
[67.87147522 -212.72407532]
[64.20041656 -227.34552002]
[64.13588715 -242.42063904]
[67.68161774 -257.07299805]
[74.63148499 -270.45068359]
[84.58142090 -281.77597046]
[96.95294952 -290.39041138]
[111.02680969 -295.79318237]
[125.98475647 -297.67016602]
[140.95716858 -295.91226196]
[155.07356262 -290.62161255]
[167.51322937 -282.10586548]
[177.55294800 -270.86007690]
[184.60900879 -257.53808594]
[188.27120972 -242.91441345]
[188.32659912 -227.83926392]
[184.77197266 -213.18907166]
[177.81401062 -199.81558228]
[167.85720825 -188.49632263]
[155.48045349 -179.88937378]
[141.40333557 -174.49514771]
[143.27093506 -159.61186218]
[145.13854980 -144.72857666]
[147.00616455 -129.84530640]
[148.87377930 -114.96202087]
[162.94529724 -109.76660919]
[174.03662109 -119.86525726]
[185.12792969 -129.96391296]
[185.61703491 -145.76062012]
[197.18991089 -156.52371216]
[212.98057556 -155.86763000]
[223.62071228 -144.18159485]
[222.79771423 -128.39875793]
[210.99984741 -117.88276672]
[195.22657776 -118.87258911]
[184.13526917 -108.77394104]
[173.04394531 -98.67529297]
[176.75233459 -89.79161835]
[177.92654419 -80.42781830]
[176.58108521 -71.27852631]
[172.91368103 -62.99588394]
[167.28388977 -56.14299774]
[160.18026733 -51.15583801]
[152.17919922 -48.31597137]
[143.89869690 -47.73587418]
[140.49572754 -33.12697983]
[137.09274292 -18.51808739]
[143.22503662 -8.04419994]
[140.46272278 4.18644333]
[129.76034546 11.46057129]
[137.56080627 24.09736252]
[134.00929260 38.89065170]
[120.70176697 46.98680496]
[116.99560547 61.52173996]
[113.28944397 76.05667877]
[109.58328247 90.59161377]
[119.80416870 79.61283112]
[126.22439575 66.05625916]
[135.98722839 54.66824341]
[148.40382385 46.25229645]
[162.59808350 41.40224457]
[177.56848145 40.46029663]
[192.25872803 43.49291611]
[205.63229370 50.28612137]
[216.74557495 60.36059952]
[224.81440735 73.00550842]
[229.26950073 87.32864380]
[229.79649353 102.31938171]
[226.35820007 116.92000580]
[219.19721985 130.10031128]
[208.81883240 140.93031311]
[195.95532227 148.64587402]
[181.51429749 152.70257568]
[166.51470947 152.81420898]
[152.01490784 148.97288513]
[139.03886414 141.45031738]
[131.84748840 128.28657532]
[131.84748840 143.28657532]
[131.84748840 158.28657532]
[131.84748840 173.28657532]
[131.84748840 188.28657532]
[131.84748840 203.28657532]
[131.84748840 218.28657532]
[131.84748840 233.28657532]
[131.84748840 248.28657532]
[131.84748840 263.28659058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 42]
[14 41]
[15 40]
[17 37]
[18 36]
[19 35]
[20 34]
[22 32]
[43 120]
[44 119]
[45 118]
[46 117]
[49 114]
[51 111]
[52 110]
[53 109]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
