%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[215.21565247 395.39840698]
[214.90359497 380.40164185]
[214.59153748 365.40490723]
[214.27947998 350.40814209]
[213.96742249 335.41137695]
[213.65538025 320.41464233]
[213.34332275 305.41787720]
[213.03126526 290.42111206]
[212.71920776 275.42437744]
[208.11363220 261.14892578]
[199.60255432 248.79733276]
[191.09146118 236.44577026]
[174.95291138 240.31346130]
[158.52626038 237.70713806]
[144.31510925 228.99569702]
[134.49620056 215.48066711]
[130.58607483 199.20178223]
[133.20683289 182.62922668]
[141.98742676 168.28880310]
[132.96989441 156.30195618]
[123.95236969 144.31512451]
[107.61126709 149.79573059]
[90.37911987 149.44679260]
[74.27328491 143.30915833]
[61.17925644 132.10134888]
[52.62994003 117.13545990]
[37.92197800 120.08094025]
[23.21401596 123.02642822]
[8.50605392 125.97190857]
[1.16162848 139.77746582]
[-13.35784531 145.58425903]
[-28.19671631 140.65051270]
[-36.34852219 127.30577087]
[-33.96422958 111.85102081]
[-22.16963005 101.58352661]
[-6.53377151 101.35128021]
[5.56057167 111.26394653]
[20.26853371 108.31846619]
[34.97649384 105.37297821]
[49.68445587 102.42749786]
[49.71723557 96.96848297]
[50.34055328 91.54506683]
[51.54708862 86.22094727]
[37.89085007 80.01554108]
[24.23460770 73.81013489]
[8.76912403 78.07608795]
[-4.12347317 68.52828979]
[-4.55308771 52.49099350]
[7.80984449 42.26663589]
[23.48154068 45.69847488]
[30.44001579 60.15389633]
[44.09625626 66.35929871]
[57.75249863 72.56471252]
[62.97167206 65.84667969]
[69.24690247 60.10270691]
[76.39923096 55.49662781]
[84.22465515 52.15979385]
[92.50000000 50.18738556]
[92.50000000 35.18738556]
[92.50000000 20.18738365]
[92.50000000 5.18738413]
[82.91727448 -10.50182438]
[92.20125580 -25.36142159]
[91.88919830 -40.35817337]
[91.57714081 -55.35492706]
[77.03886414 -59.49375916]
[64.36733246 -67.73534393]
[54.68928909 -79.34683990]
[48.86529922 -93.29576111]
[47.41322708 -108.34178925]
[50.46218872 -123.14703369]
[57.74107742 -136.39501953]
[68.60265350 -146.90776062]
[82.08111572 -153.75044250]
[96.97797394 -156.31465149]
[111.96859741 -154.37234497]
[125.72003937 -148.09626770]
[137.00953674 -138.04446411]
[144.83322144 -125.11072540]
[148.49542236 -110.44512939]
[147.67048645 -95.35172272]
[142.43179321 -81.17260742]
[133.24514771 -69.16856384]
[120.92742157 -60.40700150]
[106.57389832 -55.66698456]
[106.88595581 -40.67023087]
[107.19801331 -25.67347717]
[115.72803497 -17.03947449]
[116.07328796 -4.50553036]
[107.50000000 5.18738413]
[107.50000000 20.18738365]
[107.50000000 35.18738556]
[107.50000000 50.18738556]
[124.84310150 56.17800903]
[138.89013672 67.98274994]
[147.77738953 84.03540039]
[150.32572937 102.20616913]
[146.19708252 120.08422852]
[135.93919373 135.29760742]
[144.95672607 147.28443909]
[153.97425842 159.27127075]
[166.84869385 155.18025208]
[180.33430481 155.27340698]
[193.10763550 159.52743530]
[203.91946411 167.51141357]
[211.71705627 178.43034363]
[215.74662781 191.20434570]
[215.62615967 204.57545471]
[211.38162231 217.23144531]
[203.44303894 227.93467712]
[211.95411682 240.28625488]
[220.46520996 252.63781738]
[219.75788879 237.65451050]
[222.12252808 222.84207153]
[227.45964050 208.82366943]
[235.54466248 196.18910217]
[246.03747559 185.46992493]
[258.49661255 177.11709595]
[272.39791870 171.48204041]
[287.15652466 168.80181885]
[302.15151978 169.18920898]
[316.75204468 172.62791443]
[330.34384155 178.97325134]
[342.35507202 187.95826721]
[352.28039551 199.20494080]
[359.70223999 212.24012756]
[364.30841064 226.51539612]
[365.90502930 241.43017578]
[364.42498779 256.35699463]
[359.93054199 270.66781616]
[352.61077881 283.76058960]
[342.77365112 295.08450317]
[330.83300781 304.16311646]
[317.29122925 310.61447144]
[302.71801758 314.16717529]
[287.72650146 314.67172241]
[272.94738770 312.10693359]
[259.00250244 306.58065796]
[246.47845459 298.32546997]
[235.90219116 287.68859863]
[227.71595764 275.11230469]
[228.02801514 290.10906982]
[228.34007263 305.10583496]
[228.65213013 320.10256958]
[228.96418762 335.09933472]
[229.27624512 350.09609985]
[229.58830261 365.09283447]
[229.90034485 380.08959961]
[230.21240234 395.08633423]
[232.80340576 414.29406738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 112]
[11 111]
[12 110]
[19 101]
[20 100]
[21 99]
[26 40]
[27 39]
[28 38]
[29 37]
[43 53]
[44 52]
[45 51]
[58 93]
[59 92]
[60 91]
[61 90]
[63 87]
[64 86]
[65 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
