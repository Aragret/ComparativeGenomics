%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCxxxxxxxxxxACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 301.58566284]
[92.50000000 286.58566284]
[92.50000000 271.58566284]
[92.50000000 256.58566284]
[92.50000000 241.58567810]
[92.50000000 226.58567810]
[92.50000000 211.58567810]
[92.50000000 196.58567810]
[92.50000000 181.58567810]
[92.50000000 166.58567810]
[84.23106384 165.12481689]
[76.20977020 162.64125061]
[68.56207275 159.17396545]
[61.40807343 154.77740479]
[54.86012268 149.52062988]
[49.02104950 143.48619080]
[43.98254776 136.76882935]
[39.82374573 129.47406006]
[25.69894218 134.52281189]
[11.57413864 139.57156372]
[12.03295231 154.69256592]
[7.79471684 169.21470642]
[-0.72534788 181.71525574]
[-12.69253254 190.96954346]
[-26.93441582 196.07090759]
[-42.05572128 196.51959229]
[-56.57501602 192.27162170]
[-69.06985474 183.74317932]
[-78.31610870 171.76980591]
[-83.40793610 157.52450562]
[-83.84648132 142.40290833]
[-79.58879089 127.88645172]
[-71.05197906 115.39733887]
[-59.07240677 106.15910339]
[-44.82369995 101.07682037]
[-29.70180702 100.64840698]
[-15.18821621 104.91582489]
[-2.70482111 113.46100616]
[6.52538252 125.44676971]
[20.65018463 120.39801025]
[34.77499008 115.34925079]
[33.08705902 96.45597839]
[36.76129532 77.84671021]
[45.50326157 61.01272964]
[58.61240387 47.30305099]
[75.03820038 37.81631851]
[93.46434784 33.31276703]
[112.41424561 34.15329742]
[130.36929321 40.27054977]
[138.62159729 27.74458694]
[146.87388611 15.21862507]
[155.12617493 2.69266295]
[144.70858765 -8.94941616]
[137.65115356 -22.87454796]
[134.42628479 -38.13790512]
[135.24656677 -53.70551300]
[140.05078125 -68.52429199]
[148.50840759 -81.59331512]
[160.04234314 -92.03137970]
[173.86831665 -99.13645172]
[189.04815674 -102.43286133]
[204.55351257 -101.70317078]
[219.33549500 -97.00247192]
[227.32542419 -109.69740295]
[235.31533813 -122.39232635]
[243.30525208 -135.08726501]
[251.29516602 -147.78219604]
[237.73866272 -141.36183167]
[222.81306458 -139.86956787]
[208.25378418 -143.47892761]
[195.75361633 -151.77021790]
[186.76593018 -163.77944946]
[182.33572388 -178.11029053]
[182.97808838 -193.09654236]
[188.61834717 -206.99572754]
[198.60070801 -218.19181824]
[211.76452637 -225.38305664]
[226.57925415 -227.73332214]
[241.32240295 -224.96934509]
[254.27980042 -217.41249084]
[263.94488525 -205.94139099]
[269.19393921 -191.88978577]
[269.41659546 -176.89144897]
[264.58566284 -162.68766785]
[276.28527832 -172.07482910]
[287.98489380 -181.46199036]
[299.68453979 -190.84915161]
[311.38415527 -200.23631287]
[323.08377075 -209.62347412]
[318.47531128 -224.08467102]
[319.40591431 -239.23387146]
[325.74975586 -253.02227783]
[336.64889526 -263.58511353]
[350.62927246 -269.49383545]
[365.80020142 -269.94934082]
[380.10992432 -264.89004517]
[391.62313843 -255.00015259]
[398.78280640 -241.61720276]
[400.62066650 -226.55111694]
[396.88809204 -211.83947754]
[388.08996582 -199.47189331]
[375.41607666 -191.12100220]
[360.58053589 -187.91616821]
[345.58969116 -190.29083252]
[332.47094727 -197.92384338]
[320.77133179 -188.53668213]
[309.07168579 -179.14952087]
[297.37207031 -169.76235962]
[285.67245483 -160.37519836]
[273.97280884 -150.98803711]
[263.99008179 -139.79226685]
[256.00018311 -127.09734344]
[248.01026917 -114.40241241]
[240.02035522 -101.70748138]
[232.03042603 -89.01255035]
[242.01651001 -78.59596252]
[249.21264648 -66.07730865]
[253.19345093 -52.18746185]
[253.72142029 -37.73859024]
[250.76107788 -23.57669449]
[244.48135376 -10.53207207]
[235.24589539 0.62937456]
[223.59204102 9.25109482]
[210.19958496 14.82451725]
[195.85104370 17.01904106]
[181.38606262 15.70164680]
[167.65213013 10.94495201]
[159.39984131 23.47091484]
[151.14755249 35.99687576]
[142.89526367 48.52283859]
[152.77671814 58.71417236]
[160.28956604 70.75841522]
[165.09661865 84.11501312]
[166.98213196 98.18453217]
[165.86149597 112.33553314]
[161.78500366 125.93291473]
[154.93559265 138.36642456]
[145.62068176 149.07804871]
[134.25831604 157.58706665]
[121.35844421 163.51156616]
[107.50000000 166.58567810]
[107.50000000 181.58567810]
[107.50000000 196.58567810]
[107.50000000 211.58567810]
[107.50000000 226.58567810]
[107.50000000 241.58567810]
[107.50000000 256.58566284]
[107.50000000 271.58566284]
[107.50000000 286.58566284]
[107.50000000 301.58566284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 41]
[19 40]
[20 39]
[49 130]
[50 129]
[51 128]
[52 127]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[89 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
