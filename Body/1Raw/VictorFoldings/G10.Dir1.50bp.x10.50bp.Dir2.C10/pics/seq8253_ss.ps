%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUxxxxxxxxxxCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.76697540 580.86822510]
[96.76697540 565.86822510]
[96.76697540 550.86822510]
[96.76697540 535.86822510]
[96.76697540 520.86822510]
[96.76697540 505.86819458]
[96.76697540 490.86819458]
[96.76697540 475.86819458]
[96.76697540 460.86819458]
[96.76697540 445.86819458]
[82.03716278 443.13455200]
[68.05679321 437.73928833]
[55.30250931 429.86477661]
[44.20946503 419.77801514]
[35.15643692 407.82138062]
[28.45290756 394.40121460]
[24.32849693 379.97390747]
[22.92507362 365.03042603]
[24.29189491 350.07952881]
[28.38387108 335.63055420]
[35.06305313 322.17599487]
[44.10327911 310.17471313]
[55.19783783 300.03631592]
[67.96987152 292.10717773]
[81.98518372 286.65853882]
[96.76697540 283.87741089]
[96.76697540 268.87741089]
[83.28391266 262.49990845]
[73.86817932 250.85287476]
[70.42898560 236.21276855]
[73.70063019 221.47109985]
[83.08647919 209.56341553]
[96.76697540 202.88470459]
[96.76697540 187.88470459]
[96.76697540 172.88470459]
[96.76697540 157.88470459]
[96.76697540 142.88470459]
[95.85546112 127.91242218]
[94.03580475 113.02320099]
[85.78184509 101.73764801]
[91.07497406 88.79645538]
[89.25531769 73.90723419]
[87.43566132 59.01802063]
[85.61600494 44.12879944]
[76.26174164 31.36916351]
[82.39794922 17.79727173]
[80.57829285 2.90805197]
[78.75862885 -11.98116684]
[76.93897247 -26.87038612]
[66.58255768 -16.01936340]
[51.59217834 -15.48226261]
[40.48574066 -25.56427765]
[39.57419968 -40.53655624]
[49.37551498 -51.89147568]
[64.32033539 -53.17688751]
[75.91667938 -43.66232300]
[75.91667938 -58.66232300]
[75.91667938 -73.66232300]
[68.21082306 -60.79298782]
[57.79085541 -50.00297928]
[45.19815063 -41.85290527]
[31.08696747 -36.76619720]
[16.19046783 -35.00714874]
[1.28260314 -36.66714478]
[-12.86207676 -41.65994263]
[-25.50867653 -49.72613907]
[-36.00013351 -60.44664764]
[-43.79135895 -73.26448059]
[-48.47755814 -87.51367188]
[-49.81524658 -102.45391083]
[-47.73493576 -117.30895233]
[-42.34469986 -131.30700684]
[-33.92459869 -143.72077942]
[-22.91210175 -153.90531921]
[-9.87936783 -161.33148193]
[4.49647713 -165.61343384]
[19.46852684 -166.52870178]
[34.25889969 -164.02972412]
[48.09915543 -158.24635315]
[60.27021027 -149.47906494]
[70.13970947 -138.18334961]
[77.19488525 -124.94611359]
[81.06916809 -110.45508575]
[81.56127167 -95.46301270]
[88.84079742 -108.57820892]
[96.12033081 -121.69340515]
[96.05249786 -137.51446533]
[108.99414825 -144.88758850]
[111.39431000 -161.67077637]
[128.18605042 -164.01046753]
[135.08270264 -148.52264404]
[122.10934448 -137.60806274]
[122.69786072 -122.72508240]
[109.23552704 -114.41387939]
[101.95599365 -101.29867554]
[94.67646790 -88.18347931]
[90.91667938 -73.66232300]
[90.91667938 -58.66232300]
[90.91667938 -43.66232300]
[91.82819366 -28.69004440]
[93.64785004 -13.80082512]
[95.46750641 1.08839428]
[97.28716278 15.97761345]
[106.51127625 27.67227364]
[100.50522614 42.30914307]
[102.32488251 57.19836044]
[104.14453888 72.08757782]
[105.96419525 86.97679901]
[114.21815491 98.26235199]
[108.92502594 111.20354462]
[110.74468231 126.09276581]
[121.10109711 115.24173737]
[136.09147644 114.70463562]
[147.19792175 124.78665161]
[148.10945129 139.75892639]
[138.30813599 151.11384583]
[123.36331940 152.39926147]
[111.76697540 142.88470459]
[111.76697540 157.88470459]
[111.76697540 172.88470459]
[111.76697540 187.88470459]
[111.76697540 202.88470459]
[125.44747162 209.56341553]
[134.83332825 221.47109985]
[138.10496521 236.21276855]
[134.66577148 250.85287476]
[125.25003815 262.49990845]
[111.76697540 268.87741089]
[111.76697540 283.87741089]
[126.54876709 286.65853882]
[140.56407166 292.10717773]
[153.33610535 300.03631592]
[164.43066406 310.17471313]
[173.47090149 322.17599487]
[180.15007019 335.63055420]
[184.24205017 350.07952881]
[185.60887146 365.03042603]
[184.20545959 379.97390747]
[180.08103943 394.40121460]
[173.37751770 407.82138062]
[164.32447815 419.77801514]
[153.23144531 429.86477661]
[140.47715759 437.73928833]
[126.49678802 443.13455200]
[111.76697540 445.86819458]
[111.76697540 460.86819458]
[111.76697540 475.86819458]
[111.76697540 490.86819458]
[111.76697540 505.86819458]
[111.76697540 520.86822510]
[111.76697540 535.86822510]
[111.76697540 550.86822510]
[111.76697540 565.86822510]
[111.76697540 580.86822510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[26 129]
[27 128]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 111]
[39 110]
[41 108]
[42 107]
[43 106]
[44 105]
[46 103]
[47 102]
[48 101]
[49 100]
[56 99]
[57 98]
[58 97]
[84 96]
[85 95]
[86 94]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
