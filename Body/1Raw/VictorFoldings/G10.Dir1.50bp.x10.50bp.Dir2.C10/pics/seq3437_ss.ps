%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUxxxxxxxxxxUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.93189240 91.57660675]
[114.32076263 99.69815063]
[107.75550079 112.04273987]
[93.80078125 112.91297913]
[81.18965149 121.03452301]
[68.57852173 129.15606689]
[56.40668488 137.92227173]
[44.70706177 147.30943298]
[33.00743866 156.69659424]
[21.30781364 166.08375549]
[9.60819054 175.47091675]
[24.47044563 177.49905396]
[34.68088913 188.48754883]
[35.61408997 203.45848083]
[26.84729958 215.62989807]
[12.35195732 219.48802185]
[-1.30540204 213.28507996]
[-7.93786240 199.83105469]
[-4.54063559 185.22044373]
[-17.47869110 192.81034851]
[-30.41674805 200.40025330]
[-43.35480499 207.99017334]
[-48.77462769 223.08999634]
[-64.00524902 228.13061523]
[-77.36302948 219.24528503]
[-78.60103607 203.25006104]
[-66.76956177 192.41513062]
[-50.94471359 195.05210876]
[-38.00665665 187.46220398]
[-25.06859970 179.87229919]
[-12.13054371 172.28237915]
[0.22102867 163.77130127]
[11.92065239 154.38414001]
[23.62027550 144.99697876]
[35.31990051 135.60980225]
[47.01952362 126.22264862]
[32.72993851 121.66108704]
[27.18820190 107.72232819]
[34.44487381 94.59446716]
[49.19591141 91.87290955]
[60.65950394 101.54689789]
[60.45697784 116.54493713]
[73.06810760 108.42339325]
[85.67923737 100.30184937]
[92.24449921 87.95726013]
[106.19921875 87.08702087]
[118.81034851 78.96547699]
[112.01538086 60.56547165]
[109.90277863 41.07288742]
[112.59574127 21.65990067]
[119.92861176 3.49296641]
[131.45703125 -12.33726883]
[146.48490906 -24.88144493]
[164.10641479 -33.38842773]
[183.26058960 -37.35026550]
[202.79525757 -36.53255081]
[221.53627014 -30.98825264]
[238.35812378 -21.05431938]
[248.57160950 -32.03998566]
[258.78509521 -43.02565002]
[268.99856567 -54.01131439]
[279.21203613 -64.99697876]
[289.42553711 -75.98264313]
[299.63900757 -86.96830750]
[289.77145386 -98.28417969]
[281.14077759 -110.56951141]
[273.84158325 -123.68971252]
[267.95385742 -137.50102234]
[263.54205322 -151.85211182]
[260.65454102 -166.58573914]
[259.32296753 -181.54049683]
[259.56192017 -196.55250549]
[261.36874390 -211.45730591]
[264.72369385 -226.09158325]
[269.58996582 -240.29499817]
[275.91427612 -253.91194153]
[283.62728882 -266.79318237]
[292.64456177 -278.79763794]
[302.86724854 -289.79373169]
[314.18338013 -299.66104126]
[326.46890259 -308.29138184]
[339.58929443 -315.59027100]
[353.40072632 -321.47766113]
[367.75192261 -325.88912964]
[382.48562622 -328.77627563]
[397.44042969 -330.10748291]
[412.45242310 -329.86816406]
[427.35717773 -328.06097412]
[441.99139404 -324.70568848]
[456.19467163 -319.83905029]
[469.81146240 -313.51443481]
[482.69253540 -305.80108643]
[494.69674683 -296.78350830]
[505.69262695 -286.56057739]
[515.55963135 -275.24420166]
[524.18969727 -262.95846558]
[531.48822021 -249.83790588]
[537.37530518 -236.02632141]
[541.78643799 -221.67501831]
[544.67321777 -206.94123840]
[546.00402832 -191.98641968]
[545.76440430 -176.97441101]
[543.95684814 -162.06970215]
[540.60119629 -147.43559265]
[535.73419189 -133.23240662]
[529.40924072 -119.61578369]
[521.69555664 -106.73490143]
[512.67773438 -94.73089600]
[502.45449829 -83.73528290]
[491.13790894 -73.86854553]
[478.85195923 -65.23878479]
[465.73123169 -57.94055557]
[451.91949463 -52.05381393]
[437.56808472 -47.64306641]
[422.83422852 -44.75663376]
[407.87939453 -43.42614746]
[392.86737061 -43.66617584]
[377.96270752 -45.47409821]
[363.32867432 -48.83010101]
[349.12561035 -53.69741821]
[335.50915527 -60.02271271]
[322.62844849 -67.73669434]
[310.62466431 -76.75482941]
[300.41119385 -65.76916504]
[290.19769287 -54.78350067]
[279.98422241 -43.79783249]
[269.77075195 -32.81216812]
[259.55728149 -21.82650566]
[249.34378052 -10.84084034]
[256.13476562 -2.07752609]
[261.64459229 7.54548931]
[265.76599121 17.84216309]
[268.41870117 28.61333656]
[269.55072021 39.65058136]
[269.13955688 50.74023819]
[267.19256592 61.66754532]
[263.74688721 72.22081757]
[258.86868286 82.19551086]
[252.65185547 91.39822388]
[245.21630859 99.65042114]
[236.70558167 106.79193115]
[227.28410339 112.68399811]
[217.13397217 117.21204376]
[206.45150757 120.28783417]
[195.44338989 121.85124969]
[184.32269287 121.87143707]
[173.30473328 120.34739685]
[162.60298157 117.30807495]
[152.42478943 112.81173706]
[142.96748352 106.94491577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[4 44]
[5 43]
[6 42]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[19 31]
[20 30]
[21 29]
[22 28]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
