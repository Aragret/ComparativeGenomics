%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCxxxxxxxxxxUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.49801636 85.95378876]
[127.40486145 93.27288818]
[114.31170654 100.59199524]
[106.98922729 112.50304413]
[93.00740051 112.50115967]
[79.91424561 119.82025909]
[66.82109070 127.13936615]
[58.55057907 140.62673950]
[43.66589737 140.08317566]
[30.57274055 147.40228271]
[17.47958755 154.72138977]
[13.20211792 166.93438721]
[2.09306359 172.74884033]
[-9.60550117 169.51605225]
[-22.84808731 176.56118774]
[-36.09067154 183.60632324]
[-49.33325958 190.65145874]
[-62.57584381 197.69659424]
[-75.81842804 204.74172974]
[-74.71051025 219.93028259]
[-79.88222504 234.25415039]
[-90.43754578 245.23164368]
[-104.54769897 250.96081543]
[-119.76802063 250.44906616]
[-133.46148682 243.78507996]
[-143.25563049 232.12339783]
[-147.45355225 217.48449707]
[-145.32792664 202.40466309]
[-137.24705505 189.49653625]
[-124.61099243 180.99656677]
[-109.60899353 178.37739563]
[-94.84026337 182.09283447]
[-82.86356354 191.49914551]
[-69.62097931 184.45401001]
[-56.37839508 177.40887451]
[-43.13580704 170.36373901]
[-29.89322281 163.31860352]
[-16.65063667 156.27346802]
[-8.21006584 140.91909790]
[10.16048145 141.62823486]
[23.25363541 134.30912781]
[36.34679031 126.99002838]
[43.68078995 114.02616119]
[59.50198364 114.04621124]
[72.59513855 106.72711182]
[85.68829346 99.40800476]
[93.01077271 87.49695587]
[106.99259949 87.49884033]
[120.08575439 80.17974091]
[133.17890930 72.86063385]
[126.37419128 58.28931427]
[120.68264771 43.24853134]
[116.13634491 27.82318115]
[112.76091766 12.10032654]
[110.57537079 -3.83129311]
[109.59199524 -19.88175964]
[109.81630707 -35.96049118]
[111.24699402 -51.97674942]
[113.87593842 -67.84014893]
[117.68827820 -83.46116638]
[122.66245270 -98.75166321]
[128.77033997 -113.62535095]
[135.97746277 -127.99831390]
[144.24308777 -141.78944397]
[153.52052307 -154.92094421]
[163.75741577 -167.31872559]
[174.89593506 -178.91284180]
[186.87318420 -189.63789368]
[199.62156677 -199.43339539]
[213.06910706 -208.24407959]
[227.13989258 -216.02024841]
[241.75448608 -222.71807861]
[256.83038330 -228.29980469]
[272.28253174 -232.73393250]
[288.02368164 -235.99551392]
[303.96499634 -238.06616211]
[320.01647949 -238.93423462]
[336.08761597 -238.59487915]
[352.08761597 -237.05003357]
[367.92626953 -234.30847168]
[383.51412964 -230.38571167]
[398.76330566 -225.30390930]
[413.58767700 -219.09178162]
[427.90365601 -211.78445435]
[441.63043213 -203.42317200]
[454.69058228 -194.05516052]
[467.01043701 -183.73332214]
[477.45025635 -194.50413513]
[487.89004517 -205.27494812]
[498.32986450 -216.04574585]
[508.76968384 -226.81655884]
[509.95806885 -242.81553650]
[523.28820801 -251.74226379]
[538.53442383 -246.74891663]
[544.00103760 -231.66596985]
[535.49462891 -218.06376648]
[519.54046631 -216.37675476]
[509.10067749 -205.60594177]
[498.66085815 -194.83512878]
[488.22103882 -184.06433105]
[477.78125000 -173.29351807]
[487.22003174 -162.81311035]
[495.94787598 -151.73342896]
[503.92678833 -140.10263062]
[511.12216187 -127.97122955]
[517.50262451 -115.39195251]
[523.04046631 -102.41944885]
[527.71160889 -89.11009216]
[531.49566650 -75.52172089]
[534.37622070 -61.71338272]
[536.34075928 -47.74508667]
[537.38067627 -33.67753220]
[537.49139404 -19.57186127]
[536.67248535 -5.48937416]
[534.92749023 8.50872421]
[532.26391602 22.36159325]
[528.69335938 36.00902557]
[524.23126221 49.39170074]
[518.89703369 62.45145416]
[512.71386719 75.13151550]
[505.70852661 87.37676239]
[497.91152954 99.13397980]
[489.35668945 110.35204315]
[480.08117676 120.98218536]
[470.12530518 130.97819519]
[459.53231812 140.29663086]
[448.34823608 148.89695740]
[436.62164307 156.74177551]
[424.40350342 163.79698181]
[411.74691772 170.03190613]
[398.70684814 175.41940308]
[385.33996582 179.93606567]
[371.70440674 183.56222534]
[357.85934448 186.28211975]
[343.86502075 188.08387756]
[329.78222656 188.95967102]
[315.67214966 188.90565491]
[301.59609985 187.92205811]
[287.61529541 186.01312256]
[273.79049683 183.18711853]
[260.18176270 179.45631409]
[246.84826660 174.83689880]
[233.84794617 169.34892273]
[221.23731995 163.01622009]
[209.07121277 155.86630249]
[197.40249634 147.93022156]
[186.28189087 139.24243164]
[175.75776672 129.84069824]
[165.87585449 119.76583862]
[156.67912292 109.06164551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[5 46]
[6 45]
[7 44]
[9 42]
[10 41]
[11 40]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
