%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGACAUCxxxxxxxxxxAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.69046021 260.06552124]
[98.69046021 245.06552124]
[98.69046021 230.06552124]
[98.69046021 215.06552124]
[98.69046021 200.06552124]
[98.69046021 185.06552124]
[98.69046021 170.06552124]
[98.69046021 155.06552124]
[98.69046021 140.06552124]
[98.69046021 125.06552124]
[95.56199646 110.39539337]
[86.60016632 98.36685944]
[75.22825623 88.58525848]
[63.85634995 78.80365753]
[52.48444366 69.02205658]
[41.11253738 59.24045181]
[29.74063110 49.45885086]
[23.23787498 47.83647537]
[19.17654610 43.76092529]
[18.11956596 39.05120468]
[7.14812374 28.82244873]
[-3.82331896 18.59369278]
[-14.79476166 8.36493683]
[-42.41981125 12.79317188]
[-62.80155945 -13.24915314]
[-77.74079132 -14.59801292]
[-92.68001556 -15.94687366]
[-107.61924744 -17.29573441]
[-122.59223175 -18.19565010]
[-136.61839294 -10.87598705]
[-149.10772705 -18.99175644]
[-164.10096741 -19.44191742]
[-179.09420776 -19.89207840]
[-194.08746338 -20.34223938]
[-209.08070374 -20.79239845]
[-224.07394409 -21.24255943]
[-239.06718445 -21.69272041]
[-251.68542480 -11.78517151]
[-267.26504517 -15.61333370]
[-273.85470581 -30.24056816]
[-266.39938354 -44.44611359]
[-250.61814880 -47.33269119]
[-238.61701965 -36.68596268]
[-223.62377930 -36.23580170]
[-208.63053894 -35.78564453]
[-193.63729858 -35.33548355]
[-178.64405823 -34.88532257]
[-163.65080261 -34.43516159]
[-148.65756226 -33.98500061]
[-135.70382690 -41.33686066]
[-122.14206696 -33.18889236]
[-119.31110382 -35.37839890]
[-115.26084137 -36.27472687]
[-110.62525177 -35.31180954]
[-106.27038574 -32.23496246]
[-91.33116150 -30.88610268]
[-76.39192963 -29.53724289]
[-61.45270157 -28.18838310]
[-55.96697998 -33.30276108]
[-68.43070984 -41.64874268]
[-81.81124878 -48.42821121]
[-83.91486359 -63.27997208]
[-72.94337463 -73.50868225]
[-58.27526093 -70.37078857]
[-52.44887161 -56.54872894]
[-44.99553680 -43.53151703]
[-39.50981522 -48.64589310]
[-39.80994797 -63.64289093]
[-40.11008072 -78.63988495]
[-54.53357315 -83.24874115]
[-66.67758179 -92.29317474]
[-75.22481537 -104.79211426]
[-79.24813080 -119.38977051]
[-78.31110382 -134.50270081]
[-72.51538849 -148.49157715]
[-62.48965454 -159.83895874]
[-49.32141876 -167.31401062]
[-34.43906784 -170.10585022]
[-19.45693588 -167.91168213]
[-6.00016832 -160.96948242]
[4.47154474 -150.03230286]
[10.82230949 -136.28651428]
[12.36324310 -121.22317505]
[8.92719746 -106.47623444]
[0.88688695 -93.64532471]
[-10.88553429 -84.12226105]
[-25.11308098 -78.94001770]
[-24.81295013 -63.94302368]
[-24.51281738 -48.94602585]
[-9.68319702 -41.38154602]
[-0.95670515 -28.66993523]
[0.48841086 -14.55108166]
[-4.56600571 -2.60650563]
[6.40543699 7.62225008]
[17.37687874 17.85100555]
[28.34832191 28.07976151]
[39.52223206 38.08694458]
[50.89413834 47.86854553]
[62.26604462 57.65015030]
[73.63795471 67.43175507]
[85.00985718 77.21335602]
[96.38176727 86.99495697]
[110.87710571 90.85307312]
[125.60689545 88.01877594]
[140.33668518 85.18447113]
[129.79747009 74.51091003]
[131.36740112 59.59329605]
[143.89767456 51.34756851]
[158.21929932 55.80753708]
[163.85241699 69.70962524]
[156.67521667 82.88082886]
[171.61445618 81.53196716]
[186.55368042 80.18311310]
[199.64199829 70.30242157]
[214.63551331 76.94518280]
[216.11019897 93.27789307]
[202.54901123 102.49885559]
[187.90254211 95.12233734]
[172.96331787 96.47119904]
[158.02407837 97.82006073]
[143.17098999 99.91426086]
[128.44119263 102.74856567]
[113.71141052 105.58287048]
[111.46613312 104.97944641]
[109.25702667 104.27606964]
[110.97373199 89.37462616]
[116.57886505 75.46123505]
[125.67143250 63.53121948]
[137.60098267 54.43803787]
[151.51408386 48.83219910]
[166.41543579 47.11473083]
[181.23901367 49.40850067]
[194.92439270 55.54941177]
[206.49250793 65.09815979]
[215.11582947 77.37164307]
[220.17744446 91.49184418]
[221.31526184 106.44862366]
[218.44789124 121.17201233]
[211.78044128 134.60871887]
[201.78991699 145.79751587]
[189.19097900 153.93798828]
[174.88497925 158.44775391]
[159.89529419 159.00421143]
[145.29429626 155.56755066]
[132.12648010 148.38362122]
[121.33386993 137.96635437]
[113.69046021 125.06552124]
[113.69046021 140.06552124]
[113.69046021 155.06552124]
[113.69046021 170.06552124]
[113.69046021 185.06552124]
[113.69046021 200.06552124]
[113.69046021 215.06552124]
[113.69046021 230.06552124]
[113.69046021 245.06552124]
[113.69046021 260.06552124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 125]
[12 102]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[20 96]
[21 95]
[22 94]
[23 93]
[25 58]
[26 57]
[27 56]
[28 55]
[29 51]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[67 89]
[68 88]
[69 87]
[103 123]
[104 122]
[105 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
