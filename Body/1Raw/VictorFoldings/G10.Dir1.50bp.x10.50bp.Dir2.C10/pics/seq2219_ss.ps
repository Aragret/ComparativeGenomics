%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGxxxxxxxxxxUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.34516907 257.04956055]
[114.34516907 242.04956055]
[114.34516907 227.04956055]
[114.34516907 212.04956055]
[114.34516907 197.04956055]
[114.34516907 182.04956055]
[114.34516907 167.04956055]
[114.34516907 152.04956055]
[114.34516907 137.04956055]
[114.34516907 122.04956055]
[100.71401215 124.44735718]
[88.79694366 119.63967896]
[81.82703400 110.04180145]
[66.96398926 112.06414032]
[52.10094452 114.08647156]
[37.23789597 116.10881042]
[22.37484932 118.13114166]
[7.51180172 120.15348053]
[-7.35124493 122.17581177]
[-22.21429253 124.19814301]
[-25.65674973 127.08102417]
[-29.46059990 128.53077698]
[-33.11777878 128.61392212]
[-36.19699097 127.55920410]
[-38.39109039 125.71711731]
[-53.37080383 126.49696350]
[-68.35051727 127.27680969]
[-72.25336456 141.89265442]
[-80.48343658 154.58599854]
[-92.23443604 164.11328125]
[-106.35512543 169.54112244]
[-121.46209717 170.33773804]
[-136.07531738 166.42510986]
[-148.76315308 158.18652344]
[-158.28256226 146.42913818]
[-163.70092773 132.30482483]
[-164.48742676 117.19731903]
[-160.56500244 102.58671570]
[-152.31793213 89.90441132]
[-140.55416870 80.39288330]
[-126.42621613 74.98397827]
[-111.31819153 74.20760345]
[-96.71022034 78.13982391]
[-84.03344727 86.39539337]
[-74.52980042 98.16551971]
[-69.13036346 112.29709625]
[-54.15065002 111.51725006]
[-39.17093277 110.73740387]
[-24.23662567 109.33509827]
[-9.37357903 107.31276703]
[5.48946762 105.29042816]
[20.35251427 103.26809692]
[35.21556091 101.24575806]
[50.07860947 99.22342682]
[64.94165802 97.20109558]
[79.80470276 95.17875671]
[89.62361908 79.91128540]
[109.13742828 77.31320953]
[124.90085602 91.51977539]
[134.16580200 79.72312927]
[143.43075562 67.92649078]
[152.69570923 56.12985229]
[161.96066284 44.33321381]
[149.71356201 52.99397278]
[135.35476685 57.33271790]
[120.36090851 56.90324783]
[106.27398682 51.74973679]
[94.54270935 42.40216446]
[86.37351990 29.82184792]
[82.60655212 15.30255318]
[83.62918854 0.33745405]
[89.33627319 -13.53443050]
[99.14088440 -24.88650513]
[112.03470612 -32.55131912]
[126.69173431 -35.74061203]
[141.60462952 -34.12640381]
[155.23973083 -27.87469101]
[166.19480896 -17.62841034]
[173.34323120 -4.44129276]
[175.94984436 10.33048916]
[173.74679565 25.16717720]
[180.09391785 11.57622623]
[186.44105530 -2.01472521]
[192.78817749 -15.60567570]
[194.01202393 -32.51539230]
[210.59968567 -36.02046204]
[218.55970764 -21.05134392]
[206.37913513 -9.25854683]
[200.03199768 4.33240414]
[193.68487549 17.92335510]
[187.33775330 31.51430702]
[192.09191895 37.31497574]
[200.18736267 24.68708038]
[214.69879150 28.48425102]
[215.57156372 43.45883942]
[201.60028076 48.91631699]
[206.35446167 54.71698761]
[220.92716980 51.16222763]
[235.49986267 47.60746384]
[250.07257080 44.05270386]
[252.36125183 29.02504921]
[260.23083496 16.01973534]
[272.48126221 7.01997805]
[287.24441528 3.39817429]
[302.26904297 5.70662260]
[315.26400757 13.59330177]
[324.24761963 25.85555077]
[327.85000610 40.62346649]
[325.52178955 55.64504623]
[317.61804199 68.62960815]
[305.34396362 77.59710693]
[290.57135010 81.18005371]
[275.55282593 78.83208466]
[262.57867432 70.91124725]
[253.62733459 58.62540436]
[239.05462646 62.18016815]
[224.48193359 65.73493195]
[209.90922546 69.28968811]
[186.35501099 67.01729584]
[173.75729370 53.59816360]
[164.49234009 65.39479828]
[155.22740173 77.19144440]
[145.96244812 88.98808289]
[136.69749451 100.78472137]
[147.01803589 89.89957428]
[160.37414551 83.07208252]
[175.24147034 81.08147430]
[189.92321777 84.15493011]
[202.74377441 91.94168854]
[212.23991394 103.55303192]
[217.32783508 117.66376495]
[217.42689514 132.66343689]
[212.52574158 146.84013367]
[203.18376160 158.57588196]
[190.46716309 166.53125000]
[175.82728577 169.79832458]
[160.93496704 168.00422668]
[147.48986816 161.35371399]
[137.02647400 150.60580444]
[130.73898315 136.98716736]
[129.34516907 122.04956055]
[129.34516907 137.04956055]
[129.34516907 152.04956055]
[129.34516907 167.04956055]
[129.34516907 182.04956055]
[129.34516907 197.04956055]
[129.34516907 212.04956055]
[129.34516907 227.04956055]
[129.34516907 242.04956055]
[129.34516907 257.04956055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 56]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[20 49]
[25 48]
[26 47]
[27 46]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[81 91]
[82 90]
[83 89]
[84 88]
[97 118]
[98 117]
[99 116]
[100 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
