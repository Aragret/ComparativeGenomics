%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUxxxxxxxxxxACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.89156342 275.07351685]
[110.58358765 260.07669067]
[110.27561188 245.07984924]
[109.96763611 230.08300781]
[109.65965271 215.08616638]
[109.35167694 200.08932495]
[109.04370117 185.09249878]
[108.73572540 170.09565735]
[108.42774200 155.09881592]
[105.82302094 140.32670593]
[100.98320770 126.12895203]
[88.58599854 123.52465057]
[78.86784363 115.39871979]
[64.72052765 120.38404846]
[50.57321167 125.36936951]
[36.42589569 130.35469055]
[22.27857780 135.34001160]
[8.13126087 140.32533264]
[6.58970499 157.37467957]
[-2.19419146 172.00399780]
[-16.42605400 181.31800842]
[-33.23896790 183.49778748]
[-49.27094650 178.15586853]
[-61.33721924 166.40399170]
[-75.26793671 171.96592712]
[-89.19864655 177.52786255]
[-96.82353973 191.64312744]
[-112.63819885 194.34053040]
[-124.51097870 183.55087280]
[-123.33409119 167.55105591]
[-110.01035309 158.61474609]
[-94.76058960 163.59713745]
[-80.82987213 158.03520203]
[-66.89915466 152.47326660]
[-67.05789948 139.41864014]
[-62.74236298 127.06299591]
[-54.44982910 116.89640808]
[-43.15859604 110.15285492]
[-30.21259117 107.66044617]
[-17.16140938 109.73977661]
[-5.57484007 116.16288757]
[3.14593911 126.17801666]
[17.29325485 121.19269562]
[31.44057274 116.20737457]
[45.58788681 111.22205353]
[59.73520660 106.23672485]
[73.88252258 101.25140381]
[81.60611725 81.41629791]
[101.51947784 73.89674377]
[106.64978027 59.80135727]
[111.78007507 45.70596695]
[105.35030365 31.51809502]
[110.75395203 17.29644966]
[124.31954193 11.25407314]
[121.76879883 -4.36015940]
[133.39245605 -13.67357063]
[138.52276611 -27.76895905]
[143.65306091 -41.86434937]
[148.78337097 -55.95973969]
[135.37728882 -62.72828293]
[122.86585236 -71.03492737]
[111.42471313 -80.76306915]
[101.21448517 -91.77613831]
[92.37850952 -103.91952515]
[85.04082489 -117.02275848]
[79.30443573 -130.90188599]
[75.24988556 -145.36207581]
[72.93407440 -160.20031738]
[72.38953400 -175.20831299]
[73.62389374 -190.17536926]
[76.61982727 -204.89137268]
[81.33528137 -219.14971924]
[87.70405579 -232.75027466]
[95.63674164 -245.50209045]
[105.02198029 -257.22616577]
[115.72801208 -267.75787354]
[127.60454559 -276.94943237]
[140.48484802 -284.67172241]
[154.18811035 -290.81640625]
[168.52195740 -295.29718018]
[183.28514099 -298.05117798]
[198.27044678 -299.03970337]
[213.26748657 -298.24887085]
[228.06570435 -295.68981934]
[242.45739746 -291.39846802]
[256.24050903 -285.43505859]
[269.22152710 -277.88327026]
[281.21823120 -268.84918213]
[292.06222534 -258.45956421]
[301.60128784 -246.86027527]
[309.70144653 -234.21418762]
[316.24902344 -220.69880676]
[321.15209961 -206.50387573]
[324.34185791 -191.82865906]
[325.77349854 -176.87918091]
[325.42691040 -161.86531067]
[323.30700684 -146.99781799]
[319.44348145 -132.48542786]
[313.89065552 -118.53185272]
[306.72640991 -105.33299255]
[298.05133057 -93.07412720]
[287.98724365 -81.92736816]
[276.67538452 -72.04918671]
[264.27459717 -63.57826233]
[250.95893860 -56.63350677]
[236.91534424 -51.31242371]
[222.34097290 -47.68970490]
[207.44042969 -45.81621170]
[192.42288208 -45.71824265]
[177.49914551 -47.39717484]
[162.87875366 -50.82943726]
[157.74845886 -36.73404694]
[152.61814880 -22.63865662]
[147.48785400 -8.54326820]
[150.40554810 6.06276798]
[138.41493225 16.38437462]
[144.92282104 29.73289871]
[139.92074585 44.10071182]
[125.87546539 50.83626938]
[120.74516296 64.93165588]
[115.61486053 79.02704620]
[122.23127747 86.23558807]
[125.73454285 95.37162018]
[125.63409424 105.15578461]
[121.94397736 114.21795654]
[115.18096161 121.28913116]
[120.02077484 135.48689270]
[123.65943146 120.93490601]
[132.22734070 108.62268066]
[144.60824585 100.15431213]
[159.18910217 96.63311005]
[174.07022095 98.51782227]
[187.31283569 105.56290436]
[197.19161987 116.85048676]
[202.41952515 130.90997314]
[202.31542969 145.90960693]
[196.89289856 159.89517212]
[186.85839844 171.04455566]
[173.51928711 177.90516663]
[158.61343384 179.58316040]
[144.08287048 175.85993958]
[131.82067871 167.22055054]
[123.42458344 154.79084778]
[123.73255920 169.78767395]
[124.04053497 184.78451538]
[124.34851837 199.78135681]
[124.65649414 214.77819824]
[124.96446991 229.77502441]
[125.27244568 244.77186584]
[125.58042908 259.76870728]
[125.88840485 274.76553345]
[128.47418213 293.97396851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 127]
[11 126]
[13 47]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[24 34]
[25 33]
[26 32]
[49 121]
[50 120]
[51 119]
[54 116]
[56 114]
[57 113]
[58 112]
[59 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
