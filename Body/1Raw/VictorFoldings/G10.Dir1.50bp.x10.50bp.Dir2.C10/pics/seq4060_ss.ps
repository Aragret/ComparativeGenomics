%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCxxxxxxxxxxGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.55691528 254.01312256]
[112.93293762 239.02609253]
[112.30895996 224.03907776]
[111.68498230 209.05206299]
[111.06100464 194.06504822]
[110.43702698 179.07803345]
[109.81304932 164.09101868]
[109.18907166 149.10400391]
[95.01251984 144.20245361]
[85.26486206 155.60346985]
[75.51721191 167.00450134]
[65.76956177 178.40551758]
[56.02190781 189.80653381]
[46.27425766 201.20755005]
[46.08613205 217.24951172]
[33.33873749 226.99032593]
[17.81078148 222.95768738]
[11.41398621 208.24508667]
[19.05542183 194.13877869]
[34.87323380 191.45989990]
[44.62088776 180.05888367]
[54.36853790 168.65786743]
[64.11618805 157.25683594]
[73.86384583 145.85581970]
[83.61149597 134.45480347]
[72.63474274 122.33331299]
[68.45816803 107.79138184]
[70.93418884 94.10342407]
[78.52278900 83.92644501]
[69.50525665 71.93961334]
[60.48772812 59.95277786]
[47.59831619 67.65312195]
[33.96342468 73.93975067]
[19.73753738 78.74144745]
[5.08184862 82.00379181]
[-9.83758068 83.68982697]
[-24.85170364 83.78044128]
[-39.79039764 82.27462006]
[-54.48439789 79.18941498]
[-68.76720428 74.55978394]
[-82.47698975 68.43819427]
[-95.45840454 60.89399338]
[-107.56436920 52.01267624]
[-118.65769958 41.89486694]
[-128.61271667 30.65521240]
[-137.31660461 18.42106438]
[-144.67076111 5.33104610]
[-150.59182739 -8.46652317]
[-155.01275635 -22.81530762]
[-157.88340759 -37.55272293]
[-159.17129517 -52.51177979]
[-158.86181641 -67.52298737]
[-156.95845032 -82.41625214]
[-153.48280334 -97.02281952]
[-148.47422791 -111.17720032]
[-141.98950195 -124.71899414]
[-134.10206604 -137.49478149]
[-124.90132141 -149.35978699]
[-114.49150848 -160.17956543]
[-102.99057770 -169.83155823]
[-90.52884674 -178.20635986]
[-77.24751282 -185.20909119]
[-63.29706573 -190.76040649]
[-48.83557510 -194.79740906]
[-34.02690125 -197.27435303]
[-19.03883553 -198.16317749]
[-4.04120636 -197.45379639]
[10.79605198 -195.15426636]
[25.30482292 -191.29063416]
[39.32070923 -185.90667725]
[52.68490601 -179.06340027]
[65.24597931 -170.83834839]
[76.86160278 -161.32470703]
[87.40016937 -150.63027954]
[96.74225616 -138.87623596]
[104.78202820 -126.19577789]
[111.42837524 -112.73255920]
[116.60598755 -98.63914490]
[120.25621033 -84.07521820]
[122.33767700 -69.20580292]
[122.82680511 -54.19937134]
[121.71804810 -39.22597122]
[119.02397156 -24.45525551]
[114.77510071 -10.05458832]
[109.01958466 3.81285906]
[101.82262421 16.98995781]
[93.26578522 29.32740021]
[83.44600677 40.68539810]
[72.47455597 50.93524933]
[81.49208832 62.92208099]
[90.50962067 74.90891266]
[123.77551270 77.85688782]
[134.63786316 115.99795532]
[149.28137207 112.74713135]
[163.92486572 109.49629974]
[178.56837463 106.24547577]
[193.21186829 102.99465179]
[197.14916992 99.37287903]
[201.63841248 97.82395935]
[205.78051758 98.20426178]
[208.86940002 100.02806854]
[223.68716431 97.69696808]
[232.99192810 85.20461273]
[248.05245972 83.05162811]
[259.90466309 91.99929047]
[274.72241211 89.66819000]
[289.54019165 87.33708191]
[301.94842529 76.61478424]
[317.34735107 82.25432587]
[319.89590454 98.45423889]
[306.97232056 108.54943085]
[291.87127686 102.15483856]
[277.05352783 104.48594666]
[262.23577881 106.81704712]
[253.70332336 118.97159576]
[238.70921326 121.54675293]
[226.01826477 112.51472473]
[211.20050049 114.84582520]
[196.46269226 117.63815308]
[181.81919861 120.88897705]
[167.17568970 124.13980103]
[152.53219604 127.39063263]
[137.88868713 130.64144897]
[152.29809570 134.80905151]
[166.70751953 138.97665405]
[181.51416016 136.57601929]
[196.19555664 139.65119934]
[208.79414368 147.79219055]
[217.63008118 159.91348267]
[221.52525330 174.39892578]
[219.96028137 189.31706238]
[213.14382935 202.67878723]
[201.98477173 212.70252991]
[187.97100830 218.05177307]
[172.97105408 218.01325989]
[158.98493958 212.59213257]
[147.87750244 202.51121521]
[141.12974548 189.11465454]
[139.64158630 174.18641663]
[131.90884399 161.33322144]
[124.17609406 148.48002625]
[124.80007172 163.46704102]
[125.42404175 178.45405579]
[126.04801941 193.44107056]
[126.67199707 208.42808533]
[127.29597473 223.41510010]
[127.91995239 238.40213013]
[128.54393005 253.38914490]
[135.24392700 268.96304321]
[122.13339233 279.71249390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[29 91]
[30 90]
[31 89]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[101 118]
[102 117]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
