%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGAxxxxxxxxxxAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 297.24298096]
[92.50000000 282.24298096]
[92.50000000 267.24298096]
[92.50000000 252.24298096]
[92.50000000 237.24298096]
[92.50000000 222.24298096]
[92.50000000 207.24298096]
[92.50000000 192.24298096]
[92.50000000 177.24298096]
[92.50000000 162.24298096]
[80.60564423 159.61791992]
[69.44338226 154.74241638]
[59.43458176 147.80047607]
[50.95704651 139.05415344]
[44.33079147 128.83361816]
[39.80594254 117.52466583]
[37.55331039 105.55419159]
[22.56061172 105.08615112]
[7.56791639 104.61811066]
[-7.42477989 104.15006256]
[-22.41747665 103.68202209]
[-37.41666412 103.83805847]
[-52.39637756 104.61790466]
[-67.37609100 105.39775085]
[-72.50871277 119.67822266]
[-82.69027710 130.87548828]
[-96.34623718 137.30421448]
[-111.38237000 138.01293945]
[-125.50594330 132.92475891]
[-136.57530212 122.84434509]
[-142.92460632 109.33081055]
[-157.90432739 110.11065674]
[-172.88403320 110.89050293]
[-187.86375427 111.67034912]
[-201.31829834 121.04622650]
[-216.04840088 113.83816528]
[-216.90098572 97.46119690]
[-202.99899292 88.76254272]
[-188.64360046 96.69063568]
[-173.66387939 95.91078949]
[-158.68417358 95.13094330]
[-143.70445251 94.35109711]
[-138.79269409 80.25131226]
[-128.82992554 69.07596588]
[-115.31104279 62.54872131]
[-100.28260040 61.69227982]
[-86.03291321 66.66823578]
[-74.74368286 76.74772644]
[-68.15593719 90.41803741]
[-53.17622375 89.63819122]
[-38.19651031 88.85834503]
[-36.20555496 86.79838562]
[-33.25250626 85.42963409]
[-29.60646248 85.13256836]
[-25.67263603 86.17949677]
[-21.94943428 88.68933105]
[-6.95673752 89.15737152]
[8.03595829 89.62541199]
[23.02865410 90.09345245]
[38.02135086 90.56149292]
[44.20514297 71.41027832]
[56.13826752 55.20505905]
[72.59108734 43.61569595]
[91.86823273 37.83640289]
[111.98330688 38.46270370]
[130.86357117 45.43006134]
[146.56352234 58.02052689]
[158.82589722 49.38141251]
[171.08827209 40.74229431]
[183.35063171 32.10317993]
[180.10578918 23.83957672]
[178.62210083 15.01035881]
[178.99382019 5.98983240]
[181.23590088 -2.83309555]
[185.28201294 -11.07168007]
[190.98608398 -18.35828400]
[198.12738037 -24.36075401]
[206.41900635 -28.79751015]
[215.51936340 -31.45065308]
[225.04614258 -32.17649078]
[234.59246826 -30.91298485]
[243.74418640 -27.68372345]
[251.19909668 -40.70003128]
[258.65399170 -53.71634293]
[266.10891724 -66.73265076]
[263.30746460 -82.52921295]
[274.01873779 -94.47275543]
[290.02597046 -93.40120697]
[299.04977417 -80.13658142]
[294.16787720 -64.85434723]
[279.12521362 -59.27774048]
[271.67031860 -46.26143265]
[264.21539307 -33.24512100]
[256.76049805 -20.22881317]
[265.52670288 -8.05697536]
[280.23464966 -11.00245762]
[294.94262695 -13.94794083]
[309.65057373 -16.89342308]
[318.42764282 -29.76202965]
[333.38555908 -32.53964615]
[345.59973145 -24.09276009]
[360.30767822 -27.03824234]
[375.01565552 -29.98372459]
[389.72360229 -32.92920685]
[396.07904053 -47.08505630]
[409.55801392 -54.77252579]
[424.97756958 -53.03562164]
[436.40856934 -42.54222107]
[439.45559692 -27.32725143]
[432.94699097 -13.24117756]
[419.38540649 -5.70038366]
[403.98559570 -7.60445786]
[392.66909790 -18.22124481]
[377.96112061 -15.27576256]
[363.25317383 -12.33028030]
[348.54519653 -9.38479805]
[340.52575684 3.11416292]
[325.65176392 6.31082153]
[312.59606934 -2.18546128]
[297.88809204 0.76002109]
[283.18014526 3.70550346]
[268.47219849 6.65098619]
[265.47689819 29.61159515]
[252.05006409 47.94251633]
[231.84692383 57.35807037]
[210.03848267 55.90772247]
[191.98974609 44.36554718]
[179.72738647 53.00466537]
[167.46501160 61.64377975]
[155.20265198 70.28289795]
[159.56863403 80.45475006]
[162.07760620 91.23590851]
[162.65136719 102.29028320]
[161.27200317 113.27326202]
[157.98254395 123.84245300]
[152.88552856 133.66838074]
[146.13983154 142.44471741]
[137.95578003 149.89787292]
[128.58847046 155.79550171]
[118.32994843 159.95375061]
[107.50000000 162.24298096]
[107.50000000 177.24298096]
[107.50000000 192.24298096]
[107.50000000 207.24298096]
[107.50000000 222.24298096]
[107.50000000 237.24298096]
[107.50000000 252.24298096]
[107.50000000 267.24298096]
[107.50000000 282.24298096]
[107.50000000 297.24298096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 51]
[23 50]
[24 49]
[31 42]
[32 41]
[33 40]
[34 39]
[67 130]
[68 129]
[69 128]
[70 127]
[82 94]
[83 93]
[84 92]
[85 91]
[95 122]
[96 121]
[97 120]
[98 119]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
