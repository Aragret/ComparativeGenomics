%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUxxxxxxxxxxUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.83557892 256.99734497]
[97.83557892 241.99732971]
[97.83557892 226.99732971]
[97.83557892 211.99732971]
[97.83557892 196.99732971]
[97.83557892 181.99732971]
[97.83557892 166.99732971]
[97.83557892 151.99732971]
[97.83557892 136.99732971]
[97.83557892 121.99732971]
[85.50429535 113.45687103]
[71.46231842 118.73161316]
[57.42034149 124.00635529]
[67.02758789 141.88665771]
[59.11351013 167.25552368]
[47.72243881 177.01480103]
[36.33136368 186.77407837]
[24.94029045 196.53334045]
[22.27755547 212.35388184]
[8.17904472 220.00970459]
[-6.54007006 213.62791443]
[-10.58854389 198.10408020]
[-0.86073393 185.34675598]
[15.18101597 185.14227295]
[26.57209015 175.38299561]
[37.96316528 165.62371826]
[49.35423660 155.86445618]
[43.79204559 141.93312073]
[38.23036194 128.00302124]
[23.25012207 128.77267456]
[8.26988029 129.54234314]
[-6.71036053 130.31199646]
[-21.69060135 131.08164978]
[-36.67084122 131.85131836]
[-51.65108490 132.62097168]
[-67.15911102 139.47206116]
[-78.03550720 126.46667480]
[-68.54925537 112.41507721]
[-52.42074585 117.64073944]
[-37.44050217 116.87107849]
[-22.46026230 116.10141754]
[-7.48002052 115.33175659]
[7.50022030 114.56209564]
[22.48046112 113.79243469]
[37.46070099 113.02277374]
[52.14559937 109.96437836]
[66.18757629 104.68963623]
[80.22955322 99.41489410]
[83.43855286 84.76216888]
[72.88653564 74.10126495]
[62.33451843 63.44035339]
[51.78250504 52.77944565]
[41.23048782 42.11853790]
[30.67847443 31.45762825]
[14.87509346 31.62714005]
[3.63915181 20.51277351]
[3.63673234 4.70848417]
[14.86927128 -6.40932226]
[30.67270279 -6.24464893]
[41.67113113 5.10480642]
[41.33938217 20.90561295]
[51.89139938 31.56652260]
[62.44341278 42.22743225]
[72.99542999 52.88834000]
[83.54743958 63.54924774]
[94.09945679 74.21015930]
[109.07100677 75.13356781]
[120.85314178 65.85018158]
[132.63528442 56.56679916]
[124.62630463 43.86743164]
[117.98866272 30.40045738]
[112.79508972 16.31342316]
[109.10248566 1.76067781]
[106.95130920 -13.09833145]
[106.36513519 -28.10080147]
[107.35037994 -43.08235550]
[109.89624786 -57.87885284]
[113.97485352 -72.32817078]
[119.54149628 -86.27198792]
[126.53519440 -99.55754089]
[134.87931824 -112.03926086]
[144.48245239 -123.58038330]
[155.23936462 -134.05447388]
[167.03221130 -143.34675598]
[179.73176575 -151.35542297]
[193.19891357 -157.99273682]
[207.28607178 -163.18597412]
[221.83889771 -166.87821960]
[236.69796753 -169.02903748]
[251.70045471 -169.61485291]
[266.68197632 -168.62924194]
[281.47842407 -166.08300781]
[295.92764282 -162.00405884]
[309.87130737 -156.43707275]
[323.15670776 -149.44305420]
[335.63821411 -141.09861755]
[347.17910767 -131.49520874]
[357.65292358 -120.73804474]
[366.94491577 -108.94497681]
[374.95330811 -96.24521637]
[381.59027100 -82.77791595]
[386.78317261 -68.69063568]
[390.47506714 -54.13771057]
[392.62551880 -39.27859497]
[393.21096802 -24.27609634]
[392.22500610 -9.29458904]
[389.67840576 5.50178194]
[385.59909058 19.95089912]
[380.03176880 33.89445114]
[373.03744507 47.17966080]
[364.69268799 59.66097641]
[355.08901978 71.20163727]
[344.33157349 81.67520142]
[332.53829956 90.96691132]
[319.83834839 98.97496796]
[306.37088013 105.61162567]
[292.28347778 110.80417633]
[277.73046875 114.49571228]
[262.87127686 116.64580536]
[247.86877441 117.23088837]
[232.88729858 116.24455261]
[218.09098816 113.69760132]
[203.64196777 109.61795044]
[189.69854736 104.05028534]
[176.41351318 97.05561829]
[163.93240356 88.71058655]
[152.39196777 79.10661316]
[141.91867065 68.34893799]
[130.13653564 77.63232422]
[118.35439301 86.91571045]
[133.14488220 84.41742706]
[147.53562927 80.18580627]
[162.39718628 82.21901703]
[175.12254333 90.16038513]
[183.47938538 102.61683655]
[186.00175476 117.40323639]
[182.24717712 131.92573547]
[172.87426758 143.63679504]
[159.52725220 150.48202515]
[144.54748535 151.26063538]
[130.56271362 145.83604431]
[120.02696228 135.16107178]
[112.83557892 121.99732971]
[112.83557892 136.99732971]
[112.83557892 151.99732971]
[112.83557892 166.99732971]
[112.83557892 181.99732971]
[112.83557892 196.99732971]
[112.83557892 211.99732971]
[112.83557892 226.99732971]
[112.83557892 241.99732971]
[112.83557892 256.99734497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 48]
[12 47]
[13 46]
[15 27]
[16 26]
[17 25]
[18 24]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[67 130]
[68 129]
[69 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
