%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAxxxxxxxxxxAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.62481689 401.07382202]
[102.62481689 386.07382202]
[102.62481689 371.07382202]
[102.62481689 356.07382202]
[102.62481689 341.07382202]
[102.62481689 326.07382202]
[102.62481689 311.07382202]
[102.62481689 296.07382202]
[102.62481689 281.07382202]
[102.62481689 266.07382202]
[86.11150360 261.65750122]
[71.46184540 252.82449341]
[59.83081818 240.26287842]
[52.13771820 224.95494080]
[48.99351501 208.10050964]
[50.65233994 191.02278137]
[56.99094772 175.06455994]
[67.51785278 161.48260498]
[81.41143036 151.34864807]
[97.58403778 145.46488953]
[96.33716583 130.51679993]
[95.09028625 115.56871796]
[91.15235901 113.04819489]
[88.22036743 109.61501312]
[86.47721863 105.62500763]
[85.98931122 101.45984650]
[71.86450958 96.41109467]
[57.73970413 91.36233521]
[43.61490250 86.31357574]
[29.49009895 81.26482391]
[37.74397278 93.78974152]
[39.35960388 108.70247650]
[33.97962952 122.70447540]
[22.79405212 132.69862366]
[8.27701855 136.47428894]
[-6.36043835 133.19635010]
[-17.88064766 123.58985901]
[-23.73544502 109.77967072]
[-22.62980461 94.82047272]
[-14.80828190 82.02111053]
[-2.00092673 74.21267700]
[12.96134758 73.12265015]
[0.35021934 65.00110626]
[-15.44141769 64.03426361]
[-21.95251465 50.63819122]
[-34.56364059 42.51664734]
[-47.17477036 34.39510345]
[-59.78590012 26.27356339]
[-75.17719269 29.86293602]
[-88.55424500 21.44688225]
[-91.98069000 6.01849842]
[-83.42368317 -7.26882935]
[-67.95993042 -10.53196526]
[-54.76381683 -1.83494830]
[-51.66435623 13.66243458]
[-39.05322647 21.78397751]
[-26.44210052 29.90551949]
[-13.83097172 38.02706146]
[1.05863273 38.41299438]
[8.47176170 52.38998032]
[21.08288956 60.51152039]
[34.53885651 67.14002228]
[48.66365814 72.18877411]
[62.78845978 77.23753357]
[76.91326141 82.28628540]
[91.03807068 87.33504486]
[77.00090027 82.04751587]
[64.96430206 73.09651947]
[55.86033630 61.17520523]
[50.39398193 47.20670319]
[48.98853683 32.27269363]
[51.75283051 17.52960396]
[58.47280884 4.11908913]
[68.62809753 -6.92038918]
[81.43231201 -14.73397350]
[95.89393616 -18.71660805]
[110.89311981 -18.55989265]
[125.26837921 -14.27596378]
[137.90653992 -6.19655180]
[147.82894897 5.05270290]
[154.26725769 18.60069847]
[156.72290039 33.39832687]
[155.00573730 48.29971313]
[149.24871826 62.15094757]
[139.89764404 73.87944031]
[127.67665100 82.57698822]
[113.53684998 87.56909943]
[127.76362610 82.81528473]
[141.99040222 78.06147003]
[156.21719360 73.30765533]
[170.44396973 68.55384064]
[184.62052917 63.65229034]
[198.74533081 58.60353470]
[212.87013245 53.55477524]
[215.64288330 50.02301407]
[219.06524658 47.81882095]
[222.62638855 46.98206329]
[225.85705566 47.37800980]
[228.38432312 48.72716904]
[242.87992859 44.87000656]
[257.37551880 41.01284790]
[260.70202637 26.07320595]
[270.59915161 14.39820957]
[284.79260254 8.67068958]
[300.02084351 10.20678711]
[312.78451538 18.65351868]
[320.15060425 32.06988525]
[320.42648315 47.37290955]
[313.54873657 61.04606247]
[301.09780884 69.94735718]
[285.93484497 72.03133392]
[271.54418945 66.81912231]
[261.23266602 55.50844574]
[246.73707581 59.36560440]
[232.24148560 63.22276306]
[217.91888428 67.67958069]
[203.79408264 72.72833252]
[189.66928101 77.77709198]
[184.39520264 83.02397919]
[175.19778442 82.78061676]
[160.97100830 87.53443146]
[146.74421692 92.28824615]
[132.51744080 97.04206085]
[118.29066467 101.79587555]
[110.03837585 114.32183838]
[111.28524780 129.26992798]
[112.53212738 144.21801758]
[125.42919159 146.14224243]
[137.62248230 150.74429321]
[148.56300354 157.81382751]
[157.75886536 167.02947998]
[164.79731750 177.97344971]
[169.36334229 190.15048218]
[171.25375366 203.01025391]
[170.38618469 215.97225952]
[166.80268860 228.45199585]
[160.66777039 239.88732910]
[152.26075745 249.76382446]
[141.96308899 257.63787842]
[130.24111938 263.15661621]
[117.62481689 266.07382202]
[117.62481689 281.07382202]
[117.62481689 296.07382202]
[117.62481689 311.07382202]
[117.62481689 326.07382202]
[117.62481689 341.07382202]
[117.62481689 356.07382202]
[117.62481689 371.07382202]
[117.62481689 386.07382202]
[117.62481689 401.07382202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 127]
[21 126]
[22 125]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[42 61]
[43 60]
[45 58]
[46 57]
[47 56]
[48 55]
[87 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 118]
[93 117]
[94 116]
[99 115]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
