%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCxxxxxxxxxxUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.69002414 176.68518066]
[-15.21328545 184.94155884]
[-27.73654747 193.19795227]
[-34.99928284 207.25366211]
[-49.88388824 207.79933167]
[-62.40715027 216.05572510]
[-74.93041229 224.31210327]
[-87.45367432 232.56849670]
[-99.97693634 240.82487488]
[-94.21817017 254.72570801]
[-91.19448090 269.46524048]
[-91.01518250 284.51065063]
[-93.68674469 299.31805420]
[-99.11260223 313.35217285]
[-107.09661102 326.10568237]
[-117.35015106 337.11755371]
[-129.50256348 345.98971558]
[-143.11456299 352.40145874]
[-157.69406128 356.12097168]
[-172.71401978 357.01379395]
[-187.63148499 355.04769897]
[-201.90721130 350.29370117]
[-215.02511597 342.92370605]
[-226.51101685 333.20410156]
[-235.94969177 321.48626709]
[-242.99993896 308.19375610]
[-247.40689087 293.80712891]
[-249.01126099 278.84643555]
[-247.75503540 263.85247803]
[-243.68363953 249.36730957]
[-236.94422913 235.91455078]
[-227.78044128 223.98049927]
[-216.52355957 213.99656677]
[-203.58047485 206.32366943]
[-189.41909790 201.23918152]
[-174.55136108 198.92689514]
[-159.51469421 199.47041321]
[-144.85269165 202.85006714]
[-131.09536743 208.94369507]
[-118.74002838 217.53102112]
[-108.23332214 228.30162048]
[-95.71006012 220.04522705]
[-83.18679810 211.78884888]
[-70.66353607 203.53245544]
[-58.14027405 195.27607727]
[-51.77328873 181.81091309]
[-35.99293518 180.67468262]
[-23.46967125 172.41830444]
[-10.94641018 164.16191101]
[-20.86167908 142.64166260]
[-26.64591217 119.66392517]
[-28.10140228 96.01407623]
[-25.17840385 72.50047302]
[-17.97682190 49.92679214]
[-6.74280882 29.06460762]
[8.13966084 10.62698841]
[26.16190529 -4.75587273]
[46.70792770 -16.55819130]
[69.07546234 -24.37656593]
[92.50000000 -27.94376564]
[92.50000000 -42.94376373]
[92.50000000 -57.94376373]
[79.91383362 -70.05646515]
[79.95445251 -87.18729401]
[92.11016846 -98.77480316]
[91.81381226 -113.77187347]
[91.51745605 -128.76895142]
[76.83637238 -132.22099304]
[63.47539520 -139.21636963]
[52.27441025 -149.31530762]
[43.93751526 -161.88301086]
[38.98877335 -176.12944031]
[37.73926926 -191.15905762]
[40.26755142 -206.02709961]
[46.41468430 -219.79893494]
[55.79425430 -231.60887146]
[67.81665802 -240.71450806]
[81.72615051 -246.54347229]
[96.64837646 -248.72933960]
[111.64530945 -247.13470459]
[125.77423096 -241.85980225]
[138.14697266 -233.23623657]
[147.98579407 -221.80609131]
[154.67221069 -208.28785706]
[157.78590393 -193.53129578]
[157.13114929 -178.46405029]
[152.74909973 -164.03323364]
[144.91522217 -151.14598083]
[134.12194824 -140.61241150]
[121.04776764 -133.09466553]
[106.51452637 -129.06530762]
[106.81088257 -114.06822968]
[107.10723877 -99.07115936]
[117.57540131 -91.50524139]
[121.82220459 -79.10106659]
[118.07819366 -66.33273315]
[107.50000000 -57.94376373]
[107.50000000 -42.94376373]
[107.50000000 -27.94376564]
[118.64312744 -26.80019951]
[129.64384460 -24.68800735]
[140.41810608 -21.62332535]
[150.88362122 -17.62956047]
[160.96043396 -12.73722458]
[170.57157898 -6.98368979]
[179.64361572 -0.41290581]
[188.10725403 6.92493200]
[195.89784241 14.97377014]
[202.95587158 23.67212296]
[209.22741699 32.95354462]
[214.66458130 42.74713516]
[219.22581482 52.97808075]
[222.87629700 63.56822586]
[225.58810425 74.43666840]
[227.34056091 85.50039673]
[228.12025452 96.67488861]
[227.92124939 107.87477112]
[226.74504089 119.01450348]
[241.42338562 122.10418701]
[256.10174561 125.19386292]
[270.78009033 128.28353882]
[285.45843506 131.37322998]
[300.86819458 125.76330566]
[313.25579834 136.50944519]
[309.87792969 152.55694580]
[294.20944214 157.39749146]
[282.36874390 146.05157471]
[267.69039917 142.96189880]
[253.01205444 139.87220764]
[238.33370972 136.78253174]
[223.65536499 133.69285583]
[220.69546509 143.10986328]
[217.01959229 152.27113342]
[212.64953613 161.12232971]
[207.61122131 169.61093140]
[201.93453979 177.68659973]
[195.65316772 185.30140686]
[188.80435181 192.41018677]
[181.42874146 198.97079468]
[173.57008362 204.94427490]
[165.27499390 210.29521179]
[156.59268188 214.99185181]
[147.57464600 219.00634766]
[138.27439880 222.31486511]
[128.74710083 224.89779663]
[119.04926300 226.73982239]
[109.23842621 227.83000183]
[99.37277985 228.16186523]
[89.51086426 227.73345947]
[79.71116638 226.54730225]
[70.03182220 224.61045837]
[60.53025818 221.93438721]
[51.26283646 218.53500366]
[42.28453064 214.43243408]
[33.64860153 209.65103149]
[25.40628242 204.21916199]
[17.60646629 198.16905212]
[10.29542160 191.53657532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[60 99]
[61 98]
[62 97]
[65 93]
[66 92]
[67 91]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
