%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[172.17187500 448.92294312]
[172.17187500 433.92294312]
[172.17187500 418.92294312]
[172.17187500 403.92294312]
[172.17187500 388.92294312]
[172.17187500 373.92294312]
[172.17187500 358.92294312]
[172.17187500 343.92294312]
[172.17187500 328.92294312]
[172.17187500 313.92294312]
[169.60043335 299.14498901]
[164.53366089 285.02664185]
[159.46690369 270.90829468]
[154.40013123 256.78994751]
[149.33337402 242.67158508]
[135.35264587 232.10621643]
[138.70494080 214.02743530]
[133.35308838 200.01466370]
[128.00122070 186.00190735]
[112.01329803 183.85128784]
[99.20742035 173.88735962]
[93.12316132 158.74465942]
[95.50222015 142.50498962]
[105.79110718 129.59725952]
[100.15635681 115.69583893]
[88.20227814 106.63493347]
[73.29538727 104.96625519]
[58.38849258 103.29757690]
[43.81324005 109.45165253]
[32.02570343 100.34652710]
[17.11880875 98.67784882]
[10.82889652 101.00517273]
[5.17374706 99.92586517]
[1.64605451 96.62752533]
[-13.18097019 94.35610962]
[-28.00799561 92.08469391]
[-42.83501816 89.81327820]
[-52.37733841 101.84822083]
[-66.66458893 107.48469543]
[-81.85358429 105.20653534]
[-93.85855865 95.62654114]
[-99.45022583 81.32168579]
[-97.12445831 66.13990784]
[-87.50688934 54.16502762]
[-73.18457794 48.61822510]
[-58.01016235 50.99156189]
[-46.06548691 60.64662933]
[-40.56360245 74.98625183]
[-25.73657799 77.25766754]
[-10.90955353 79.52909088]
[3.91747117 81.80050659]
[18.78748512 83.77095795]
[33.69438171 85.43962860]
[47.20339203 79.16620636]
[60.05716705 88.39067841]
[74.96406555 90.05935669]
[89.87095642 91.72803497]
[84.69174957 86.21871185]
[80.03223419 80.20343018]
[77.91119385 65.35414886]
[75.79014587 50.50486374]
[73.66910553 35.65558243]
[71.54806519 20.80630112]
[69.42701721 5.95701838]
[54.49529266 3.60438371]
[40.92111969 -3.04642940]
[29.91151619 -13.40403461]
[22.44544029 -26.54744148]
[19.18677521 -41.30794525]
[20.42527771 -56.37305450]
[26.05082130 -70.40319061]
[35.56318665 -82.15080261]
[48.11653900 -90.57129669]
[62.59464645 -94.91593170]
[77.71012115 -94.79838562]
[92.11890411 -90.22911072]
[104.53978729 -81.61440277]
[113.86830139 -69.72027588]
[119.27496338 -55.60435104]
[120.27902985 -40.52180481]
[116.79119873 -25.81376266]
[109.12162018 -12.78805828]
[97.95226288 -2.60292721]
[84.27629852 3.83597541]
[86.39734650 18.68525696]
[88.51838684 33.53453827]
[90.63943481 48.38382339]
[92.76047516 63.23310471]
[94.88151550 78.08238220]
[108.78293610 83.71714020]
[120.64457703 74.53555298]
[132.50621033 65.35395813]
[144.36784363 56.17237091]
[140.70925903 41.38945770]
[143.38610840 26.39764786]
[151.93461609 13.79436493]
[164.87371826 5.76320505]
[179.96163940 3.69561386]
[194.58427429 7.94981432]
[206.20819092 17.78874016]
[212.81947327 31.50774002]
[213.27265930 46.72991180]
[207.48924255 60.81792068]
[196.47125244 71.33094025]
[182.12759399 76.44751740]
[166.94340515 75.28118134]
[153.54943848 68.03401184]
[141.68780518 77.21559906]
[129.82617188 86.39718628]
[117.96453094 95.57878113]
[114.05777740 110.06108856]
[119.69253540 123.96250916]
[133.65943909 125.18003845]
[145.67532349 132.27377319]
[153.41484070 143.80447388]
[155.40899658 157.48088074]
[151.32366943 170.61491394]
[142.01399231 180.65003967]
[147.36585999 194.66281128]
[152.71771240 208.67556763]
[164.18205261 214.66920471]
[168.33331299 226.49679565]
[163.45172119 237.60482788]
[168.51849365 251.72317505]
[173.58525085 265.84152222]
[178.65202332 279.95989990]
[183.71878052 294.07824707]
[186.82987976 279.40441895]
[194.46032715 266.49023438]
[205.81245422 256.68569946]
[219.69956970 251.01573181]
[234.66992188 250.07307434]
[249.15855408 253.95628357]
[261.65087891 262.25936890]
[270.84100342 274.11441040]
[275.76818848 288.28207397]
[275.91735840 303.28134155]
[271.27294922 317.54421997]
[262.32046509 329.57968140]
[249.99574280 338.12963867]
[235.58718872 342.30023193]
[220.60105896 341.65551758]
[206.60392761 336.26290894]
[195.05902100 326.68609619]
[187.17187500 313.92294312]
[187.17187500 328.92294312]
[187.17187500 343.92294312]
[187.17187500 358.92294312]
[187.17187500 373.92294312]
[187.17187500 388.92294312]
[187.17187500 403.92294312]
[187.17187500 418.92294312]
[187.17187500 433.92294312]
[187.17187500 448.92294312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[17 120]
[18 119]
[19 118]
[24 112]
[25 111]
[26 57]
[27 56]
[28 55]
[30 53]
[31 52]
[34 51]
[35 50]
[36 49]
[37 48]
[59 89]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[90 110]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
