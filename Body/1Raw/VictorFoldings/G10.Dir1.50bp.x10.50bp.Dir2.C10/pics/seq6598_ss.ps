%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCAUCACAACAAUUAUCAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCxxxxxxxxxxAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-13.23700333 191.02487183]
[-21.35289001 179.88505554]
[-34.29094696 187.47496033]
[-42.27907944 201.13146973]
[-57.17184830 200.89768982]
[-70.10990143 208.48759460]
[-83.04795837 216.07749939]
[-95.98601532 223.66741943]
[-108.92407227 231.25732422]
[-121.86212921 238.84722900]
[-129.85026550 252.50373840]
[-144.74302673 252.26995850]
[-157.68109131 259.85986328]
[-170.61914062 267.44976807]
[-166.76509094 282.04595947]
[-166.99310303 297.14068604]
[-171.28627014 311.61380005]
[-179.32601929 324.39132690]
[-190.51574707 334.52505493]
[-204.02508545 341.26303101]
[-218.85156250 344.10525513]
[-233.89495850 342.84075928]
[-248.03894043 337.56344604]
[-260.23394775 328.66488647]
[-269.57501221 316.80541992]
[-275.36898804 302.86508179]
[-277.18591309 287.87838745]
[-274.89093018 272.95739746]
[-268.65438843 259.20938110]
[-258.93905640 247.65451050]
[-246.46588135 239.15025330]
[-232.16046143 234.32766724]
[-217.08433533 233.54461670]
[-202.35627747 236.85922241]
[-189.06918335 244.02552795]
[-178.20904541 254.51171875]
[-165.27099609 246.92179871]
[-152.33294678 239.33189392]
[-145.27021790 226.21826172]
[-129.45204163 225.90917969]
[-116.51398468 218.31925964]
[-103.57592773 210.72935486]
[-90.63787079 203.13945007]
[-77.69981384 195.54954529]
[-64.76175690 187.95962524]
[-57.69903946 174.84600830]
[-41.88085175 174.53691101]
[-28.94279671 166.94699097]
[-33.18685150 158.04660034]
[-36.81741714 148.87882996]
[-39.81776810 139.48591614]
[-42.17408752 129.91111755]
[-43.87551880 120.19853210]
[-44.91422653 110.39292145]
[-45.28542328 100.53942871]
[-44.98740387 90.68345642]
[-44.02153778 80.87039948]
[-42.39227676 71.14545441]
[-40.10712433 61.55341721]
[-37.17660141 52.13848114]
[-33.61421585 42.94400024]
[-29.43636894 34.01233673]
[-24.66230965 25.38462639]
[-19.31402588 17.10061073]
[-13.41615486 9.19845104]
[-6.99586201 1.71454298]
[-0.08272150 -5.31663895]
[7.29142332 -11.86270809]
[15.09260559 -17.89351082]
[23.28489113 -23.38126945]
[31.83054352 -28.30070496]
[40.69020081 -32.62915802]
[49.82305527 -36.34669113]
[59.18703461 -39.43617630]
[68.73900604 -41.88338852]
[78.43497467 -43.67705154]
[88.23027802 -44.80890656]
[98.07979584 -45.27373505]
[107.93815613 -45.06940079]
[117.75994873 -44.19684219]
[127.49993896 -42.66007996]
[137.11325073 -40.46619415]
[146.55561829 -37.62528610]
[155.78353882 -34.15044403]
[164.75451660 -30.05767441]
[173.42720032 -25.36582947]
[181.76167297 -20.09651947]
[189.71952820 -14.27401638]
[197.26412964 -7.92514133]
[204.36068726 -1.07913780]
[215.65969849 -10.94486046]
[226.95869446 -20.81058311]
[238.25770569 -30.67630768]
[249.55670166 -40.54203033]
[257.51104736 -55.51417160]
[274.10003662 -52.01540375]
[275.33029175 -35.10615158]
[259.42242432 -29.24302483]
[248.12342834 -19.37730217]
[236.82441711 -9.51157951]
[225.52542114 0.35414386]
[214.22640991 10.21986675]
[232.88197327 41.25880051]
[243.28158569 75.94731140]
[244.77915955 112.13021088]
[259.64221191 114.15254211]
[274.50524902 116.17488098]
[289.36828613 118.19721222]
[304.23135376 120.21955109]
[319.09439087 122.24188232]
[329.85467529 115.05368805]
[342.22763062 117.08564758]
[349.63278198 126.70184326]
[364.45053101 129.03294373]
[378.21398926 120.78997040]
[393.18890381 126.54598999]
[397.88778687 141.88548279]
[388.70605469 155.04130554]
[372.68716431 155.92143250]
[362.11941528 143.85070801]
[347.30166626 141.51960754]
[331.32604980 148.71542358]
[317.07205200 137.10493469]
[302.20901489 135.08259583]
[287.34594727 133.06025696]
[272.48291016 131.03791809]
[257.61987305 129.01559448]
[242.75682068 126.99325562]
[239.55659485 140.39929199]
[235.10043335 153.44174194]
[229.42842102 166.00325012]
[222.59162903 177.97074890]
[214.65156555 189.23655701]
[205.67968750 199.69927979]
[195.75675964 209.26477051]
[184.97206116 217.84690857]
[173.42265320 225.36849976]
[161.21247864 231.76182556]
[148.45141602 236.96936035]
[135.25431824 240.94424438]
[121.73994446 243.65069580]
[108.02993011 245.06434631]
[94.24764252 245.17250061]
[80.51712799 243.97418213]
[66.96194458 241.48014832]
[53.70409393 237.71287537]
[40.86288071 232.70623779]
[28.55387497 226.50532532]
[16.88784790 219.16592407]
[5.96979141 210.75407410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[5 45]
[6 44]
[7 43]
[8 42]
[9 41]
[10 40]
[12 38]
[13 37]
[14 36]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[105 128]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
