%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[42.68446732 288.72332764]
[37.78291702 302.89990234]
[32.88136673 317.07644653]
[27.97981453 331.25299072]
[23.07826424 345.42956543]
[28.77135658 360.42849731]
[20.47066116 374.15722656]
[4.54375887 376.08422852]
[-6.79159212 364.73129272]
[-4.83988142 348.80740356]
[8.90170479 340.52801514]
[13.80325603 326.35144043]
[18.70480728 312.17489624]
[23.60635757 297.99835205]
[28.50790787 283.82177734]
[15.93937492 278.42471313]
[3.77512956 272.16949463]
[-7.92632389 265.08627319]
[-19.10870743 257.20904541]
[-29.71824074 248.57571411]
[-39.70389557 239.22782898]
[-49.01764679 229.21031189]
[-57.61470032 218.57138062]
[-65.45371246 207.36216736]
[-72.49697113 195.63661194]
[-78.71060944 183.45108032]
[-84.06475067 170.86419678]
[-88.53363037 157.93649292]
[-92.09575653 144.73014832]
[-94.73400879 131.30867004]
[-96.43568420 117.73661041]
[-111.41539764 118.51645660]
[-126.39511108 119.29630280]
[-141.37483215 120.07614899]
[-154.82937622 129.45202637]
[-169.55947876 122.24396515]
[-170.41206360 105.86699677]
[-156.51007080 97.16834259]
[-142.15467834 105.09643555]
[-127.17495728 104.31658936]
[-112.19524384 103.53674316]
[-97.21553040 102.75689697]
[-97.09748077 92.64149475]
[-96.46094513 82.54544830]
[-95.30760193 72.49531555]
[-93.64046478 62.51753998]
[-91.46394348 52.63836670]
[-88.78374481 42.88378143]
[-85.60693359 33.27944946]
[-81.94185638 23.85063553]
[-77.79816437 14.62213898]
[-73.18674469 5.61824083]
[-68.11974335 -3.13737488]
[-62.61047745 -11.62167549]
[-56.67344666 -19.81234169]
[-50.32426453 -27.68782616]
[-43.57963943 -35.22741318]
[-36.45730972 -42.41126633]
[-28.97601128 -49.22048950]
[-21.15542603 -55.63716888]
[-13.01612663 -61.64442825]
[-4.57952404 -67.22646332]
[4.13218784 -72.36858368]
[13.09609127 -77.05726624]
[22.28860664 -81.28018188]
[31.68555069 -85.02622223]
[41.26220322 -88.28552246]
[50.99337387 -91.04951477]
[60.85346603 -93.31092834]
[70.81653595 -95.06381226]
[80.85636902 -96.30355835]
[90.94657135 -97.02690125]
[101.06058502 -97.23194885]
[111.17181396 -96.91814423]
[121.25364685 -96.08632660]
[131.27957153 -94.73867798]
[141.22322083 -92.87875366]
[151.05841064 -90.51142883]
[160.75929260 -87.64294434]
[170.30033875 -84.28083801]
[179.65646362 -80.43395996]
[188.80302429 -76.11242676]
[197.71598816 -71.32761383]
[206.37190247 -66.09210205]
[214.74798584 -60.41965866]
[222.82220459 -54.32521439]
[230.57333374 -47.82479858]
[237.98097229 -40.93551254]
[245.02561951 -33.67547607]
[251.68878174 -26.06379318]
[263.58114624 -35.20552826]
[275.47354126 -44.34726334]
[287.36590576 -53.48899460]
[299.25830078 -62.63072968]
[311.15066528 -71.77246094]
[316.90972900 -87.12711334]
[333.12896729 -89.54966736]
[343.12341309 -76.54800415]
[336.61163330 -61.49712753]
[320.29241943 -59.88008499]
[308.40002441 -50.73834991]
[296.50765991 -41.59661484]
[284.61526489 -32.45488358]
[272.72290039 -23.31314850]
[260.83050537 -14.17141342]
[281.66842651 23.20057487]
[293.95617676 64.18708801]
[297.11550903 106.85912323]
[312.07574463 107.95043945]
[327.03598022 109.04174805]
[341.99624634 110.13305664]
[356.95648193 111.22436523]
[369.98712158 101.86582947]
[385.38867188 106.35713959]
[391.34637451 121.25294495]
[383.29000854 135.12646484]
[367.39971924 137.33511353]
[355.86517334 126.18461609]
[340.90493774 125.09330750]
[325.94467163 124.00199127]
[310.98443604 122.91068268]
[296.02416992 121.81937408]
[294.41339111 133.24157715]
[292.13760376 144.55007935]
[289.20462036 155.70619202]
[285.62445068 166.67176819]
[281.40939331 177.40930176]
[276.57382202 187.88206482]
[271.13427734 198.05421448]
[265.10937500 207.89097595]
[258.51971436 217.35871887]
[251.38784790 226.42501831]
[243.73817444 235.05889893]
[235.59683228 243.23080444]
[226.99169922 250.91279602]
[217.95219421 258.07861328]
[208.50924683 264.70370483]
[198.69512939 270.76544189]
[188.54344177 276.24307251]
[178.08888245 281.11788940]
[167.36723328 285.37319946]
[156.41516113 288.99444580]
[145.27011108 291.96923828]
[133.97023010 294.28738403]
[122.55413818 295.94100952]
[111.06091309 296.92440796]
[99.52984619 297.23425293]
[88.00038910 296.86944580]
[76.51198578 295.83123779]
[65.10391235 294.12322998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[31 42]
[32 41]
[33 40]
[34 39]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
