%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAxxxxxxxxxxACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.63224792 353.48147583]
[159.69662476 338.51071167]
[158.76098633 323.53991699]
[157.82536316 308.56912231]
[156.88973999 293.59832764]
[155.95410156 278.62753296]
[155.01847839 263.65673828]
[151.92015076 248.98020935]
[146.72474670 234.90869141]
[141.52932739 220.83717346]
[136.33390808 206.76565552]
[131.13848877 192.69413757]
[117.52146149 191.26727295]
[105.79864502 184.06626892]
[98.29793549 172.45390320]
[96.53775024 158.67541504]
[100.91988373 145.42445374]
[110.63970184 135.31648254]
[105.73815155 121.13991547]
[96.12360382 120.93074799]
[87.80151367 116.68484497]
[82.32137299 109.45950317]
[80.58591461 100.83805847]
[65.81986237 98.19918823]
[51.05380630 95.56032562]
[36.28775024 92.92146301]
[22.15607452 103.17977905]
[5.30325556 100.13568115]
[-3.97400069 86.14316559]
[-18.79175949 83.81206512]
[-22.91709900 85.58493042]
[-26.97705460 85.88125610]
[-30.50406837 84.91065979]
[-33.15069580 83.01610565]
[-34.72337723 80.62152100]
[-49.29608154 77.06676483]
[-63.86878586 73.51200104]
[-78.44149017 69.95723724]
[-88.99620056 81.11490631]
[-103.72025299 85.48500061]
[-118.65296173 81.89197540]
[-129.77749634 71.30234528]
[-134.10140991 56.56465912]
[-130.46159363 41.64328766]
[-119.83715057 30.55200195]
[-105.08598328 26.27430153]
[-90.17609406 29.96086884]
[-79.11816406 40.62003326]
[-74.88672638 55.38453674]
[-60.31402206 58.93929672]
[-45.74131775 62.49406052]
[-31.16861725 66.04882050]
[-16.46065521 68.99430084]
[-1.64289689 71.32540894]
[7.64308834 62.33834839]
[20.60622978 60.33054352]
[32.52503204 66.26097870]
[38.92661667 78.15541077]
[53.69267273 80.79427338]
[68.45872498 83.43313599]
[83.22478485 86.07199860]
[95.30477142 77.17964935]
[97.17238617 62.29637146]
[99.03999329 47.41308975]
[100.75268555 32.51118851]
[102.31026459 17.59227562]
[103.86785126 2.67336416]
[105.42543030 -12.24554825]
[106.98300934 -27.16446114]
[93.24052429 -33.52235794]
[82.30877686 -43.99974442]
[75.37356567 -57.46011353]
[73.18716431 -72.44338226]
[75.98673248 -87.32427979]
[83.46860504 -100.48863983]
[94.82120514 -110.50848389]
[108.81307983 -116.29693604]
[123.92649078 -117.22612000]
[138.52206421 -113.19522858]
[151.01657104 -104.64151001]
[160.05470276 -92.49281311]
[164.65606689 -78.06692505]
[164.32154846 -62.92866898]
[159.08741760 -48.72012711]
[149.52146912 -36.98253250]
[136.66130066 -28.98909378]
[121.90192413 -25.60688019]
[120.34434509 -10.68796730]
[118.78675842 4.23094511]
[117.22917938 19.14985657]
[115.67160034 34.06877136]
[118.12098694 41.09345245]
[113.92327881 49.28070450]
[112.05566406 64.16398621]
[110.18804932 79.04726410]
[121.78939056 88.55562592]
[136.01617432 83.80181122]
[150.24295044 79.04799652]
[151.27453613 63.88210297]
[158.03581238 50.26763916]
[169.49572754 40.28071213]
[183.90673828 35.44425583]
[199.07125854 36.49579239]
[212.67681885 43.27497101]
[222.64866638 54.74802017]
[227.46615601 69.16537476]
[226.39466858 84.32849884]
[219.59759521 97.92512512]
[208.11145020 107.88186646]
[193.68775940 112.68039703]
[178.52606201 111.58896637]
[164.93838501 104.77401733]
[154.99676514 93.27477264]
[140.76998901 98.02858734]
[126.54320526 102.78240204]
[119.91471100 116.23836517]
[124.81626129 130.41493225]
[141.05416870 133.36604309]
[153.52906799 144.02777100]
[158.91188049 159.43086243]
[155.82868958 175.35807800]
[145.21000671 187.49871826]
[150.40542603 201.57023621]
[155.60084534 215.64175415]
[160.79626465 229.71327209]
[165.99166870 243.78480530]
[169.47744751 229.19543457]
[178.19422913 216.98815918]
[190.86210632 208.95541382]
[205.62098694 206.27668762]
[220.30374146 209.34532166]
[232.75445557 217.71070862]
[241.14491272 230.14454651]
[244.24311829 244.82110596]
[241.59413147 259.58535767]
[233.58691406 272.26937866]
[221.39721680 281.01074219]
[206.81491089 284.52587891]
[191.98118591 282.29867554]
[179.07414246 274.65615845]
[169.98927307 262.72109985]
[170.92489624 277.69189453]
[171.86051941 292.66268921]
[172.79615784 307.63348389]
[173.73178101 322.60427856]
[174.66740417 337.57507324]
[175.60304260 352.54586792]
[185.11837769 365.90216064]
[178.06393433 380.70642090]
[161.69671631 381.72933960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 126]
[9 125]
[10 124]
[11 123]
[12 122]
[18 117]
[19 116]
[23 61]
[24 60]
[25 59]
[26 58]
[29 54]
[30 53]
[35 52]
[36 51]
[37 50]
[38 49]
[62 95]
[63 94]
[64 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[96 115]
[97 114]
[98 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
