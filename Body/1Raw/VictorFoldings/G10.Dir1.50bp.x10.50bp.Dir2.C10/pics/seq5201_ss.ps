%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.31365967]
[92.50000000 242.31367493]
[92.50000000 227.31367493]
[92.50000000 212.31367493]
[92.50000000 197.31367493]
[92.50000000 182.31367493]
[92.50000000 167.31367493]
[92.50000000 152.31367493]
[92.50000000 137.31367493]
[92.50000000 122.31367493]
[86.74909973 117.49940491]
[77.12038422 129.00105286]
[65.61889648 119.37214661]
[75.24729156 107.87088013]
[69.49639130 103.05661774]
[54.73033905 105.69548035]
[39.96428299 108.33435059]
[25.19822693 110.97321320]
[12.97446537 121.01762390]
[-0.91548765 115.64003754]
[-15.68154335 118.27890015]
[-21.05768585 122.30438995]
[-26.79408646 122.87448883]
[-31.11583138 120.70699310]
[-45.97887802 122.72932434]
[-60.84192657 124.75166321]
[-69.29047394 134.55349731]
[-81.75652313 135.90124512]
[-91.46173859 128.61315918]
[-106.36363983 130.32585144]
[-121.26554108 132.03854370]
[-129.73213196 145.18582153]
[-144.68405151 149.76557922]
[-159.06144714 143.61541748]
[-166.07575989 129.63925171]
[-162.41503906 114.43618774]
[-149.80776978 105.18465424]
[-134.20672607 106.25294495]
[-122.97823334 117.13664246]
[-108.07632446 115.42395020]
[-93.17442322 113.71125793]
[-79.70218658 102.50863647]
[-62.86425781 109.88861847]
[-48.00121307 107.86627960]
[-33.13816452 105.84394836]
[-18.32040787 103.51284027]
[-3.55435205 100.87397766]
[7.61324263 91.01831818]
[22.55936241 96.20715332]
[37.32541656 93.56829071]
[52.09147263 90.92942810]
[66.85752869 88.29056549]
[76.72325134 76.99156189]
[77.34722900 62.00454330]
[77.97120667 47.01752853]
[73.36563873 32.74206543]
[64.10069275 20.94542694]
[48.68696594 15.34640408]
[46.09582520 -0.84674317]
[58.99281311 -10.97589493]
[74.11061859 -4.62104702]
[75.89733124 11.68047714]
[85.16228485 23.47711754]
[92.46672821 21.77562714]
[114.38006592 16.67116165]
[117.47838593 1.99463522]
[120.57671356 -12.68189049]
[123.67503357 -27.35841560]
[110.09501648 -33.90414429]
[98.47655487 -43.51012039]
[89.49512482 -55.61786270]
[83.67290497 -69.52344513]
[81.34838104 -84.41841125]
[82.65670776 -99.43679047]
[87.52181244 -113.70542908]
[95.66085052 -126.39478302]
[106.60062408 -136.76708984]
[119.70511627 -144.21932983]
[134.21243286 -148.31822205]
[149.27915955 -148.82548523]
[164.02932739 -145.71162415]
[177.60536194 -139.15766907]
[189.21800232 -129.54464722]
[198.19209290 -117.43145752]
[204.00587463 -103.52235413]
[206.32136536 -88.62597656]
[205.00393677 -73.60839844]
[200.13018799 -59.34270477]
[191.98345947 -46.65829468]
[181.03739929 -36.29262161]
[167.92839050 -28.84832954]
[153.41857910 -24.75822258]
[138.35156250 -24.26009369]
[135.25323486 -9.58356857]
[132.15490723 5.09295702]
[129.05659485 19.76948166]
[114.03216553 45.25347900]
[92.95822144 47.64150238]
[92.33424377 62.62852097]
[91.71026611 77.61553955]
[110.53488922 74.07775116]
[128.97929382 86.21190643]
[143.97846985 86.36794281]
[158.97766113 86.52397919]
[173.97685242 86.68001556]
[188.97604370 86.83605194]
[203.97523499 86.99208832]
[218.97523499 86.99208832]
[233.97442627 86.83605194]
[248.97360229 86.68001556]
[263.97280884 86.52397919]
[279.74816895 80.31319427]
[290.08328247 93.75275421]
[280.02999878 107.40441132]
[264.12884521 101.52316284]
[249.12963867 101.67919922]
[234.13046265 101.83523560]
[219.13127136 101.99127197]
[212.43218994 105.22671509]
[203.81919861 101.99127197]
[188.82000732 101.83523560]
[173.82081604 101.67919922]
[158.82162476 101.52316284]
[143.82243347 101.36712646]
[128.82325745 101.21109009]
[123.49243927 106.48673248]
[136.58065796 113.81466675]
[149.66886902 121.14259338]
[164.65464783 121.79576874]
[177.37434387 129.74618530]
[184.52735901 142.93081665]
[184.25756836 157.92839050]
[176.63496399 170.84721375]
[163.63754272 178.33499146]
[148.63796997 178.44874573]
[135.52847290 171.15895081]
[127.71081543 158.35722351]
[127.21357727 143.36550903]
[120.02219391 130.20176697]
[112.83081055 117.03802490]
[107.50000000 122.31367493]
[107.50000000 137.31367493]
[107.50000000 152.31367493]
[107.50000000 167.31367493]
[107.50000000 182.31367493]
[107.50000000 197.31367493]
[107.50000000 212.31367493]
[107.50000000 227.31367493]
[107.50000000 242.31367493]
[107.50000000 257.31365967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 52]
[16 51]
[17 50]
[18 49]
[20 47]
[21 46]
[24 45]
[25 44]
[26 43]
[29 41]
[30 40]
[31 39]
[53 100]
[54 99]
[55 98]
[56 63]
[57 62]
[65 96]
[66 95]
[67 94]
[68 93]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
