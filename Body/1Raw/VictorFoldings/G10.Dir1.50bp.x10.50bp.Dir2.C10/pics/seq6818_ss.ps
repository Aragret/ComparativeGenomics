%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGxxxxxxxxxxCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.87347412]
[92.50000000 278.87347412]
[92.50000000 263.87347412]
[92.50000000 248.87345886]
[92.50000000 233.87345886]
[92.50000000 218.87345886]
[92.50000000 203.87345886]
[92.50000000 188.87345886]
[92.50000000 173.87345886]
[92.50000000 158.87345886]
[78.34420013 155.25721741]
[65.50080872 148.29223633]
[54.74816513 138.40060425]
[46.73791504 126.18177032]
[32.54809570 131.04478455]
[18.35827255 135.90780640]
[32.88967133 139.62782288]
[44.95274353 148.54310608]
[52.77376556 161.34277344]
[55.20275879 176.14480591]
[51.88256454 190.77273560]
[43.30137634 203.07571411]
[30.72095490 211.24473572]
[15.99109173 214.07865906]
[1.27762878 211.16078186]
[-11.25600243 202.92015076]
[-19.76688766 190.56843567]
[-23.00360680 175.92179871]
[-20.49024200 161.13386536]
[-12.59635067 148.37901306]
[-0.48447013 139.53352356]
[-15.46570492 140.28359985]
[-30.44693947 141.03366089]
[-45.41992188 141.93357849]
[-60.38314819 142.98324585]
[-73.66654968 152.60008240]
[-88.52415466 145.65864563]
[-89.67173767 129.29969788]
[-75.92876434 120.35192108]
[-61.43282318 128.02001953]
[-46.46959305 126.97035217]
[-39.98089600 123.34478760]
[-31.19700813 126.05242920]
[-16.21577263 125.30236053]
[-1.23453760 124.55229187]
[13.49525261 121.71798706]
[27.68507385 116.85496521]
[41.87489700 111.99194336]
[41.45206451 90.28022766]
[48.86775589 69.86981201]
[63.12913513 53.49329376]
[82.32686615 43.34318542]
[103.89070892 40.77840805]
[124.93365479 46.14234161]
[132.90505981 33.43577957]
[140.87646484 20.72921562]
[148.84786987 8.02265263]
[156.81925964 -4.68390989]
[153.50688171 -19.90448380]
[161.77203369 -32.67719269]
[176.30293274 -35.74124146]
[184.27433777 -48.44780350]
[178.44871521 -56.43322372]
[175.90469360 -66.38230133]
[177.27854919 -76.94728851]
[182.65507507 -86.58827209]
[191.51704407 -93.79724121]
[202.78474426 -97.33130646]
[204.58132935 -112.22332764]
[206.37792969 -127.11534119]
[208.17451477 -142.00737000]
[194.28948975 -147.95570374]
[182.64363098 -157.57603455]
[174.18099976 -170.08845520]
[169.58764648 -184.47865295]
[169.23591614 -199.58006287]
[173.15434265 -214.16851807]
[181.02525330 -227.06135559]
[192.21058655 -237.21343994]
[205.80361938 -243.80177307]
[220.70242310 -246.29228210]
[235.69920349 -244.48304749]
[249.57823181 -238.52075195]
[261.21441650 -228.88874817]
[269.66448975 -216.36782837]
[274.24337769 -201.97302246]
[274.57992554 -186.87126160]
[270.64685059 -172.28675842]
[262.76300049 -159.40182495]
[251.56747437 -149.26098633]
[237.96781921 -142.68630981]
[223.06652832 -140.21076965]
[221.26994324 -125.31875610]
[219.47335815 -110.42673492]
[217.67677307 -95.53471375]
[229.52357483 -86.33399200]
[243.50746155 -91.76084900]
[257.49136353 -97.18770599]
[271.47525024 -102.61456299]
[285.45913696 -108.04141998]
[299.44302368 -113.46827698]
[313.42691040 -118.89513397]
[314.57415771 -134.11506653]
[322.21893311 -147.32568359]
[334.84332275 -155.90400696]
[349.94076538 -158.14680481]
[364.51364136 -153.60874939]
[375.66851807 -143.19090271]
[381.19055176 -128.96171570]
[379.98336792 -113.74641418]
[372.28665161 -100.56600189]
[359.62860107 -92.03746033]
[344.52243042 -89.85414124]
[329.96752930 -94.44953918]
[318.85379028 -104.91123962]
[304.86987305 -99.48438263]
[290.88598633 -94.05752563]
[276.90209961 -88.63066864]
[262.91821289 -83.20381165]
[248.93431091 -77.77696228]
[234.95042419 -72.35010529]
[223.69929504 -44.48157883]
[196.98089600 -40.47640228]
[189.00949097 -27.76983833]
[192.57421875 -13.35358429]
[184.67109680 -0.35376656]
[169.52583313 3.28749228]
[161.55442810 15.99405575]
[153.58302307 28.70061874]
[145.61161804 41.40718079]
[137.64021301 54.11374283]
[143.89514160 60.05564499]
[149.22251892 66.84160614]
[153.50976562 74.32823944]
[156.66632080 82.35733795]
[158.62544250 90.75924683]
[159.34576416 99.35641479]
[158.81205750 107.96718597]
[157.03559875 116.40960693]
[154.05392456 124.50527191]
[149.93003845 132.08311462]
[144.75108337 138.98301697]
[138.62649536 145.05917358]
[131.68568420 150.18318176]
[124.07534027 154.24678040]
[115.95625305 157.16407776]
[107.50000000 158.87345886]
[107.50000000 173.87345886]
[107.50000000 188.87345886]
[107.50000000 203.87345886]
[107.50000000 218.87345886]
[107.50000000 233.87345886]
[107.50000000 248.87345886]
[107.50000000 263.87347412]
[107.50000000 278.87347412]
[107.50000000 293.87347412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[14 48]
[15 47]
[16 46]
[31 45]
[32 44]
[33 43]
[34 41]
[35 40]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[61 124]
[62 123]
[68 95]
[69 94]
[70 93]
[71 92]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
