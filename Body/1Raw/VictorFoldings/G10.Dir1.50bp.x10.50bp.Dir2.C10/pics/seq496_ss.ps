%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUUUAACAGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUxxxxxxxxxxAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.47959900 84.56063080]
[136.09332275 91.32874298]
[122.70703888 98.09686279]
[109.32074738 104.86497498]
[97.33391571 113.88250732]
[87.12043762 124.86817169]
[76.90695953 135.85383606]
[66.69348145 146.83949280]
[56.47999954 157.82516479]
[46.26651764 168.81082153]
[42.60193253 186.82611084]
[25.68467140 191.38749695]
[15.70194435 202.58326721]
[5.71921825 213.77903748]
[6.87306786 229.54115295]
[-3.51962209 241.44776917]
[-19.29305267 242.43490601]
[-31.08912659 231.91691589]
[-31.90944481 216.13392639]
[-21.26732445 204.44970703]
[-5.47654772 203.79631042]
[4.50617886 192.60054016]
[14.48890495 181.40478516]
[14.12058640 169.27334595]
[22.40207672 159.85868835]
[35.28085327 158.59735107]
[45.49433517 147.61167908]
[55.70781326 136.62602234]
[65.92129517 125.64035034]
[76.13477325 114.65468597]
[86.34825134 103.66902161]
[80.86122131 89.70863342]
[65.90097046 88.61732483]
[51.57445145 95.33010101]
[39.44382858 86.68734741]
[24.48357964 85.59603119]
[9.52333164 84.50472260]
[-4.99389124 92.13245392]
[-18.71191406 83.14646912]
[-17.51880836 66.79077911]
[-2.64194226 59.89072037]
[10.61464214 69.54447937]
[25.57489014 70.63578796]
[40.53514099 71.72709656]
[53.79160309 64.93626404]
[66.99228668 73.65707397]
[81.95252991 74.74838257]
[96.72559357 80.30362701]
[102.55263519 91.47869110]
[115.93891907 84.71057129]
[129.32521057 77.94245911]
[142.71148682 71.17434692]
[137.16163635 57.97436523]
[132.52554321 44.42660904]
[128.82481384 30.59425163]
[126.07666016 16.54178619]
[124.29389191 2.33473420]
[123.48477936 -11.96066666]
[123.65307617 -26.27776718]
[124.79796600 -40.54981613]
[126.91409302 -54.71028137]
[129.99154663 -68.69314575]
[134.01599121 -82.43322754]
[138.96859741 -95.86647034]
[144.82626343 -108.93025208]
[151.56167603 -121.56369019]
[159.14338684 -133.70788574]
[167.53604126 -145.30624390]
[176.70048523 -156.30470276]
[186.59397888 -166.65199280]
[197.17034912 -176.29991150]
[208.38031006 -185.20347595]
[220.17155457 -193.32121277]
[232.48912048 -200.61529541]
[245.27554321 -207.05172729]
[258.47119141 -212.60052490]
[272.01458740 -217.23585510]
[285.84249878 -220.93614197]
[299.89053345 -223.68412781]
[314.09313965 -225.46705627]
[328.38412476 -226.27661133]
[342.69683838 -226.10906982]
[356.96456909 -224.96522522]
[371.12078857 -222.85044861]
[385.09951782 -219.77461243]
[398.83560181 -215.75209045]
[412.26495361 -210.80166626]
[425.32504272 -204.94642639]
[437.95492554 -198.21369934]
[450.09576416 -190.63490295]
[461.69097900 -182.24539185]
[472.68652344 -173.08428955]
[483.03112793 -163.19435120]
[492.67660522 -152.62168884]
[501.57797241 -141.41560364]
[509.69381714 -129.62837219]
[516.98626709 -117.31494141]
[523.42132568 -104.53276062]
[528.96911621 -91.34141541]
[533.60363770 -77.80242157]
[548.09924316 -81.65957642]
[562.59484863 -85.51673889]
[577.09045410 -89.37389374]
[583.55944824 -103.61067963]
[597.68847656 -110.31182861]
[612.80615234 -106.31325531]
[621.77447510 -93.50297546]
[620.35882568 -77.92960358]
[609.22766113 -66.94641113]
[593.63671875 -65.73932648]
[580.94763184 -74.87830353]
[566.45202637 -71.02114105]
[551.95642090 -67.16397858]
[537.46081543 -63.30681992]
[540.39221191 -47.80047989]
[542.14849854 -32.11726379]
[542.71978760 -16.34609032]
[542.10278320 -0.57637399]
[540.30090332 15.10247517]
[537.32434082 30.60155678]
[533.18994141 45.83298874]
[527.92108154 60.71040344]
[521.54760742 75.14943695]
[514.10565186 89.06820679]
[505.63732910 102.38777924]
[496.19064331 115.03262329]
[485.81912231 126.93100739]
[474.58151245 138.01545715]
[462.54153442 148.22309875]
[449.76739502 157.49600220]
[436.33154297 165.78160095]
[422.31005859 173.03286743]
[407.78250122 179.20863342]
[392.83117676 184.27388000]
[377.54083252 188.19982910]
[361.99816895 190.96418762]
[346.29132080 192.55125427]
[330.50930786 192.95198059]
[314.74160767 192.16404724]
[299.07763672 190.19189453]
[283.60620117 187.04666138]
[268.41503906 182.74613953]
[253.59028625 177.31468201]
[239.21598816 170.78302002]
[225.37367249 163.18818665]
[212.14184570 154.57316589]
[199.59553528 144.98680115]
[187.80592346 134.48341370]
[176.83985901 123.12248993]
[166.75955200 110.96845245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 23]
[13 22]
[14 21]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
