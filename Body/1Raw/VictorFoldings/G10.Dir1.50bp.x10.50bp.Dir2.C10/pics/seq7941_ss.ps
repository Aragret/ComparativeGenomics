%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGxxxxxxxxxxGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.10948944 332.99902344]
[120.10948944 317.99902344]
[120.10948944 302.99902344]
[120.10948944 287.99902344]
[120.10948944 272.99902344]
[120.10948944 257.99902344]
[120.10948944 242.99903870]
[120.10948944 227.99903870]
[120.10948944 212.99903870]
[120.10948944 197.99903870]
[118.55191040 183.08012390]
[115.45359039 168.40359497]
[111.95793152 165.06355286]
[110.56398773 159.46997070]
[112.54508209 153.05258179]
[110.05996704 138.25988770]
[87.33039093 140.05137634]
[66.02585602 128.67012024]
[52.78327179 135.71525574]
[39.54068375 142.76039124]
[26.29809952 149.80552673]
[13.05551338 156.85066223]
[9.98501682 172.18382263]
[-2.25533032 181.91563416]
[-17.88600922 181.45100403]
[-29.52669334 171.00932312]
[-31.68100548 155.52085876]
[-23.33174515 142.29875183]
[-8.42118073 137.58610535]
[6.01037836 143.60807800]
[19.25296402 136.56294250]
[32.49554825 129.51780701]
[45.73813629 122.47267151]
[58.98072052 115.42753601]
[58.90270233 107.92794037]
[44.68578339 112.71116638]
[35.74354935 100.66806030]
[44.43407059 88.44207001]
[58.74666595 92.92874908]
[58.66864777 85.42916107]
[45.28236389 78.66104126]
[31.89607811 71.89292908]
[18.50979233 65.12481689]
[5.12350845 58.35670090]
[-8.12336636 66.26390076]
[-23.54153061 65.73122406]
[-36.21110535 56.92864227]
[-42.08927536 42.66502762]
[-39.30033493 27.49184990]
[-28.73422813 16.25081253]
[-13.76255989 12.52888966]
[0.83726454 17.51373482]
[10.40649414 29.61470032]
[11.89162350 44.97041321]
[25.27790833 51.73852921]
[38.66419220 58.50664520]
[52.05047607 65.27475739]
[65.43675995 72.04287720]
[75.32540131 66.12525177]
[85.82444763 63.27849579]
[96.05821228 63.39504623]
[105.25215149 66.13430786]
[110.73918915 52.17391586]
[116.22621918 38.21352768]
[121.71324921 24.25313759]
[127.20027924 10.29274750]
[114.30203247 2.56713510]
[102.85139465 -7.17620850]
[93.16074371 -18.67147636]
[85.49445343 -31.60507011]
[80.06166840 -45.62415314]
[77.01058197 -60.34627151]
[76.42445374 -75.36979675]
[78.31925201 -90.28487396]
[82.64330292 -104.68461609]
[89.27862549 -118.17617798]
[98.04421997 -130.39151001]
[108.70095062 -140.99736023]
[120.95808411 -149.70439148]
[134.48124695 -156.27507019]
[148.90151978 -160.53016663]
[163.82548523 -162.35356140]
[178.84603882 -161.69554138]
[193.55339050 -158.57403564]
[207.54631042 -153.07421875]
[220.44306946 -145.34613037]
[231.89183044 -135.60058594]
[241.58026123 -124.10344696]
[249.24406433 -111.16837311]
[254.67414856 -97.14824677]
[257.72238159 -82.42553711]
[258.30563354 -67.40190125]
[256.40795898 -52.48718643]
[252.08113098 -38.08828354]
[245.44320679 -24.59799767]
[236.67526245 -12.38435841]
[226.01649475 -1.78056228]
[213.75767517 6.92411184]
[200.23324585 13.49219418]
[185.81216431 17.74450111]
[170.88783264 19.56502914]
[155.86741638 18.90411186]
[141.16067505 15.77977943]
[135.67364502 29.74016953]
[130.18659973 43.70055771]
[124.69957733 57.66094971]
[119.21254730 71.62133789]
[134.62550354 87.20058441]
[138.15316772 110.45742035]
[152.91921997 113.09628296]
[167.68527222 115.73514557]
[176.58183289 103.33296967]
[189.98257446 96.02660370]
[205.22676086 95.26673889]
[219.28765869 101.20423889]
[229.37345886 112.66021729]
[233.48162842 127.36006927]
[230.79647827 142.38513184]
[221.85115051 154.75218201]
[208.42173767 162.00572205]
[193.17466736 162.70555115]
[179.13726807 156.71272278]
[169.09664917 145.21711731]
[165.04641724 130.50120544]
[150.28034973 127.86233521]
[135.51429749 125.22347260]
[124.85267639 135.77476501]
[127.33779144 150.56747437]
[130.13011169 165.30528259]
[133.22843933 179.98179626]
[139.96081543 166.57751465]
[152.41723633 158.22061157]
[167.37336731 157.07424927]
[180.95787048 163.43516541]
[189.65443420 175.65684509]
[191.21199036 190.57575989]
[185.22735596 204.33018494]
[173.24964905 213.35983276]
[158.37925720 215.32740784]
[144.46533203 209.72358704]
[135.10949707 197.99903870]
[135.10949707 212.99903870]
[135.10949707 227.99903870]
[135.10949707 242.99903870]
[135.10949707 257.99902344]
[135.10949707 272.99902344]
[135.10949707 287.99902344]
[135.10949707 302.99902344]
[135.10949707 317.99902344]
[135.10949707 332.99902344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[15 128]
[16 127]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[109 126]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
