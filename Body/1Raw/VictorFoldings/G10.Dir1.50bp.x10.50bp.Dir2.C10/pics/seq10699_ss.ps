%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCxxxxxxxxxxCAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.39376068 302.55380249]
[83.39376068 287.55380249]
[83.39376068 272.55380249]
[83.39376068 257.55380249]
[83.39376068 242.55380249]
[83.39376068 227.55380249]
[83.39376068 212.55380249]
[83.39376068 197.55380249]
[83.39376068 182.55380249]
[83.39376068 167.55380249]
[69.29837036 162.42349243]
[59.65655899 173.91416931]
[50.01474380 185.40483093]
[52.90818024 200.77239990]
[45.20158005 214.37908936]
[30.53376198 219.80026245]
[15.83041859 214.47619629]
[8.03402233 200.92074585]
[10.82579231 185.53437805]
[22.88754082 175.58209229]
[38.52407837 175.76301575]
[48.16588974 164.27235413]
[57.80770493 152.78167725]
[47.04400253 141.45266724]
[39.21627808 128.01380920]
[34.71564865 113.20489502]
[33.75119400 97.83203888]
[36.34046555 82.72389221]
[42.31038284 68.68687439]
[51.30835724 56.46221161]
[62.82295609 46.68676758]
[76.21286774 39.85989761]
[90.74258423 36.31802368]
[105.62277985 36.21818924]
[108.68118286 21.53329086]
[111.73957825 6.84839439]
[114.79797363 -7.83650351]
[117.85636902 -22.52140045]
[120.91476440 -37.20629883]
[107.04058838 -44.55148315]
[95.79932404 -55.48874283]
[88.09087372 -69.13114166]
[84.52912903 -84.37565613]
[85.39309692 -99.99235535]
[90.60504150 -114.72362518]
[99.73741913 -127.38543701]
[112.04792786 -136.96253967]
[126.53984833 -142.68983459]
[142.04273987 -144.11352539]
[144.79898071 -158.85812378]
[147.55522156 -173.60272217]
[150.15994263 -188.37483215]
[152.61286926 -203.17291260]
[139.76654053 -211.25050354]
[131.01507568 -223.59776306]
[127.66665649 -238.31517029]
[130.20115662 -253.15309143]
[138.20167542 -265.85571289]
[150.42269897 -274.50393677]
[164.98393250 -277.80535889]
[167.43687439 -292.60345459]
[169.88980103 -307.40151978]
[172.34272766 -322.19961548]
[158.15756226 -327.19485474]
[145.05541992 -334.57760620]
[133.43444824 -344.12347412]
[123.64778900 -355.54244995]
[115.99285889 -368.48745728]
[110.70228577 -382.56512451]
[107.93682861 -397.34765625]
[107.78053284 -412.38583374]
[110.23815155 -427.22265625]
[115.23500824 -441.40722656]
[122.61923218 -454.50854492]
[132.16644287 -466.12844849]
[143.58650208 -475.91378784]
[156.53237915 -483.56726074]
[170.61065674 -488.85623169]
[185.39350891 -491.62002563]
[200.43170166 -491.77459717]
[215.26823425 -489.31530762]
[229.45227051 -484.31683350]
[242.55273438 -476.93112183]
[254.17153931 -467.38259888]
[263.95559692 -455.96142578]
[271.60760498 -443.01467896]
[276.89498901 -428.93582153]
[279.65710449 -414.15264893]
[279.80996704 -399.11444092]
[277.34899902 -384.27816772]
[272.34890747 -370.09472656]
[264.96173096 -356.99508667]
[255.41186523 -345.37738037]
[243.98959351 -335.59460449]
[231.04197693 -327.94406128]
[216.96250916 -322.65829468]
[202.17903137 -319.89785767]
[187.14080811 -319.74667358]
[184.68788147 -304.94860840]
[182.23493958 -290.15051270]
[179.78201294 -275.35244751]
[192.49926758 -267.52932739]
[201.27627563 -255.40046692]
[204.75033569 -240.79582214]
[202.36177063 -225.93371582]
[194.44380188 -213.08383179]
[182.17648315 -204.22064209]
[167.41094971 -200.71998596]
[164.95802307 -185.92190552]
[166.97938538 -178.76464844]
[162.29981995 -170.84646606]
[159.54357910 -156.10188293]
[156.78733826 -141.35728455]
[169.72009277 -135.10780334]
[180.59606934 -125.70701599]
[188.66523743 -113.79483795]
[193.36897278 -100.18469238]
[194.37873840 -85.80791473]
[191.61898804 -71.65002441]
[185.27278137 -58.68320084]
[175.76968384 -47.79948807]
[163.75668335 -39.74945831]
[150.05409241 -35.09043121]
[135.59965515 -34.14790344]
[132.54125977 -19.46300507]
[129.48286438 -4.77810812]
[126.42446899 9.90678978]
[123.36607361 24.59168816]
[120.30767822 39.27658463]
[132.26257324 44.40018463]
[142.98023987 51.85937881]
[152.00817871 61.36445999]
[158.96018982 72.53886414]
[163.53288269 84.93406677]
[165.51882935 98.04759216]
[164.81591797 111.34338379]
[161.43240356 124.27367401]
[155.48736572 136.30160522]
[147.20671082 146.92349243]
[136.91455078 155.68988037]
[125.02064514 162.22460938]
[112.00402069 166.24089050]
[98.39376068 167.55380249]
[98.39376068 182.55380249]
[98.39376068 197.55380249]
[98.39376068 212.55380249]
[98.39376068 227.55380249]
[98.39376068 242.55380249]
[98.39376068 257.55380249]
[98.39376068 272.55380249]
[98.39376068 287.55380249]
[98.39376068 302.55380249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 23]
[12 22]
[13 21]
[34 129]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[49 113]
[50 112]
[51 111]
[52 109]
[53 108]
[60 101]
[61 100]
[62 99]
[63 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
