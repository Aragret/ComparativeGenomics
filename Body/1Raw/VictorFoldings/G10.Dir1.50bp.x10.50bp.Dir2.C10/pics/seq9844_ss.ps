%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCxxxxxxxxxxCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-80.11281586 267.22207642]
[-91.41181946 277.08779907]
[-102.71082306 286.95352173]
[-114.00982666 296.81924438]
[-125.30883789 306.68496704]
[-136.60783386 316.55068970]
[-147.15913391 327.21234131]
[-156.90678406 338.61334229]
[-166.65443420 350.01437378]
[-176.40208435 361.41540527]
[-169.81494141 375.14599609]
[-169.38851929 390.36892700]
[-175.19670105 404.44674683]
[-186.23316956 414.94039917]
[-200.58580017 420.03173828]
[-215.76791382 418.83868408]
[-229.14910889 411.56799316]
[-238.41102600 399.47927856]
[-241.94897461 384.66702271]
[-239.14997864 369.69754028]
[-230.49899292 357.16436768]
[-217.49484253 349.23898315]
[-202.39057922 347.29446411]
[-187.80310059 351.66772461]
[-178.05545044 340.26672363]
[-168.30780029 328.86569214]
[-158.56015015 317.46469116]
[-173.54016113 318.23867798]
[-185.61769104 309.34298706]
[-189.32150269 294.80743408]
[-182.97372437 281.21679688]
[-169.44996643 274.72775269]
[-154.87661743 278.27987671]
[-145.85556030 290.26403809]
[-146.47355652 305.25170898]
[-135.17456055 295.38598633]
[-123.87554932 285.52026367]
[-112.57654572 275.65454102]
[-101.27754211 265.78881836]
[-89.97853851 255.92308044]
[-99.33854675 243.76368713]
[-107.92151642 231.04386902]
[-115.69397736 217.81324768]
[-122.62564850 204.12336731]
[-128.68949890 190.02760315]
[-133.86187744 175.58090210]
[-138.12265015 160.83956909]
[-141.45520020 145.86108398]
[-143.84652710 130.70384216]
[-145.28730774 115.42689514]
[-145.77194214 100.08981323]
[-145.29852295 84.75238800]
[-143.86889648 69.47439575]
[-141.48864746 54.31539917]
[-138.16705322 39.33448410]
[-133.91706848 24.59005165]
[-128.75523376 10.13957310]
[-122.70169067 -3.96061921]
[-115.78002930 -17.65556145]
[-108.01723480 -30.89187050]
[-99.44357300 -43.61794662]
[-90.09245300 -55.78418732]
[-80.00032806 -67.34316254]
[-69.20655060 -78.24981689]
[-57.75318146 -88.46163177]
[-45.68487549 -97.93880463]
[-33.04867554 -106.64438629]
[-19.89383316 -114.54444885]
[-6.27163458 -121.60819244]
[7.76482344 -127.80809021]
[22.16082382 -133.11996460]
[36.86024857 -137.52310181]
[51.80580139 -141.00035095]
[66.93921661 -143.53816223]
[82.20151520 -145.12663269]
[97.53318787 -145.75956726]
[112.87447357 -145.43450928]
[128.16557312 -144.15272522]
[143.34689331 -141.91920471]
[158.35922241 -138.74264526]
[173.14407349 -134.63545227]
[187.64379883 -129.61363220]
[201.80187988 -123.69673920]
[215.56312561 -116.90785217]
[228.87388611 -109.27343750]
[241.68229675 -100.82325745]
[253.93840027 -91.59024048]
[263.68606567 -102.99125671]
[273.43371582 -114.39228058]
[283.18136597 -125.79330444]
[285.64465332 -142.00639343]
[301.01373291 -147.72685242]
[313.47817993 -137.06997681]
[310.21566772 -120.99863434]
[294.58239746 -116.04564667]
[284.83471680 -104.64463043]
[275.08706665 -93.24360657]
[265.33941650 -81.84259033]
[275.90200806 -71.64595032]
[285.83694458 -60.83683014]
[295.10873413 -49.45379639]
[303.68432617 -37.53746033]
[311.53308105 -25.13035202]
[318.62704468 -12.27673817]
[324.94088745 0.97751397]
[330.45205688 14.58510876]
[335.14089966 28.49748993]
[338.99069214 42.66501617]
[341.98770142 57.03712845]
[344.12121582 71.56254578]
[345.38360596 86.18943787]
[345.77041626 100.86561584]
[345.28024292 115.53869629]
[343.91482544 130.15634155]
[341.67904663 144.66636658]
[338.58090210 159.01701355]
[334.63140869 173.15707397]
[329.84466553 187.03607178]
[324.23779297 200.60450745]
[317.83074951 213.81396484]
[310.64642334 226.61727905]
[302.71044922 238.96879578]
[294.05114746 250.82443237]
[284.69940186 262.14187622]
[274.68856812 272.88073730]
[264.05441284 283.00271606]
[252.83486938 292.47167969]
[241.06996155 301.25387573]
[228.80166626 309.31790161]
[216.07377625 316.63500977]
[202.93168640 323.17910767]
[189.42231750 328.92684937]
[175.59384155 333.85769653]
[161.49563599 337.95407104]
[147.17799377 341.20135498]
[132.69201660 343.58795166]
[118.08937073 345.10534668]
[103.42218018 345.74813843]
[88.74277496 345.51400757]
[74.10354614 344.40380859]
[59.55671692 342.42150879]
[45.15420532 339.57418823]
[30.94739723 335.87197876]
[16.98699379 331.32809448]
[3.32280517 325.95877075]
[-9.99640942 319.78317261]
[-22.92312241 312.82330322]
[-35.41120529 305.10400391]
[-47.41610336 296.65286255]
[-58.89497375 287.49996948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[6 35]
[7 27]
[8 26]
[9 25]
[10 24]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
