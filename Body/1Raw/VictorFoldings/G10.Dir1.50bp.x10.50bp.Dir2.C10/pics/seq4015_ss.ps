%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGxxxxxxxxxxGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[67.75827789 345.33526611]
[67.75827789 330.33526611]
[67.75827789 315.33526611]
[67.75827789 300.33526611]
[67.75827789 285.33526611]
[67.75827789 270.33526611]
[67.75827789 255.33525085]
[67.75827789 240.33525085]
[67.75827789 225.33525085]
[67.75827789 210.33525085]
[54.22495651 203.86614990]
[42.55183792 213.28625488]
[30.87872314 222.70635986]
[19.20560646 232.12646484]
[7.53248882 241.54656982]
[-4.14062786 250.96667480]
[-15.81374454 260.38677979]
[-27.48686218 269.80688477]
[-27.60526466 285.44400024]
[-37.78661728 297.31304932]
[-53.22359467 299.80978394]
[-66.62732697 291.75537109]
[-71.66898346 276.95281982]
[-65.96804810 262.39144897]
[-52.21633148 254.94670105]
[-36.90696335 258.13375854]
[-25.23384857 248.71365356]
[-13.56073093 239.29354858]
[-1.88761425 229.87344360]
[9.78550243 220.45335388]
[21.45862007 211.03324890]
[33.13173676 201.61314392]
[44.80485153 192.19303894]
[37.15880966 168.09243774]
[43.74444962 144.34614563]
[61.74943924 128.47612000]
[84.86471558 125.11047363]
[89.06417847 110.71031189]
[89.52014160 95.71724701]
[86.20350647 81.08850861]
[82.73879242 66.49414062]
[79.12635040 51.93562317]
[75.51391602 37.37710953]
[71.90147400 22.81859779]
[68.28903961 8.26008606]
[64.67660522 -6.29842710]
[59.54410553 -13.92723370]
[61.14166260 -21.18859863]
[57.82502365 -35.81733322]
[52.84819412 -43.54859543]
[54.59259033 -50.77609253]
[51.57311249 -65.46903992]
[48.40489197 -80.13063812]
[45.08825302 -94.75936890]
[41.77161407 -109.38810730]
[38.45497513 -124.01684570]
[28.67128563 -112.64672852]
[13.67790413 -112.20119476]
[3.23633885 -122.97030640]
[4.14461899 -137.94277954]
[15.81140423 -147.37072754]
[30.64060593 -145.11627197]
[23.62837601 -158.37631226]
[9.46051407 -166.63485718]
[9.79926872 -183.03050232]
[24.29615784 -190.69680786]
[38.03802490 -181.74732971]
[36.88841629 -165.38853455]
[43.90064621 -152.12849426]
[58.52938080 -155.44512939]
[59.13726425 -170.43281555]
[45.32605743 -176.78253174]
[34.99976730 -187.93763733]
[29.73308182 -202.19703674]
[30.32912827 -217.38627625]
[36.69701385 -231.18911743]
[47.86568451 -241.50073242]
[62.13199997 -246.74865723]
[77.32044983 -246.13262939]
[91.11489868 -239.74658203]
[101.41180420 -228.56436157]
[106.64096069 -214.29115295]
[106.00495148 -199.10353088]
[99.60077667 -185.31748962]
[88.40501404 -175.03529358]
[74.12493896 -169.82492065]
[73.51705933 -154.83724976]
[53.08370972 -127.33348083]
[56.40034866 -112.70474243]
[59.71698761 -98.07601166]
[63.03362656 -83.44727325]
[67.60660553 -77.58489990]
[66.26605988 -68.48851776]
[69.28553772 -53.79557037]
[72.45375824 -39.13397217]
[75.77040100 -24.50523758]
[79.23511505 -9.91086483]
[82.84754944 4.64764833]
[86.45999146 19.20616150]
[90.07242584 33.76467514]
[93.68486786 48.32318497]
[97.29730225 62.88169861]
[101.98815918 68.65019226]
[100.83224487 77.77187347]
[104.14888000 92.40060425]
[111.93140411 87.55865479]
[122.12318420 86.69154358]
[137.11625671 87.14750671]
[152.10931396 87.60347748]
[167.10931396 87.60347748]
[182.10238647 87.14750671]
[197.09545898 86.69154358]
[207.74201965 75.01136780]
[223.53303528 74.36396790]
[235.09999084 85.13342285]
[235.58041382 100.93040466]
[224.68927002 112.38285065]
[208.88807678 112.69622803]
[197.55142212 101.68460846]
[182.55834961 102.14057922]
[167.56529236 102.59654236]
[164.87049866 104.95568848]
[160.87814331 106.09567261]
[156.18856812 105.41159821]
[151.65335083 102.59654236]
[136.66027832 102.14057922]
[121.66721344 101.68460846]
[131.64257812 112.88694000]
[125.99832153 126.78450012]
[111.03686523 127.85916901]
[103.46433258 114.90977478]
[99.26486969 129.30993652]
[106.35831451 133.45904541]
[112.52330017 138.99829102]
[117.48847961 145.72175598]
[121.02781677 153.37088013]
[122.97078705 161.64422607]
[123.21036530 170.20950317]
[121.70854187 178.71673584]
[118.49902344 186.81271362]
[113.68701172 194.15556335]
[107.44591522 200.42921448]
[100.01123810 205.35691833]
[91.67174530 208.71345520]
[82.75827789 210.33525085]
[82.75827789 225.33525085]
[82.75827789 240.33525085]
[82.75827789 255.33525085]
[82.75827789 270.33526611]
[82.75827789 285.33526611]
[82.75827789 300.33526611]
[82.75827789 315.33526611]
[82.75827789 330.33526611]
[82.75827789 345.33526611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[37 132]
[38 131]
[39 105]
[40 104]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[48 96]
[49 95]
[51 94]
[52 93]
[53 91]
[54 90]
[55 89]
[56 88]
[62 69]
[63 68]
[70 87]
[71 86]
[107 127]
[108 126]
[109 125]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
