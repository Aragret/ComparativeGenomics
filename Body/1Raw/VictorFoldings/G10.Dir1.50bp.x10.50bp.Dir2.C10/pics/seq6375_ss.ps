%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCxxxxxxxxxxGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.13760376 306.97378540]
[138.52972412 291.98608398]
[137.92184448 276.99841309]
[137.31394958 262.01074219]
[136.70606995 247.02305603]
[136.09819031 232.03538513]
[135.49029541 217.04769897]
[134.88241577 202.06002808]
[131.41770935 187.46565247]
[125.22421265 173.80400085]
[119.03072357 160.14234924]
[112.83723450 146.48069763]
[106.64374542 132.81906128]
[88.16543579 131.32368469]
[73.31471252 120.22683716]
[66.64366913 102.92998505]
[70.19715118 84.73501587]
[58.71734619 75.08026886]
[47.23754120 65.42552185]
[47.05527496 80.42441559]
[36.45233154 91.03467560]
[21.45356941 91.22728729]
[10.58165741 80.89279938]
[10.01428890 65.90353394]
[20.07385635 54.77676392]
[35.04433441 53.83501434]
[24.82053757 42.85895157]
[14.59673977 31.88288879]
[6.40688467 27.70347786]
[4.27974796 20.57922935]
[-5.71949816 9.39821529]
[-15.71874428 -1.78279912]
[-27.29579926 -11.32071400]
[-40.18365479 -18.99555206]
[-53.07151031 -26.67039108]
[-66.53858185 -33.27630234]
[-80.49639130 -38.76989365]
[-96.17144012 -36.62434006]
[-105.18072510 -48.48528671]
[-119.13853455 -53.97887421]
[-137.25035095 -50.80995560]
[-147.67350769 -64.89703369]
[-161.73979187 -70.10661316]
[-175.80607605 -75.31619263]
[-189.87236023 -80.52577209]
[-205.93838501 -77.23717499]
[-216.61547852 -89.68432617]
[-210.91996765 -105.06266022]
[-194.71090698 -107.55226898]
[-184.66278076 -94.59205627]
[-170.59649658 -89.38247681]
[-156.53021240 -84.17289734]
[-142.46392822 -78.96331787]
[-131.30700684 -83.73208618]
[-119.52208710 -79.46118164]
[-113.64495087 -67.93668365]
[-99.68713379 -62.44309616]
[-85.01044464 -64.98159027]
[-75.00279999 -52.72770309]
[-61.04499054 -47.23411560]
[-67.49796295 -60.77513123]
[-64.91321564 -75.55075836]
[-54.24658203 -86.09697723]
[-39.44256973 -88.51383209]
[-25.97567940 -81.90754700]
[-18.82595634 -68.72113800]
[-20.63735580 -53.83091354]
[-30.74002457 -42.74325943]
[-45.39667130 -39.55824661]
[-32.50881577 -31.88340950]
[-19.62096024 -24.20857048]
[-26.31714439 -37.63098145]
[-27.81061935 -52.55644608]
[-23.90672112 -67.03952789]
[-15.11429691 -79.19243622]
[-2.57938433 -87.43112183]
[12.06416702 -90.68172455]
[26.90765953 -88.52054596]
[40.01633835 -81.22927856]
[49.68156815 -69.75830078]
[54.64353943 -55.60277939]
[54.25550079 -40.60779953]
[48.56801987 -26.72786522]
[38.32243347 -15.77214050]
[24.85418510 -9.16863441]
[9.91877937 -7.77807522]
[-4.53773022 -11.78204536]
[5.46151590 -0.60103112]
[15.46076202 10.57998276]
[25.57280350 21.65909004]
[35.79660034 32.63515472]
[46.02039719 43.61121750]
[56.89228821 53.94572067]
[68.37209320 63.60046768]
[79.85189819 73.25521088]
[88.32619476 68.61605835]
[97.77227020 66.58941650]
[107.40379333 67.34400940]
[116.41899109 70.81701660]
[124.06740570 76.71932983]
[129.71235657 84.55962372]
[144.23352051 80.79983521]
[155.65377808 69.85047913]
[169.91412354 74.15065765]
[184.43528748 70.39087677]
[198.95643616 66.63108826]
[213.47760010 62.87129593]
[227.99874878 59.11150742]
[241.81672668 49.28806686]
[255.08146667 59.84662628]
[248.60757446 75.51586914]
[231.75854492 73.63266754]
[217.23738098 77.39245605]
[202.71623230 81.15224457]
[188.19506836 84.91203308]
[173.67391968 88.67182159]
[163.29231262 99.35224152]
[147.99330139 95.32099152]
[133.47215271 99.08078003]
[130.21067810 114.44108582]
[120.30538940 126.62556458]
[126.49888611 140.28721619]
[132.69236755 153.94886780]
[138.88586426 167.61051941]
[145.07934570 181.27217102]
[146.83915710 166.37574768]
[152.83714294 152.62715149]
[162.55938721 141.20445251]
[175.17279053 133.08644104]
[189.59654236 128.96873474]
[204.59469604 129.20417786]
[218.88208008 133.77258301]
[231.23446655 142.28250122]
[240.59338379 154.00473022]
[246.15687561 167.93482971]
[247.44824219 182.87913513]
[244.35682678 197.55711365]
[237.14750671 210.71104431]
[226.43803406 221.21377563]
[213.14610291 228.16535950]
[198.41065979 230.97012329]
[183.49436951 229.38775635]
[169.67535400 223.55381775]
[158.13774109 213.96821594]
[149.87010193 201.45214844]
[150.47798157 216.43981934]
[151.08586121 231.42750549]
[151.69374084 246.41517639]
[152.30163574 261.40286255]
[152.90951538 276.39053345]
[153.51739502 291.37820435]
[154.12527466 306.36587524]
[160.80854797 321.94699097]
[147.68647766 332.68234253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 125]
[10 124]
[11 123]
[12 122]
[13 121]
[17 95]
[18 94]
[19 93]
[26 92]
[27 91]
[28 90]
[30 89]
[31 88]
[32 87]
[33 71]
[34 70]
[35 69]
[36 60]
[37 59]
[39 57]
[40 56]
[42 53]
[43 52]
[44 51]
[45 50]
[101 119]
[102 118]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
