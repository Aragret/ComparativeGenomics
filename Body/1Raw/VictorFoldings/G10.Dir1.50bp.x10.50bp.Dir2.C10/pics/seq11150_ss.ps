%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGxxxxxxxxxxCAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-54.64166641 228.33369446]
[-66.53404999 237.47543335]
[-78.42642975 246.61715698]
[-90.31880951 255.75889587]
[-102.21118927 264.90063477]
[-112.65100098 275.67144775]
[-121.41720581 287.84326172]
[-130.18341064 300.01510620]
[-138.94961548 312.18695068]
[-147.71583557 324.35879517]
[-141.96334839 338.67355347]
[-144.88565063 353.82162476]
[-155.55021667 364.96926880]
[-170.55404663 368.55935669]
[-185.10946655 363.44628906]
[-194.57188416 351.26162720]
[-195.92187500 335.89343262]
[-188.72868347 322.24566650]
[-175.28761292 314.67327881]
[-159.88766479 315.59259033]
[-151.12145996 303.42074585]
[-142.35525513 291.24890137]
[-133.58905029 279.07705688]
[-124.82283783 266.90524292]
[-138.86961365 272.16717529]
[-153.86408997 271.75991821]
[-167.60453796 265.74328613]
[-178.07339478 255.00068665]
[-183.73345947 241.10955811]
[-183.75364685 226.10957336]
[-178.13099670 212.20324707]
[-167.69108582 201.43252563]
[-153.96687317 195.37892151]
[-138.97355652 194.93132019]
[-124.91266632 200.15542603]
[-113.84883118 210.28416443]
[-107.40660858 223.83030701]
[-106.53193665 238.80477905]
[-111.35292053 253.00825500]
[-99.46054077 243.86651611]
[-87.56816101 234.72477722]
[-75.67578125 225.58305359]
[-63.78340149 216.44131470]
[-75.17018127 198.48345947]
[-84.59571075 179.42294312]
[-91.95447540 159.47320557]
[-97.16407013 138.85758972]
[-100.16616821 117.80692291]
[-100.92716980 96.55687714]
[-99.43854523 75.34538269]
[-95.71695709 54.40992737]
[-89.80408478 33.98490524]
[-81.76612091 14.29900742]
[-71.69306183 -4.42736530]
[-59.69769287 -21.98454475]
[-45.91431427 -38.17596054]
[-30.49724388 -52.82032776]
[-13.61909771 -65.75368500]
[4.53115225 -76.83122253]
[-2.09734631 -90.28718567]
[-8.72584438 -103.74315643]
[-15.35434341 -117.19911957]
[-29.27916908 -125.86117554]
[-28.46965981 -142.24034119]
[-13.75856972 -149.48712158]
[-0.27940634 -140.14665222]
[-1.89837801 -123.82762146]
[4.73012066 -110.37165070]
[11.35861874 -96.91568756]
[17.98711777 -83.45972443]
[28.97955513 -87.98851013]
[40.22056580 -91.85932922]
[51.67080688 -95.05863953]
[63.29020309 -97.57523346]
[75.03807831 -99.40031433]
[86.87332916 -100.52748871]
[98.75451660 -100.95281219]
[110.64006805 -100.67478943]
[122.48838043 -99.69440460]
[134.25798035 -98.01508331]
[145.90766907 -95.64270782]
[157.39668274 -92.58557129]
[168.68481445 -88.85438538]
[179.73254395 -84.46220398]
[190.50120544 -79.42439270]
[200.95310974 -73.75859833]
[211.05168152 -67.48464203]
[220.76156616 -60.62448883]
[230.04878235 -53.20214462]
[238.88082886 -45.24358749]
[247.22677612 -36.77667236]
[255.05743408 -27.83103752]
[262.34539795 -18.43799019]
[274.78482056 -26.82013321]
[287.22427368 -35.20227432]
[299.66369629 -43.58441925]
[304.13113403 -58.99291611]
[319.01766968 -64.97373199]
[332.90368652 -56.93889236]
[335.13696289 -41.05204391]
[324.00436401 -29.50021362]
[308.04586792 -31.14497948]
[295.60641479 -22.76283455]
[283.16696167 -14.38069248]
[270.72753906 -5.99854898]
[277.15023804 5.12443638]
[282.84927368 16.63500023]
[287.80136108 28.48612213]
[291.98623657 40.62938690]
[295.38681030 53.01518631]
[297.98922729 65.59292603]
[299.78283691 78.31122589]
[300.76028442 91.11812592]
[300.91763306 103.96130371]
[300.25418091 116.78830719]
[298.77267456 129.54672241]
[296.47915649 142.18443298]
[293.38299561 154.64982605]
[289.49682617 166.89195251]
[284.83654785 178.86082458]
[279.42120361 190.50755310]
[273.27288818 201.78453064]
[266.41671753 212.64570618]
[258.88073730 223.04670715]
[250.69569397 232.94505310]
[241.89505005 242.30030823]
[232.51473999 251.07423401]
[222.59309387 259.23101807]
[212.17063904 266.73730469]
[201.28994751 273.56246948]
[189.99548340 279.67858887]
[178.33337402 285.06069946]
[166.35125732 289.68682861]
[154.09808350 293.53805542]
[141.62391663 296.59866333]
[128.97972107 298.85614014]
[116.21712494 300.30123901]
[103.38828278 300.92810059]
[90.54560089 300.73413086]
[77.74154663 299.72015381]
[65.02841187 297.89028931]
[52.45814896 295.25201416]
[40.08209610 291.81613159]
[27.95081520 287.59664917]
[16.11386490 282.61077881]
[4.61960173 276.87893677]
[-6.48502159 270.42453003]
[-17.15464020 263.27392578]
[-27.34566689 255.45631409]
[-37.01647186 247.00363159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[59 70]
[60 69]
[61 68]
[62 67]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
