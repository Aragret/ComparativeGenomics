%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACxxxxxxxxxxUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.28458405 280.07360840]
[97.28458405 265.07360840]
[97.28458405 250.07360840]
[97.28458405 235.07360840]
[97.28458405 220.07360840]
[97.28458405 205.07360840]
[97.28458405 190.07360840]
[97.28458405 175.07360840]
[97.28458405 160.07360840]
[97.28458405 145.07360840]
[78.25682831 137.44108582]
[65.30935669 122.66417694]
[60.67199707 104.45305634]
[64.60797119 86.95198822]
[75.51243591 73.80001068]
[67.78835297 60.94160843]
[60.06426620 48.08320618]
[52.34018326 35.22480392]
[37.72421265 39.00017166]
[22.65183067 38.50455475]
[8.34426212 33.78665924]
[-4.04165125 25.23695564]
[-13.50697994 13.55536747]
[-19.29127121 -0.30602145]
[-20.93363953 -15.22055626]
[-18.30948067 -29.97859001]
[-11.63987827 -43.38559341]
[-1.47300637 -54.35883331]
[-9.19709110 -67.21723938]
[-16.92117691 -80.07563782]
[-28.01249123 -90.17428589]
[-41.53668213 -96.66245270]
[-55.06087112 -103.15061951]
[-68.58506012 -109.63878632]
[-84.37419891 -108.63191986]
[-92.50254059 -121.11308289]
[-108.29167938 -120.10621643]
[-116.42002106 -132.58737183]
[-129.94421387 -139.07554626]
[-143.46839905 -145.56370544]
[-156.99258423 -152.05186462]
[-168.28860474 -141.87991333]
[-182.61904907 -136.80976868]
[-197.79867554 -137.61456299]
[-211.51266479 -144.17161560]
[-221.66975403 -155.48098755]
[-226.72105408 -169.81809998]
[-225.89627075 -184.99664307]
[-219.32119751 -198.70201111]
[-207.99845886 -208.84420776]
[-193.65472412 -213.87664795]
[-178.47727966 -213.03189087]
[-164.78057861 -206.43879700]
[-154.65327454 -195.10273743]
[-149.63972473 -180.75238037]
[-150.50442505 -165.57606506]
[-136.98023987 -159.08789062]
[-123.45604706 -152.59973145]
[-109.93185425 -146.11157227]
[-95.11006165 -147.58250427]
[-86.01437378 -134.63726807]
[-71.19258118 -136.10821533]
[-62.09689713 -123.16297150]
[-48.57270813 -116.67481232]
[-35.04851532 -110.18664551]
[-21.52432632 -103.69847870]
[-29.58472061 -116.34877777]
[-34.89449692 -130.37754822]
[-37.23025894 -145.19456482]
[-36.49374390 -160.17646790]
[-32.71593475 -174.69294739]
[-26.05577087 -188.13327026]
[-16.79345512 -199.93197632]
[-5.31866693 -209.59268188]
[7.88583231 -216.70895386]
[22.26450920 -220.98138428]
[37.21243286 -222.23022461]
[52.10071945 -220.40295410]
[66.30299377 -215.57643127]
[79.22175598 -207.95372009]
[90.31347656 -197.85551453]
[99.11152649 -185.70668030]
[105.24575043 -172.01831055]
[108.45807648 -157.36631775]
[108.61334991 -142.36712646]
[105.70504761 -127.65176392]
[99.85552216 -113.83934021]
[91.31086731 -101.51096344]
[80.43058014 -91.18530273]
[67.67240143 -83.29677582]
[53.57308960 -78.17726135]
[38.72582245 -76.04215240]
[23.75524902 -76.98127747]
[9.29120350 -80.95510864]
[-4.06277370 -87.79972076]
[3.66131115 -74.94132233]
[11.38539600 -62.08292007]
[25.84813309 -65.90476990]
[40.81690979 -65.49600983]
[55.07838058 -60.88122940]
[67.47413635 -52.42628860]
[76.99476624 -40.80933380]
[82.86209869 -26.96641350]
[84.59275055 -12.01605797]
[82.03797150 2.83110237]
[75.39639282 16.37036705]
[65.19858551 27.50071716]
[72.92266846 40.35911942]
[80.64675140 53.21752167]
[88.37084198 66.07592773]
[104.32485962 62.52812195]
[121.02603912 66.46752167]
[134.98513794 77.79310608]
[142.98306274 94.79847717]
[142.79542542 114.40676117]
[156.69798279 120.03871918]
[170.60054016 125.67067719]
[184.50309753 131.30262756]
[198.40565491 136.93458557]
[212.85972595 130.54278564]
[227.56965637 136.32153320]
[233.80827332 150.84237671]
[227.87432861 165.49038696]
[213.28833008 171.57513428]
[198.70388794 165.48666382]
[192.77369690 150.83714294]
[178.87113953 145.20518494]
[164.96858215 139.57322693]
[151.06602478 133.94126892]
[137.16346741 128.30931091]
[130.94374084 132.50038147]
[140.44429016 144.10813904]
[149.94482422 155.71588135]
[162.36996460 164.11920166]
[162.35719299 179.11920166]
[149.91775513 187.50134277]
[136.01040649 181.88125610]
[132.88706970 167.21000671]
[125.69569397 154.04626465]
[118.50431061 140.88253784]
[112.28458405 145.07360840]
[112.28458405 160.07360840]
[112.28458405 175.07360840]
[112.28458405 190.07360840]
[112.28458405 205.07360840]
[112.28458405 220.07360840]
[112.28458405 235.07360840]
[112.28458405 250.07360840]
[112.28458405 265.07360840]
[112.28458405 280.07360840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 110]
[16 109]
[17 108]
[18 107]
[28 97]
[29 96]
[30 95]
[31 66]
[32 65]
[33 64]
[34 63]
[36 61]
[38 59]
[39 58]
[40 57]
[41 56]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
