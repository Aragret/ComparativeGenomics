%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUxxxxxxxxxxCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.53145599 433.75903320]
[105.53145599 418.75903320]
[105.53145599 403.75903320]
[105.53145599 388.75903320]
[105.53145599 373.75903320]
[105.53145599 358.75903320]
[105.53145599 343.75903320]
[105.53145599 328.75903320]
[105.53145599 313.75903320]
[105.53145599 298.75903320]
[88.82572174 295.03097534]
[73.44834900 287.49603271]
[60.25380325 276.56884766]
[49.97617340 262.85284424]
[43.18834305 247.10662842]
[40.27004623 230.20214844]
[41.38664246 213.07638550]
[46.47973633 196.67948914]
[55.27021790 181.92192078]
[67.27358246 169.62402344]
[81.82659149 160.47038269]
[98.12396240 154.97169495]
[96.58666992 140.05068970]
[95.04937744 125.12966919]
[81.43027496 117.64013672]
[74.64941406 103.65468597]
[59.82693100 101.35380554]
[45.00444794 99.05293274]
[30.18196678 96.75205994]
[24.50550652 110.71180725]
[15.76222420 122.98583221]
[4.42363548 132.91221619]
[-8.89878464 139.95564270]
[-23.48657417 143.73626709]
[-38.55303192 144.05020142]
[-53.28564453 140.88052368]
[-66.88990021 134.39816284]
[-78.63213348 124.95270538]
[-87.87910461 113.05354309]
[-94.13214111 99.34236908]
[-97.05401611 84.55861664]
[-96.48716736 69.49954987]
[-92.46215057 54.97729111]
[-85.19603729 41.77500916]
[-75.08068085 30.60467911]
[-62.66158295 22.06870651]
[-48.60849762 16.62742615]
[-33.67928696 14.57427979]
[-18.67906761 16.01998901]
[-4.41677713 20.88658905]
[8.33843422 28.91163254]
[18.89869499 39.66233444]
[26.69450188 52.55892944]
[31.30543900 66.90591431]
[32.48284149 81.92957306]
[47.30532455 84.23045349]
[62.12780762 86.53132629]
[76.95028687 88.83219910]
[89.29492188 76.73178101]
[106.51568604 75.22995758]
[114.41216278 62.47670364]
[122.30864716 49.72344589]
[130.20512390 36.97018814]
[116.80295563 43.70677948]
[101.98825073 46.05722046]
[87.15910339 43.79969406]
[73.71495819 37.14725113]
[62.92456436 26.72768402]
[55.80621719 13.52430820]
[53.03168869 -1.21685827]
[54.86281586 -16.10467148]
[61.12678909 -29.73414803]
[71.23247528 -40.81905365]
[84.22618103 -48.31329727]
[98.88166809 -51.50962830]
[113.81589508 -50.10640717]
[127.61948395 -44.23606491]
[138.98977661 -34.45258331]
[146.85372925 -21.67924881]
[150.46923828 -7.12149763]
[149.49508667 7.84683657]
[144.02430725 21.81127930]
[155.99456787 12.77176094]
[167.96481323 3.73224115]
[179.93507385 -5.30727863]
[191.90533447 -14.34679794]
[194.87359619 -20.36610031]
[199.72570801 -23.47172928]
[204.55772400 -23.49966621]
[216.88900757 -32.04012680]
[229.22029114 -40.58058548]
[229.69961548 -55.97787094]
[239.04421997 -68.00000763]
[253.50503540 -72.16521454]
[267.47833252 -67.07752228]
[279.80963135 -75.61798096]
[292.14089966 -84.15843964]
[304.47219849 -92.69889832]
[314.05075073 -106.68773651]
[330.14450073 -101.35601044]
[329.47634888 -84.41523743]
[313.01266479 -80.36761475]
[300.68136597 -71.82715607]
[288.35009766 -63.28669739]
[276.01879883 -54.74623871]
[275.86785889 -39.87629318]
[266.88354492 -27.80376053]
[252.34320068 -23.28356361]
[237.76075745 -28.24930000]
[225.42947388 -19.70884132]
[213.09819031 -11.16838169]
[200.94485474 -2.37653971]
[188.97459412 6.66298008]
[177.00433350 15.70249939]
[165.03407288 24.74201965]
[153.06382751 33.78153992]
[142.95838928 44.86667252]
[135.06190491 57.61993027]
[127.16542053 70.37318420]
[119.26893616 83.12644196]
[124.83735657 93.74584198]
[124.96212006 105.73596954]
[119.61588287 116.46894073]
[109.97039032 123.59237671]
[111.50768280 138.51339722]
[113.04497528 153.43440247]
[126.02573395 154.62251282]
[138.58467102 158.09802246]
[150.32214355 163.74888611]
[160.86491394 171.39378357]
[169.87806702 180.78805542]
[177.07553101 191.63150024]
[182.22926331 203.57794189]
[185.17642212 216.24629211]
[185.82456970 229.23272705]
[184.15447998 242.12351990]
[180.22077942 254.50830078]
[174.15014648 265.99301147]
[166.13719177 276.21255493]
[156.43827820 284.84228516]
[145.36329651 291.60839844]
[133.26574707 296.29663086]
[120.53145599 298.75903320]
[120.53145599 313.75903320]
[120.53145599 328.75903320]
[120.53145599 343.75903320]
[120.53145599 358.75903320]
[120.53145599 373.75903320]
[120.53145599 388.75903320]
[120.53145599 403.75903320]
[120.53145599 418.75903320]
[120.53145599 433.75903320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 126]
[23 125]
[24 124]
[26 58]
[27 57]
[28 56]
[29 55]
[60 120]
[61 119]
[62 118]
[63 117]
[82 116]
[83 115]
[84 114]
[85 113]
[86 112]
[89 111]
[90 110]
[91 109]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
