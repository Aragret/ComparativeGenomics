%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGxxxxxxxxxxUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.13929749 617.67480469]
[178.13929749 602.67480469]
[178.13929749 587.67480469]
[178.13929749 572.67480469]
[178.13929749 557.67480469]
[178.13929749 542.67480469]
[178.13929749 527.67480469]
[178.13929749 512.67480469]
[178.13929749 497.67480469]
[178.13929749 482.67480469]
[157.86462402 477.50473022]
[139.94099426 466.68490601]
[125.90438843 451.13394165]
[116.96019745 432.17623901]
[113.87966156 411.42926025]
[116.93341064 390.66543579]
[125.86768341 371.66082764]
[139.92541504 356.04318237]
[157.91035461 345.15243530]
[153.60276794 330.78424072]
[149.29519653 316.41607666]
[144.98760986 302.04788208]
[130.89350891 297.30502319]
[122.19183350 285.02722168]
[122.39063263 269.80178833]
[131.62324524 257.47030640]
[127.31565857 243.10212708]
[123.00807190 228.73394775]
[118.04248047 223.19422913]
[118.76367950 214.02189636]
[114.75594330 199.56719971]
[110.74819946 185.11251831]
[106.74046326 170.65782166]
[103.80218506 168.60015869]
[101.74238586 164.98643494]
[101.29537964 160.25859070]
[102.96385956 155.17570496]
[99.86553955 140.49917603]
[96.76721954 125.82265472]
[93.66889954 111.14612579]
[85.67897797 98.45119476]
[73.78659821 89.30946350]
[61.89421844 80.16772461]
[47.08337021 84.40386963]
[32.78520584 79.16784668]
[24.41090965 66.66444397]
[24.99788475 51.80532074]
[13.10550404 42.66358948]
[1.21312439 33.52185440]
[-10.67925549 24.38011932]
[-26.31564903 26.67766762]
[-38.94682312 17.17877388]
[-41.07892609 1.51896358]
[-31.44701958 -11.01107693]
[-15.76554203 -12.97749519]
[-3.33803606 -3.21365166]
[-1.53752124 12.48773956]
[10.35485840 21.62947464]
[22.24723816 30.77120781]
[34.13961792 39.91294098]
[48.34813690 35.52477264]
[62.58449173 40.40229416]
[71.32112885 52.87324142]
[71.03595734 68.27534485]
[82.92833710 77.41708374]
[94.82071686 86.55881500]
[108.89223480 81.36340332]
[111.99055481 66.68687439]
[115.08887482 52.01034927]
[101.63061523 45.18849945]
[90.39720917 35.11511993]
[82.15456390 22.47703362]
[77.46468353 8.13592339]
[76.64733124 -6.93040800]
[79.75822449 -21.69471359]
[86.58527374 -35.15033722]
[96.66298676 -46.37985611]
[109.30426025 -54.61761856]
[123.64717865 -59.30196381]
[138.71382141 -60.11350250]
[153.47692871 -56.99690247]
[166.92991638 -50.16466141]
[178.15553284 -40.08261108]
[186.38842773 -27.43816185]
[191.06723022 -13.09343529]
[191.87294006 1.97352314]
[188.75065613 16.73542213]
[181.91320801 30.18577194]
[171.82682800 41.40750504]
[159.17919922 49.63550186]
[144.83267212 54.30876923]
[129.76539612 55.10867310]
[126.66708374 69.78519440]
[123.56875610 84.46172333]
[138.55200195 85.17068481]
[149.56643677 95.35312653]
[151.44760132 110.23470306]
[143.31344604 122.83770752]
[128.97795105 127.25282288]
[115.16273499 121.40988922]
[108.34542084 108.04780579]
[111.44374084 122.72432709]
[114.54206848 137.40084839]
[117.64038849 152.07737732]
[121.19515228 166.65008545]
[125.20288849 181.10476685]
[129.21063232 195.55946350]
[133.21836853 210.01414490]
[137.37625122 224.42636108]
[141.68383789 238.79455566]
[145.99142456 253.16273499]
[160.48544312 258.38095093]
[169.02775574 270.98580933]
[168.51597595 286.02581787]
[159.35578918 297.74029541]
[163.66337585 312.10848999]
[167.97096252 326.47665405]
[172.27854919 340.84484863]
[182.28387451 339.68853760]
[192.35023499 339.94113159]
[202.28025818 341.59704590]
[211.87933350 344.62310791]
[220.95944214 348.95935059]
[229.34280396 354.52014160]
[236.86538696 361.19592285]
[243.38014221 368.85525513]
[248.75982666 377.34750366]
[252.89949036 386.50579834]
[255.71858215 396.15026855]
[257.16247559 406.09164429]
[257.20349121 416.13482666]
[255.84149170 426.08291626]
[253.10386658 435.74090576]
[249.04492188 444.91961670]
[243.74487305 453.43930054]
[237.30819702 461.13327026]
[229.86164856 467.85107422]
[221.55168152 473.46148682]
[212.54162598 477.85501099]
[203.00845337 480.94610596]
[193.13929749 482.67480469]
[193.13929749 497.67480469]
[193.13929749 512.67480469]
[193.13929749 527.67480469]
[193.13929749 542.67480469]
[193.13929749 557.67480469]
[193.13929749 572.67480469]
[193.13929749 587.67480469]
[193.13929749 602.67480469]
[193.13929749 617.67480469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 118]
[20 117]
[21 116]
[22 115]
[26 111]
[27 110]
[28 109]
[30 108]
[31 107]
[32 106]
[33 105]
[37 104]
[38 103]
[39 102]
[40 101]
[41 66]
[42 65]
[43 64]
[47 60]
[48 59]
[49 58]
[50 57]
[67 94]
[68 93]
[69 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
