%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.53427887 281.34185791]
[86.24160004 266.34469604]
[85.94892120 251.34756470]
[85.65625000 236.35041809]
[85.36357117 221.35327148]
[85.07089233 206.35612488]
[84.77822113 191.35897827]
[84.48554230 176.36184692]
[84.19286346 161.36470032]
[70.21201324 155.93002319]
[59.86724854 166.79214478]
[49.52248383 177.65428162]
[55.71238708 191.53784180]
[56.11310577 206.73350525]
[50.66352844 220.92401123]
[40.19467926 231.94541931]
[26.30297852 238.11706543]
[11.10681152 238.49778748]
[-3.07651639 233.02955627]
[-14.08415127 222.54621887]
[-20.23750877 208.64640808]
[-20.59824753 193.44975281]
[-15.11135483 179.27363586]
[-4.61354446 168.27980042]
[9.29434490 162.14472961]
[24.49146080 161.80398560]
[38.66035461 167.30950928]
[49.00511932 156.44738770]
[59.34988022 145.58525085]
[47.47781372 128.57093811]
[42.18785858 108.96537018]
[43.81903076 89.16591644]
[29.58979607 84.41945648]
[15.36056137 79.67299652]
[1.13132727 74.92653656]
[-13.09790707 70.18007660]
[-21.14479828 82.92805481]
[-32.00914001 93.37934875]
[-45.05929184 100.92633057]
[-59.53653717 105.13022614]
[-74.59918976 105.74663544]
[-89.37152100 102.73971558]
[-102.99469757 96.28427887]
[-114.67667389 86.75564575]
[-123.73828125 74.70779419]
[-129.65269470 60.84117508]
[-132.07603455 45.96196747]
[-130.86744690 30.93523407]
[-126.09717560 16.63460732]
[-118.04255676 3.89150882]
[-107.17188263 -6.55319595]
[-94.11714935 -14.09226513]
[-79.63735962 -18.28738594]
[-64.57434082 -18.89466095]
[-49.80382919 -15.87878513]
[-36.18457413 -9.41509438]
[-24.50837517 0.12061866]
[-15.45407295 12.17396069]
[-9.54807281 26.04416656]
[-7.13374233 40.92483902]
[-8.35144711 55.95084000]
[5.87778759 60.69729996]
[20.10702133 65.44375610]
[34.33625793 70.19021606]
[48.56549072 74.93668365]
[58.56080627 60.54785538]
[72.44151306 49.85811615]
[88.90614319 43.86974716]
[106.41094971 43.14422989]
[123.31465912 47.74958801]
[138.03234863 57.25401688]
[149.38600159 47.45122910]
[160.73965454 37.64844513]
[172.09330750 27.84565735]
[157.16995239 29.36021423]
[143.02926636 24.35611725]
[132.38031006 13.79205036]
[127.26318359 -0.30812886]
[128.65824890 -15.24311543]
[136.29821777 -28.15167046]
[148.71943665 -36.56078339]
[163.54226685 -38.85943604]
[177.92694092 -34.60725403]
[189.11766052 -24.61886978]
[194.97052002 -10.80785465]
[194.36421204 4.17988682]
[187.41610718 17.47157860]
[200.73439026 10.57060337]
[203.59594727 6.08435488]
[207.51351929 3.44172978]
[211.59391785 2.73461223]
[215.03993225 3.68141532]
[228.73915100 -2.42854595]
[242.43835449 -8.53850746]
[256.13757324 -14.64846897]
[261.86755371 -29.13311768]
[275.84753418 -35.13433838]
[289.62112427 -29.58241081]
[303.32034302 -35.69237137]
[307.55709839 -40.87402344]
[312.96841431 -42.80874252]
[317.67529297 -41.76183319]
[331.60244751 -47.33264923]
[341.54208374 -59.64178085]
[356.23260498 -57.18462372]
[370.15975952 -62.75544357]
[384.08694458 -68.32626343]
[398.01409912 -73.89707947]
[411.94125366 -79.46790314]
[424.40200806 -90.96425629]
[438.89855957 -82.17298889]
[434.46389771 -65.80930328]
[417.51208496 -65.54073334]
[403.58493042 -59.96991730]
[389.65774536 -54.39909744]
[375.73059082 -48.82827759]
[361.80340576 -43.25745773]
[352.85998535 -31.34679031]
[337.17327881 -33.40548325]
[323.24612427 -27.83466530]
[309.43029785 -21.99316216]
[295.73107910 -15.88320065]
[290.65878296 -1.92585719]
[276.85287476 4.46566296]
[262.24752808 -0.94925809]
[248.54830933 5.16070318]
[234.84910583 11.27066422]
[221.14988708 17.38062668]
[207.63536072 23.88888168]
[194.31707764 30.78985786]
[181.89608765 39.19930649]
[170.54243469 49.00209427]
[159.18878174 58.80487823]
[147.83512878 68.60766602]
[151.63877869 74.83735657]
[154.63143921 81.52639008]
[156.75787354 88.56924438]
[157.97654724 95.85377502]
[158.26045227 103.26298523]
[157.59764099 110.67696381]
[155.99157715 117.97475433]
[153.46113586 125.03639984]
[150.04046631 131.74484253]
[145.77853394 137.98791504]
[140.73840332 143.66020203]
[134.99636841 148.66481018]
[128.64074707 152.91500854]
[121.77058411 156.33573914]
[114.49404907 158.86497498]
[106.92677307 160.45472717]
[99.19001007 161.07202148]
[99.48268890 176.06916809]
[99.77536011 191.06631470]
[100.06803894 206.06344604]
[100.36071777 221.06059265]
[100.65338898 236.05773926]
[100.94606781 251.05488586]
[101.23874664 266.05203247]
[101.53141785 281.04916382]
[104.09759521 300.26022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 29]
[11 28]
[12 27]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[71 134]
[72 133]
[73 132]
[74 131]
[87 130]
[88 129]
[92 128]
[93 127]
[94 126]
[95 125]
[98 122]
[99 121]
[102 120]
[103 119]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
