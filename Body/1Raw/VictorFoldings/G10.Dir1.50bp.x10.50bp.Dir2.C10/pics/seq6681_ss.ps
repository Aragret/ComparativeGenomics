%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCAxxxxxxxxxxCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAGCCCUCCUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.92488098 379.80572510]
[100.92488098 364.80572510]
[100.92488098 349.80572510]
[100.92488098 334.80572510]
[100.92488098 319.80572510]
[100.92488098 304.80572510]
[100.92488098 289.80572510]
[100.92488098 274.80572510]
[100.92488098 259.80572510]
[100.92488098 244.80574036]
[86.46002197 240.96940613]
[73.47116089 233.51377869]
[62.84669113 222.94187927]
[55.31508636 209.97009277]
[51.39493561 195.47964478]
[51.35927200 180.45674133]
[55.21652222 165.92543030]
[62.70956421 152.87777710]
[73.33282471 142.20622253]
[86.36640930 134.64241028]
[100.92488098 130.70716858]
[81.56205750 124.21878815]
[70.70316315 107.14733887]
[72.99121857 87.23459625]
[58.41851425 83.67983246]
[43.84581375 80.12506866]
[29.27310944 76.57031250]
[14.70040607 73.01554871]
[0.12770370 69.46078491]
[-12.59200668 80.56308746]
[-29.25561142 81.90688324]
[-43.30848694 73.16144562]
[-49.34045029 57.92594147]
[-63.98395157 54.67511368]
[-78.62745667 51.42428970]
[-87.02278900 64.06876373]
[-99.42118073 72.82344818]
[-114.14583588 76.50434113]
[-129.20536804 74.61362457]
[-142.56311035 67.40701294]
[-152.41252136 55.85913849]
[-157.42156982 41.53175354]
[-156.91279602 26.36252213]
[-150.95503235 12.40295696]
[-140.35400391 1.54097450]
[-126.54342651 -4.75443125]
[-111.39104462 -5.63185787]
[-96.94611359 -0.97264129]
[-85.16217804 8.59309864]
[-77.63292694 21.77167320]
[-75.37663269 36.78078842]
[-60.73312759 40.03161240]
[-46.08962631 43.28244019]
[-36.92190170 33.52801514]
[-24.02322769 29.56119537]
[-10.74682140 32.52557373]
[-0.59996939 41.74806976]
[3.68246555 54.88808441]
[18.25516891 58.44284439]
[32.82786942 61.99760818]
[47.40057373 65.55236816]
[61.97327805 69.10713196]
[76.54598236 72.66189575]
[89.71456146 65.47938538]
[94.61611176 51.30282593]
[99.51766205 37.12626648]
[86.37198639 29.82131958]
[74.69462585 20.34448051]
[64.84045410 8.98374081]
[57.10892868 -3.91566110]
[51.73498917 -17.96172523]
[48.88195419 -32.72760773]
[48.63652420 -47.76459122]
[51.00615311 -62.61571884]
[55.91883087 -76.82968140]
[63.22526932 -89.97453308]
[72.70343018 -101.65081024]
[84.06529236 -111.50370026]
[96.96556854 -119.23376465]
[111.01224518 -124.60610962]
[125.77845001 -127.45746613]
[140.81546021 -127.70119476]
[155.66632080 -125.32987976]
[169.87973022 -120.41558838]
[183.02374268 -113.10766602]
[194.69894409 -103.62817383]
[204.55055237 -92.26519775]
[212.27914429 -79.36404419]
[217.64990234 -65.31676483]
[220.49958801 -50.55023193]
[220.74160767 -35.51319122]
[218.36860657 -20.66260338]
[213.45271301 -6.44975662]
[206.14329529 6.69343615]
[196.66247559 18.36756706]
[185.29838562 28.21787262]
[172.39634705 35.94501495]
[158.34846497 41.31417084]
[143.58160400 44.16218185]
[128.54454041 44.40250015]
[113.69422150 42.02781677]
[108.79267120 56.20437622]
[103.89112091 70.38093567]
[118.95410919 76.54513550]
[128.67486572 89.78924561]
[130.06555176 106.31259155]
[144.83160400 108.95145416]
[159.59765625 111.59032440]
[174.48094177 113.45793152]
[189.44119263 114.54924774]
[204.40142822 115.64055634]
[219.36167908 116.73186493]
[234.32192993 117.82317352]
[250.55899048 112.94522095]
[259.74118042 127.19737244]
[248.58789062 139.96609497]
[233.23062134 132.78343201]
[218.27037048 131.69210815]
[203.31011963 130.60079956]
[188.34986877 129.50949097]
[173.38963318 128.41818237]
[180.74903870 141.48872375]
[175.31680298 155.47052002]
[161.06343079 160.14402771]
[148.40699768 152.09326172]
[146.59832764 137.20271301]
[156.95880127 126.35637665]
[142.19273376 123.71751404]
[127.42668152 121.07865143]
[115.92488098 130.70716858]
[130.48335266 134.64241028]
[143.51693726 142.20622253]
[154.14019775 152.87777710]
[161.63323975 165.92543030]
[165.49049377 180.45674133]
[165.45481873 195.47964478]
[161.53466797 209.97009277]
[154.00306702 222.94187927]
[143.37860107 233.51377869]
[130.38973999 240.96940613]
[115.92488098 244.80574036]
[115.92488098 259.80572510]
[115.92488098 274.80572510]
[115.92488098 289.80572510]
[115.92488098 304.80572510]
[115.92488098 319.80572510]
[115.92488098 334.80572510]
[115.92488098 349.80572510]
[115.92488098 364.80572510]
[115.92488098 379.80572510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[33 53]
[34 52]
[35 51]
[64 103]
[65 102]
[66 101]
[106 129]
[107 128]
[108 127]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
