%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCxxxxxxxxxxAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.09867859 440.97930908]
[81.09867859 425.97930908]
[81.09867859 410.97930908]
[81.09867859 395.97930908]
[81.09867859 380.97930908]
[81.09867859 365.97930908]
[81.09867859 350.97930908]
[81.09867859 335.97930908]
[81.09867859 320.97930908]
[81.09867859 305.97930908]
[65.66154480 303.03540039]
[51.07930374 297.16421509]
[37.90153885 288.58517456]
[26.62525558 277.61978149]
[17.67615318 264.67956543]
[11.39253712 250.25067139]
[8.01253510 234.87559509]
[7.66507530 219.13272095]
[10.36496925 203.61463928]
[16.01228714 188.90583801]
[24.39605331 175.56062317]
[35.20213699 164.08227539]
[48.02501297 154.90408325]
[62.38297272 148.37298584]
[77.73625183 144.73637390]
[77.11227417 129.74935913]
[79.97566223 87.21089935]
[73.34716034 73.75493622]
[66.30202484 60.51234818]
[58.84711456 47.49604034]
[51.39220428 34.47973251]
[43.93729401 21.46342087]
[36.48238373 8.44711208]
[29.02747536 -4.56919765]
[21.57256508 -17.58550644]
[11.13275242 -28.35631561]
[-1.64460528 -36.21374130]
[-14.42196274 -44.07116699]
[-27.19931984 -51.92859268]
[-39.97667694 -59.78601837]
[-51.05260468 -49.52802658]
[-64.48590851 -42.63970566]
[-79.27974701 -39.63221359]
[-94.33631134 -40.72872925]
[-108.53831482 -45.84787750]
[-120.83187103 -54.60978699]
[-130.30471802 -66.36426544]
[-136.25389099 -80.23905945]
[-138.23796082 -95.20455170]
[-136.10964966 -110.15022278]
[-130.02693176 -123.96698761]
[-120.44115448 -135.62956238]
[-108.06366730 -144.27249146]
[-93.81295013 -149.25442505]
[-78.74650574 -150.20567322]
[-63.98236465 -147.05563354]
[-50.61612320 -140.03808594]
[-39.63964462 -129.67373657]
[-31.86745834 -116.73172760]
[-27.87631035 -102.17242432]
[-27.96236992 -87.07623291]
[-32.11925125 -72.56337738]
[-19.34189415 -64.70594788]
[-6.56453705 -56.84852600]
[6.21282053 -48.99110031]
[18.99017715 -41.13367462]
[12.14911556 -54.48282623]
[8.63517475 -69.06542206]
[8.64499664 -84.06542206]
[12.17803288 -98.64340973]
[19.03657150 -111.98358917]
[28.83680534 -123.33943939]
[41.03030777 -132.07548523]
[54.93472290 -137.70285034]
[69.77195740 -139.90661621]
[84.71170044 -138.56347656]
[98.91792297 -133.74858093]
[111.59563446 -125.73136902]
[122.03537750 -114.96050262]
[129.65295410 -102.03871155]
[134.02206421 -87.68911743]
[134.89822388 -72.71472931]
[132.23237610 -57.95351791]
[126.17374420 -44.23153305]
[117.06134033 -32.31666565]
[105.40510559 -22.87567520]
[91.85733795 -16.43688583]
[77.17617798 -13.36061668]
[62.18318176 -13.81901836]
[47.71737671 -17.78643608]
[34.58887482 -25.04041672]
[42.04378510 -12.02410793]
[49.49869537 0.99220139]
[56.95360565 14.00851059]
[64.40851593 27.02482033]
[71.86342621 40.04113007]
[79.31833649 53.05743790]
[82.67391968 54.32533264]
[85.56272125 57.31807327]
[87.16400909 61.78889465]
[86.80312347 67.12643433]
[93.43162537 80.58240509]
[96.64543915 65.93073273]
[110.45101929 60.06507111]
[123.22839355 67.92246246]
[124.22302246 82.88945007]
[112.59766388 92.36853790]
[127.59684753 92.21250153]
[142.59603882 92.05646515]
[157.59523010 91.90042877]
[172.59442139 91.74439240]
[188.36979675 85.53361511]
[198.70491028 98.97317505]
[188.65162659 112.62483215]
[172.75045776 106.74358368]
[157.75126648 106.89962006]
[142.75207520 107.05565643]
[127.75288391 107.21169281]
[112.75370026 107.36772919]
[107.59009552 112.80714417]
[111.84786224 127.19017029]
[97.26289368 123.68596649]
[92.09928894 129.12538147]
[92.72326660 144.11239624]
[106.90598297 146.11584473]
[120.51380157 150.57542419]
[133.12496948 157.35159302]
[144.34883118 166.23301697]
[153.83799744 176.94319153]
[161.29904175 189.14903259]
[166.50155640 202.47122192]
[169.28533936 216.49600220]
[169.56524658 230.78807068]
[167.33387756 244.90400696]
[162.66168213 258.40609741]
[155.69480896 270.87591553]
[146.65048218 281.92721558]
[135.81022644 291.21792603]
[123.51119995 298.46084595]
[110.13555145 303.43231201]
[96.09867859 305.97930908]
[96.09867859 320.97930908]
[96.09867859 335.97930908]
[96.09867859 350.97930908]
[96.09867859 365.97930908]
[96.09867859 380.97930908]
[96.09867859 395.97930908]
[96.09867859 410.97930908]
[96.09867859 425.97930908]
[96.09867859 440.97930908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 124]
[26 123]
[27 102]
[28 101]
[29 97]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[36 66]
[37 65]
[38 64]
[39 63]
[40 62]
[107 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
