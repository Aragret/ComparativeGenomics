%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAGxxxxxxxxxxCCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.97694397 564.28753662]
[89.97694397 549.28753662]
[89.97694397 534.28753662]
[89.97694397 519.28753662]
[89.97694397 504.28750610]
[89.97694397 489.28750610]
[89.97694397 474.28750610]
[89.97694397 459.28750610]
[89.97694397 444.28750610]
[89.97694397 429.28750610]
[75.24713135 426.55386353]
[61.26675797 421.15859985]
[48.51247787 413.28408813]
[37.41943359 403.19732666]
[28.36640549 391.24069214]
[21.66287804 377.82052612]
[17.53846550 363.39321899]
[16.13504219 348.44973755]
[17.50186539 333.49884033]
[21.59384155 319.04986572]
[28.27302170 305.59530640]
[37.31324768 293.59402466]
[48.40780640 283.45562744]
[61.17984390 275.52648926]
[75.19515228 270.07785034]
[89.97694397 267.29672241]
[89.97694397 252.29672241]
[89.97694397 237.29672241]
[81.62928009 228.48883057]
[81.54309082 215.95233154]
[90.31256866 206.43917847]
[90.62054443 191.44235229]
[90.92852020 176.44551086]
[91.23649597 161.44866943]
[76.78836060 157.56698608]
[63.68864822 150.34107971]
[52.69836807 140.19071960]
[44.45596695 127.70556641]
[39.44026947 113.61091614]
[37.94265747 98.72557831]
[40.05012512 83.91427612]
[45.64024734 70.03743744]
[54.38827896 57.90120316]
[65.78601837 48.21060562]
[79.17134094 41.52859497]
[93.76666260 38.24335098]
[94.07463837 23.24651527]
[94.38262177 8.24967670]
[85.12444305 -7.63480854]
[94.71508026 -22.29987907]
[86.97777557 -36.10005188]
[94.71508026 -48.82732391]
[94.71508026 -63.82732391]
[94.71508026 -78.82732391]
[86.75409698 -66.11422729]
[76.50608063 -55.16077805]
[64.35028076 -46.37233353]
[50.73658371 -40.07415009]
[36.16879272 -36.49930573]
[21.18604660 -35.78009796]
[6.34282494 -37.94314957]
[-7.81154585 -42.90840912]
[-20.75323677 -50.49211502]
[-32.00329971 -60.41361237]
[-41.14538574 -72.30571747]
[-47.84116364 -85.72833252]
[-51.84283447 -100.18470764]
[-53.00230408 -115.13982391]
[-51.27665710 -130.04023743]
[-46.72975922 -144.33448792]
[-39.52988815 -157.49359131]
[-29.94349480 -169.03053284]
[-18.32535362 -178.51835632]
[-5.10543728 -185.60592651]
[9.22701073 -190.03097534]
[24.14156914 -191.62969971]
[39.08627701 -190.34294128]
[53.50805664 -186.21833801]
[66.87317657 -179.40853882]
[78.68701935 -170.16552734]
[88.51238251 -158.83140564]
[95.98563385 -145.82562256]
[100.83020020 -131.62948608]
[102.86680603 -116.76839447]
[102.01941681 -101.78806305]
[110.68601990 -114.03101349]
[119.35263062 -126.27396393]
[128.01924133 -138.51692200]
[136.68585205 -150.75987244]
[137.65936279 -167.13009644]
[152.44230652 -174.22917175]
[165.82723999 -164.75418091]
[164.04489136 -148.45217896]
[148.92880249 -142.09326172]
[140.26219177 -129.85031128]
[131.59558105 -117.60736084]
[122.92897797 -105.36440277]
[114.26236725 -93.12145233]
[109.71508026 -78.82732391]
[109.71508026 -63.82732391]
[109.71508026 -48.82732391]
[117.45237732 -36.10005188]
[109.71508026 -22.29987907]
[118.06273651 -13.49199677]
[118.14893341 -0.95549369]
[109.37945557 8.55765438]
[109.07147980 23.55449295]
[108.76350403 38.55133057]
[123.21163940 42.43301392]
[136.31135559 49.65892410]
[147.30163574 59.80928802]
[155.54403687 72.29443359]
[160.55972290 86.38908386]
[162.05734253 101.27442169]
[159.94987488 116.08572388]
[154.35975647 129.96257019]
[145.61172485 142.09880066]
[134.21397400 151.78939819]
[120.82865906 158.47140503]
[106.23333740 161.75665283]
[105.92536163 176.75347900]
[105.61737823 191.75032043]
[105.30940247 206.74716187]
[114.56758118 222.63165283]
[104.97694397 237.29672241]
[104.97694397 252.29672241]
[104.97694397 267.29672241]
[119.75873566 270.07785034]
[133.77404785 275.52648926]
[146.54608154 283.45562744]
[157.64064026 293.59402466]
[166.68086243 305.59530640]
[173.36004639 319.04986572]
[177.45202637 333.49884033]
[178.81884766 348.44973755]
[177.41542053 363.39321899]
[173.29101562 377.82052612]
[166.58747864 391.24069214]
[157.53445435 403.19732666]
[146.44140625 413.28408813]
[133.68713379 421.15859985]
[119.70675659 426.55386353]
[104.97694397 429.28750610]
[104.97694397 444.28750610]
[104.97694397 459.28750610]
[104.97694397 474.28750610]
[104.97694397 489.28750610]
[104.97694397 504.28750610]
[104.97694397 519.28753662]
[104.97694397 534.28753662]
[104.97694397 549.28753662]
[104.97694397 564.28753662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 127]
[27 126]
[28 125]
[31 123]
[32 122]
[33 121]
[34 120]
[46 108]
[47 107]
[48 106]
[50 103]
[52 101]
[53 100]
[54 99]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
