%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCxxxxxxxxxxAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[259.82574463 106.63801575]
[257.28240967 92.76446533]
[242.34809875 94.16677094]
[227.41378784 95.56907654]
[212.47947693 96.97137451]
[197.54516602 98.37368011]
[182.61087036 99.77598572]
[170.66267395 108.66923523]
[156.19960022 102.25595093]
[141.26528931 103.65825653]
[126.33097839 105.06056213]
[111.39667511 106.46286774]
[96.53362274 108.48519897]
[81.76757050 111.12406158]
[67.00151825 113.76292419]
[52.23545837 116.40179443]
[43.19258499 129.08502197]
[28.18011475 131.55085754]
[16.14432526 122.85169220]
[1.37827039 125.49055481]
[-10.84549141 135.53497314]
[-24.73544312 130.15737915]
[-39.50149918 132.79624939]
[-54.23930359 135.58856201]
[-68.94726562 138.53405762]
[-71.51531982 153.49298096]
[-79.31710815 166.51206970]
[-91.29749298 175.83058167]
[-105.83622742 180.18827820]
[-120.96707916 178.99581909]
[-134.64370728 172.41445923]
[-145.01646423 161.33428955]
[-150.68252563 147.25379944]
[-150.87561035 132.07727051]
[-145.56959534 117.85719299]
[-135.48207092 106.51672363]
[-121.97729492 99.58956146]
[-106.88168335 98.01255035]
[-92.23678589 101.99897766]
[-80.02321625 111.00969696]
[-71.89274597 123.82608795]
[-57.18478775 120.88060760]
[-51.20510483 116.45465088]
[-42.14036560 118.03018951]
[-27.37430763 115.39132690]
[-16.20671463 105.53565979]
[-1.26059389 110.72450256]
[13.50546169 108.08563995]
[21.78320122 95.75621796]
[36.72048950 92.86968231]
[49.59659576 101.63573456]
[64.36264801 98.99687195]
[79.12870789 96.35800934]
[93.89476013 93.71914673]
[95.86926270 91.30351257]
[98.78873444 89.57396698]
[102.39266205 88.89007568]
[106.28848267 89.50691986]
[109.99436951 91.52855682]
[124.92867279 90.12625122]
[139.86299133 88.72395325]
[154.79728699 87.32164764]
[167.81369019 78.32809448]
[181.20855713 84.84167480]
[196.14286804 83.43937683]
[211.07717896 82.03707123]
[226.01148987 80.63476562]
[240.94578552 79.23246002]
[255.88009644 77.83016205]
[255.87756348 61.81377029]
[257.41287231 45.87168503]
[260.47174072 30.15121078]
[265.02581787 14.79760742]
[271.03289795 -0.04726996]
[278.43737793 -14.24627590]
[287.17071533 -27.66824150]
[297.15216064 -40.18918991]
[308.28936768 -51.69347763]
[320.47933960 -62.07486343]
[333.60937500 -71.23748779]
[347.55804443 -79.09676361]
[362.19644165 -85.58015442]
[377.38922119 -90.62783813]
[392.99594116 -94.19326782]
[408.87234497 -96.24359894]
[424.87176514 -96.75997925]
[440.84628296 -95.73774719]
[456.64828491 -93.18645477]
[472.13177490 -89.12977600]
[487.15371704 -83.60530090]
[501.57528687 -76.66418457]
[515.26324463 -68.37065887]
[528.09124756 -58.80145645]
[539.94067383 -48.04509354]
[550.70214844 -36.20104599]
[560.27636719 -23.37884140]
[568.57482910 -9.69703007]
[575.52105713 4.71789646]
[581.05078125 19.73268127]
[595.54638672 15.87552166]
[610.04199219 12.01836300]
[624.53759766 8.16120338]
[639.03320312 4.30404377]
[645.50219727 -9.93274212]
[659.63122559 -16.63388824]
[674.74890137 -12.63531685]
[683.71722412 0.17496611]
[682.30157471 15.74833870]
[671.17034912 26.73152924]
[655.57946777 27.93861389]
[642.89038086 18.79964066]
[628.39477539 22.65679932]
[613.89916992 26.51395988]
[599.40356445 30.37111855]
[584.90795898 34.22827911]
[587.33306885 48.10885239]
[588.57543945 62.14517593]
[588.62615967 76.23665619]
[587.48480225 90.28231049]
[585.15942383 104.18146515]
[581.66674805 117.83450317]
[577.03161621 131.14355469]
[571.28729248 144.01321411]
[564.47479248 156.35121155]
[556.64300537 168.06910706]
[547.84790039 179.08288574]
[538.15246582 189.31356812]
[527.62615967 198.68780518]
[516.34442139 207.13833618]
[504.38806152 214.60455322]
[491.84268188 221.03291321]
[478.79818726 226.37727356]
[465.34805298 230.59928894]
[451.58862305 233.66860962]
[437.61853027 235.56321716]
[423.53790283 236.26942444]
[409.44760132 235.78215027]
[395.44863892 234.10478210]
[381.64132690 231.24931335]
[368.12466431 227.23612976]
[354.99551392 222.09393311]
[342.34802246 215.85952759]
[330.27285767 208.57751465]
[318.85653687 200.30004883]
[308.18099976 191.08639526]
[298.32272339 181.00253296]
[289.35247803 170.12069702]
[281.33453369 158.51881409]
[274.32641602 146.28002930]
[268.37844849 133.49200439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[9 62]
[10 61]
[11 60]
[12 59]
[13 54]
[14 53]
[15 52]
[16 51]
[19 48]
[20 47]
[22 45]
[23 44]
[24 42]
[25 41]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
