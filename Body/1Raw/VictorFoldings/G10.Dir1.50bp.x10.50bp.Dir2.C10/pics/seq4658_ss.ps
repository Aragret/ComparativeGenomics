%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAxxxxxxxxxxAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-8.25409889 249.97756958]
[-17.51904869 261.77420044]
[-26.78399658 273.57086182]
[-35.80152893 285.55767822]
[-44.56773376 297.72952271]
[-53.33394241 309.90136719]
[-61.71608353 322.34078979]
[-69.70600128 335.03573608]
[-77.69591522 347.73065186]
[-85.68583679 360.42559814]
[-93.67575073 373.12051392]
[-93.76007843 389.51943970]
[-108.13627625 397.40975952]
[-122.01534271 388.67456055]
[-121.11968994 372.29989624]
[-106.37068176 365.13061523]
[-98.38076019 352.43566895]
[-90.39084625 339.74075317]
[-82.40093231 327.04580688]
[-74.41101074 314.35089111]
[-74.86770630 310.79293823]
[-73.58239746 306.83697510]
[-70.38746643 303.32345581]
[-65.50577545 301.13516235]
[-56.73957062 288.96331787]
[-47.97336578 276.79147339]
[-47.85709763 271.95806885]
[-44.65954208 267.16149902]
[-38.58063889 264.30590820]
[-29.31568718 252.50926208]
[-20.05073929 240.71263123]
[-29.19037247 232.37095642]
[-37.75181961 223.43685913]
[-45.69675827 213.95033264]
[-52.98963165 203.95381165]
[-59.59780121 193.49205017]
[-65.49169922 182.61187744]
[-70.64493561 171.36196899]
[-75.03445435 159.79266357]
[-78.64060974 147.95578003]
[-81.44725800 135.90426636]
[-83.44184113 123.69205475]
[-84.61543274 111.37381744]
[-84.96278381 99.00466919]
[-84.48233795 86.63998413]
[-83.17623901 74.33509064]
[-81.05033875 62.14505386]
[-78.11415100 50.12444305]
[-74.38082123 38.32704544]
[-69.86704254 26.80566597]
[-64.59303284 15.61186600]
[-58.58238602 4.79574442]
[-51.86200333 -5.59429169]
[-44.46196747 -15.51174164]
[-36.41539383 -24.91222000]
[-27.75829506 -33.75365829]
[-18.52941704 -41.99647903]
[-8.77005959 -49.60380173]
[1.47609556 -56.54156876]
[12.16319370 -62.77873993]
[23.24340439 -68.28739929]
[34.66713715 -73.04288483]
[46.38326645 -77.02391815]
[58.33935928 -80.21269226]
[70.48190308 -82.59491730]
[82.75655365 -84.15995026]
[95.10837555 -84.90077209]
[107.48208618 -84.81407166]
[119.82231903 -83.90023804]
[132.07383728 -82.16336823]
[144.18180847 -79.61122131]
[156.09204102 -76.25523376]
[167.75123596 -72.11041260]
[179.10720825 -67.19531250]
[190.10914612 -61.53193665]
[200.70779419 -55.14562225]
[210.85572815 -48.06496048]
[220.50752258 -40.32163239]
[229.61999512 -31.95029640]
[238.15234375 -22.98842049]
[246.06640625 -13.47611046]
[253.32675171 -3.45594025]
[259.90087891 7.02724600]
[265.75936890 17.92653084]
[270.87600708 29.19313431]
[275.22790527 40.77663040]
[278.79556274 52.62518311]
[293.43905640 49.37435913]
[308.08255005 46.12353134]
[322.72604370 42.87270737]
[337.36956787 39.62187958]
[352.01306152 36.37105560]
[365.73312378 30.30804253]
[377.99548340 21.66892624]
[390.25784302 13.02980900]
[402.52020264 4.39069319]
[408.91302490 -10.71109772]
[425.21899414 -12.45685768]
[434.66394043 0.94930106]
[427.53170776 15.71627235]
[411.15933228 16.65306091]
[398.89697266 25.29217720]
[386.63458252 33.93129349]
[374.37222290 42.57041168]
[389.34143066 41.60950851]
[403.94799805 45.02235794]
[416.94158936 52.51680374]
[427.20986938 63.45128250]
[433.87377930 76.88973999]
[436.36288452 91.68177795]
[434.46411133 106.56111145]
[428.33996582 120.25399780]
[418.51477051 131.58824158]
[405.82955933 139.59358215]
[391.37026978 143.58471680]
[376.37469482 143.21998596]
[362.12655640 138.53059387]
[349.84555054 129.91799927]
[340.58300781 118.11947632]
[335.13183594 104.14505005]
[333.95867920 89.19099426]
[337.16400146 74.53746033]
[344.47338867 61.43887711]
[355.26388550 51.01455688]
[340.62039185 54.26538086]
[325.97686768 57.51620865]
[311.33337402 60.76703262]
[296.68988037 64.01786041]
[282.04638672 67.26868439]
[284.44989014 86.19909668]
[284.89019775 105.27639771]
[283.36260986 124.29754639]
[279.88345337 143.06007385]
[274.48968506 161.36430359]
[267.23870850 179.01539612]
[258.20776367 195.82548523]
[247.49293518 211.61566162]
[235.20826721 226.21786499]
[221.48449707 239.47665405]
[206.46772766 251.25094604]
[190.31774902 261.41537476]
[173.20649719 269.86181641]
[155.31605530 276.50030518]
[136.83686829 281.26022339]
[117.96559906 284.09091187]
[98.90311432 284.96221924]
[79.85231018 283.86486816]
[61.01594543 280.81057739]
[42.59450912 275.83181763]
[24.78406525 268.98162842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 26]
[5 25]
[6 24]
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[92 124]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
