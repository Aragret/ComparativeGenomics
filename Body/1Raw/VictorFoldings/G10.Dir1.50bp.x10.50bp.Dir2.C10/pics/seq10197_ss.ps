%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.39335632 250.74134827]
[83.08129883 235.74459839]
[82.76924133 220.74784851]
[82.45718384 205.75109863]
[82.14513397 190.75433350]
[81.83307648 175.75758362]
[81.52101898 160.76083374]
[81.20896149 145.76408386]
[80.89690399 130.76731873]
[66.72034454 125.86577606]
[57.21199036 137.46711731]
[47.70363235 149.06845093]
[38.19527054 160.66979980]
[40.00380325 176.37026978]
[30.11540604 188.69889832]
[14.39669323 190.34133911]
[2.17329621 180.32315063]
[0.69714099 164.58793640]
[10.84400368 152.47114563]
[26.59393120 151.16143799]
[36.10229111 139.56008911]
[45.61064911 127.95875549]
[55.11900711 116.35741425]
[62.13335037 100.14899445]
[73.65113068 90.63106537]
[86.03678894 88.54133606]
[95.81787109 92.99197388]
[89.75485992 79.27191925]
[83.69184875 65.55186462]
[81.76003265 80.42694855]
[75.95709991 94.25901031]
[66.69758606 106.05991364]
[54.64297485 114.98664093]
[40.65442276 120.40147400]
[25.73124123 121.91759491]
[10.93950748 119.42668915]
[-2.66408992 113.10671234]
[-14.10773849 103.40914154]
[-22.57393074 91.02674866]
[-27.45785904 76.84410858]
[-28.41062737 61.87439728]
[-25.36417007 47.18701935]
[-18.53612328 33.83120728]
[-8.41426373 22.76106834]
[4.27832365 14.76743126]
[18.63490868 10.42134380]
[33.62988663 10.03328037]
[48.19205475 13.63096333]
[61.28111649 20.95738220]
[71.96202087 31.48915482]
[79.46966553 44.46883392]
[79.78172302 29.47207832]
[80.09377289 14.47532558]
[80.40583038 -0.52142811]
[80.71788788 -15.51818180]
[66.17337799 -22.74322510]
[56.25875092 -35.53235626]
[52.91062546 -51.30500412]
[56.74705505 -66.90626526]
[66.95413971 -79.23796844]
[81.45809937 -85.87389374]
[81.45809937 -100.87389374]
[81.45809937 -115.87389374]
[81.45809937 -130.87390137]
[66.88097382 -134.76876831]
[53.80911255 -142.30459595]
[43.13376617 -152.96759033]
[35.58279419 -166.03071594]
[31.67104340 -180.60331726]
[31.66521645 -195.69180298]
[35.56571579 -210.26741028]
[43.10659409 -223.33636475]
[53.77370453 -234.00759888]
[66.83974457 -241.55352783]
[81.41385651 -245.45964050]
[96.50234222 -245.45964050]
[111.07644653 -241.55352783]
[124.14248657 -234.00759888]
[134.80960083 -223.33636475]
[142.35047913 -210.26741028]
[146.25097656 -195.69180298]
[146.24514771 -180.60331726]
[142.33340454 -166.03071594]
[134.78242493 -152.96759033]
[124.10707855 -142.30459595]
[111.03521729 -134.76876831]
[96.45809937 -130.87390137]
[96.45809937 -115.87389374]
[96.45809937 -100.87389374]
[96.45809937 -85.87389374]
[109.26721954 -80.45842743]
[119.06721497 -70.53018951]
[124.34846497 -57.57137680]
[124.27945709 -43.53448868]
[118.83749390 -30.54817772]
[108.81719971 -20.59443855]
[95.71464539 -15.20612526]
[95.40258789 -0.20937186]
[95.09053040 14.78738213]
[94.77847290 29.78413582]
[94.46641541 44.78088760]
[97.41189575 59.48884964]
[103.47491455 73.20890808]
[109.53792572 86.92895508]
[121.33456421 96.19390869]
[136.10061646 98.83277130]
[150.86668396 101.47163391]
[159.93141174 99.89610291]
[165.91110229 104.32205200]
[180.61906433 107.26753998]
[195.32702637 110.21302032]
[204.09802246 97.76354218]
[217.17770386 89.96343994]
[232.29995728 88.16412354]
[246.84474182 92.67733765]
[258.29208374 102.72114563]
[264.65869141 116.55539703]
[264.84146118 131.78321838]
[258.80877686 145.76629639]
[247.60580444 156.08198547]
[233.17355347 160.94302368]
[218.01246643 159.50720215]
[204.74931335 152.02330017]
[195.68202209 139.78794861]
[192.38154602 124.92098236]
[177.67358398 121.97550201]
[162.96562195 119.03001404]
[148.22781372 116.23769379]
[133.46176147 113.59882355]
[118.69570160 110.95996094]
[112.99519348 115.83378601]
[124.68848419 125.22883606]
[139.41587830 128.07560730]
[148.27835083 140.17752075]
[146.54710388 155.07728577]
[135.14588928 164.82470703]
[120.15812683 164.21878052]
[109.58096313 153.58282471]
[109.05785370 138.59272766]
[101.59416962 125.58144379]
[95.89366150 130.45526123]
[96.20571899 145.45202637]
[96.51776886 160.44877625]
[96.82982635 175.44552612]
[97.14188385 190.44227600]
[97.45394135 205.43904114]
[97.76599884 220.43579102]
[98.07805634 235.43254089]
[98.39010620 250.42929077]
[100.98110962 269.63702393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 23]
[11 22]
[12 21]
[13 20]
[27 104]
[28 103]
[29 102]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[61 90]
[62 89]
[63 88]
[64 87]
[105 130]
[106 129]
[107 128]
[109 127]
[110 126]
[111 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
