%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAAxxxxxxxxxxUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.61897278]
[92.50000000 234.61897278]
[92.50000000 219.61897278]
[92.50000000 204.61897278]
[92.50000000 189.61897278]
[92.50000000 174.61897278]
[92.50000000 159.61897278]
[92.50000000 144.61897278]
[92.50000000 129.61897278]
[92.50000000 114.61897278]
[79.18484497 107.71197510]
[66.92247772 116.35109711]
[54.66010666 124.99021149]
[42.39773941 133.62933350]
[46.64718246 148.16276550]
[45.94488525 163.28842163]
[40.36702728 177.36558533]
[30.51865387 188.86724854]
[17.46804428 196.54580688]
[2.63082957 199.56834412]
[-12.38356018 197.60700989]
[-25.94647598 190.87455750]
[-36.58671570 180.10125732]
[-43.15010071 166.45571899]
[-44.92469025 151.41810608]
[-41.71798706 136.61959839]
[-33.87783051 123.66542816]
[-22.25466347 113.96075439]
[-8.10927868 108.55827332]
[7.02393818 108.04400635]
[21.50344849 112.47373199]
[33.75862503 121.36695862]
[46.02099228 112.72784424]
[58.28335953 104.08872223]
[70.54573059 95.44960785]
[83.58676147 87.03660583]
[95.46014404 88.86314392]
[98.86312103 74.25424957]
[102.26609802 59.64535904]
[105.66907501 45.03646851]
[105.35701752 30.03971291]
[101.34928131 15.58502483]
[97.34153748 1.13033652]
[93.03395081 -13.23784733]
[88.42839050 -27.51330757]
[83.82282257 -41.78876877]
[72.22208405 -52.54671478]
[75.67790222 -67.03486633]
[71.07233429 -81.31032562]
[66.46677399 -95.58579254]
[51.58221436 -93.45086670]
[36.55095673 -93.86232758]
[21.80547905 -96.80832672]
[7.77003956 -102.20410919]
[-5.15153408 -109.89442444]
[-16.58746338 -119.65800476]
[-26.20871353 -131.21392822]
[-33.73846054 -144.22973633]
[-38.96006012 -158.33090210]
[-41.72327805 -173.11170959]
[-41.94860840 -188.14691162]
[-39.62956619 -203.00390625]
[-34.83288193 -217.25521851]
[-27.69655800 -230.49079895]
[-18.42592621 -242.32986450]
[-7.28771734 -252.43176270]
[5.39759827 -260.50582886]
[19.26503944 -266.31979370]
[33.91561127 -269.70635986]
[48.92778778 -270.56808472]
[63.86964035 -268.88015747]
[78.31125641 -264.69116211]
[91.83713531 -258.12164307]
[104.05809021 -249.36056519]
[114.62252045 -238.66006470]
[123.22645569 -226.32797241]
[129.62234497 -212.71913147]
[133.62615967 -198.22508240]
[135.12271118 -183.26284790]
[134.06893921 -168.26293945]
[130.49516296 -153.65690613]
[124.50420380 -139.86500549]
[116.26843262 -127.28406525]
[106.02481079 -116.27605438]
[94.06807709 -107.15769958]
[80.74223328 -100.19135284]
[85.34780121 -85.91589355]
[89.95336151 -71.64043427]
[101.22468567 -61.90356445]
[98.09828949 -46.39433289]
[102.70384979 -32.11887360]
[107.30941772 -17.84341240]
[111.13300323 -14.88441086]
[113.10024261 -9.46580696]
[111.79622650 -2.87740374]
[115.80397034 11.57728481]
[119.81170654 26.03197289]
[123.55213165 22.44561958]
[128.16632080 19.74120712]
[133.48869324 18.07176399]
[148.19665527 15.12628269]
[162.90461731 12.18079948]
[177.61257935 9.23531723]
[182.45454407 -5.34038210]
[193.94630432 -15.53032684]
[208.99664307 -18.59347534]
[223.55709839 -13.70585251]
[233.71096802 -2.18220639]
[236.72692871 12.87765980]
[231.79368591 27.42271805]
[220.23826599 37.54042053]
[205.16902161 40.50915909]
[190.63949585 35.53035355]
[180.55805969 23.94327927]
[165.85009766 26.88876152]
[151.14213562 29.83424377]
[136.43418884 32.77972794]
[149.83752441 39.51399231]
[152.11027527 54.34081268]
[141.33949280 64.78065491]
[126.59079742 62.04644012]
[120.27796936 48.43944550]
[116.87499237 63.04833603]
[113.47201538 77.65722656]
[110.06903076 92.26612091]
[118.09809875 79.59591675]
[130.06529236 70.55233002]
[144.44618225 66.28736115]
[159.40888977 67.34429932]
[173.04743958 73.58850098]
[183.62449646 84.22456360]
[189.79273987 97.89763641]
[190.76641846 112.86599731]
[186.42150879 127.22294617]
[177.31149292 139.13963318]
[164.59681702 147.09808350]
[149.89710999 150.08453369]
[135.08488464 147.71856689]
[122.04695129 140.30154419]
[112.44412231 128.77827454]
[107.50000000 114.61897278]
[107.50000000 129.61897278]
[107.50000000 144.61897278]
[107.50000000 159.61897278]
[107.50000000 174.61897278]
[107.50000000 189.61897278]
[107.50000000 204.61897278]
[107.50000000 219.61897278]
[107.50000000 234.61897278]
[107.50000000 249.61897278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 35]
[12 34]
[13 33]
[14 32]
[37 125]
[38 124]
[39 123]
[40 122]
[41 97]
[42 96]
[43 95]
[44 92]
[45 91]
[46 90]
[48 88]
[49 87]
[50 86]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
