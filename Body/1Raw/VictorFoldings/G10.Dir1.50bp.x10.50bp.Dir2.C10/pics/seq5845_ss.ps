%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUxxxxxxxxxxCAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.57067108 272.88726807]
[108.57067108 257.88726807]
[108.57067108 242.88728333]
[108.57067108 227.88728333]
[108.57067108 212.88728333]
[108.57067108 197.88728333]
[108.57067108 182.88728333]
[108.57067108 167.88728333]
[108.57067108 152.88728333]
[108.57067108 137.88728333]
[97.73806000 137.95925903]
[87.53856659 135.05982971]
[78.75238800 129.54341125]
[72.01418304 121.95911407]
[67.76766968 112.99836731]
[66.23751831 103.43305969]
[67.42038727 94.04947662]
[71.09500122 85.58377838]
[59.59319305 75.95525360]
[48.09139252 66.32672119]
[36.58958817 56.69819641]
[25.93354416 67.27049255]
[14.34746075 76.81446075]
[1.93018711 85.24867249]
[-11.21233463 92.50117493]
[-24.96797562 98.51007843]
[-39.21937561 103.22413635]
[-53.84494019 106.60311127]
[-68.71988678 108.61817932]
[-83.71731567 109.25215149]
[-98.70925903 108.49961853]
[-113.56781006 106.36699677]
[-128.16619873 102.87248230]
[-142.37988281 98.04589844]
[-156.08757019 91.92840576]
[-169.17234802 84.57221985]
[-181.52253723 76.04009247]
[-193.03280640 66.40480804]
[-203.60491943 55.74859238]
[-213.14869690 44.16234970]
[-221.58270264 31.74493408]
[-228.83497620 18.60229111]
[-234.84365845 4.84655094]
[-239.55747986 -9.40492535]
[-242.93620300 -24.03054810]
[-244.95103455 -38.90553284]
[-245.58474731 -53.90296555]
[-244.83197021 -68.89489746]
[-242.69909668 -83.75341034]
[-239.20434570 -98.35174561]
[-234.37751770 -112.56534576]
[-228.25979614 -126.27294159]
[-220.90339661 -139.35758972]
[-212.37106323 -151.70764160]
[-202.73559570 -163.21774292]
[-192.07919312 -173.78967285]
[-180.49279785 -183.33325195]
[-168.07524109 -191.76705933]
[-154.93247986 -199.01911926]
[-141.17663574 -205.02757263]
[-126.92507935 -209.74114990]
[-112.29940033 -213.11964417]
[-97.42438507 -215.13421631]
[-82.42694092 -215.76768494]
[-67.43502045 -215.01464844]
[-52.57653809 -212.88153076]
[-37.97826385 -209.38653564]
[-23.76474571 -204.55947876]
[-10.05725002 -198.44152832]
[3.02727151 -191.08489990]
[15.37718487 -182.55236816]
[26.88712311 -172.91670227]
[37.45888519 -162.26013184]
[47.00227356 -150.67356873]
[55.43586349 -138.25587463]
[62.68770981 -125.11299133]
[68.69593048 -111.35704803]
[73.40927124 -97.10541534]
[76.78751373 -82.47968292]
[78.80184174 -67.60462952]
[79.43506622 -52.60717392]
[78.68177795 -37.61526871]
[76.54841614 -22.75682449]
[73.05317688 -8.15860844]
[68.22587585 6.05483007]
[62.10770416 19.76222420]
[54.75086212 32.84662247]
[46.21811295 45.19639587]
[57.71991730 54.82492065]
[69.22171783 64.45344543]
[80.72352600 74.08197021]
[98.49702454 66.09672546]
[118.62010193 69.68993378]
[133.90263367 84.66735077]
[138.28163147 106.58933258]
[153.26133728 105.80948639]
[168.24105835 105.02964020]
[183.20130920 103.93833160]
[198.13562012 102.53602600]
[213.06991577 101.13372040]
[228.00422668 99.73141479]
[242.93853760 98.32911682]
[257.87283325 96.92681122]
[272.79174805 95.36923218]
[287.69366455 93.65653992]
[302.59555054 91.94384766]
[317.49746704 90.23116302]
[327.12615967 77.69866180]
[342.80715942 75.72824097]
[355.23715210 85.48891449]
[357.04165649 101.18984222]
[347.15011597 113.51595306]
[331.43099976 115.15437317]
[319.21014404 105.13306427]
[304.30825806 106.84574890]
[289.40634155 108.55844116]
[274.50445557 110.27113342]
[268.17755127 114.18470764]
[259.27514648 111.86111450]
[244.34083557 113.26342010]
[229.40653992 114.66572571]
[214.47222900 116.06803131]
[199.53791809 117.47032928]
[184.60360718 118.87263489]
[180.88627625 121.96407318]
[175.17012024 122.71022797]
[169.02090454 120.00935364]
[154.04118347 120.78919983]
[139.06147766 121.56904602]
[152.58128357 128.06632996]
[167.57986450 128.27307129]
[180.53311157 135.83703613]
[188.08399963 148.79789734]
[188.27561951 163.79667664]
[181.05831909 176.94621277]
[168.30255127 184.83863831]
[153.31414795 185.42851257]
[139.97758484 178.56294250]
[131.74920654 166.02127075]
[130.76205444 151.05102539]
[123.57067108 137.88728333]
[123.57067108 152.88728333]
[123.57067108 167.88728333]
[123.57067108 182.88728333]
[123.57067108 197.88728333]
[123.57067108 212.88728333]
[123.57067108 227.88728333]
[123.57067108 242.88728333]
[123.57067108 257.88726807]
[123.57067108 272.88726807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 91]
[19 90]
[20 89]
[21 88]
[95 129]
[96 128]
[97 127]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
