%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAGUUCAACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUxxxxxxxxxxGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.42725372 395.03955078]
[79.42725372 380.03955078]
[79.42725372 365.03955078]
[79.42725372 350.03955078]
[79.42725372 335.03955078]
[79.42725372 320.03955078]
[79.42725372 305.03955078]
[79.42725372 290.03955078]
[79.42725372 275.03955078]
[79.42725372 260.03955078]
[64.41295624 256.14407349]
[50.90164185 248.50253296]
[39.81038284 237.62698364]
[31.89366722 224.24920654]
[27.69211769 209.27149963]
[27.49554443 193.70576477]
[31.32298470 178.60517883]
[38.92100906 164.99293518]
[49.78050995 153.79287720]
[63.17079926 145.76686096]
[78.18877411 141.46287537]
[77.87671661 126.46612549]
[68.73498535 114.57374573]
[54.32276535 110.41585541]
[39.91054916 106.25796509]
[25.49833488 102.10008240]
[11.08611870 97.94219208]
[-3.32609773 93.78430176]
[-17.73831367 89.62641907]
[-32.15053177 85.46852875]
[-36.46450424 86.71396637]
[-40.52976227 86.50249481]
[-43.90848541 85.10030365]
[-46.29863358 82.89096832]
[-47.56093597 80.31921387]
[-61.57764816 74.97769928]
[-75.59436035 69.63618469]
[-85.07191467 81.42733765]
[-97.73037720 89.71096039]
[-112.32960510 93.67552185]
[-127.43931580 92.93260193]
[-141.57920837 87.55500031]
[-153.36399841 78.06954193]
[-161.63914490 65.40553284]
[-165.59391785 50.80364990]
[-164.84088135 35.69444275]
[-159.45379639 21.55815697]
[-149.96044922 9.77972317]
[-137.29089355 1.51306903]
[-122.68637085 -2.43192101]
[-107.57766724 -1.66875720]
[-93.44499969 3.72779322]
[-81.67292786 13.22903156]
[-73.41476440 25.90412331]
[-69.47956085 40.51129150]
[-70.25284576 55.61947632]
[-56.23613358 60.96098709]
[-42.21942139 66.30249786]
[-27.99264336 71.05631256]
[-13.58042622 75.21420288]
[0.83178961 79.37208557]
[15.24400520 83.52997589]
[29.65622139 87.68786621]
[44.06843948 91.84574890]
[58.48065567 96.00363922]
[72.89286804 100.16152954]
[85.00661469 76.13005829]
[112.86421967 73.70976257]
[121.11651611 61.18380356]
[106.99234772 66.23434448]
[92.12154388 64.26986694]
[79.79338074 55.72490311]
[72.73474121 42.48950958]
[72.50692749 27.49124146]
[79.16033173 14.04757309]
[91.22328186 5.13212061]
[106.02755737 2.71690130]
[120.29859924 7.33613873]
[130.87977600 17.96809959]
[135.43064880 32.26109314]
[132.94380188 47.05546570]
[143.82261658 36.72826004]
[141.37536621 20.02307892]
[149.26785278 5.28570652]
[164.22924805 -1.79403818]
[180.30429077 1.38369071]
[190.96592712 -9.16759968]
[201.62754822 -19.71888924]
[212.28916931 -30.27017975]
[222.95080566 -40.82146835]
[220.47012329 -56.13896942]
[227.49662781 -69.97398376]
[241.32852173 -77.00666809]
[256.64712524 -74.53281403]
[267.56213379 -63.50366211]
[269.87649536 -48.16015244]
[262.70031738 -34.40217590]
[248.79295349 -27.51995468]
[233.50209045 -30.15984344]
[222.84046936 -19.60855293]
[212.17883301 -9.05726337]
[201.51721191 1.49402678]
[190.85559082 12.04531670]
[194.09280396 25.03440475]
[190.44406128 38.02664185]
[180.76345825 47.58364868]
[167.51585388 51.12113953]
[154.14982605 47.60708618]
[143.27099609 57.93428802]
[133.64247131 69.43609619]
[125.39018250 81.96205139]
[130.87721252 95.92244720]
[145.44992065 99.47720337]
[160.02262878 103.03196716]
[174.59532166 106.58673096]
[189.16802979 110.14149475]
[203.56904602 103.07112885]
[218.01365662 110.05201721]
[221.42118835 125.72901154]
[211.17767334 138.07608032]
[195.14105225 137.62158203]
[185.61326599 124.71419525]
[171.04055786 121.15943146]
[156.46786499 117.60466766]
[141.89515686 114.04991150]
[127.32245636 110.49514771]
[112.74127960 125.14430237]
[92.87347412 126.15406799]
[93.18552399 141.15081787]
[107.34265137 144.44062805]
[120.28650665 151.03060913]
[131.26113892 160.53080750]
[139.62683105 172.38139343]
[144.89735413 185.88575745]
[146.76832581 200.25137329]
[145.13467407 214.63638306]
[140.09660339 228.19885254]
[131.95341492 240.14611816]
[121.18576813 249.78108215]
[108.42727661 256.54287720]
[94.42725372 260.03955078]
[94.42725372 275.03955078]
[94.42725372 290.03955078]
[94.42725372 305.03955078]
[94.42725372 320.03955078]
[94.42725372 335.03955078]
[94.42725372 350.03955078]
[94.42725372 365.03955078]
[94.42725372 380.03955078]
[94.42725372 395.03955078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[35 58]
[36 57]
[37 56]
[68 111]
[69 110]
[81 109]
[82 108]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
