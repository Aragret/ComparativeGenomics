%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUxxxxxxxxxxCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.36141968 396.91165161]
[90.36141968 381.91165161]
[90.36141968 366.91165161]
[90.36141968 351.91165161]
[90.36141968 336.91165161]
[90.36141968 321.91165161]
[90.36141968 306.91165161]
[90.36141968 291.91165161]
[90.36141968 276.91165161]
[90.36141968 261.91165161]
[76.36139679 258.41497803]
[63.60290527 251.65319824]
[52.83525848 242.01823425]
[44.69207001 230.07096863]
[39.65399551 216.50849915]
[38.02034378 202.12348938]
[39.89131165 187.75787354]
[45.16184616 174.25350952]
[53.52752686 162.40292358]
[64.50215912 152.90272522]
[77.44602203 146.31272888]
[91.60314178 143.02293396]
[91.91519928 128.02618408]
[77.63359070 118.72363281]
[70.98860931 103.02822113]
[56.17085266 100.69711304]
[41.35309601 98.36601257]
[26.53533745 96.03491211]
[11.71757984 93.70380402]
[-3.10017848 91.37270355]
[-17.91793633 89.04159546]
[-32.73569489 86.71049500]
[-47.55345154 84.37938690]
[-62.37121201 82.04828644]
[-77.18897247 79.71717834]
[-85.82559204 92.30175781]
[-99.07143402 99.88532257]
[-114.29651642 100.96215820]
[-128.47789001 95.31846619]
[-138.79983521 84.07479095]
[-143.21292114 69.46358490]
[-140.84092712 54.38590622]
[-132.15481567 41.83544159]
[-118.87921906 34.30409241]
[-103.65000916 33.28722000]
[-89.49096680 38.98671722]
[-79.21337891 50.27095032]
[-74.85786438 64.89942169]
[-60.04010773 67.23052979]
[-45.22234726 69.56163025]
[-30.40459061 71.89273834]
[-15.58683300 74.22383881]
[-0.76907450 76.55494690]
[14.04868317 78.88604736]
[28.86644173 81.21714783]
[43.68420029 83.54825592]
[58.50195694 85.87935638]
[73.31971741 88.21046448]
[78.71983337 80.05043030]
[86.51469421 74.13540649]
[95.82710266 71.13102722]
[105.60910797 71.37538147]
[114.75990295 74.84098816]
[125.42153168 64.28969574]
[125.67123413 48.71486282]
[136.63394165 38.16623306]
[151.48063660 38.50027466]
[162.14225769 27.94898415]
[172.80387878 17.39769363]
[183.46551514 6.84640312]
[174.32048035 -5.06878281]
[166.74098206 -18.03621674]
[160.84652710 -31.85138130]
[156.73011780 -46.29639435]
[154.45664978 -61.14343262]
[154.06198120 -76.15834045]
[155.55235291 -91.10430908]
[158.90425110 -105.74562836]
[164.06480408 -119.85136414]
[170.95262146 -133.19906616]
[179.45909119 -145.57821655]
[189.45002747 -156.79357910]
[200.76788330 -166.66825867]
[213.23414612 -175.04653931]
[226.65220642 -181.79627991]
[240.81044006 -186.81100464]
[255.48556519 -190.01164246]
[270.44610596 -191.34771729]
[285.45614624 -190.79814148]
[300.27893066 -188.37161255]
[314.68072510 -184.10636902]
[328.43432617 -178.06968689]
[341.32284546 -170.35678101]
[353.14303589 -161.08929443]
[363.70846558 -150.41339111]
[372.85250854 -138.49743652]
[380.43090820 -125.52935791]
[386.32418823 -111.71369934]
[390.43939209 -97.26834106]
[392.71160889 -82.42111206]
[393.10501099 -67.40616608]
[391.61337280 -52.46031952]
[388.26025391 -37.81929016]
[383.09851074 -23.71398354]
[376.20956421 -10.36686134]
[367.70205688 2.01157141]
[357.71017456 13.22609043]
[346.39151001 23.09982491]
[333.92453003 31.47705460]
[320.50588989 38.22565460]
[306.34722900 43.23919296]
[291.67184448 46.43859863]
[276.71118164 47.77341461]
[261.70120239 47.22257996]
[246.87860107 44.79479218]
[232.47720337 40.52833557]
[218.72410583 34.49050140]
[205.83621216 26.77651215]
[194.01679993 17.50802994]
[183.35517883 28.05932045]
[172.69354248 38.61061096]
[162.03192139 49.16189957]
[162.21150208 64.01125336]
[151.54940796 74.86363983]
[135.97282410 74.95132446]
[125.31119537 85.50260925]
[129.03164673 102.82738495]
[122.03829956 119.10874939]
[106.91195679 128.33824158]
[106.59989929 143.33499146]
[121.61787415 147.63897705]
[135.00816345 155.66499329]
[145.86766052 166.86505127]
[153.46568298 180.47729492]
[157.29312134 195.57786560]
[157.09655762 211.14360046]
[152.89500427 226.12132263]
[144.97828674 239.49909973]
[133.88702393 250.37464905]
[120.37571716 258.01620483]
[105.36141968 261.91165161]
[105.36141968 276.91165161]
[105.36141968 291.91165161]
[105.36141968 306.91165161]
[105.36141968 321.91165161]
[105.36141968 336.91165161]
[105.36141968 351.91165161]
[105.36141968 366.91165161]
[105.36141968 381.91165161]
[105.36141968 396.91165161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[63 126]
[64 125]
[67 122]
[68 121]
[69 120]
[70 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
