%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCxxxxxxxxxxGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 292.06216431]
[92.50000000 277.06216431]
[92.50000000 262.06216431]
[92.50000000 247.06217957]
[92.50000000 232.06217957]
[92.50000000 217.06217957]
[92.50000000 202.06217957]
[92.50000000 187.06217957]
[92.50000000 172.06217957]
[92.50000000 157.06217957]
[69.85213470 149.02497864]
[52.46068573 132.44003296]
[39.07440186 139.20814514]
[34.05469513 153.95401001]
[20.38268471 160.62713623]
[6.35569906 155.75074768]
[-7.03058577 162.51885986]
[-20.41687012 169.28697205]
[-33.80315399 176.05508423]
[-43.48070526 191.68598938]
[-60.93069458 190.10554504]
[-74.09927368 197.28805542]
[-87.19242859 204.60716248]
[-95.11882782 218.96350098]
[-111.51792145 219.00662231]
[-119.51972198 204.69218445]
[-110.89267731 190.74565125]
[-94.51153564 191.51400757]
[-81.41838074 184.19490051]
[-77.08647156 178.14674377]
[-67.97583008 176.86296082]
[-64.11949158 165.35487366]
[-53.08974457 159.39135742]
[-40.57126999 162.66880798]
[-27.18498611 155.90069580]
[-13.79870033 149.13258362]
[-0.41241589 142.36445618]
[3.97598767 128.17723083]
[17.45516968 121.12271118]
[32.30628586 125.82186127]
[45.69257355 119.05374908]
[42.44705200 100.00000000]
[45.69257355 80.94625092]
[32.30628586 74.17813873]
[18.92000198 67.41001892]
[5.53371763 60.64190674]
[-10.09583569 64.26082611]
[-22.58010101 54.18498230]
[-22.34221458 38.14369202]
[-9.56466675 28.44246483]
[5.95070457 32.52325439]
[12.30183220 47.25562286]
[25.68811798 54.02373886]
[39.07440186 60.79185104]
[52.46068573 67.55996704]
[61.49469757 57.22519684]
[72.71906281 49.32365036]
[85.49529266 44.30479813]
[99.09661102 42.45413971]
[112.74932098 43.87694931]
[125.67678833 48.49228668]
[137.14364624 56.03761292]
[148.23497009 45.93896484]
[159.32627869 35.84031296]
[170.41758728 25.74166489]
[155.65788269 28.41574669]
[140.81607056 26.24296188]
[127.44226837 19.45023155]
[116.93319702 8.74698830]
[110.38642883 -4.74893045]
[108.48570251 -19.62801743]
[111.42952728 -34.33631134]
[118.91045380 -47.33768463]
[130.14718628 -57.27428436]
[143.96614075 -63.10833359]
[158.92410278 -64.23052979]
[173.45886230 -60.52367783]
[186.05242920 -52.37491226]
[195.38951111 -40.63528442]
[200.49496460 -26.53087616]
[200.83558655 -11.53474426]
[196.37577820 2.78692555]
[187.57922363 14.94050789]
[201.48176575 9.30855179]
[207.70985413 -4.96900892]
[221.88925171 -10.48256683]
[235.46234131 -4.45705414]
[249.36489868 -10.08901119]
[263.26745605 -15.72096729]
[277.17001343 -21.35292435]
[290.95239258 -27.27288818]
[304.60864258 -33.47829437]
[318.26486206 -39.68370056]
[305.54537964 -47.63446426]
[303.61941528 -62.51030731]
[313.89471436 -73.43818665]
[328.86083984 -72.43071747]
[337.57876587 -60.22426605]
[333.67684937 -45.74127197]
[347.90362549 -50.49508667]
[362.13040161 -55.24890137]
[376.35720825 -60.00271606]
[390.58398438 -64.75653076]
[401.04431152 -77.38638306]
[417.16479492 -74.37598419]
[422.36203003 -58.82218552]
[411.28955078 -46.72539139]
[395.33779907 -50.52975082]
[381.11102295 -45.77593613]
[366.88421631 -41.02212143]
[352.65744019 -36.26830673]
[338.43066406 -31.51449203]
[324.47027588 -26.02746010]
[310.81405640 -19.82205391]
[297.15780640 -13.61664581]
[294.65472412 -9.48020649]
[289.49618530 -6.90714025]
[282.80197144 -7.45036840]
[268.89941406 -1.81841159]
[254.99685669 3.81354523]
[241.09429932 9.44550228]
[235.54177856 23.21884537]
[221.52282715 29.12849808]
[207.11372375 23.21110725]
[193.21116638 28.84306526]
[180.51625061 36.83298111]
[169.42492676 46.93162918]
[158.33361816 57.03028107]
[147.24229431 67.12892914]
[152.13877869 75.63013458]
[155.52026367 84.83944702]
[157.28851318 94.48927307]
[157.39215088 104.29922485]
[155.82815552 113.98426056]
[152.64196777 123.26295471]
[147.92617798 131.86570740]
[141.81782532 139.54254150]
[134.49436951 146.07038879]
[126.16860962 151.25959778]
[117.08248901 154.95935059]
[107.50000000 157.06217957]
[107.50000000 172.06217957]
[107.50000000 187.06217957]
[107.50000000 202.06217957]
[107.50000000 217.06217957]
[107.50000000 232.06217957]
[107.50000000 247.06217957]
[107.50000000 262.06216431]
[107.50000000 277.06216431]
[107.50000000 292.06216431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 41]
[13 40]
[16 37]
[17 36]
[18 35]
[19 34]
[21 31]
[22 29]
[23 28]
[43 55]
[44 54]
[45 53]
[46 52]
[62 129]
[63 128]
[64 127]
[65 126]
[83 125]
[84 124]
[87 121]
[88 120]
[89 119]
[90 118]
[91 115]
[92 114]
[93 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
