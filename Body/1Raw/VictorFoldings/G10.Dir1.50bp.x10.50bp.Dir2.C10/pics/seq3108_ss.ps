%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[117.88437653 525.56811523]
[117.88437653 510.56811523]
[117.88437653 495.56811523]
[117.88437653 480.56811523]
[117.88437653 465.56811523]
[117.88437653 450.56811523]
[117.88437653 435.56811523]
[117.88437653 420.56811523]
[117.88437653 405.56811523]
[117.88437653 390.56811523]
[101.73790741 385.17883301]
[88.36658478 374.60556030]
[79.37397003 360.09506226]
[75.84572601 343.36752319]
[78.21854401 326.41268921]
[86.22618866 311.25311279]
[98.92923737 299.70288086]
[114.82527161 293.15054321]
[113.88964081 278.17974854]
[112.95401001 263.20898438]
[112.01838684 248.23817444]
[111.08275604 233.26739502]
[110.14712524 218.29660034]
[95.52727509 211.48399353]
[86.26938629 198.16207886]
[84.96694183 181.89758301]
[92.06788635 167.10325623]
[105.72736359 157.84057617]
[104.48049164 142.89248657]
[103.23361969 127.94439697]
[81.83005524 118.34749603]
[76.61746979 97.52442932]
[88.56498718 82.14316559]
[85.46666718 67.46664429]
[82.36834717 52.79011536]
[63.32709122 48.78140259]
[51.89121246 26.13667679]
[43.63892365 13.61071396]
[35.38663483 1.08475244]
[27.13434601 -11.44120979]
[18.88205719 -23.96717072]
[5.24668074 -18.71973419]
[-9.17795467 -16.43690872]
[-23.75517845 -17.21687889]
[-37.84212112 -21.02270699]
[-50.81806946 -27.68406296]
[-62.11180496 -36.90485001]
[-71.22677612 -48.27637482]
[-77.76288605 -61.29544449]
[-81.43411255 -75.38664246]
[-82.08096313 -89.92776489]
[-79.67744446 -104.27729034]
[-74.33209229 -117.80267334]
[-66.28303528 -129.90823364]
[-55.88745499 -140.06141663]
[-63.87737274 -152.75634766]
[-71.86728668 -165.45126343]
[-79.85720062 -178.14619446]
[-95.37313080 -180.09301758]
[-105.96967316 -191.59289551]
[-106.64347076 -207.21595764]
[-97.07637787 -219.58546448]
[-81.78568268 -222.86091614]
[-67.99118042 -215.49574280]
[-62.20621490 -200.96755981]
[-67.16227722 -186.13612366]
[-59.17235565 -173.44119263]
[-51.18244171 -160.74626160]
[-43.19252396 -148.05133057]
[-28.66863060 -153.24485779]
[-13.34815216 -155.09249878]
[2.00786686 -153.49934387]
[16.63592911 -148.54153442]
[29.80804253 -140.46252441]
[40.86795807 -129.66122437]
[49.26385498 -116.67224121]
[54.57587814 -102.13943481]
[56.53713226 -86.78402710]
[55.04709244 -71.36877441]
[50.17673874 -56.66008377]
[42.16520691 -43.38994598]
[31.40801811 -32.21945953]
[39.66030884 -19.69349861]
[47.91259766 -7.16753674]
[56.16488647 5.35842514]
[64.41717529 17.88438797]
[71.78607941 19.28055000]
[69.88752747 4.40118408]
[83.45197296 -2.00239873]
[93.73376465 8.91935444]
[86.52388763 22.07287407]
[93.89278412 23.46903610]
[106.15515900 14.82991982]
[118.41752625 6.19080400]
[130.67988586 -2.44831228]
[142.94226074 -11.08742809]
[149.33506775 -26.18921852]
[165.64102173 -27.93498039]
[175.08596802 -14.52882099]
[167.95375061 0.23815040]
[151.58137512 1.17493975]
[139.31901550 9.81405544]
[127.05664062 18.45317268]
[114.79427338 27.09228897]
[102.53190613 35.73140335]
[97.04486847 49.69179535]
[100.14319611 64.36831665]
[103.24151611 79.04484558]
[118.90061188 84.14885712]
[128.12431335 100.60701752]
[140.33192444 90.19770050]
[156.05351257 93.39321136]
[163.22882080 107.74223328]
[156.35357666 122.23742676]
[140.70187378 125.75931549]
[128.28034973 115.60620880]
[118.18170166 126.69752502]
[119.42858124 141.64561462]
[120.67545319 156.59370422]
[133.65153503 161.91040039]
[143.01579285 172.25939941]
[146.97506714 185.57363892]
[144.80813599 199.22691345]
[136.99627686 210.55184937]
[125.11791992 217.36096191]
[126.05355072 232.33175659]
[126.98917389 247.30255127]
[127.92480469 262.27334595]
[128.86042786 277.24414062]
[129.79606628 292.21493530]
[142.56491089 295.12872314]
[154.12115479 301.26321411]
[163.66943359 310.18814087]
[170.55467224 321.28152466]
[174.30697632 333.77297974]
[174.67382812 346.79708862]
[171.63691711 359.45355225]
[165.41300964 370.86929321]
[156.43846130 380.25869751]
[145.33865356 386.97775269]
[132.88436890 390.56811523]
[132.88436890 405.56811523]
[132.88436890 420.56811523]
[132.88436890 435.56811523]
[132.88436890 450.56811523]
[132.88436890 465.56811523]
[132.88436890 480.56811523]
[132.88436890 495.56811523]
[132.88436890 510.56811523]
[132.88436890 525.56811523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[28 119]
[29 118]
[30 117]
[33 108]
[34 107]
[35 106]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[55 69]
[56 68]
[57 67]
[58 66]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
