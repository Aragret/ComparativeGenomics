%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.96354675 405.99658203]
[81.96354675 390.99658203]
[81.96354675 375.99658203]
[81.96354675 360.99658203]
[81.96354675 345.99658203]
[81.96354675 330.99658203]
[81.96354675 315.99658203]
[81.96354675 300.99658203]
[81.96354675 285.99658203]
[81.96354675 270.99658203]
[67.35929871 267.69235229]
[53.85007095 261.21786499]
[42.11477280 251.89489746]
[32.74396515 240.18850708]
[26.21012688 226.68380737]
[22.84383965 212.05667114]
[22.81706429 197.03996277]
[26.13436127 182.38682556]
[32.63249588 168.83283997]
[41.98846817 157.05915833]
[53.73557663 147.65829468]
[67.28667450 141.10420227]
[81.96354675 137.72850037]
[69.81021118 128.93666077]
[55.56352234 133.63046265]
[41.31682968 138.32426453]
[27.07013702 143.01806641]
[20.17770576 157.24021912]
[5.22024155 162.34413147]
[-8.92825603 155.30171204]
[-13.87373447 140.29112244]
[-6.68212986 126.21787262]
[8.37990665 121.43137360]
[22.37633705 128.77136230]
[36.62302780 124.07756805]
[50.86972046 119.38376617]
[65.11640930 114.68996429]
[64.60971069 93.31356049]
[75.50877380 76.15446472]
[93.14765167 68.38589478]
[93.45562744 53.38905716]
[93.76360321 38.39221954]
[94.07158661 23.39538193]
[86.61925507 9.43925762]
[94.61624146 -3.12647009]
[94.92421722 -18.12330818]
[82.59059143 -30.48732185]
[82.97632599 -47.60990143]
[95.35748291 -58.95054245]
[95.35748291 -73.95053864]
[94.89555359 -88.94342804]
[93.97214508 -103.91497803]
[93.04872894 -118.88652802]
[78.06946564 -120.05601501]
[63.39875412 -123.29891205]
[49.32216644 -128.55209351]
[36.11371231 -135.71330261]
[24.03049278 -144.64312744]
[13.30771542 -155.16777039]
[4.15409851 -167.08236694]
[-3.25217819 -180.15498352]
[-8.76694965 -194.13114929]
[-12.28286934 -208.73883057]
[-13.73149872 -223.69369507]
[-13.08463955 -238.70460510]
[-10.35488319 -253.47940063]
[-5.59536552 -267.73046875]
[1.10126805 -281.18041992]
[9.60466576 -293.56744385]
[19.74930573 -304.65042114]
[31.33772278 -314.21362305]
[44.14434052 -322.07089233]
[57.91987610 -328.06930542]
[72.39618683 -332.09204102]
[87.29148102 -334.06088257]
[102.31582642 -333.93743896]
[117.17676544 -331.72412109]
[131.58502197 -327.46405029]
[145.26013184 -321.24011230]
[157.93592834 -313.17349243]
[169.36564636 -303.42117310]
[179.32681274 -292.17300415]
[187.62551880 -279.64794922]
[194.10026550 -266.08975220]
[198.62496948 -251.76240540]
[201.11160278 -236.94476318]
[201.51171875 -221.92523193]
[199.81756592 -206.99620056]
[196.06210327 -192.44825745]
[190.31843567 -178.56459045]
[182.69836426 -165.61543274]
[173.35020447 -153.85285950]
[162.45594788 -143.50581360]
[150.22763062 -134.77572632]
[136.90328979 -127.83251953]
[122.74229431 -122.81134033]
[108.02027893 -119.80993652]
[108.94369507 -104.83838654]
[109.86710358 -89.86683655]
[112.31197357 -87.24580383]
[113.57679749 -83.28729248]
[113.03658295 -78.57414246]
[110.35748291 -73.95053864]
[110.35748291 -58.95054245]
[120.67733765 -51.17539215]
[124.67607117 -38.68383789]
[120.67269897 -25.98918724]
[109.92105865 -17.81533051]
[109.61308289 -2.81849241]
[117.08743286 10.06495762]
[109.06842041 23.70335960]
[108.76044464 38.70019913]
[108.45246887 53.69703674]
[108.14449310 68.69387054]
[116.71013641 72.30203247]
[123.89623260 78.19686890]
[129.10949707 85.89173126]
[131.91955566 94.75134277]
[132.09439087 104.04427338]
[146.13636780 109.31901550]
[160.17834473 114.59375763]
[176.25944519 111.37969208]
[186.87872314 123.87621307]
[181.11196899 139.22796631]
[164.89152527 141.64239502]
[154.90361023 128.63574219]
[140.86163330 123.36099243]
[126.81964874 118.08625031]
[115.22233582 131.62664795]
[96.96354675 137.72850037]
[111.64041901 141.10420227]
[125.19152069 147.65829468]
[136.93862915 157.05915833]
[146.29460144 168.83283997]
[152.79272461 182.38682556]
[156.11003113 197.03996277]
[156.08325195 212.05667114]
[152.71696472 226.68380737]
[146.18312073 240.18850708]
[136.81231689 251.89489746]
[125.07702637 261.21786499]
[111.56779480 267.69235229]
[96.96354675 270.99658203]
[96.96354675 285.99658203]
[96.96354675 300.99658203]
[96.96354675 315.99658203]
[96.96354675 330.99658203]
[96.96354675 345.99658203]
[96.96354675 360.99658203]
[96.96354675 375.99658203]
[96.96354675 390.99658203]
[96.96354675 405.99658203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 130]
[24 37]
[25 36]
[26 35]
[27 34]
[40 114]
[41 113]
[42 112]
[43 111]
[45 109]
[46 108]
[49 104]
[50 103]
[51 99]
[52 98]
[53 97]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
