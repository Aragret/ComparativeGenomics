%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAxxxxxxxxxxGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 307.03396606]
[92.50000000 292.03396606]
[92.50000000 277.03396606]
[92.50000000 262.03396606]
[92.50000000 247.03396606]
[92.50000000 232.03396606]
[92.50000000 217.03396606]
[92.50000000 202.03396606]
[92.50000000 187.03396606]
[92.50000000 172.03396606]
[83.87526703 170.60548401]
[75.48548889 168.14822388]
[67.45291138 164.69798279]
[59.89457321 160.30503845]
[52.92060852 155.03338623]
[42.04178238 165.36058044]
[31.16295624 175.68778992]
[27.02943802 191.55744934]
[11.14944553 195.65109253]
[-0.14104484 183.75752258]
[4.77265501 168.11183167]
[20.83575249 164.80895996]
[31.71457672 154.48176575]
[42.59340286 144.15455627]
[34.41595840 130.72256470]
[29.33056068 115.84211731]
[27.57696342 100.21476746]
[29.23784447 84.57730103]
[34.23489761 69.66695404]
[42.33253479 56.18669510]
[53.14897537 44.77207184]
[66.17427063 35.96124268]
[80.79431915 30.16960335]
[96.31984711 27.67020798]
[112.01888275 28.58089447]
[116.02662659 14.12620544]
[120.03436279 -0.32848293]
[124.04210663 -14.78317165]
[128.04985046 -29.23785973]
[132.05758667 -43.69254684]
[117.93177032 -48.75895691]
[104.21869659 -54.85476303]
[90.99326324 -61.94667053]
[78.32770538 -69.99594879]
[66.29119873 -78.95863342]
[54.94948578 -88.78577423]
[44.36450577 -99.42369843]
[34.59407043 -110.81430817]
[25.69155121 -122.89537811]
[17.70556450 -135.60093689]
[10.67972946 -148.86158752]
[4.65241814 -162.60490417]
[-0.34344900 -176.75582886]
[-4.28058624 -191.23706055]
[-7.13749027 -205.96951294]
[-8.89855671 -220.87274170]
[-9.55416870 -235.86531067]
[-9.10074425 -250.86537170]
[-7.54076004 -265.79098511]
[-4.88273621 -280.56060791]
[-1.14119017 -295.09359741]
[3.66344261 -309.31060791]
[9.50492096 -323.13391113]
[16.35133934 -336.48809814]
[24.16530609 -349.30017090]
[32.90414429 -361.50015259]
[42.52012253 -373.02145386]
[52.96072006 -383.80111694]
[64.16891479 -393.78027344]
[76.08349609 -402.90441895]
[88.63938141 -411.12371826]
[101.76799774 -418.39328003]
[115.39764404 -424.67340088]
[129.45387268 -429.92980957]
[143.85992432 -434.13372803]
[158.53709412 -437.26226807]
[173.40524292 -439.29830933]
[188.38314819 -440.23074341]
[203.38902283 -440.05444336]
[218.34089661 -438.77041626]
[233.15710449 -436.38565063]
[247.75672913 -432.91317749]
[262.06002808 -428.37194824]
[275.98889160 -422.78677368]
[289.46725464 -416.18820190]
[302.42144775 -408.61221313]
[314.78079224 -400.10018921]
[326.47772217 -390.69866943]
[337.44839478 -380.45895386]
[347.63287354 -369.43698120]
[356.97552490 -357.69296265]
[365.42532349 -345.29104614]
[372.93615723 -332.29891968]
[379.46694946 -318.78759766]
[384.98208618 -304.83087158]
[389.45138550 -290.50494385]
[392.85049438 -275.88803101]
[395.16079712 -261.06002808]
[396.36972046 -246.10191345]
[396.47061157 -231.09533691]
[395.46295166 -216.12229919]
[393.35226440 -201.26457214]
[390.15005493 -186.60330200]
[385.87377930 -172.21855164]
[380.54687500 -158.18890381]
[374.19833374 -144.59097290]
[366.86291504 -131.49903870]
[358.58065796 -118.98460388]
[349.39675903 -107.11600494]
[339.36145020 -95.95808411]
[328.52944946 -85.57176208]
[316.96002197 -76.01377869]
[304.71627808 -67.33634186]
[291.86511230 -59.58683014]
[278.47671509 -52.80757904]
[264.62423706 -47.03561401]
[250.38328552 -42.30245972]
[235.83166504 -38.63396454]
[221.04887390 -36.05016708]
[206.11561584 -34.56517792]
[191.11347961 -34.18711090]
[176.12437439 -34.91802597]
[161.23019409 -36.75393295]
[146.51226807 -39.68480682]
[142.50453186 -25.23011971]
[138.49679565 -10.77543068]
[134.48905945 3.67925739]
[130.48130798 18.13394547]
[126.47357178 32.58863449]
[140.66477966 40.07072067]
[152.86061096 50.49345398]
[162.46264648 63.34540176]
[168.99974060 77.99594116]
[172.15110779 93.72618866]
[171.76211548 109.76428223]
[167.85185242 125.32325745]
[160.61221313 139.63964844]
[150.39840698 152.01098633]
[137.71162415 161.83021545]
[123.17437744 168.61552429]
[107.50000000 172.03396606]
[107.50000000 187.03396606]
[107.50000000 202.03396606]
[107.50000000 217.03396606]
[107.50000000 232.03396606]
[107.50000000 247.03396606]
[107.50000000 262.03396606]
[107.50000000 277.03396606]
[107.50000000 292.03396606]
[107.50000000 307.03396606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 24]
[16 23]
[17 22]
[35 129]
[36 128]
[37 127]
[38 126]
[39 125]
[40 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
