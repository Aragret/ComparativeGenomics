%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAxxxxxxxxxxCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[36.40602875 260.70751953]
[30.28670692 274.40252686]
[24.16738129 288.09756470]
[18.04805756 301.79260254]
[19.48237991 317.54864502]
[7.22605515 326.01220703]
[1.10673058 339.70724487]
[-5.01259375 353.40228271]
[-2.78290009 369.64913940]
[-15.90237808 379.48840332]
[-30.87483215 372.79830933]
[-32.29788589 356.46099854]
[-18.70762444 347.28295898]
[-12.58830070 333.58792114]
[-6.46897602 319.89288330]
[-8.34099293 305.11639404]
[4.35302639 295.67327881]
[10.47235107 281.97824097]
[16.59167480 268.28320312]
[22.71100044 254.58818054]
[7.75565958 246.15771484]
[-6.28951550 236.28512573]
[-19.28594208 225.06782532]
[-31.10538864 212.61648560]
[-41.63122940 199.05398560]
[-50.75961304 184.51411438]
[-58.40046310 169.14036560]
[-64.47839355 153.08439636]
[-68.93343353 136.50466919]
[-71.72162628 119.56474304]
[-86.68485260 120.61441803]
[-101.64807892 121.66409302]
[-116.61131287 122.71376801]
[-124.71665192 135.94566345]
[-139.06437683 141.85517883]
[-154.13749695 138.16996765]
[-164.14009094 126.30709076]
[-165.22595215 110.82805634]
[-156.97753906 97.68486786]
[-142.56654358 91.93135071]
[-127.53429413 95.77985382]
[-117.66098022 107.75054169]
[-102.69775391 106.70086670]
[-87.73452759 105.65119171]
[-72.77130127 104.60151672]
[-72.43049622 88.21783447]
[-70.53954315 71.94007874]
[-67.11544800 55.91458130]
[-62.18897629 40.28541183]
[-55.80442810 25.19307709]
[-48.01919937 10.77325344]
[-38.90327835 -2.84442043]
[-28.53862000 -15.53752327]
[-17.01839638 -27.19194412]
[-26.68573570 -38.66114426]
[-36.35307312 -50.13034821]
[-46.02041245 -61.59954834]
[-61.65650558 -61.38385010]
[-73.74034882 -71.30931091]
[-76.56632233 -86.68942261]
[-68.80008698 -100.26217651]
[-54.10861588 -105.61891937]
[-39.42877960 -100.23037720]
[-31.69194603 -86.64084625]
[-34.55120850 -71.26688385]
[-24.88387108 -59.79768372]
[-15.21653366 -48.32848358]
[-5.54919577 -36.85928345]
[5.69206858 -44.83476639]
[17.53311348 -51.88913345]
[29.89863014 -57.97751236]
[42.70998001 -63.06118393]
[55.88568115 -67.10781860]
[69.34194183 -70.09168243]
[82.99317932 -71.99378967]
[96.75258636 -72.80205536]
[110.53263855 -72.51132965]
[124.24570465 -71.12346649]
[137.80458069 -68.64729309]
[151.12301636 -65.09855652]
[164.11631775 -60.49982452]
[176.70185852 -54.88034439]
[188.79959106 -48.27585220]
[200.33258057 -40.72835541]
[211.22746277 -32.28585434]
[221.41496277 -23.00204277]
[230.83029175 -12.93595982]
[239.41355896 -2.15162683]
[247.11018372 9.28237152]
[253.87123108 21.29331589]
[259.65365601 33.80482101]
[264.42074585 46.73731232]
[268.14215088 60.00854492]
[282.87191772 57.17424011]
[297.60171509 54.33993912]
[312.33151245 51.50563431]
[327.06130981 48.67133331]
[341.09878540 43.38465500]
[354.03884888 35.79817581]
[366.97891235 28.21169662]
[379.91897583 20.62521935]
[383.66452026 5.27117443]
[397.21313477 -2.86578488]
[412.52673340 1.04185367]
[420.51998901 14.67575741]
[416.45065308 29.94717407]
[402.73300171 37.79584122]
[387.50546265 33.56528473]
[374.56539917 41.15176392]
[361.62533569 48.73824310]
[348.68527222 56.32472229]
[363.68215942 56.63067627]
[377.79714966 61.70679855]
[389.55398560 71.02219391]
[397.72308350 83.60257721]
[401.45001221 98.13220215]
[400.34500122 113.09144592]
[394.52362061 126.91575623]
[384.59469604 138.15927124]
[371.59671021 145.64607239]
[356.88906860 148.59312439]
[342.01000977 146.69221497]
[328.51568604 140.14213562]
[317.81747437 129.62794495]
[311.03424072 116.24931335]
[308.87545776 101.40547180]
[311.56686401 86.64891052]
[318.82702637 73.52297211]
[329.89559937 63.40112305]
[315.16580200 66.23542786]
[300.43603516 69.06972504]
[285.70623779 71.90402985]
[270.97644043 74.73833466]
[272.49060059 89.13314056]
[272.79498291 103.60416412]
[271.88745117 118.04990387]
[269.77438354 132.36904907]
[266.47058105 146.46118164]
[261.99923706 160.22744751]
[256.39169312 173.57130432]
[249.68727112 186.39916992]
[241.93301392 198.62106323]
[233.18330383 210.15126038]
[223.49951172 220.90892029]
[212.94953918 230.81857300]
[201.60737610 239.81071472]
[189.55259705 247.82228088]
[176.86973572 254.79708862]
[163.64773560 260.68621826]
[149.97932434 265.44836426]
[135.96040344 269.05014038]
[121.68925476 271.46624756]
[107.26599884 272.67977905]
[92.79177094 272.68218994]
[78.36810303 271.47348022]
[64.09615326 269.06213379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[30 45]
[31 44]
[32 43]
[33 42]
[54 68]
[55 67]
[56 66]
[57 65]
[93 133]
[94 132]
[95 131]
[96 130]
[97 129]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
