%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUAxxxxxxxxxxGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.61862183 260.58593750]
[114.61862183 245.58595276]
[114.61862183 230.58595276]
[114.61862183 215.58595276]
[114.61862183 200.58595276]
[114.61862183 185.58595276]
[114.61862183 170.58595276]
[114.61862183 155.58595276]
[114.61862183 140.58595276]
[114.61862183 125.58595276]
[91.89904785 125.37052155]
[78.40457153 109.99734497]
[63.50012589 111.68773651]
[48.59568024 113.37813568]
[38.76121521 125.45791626]
[23.62190628 126.95989990]
[12.16628838 117.50979614]
[-2.73815942 119.20019531]
[-17.64260674 120.89059448]
[-32.54705429 122.58099365]
[-47.45150375 124.27139282]
[-62.35594940 125.96178436]
[-77.26039886 127.65218353]
[-92.16484833 129.34257507]
[-107.03144073 131.33863831]
[-121.85392761 133.63951111]
[-134.30393982 143.40208435]
[-148.06742859 137.70860291]
[-162.88990784 140.00947571]
[-177.71238708 142.31034851]
[-192.53488159 144.61122131]
[-207.35736084 146.91209412]
[-219.78744507 157.60906982]
[-235.17485046 151.93812561]
[-237.69033813 135.73306274]
[-224.74620056 125.66424561]
[-209.65823364 132.08961487]
[-194.83575439 129.78874207]
[-180.01327515 127.48786926]
[-165.19078064 125.18699646]
[-150.36830139 122.88612366]
[-138.97848511 113.28813171]
[-124.15480042 118.81703186]
[-109.33232117 116.51615906]
[-105.80976105 113.20846558]
[-100.15295410 112.11833954]
[-93.85523987 114.43813324]
[-78.95079803 112.74773407]
[-64.04634857 111.05734253]
[-49.14189911 109.36694336]
[-34.23745346 107.67654419]
[-19.33300400 105.98614502]
[-4.42855692 104.29574585]
[10.47589016 102.60535431]
[19.52418518 90.82978821]
[34.61533356 88.90316010]
[46.90528107 98.47368622]
[61.80972672 96.78329468]
[76.71417236 95.09289551]
[80.47962952 84.79677582]
[88.70944214 76.92694855]
[99.97140503 73.36753845]
[112.06813049 75.20320129]
[122.46512604 82.42564392]
[128.82128906 93.86171722]
[140.00958252 83.87062073]
[151.19787598 73.87952423]
[142.40170288 61.71271515]
[134.90315247 48.70594788]
[128.78175354 34.99710464]
[124.10237122 20.73150063]
[120.91461945 6.06036425]
[119.25228119 -8.86078453]
[119.13298798 -23.87377167]
[120.55799866 -38.81945419]
[123.51220703 -53.53939438]
[127.96429443 -67.87755585]
[133.86708069 -81.68194580]
[141.15797424 -94.80623627]
[149.75970459 -107.11128998]
[159.58106995 -118.46666718]
[170.51797485 -128.75201416]
[182.45446777 -137.85827637]
[195.26402283 -145.68893433]
[208.81086731 -152.16096497]
[222.95137024 -157.20579529]
[237.53564453 -160.76991272]
[252.40908813 -162.81555176]
[267.41403198 -163.32101440]
[282.39141846 -162.28096008]
[297.18249512 -159.70639038]
[311.63046265 -155.62463379]
[325.58212280 -150.07891846]
[338.88961792 -143.12806702]
[351.41189575 -134.84573364]
[363.01617432 -125.31973267]
[373.57946777 -114.65104675]
[382.98977661 -102.95275879]
[391.14736938 -90.34888458]
[397.96575928 -76.97302246]
[403.37268066 -62.96697998]
[407.31079102 -48.47922134]
[409.73837280 -33.66331863]
[410.62969971 -18.67633820]
[409.97528076 -3.67714643]
[407.78207397 11.17525673]
[404.07333374 25.72342873]
[398.88836670 39.81314850]
[392.28213501 53.29505539]
[384.32470703 66.02623749]
[375.10037231 77.87174225]
[364.70693970 88.70598602]
[353.25460815 98.41413116]
[340.86477661 106.89326477]
[327.66873169 114.05349731]
[313.80642700 119.81893158]
[299.42477417 124.12844849]
[284.67623901 126.93637085]
[269.71713257 128.21292114]
[254.70606995 127.94458008]
[239.80215454 126.13418579]
[225.16339111 122.80092621]
[210.94496155 117.98014069]
[197.29756165 111.72293091]
[184.36589050 104.09562683]
[172.28700256 95.17908478]
[161.18898010 85.06781769]
[150.00067139 95.05891418]
[138.81237793 105.05001068]
[150.83580017 96.08132935]
[165.42044067 92.57583618]
[180.20640564 95.10074615]
[192.80123901 103.24752045]
[201.16703796 115.69795990]
[203.95016479 130.43751526]
[200.70028687 145.08122253]
[191.94323730 157.25965881]
[179.09599304 165.00227356]
[164.23728943 167.05627441]
[149.77136230 163.08930969]
[138.03887939 153.74324036]
[130.93821716 140.53034973]
[129.61862183 125.58595276]
[129.61862183 140.58595276]
[129.61862183 155.58595276]
[129.61862183 170.58595276]
[129.61862183 185.58595276]
[129.61862183 200.58595276]
[129.61862183 215.58595276]
[129.61862183 230.58595276]
[129.61862183 245.58595276]
[129.61862183 260.58593750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 59]
[13 58]
[14 57]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[65 129]
[66 128]
[67 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
