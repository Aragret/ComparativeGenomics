%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCxxxxxxxxxxAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[41.41791534 652.42169189]
[41.41791534 637.42169189]
[41.41791534 622.42169189]
[41.41791534 607.42169189]
[41.41791534 592.42169189]
[41.41791534 577.42169189]
[41.41791534 562.42169189]
[41.41791534 547.42169189]
[41.41791534 532.42169189]
[41.41791534 517.42169189]
[28.57347107 514.65838623]
[16.52789879 509.39825439]
[5.76144791 501.84863281]
[-3.29614782 492.30807495]
[-10.28281498 481.15469360]
[-14.91861820 468.83117676]
[-17.01697350 455.82708740]
[-16.49216080 442.65957642]
[-13.36281681 429.85272217]
[-7.75128889 417.91671753]
[0.12114832 407.32751465]
[9.94301891 398.50784302]
[21.32497025 391.81030273]
[33.81520081 387.50341797]
[46.91740036 385.76065063]
[48.16427612 370.81256104]
[49.41114807 355.86450195]
[50.65802383 340.91641235]
[43.07065582 331.44332886]
[44.02877808 318.94128418]
[53.56221771 310.19100952]
[55.11980057 295.27209473]
[48.74591064 281.81018066]
[57.87437439 268.88806152]
[59.43195724 253.96914673]
[60.98953629 239.05023193]
[48.44666290 247.27679443]
[33.72249603 244.41342163]
[25.17674255 232.08580017]
[27.66128731 217.29299927]
[39.76552200 208.43368530]
[54.61721420 210.53776550]
[63.78467560 222.41212463]
[67.18765259 207.80323792]
[70.59062958 193.19433594]
[73.99360657 178.58544922]
[69.34542847 164.43470764]
[80.01176453 152.74967957]
[83.41474152 138.14079285]
[65.07746887 122.58776855]
[58.41243744 99.48519135]
[65.64730835 76.55467987]
[54.98568344 66.00339508]
[44.32405472 55.45210266]
[28.33314705 51.81577301]
[23.74600029 36.07124710]
[35.28147888 24.41514206]
[51.07287216 28.83825874]
[54.87534714 44.79047394]
[65.53697205 55.34176636]
[76.19860077 65.89305878]
[86.00122833 60.83592606]
[96.78847504 58.53342819]
[98.34605408 43.61451721]
[99.90363312 28.69560623]
[85.67776489 23.72355652]
[72.98230743 15.60431004]
[62.50192642 4.77572489]
[54.80180359 -8.17822552]
[50.29720306 -22.55895233]
[49.23104858 -37.59091949]
[51.66083908 -52.46347046]
[57.45553970 -66.37454987]
[66.30264282 -78.57395172]
[77.72505188 -88.40377808]
[91.10675049 -95.33391571]
[105.72608948 -98.99063110]
[120.79467010 -99.17672729]
[135.49986267 -95.88215637]
[149.04862976 -89.28460693]
[160.71029663 -79.73986053]
[169.85597229 -67.76266479]
[175.99244690 -53.99893188]
[178.78878784 -39.19091797]
[178.09417725 -24.13720703]
[173.94609070 -9.64962196]
[166.56822205 3.49053717]
[156.35845947 14.57463932]
[143.86738586 23.00493240]
[129.76864624 28.32678223]
[114.82254791 30.25318718]
[113.26496887 45.17210007]
[111.70738983 60.09101105]
[117.68308258 62.35562515]
[123.24131012 65.50895691]
[128.25083923 69.47656250]
[132.59342957 74.16477966]
[145.83601379 67.11964417]
[159.07859802 60.07450867]
[167.30194092 45.88618469]
[183.69839478 46.18422318]
[191.40066528 60.66202927]
[182.48535156 74.42607880]
[166.12373352 73.31709290]
[152.88114929 80.36222839]
[139.63856506 87.40736389]
[141.56883240 98.64982605]
[140.37219238 109.99384308]
[136.13865662 120.58610535]
[129.18669128 129.62983704]
[120.03924561 136.44473267]
[109.38439941 140.51818848]
[98.02363586 141.54376221]
[94.62065887 156.15264893]
[99.02543640 171.34832764]
[88.60250092 181.98843384]
[85.19952393 196.59732056]
[81.79654694 211.20620728]
[78.39356995 225.81510925]
[75.90844727 240.60781860]
[74.35086823 255.52671814]
[72.79328918 270.44564819]
[79.05577087 284.97463989]
[70.03871155 296.82968140]
[68.48113251 311.74859619]
[76.38290405 328.34805298]
[65.60610962 342.16326904]
[64.35923767 357.11135864]
[63.11236191 372.05944824]
[61.86548615 387.00753784]
[77.96453094 392.47805786]
[92.13278198 401.86044312]
[103.43987274 414.53247070]
[111.14484406 429.65618896]
[114.74473572 446.23318481]
[114.00738525 463.17059326]
[108.98640442 479.35305786]
[100.01733398 493.71627808]
[87.69517517 505.31689453]
[72.83498383 513.39459229]
[56.41791534 517.42169189]
[56.41791534 532.42169189]
[56.41791534 547.42169189]
[56.41791534 562.42169189]
[56.41791534 577.42169189]
[56.41791534 592.42169189]
[56.41791534 607.42169189]
[56.41791534 622.42169189]
[56.41791534 637.42169189]
[56.41791534 652.42169189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 130]
[26 129]
[27 128]
[28 127]
[31 125]
[32 124]
[34 122]
[35 121]
[36 120]
[43 119]
[44 118]
[45 117]
[46 116]
[48 114]
[49 113]
[52 61]
[53 60]
[54 59]
[63 93]
[64 92]
[65 91]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
