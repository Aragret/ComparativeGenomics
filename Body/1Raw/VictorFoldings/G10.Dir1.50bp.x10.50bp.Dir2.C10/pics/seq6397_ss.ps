%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCxxxxxxxxxxACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[185.99743652 478.94308472]
[185.99743652 463.94308472]
[185.99743652 448.94308472]
[185.99743652 433.94308472]
[185.99743652 418.94308472]
[185.99743652 403.94308472]
[185.99743652 388.94308472]
[185.99743652 373.94308472]
[185.99743652 358.94308472]
[185.99743652 343.94308472]
[168.76673889 338.40396118]
[154.39837646 327.36080933]
[144.58770752 312.09729004]
[140.49880981 294.39617920]
[142.62640381 276.33114624]
[150.73603821 260.02368164]
[163.88984680 247.39421082]
[180.55494690 239.93572998]
[178.99736023 225.01681519]
[177.43977356 210.09791565]
[175.88220215 195.17900085]
[153.76184082 191.63256836]
[141.33175659 174.42678833]
[144.54560852 154.63647461]
[133.88397217 144.08517456]
[123.22235107 133.53388977]
[112.56072235 122.98259735]
[98.79360199 130.31111145]
[81.11221313 128.84552002]
[65.24040985 116.83816528]
[50.30610275 118.24046326]
[35.37179565 119.64276886]
[20.43748856 121.04507446]
[7.38460684 130.97253418]
[-7.63258743 124.38345337]
[-9.16569328 108.05612183]
[4.36241770 98.78669739]
[19.03518486 106.11076355]
[33.96949387 104.70846558]
[48.90380096 103.30615997]
[63.83810806 101.90385437]
[66.58162689 94.92366028]
[52.62123489 89.43663025]
[38.66084290 83.94960022]
[23.68813896 83.04508972]
[19.92157745 68.52569580]
[32.56642914 60.45675659]
[44.14787674 69.98920441]
[58.10826492 75.47624207]
[72.06865692 80.96327209]
[74.81217194 73.98307800]
[64.82944489 62.78730774]
[54.84671783 51.59154510]
[44.86399078 40.39577866]
[34.88126373 29.20001221]
[19.01114464 26.85079193]
[11.07789803 12.90650463]
[17.16723251 -1.93598664]
[32.60793304 -6.29079294]
[45.55521393 3.18272066]
[46.07703018 19.21728516]
[56.05975723 30.41305161]
[66.04248047 41.60881805]
[76.02520752 52.80458450]
[86.00793457 64.00035095]
[89.48143768 69.34738922]
[92.50000000 74.90574646]
[92.50000000 59.90574646]
[92.50000000 44.90574646]
[78.72612762 38.32978439]
[69.17620850 26.42341232]
[65.74636841 11.55065346]
[69.11760712 -3.33549690]
[78.62057495 -15.27938271]
[92.36843872 -21.90953636]
[107.63156128 -21.90953636]
[121.37942505 -15.27938271]
[130.88238525 -3.33549690]
[134.25363159 11.55065346]
[130.82379150 26.42341232]
[121.27387238 38.32978439]
[107.50000000 44.90574646]
[107.50000000 59.90574646]
[107.50000000 74.90574646]
[124.17123413 89.91422272]
[123.11201477 112.32096863]
[133.77363586 122.87226105]
[144.43527222 133.42355347]
[155.09689331 143.97483826]
[165.10299683 140.11274719]
[176.19598389 140.66851807]
[186.44750977 145.85377502]
[193.95233154 155.04994202]
[197.17977905 166.86853027]
[211.94583130 164.22966003]
[226.71188354 161.59080505]
[241.47793579 158.95193481]
[256.24398804 156.31306458]
[271.01004028 153.67420959]
[285.77612305 151.03533936]
[300.54217529 148.39648438]
[315.30822754 145.75761414]
[318.91726685 130.96252441]
[328.23715210 118.91844940]
[341.65313721 111.71208954]
[356.84078979 110.59199524]
[371.16879272 115.75222778]
[382.15475464 126.29875183]
[387.89523315 140.40431213]
[387.39569092 155.62503052]
[380.74267578 169.32383728]
[369.08883667 179.12731934]
[354.45330811 183.33697510]
[339.37176514 181.22344971]
[326.45718384 173.15292358]
[317.94708252 160.52366638]
[303.18103027 163.16253662]
[288.41497803 165.80139160]
[273.64892578 168.44026184]
[258.88287354 171.07913208]
[244.11680603 173.71798706]
[229.35075378 176.35685730]
[214.58470154 178.99571228]
[199.81863403 181.63458252]
[190.80111694 193.62141418]
[192.35868835 208.54032898]
[193.91627502 223.45924377]
[195.47386169 238.37815857]
[207.45080566 240.24137878]
[218.68873596 244.75839233]
[228.60830688 251.69180298]
[236.69915771 260.67980957]
[242.54617310 271.25497437]
[245.85078430 282.86862183]
[246.44621277 294.91934204]
[244.30583191 306.78396606]
[239.54441833 317.84994507]
[232.41194153 327.54693604]
[223.28045654 335.37615967]
[212.62471008 340.93609619]
[200.99743652 343.94308472]
[200.99743652 358.94308472]
[200.99743652 373.94308472]
[200.99743652 388.94308472]
[200.99743652 403.94308472]
[200.99743652 418.94308472]
[200.99743652 433.94308472]
[200.99743652 448.94308472]
[200.99743652 463.94308472]
[200.99743652 478.94308472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 128]
[19 127]
[20 126]
[21 125]
[24 89]
[25 88]
[26 87]
[27 86]
[30 41]
[31 40]
[32 39]
[33 38]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[67 84]
[68 83]
[69 82]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
