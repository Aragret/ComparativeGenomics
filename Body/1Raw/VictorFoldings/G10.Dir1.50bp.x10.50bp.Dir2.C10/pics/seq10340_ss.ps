%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.07956696 286.25326538]
[104.07956696 271.25326538]
[104.07956696 256.25326538]
[104.07956696 241.25328064]
[104.07956696 226.25328064]
[104.07956696 211.25328064]
[104.07956696 196.25328064]
[104.07956696 181.25328064]
[104.07956696 166.25328064]
[104.07956696 151.25328064]
[82.70548248 144.91085815]
[67.38408661 130.76484680]
[60.42367554 112.64199829]
[62.10600281 94.74400330]
[70.84430695 80.69597626]
[60.40449905 69.92517090]
[49.96468353 59.15436172]
[39.52487183 48.38355255]
[25.68289948 54.51748657]
[10.60579586 55.54361343]
[-3.88541985 51.35733795]
[-16.04710770 42.48246384]
[-24.42280769 30.00571823]
[-28.01765251 15.44372749]
[-26.41650391 0.55865324]
[-19.83180046 -12.85503292]
[-30.27161407 -23.62584114]
[-40.71142578 -34.39665222]
[-55.87197113 -38.92085266]
[-59.17419434 -53.44478607]
[-69.61400604 -64.21559143]
[-82.05345154 -72.59774017]
[-95.95600128 -78.22969055]
[-109.85855865 -83.86164856]
[-123.76111603 -89.49360657]
[-137.66366577 -95.12556458]
[-153.60949707 -88.00743103]
[-169.47012329 -94.46691895]
[-175.65708923 -110.07394409]
[-189.67379761 -115.41545868]
[-203.69052124 -120.75697327]
[-215.55230713 -111.00025940]
[-230.70590210 -108.49743652]
[-245.07505798 -113.92173004]
[-254.79454041 -125.81405640]
[-257.24984741 -140.97541809]
[-251.78054810 -155.32749939]
[-239.85781860 -165.00965881]
[-224.68882751 -167.41743469]
[-210.35395813 -161.90316772]
[-200.70922852 -149.95014954]
[-198.34899902 -134.77368164]
[-184.33229065 -129.43217468]
[-170.31558228 -124.09066010]
[-159.37351990 -130.96585083]
[-146.27520752 -130.25274658]
[-135.83839417 -121.98831940]
[-132.03172302 -109.02812195]
[-118.12915802 -103.39616394]
[-104.22660065 -97.76420593]
[-90.32405090 -92.13224792]
[-76.42149353 -86.50028992]
[-85.36766815 -98.54047394]
[-90.63420868 -112.58552551]
[-91.81011963 -127.53936005]
[-88.80361938 -142.23497009]
[-81.84934998 -155.52549744]
[-71.49002075 -166.37373352]
[-58.53408432 -173.93309021]
[-43.99263000 -177.61360168]
[-29.00049210 -177.12805176]
[-14.72766495 -172.51432800]
[-2.28801274 -164.13250732]
[7.34766245 -152.63668823]
[13.42738438 -138.92402649]
[15.47668743 -124.06467438]
[13.33564091 -109.21826172]
[7.17133427 -95.54341888]
[-2.53516436 -84.10734558]
[-15.02635193 -75.80251312]
[-29.32740402 -71.27703857]
[-44.32225800 -70.88410187]
[-58.84320068 -74.65540314]
[-48.40338516 -63.88459778]
[-33.98956680 -60.13079453]
[-29.94061661 -44.83646393]
[-19.50080490 -34.06565475]
[-9.06099224 -23.29484558]
[4.55162382 -29.45779800]
[19.47941017 -30.59370995]
[33.92214203 -26.54624176]
[46.13146591 -17.78531075]
[54.62253952 -5.35262299]
[58.35461044 9.26216030]
[56.85853577 24.29990387]
[50.29568100 37.94374084]
[60.73549271 48.71455002]
[71.17530823 59.48535919]
[81.61511993 70.25616455]
[104.16016388 59.76462555]
[131.63354492 66.69646454]
[150.80332947 92.09029388]
[165.62107849 89.75919342]
[180.43884277 87.42808533]
[195.25660706 85.09698486]
[210.07435608 82.76587677]
[219.17340088 69.84368896]
[234.75883484 67.22266388]
[247.58410645 76.45781708]
[250.04020691 92.07009888]
[240.66996765 104.79700470]
[225.03259277 107.08790588]
[212.40547180 97.58363342]
[197.58770752 99.91474152]
[182.76994324 102.24584198]
[167.95219421 104.57695007]
[153.13442993 106.90805054]
[150.95759583 121.74925995]
[164.48178101 128.23742676]
[173.63793945 129.14111328]
[178.21769714 135.00382996]
[191.60398865 141.77194214]
[207.93898010 140.32281494]
[217.13871765 153.89840698]
[209.73930359 168.53332520]
[193.35260010 169.17240906]
[184.83587646 155.15821838]
[171.44958496 148.39010620]
[157.99362183 141.76161194]
[144.46943665 135.27345276]
[138.12196350 139.26840210]
[146.87995911 151.44615173]
[155.63796997 163.62388611]
[168.19075012 171.83532715]
[168.05909729 186.83474731]
[155.36410522 194.82458496]
[141.78358459 188.45518494]
[139.80979919 173.58580017]
[132.61842346 160.42205811]
[125.42703247 147.25831604]
[119.07956696 151.25328064]
[119.07956696 166.25328064]
[119.07956696 181.25328064]
[119.07956696 196.25328064]
[119.07956696 211.25328064]
[119.07956696 226.25328064]
[119.07956696 241.25328064]
[119.07956696 256.25326538]
[119.07956696 271.25326538]
[119.07956696 286.25326538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 99]
[16 98]
[17 97]
[18 96]
[26 88]
[27 87]
[28 86]
[30 84]
[31 83]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[39 54]
[40 53]
[41 52]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[118 130]
[119 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
