%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.22926331 402.20391846]
[90.22926331 387.20391846]
[90.22926331 372.20391846]
[90.22926331 357.20391846]
[90.22926331 342.20391846]
[90.22926331 327.20391846]
[90.22926331 312.20391846]
[90.22926331 297.20391846]
[90.22926331 282.20391846]
[90.22926331 267.20391846]
[76.11656189 263.94232178]
[63.08278275 257.60626221]
[51.78858185 248.51319885]
[42.80726242 237.12033081]
[36.59568405 224.00178528]
[33.47103882 209.81956482]
[33.59463120 195.29020691]
[36.96358490 181.14855957]
[43.41078568 168.11058044]
[52.61319351 156.83715820]
[64.10800934 147.90054321]
[77.31596375 141.75538635]
[91.57048798 138.71551514]
[91.88254547 123.71875763]
[92.19460297 108.72200012]
[82.19051361 119.89868164]
[67.77214813 124.03520203]
[53.36432648 119.86212158]
[43.38861847 108.66010284]
[40.90644455 93.86690521]
[46.67955399 80.02236176]
[58.93624878 71.37519836]
[73.91510773 70.57911682]
[87.01931000 77.87842560]
[94.22752380 91.03383636]
[97.32584381 76.35730743]
[100.42416382 61.68078232]
[92.06415558 48.53742218]
[95.41536713 33.69747543]
[107.99707031 25.80847740]
[111.09539032 11.13195229]
[114.19371033 -3.54457331]
[117.29203796 -18.22109985]
[120.39035797 -32.89762497]
[123.48867798 -47.57415009]
[109.12869263 -51.94224167]
[95.20406342 -57.54527283]
[81.82076263 -64.34060669]
[69.08064270 -72.27652740]
[57.08067703 -81.29263306]
[45.91218185 -91.32029724]
[35.66016769 -102.28321838]
[26.40265465 -114.09794617]
[18.21010208 -126.67456818]
[11.14485836 -139.91735840]
[5.26069689 -153.72555542]
[0.60240012 -167.99403381]
[-2.79457855 -182.61422729]
[-4.90438557 -197.47483826]
[-5.71096420 -212.46279907]
[-5.20817566 -227.46401978]
[-3.39984608 -242.36433411]
[-0.29973853 -257.05032349]
[4.06855297 -271.41024780]
[9.67178249 -285.33480835]
[16.46730423 -298.71801758]
[24.40340233 -311.45803833]
[33.41967392 -323.45785522]
[43.44749832 -334.62622070]
[54.41056061 -344.87808228]
[66.22541809 -354.13543701]
[78.80215454 -362.32778931]
[92.04505157 -369.39285278]
[105.85332489 -375.27682495]
[120.12187195 -379.93493652]
[134.74211121 -383.33169556]
[149.60275269 -385.44128418]
[164.59072876 -386.24768066]
[179.59193420 -385.74465942]
[194.49221802 -383.93612671]
[209.17817688 -380.83581543]
[223.53804016 -376.46731567]
[237.46252441 -370.86389160]
[250.84562683 -364.06817627]
[263.58551025 -356.13192749]
[275.58523560 -347.11547852]
[286.75344849 -337.08749390]
[297.00515747 -326.12429810]
[306.26232910 -314.30929565]
[314.45452881 -301.73245239]
[321.51940918 -288.48944092]
[327.40319824 -274.68109131]
[332.06109619 -260.41247559]
[335.45764160 -245.79220581]
[337.56704712 -230.93151855]
[338.37319946 -215.94354248]
[337.86999512 -200.94233704]
[336.06124878 -186.04206848]
[332.96072388 -171.35615540]
[328.59204102 -156.99635315]
[322.98840332 -143.07196045]
[316.19250488 -129.68894958]
[308.25607300 -116.94916534]
[299.23944092 -104.94956970]
[289.21130371 -93.78150177]
[278.24795532 -83.52994537]
[266.43283081 -74.27293396]
[253.85588074 -66.08090973]
[240.61277771 -59.01622391]
[226.80435181 -53.13264084]
[212.53567505 -48.47494507]
[197.91534424 -45.07858276]
[183.05462646 -42.96939850]
[168.06663513 -42.16345215]
[153.06544495 -42.66687012]
[138.16520691 -44.47583008]
[135.06687927 -29.79930305]
[131.96856689 -15.12277699]
[128.87023926 -0.44625163]
[125.77191925 14.23027420]
[122.67359924 28.90679932]
[130.99296570 41.20816422]
[128.05990601 56.13638687]
[115.10069275 64.77910614]
[112.00236511 79.45562744]
[108.90404510 94.13215637]
[107.19136047 109.03405762]
[106.87930298 124.03080750]
[106.56724548 139.02755737]
[121.60704803 143.01895142]
[135.25433350 150.47598267]
[146.72438049 160.96517944]
[155.35879517 173.87878418]
[160.66328430 188.47009277]
[162.33596802 203.89654541]
[160.28454590 219.26843262]
[154.63140869 233.70018005]
[145.70628357 246.36135864]
[134.02706909 256.52450562]
[120.26974487 263.60687256]
[105.22926331 267.20391846]
[105.22926331 282.20391846]
[105.22926331 297.20391846]
[105.22926331 312.20391846]
[105.22926331 327.20391846]
[105.22926331 342.20391846]
[105.22926331 357.20391846]
[105.22926331 372.20391846]
[105.22926331 387.20391846]
[105.22926331 402.20391846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 127]
[35 126]
[36 125]
[37 124]
[40 121]
[41 120]
[42 119]
[43 118]
[44 117]
[45 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
