%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACxxxxxxxxxxCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[142.25567627 291.11965942]
[141.65551758 276.13168335]
[141.05537415 261.14367676]
[140.45523071 246.15570068]
[139.85508728 231.16770935]
[139.25494385 216.17971802]
[138.65480042 201.19172668]
[138.05465698 186.20373535]
[134.05171204 171.74772644]
[126.85698700 158.58581543]
[119.66226959 145.42388916]
[112.46754456 132.26197815]
[105.27282715 119.10006714]
[90.66822815 115.67869568]
[78.37616730 124.27551270]
[66.08410645 132.87232971]
[80.53208923 136.90417480]
[88.05801392 149.87956238]
[84.38375854 164.42259216]
[71.59796906 172.26628113]
[56.96872711 168.95187378]
[48.81204987 156.36343384]
[51.76428604 141.65737915]
[38.53104782 148.72006226]
[32.50748444 163.58937073]
[17.08621407 168.01248169]
[4.09711885 158.59638977]
[3.50432062 142.56428528]
[15.76256275 132.21464539]
[31.46837234 135.48681641]
[44.70161057 128.42414856]
[57.48728943 120.58026886]
[69.77935028 111.98345184]
[82.07141113 103.38663483]
[81.54657745 95.90502167]
[67.63999939 101.52703857]
[57.99591446 90.03827667]
[65.94235229 77.31608582]
[80.49690247 80.94179535]
[79.97206116 73.46018219]
[66.60015869 66.66370392]
[53.22825623 59.86721802]
[39.85634995 53.07073593]
[26.48444557 46.27425385]
[13.11254120 39.47777176]
[3.98823738 38.36642075]
[-0.45689091 32.40917969]
[-13.69012928 25.34650040]
[-28.73621178 30.18291664]
[-42.75690079 22.88937187]
[-47.43397141 7.79299593]
[-39.99259949 -6.14979839]
[-24.84761810 -10.66699886]
[-10.98427773 -3.07862997]
[-6.62745142 12.11326313]
[6.60578632 19.17594147]
[19.90902328 26.10586739]
[33.28092957 32.90235138]
[46.65283203 39.69883347]
[60.02473831 46.49531555]
[73.39664459 53.29179764]
[86.76854706 60.08827972]
[101.05283356 55.51015091]
[107.98275757 42.20691681]
[114.91268158 28.90367889]
[116.11526489 19.79095078]
[122.11668396 15.40564632]
[129.31140137 2.24373198]
[136.50611877 -10.91818237]
[143.70085144 -24.08009720]
[131.70387268 -33.12942505]
[121.15238953 -43.82915497]
[112.27133179 -55.95122528]
[105.24997711 -69.23725128]
[100.23799896 -83.40403748]
[97.34222412 -98.14962769]
[96.62437439 -113.15970612]
[98.09975433 -128.11434937]
[101.73690796 -142.69477844]
[107.45832062 -156.59020996]
[115.14203644 -169.50448608]
[124.62426758 -181.16232300]
[135.70291138 -191.31523132]
[148.14183044 -199.74679565]
[161.67585754 -206.27731323]
[176.01655579 -210.76757812]
[190.85821533 -213.12187195]
[205.88452148 -213.29002380]
[220.77516174 -211.26844788]
[235.21273804 -207.10023499]
[248.88952637 -200.87422180]
[261.51400757 -192.72311401]
[272.81707764 -182.82067871]
[282.55783081 -171.37796021]
[290.52862549 -158.63887024]
[296.55953979 -144.87493896]
[300.52206421 -130.37956238]
[302.33175659 -115.46167755]
[301.94998169 -100.43929291]
[299.38488770 -85.63259888]
[294.69119263 -71.35719299]
[287.96893311 -57.91737366]
[279.36135864 -45.59959412]
[269.05197144 -34.66641998]
[257.26049805 -25.35088730]
[244.23829651 -17.85155869]
[230.26290894 -12.32828426]
[215.63224792 -8.89879036]
[200.65814209 -7.63617802]
[185.65979004 -8.56735992]
[170.95686340 -11.67248726]
[156.86276245 -16.88537598]
[149.66804504 -3.72346115]
[142.47331238 9.43845272]
[135.27859497 22.60036659]
[128.21592712 35.83360672]
[121.28599548 49.13684082]
[114.35606384 62.44007874]
[118.43473816 111.90534210]
[125.62946320 125.06726074]
[132.82418823 138.22917175]
[140.01890564 151.39108276]
[147.21362305 164.55300903]
[147.71527100 149.56138611]
[151.86389160 135.14651489]
[159.40814209 122.18177032]
[169.89088440 111.45274353]
[182.67695618 103.60950470]
[196.99162292 99.12730408]
[211.96754456 98.27770996]
[226.69729614 101.11221313]
[240.28837585 107.45906067]
[251.91728210 116.93369293]
[260.87939453 128.96202087]
[266.63168335 142.81521606]
[268.82562256 157.65390015]
[267.32824707 172.57897949]
[262.23028564 186.68611145]
[253.84068298 199.12049866]
[242.66772461 209.12875366]
[229.38842773 216.10444641]
[214.80740356 219.62490845]
[199.80813599 219.47680664]
[185.29945374 215.66915894]
[172.16047668 208.43263245]
[161.18730164 198.20573425]
[153.04264832 185.60359192]
[153.64279175 200.59158325]
[154.24293518 215.57957458]
[154.84307861 230.56756592]
[155.44322205 245.55555725]
[156.04336548 260.54354858]
[156.64350891 275.53152466]
[157.24365234 290.51953125]
[163.91886902 306.10406494]
[150.79127502 316.83264160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 34]
[15 33]
[16 32]
[23 31]
[24 30]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[47 56]
[48 55]
[63 118]
[64 117]
[65 116]
[67 115]
[68 114]
[69 113]
[70 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
