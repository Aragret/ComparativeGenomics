%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACxxxxxxxxxxAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.67353821 281.17242432]
[101.67353821 266.17242432]
[101.67353821 251.17240906]
[101.67353821 236.17240906]
[101.67353821 221.17240906]
[101.67353821 206.17240906]
[101.67353821 191.17240906]
[101.67353821 176.17240906]
[101.67353821 161.17240906]
[101.67353821 146.17240906]
[81.21797180 140.31825256]
[66.29459381 126.30308533]
[59.71242905 107.76826477]
[62.24391174 89.07360840]
[72.60201263 74.27687073]
[63.93540573 62.03391647]
[55.26879883 49.79096222]
[42.44596481 57.58581161]
[29.11062431 64.46719360]
[15.32774353 70.40158081]
[1.16447496 75.36006165]
[-13.31018066 79.31848145]
[-28.02570343 82.25754547]
[-42.91039658 84.16294861]
[-57.89175034 85.02540588]
[-72.89676666 84.84070587]
[-87.85235596 83.60975647]
[-102.68563843 81.33854675]
[-117.32435608 78.03815460]
[-131.69718933 73.72464752]
[-145.73411560 68.41904449]
[-159.36674500 62.14719772]
[-172.52867126 54.93965912]
[-185.15574646 46.83154678]
[-197.18647766 37.86235809]
[-208.56224060 28.07579231]
[-219.22760010 17.51953125]
[-229.13063049 6.24500322]
[-238.22303772 -5.69286299]
[-246.46057129 -18.23590660]
[-253.80305481 -31.32301903]
[-260.21475220 -44.89044189]
[-265.66439819 -58.87207031]
[-270.12545776 -73.19979095]
[-273.57620239 -87.80380249]
[-275.99981689 -102.61295319]
[-277.38449097 -117.55508423]
[-277.72344971 -132.55741882]
[-277.01510620 -147.54684448]
[-275.26284790 -162.45034790]
[-272.47525024 -177.19531250]
[-268.66586304 -191.70989990]
[-263.85327148 -205.92340088]
[-258.06091309 -219.76657104]
[-251.31703186 -233.17196655]
[-243.65443420 -246.07427979]
[-235.11048889 -258.41064453]
[-225.72682190 -270.12094116]
[-215.54913330 -281.14816284]
[-204.62699890 -291.43853760]
[-193.01367188 -300.94195557]
[-180.76568604 -309.61212158]
[-167.94274902 -317.40679932]
[-154.60729980 -324.28796387]
[-140.82434082 -330.22216797]
[-126.66099548 -335.18045044]
[-112.18628693 -339.13864136]
[-97.47071838 -342.07751465]
[-82.58599854 -343.98269653]
[-67.60463715 -344.84494019]
[-52.59961700 -344.66003418]
[-37.64405060 -343.42886353]
[-22.81079865 -341.15744019]
[-8.17212582 -337.85684204]
[6.20064783 -333.54312134]
[20.23749924 -328.23733521]
[33.87004089 -321.96527100]
[47.03185654 -314.75756836]
[59.65882111 -306.64926147]
[71.68942261 -297.67990112]
[83.06504059 -287.89318848]
[93.73025513 -277.33676147]
[103.63311005 -266.06210327]
[112.72535706 -254.12409973]
[120.96269989 -241.58093262]
[128.30500793 -228.49371338]
[134.71650696 -214.92619324]
[140.16595459 -200.94448853]
[144.62681580 -186.61669922]
[148.07734680 -172.01264954]
[150.50074768 -157.20346069]
[151.88519287 -142.26130676]
[152.22395325 -127.25897217]
[151.51538086 -112.26955414]
[149.76290894 -97.36608124]
[146.97509766 -82.62115479]
[143.16551208 -68.10662079]
[138.35272217 -53.89318466]
[132.56018066 -40.05009460]
[125.81608582 -26.64479828]
[118.15331268 -13.74260235]
[109.60919189 -1.40636623]
[100.22534943 10.30380821]
[90.04750061 21.33087158]
[79.12522888 31.62109756]
[67.51174927 41.12435532]
[76.17835999 53.36730957]
[84.84497070 65.61026001]
[98.62353516 61.00635910]
[113.66307068 61.92220306]
[127.75819397 68.62469482]
[138.69523621 80.50475311]
[144.59684753 96.11476135]
[144.23504639 113.33992004]
[158.74366760 117.14778137]
[173.25228882 120.95563507]
[182.41073608 120.10787964]
[188.01814270 124.99348450]
[202.44554138 129.09843445]
[218.20874023 124.57588959]
[229.81744385 136.15907288]
[225.32960510 151.93218994]
[209.36192322 155.66921997]
[198.34059143 143.52581787]
[183.91320801 139.42086792]
[169.44444275 135.46426392]
[154.93580627 131.65640259]
[140.42718506 127.84854126]
[134.48876953 132.42951965]
[145.39570618 142.72703552]
[156.30264282 153.02455139]
[167.20956421 163.32206726]
[180.98352051 169.26161194]
[187.79298401 182.62690735]
[184.50119019 197.26124573]
[172.62449646 206.42335510]
[157.63389587 205.89271545]
[146.43476868 195.91375732]
[144.18609619 181.08265686]
[136.99472046 167.91893005]
[129.80332947 154.75518799]
[122.61195374 141.59144592]
[116.67353821 146.17240906]
[116.67353821 161.17240906]
[116.67353821 176.17240906]
[116.67353821 191.17240906]
[116.67353821 206.17240906]
[116.67353821 221.17240906]
[116.67353821 236.17240906]
[116.67353821 251.17240906]
[116.67353821 266.17242432]
[116.67353821 281.17242432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 108]
[16 107]
[17 106]
[114 128]
[115 127]
[116 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
