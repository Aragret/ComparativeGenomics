%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUxxxxxxxxxxGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.57935333 484.83093262]
[79.57935333 469.83093262]
[79.57935333 454.83093262]
[79.57935333 439.83093262]
[79.57935333 424.83093262]
[79.57935333 409.83093262]
[79.57935333 394.83093262]
[79.57935333 379.83093262]
[79.57935333 364.83093262]
[79.57935333 349.83093262]
[64.84954071 347.09729004]
[50.86917114 341.70202637]
[38.11489105 333.82751465]
[27.02184486 323.74075317]
[17.96881485 311.78411865]
[11.26528740 298.36395264]
[7.14087582 283.93664551]
[5.73745298 268.99316406]
[7.10427475 254.04226685]
[11.19625092 239.59330750]
[17.87543297 226.13873291]
[26.91565895 214.13745117]
[38.01021576 203.99905396]
[50.78225327 196.06990051]
[64.79756165 190.62129211]
[79.57935333 187.84013367]
[79.57935333 172.84013367]
[79.57935333 157.84013367]
[79.57935333 142.84013367]
[71.76987457 155.64685059]
[60.44070435 165.47792053]
[46.66145706 171.40518188]
[31.73305321 172.86901855]
[17.06491470 169.73123169]
[4.04188585 162.28805542]
[-6.10650444 151.24223328]
[-12.42212868 137.63662720]
[-14.30871677 122.75572968]
[-11.58815193 108.00450897]
[-4.51728868 94.77564240]
[6.23630047 84.31809998]
[19.65734863 77.61918640]
[34.47875214 75.31135559]
[49.30118942 77.61251068]
[62.72525024 84.30538177]
[73.48354340 94.75809479]
[80.56036377 107.98377228]
[83.28766632 122.73715210]
[88.63952637 108.72438812]
[86.61879730 94.88935089]
[97.34770966 85.92375183]
[102.69956970 71.91098785]
[108.05142975 57.89822006]
[113.40328979 43.88545609]
[118.75514984 29.87268829]
[106.92166138 39.09053040]
[93.40917969 45.60304260]
[78.82653046 49.11679459]
[63.83077240 49.47346497]
[49.09756470 46.65698242]
[35.29074097 40.79424667]
[23.03239822 32.14942169]
[12.87485886 21.11201477]
[5.27579069 8.17933655]
[0.57758570 -6.06590414]
[-1.00806868 -20.98185921]
[0.59027213 -35.89645767]
[5.30059195 -50.13769913]
[12.91065693 -63.06390762]
[23.07758141 -74.09267426]
[35.34327316 -82.72706604]
[49.15507889 -88.57805634]
[63.89067841 -91.38200378]
[78.88612366 -91.01258087]
[93.46578217 -87.48642731]
[106.97271729 -80.96242523]
[118.79835510 -71.73451996]
[128.40988159 -60.21849823]
[135.37420654 -46.93323898]
[139.37754822 -32.47733307]
[140.23953247 -17.50212097]
[137.92131042 -2.68234062]
[132.52563477 11.31762886]
[144.38726807 2.13603926]
[156.24890137 -7.04555035]
[168.11053467 -16.22714043]
[179.97216797 -25.40872955]
[191.45198059 -35.06347656]
[202.53108215 -45.17551804]
[213.61018372 -55.28755951]
[224.68930054 -65.39959717]
[235.34950256 -75.95232391]
[245.57330322 -86.92838287]
[246.44363403 -102.94781494]
[259.59384155 -112.13757324]
[274.93621826 -107.44806671]
[280.70138550 -92.47668457]
[272.46682739 -78.70818329]
[256.54937744 -76.70458984]
[246.32557678 -65.72852325]
[246.32350159 -62.86930084]
[245.15487671 -59.83953476]
[242.74914551 -57.09635544]
[239.20707703 -55.11363602]
[234.80133057 -54.32049179]
[223.72222900 -44.20845032]
[212.64312744 -34.09640884]
[201.56401062 -23.98436928]
[201.33039856 -21.13470459]
[199.92024231 -18.20953369]
[197.30026245 -15.67018890]
[193.60925293 -13.98083687]
[189.15376282 -13.54709435]
[177.29212952 -4.36550426]
[165.43049622 4.81608534]
[153.56884766 13.99767494]
[141.70721436 23.17926407]
[132.76791382 35.22454834]
[127.41605377 49.23731232]
[122.06419373 63.25008011]
[116.71233368 77.26284790]
[111.36047363 91.27561188]
[113.38120270 105.11064911]
[102.65229034 114.07624817]
[97.30043030 128.08901978]
[94.57935333 142.84013367]
[94.57935333 157.84013367]
[94.57935333 172.84013367]
[94.57935333 187.84013367]
[109.36114502 190.62129211]
[123.37645721 196.06990051]
[136.14848328 203.99905396]
[147.24305725 214.13745117]
[156.28327942 226.13873291]
[162.96246338 239.59330750]
[167.05442810 254.04226685]
[168.42124939 268.99316406]
[167.01783752 283.93664551]
[162.89341736 298.36395264]
[156.18989563 311.78411865]
[147.13685608 323.74075317]
[136.04382324 333.82751465]
[123.28953552 341.70202637]
[109.30916595 347.09729004]
[94.57935333 349.83093262]
[94.57935333 364.83093262]
[94.57935333 379.83093262]
[94.57935333 394.83093262]
[94.57935333 409.83093262]
[94.57935333 424.83093262]
[94.57935333 439.83093262]
[94.57935333 454.83093262]
[94.57935333 469.83093262]
[94.57935333 484.83093262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[26 129]
[27 128]
[28 127]
[29 126]
[48 125]
[49 124]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[83 117]
[84 116]
[85 115]
[86 114]
[87 113]
[88 108]
[89 107]
[90 106]
[91 105]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
