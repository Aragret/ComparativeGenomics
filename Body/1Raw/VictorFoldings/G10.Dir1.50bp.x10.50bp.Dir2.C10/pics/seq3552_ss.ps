%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCxxxxxxxxxxACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.68996429 122.20842743]
[80.25015259 132.97923279]
[69.81034088 143.75004578]
[59.37052917 154.52085876]
[49.04332352 165.39967346]
[38.82984543 176.38534546]
[28.61636353 187.37101746]
[18.40288353 198.35667419]
[8.18940449 209.34234619]
[-2.02407527 220.32800293]
[-5.75396824 235.70326233]
[-20.08657646 239.75611877]
[-30.30005646 250.74177551]
[-26.37463760 265.66137695]
[-31.16024017 280.32772827]
[-43.12979889 290.06082153]
[-58.46386719 291.75488281]
[-72.26940155 284.86935425]
[-80.14111328 271.60134888]
[-79.56715393 256.18466187]
[-70.73068237 243.53869629]
[-56.45137787 237.69874573]
[-41.28572083 240.52828979]
[-31.07224083 229.54263306]
[-28.07288551 214.95314026]
[-13.00973988 210.11451721]
[-2.79626012 199.12886047]
[7.41721964 188.14318848]
[17.63069916 177.15753174]
[27.84417915 166.17185974]
[38.05765915 155.18620300]
[40.32331848 148.10012817]
[48.59972000 144.08103943]
[59.03953171 133.31024170]
[69.47934723 122.53942871]
[79.91915894 111.76861572]
[65.59355927 116.21578217]
[54.32112885 126.11185455]
[39.64036179 129.19001770]
[25.34220314 124.65541077]
[15.11879635 113.67898560]
[11.61008167 99.09512329]
[15.72209835 84.66975403]
[26.39301872 74.12786102]
[40.86734390 70.19163513]
[55.40744019 73.87750244]
[66.25904083 84.23425293]
[80.38724518 89.27348328]
[70.40451813 78.07772064]
[60.42178726 66.88195801]
[50.32313919 55.79063797]
[40.10966110 44.80497360]
[29.89617920 33.81930923]
[14.50873280 35.82083893]
[0.89970154 28.36604881]
[-5.69796467 14.32146168]
[-2.74732852 -0.91249293]
[8.61703014 -11.47804832]
[24.02528381 -13.31253338]
[37.55264664 -5.71055126]
[43.99756622 8.40478134]
[40.88184357 23.60583115]
[51.09532547 34.59149551]
[61.30880356 45.57715988]
[68.21126556 48.35235596]
[71.61755371 56.89922714]
[81.60028076 68.09499359]
[91.58300781 79.29076385]
[88.18988037 64.67958069]
[84.79674530 50.06839371]
[76.49653625 37.57413483]
[73.52960205 22.87048721]
[76.33538055 8.13523674]
[84.49831390 -4.44914341]
[96.80935669 -13.01875305]
[111.44509888 -16.30432892]
[126.23780823 -13.81923771]
[138.99650574 -5.93155098]
[147.83148193 6.19046831]
[151.43414307 20.75140190]
[149.27091980 35.59459686]
[141.66218567 48.52159500]
[129.73478699 57.61781311]
[121.75342560 70.31812286]
[113.77207184 83.01844025]
[126.86522675 75.69933319]
[139.95837402 68.38022614]
[153.05152893 61.06112289]
[166.14468384 53.74201584]
[179.23783875 46.42290878]
[192.33099365 39.10380554]
[178.99462891 32.23786545]
[175.83876038 17.57360268]
[185.17010498 5.82940722]
[200.16818237 5.58933592]
[209.87062073 17.02886009]
[207.18609619 31.78607941]
[220.96849060 25.86611557]
[234.75086975 19.94615364]
[238.04528809 4.78282785]
[249.64569092 -5.52300406]
[265.09149170 -7.00854015]
[278.44345093 0.89743870]
[284.56750488 15.15492153]
[281.10879517 30.28161621]
[269.39724731 40.46099854]
[253.93624878 41.77889252]
[240.67082214 33.72853470]
[226.88844299 39.64849854]
[213.10606384 45.56846237]
[199.65010071 52.19696045]
[186.55694580 59.51606369]
[173.46379089 66.83516693]
[160.37063599 74.15427399]
[147.27748108 81.47338104]
[134.18432617 88.79248810]
[121.09117126 96.11159515]
[121.55921936 111.10428619]
[135.08340454 117.59245300]
[148.60758972 124.08061981]
[162.13179016 130.56878662]
[177.68266296 126.62548828]
[190.37385559 136.43943787]
[190.46972656 152.48220825]
[177.89677429 162.44715881]
[162.29986572 158.69003296]
[155.64361572 144.09297180]
[142.11943054 137.60481262]
[128.59524536 131.11663818]
[115.07105255 124.62847900]
[123.82905579 136.80622864]
[132.58705139 148.98396301]
[141.34506226 161.16171265]
[152.06037903 171.65846252]
[159.11389160 184.89659119]
[161.84962463 199.64500427]
[160.01316833 214.53216553]
[153.77531433 228.17361450]
[143.71615601 239.30075073]
[130.77114868 246.87879944]
[116.14413452 250.20303345]
[101.19536591 248.96430969]
[87.31502533 243.27781677]
[75.79393005 233.67239380]
[67.70349121 221.04129028]
[63.79608917 206.55915833]
[64.43509674 191.57276917]
[69.56109619 177.47581482]
[78.69597626 165.58058167]
[82.69396973 151.12319946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
