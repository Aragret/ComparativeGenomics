%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUxxxxxxxxxxUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.02757263]
[92.50000000 237.02757263]
[92.50000000 222.02757263]
[92.50000000 207.02757263]
[92.50000000 192.02757263]
[92.50000000 177.02757263]
[92.50000000 162.02757263]
[92.50000000 147.02757263]
[92.50000000 132.02757263]
[92.50000000 117.02756500]
[78.71762085 111.10760498]
[67.83879089 121.43480682]
[56.95996857 131.76200867]
[46.08114243 142.08921814]
[49.74716187 157.00418091]
[45.44914246 171.74943542]
[34.34322739 182.35859680]
[19.41685677 185.97784424]
[4.68514442 181.63362122]
[-5.88915062 170.49450684]
[-9.46159649 155.55686951]
[-5.07122326 140.83883667]
[6.10098076 130.29951477]
[21.04974937 126.77391052]
[35.75393677 131.21038818]
[46.63276291 120.88318634]
[57.51158905 110.55598450]
[68.39041138 100.22878265]
[65.21685028 93.43330383]
[58.86972046 79.84235382]
[55.69615555 73.04687500]
[40.79425049 74.75956726]
[29.73353195 86.38024139]
[13.76511669 84.83451080]
[5.13860846 71.30813599]
[10.47152615 56.17738342]
[25.67291069 51.04928207]
[39.08156204 59.85766602]
[53.98346329 58.14497375]
[78.56742096 70.97979736]
[95.76648712 90.99649048]
[91.67877960 75.71246338]
[102.32081604 65.29150391]
[106.02697754 50.75656891]
[109.73313904 36.22163391]
[113.43930054 21.68669701]
[117.14546204 7.15176153]
[120.85162354 -7.38317442]
[124.55778503 -21.91810989]
[128.26394653 -36.45304871]
[124.86096954 -51.06193924]
[115.11331177 -62.46295929]
[105.36566162 -73.86398315]
[95.61801147 -85.26499939]
[85.75228882 -96.56401062]
[75.76956177 -107.75977325]
[60.71548462 -115.55792236]
[64.04149628 -132.18241882]
[80.93703461 -133.58851624]
[86.96532440 -117.74250031]
[96.94805145 -106.54673004]
[103.79128265 -103.62854004]
[107.01902771 -95.01265717]
[116.76668549 -83.61163330]
[126.51433563 -72.21060944]
[136.26199341 -60.80959320]
[150.48876953 -65.56340790]
[151.42439270 -80.53419495]
[152.36001587 -95.50498962]
[138.56448364 -101.83329010]
[127.98936462 -112.72050476]
[122.06488037 -126.69422150]
[121.59226990 -141.86462402]
[126.63543701 -156.18003845]
[136.51234436 -167.70440674]
[149.88722229 -174.87916565]
[164.95121765 -176.73397827]
[179.66706848 -173.01802063]
[192.04455566 -164.23381042]
[200.40972900 -151.56936646]
[203.63128662 -136.73744202]
[201.27351379 -121.74392700]
[193.65530396 -108.61658478]
[181.80693054 -99.13076782]
[167.33081055 -94.56935883]
[166.39518738 -79.59857178]
[165.45956421 -64.62777710]
[171.72253418 -60.50163269]
[179.72100830 -73.19117737]
[188.22370911 -85.54852295]
[200.74975586 -77.29634857]
[192.75126648 -64.60665131]
[184.24850464 -52.24934387]
[190.51147461 -48.12319946]
[203.89776611 -54.89131546]
[217.28405762 -61.65942764]
[230.67033386 -68.42754364]
[232.15547180 -83.78325653]
[241.72470093 -95.88422394]
[256.32452393 -100.86907196]
[271.29617310 -97.14714813]
[281.86230469 -85.90610504]
[284.65124512 -70.73292542]
[278.77307129 -56.46931458]
[266.10348511 -47.66673279]
[250.68533325 -47.13405609]
[237.43844604 -55.04125977]
[224.05216980 -48.27314377]
[210.66587830 -41.50502777]
[197.27960205 -34.73691559]
[176.36235046 -23.54389763]
[156.54173279 -23.81699181]
[142.79887390 -32.74688721]
[139.09271240 -18.21195030]
[135.38655090 -3.67701340]
[131.68038940 10.85792255]
[127.97423553 25.39285851]
[124.26807404 39.92779541]
[120.56191254 54.46273041]
[116.85575104 68.99766541]
[121.20854187 83.24205017]
[110.30142212 94.70264435]
[117.61047363 81.60388184]
[128.52990723 71.31961823]
[142.04269409 64.80773163]
[156.89025879 62.67473602]
[171.68972778 65.11928558]
[185.06266785 71.91371155]
[195.76356506 82.42517090]
[202.79573059 95.67465210]
[205.50419617 110.42810059]
[203.63670349 125.31139374]
[197.36717224 138.93832397]
[187.27957153 150.03967285]
[174.31341553 157.58149719]
[159.67639160 160.86132812]
[144.73175049 159.57371521]
[130.87144470 153.83856201]
[119.38641357 144.19004822]
[111.34633636 131.52682495]
[107.50000000 117.02756500]
[107.50000000 132.02757263]
[107.50000000 147.02757263]
[107.50000000 162.02757263]
[107.50000000 177.02757263]
[107.50000000 192.02757263]
[107.50000000 207.02757263]
[107.50000000 222.02757263]
[107.50000000 237.02757263]
[107.50000000 252.02757263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 28]
[12 27]
[13 26]
[14 25]
[31 39]
[32 38]
[41 122]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[48 115]
[49 114]
[50 113]
[51 66]
[52 65]
[53 64]
[54 63]
[55 61]
[56 60]
[67 87]
[68 86]
[69 85]
[94 110]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
