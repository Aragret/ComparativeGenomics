%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAxxxxxxxxxxUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.81742859 290.45382690]
[84.81742859 275.45382690]
[84.81742859 260.45382690]
[84.81742859 245.45384216]
[84.81742859 230.45384216]
[84.81742859 215.45384216]
[84.81742859 200.45384216]
[84.81742859 185.45384216]
[84.81742859 170.45384216]
[84.81742859 155.45384216]
[73.93860626 145.12663269]
[58.95888901 145.90647888]
[43.97917557 146.68632507]
[33.42750931 158.14494324]
[18.22484207 158.72242737]
[7.36581802 148.59242249]
[-7.61389637 149.37226868]
[-22.59361076 150.15209961]
[-37.57332611 150.93194580]
[-52.55303955 151.71179199]
[-67.39424133 153.88864136]
[-81.96694946 157.44338989]
[-96.53964996 160.99815369]
[-104.77379608 174.22073364]
[-119.60322571 177.61817932]
[-132.15818787 169.68669128]
[-146.73089600 173.24145508]
[-161.30360413 176.79621887]
[-168.06738281 190.89533997]
[-182.33273315 197.30110168]
[-197.36398315 192.98889160]
[-206.06385803 179.99481201]
[-204.32452393 164.45425415]
[-192.96725464 153.70501709]
[-177.35458374 152.82254028]
[-164.85835266 162.22351074]
[-150.28565979 158.66874695]
[-135.71295166 155.11398315]
[-128.22038269 142.29225159]
[-113.49223328 138.47962952]
[-100.09441376 146.42546082]
[-85.52171326 142.87069702]
[-70.94900513 139.31593323]
[-84.32234192 132.52226257]
[-92.02735901 119.65242767]
[-91.69949341 104.65601349]
[-83.43935394 92.13522339]
[-69.78187561 85.93253326]
[-54.91836929 87.95146942]
[-43.41024780 97.57244873]
[-38.78921127 111.84290314]
[-42.47339630 126.38343048]
[-53.33288574 136.73208618]
[-38.35316849 135.95223999]
[-23.37345505 135.17239380]
[-8.39374161 134.39254761]
[6.58597279 133.61270142]
[16.33440590 122.40985870]
[31.51485825 121.40559387]
[43.19932938 131.70660400]
[58.17904282 130.92675781]
[73.15876007 130.14691162]
[63.17021561 105.63084412]
[70.70682526 82.44428253]
[89.66884613 70.72513580]
[109.64188385 73.77892303]
[118.40808868 61.60708618]
[127.17429352 49.43524933]
[135.94050598 37.26341248]
[144.70671082 25.09157562]
[133.95550537 14.59066010]
[124.88954163 2.60458541]
[117.71135712 -10.59887505]
[112.58132172 -24.72475052]
[109.61403656 -39.45746613]
[108.87578583 -54.46788406]
[110.38307190 -69.42066956]
[114.10221863 -83.98176575]
[119.95014191 -97.82588196]
[127.79618835 -110.64372253]
[137.46508789 -122.14894867]
[148.74081421 -132.08451843]
[161.37149048 -140.22846985]
[175.07490540 -146.39884949]
[189.54496765 -150.45783997]
[204.45835876 -152.31474304]
[219.48194885 -151.92807007]
[234.28009033 -149.30647278]
[248.52218628 -144.50851440]
[261.89004517 -137.64137268]
[274.08505249 -128.85847473]
[284.83477783 -118.35602570]
[293.89904785 -106.36866760]
[301.07534790 -93.16418457]
[306.20336914 -79.03757477]
[309.16854858 -64.30443573]
[309.90466309 -49.29391479]
[308.39523315 -34.34134674]
[304.67401123 -19.78077698]
[298.82412720 -5.93749714]
[290.97625732 6.87923098]
[281.30572510 18.38307571]
[270.02856445 28.31703758]
[257.39675903 36.45919037]
[243.69244385 42.62762833]
[229.22181702 46.68455505]
[214.30815125 48.53932953]
[199.28462219 48.15052414]
[184.48684692 45.52681732]
[170.24543762 40.72682571]
[156.87854004 33.85778046]
[148.11233521 46.02961731]
[139.34613037 58.20145416]
[130.57992554 70.37329102]
[121.81372070 82.54512787]
[134.15054321 100.18261719]
[131.24508667 125.55451202]
[144.90133667 131.75991821]
[158.55757141 137.96533203]
[171.98759460 130.19268799]
[187.41784668 131.83193970]
[198.91506958 142.25276184]
[202.05834961 157.44813538]
[195.63902283 171.57513428]
[182.12547302 179.20162964]
[166.71391296 177.39508057]
[155.33041382 166.85014343]
[152.35217285 151.62156677]
[138.69592285 145.41615295]
[125.03968811 139.21075439]
[118.73412323 143.27153015]
[127.74356842 155.26443481]
[136.75302124 167.25733948]
[149.26309204 175.53370667]
[149.17060852 190.53341675]
[136.55944824 198.65490723]
[122.86526489 192.53367615]
[120.50576019 177.72053528]
[113.31437683 164.55680847]
[106.12299347 151.39306641]
[99.81742859 155.45384216]
[99.81742859 170.45384216]
[99.81742859 185.45384216]
[99.81742859 200.45384216]
[99.81742859 215.45384216]
[99.81742859 230.45384216]
[99.81742859 245.45384216]
[99.81742859 260.45382690]
[99.81742859 275.45382690]
[99.81742859 290.45382690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 62]
[12 61]
[13 60]
[16 57]
[17 56]
[18 55]
[19 54]
[20 53]
[21 43]
[22 42]
[23 41]
[26 38]
[27 37]
[28 36]
[66 115]
[67 114]
[68 113]
[69 112]
[70 111]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
