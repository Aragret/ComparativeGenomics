%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUxxxxxxxxxxCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[32.87937927 323.01748657]
[18.64450836 318.22753906]
[4.74796867 312.53005981]
[-8.75244713 305.94873047]
[-21.80059624 298.51092529]
[-30.05288506 311.03689575]
[-38.30517578 323.56286621]
[-46.55746460 336.08880615]
[-54.80975342 348.61477661]
[-48.46678162 362.67785645]
[-50.75641251 377.93438721]
[-60.94802856 389.51602173]
[-75.78952789 393.72714233]
[-90.54503632 389.22396851]
[-100.50612640 377.44348145]
[-102.49425507 362.14474487]
[-95.87501526 348.20956421]
[-82.76057434 340.08459473]
[-67.33571625 340.36248779]
[-59.08342743 327.83651733]
[-50.83113480 315.31057739]
[-42.57884598 302.78460693]
[-34.32655716 290.25863647]
[-43.54106140 283.40649414]
[-52.40662384 276.10848999]
[-60.90169144 268.38235474]
[-69.00562286 260.24691772]
[-76.69870758 251.72192383]
[-83.96224976 242.82810974]
[-90.77858734 233.58708191]
[-97.13114929 224.02130127]
[-103.00450897 214.15405273]
[-108.38436890 204.00929260]
[-113.25765991 193.61167908]
[-117.61253357 182.98651123]
[-121.43840027 172.15962219]
[-124.72596741 161.15730286]
[-127.46723938 150.00631714]
[-129.65554810 138.73376465]
[-131.28558350 127.36705017]
[-132.35337830 115.93381500]
[-132.85632324 104.46184540]
[-132.79321289 92.97902679]
[-132.16419983 81.51327515]
[-130.97080994 70.09246826]
[-129.21594238 58.74435806]
[-126.90386200 47.49654007]
[-124.04019165 36.37635803]
[-120.63189697 25.41083908]
[-116.68725586 14.62664318]
[-112.21585846 4.04998446]
[-107.22857666 -6.29342508]
[-101.73754120 -16.37844276]
[-95.75608826 -26.18054962]
[-89.29875946 -35.67591858]
[-82.38126373 -44.84146881]
[-75.02040863 -53.65491867]
[-67.23408508 -62.09484100]
[-59.04122543 -70.14071655]
[-50.46175003 -77.77299500]
[-41.51651001 -84.97311401]
[-32.22724915 -91.72357941]
[-22.61655235 -98.00797272]
[-12.70778179 -103.81101990]
[-2.52502561 -109.11861420]
[7.90696287 -113.91785431]
[18.56282425 -118.19707489]
[29.41665459 -121.94586945]
[40.44207001 -125.15512085]
[51.61226654 -127.81703949]
[62.90008926 -129.92514038]
[74.27809906 -131.47431946]
[85.71864319 -132.46078491]
[97.19390106 -132.88215637]
[108.67597961 -132.73741150]
[120.13696289 -132.02688599]
[131.54899597 -130.75233459]
[142.88433838 -128.91682434]
[154.11543274 -126.52482605]
[165.21498108 -123.58216095]
[176.15599060 -120.09598541]
[186.91186523 -116.07476807]
[197.45646667 -111.52828217]
[207.76416016 -106.46758270]
[217.80987549 -100.90497589]
[227.56919861 -94.85398102]
[237.01841736 -88.32930756]
[246.13455200 -81.34681702]
[254.89544678 -73.92348480]
[263.27978516 -66.07734680]
[271.26721191 -57.82749176]
[278.83828735 -49.19396210]
[285.97463989 -40.19775391]
[298.23699951 -48.83687210]
[310.49935913 -57.47598648]
[322.76174927 -66.11510468]
[329.15454102 -81.21689606]
[345.46051025 -82.96265411]
[354.90545654 -69.55649567]
[347.77322388 -54.78952408]
[331.40084839 -53.85273361]
[319.13848877 -45.21361923]
[306.87612915 -36.57450485]
[294.61373901 -27.93538666]
[309.34918213 -2.05339050]
[320.66116333 25.49746895]
[328.36471558 54.26665878]
[332.33383179 83.78371429]
[332.50363159 113.56595612]
[328.87133789 143.12635803]
[343.51486206 146.37718201]
[358.15835571 149.62800598]
[372.80184937 152.87882996]
[387.44534302 156.12965393]
[402.08886719 159.38049316]
[415.28424072 150.68234253]
[430.74826050 153.94416809]
[439.30639648 167.23075867]
[435.88125610 182.65943909]
[422.50491333 191.07662964]
[407.11331177 187.48857117]
[398.83804321 174.02398682]
[384.19451904 170.77316284]
[369.55102539 167.52233887]
[354.90753174 164.27151489]
[340.26403809 161.02069092]
[325.62051392 157.76985168]
[321.42785645 172.19195557]
[316.31436157 186.31381226]
[310.30126953 200.07673645]
[303.41360474 213.42346191]
[295.68002319 226.29849243]
[287.13262939 238.64830017]
[277.80703735 250.42150879]
[267.74200439 261.56915283]
[256.97940063 272.04489136]
[245.56394958 281.80514526]
[233.54313660 290.80935669]
[220.96697998 299.02001953]
[207.88775635 306.40301514]
[194.35984802 312.92767334]
[180.43954468 318.56683350]
[166.18470764 323.29702759]
[151.65463257 327.09860229]
[136.90974426 329.95574951]
[122.01135254 331.85659790]
[107.02143097 332.79321289]
[92.00230408 332.76171875]
[77.01644135 331.76223755]
[62.12615967 329.79891968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[93 104]
[94 103]
[95 102]
[96 101]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
