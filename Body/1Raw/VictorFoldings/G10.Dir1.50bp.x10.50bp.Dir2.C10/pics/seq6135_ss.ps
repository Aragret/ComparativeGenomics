%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGxxxxxxxxxxUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.39422607 414.20327759]
[132.39422607 399.20327759]
[132.39422607 384.20327759]
[132.39422607 369.20327759]
[132.39422607 354.20327759]
[132.39422607 339.20327759]
[132.39422607 324.20327759]
[132.39422607 309.20327759]
[132.39422607 294.20327759]
[132.39422607 279.20327759]
[130.44874573 264.32998657]
[126.59062195 249.83464050]
[122.73249817 235.33929443]
[118.87438202 220.84396362]
[115.21706390 217.69392395]
[113.53380585 212.19200134]
[115.16431427 205.69128418]
[111.88923645 191.05319214]
[108.61415863 176.41508484]
[105.33908081 161.77699280]
[102.06400299 147.13890076]
[97.50904083 141.26519775]
[98.87294006 132.17521667]
[95.89141083 117.47452545]
[79.09593964 102.30798340]
[89.49401855 78.29812622]
[80.05809784 66.63778687]
[70.62218475 54.97745132]
[44.35203171 52.20468521]
[32.57407379 29.10652542]
[18.20104790 24.81512833]
[3.82802081 20.52372932]
[-10.54500675 16.23233223]
[-24.91803360 11.94093513]
[-39.29106140 7.64953709]
[-53.66408920 3.35813951]
[-68.03711700 -0.93325794]
[-82.41014099 -5.22465563]
[-96.78316498 -9.51605320]
[-111.15619659 -13.80745029]
[-121.39790344 -2.49064326]
[-135.53877258 3.25378251]
[-150.77113342 2.28526616]
[-164.07058716 -5.20389223]
[-172.79650879 -17.72671509]
[-175.21635437 -32.79678726]
[-170.84968567 -47.42193222]
[-160.56349182 -58.69832230]
[-146.40010071 -64.38701630]
[-131.17167664 -63.35852432]
[-117.90182495 -55.81705093]
[-109.22528839 -43.25996017]
[-106.86479950 -28.18047714]
[-92.49176788 -23.88908005]
[-78.11874390 -19.59768295]
[-63.74571609 -15.30628490]
[-49.37268829 -11.01488781]
[-34.99966431 -6.72348976]
[-20.62663651 -2.43209219]
[-6.25360870 1.85930526]
[8.11941814 6.15070295]
[22.49244499 10.44210052]
[36.86547089 14.73349762]
[40.57085800 10.16727734]
[45.17888260 6.51400328]
[50.46990204 3.94780517]
[49.56998444 -11.02517509]
[48.67007065 -25.99815559]
[47.77015305 -40.97113800]
[33.30495834 -45.56705856]
[21.47925377 -55.08111191]
[13.89237118 -68.22659302]
[11.57037544 -83.22568512]
[14.82729626 -98.04988098]
[23.22266197 -110.69434357]
[35.62106705 -119.44899750]
[50.34573364 -123.12985229]
[65.40526581 -121.23910522]
[78.76298523 -114.03246307]
[88.61237335 -102.48456573]
[93.62138367 -88.15716553]
[93.11258698 -72.98793793]
[87.15478516 -59.02838516]
[76.55373383 -48.16642761]
[62.74313354 -41.87105179]
[63.64305115 -26.89807129]
[64.54296875 -11.92509079]
[65.44287872 3.04788947]
[72.56855774 5.59684229]
[78.74035645 10.04697418]
[83.46021271 16.06721306]
[86.33953857 23.19875336]
[87.13108063 30.88999557]
[85.75004578 38.53919220]
[82.28251648 45.54153442]
[91.71843719 57.20187378]
[101.15435791 68.86221313]
[115.56959534 73.00959015]
[129.75941467 68.14656830]
[143.94923401 63.28355026]
[158.13906860 58.42052841]
[172.32888794 53.55751038]
[159.55891418 45.68807983]
[155.91397095 31.13767242]
[163.46601868 18.17748260]
[177.92208862 14.17474365]
[191.06462097 21.40481758]
[195.42271423 35.75776291]
[188.51945496 49.07424927]
[203.18959045 45.94578934]
[215.00025940 34.56860733]
[230.68145752 39.36773682]
[234.10173035 55.40624619]
[221.74258423 66.18508911]
[206.31805420 60.61591721]
[191.64791870 63.74438095]
[177.19190979 67.74732971]
[163.00207520 72.61035156]
[148.81225586 77.47337341]
[134.62243652 82.33639526]
[120.43261719 87.19940948]
[120.65259552 103.97198486]
[110.59210205 114.49298859]
[113.57363892 129.19369507]
[116.70209503 143.86381531]
[119.97717285 158.50190735]
[123.25225067 173.14001465]
[126.52732849 187.77810669]
[129.80241394 202.41619873]
[133.36972046 216.98583984]
[137.22784424 231.48118591]
[141.08596802 245.97651672]
[144.94407654 260.47186279]
[149.89033508 246.31083679]
[160.08914185 235.31155396]
[173.83680725 229.31141663]
[188.83680725 229.31274414]
[202.58341980 235.31530762]
[212.78028870 246.31639099]
[217.72402954 260.47830200]
[216.58883667 275.43527222]
[209.56430054 288.68881226]
[197.82389832 298.02490234]
[183.32881165 301.88397217]
[168.50042725 299.62139893]
[155.81582642 291.61508179]
[147.39422607 279.20327759]
[147.39422607 294.20327759]
[147.39422607 309.20327759]
[147.39422607 324.20327759]
[147.39422607 339.20327759]
[147.39422607 354.20327759]
[147.39422607 369.20327759]
[147.39422607 384.20327759]
[147.39422607 399.20327759]
[147.39422607 414.20327759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 133]
[12 132]
[13 131]
[14 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[23 124]
[24 123]
[26 97]
[27 96]
[28 95]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[66 88]
[67 87]
[68 86]
[69 85]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
