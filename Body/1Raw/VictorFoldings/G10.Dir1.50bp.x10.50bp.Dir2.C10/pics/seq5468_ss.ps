%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCxxxxxxxxxxUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[197.03256226 88.30593109]
[186.07241821 98.39178467]
[171.02157593 93.51500702]
[156.31361389 96.46048737]
[141.60565186 99.40596771]
[126.89769745 102.35144806]
[112.18973541 105.29693604]
[99.57860565 113.41847229]
[90.81240082 125.59030914]
[82.04618835 137.76214600]
[73.27998352 149.93399048]
[64.51377869 162.10581970]
[65.65979004 178.10789490]
[53.76621628 188.87461853]
[37.95679092 186.14669800]
[30.35914803 172.01675415]
[36.80155182 157.32406616]
[52.34194183 153.33961487]
[61.10814667 141.16778564]
[69.87435150 128.99594116]
[78.64056396 116.82410431]
[87.40676880 104.65226746]
[85.17835999 97.49096680]
[71.64980316 103.97001648]
[58.12124252 110.44906616]
[47.47629547 121.01718140]
[32.48745728 120.43859100]
[22.68887329 109.08131409]
[24.31325150 94.16952515]
[36.32735443 85.18835449]
[51.08917999 87.85055542]
[65.90536499 85.50946045]
[80.72154236 83.16837311]
[78.49314117 76.00707245]
[64.36833191 70.95832062]
[46.36914825 74.70119476]
[35.50139236 60.95739746]
[21.27461243 56.20358276]
[7.04783392 51.44976807]
[-7.17894554 46.69595337]
[-21.40572357 41.94213867]
[-35.63250351 37.18832397]
[-49.65975189 44.46925354]
[-64.70147705 39.61930084]
[-71.83369446 25.51585960]
[-66.82498169 10.52625084]
[-52.64692307 3.54354358]
[-37.71110535 8.71045399]
[-30.87868881 22.96154594]
[-16.65190887 27.71536064]
[-2.42513061 32.46917343]
[11.80164814 37.22298813]
[26.02842712 41.97680283]
[40.25520706 46.73061752]
[51.25651169 41.60435486]
[63.17535400 45.49797058]
[69.41709137 56.83351517]
[83.54189301 61.88227081]
[109.24425507 90.58897400]
[123.95220947 87.64348602]
[138.66017151 84.69800568]
[153.36813354 81.75252533]
[168.07609558 78.80704498]
[180.08825684 68.51050568]
[194.08706665 73.59796906]
[192.19731140 58.71099091]
[191.37440491 43.72713089]
[191.62252808 28.72274017]
[192.94042969 13.77428246]
[195.32138062 -1.04207039]
[198.75326538 -15.65081596]
[203.21858215 -29.97751045]
[208.69459534 -43.94915009]
[215.15336609 -57.49453354]
[222.56201172 -70.54463959]
[230.88276672 -83.03296661]
[240.07324219 -94.89587402]
[250.08657837 -106.07290649]
[260.87176514 -116.50712585]
[272.37387085 -126.14533997]
[284.53424072 -134.93844604]
[297.29092407 -142.84162903]
[310.57888794 -149.81462097]
[324.33047485 -155.82189941]
[338.47558594 -160.83282471]
[352.94210815 -164.82188416]
[367.65637207 -167.76875305]
[382.54336548 -169.65838623]
[397.52722168 -170.48118591]
[412.53161621 -170.23294067]
[427.48007202 -168.91493225]
[442.29638672 -166.53385925]
[456.90512085 -163.10186768]
[471.23178101 -158.63644409]
[485.20336914 -153.16032410]
[498.74871826 -146.70144653]
[511.79876709 -139.29270935]
[524.28704834 -130.97184753]
[536.14984131 -121.78128815]
[547.32684326 -111.76786041]
[557.76092529 -100.98258209]
[567.39910889 -89.48042297]
[576.19207764 -77.31998444]
[584.09515381 -64.56324768]
[591.06805420 -51.27520370]
[597.07525635 -37.52357864]
[602.08605957 -23.37843895]
[606.07501221 -8.91187286]
[609.02172852 5.80240393]
[610.91131592 20.68940926]
[611.73394775 35.67328262]
[611.48559570 50.67766953]
[610.16748047 65.62610626]
[607.78631592 80.44242096]
[604.35418701 95.05111694]
[599.88867188 109.37773895]
[594.41241455 123.34929657]
[587.95343018 136.89457703]
[580.54461670 149.94458008]
[572.22363281 162.43276978]
[563.03302002 174.29553223]
[553.01947021 185.47242737]
[542.23413086 195.90646362]
[530.73187256 205.54450989]
[518.57141113 214.33743286]
[505.81460571 222.24041748]
[492.52648926 229.21321106]
[478.77484131 235.22027588]
[464.62963867 240.23098755]
[450.16305542 244.21981812]
[435.44876099 247.16645813]
[420.56173706 249.05587769]
[405.57785034 249.87843323]
[390.57348633 249.62997437]
[375.62503052 248.31172180]
[360.80874634 245.93043518]
[346.20007324 242.49821472]
[331.87347412 238.03256226]
[317.90197754 232.55624390]
[304.35675049 226.09715271]
[291.30679321 218.68820190]
[278.81866455 210.36715698]
[266.95596313 201.17642212]
[255.77917480 191.16281128]
[245.34519958 180.37738037]
[235.70724487 168.87507629]
[226.91442871 156.71449280]
[219.01153564 143.95764160]
[212.03884888 130.66949463]
[206.03189087 116.91777039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[3 63]
[4 62]
[5 61]
[6 60]
[7 59]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[34 58]
[35 57]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
