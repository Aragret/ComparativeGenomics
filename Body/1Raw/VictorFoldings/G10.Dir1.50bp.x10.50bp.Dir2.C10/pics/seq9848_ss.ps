%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUxxxxxxxxxxGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-26.08865547 280.08297729]
[-35.10618591 292.06979370]
[-44.12371445 304.05664062]
[-53.14124680 316.04348755]
[-62.15877533 328.03030396]
[-71.17630768 340.01715088]
[-79.42859650 352.54309082]
[-86.88350677 365.55941772]
[-94.33841705 378.57571411]
[-101.79332733 391.59204102]
[-101.19541168 407.98028564]
[-115.23094177 416.46179199]
[-129.46136475 408.31149292]
[-129.24765015 391.91375732]
[-114.80963135 384.13711548]
[-107.35472107 371.12081909]
[-99.89981079 358.10449219]
[-92.44490051 345.08819580]
[-107.24268341 347.54293823]
[-119.55306244 338.97238159]
[-122.38677216 324.24246216]
[-114.13497162 311.71618652]
[-99.48264313 308.50537109]
[-86.74871063 316.43298340]
[-83.16313934 330.99960327]
[-74.14560699 319.01278687]
[-65.12807465 307.02593994]
[-56.11054611 295.03912354]
[-47.09301758 283.05227661]
[-38.07548904 271.06546021]
[-47.14269257 263.33172607]
[-55.77747726 255.11802673]
[-63.95447540 246.44847107]
[-71.64965057 237.34854126]
[-78.84039307 227.84498596]
[-85.50556946 217.96571350]
[-91.62558746 207.73977661]
[-97.18247223 197.19721985]
[-102.15988159 186.36903381]
[-106.54319763 175.28701782]
[-110.31953430 163.98374939]
[-113.47779846 152.49246216]
[-116.00869751 140.84690857]
[-117.90480804 129.08131409]
[-119.16054535 117.23024750]
[-119.77223206 105.32855225]
[-119.73806000 93.41120148]
[-119.05813599 81.51321411]
[-117.73445129 69.66955566]
[-115.77090454 57.91502380]
[-113.17325592 46.28417206]
[-109.94915009 34.81118011]
[-106.10805511 23.52975845]
[-101.66125488 12.47306538]
[-96.62183380 1.67359114]
[-91.00458527 -8.83692646]
[-84.82601929 -19.02759933]
[-78.10430145 -28.86848068]
[-70.85917664 -38.33065033]
[-63.11194229 -47.38629913]
[-54.88536072 -56.00881958]
[-46.20361328 -64.17286682]
[-37.09220886 -71.85445404]
[-27.57792473 -79.03100586]
[-17.68872070 -85.68142700]
[-7.45366049 -91.78617859]
[3.09717941 -97.32731628]
[13.93279266 -102.28856659]
[25.02133560 -106.65533447]
[36.33021927 -110.41479492]
[47.82621765 -113.55590057]
[59.47553635 -116.06941986]
[71.24394989 -117.94796753]
[83.09687042 -119.18601990]
[94.99945831 -119.77993774]
[106.91674805 -119.72798157]
[118.81371307 -119.03029633]
[130.65538025 -117.68894196]
[142.40696716 -115.70784760]
[154.03393555 -113.09284973]
[165.50210571 -109.85161591]
[176.77777100 -105.99369049]
[187.82781982 -101.53039551]
[198.61975098 -96.47486115]
[205.80226135 -109.64344025]
[204.86354065 -126.01570129]
[218.71958923 -134.78736877]
[233.11648560 -126.93489075]
[233.24395752 -110.53623962]
[218.97085571 -102.46092987]
[211.78834534 -89.29235077]
[227.67056274 -78.96495056]
[242.60467529 -67.30850220]
[256.47973633 -54.40956879]
[269.19274902 -40.36394501]
[280.64929199 -25.27593422]
[290.76428223 -9.25758457]
[299.46258545 7.57214451]
[306.67959595 25.08827209]
[312.36178589 43.16071701]
[316.46688843 61.65526581]
[318.96441650 80.43457794]
[319.83587646 99.35918427]
[334.82858276 99.82722473]
[349.82128906 100.29527283]
[364.81396484 100.76331329]
[380.79455566 91.67479706]
[395.35723877 101.41792297]
[410.35641479 101.57395935]
[425.35559082 101.72999573]
[436.46978760 90.49386597]
[452.27407837 90.49117279]
[463.39205933 101.72352600]
[463.22766113 117.52695465]
[451.87838745 128.52557373]
[436.07757568 128.19410706]
[425.19955444 116.72918701]
[410.20037842 116.57315063]
[395.20120239 116.41711426]
[386.30523682 124.67357635]
[373.76660156 124.62756348]
[364.34591675 115.75600433]
[349.35324097 115.28796387]
[334.36053467 114.81992340]
[319.36782837 114.35188293]
[317.57055664 131.48463440]
[314.43725586 148.42405701]
[309.98721313 165.06613159]
[304.24771118 181.30867004]
[297.25402832 197.05192566]
[289.04910278 212.19921875]
[279.68331909 226.65756226]
[269.21417236 240.33815002]
[257.70593262 253.15698242]
[245.22932434 265.03536987]
[231.86093140 275.90032959]
[217.68283081 285.68515015]
[202.78208923 294.32980347]
[187.25021362 301.78112793]
[171.18258667 307.99343872]
[154.67784119 312.92852783]
[137.83735657 316.55615234]
[120.76452637 318.85397339]
[103.56418610 319.80792236]
[86.34196472 319.41213989]
[69.20361328 317.66903687]
[52.25436401 314.58932495]
[35.59829712 310.19192505]
[19.33769608 304.50384521]
[3.57240367 297.55996704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 18]
[8 17]
[9 16]
[10 15]
[84 91]
[85 90]
[103 125]
[104 124]
[105 123]
[106 122]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
