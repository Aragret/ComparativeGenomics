%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCxxxxxxxxxxGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[21.59093285 318.52957153]
[9.37149715 313.75131226]
[-2.55850506 308.29043579]
[-14.16097450 302.16433716]
[-21.95473480 314.98065186]
[-29.74849319 327.79693604]
[-37.54225159 340.61322021]
[-45.33601379 353.42950439]
[-45.89546204 369.24081421]
[-59.11924744 376.09509277]
[-66.91300201 388.91137695]
[-64.52685547 404.77597046]
[-75.54772186 416.43444824]
[-91.52133179 414.94342041]
[-100.19410706 401.44665527]
[-94.91303253 386.29772949]
[-79.72929382 381.11761475]
[-71.93553925 368.30133057]
[-71.93354797 353.40670776]
[-58.15230179 345.63574219]
[-50.35854340 332.81945801]
[-42.56478500 320.00317383]
[-34.77102661 307.18688965]
[-26.97726631 294.37060547]
[-48.67708969 278.32070923]
[-68.36759949 259.86090088]
[-85.78268433 239.24061584]
[-100.68698120 216.73854065]
[-112.87907410 192.65879822]
[-122.19418335 167.32681274]
[-128.50640869 141.08491516]
[-131.73046875 114.28778839]
[-146.72404480 114.72676849]
[-161.71762085 115.16574860]
[-176.71119690 115.60472870]
[-185.34907532 128.49530029]
[-199.92572021 133.81515503]
[-214.83612061 129.51872253]
[-224.34693909 117.25804901]
[-224.80104065 101.74761963]
[-216.02384949 88.95150757]
[-201.39035034 83.79008484]
[-186.52742004 88.24802399]
[-177.15017700 100.61115265]
[-162.15660095 100.17217255]
[-147.16302490 99.73319244]
[-132.16944885 99.29421234]
[-131.87164307 88.22315979]
[-131.04620361 77.17890930]
[-129.69502258 66.18659210]
[-127.82117462 55.27121353]
[-125.42891693 44.45761490]
[-122.52368927 33.77040482]
[-119.11211395 23.23389816]
[-115.20194244 12.87207413]
[-110.80208588 2.70851016]
[-105.92254639 -7.23366642]
[-100.57442474 -16.93183327]
[-94.76989746 -26.36392021]
[-88.52217102 -35.50846481]
[-81.84545898 -44.34466171]
[-74.75495911 -52.85240173]
[-67.26680756 -61.01232529]
[-59.39803696 -68.80586243]
[-51.16655350 -76.21528625]
[-42.59109116 -83.22372437]
[-33.69116211 -89.81523895]
[-24.48702049 -95.97483063]
[-14.99960613 -101.68848419]
[-5.25051069 -106.94319153]
[4.73808336 -111.72699738]
[14.94344521 -116.02901459]
[25.34235382 -119.83946228]
[35.91114807 -123.14966583]
[46.62577438 -125.95208740]
[57.46185303 -128.24035645]
[68.39472961 -130.00926208]
[79.39952087 -131.25477600]
[90.45119476 -131.97407532]
[101.52459717 -132.16552734]
[112.59452057 -131.82867432]
[123.63579559 -130.96429443]
[134.62327576 -129.57435608]
[145.53198242 -127.66201019]
[156.33708191 -125.23162842]
[167.01397705 -122.28873444]
[177.53837585 -118.84001160]
[187.88635254 -114.89332581]
[198.03433228 -110.45764923]
[207.95924377 -105.54307556]
[217.63848877 -100.16078186]
[227.05004883 -94.32302856]
[236.17250061 -88.04309082]
[244.98509216 -81.33525848]
[253.46777344 -74.21479797]
[261.60122681 -66.69791412]
[269.36697388 -58.80170441]
[276.74731445 -50.54414368]
[288.47479248 -59.89648819]
[300.20227051 -69.24883270]
[311.92974854 -78.60118103]
[317.41406250 -94.05609131]
[333.58752441 -96.76747894]
[343.81222534 -83.94610596]
[337.56988525 -68.78150177]
[321.28207397 -66.87371063]
[309.55459595 -57.52136612]
[297.82714844 -48.16901779]
[286.09967041 -38.81666946]
[295.48364258 -25.25693703]
[303.88146973 -11.06532097]
[311.25076294 3.68658638]
[317.55435181 18.92436600]
[322.76043701 34.57114792]
[326.84280396 50.54800034]
[329.78079224 66.77432251]
[331.55960083 83.16825867]
[332.17025757 99.64710236]
[331.60968018 116.12773132]
[329.88073730 132.52699280]
[326.99206543 148.76217651]
[341.54809570 152.38468933]
[356.10409546 156.00721741]
[370.66009521 159.62973022]
[385.21609497 163.25224304]
[402.04660034 161.21003723]
[408.66815186 176.81745911]
[395.50369263 187.50079346]
[381.59359741 177.80825806]
[367.03759766 174.18572998]
[352.48156738 170.56321716]
[337.92556763 166.94070435]
[323.36956787 163.31819153]
[319.43606567 175.83512878]
[314.80178833 188.10987854]
[309.48147583 200.10324097]
[303.49218750 211.77691650]
[296.85302734 223.09361267]
[289.58517456 234.01719666]
[281.71188354 244.51278687]
[273.25827026 254.54684448]
[264.25131226 264.08734131]
[254.71981812 273.10382080]
[244.69419861 281.56747437]
[234.20648193 289.45123291]
[223.29016113 296.72998047]
[211.98008728 303.38046265]
[200.31240845 309.38140869]
[188.32435608 314.71368408]
[176.05424500 319.36022949]
[163.54124451 323.30621338]
[150.82530212 326.53906250]
[137.94705200 329.04840088]
[124.94760895 330.82626343]
[111.86849976 331.86697388]
[98.75148773 332.16717529]
[85.63845825 331.72592163]
[72.57128906 330.54461670]
[59.59172440 328.62704468]
[46.74120712 325.97930908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[10 18]
[11 17]
[32 47]
[33 46]
[34 45]
[35 44]
[98 109]
[99 108]
[100 107]
[101 106]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
