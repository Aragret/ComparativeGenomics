%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAxxxxxxxxxxCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.99623871 465.05764771]
[82.99623871 450.05764771]
[82.99623871 435.05764771]
[82.99623871 420.05764771]
[82.99623871 405.05764771]
[82.99623871 390.05764771]
[82.99623871 375.05764771]
[82.99623871 360.05764771]
[82.99623871 345.05764771]
[82.99623871 330.05764771]
[69.35903931 327.53427124]
[56.37678528 322.64495850]
[44.45660782 315.54165649]
[33.97256088 306.44570923]
[25.25391769 295.64111328]
[18.57480240 283.46539307]
[14.14558601 270.29940796]
[12.10625553 256.55505371]
[12.52199268 242.66276550]
[15.38108921 229.05767822]
[20.59527206 216.16625977]
[28.00242996 204.39282227]
[37.37165070 194.10682678]
[48.41042709 185.63139343]
[60.77377701 179.23303223]
[74.07502747 175.11335754]
[87.89792633 173.40263367]
[88.83355713 158.43183899]
[89.76918793 143.46104431]
[90.70481110 128.49026489]
[76.10685730 120.55906677]
[67.37943268 105.45333099]
[67.83463287 87.18074799]
[78.20184326 71.12599182]
[65.76239777 62.74385071]
[53.32295990 54.36170578]
[40.88351822 45.97956467]
[28.44407845 37.59741974]
[17.36663628 42.12104797]
[5.60464954 40.71942139]
[-3.90443134 33.86003494]
[-8.84282970 23.35861015]
[-8.07692242 11.89982033]
[-20.15690994 3.00747108]
[-32.23690033 -5.88487864]
[-45.02677155 2.28724456]
[-59.90585709 5.28345346]
[-74.86187744 2.69853544]
[-87.87216187 -5.11792088]
[-97.17716980 -17.10880280]
[-101.51847839 -31.65244484]
[-100.30895996 -46.78193665]
[-93.71218872 -60.45113754]
[-82.62033081 -70.81140137]
[-68.53346252 -76.46159363]
[-53.35671997 -76.63755798]
[-39.14263535 -71.31551361]
[-27.81354332 -61.21520996]
[-20.90161133 -47.70263672]
[-19.34162140 -32.60525513]
[-23.34454918 -17.96486664]
[-11.26456165 -9.07251740]
[0.81542706 -0.18016760]
[18.66017723 -4.04828596]
[33.96443176 6.48154020]
[36.82622147 25.15797997]
[49.26566315 33.54012299]
[61.70510483 41.92226410]
[74.14454651 50.30440903]
[86.58398438 58.68655396]
[79.68595886 45.36674500]
[68.72199249 35.12998199]
[63.55048370 21.04965591]
[65.28218079 6.14995098]
[73.54514313 -6.36897278]
[86.56465149 -13.81829548]
[101.54436493 -14.59804821]
[115.26694489 -8.54075527]
[124.78504944 3.05259442]
[128.05436707 17.69197845]
[124.37271881 32.23314285]
[114.53117371 43.55270004]
[109.05355835 57.51678467]
[120.55535889 47.88825989]
[132.05715942 38.25973129]
[143.55895996 28.63120651]
[144.76417542 11.21038914]
[157.91619873 0.24188270]
[174.60057068 2.11002302]
[185.89956665 -7.75570011]
[197.19857788 -17.62142372]
[208.49757385 -27.48714638]
[208.00946045 -43.11710739]
[217.72283936 -55.37207413]
[233.05137634 -58.46561813]
[246.75740051 -50.93706512]
[252.36933899 -36.34116745]
[247.23741150 -21.56966591]
[233.78474426 -13.59720516]
[218.36329651 -16.18814087]
[207.06430054 -6.32241821]
[195.76528931 3.54330492]
[184.46629333 13.40902805]
[185.39675903 26.29821014]
[178.61524963 37.52698898]
[166.41717529 42.85941315]
[153.18748474 40.13301086]
[141.68568420 49.76153564]
[130.18388367 59.39006042]
[118.68208313 69.01858521]
[127.79175568 82.07073212]
[129.76083374 96.48028564]
[144.62387085 98.50262451]
[159.48692322 100.52495575]
[174.45166016 93.81759644]
[187.58245850 103.64174652]
[185.37149048 119.89116669]
[170.09320068 125.84984589]
[157.46458435 115.38800049]
[142.60154724 113.36566925]
[127.73849487 111.34333801]
[122.55245209 119.73530579]
[114.92255402 125.98870087]
[105.67560577 129.42588806]
[104.73997498 144.39668274]
[103.80435181 159.36746216]
[102.86872101 174.33825684]
[118.51760101 178.54409790]
[132.96861267 185.86355591]
[145.60998535 195.98435974]
[155.90711975 208.47572327]
[163.42504883 222.80662537]
[167.84693909 238.36845398]
[168.98738098 254.50080872]
[166.80018616 270.51953125]
[161.38020325 285.74569702]
[152.95928955 299.53448486]
[141.89633179 311.30236816]
[128.66194153 320.55187988]
[113.81851196 326.89257812]
[97.99623871 330.05764771]
[97.99623871 345.05764771]
[97.99623871 360.05764771]
[97.99623871 375.05764771]
[97.99623871 390.05764771]
[97.99623871 405.05764771]
[97.99623871 420.05764771]
[97.99623871 435.05764771]
[97.99623871 450.05764771]
[97.99623871 465.05764771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 127]
[28 126]
[29 125]
[30 124]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[43 63]
[44 62]
[45 61]
[83 110]
[84 109]
[85 108]
[86 107]
[89 103]
[90 102]
[91 101]
[92 100]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
