%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGAUUCUUUACCUUUCACUUxxxxxxxxxxUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.29438782 300.45526123]
[111.29438782 285.45526123]
[111.29438782 270.45526123]
[111.29438782 255.45524597]
[111.29438782 240.45524597]
[111.29438782 225.45524597]
[111.29438782 210.45524597]
[111.29438782 195.45524597]
[111.29438782 180.45524597]
[111.29438782 165.45524597]
[109.02297211 150.62823486]
[104.38771820 136.36238098]
[99.60813141 122.14424133]
[94.82854462 107.92609406]
[90.72863007 104.55330658]
[88.84123230 99.10913849]
[90.15608215 93.03388214]
[85.95661926 78.63372803]
[81.75715637 64.23356628]
[77.55769348 49.83341217]
[73.35823822 35.43325806]
[69.15877533 21.03310013]
[64.95931244 6.63294268]
[60.75984955 -7.76721430]
[56.41467285 -22.12407494]
[51.92422485 -36.43616486]
[37.84092712 -37.94752884]
[25.44023514 -44.70171356]
[16.58593750 -55.64585114]
[12.59436989 -69.10022736]
[14.03878593 -83.01606750]
[20.66728783 -95.28748322]
[31.44599724 -104.07017517]
[27.24653435 -118.47032928]
[23.04707146 -132.87048340]
[12.10577297 -139.77285767]
[8.92600346 -151.89779663]
[14.69113827 -162.57400513]
[10.78438663 -177.05632019]
[6.87763405 -191.53862000]
[2.97088170 -206.02093506]
[-11.84954739 -203.62115479]
[-26.83817482 -202.75798035]
[-41.83611298 -203.44053650]
[-56.68437576 -205.66160583]
[-71.22556305 -209.39764404]
[-85.30552673 -214.60903931]
[-98.77501678 -221.24053955]
[-111.49124146 -229.22187805]
[-123.31941223 -238.46841431]
[-134.13414001 -248.88214111]
[-143.82077026 -260.35266113]
[-152.27664185 -272.75839233]
[-159.41210938 -285.96783447]
[-165.15151978 -299.84094238]
[-169.43403625 -314.23068237]
[-172.21427917 -328.98446655]
[-173.46275330 -343.94592285]
[-173.16624451 -358.95645142]
[-171.32788086 -373.85693359]
[-167.96716309 -388.48944092]
[-163.11970520 -402.69879150]
[-156.83689880 -416.33441162]
[-149.18533325 -429.25177002]
[-140.24613953 -441.31390381]
[-130.11407471 -452.39294434]
[-118.89653015 -462.37142944]
[-106.71242523 -471.14364624]
[-93.69091797 -478.61657715]
[-79.97004700 -484.71096802]
[-65.69525909 -489.36224365]
[-51.01787567 -492.52111816]
[-36.09348297 -494.15405273]
[-21.08028984 -494.24380493]
[-6.13744450 -492.78936768]
[8.57665157 -489.80618286]
[22.90602112 -485.32586670]
[36.69876099 -479.39590454]
[49.80866623 -472.07919312]
[62.09675980 -463.45324707]
[73.43278503 -453.60955811]
[83.69657135 -442.65240479]
[92.77931213 -430.69799805]
[100.58473206 -417.87304688]
[107.03009033 -404.31350708]
[112.04705811 -390.16308594]
[115.58245087 -375.57183838]
[117.59880066 -360.69439697]
[118.07472229 -345.68847656]
[117.00518036 -330.71316528]
[114.40150452 -315.92718506]
[110.29129791 -301.48730469]
[104.71813202 -287.54656982]
[97.74108124 -274.25277710]
[89.43411255 -261.74685669]
[79.88528442 -250.16134644]
[69.19581604 -239.61909485]
[57.47902298 -230.23182678]
[44.85910797 -222.09906006]
[31.46985435 -215.30702209]
[17.45319176 -209.92768860]
[21.35994339 -195.44537354]
[25.26669502 -180.96307373]
[29.17344856 -166.48075867]
[42.25262070 -154.81785583]
[37.44722748 -137.06994629]
[41.64669037 -122.66979218]
[45.84615326 -108.26963806]
[61.63048553 -105.95848083]
[74.88284302 -96.97418213]
[82.93187714 -83.06668854]
[84.12857819 -66.98431396]
[78.18386841 -51.93069839]
[66.23631287 -40.92660904]
[70.72676086 -26.61452103]
[75.75948334 -21.14174271]
[75.16000366 -11.96667671]
[79.35946655 2.43348026]
[83.55892944 16.83363724]
[87.75839233 31.23379326]
[91.95785522 45.63394928]
[96.15731812 60.03410721]
[100.35678101 74.43426514]
[104.55624390 88.83441925]
[109.04668427 103.14650726]
[113.82627106 117.36465454]
[118.60585785 131.58279419]
[124.33931732 138.77088928]
[123.33506012 146.13778687]
[127.29132080 131.66891479]
[136.12763977 119.54788208]
[148.69227600 111.35459137]
[163.34748840 108.15696716]
[178.18305969 110.37182617]
[191.26528931 117.71044922]
[200.88896179 129.21630859]
[205.79969788 143.38969421]
[205.35743713 158.38316345]
[199.61978149 172.24244690]
[189.33464050 183.16104126]
[175.84259033 189.71578979]
[160.90226746 191.05232239]
[146.46101379 186.99642944]
[134.40116882 178.07676697]
[126.29438782 165.45524597]
[126.29438782 180.45524597]
[126.29438782 195.45524597]
[126.29438782 210.45524597]
[126.29438782 225.45524597]
[126.29438782 240.45524597]
[126.29438782 255.45524597]
[126.29438782 270.45526123]
[126.29438782 285.45526123]
[126.29438782 300.45526123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 129]
[12 127]
[13 126]
[14 125]
[17 124]
[18 123]
[19 122]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 115]
[26 114]
[33 108]
[34 107]
[35 106]
[38 104]
[39 103]
[40 102]
[41 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
