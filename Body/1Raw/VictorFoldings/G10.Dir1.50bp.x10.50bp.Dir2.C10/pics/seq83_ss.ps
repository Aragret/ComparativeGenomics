%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUxxxxxxxxxxGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[153.53292847 316.87649536]
[153.22087097 301.87973022]
[152.90881348 286.88296509]
[152.59675598 271.88623047]
[152.28469849 256.88946533]
[151.97264099 241.89271545]
[151.66058350 226.89596558]
[151.34852600 211.89920044]
[151.03646851 196.90245056]
[147.17932129 182.40686035]
[139.99681091 169.23828125]
[125.67955780 165.29469299]
[118.20787811 152.04219055]
[122.44134521 137.05168152]
[115.25883484 123.88309479]
[85.01170349 124.01239777]
[71.91162872 96.79061127]
[56.91893387 96.32256317]
[41.92623901 95.85452271]
[26.93354416 95.38648224]
[24.00003242 110.13247681]
[18.67927933 124.19445801]
[11.11643314 137.18881226]
[1.51781809 148.76104736]
[-9.85471058 158.59544373]
[-22.69090080 166.42373657]
[-36.64057541 172.03233337]
[-51.32316971 175.26826477]
[-66.33814240 176.04322815]
[-81.27586365 174.33609009]
[-95.72882080 170.19342041]
[-109.30274200 163.72822571]
[-121.62730408 155.11689758]
[-132.36628723 144.59436035]
[-141.22673035 132.44764709]
[-147.96691895 119.00817108]
[-152.40295410 104.64253235]
[-154.41384888 89.74266052]
[-153.94471741 74.71502686]
[-151.00836182 59.96960068]
[-145.68489075 45.90863800]
[-138.11955261 32.91574097]
[-128.51870728 21.34536362]
[-117.14427948 11.51315403]
[-104.30657959 3.68734050]
[-90.35582733 -1.91858172]
[-75.67260742 -5.15167904]
[-60.65749359 -5.92375040]
[-45.72010040 -4.21373320]
[-31.26793480 -0.06827788]
[-17.69526482 6.39952469]
[-5.37235928 15.01322842]
[5.36460114 25.53784370]
[14.22270584 37.68625259]
[20.96029854 51.12703705]
[25.39357185 65.49352264]
[27.40158653 80.39378357]
[42.39428329 80.86182404]
[57.38697815 81.32987213]
[72.37967682 81.79791260]
[83.25849915 71.47070312]
[83.57055664 56.47395325]
[83.88261414 41.47719955]
[84.19467163 26.48044586]
[69.66564941 22.43587685]
[56.59934998 14.90444183]
[45.81711197 4.35957527]
[37.99672699 -8.53586578]
[33.62978745 -22.97126198]
[32.99080276 -38.03919220]
[36.11994171 -52.79247284]
[42.82049942 -66.30370331]
[52.67127991 -77.72354889]
[65.05304718 -86.33415985]
[79.18748474 -91.59426117]
[94.18607330 -93.17319489]
[109.10600281 -90.97171021]
[123.00939178 -85.12818909]
[135.02224731 -76.00997162]
[144.38945007 -64.19023132]
[150.52217102 -50.41196060]
[153.03488159 -35.54128265]
[151.76965332 -20.51297760]
[146.80599976 -6.27173471]
[138.45594788 6.28722763]
[127.24440002 16.37444115]
[113.87610626 23.35581779]
[99.19142151 26.79250145]
[98.87936401 41.78925705]
[98.56730652 56.78601074]
[98.25525665 71.78276062]
[114.91733551 75.94345856]
[126.11611938 88.99170685]
[139.50241089 82.22358704]
[152.88868713 75.45547485]
[166.27497864 68.68736267]
[179.59013367 61.78036118]
[192.83271790 54.73522568]
[206.07530212 47.69009018]
[214.29864502 33.50176620]
[230.69508362 33.79980469]
[238.39736938 48.27761078]
[229.48204041 62.04166031]
[213.12043762 60.93267822]
[199.87785339 67.97781372]
[186.63526917 75.02294922]
[182.17846680 80.97967529]
[173.04309082 82.07364655]
[159.65679932 88.84175873]
[146.27052307 95.60987091]
[132.88423157 102.37799072]
[128.42741394 116.70058441]
[135.60992432 129.86917114]
[150.50523376 134.42631531]
[157.60173035 147.88345337]
[153.16539001 162.05577087]
[160.34790039 175.22434998]
[161.03067017 160.23989868]
[165.35075378 145.87545776]
[173.04675293 133.00022888]
[183.65298462 122.39324951]
[196.52766418 114.69634247]
[210.89178467 110.37523651]
[225.87619019 109.69139862]
[240.57418823 112.68619537]
[254.09643555 119.17842865]
[265.62469482 128.77526855]
[274.46142578 140.89599609]
[280.07192993 154.80722046]
[282.11669922 169.66720581]
[280.47204590 184.57676697]
[275.23745728 198.63375854]
[266.72967529 210.98760986]
[255.46351624 220.89082336]
[242.12065125 227.74414062]
[227.50845337 231.13288879]
[212.51107788 230.85202026]
[198.03601074 226.91853333]
[184.95910645 219.57043457]
[174.07164001 209.25234985]
[166.03323364 196.59039307]
[166.34529114 211.58715820]
[166.65734863 226.58390808]
[166.96939087 241.58065796]
[167.28144836 256.57742310]
[167.59350586 271.57415771]
[167.90556335 286.57092285]
[168.21762085 301.56768799]
[168.52967834 316.56442261]
[171.12068176 335.77215576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 117]
[11 116]
[14 113]
[15 112]
[17 60]
[18 59]
[19 58]
[20 57]
[61 91]
[62 90]
[63 89]
[64 88]
[93 111]
[94 110]
[95 109]
[96 108]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
