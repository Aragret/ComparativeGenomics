%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCxxxxxxxxxxAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.48398495 241.68815613]
[-24.53732681 233.80036926]
[-35.19895172 244.35165405]
[-45.86058044 254.90293884]
[-50.22682953 270.10974121]
[-64.71562195 273.56286621]
[-75.37725067 284.11416626]
[-86.03887939 294.66543579]
[-96.70050812 305.21673584]
[-107.36212921 315.76803589]
[-118.02375793 326.31930542]
[-111.93855286 340.22381592]
[-111.29106140 355.38775635]
[-116.16884613 369.76034546]
[-125.91222382 381.39782715]
[-139.20349121 388.72631836]
[-154.24510193 390.75469971]
[-169.00280762 387.20864868]
[-181.48074341 378.56774902]
[-189.99139404 366.00057983]
[-193.38374329 351.20678711]
[-191.19898987 336.18707275]
[-183.73263550 322.97277832]
[-171.99443054 313.35098267]
[-157.57186890 308.62298584]
[-142.41548157 309.42816162]
[-128.57504272 315.65768433]
[-117.91342163 305.10638428]
[-107.25179291 294.55511475]
[-96.59017181 284.00381470]
[-85.92854309 273.45251465]
[-75.26691437 262.90124512]
[-71.66325378 248.44914246]
[-56.41186905 244.24131775]
[-45.75024414 233.69003296]
[-35.08861542 223.13873291]
[-52.24682999 201.15821838]
[-65.86203766 176.82360840]
[-75.61740112 150.70120239]
[-81.28588867 123.39890289]
[-82.73560333 95.55207825]
[-79.93278503 67.80876923]
[-72.94268036 40.81458664]
[-61.92794800 15.19773960]
[-47.14491653 -8.44563866]
[-58.84454346 -17.83279991]
[-70.54416656 -27.21996117]
[-82.24378967 -36.60712433]
[-96.24720001 -30.42950058]
[-111.51670074 -31.47876740]
[-124.54347229 -39.51380920]
[-132.33404541 -52.68823242]
[-133.09822083 -67.97465515]
[-126.66039276 -81.86035919]
[-114.49991608 -91.15452576]
[-99.41118622 -93.72140503]
[-84.86148834 -88.97116852]
[-74.19422913 -77.99536896]
[-69.86067200 -63.31617355]
[-72.85662842 -48.30674744]
[-61.15700150 -38.91958618]
[-49.45737839 -29.53242302]
[-37.75775528 -20.14526176]
[-30.22135353 -28.27502632]
[-22.20599556 -35.93299103]
[-13.74115849 -43.09099197]
[-4.85798073 -49.72270203]
[4.41086817 -55.80372620]
[14.03129578 -61.31170273]
[23.96791840 -66.22637177]
[34.18418884 -70.52965546]
[44.64253235 -74.20572662]
[55.30447769 -77.24105835]
[66.13082123 -79.62450409]
[77.08172607 -81.34728241]
[88.11693573 -82.40306091]
[99.19584656 -82.78795624]
[110.27771759 -82.50055695]
[121.32178497 -81.54190826]
[132.28742981 -79.91555023]
[143.13432312 -77.62745667]
[153.82255554 -74.68605042]
[164.31283569 -71.10213470]
[174.56657410 -66.88890839]
[184.54606628 -62.06186295]
[194.21458435 -56.63874435]
[202.46687317 -69.16471100]
[202.89233398 -85.55833435]
[217.42956543 -93.14785767]
[231.12391663 -84.12582397]
[229.88778687 -67.77333069]
[214.99282837 -60.91241837]
[206.74053955 -48.38645554]
[214.24780273 -42.68680191]
[221.45126343 -36.60773087]
[228.33178711 -30.16541290]
[234.87106323 -23.37697601]
[241.05171204 -16.26047134]
[246.85729980 -8.83482075]
[252.27236938 -1.11977172]
[257.28253174 6.86416197]
[261.87448120 15.09574986]
[266.03601074 23.55310440]
[269.75601196 32.21373749]
[273.02462769 41.05461884]
[275.83316040 50.05223846]
[278.17416382 59.18267441]
[280.04135132 68.42164612]
[281.42980957 77.74458313]
[282.33584595 87.12670135]
[282.75701904 96.54305267]
[282.69226074 105.96859741]
[282.14169312 115.37826538]
[281.10678101 124.74704742]
[295.87283325 127.38591003]
[311.10363770 121.30686188]
[323.81442261 131.66873169]
[320.92941284 147.81211853]
[305.41647339 153.13008118]
[293.23397827 142.15196228]
[278.46792603 139.51309204]
[275.48861694 151.14512634]
[271.75207520 162.55644226]
[267.27435303 173.69783020]
[262.07482910 184.52119446]
[256.17590332 194.97981262]
[249.60307312 205.02859497]
[242.38465881 214.62414551]
[234.55181885 223.72506714]
[226.13835144 232.29209900]
[217.18058777 240.28825378]
[207.71716309 247.67903137]
[197.78890991 254.43255615]
[187.43867493 260.51965332]
[176.71112061 265.91409302]
[165.65255737 270.59255981]
[154.31066895 274.53491211]
[142.73443604 277.72409058]
[130.97378540 280.14636230]
[119.07948303 281.79125977]
[107.10284424 282.65167236]
[95.09555817 282.72390747]
[83.10942841 282.00765991]
[71.19618988 280.50601196]
[59.40724945 278.22546387]
[47.79347229 275.17581177]
[36.40497589 271.37023926]
[25.29090691 266.82516479]
[14.49922371 261.56021118]
[4.07649374 255.59808350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[45 63]
[46 62]
[47 61]
[48 60]
[86 93]
[87 92]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
