%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUxxxxxxxxxxCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.97259521 264.70516968]
[74.97259521 249.70516968]
[74.97259521 234.70516968]
[74.97259521 219.70516968]
[74.97259521 204.70516968]
[74.97259521 189.70516968]
[74.97259521 174.70516968]
[74.97259521 159.70516968]
[74.97259521 144.70516968]
[74.97259521 129.70516968]
[73.45463562 116.11967468]
[77.29503632 105.09658813]
[84.60034943 98.39087677]
[93.00057220 96.79807281]
[84.48947906 84.44650269]
[75.97839355 72.09492493]
[67.08604431 60.01494217]
[57.69887924 48.31531525]
[48.19052124 36.71397400]
[38.68216324 25.11263466]
[29.17380333 13.51129246]
[19.66544533 1.90995169]
[6.97233295 6.53298330]
[-6.50548410 7.00089312]
[-19.44470787 3.28189349]
[-30.57930374 -4.24541235]
[-38.82436371 -14.83052444]
[-43.38182068 -27.42585564]
[-43.81767654 -40.79039764]
[-40.10329056 -53.61199951]
[-32.61680222 -64.63619995]
[-41.63433075 -76.62303162]
[-50.65186310 -88.60986328]
[-59.66939163 -100.59669495]
[-72.65355682 -93.05032349]
[-86.43914032 -87.09262848]
[-100.83261108 -82.80725098]
[-115.63190460 -80.25435638]
[-130.62925720 -79.46977997]
[-145.61415100 -80.46453857]
[-160.37619019 -83.22466278]
[-174.70817566 -87.71140289]
[-188.40887451 -93.86177826]
[-201.28596497 -101.58943939]
[-213.15867615 -110.78591156]
[-223.86033630 -121.32209015]
[-233.24069214 -133.05004883]
[-241.16807556 -145.80517578]
[-247.53118896 -159.40837097]
[-252.24072266 -173.66868591]
[-255.23052979 -188.38594055]
[-256.45867920 -203.35350037]
[-255.90788269 -218.36126709]
[-253.58590698 -233.19854736]
[-249.52534485 -247.65704346]
[-243.78318787 -261.53378296]
[-236.44004822 -274.63397217]
[-227.59902954 -286.77368164]
[-217.38421631 -297.78250122]
[-205.93904114 -307.50588989]
[-193.42414856 -315.80734253]
[-180.01525879 -322.57031250]
[-165.90057373 -327.69985962]
[-151.27827454 -331.12396240]
[-136.35360718 -332.79458618]
[-121.33612061 -332.68823242]
[-106.43662262 -330.80645752]
[-91.86426544 -327.17562866]
[-77.82364655 -321.84671021]
[-64.51185608 -314.89453125]
[-52.11577988 -306.41671753]
[-40.80943680 -296.53222656]
[-30.75155067 -285.37985229]
[-22.08331871 -273.11618042]
[-14.92642784 -259.91333008]
[-9.38135147 -245.95664978]
[-5.52593327 -231.44210815]
[-3.41429639 -216.57344055]
[-3.07608604 -201.55937195]
[-4.51604986 -186.61070251]
[-7.71397257 -171.93727112]
[-12.62496090 -157.74507141]
[-19.18007278 -144.23333740]
[-27.28728294 -131.59176636]
[-36.83277893 -119.99780273]
[-47.68255997 -109.61422729]
[-38.66502762 -97.62739563]
[-29.64749908 -85.64056396]
[-20.62997055 -73.65373230]
[-4.66627836 -78.18940735]
[11.85456944 -76.26866913]
[26.41580772 -68.15593719]
[36.78842163 -55.06104660]
[41.37234116 -38.95890808]
[39.44323349 -22.29169083]
[31.26678658 -7.59840679]
[40.77514648 4.00293446]
[50.28350449 15.60427570]
[59.79186249 27.20561600]
[69.30021667 38.80695724]
[76.01613617 42.00729370]
[78.88268280 50.74999237]
[82.38674164 51.51749039]
[85.67927551 54.05931854]
[87.91242981 58.25043106]
[88.32996368 63.58383942]
[96.84105682 75.93540955]
[105.35214233 88.28697968]
[117.61450958 96.92610168]
[132.11010742 100.78325653]
[146.60569763 104.64041901]
[141.80807495 90.42835236]
[149.74815369 77.70218658]
[164.62236023 75.76371765]
[175.55888367 86.02980804]
[174.56398010 100.99678040]
[162.36552429 109.72486877]
[176.38223267 115.06637573]
[190.39894104 120.40789032]
[205.56822205 115.18557739]
[219.03126526 123.91060638]
[220.46037292 139.88987732]
[208.75926208 150.86546326]
[192.90402222 148.41784668]
[185.05743408 134.42460632]
[171.04072571 129.08309937]
[157.02400208 123.74157715]
[142.74855042 119.13601685]
[128.25294495 115.27885437]
[113.75735474 111.42169952]
[107.81116486 115.99256134]
[118.68302155 126.32709503]
[129.55488586 136.66163635]
[141.72898865 145.42469788]
[141.96498108 160.42285156]
[130.07261658 169.56459045]
[115.63948059 165.47988892]
[110.30155182 151.46177673]
[103.11016846 138.29803467]
[95.91878510 125.13430023]
[89.97259521 129.70516968]
[89.97259521 144.70516968]
[89.97259521 159.70516968]
[89.97259521 174.70516968]
[89.97259521 189.70516968]
[89.97259521 204.70516968]
[89.97259521 219.70516968]
[89.97259521 234.70516968]
[89.97259521 249.70516968]
[89.97259521 264.70516968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 108]
[15 107]
[16 106]
[17 102]
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[31 89]
[32 88]
[33 87]
[34 86]
[109 130]
[110 129]
[111 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
