%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAxxxxxxxxxxCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.23751831 393.92135620]
[108.23751831 378.92135620]
[108.23751831 363.92135620]
[108.23751831 348.92135620]
[108.23751831 333.92135620]
[108.23751831 318.92135620]
[108.23751831 303.92135620]
[108.23751831 288.92135620]
[108.23751831 273.92135620]
[108.23751831 258.92135620]
[93.77265930 255.08502197]
[80.78379822 247.62939453]
[70.15933228 237.05749512]
[62.62772369 224.08570862]
[58.70757675 209.59526062]
[58.67190933 194.57235718]
[62.52915955 180.04103088]
[70.02220154 166.99339294]
[80.64546204 156.32182312]
[93.67904663 148.75802612]
[108.23751831 144.82278442]
[108.23751831 129.82278442]
[102.38770294 125.12920380]
[88.40848541 130.56808472]
[90.68807983 115.74204254]
[84.83827209 111.04846191]
[70.19477081 114.29928589]
[55.55126572 117.55010986]
[40.90776443 120.80093384]
[32.63246536 134.26551819]
[17.24086761 137.85357666]
[3.86452842 129.43638611]
[0.43939584 114.00771332]
[8.99753952 100.72111511]
[24.46156502 97.45929718]
[37.65694046 106.15743256]
[52.30044174 102.90660858]
[66.94393921 99.65578461]
[81.58744049 96.40496063]
[92.67875671 86.30631256]
[97.28432465 72.03084564]
[94.15792847 56.52161789]
[105.42924500 46.78474808]
[110.03481293 32.50928879]
[114.64037323 18.23382759]
[111.51397705 2.72459841]
[122.78530121 -7.01227045]
[127.39086151 -21.28773117]
[131.84768677 -35.61032867]
[136.15525818 -49.97851181]
[140.46284485 -64.34669495]
[139.29617310 -70.96080017]
[141.37571716 -76.33731079]
[145.26004028 -79.21612549]
[150.16159058 -93.39268494]
[155.06314087 -107.56923676]
[141.50971985 -114.03334808]
[128.76527405 -121.97433472]
[116.99010468 -131.29234314]
[106.33227539 -141.87017822]
[96.92583466 -153.57482910]
[88.88906097 -166.25909424]
[82.32304382 -179.76344299]
[77.31034851 -193.91804504]
[73.91401672 -208.54490662]
[72.17676544 -223.46006775]
[72.12042999 -238.47595215]
[73.74572754 -253.40371704]
[77.03221893 -268.05563354]
[81.93856812 -282.24746704]
[88.40308380 -295.80068970]
[96.34445190 -308.54489136]
[105.66281128 -320.31979370]
[116.24097443 -330.97729492]
[127.94590759 -340.38339233]
[140.63040161 -348.41979980]
[154.13494873 -354.98541260]
[168.28970337 -359.99768066]
[182.91665649 -363.39358521]
[197.83187866 -365.13037109]
[212.84776306 -365.18627930]
[227.77548218 -363.56051636]
[242.42730713 -360.27359009]
[256.61898804 -355.36682129]
[270.17202759 -348.90188599]
[282.91598511 -340.96014404]
[294.69061279 -331.64141846]
[305.34780884 -321.06295776]
[314.75354004 -309.35775757]
[322.78955078 -296.67300415]
[329.35476685 -283.16827393]
[334.36660767 -269.01336670]
[337.76205444 -254.38629150]
[339.49844360 -239.47103882]
[339.55386353 -224.45513916]
[337.92767334 -209.52746582]
[334.64031982 -194.87573242]
[329.73309326 -180.68421936]
[323.26779175 -167.13136292]
[315.32565308 -154.38763428]
[306.00659180 -142.61329651]
[295.42779541 -131.95642090]
[283.72229004 -122.55103302]
[271.03732300 -114.51540375]
[257.53237915 -107.95059204]
[243.37731934 -102.93917084]
[228.75016785 -99.54415131]
[213.83485413 -97.80822754]
[198.81895447 -97.75324249]
[183.89132690 -99.37988281]
[169.23970032 -102.66768646]
[164.33815002 -88.49113464]
[159.43659973 -74.31457520]
[154.83103943 -60.03911209]
[150.52345276 -45.67092896]
[146.21586609 -31.30274391]
[147.31475830 -23.94488525]
[141.66632080 -16.68216705]
[137.06076050 -2.40670609]
[140.51657104 12.08144760]
[128.91583252 22.83939362]
[124.31027222 37.11485291]
[119.70470428 51.39031601]
[123.16052246 65.87847137]
[111.55978394 76.63641357]
[106.95422363 90.91187286]
[119.27445221 93.85134125]
[127.72286224 108.57682800]
[123.23751831 129.82278442]
[123.23751831 144.82278442]
[137.79598999 148.75802612]
[150.82957458 156.32182312]
[161.45283508 166.99339294]
[168.94587708 180.04103088]
[172.80313110 194.57235718]
[172.76745605 209.59526062]
[168.84730530 224.08570862]
[161.31570435 237.05749512]
[150.69123840 247.62939453]
[137.70237732 255.08502197]
[123.23751831 258.92135620]
[123.23751831 273.92135620]
[123.23751831 288.92135620]
[123.23751831 303.92135620]
[123.23751831 318.92135620]
[123.23751831 333.92135620]
[123.23751831 348.92135620]
[123.23751831 363.92135620]
[123.23751831 378.92135620]
[123.23751831 393.92135620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[26 39]
[27 38]
[28 37]
[29 36]
[40 126]
[41 125]
[43 123]
[44 122]
[45 121]
[47 119]
[48 118]
[49 116]
[50 115]
[51 114]
[54 113]
[55 112]
[56 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
