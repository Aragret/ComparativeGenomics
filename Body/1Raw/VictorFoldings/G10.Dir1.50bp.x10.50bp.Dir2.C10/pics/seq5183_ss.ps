%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUxxxxxxxxxxCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.90478516 403.85781860]
[115.90478516 388.85781860]
[115.90478516 373.85781860]
[115.90478516 358.85781860]
[115.90478516 343.85781860]
[115.90478516 328.85781860]
[115.90478516 313.85781860]
[115.90478516 298.85781860]
[115.90478516 283.85781860]
[115.90478516 268.85781860]
[114.03717041 253.97453308]
[110.33100891 239.43959045]
[99.68898010 229.01863098]
[103.77667999 213.73461914]
[100.07051849 199.19967651]
[96.36435699 184.66473389]
[90.58982849 198.50868225]
[79.12558746 208.18190002]
[64.50740814 211.54476929]
[49.96870041 207.85343933]
[38.72528839 197.92439270]
[33.26411819 183.95387268]
[34.79314423 169.03201294]
[42.97416306 156.45938110]
[55.99760437 149.01693726]
[70.98281097 148.35089111]
[84.61518860 154.60855103]
[93.88020325 166.40759277]
[93.56814575 151.41084290]
[93.25608826 136.41407776]
[92.94403076 121.41732788]
[77.40018463 109.51279449]
[76.21262360 88.34116364]
[92.65704346 72.50203705]
[86.02854919 59.04607010]
[79.40004730 45.59010696]
[72.77155304 32.13414001]
[62.33173752 21.36333275]
[49.08915329 14.31819725]
[33.27179718 14.66738319]
[25.66968727 1.85890222]
[12.42710209 -5.18623257]
[-0.81548321 -12.23136711]
[-19.16730118 -11.14020348]
[-27.92547417 -26.31565666]
[-41.31175995 -33.08377075]
[-56.94131470 -29.46484756]
[-69.42557526 -39.54069519]
[-69.18769073 -55.58198547]
[-56.41014481 -65.28321075]
[-40.89477158 -61.20242691]
[-34.54364395 -46.47005463]
[-21.15736008 -39.70194244]
[-9.52857971 -43.17739868]
[1.69903266 -37.59531403]
[6.22965193 -25.47395325]
[19.47223663 -18.42881775]
[32.71482468 -11.38368320]
[47.58497620 -12.23678398]
[56.13428497 1.07561147]
[69.37686920 8.12074661]
[61.95456696 -4.91418314]
[57.16498184 -19.12895966]
[55.18529129 -33.99774551]
[56.08872986 -48.97051620]
[59.84187698 -63.49338913]
[66.30589294 -77.02913666]
[75.24166870 -89.07704163]
[86.31863403 -99.19142151]
[99.12704468 -106.99813080]
[113.19308472 -112.20837402]
[127.99641418 -114.62940979]
[142.98942566 -114.17169189]
[157.61750793 -110.85214996]
[171.33950806 -104.79357147]
[183.64785767 -96.22007751]
[194.08721924 -85.44882965]
[202.27140808 -72.87827301]
[207.89770508 -58.97342300]
[210.75794983 -44.24864960]
[210.74636841 -29.24865341]
[207.86334229 -14.52831936]
[202.21557617 -0.63218290]
[194.01194763 11.92570591]
[183.55595398 22.68080330]
[171.23437500 31.23525620]
[157.50300598 37.27261353]
[142.86981201 40.56954575]
[127.87611389 41.00408554]
[113.07654572 38.56016159]
[99.01857758 33.32818222]
[86.22751617 25.50564194]
[92.85601044 38.96160889]
[99.48451233 52.41757202]
[106.11301422 65.87353516]
[119.95623016 71.64981079]
[134.18301392 66.89599609]
[148.40979004 62.14218140]
[149.44137573 46.97628784]
[156.20265198 33.36182785]
[167.66256714 23.37490082]
[182.07357788 18.53844452]
[197.23809814 19.58998108]
[210.84365845 26.36916161]
[220.81549072 37.84220886]
[225.63299561 52.25956345]
[224.56150818 67.42269135]
[217.76443481 81.01931763]
[206.27828979 90.97605896]
[191.85459900 95.77458191]
[176.69290161 94.68315125]
[163.10522461 87.86820221]
[153.16360474 76.36895752]
[138.93682861 81.12277222]
[124.71004486 85.87658691]
[126.88218689 97.66335297]
[123.99542236 108.64611053]
[117.10880280 116.87058258]
[107.94078827 121.10527039]
[108.25284576 136.10202026]
[108.56490326 151.09878540]
[108.87695312 166.09553528]
[110.89929199 180.95858765]
[114.60545349 195.49351501]
[118.31161499 210.02845764]
[129.21873474 221.48904419]
[124.86594391 235.73342896]
[128.57211304 250.26837158]
[134.02590942 236.29496765]
[144.92010498 225.98396301]
[159.17213440 221.30642700]
[174.05760193 223.15649414]
[186.73100281 231.18051147]
[194.76968384 243.84461975]
[196.63697815 258.72793579]
[191.97593689 272.98538208]
[181.67753601 283.89147949]
[167.71046448 289.36145020]
[152.74462891 288.34963989]
[139.64089966 281.04946899]
[130.90478516 268.85781860]
[130.90478516 283.85781860]
[130.90478516 298.85781860]
[130.90478516 313.85781860]
[130.90478516 328.85781860]
[130.90478516 343.85781860]
[130.90478516 358.85781860]
[130.90478516 373.85781860]
[130.90478516 388.85781860]
[130.90478516 403.85781860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[14 125]
[15 124]
[16 123]
[28 122]
[29 121]
[30 120]
[31 119]
[34 95]
[35 94]
[36 93]
[37 92]
[38 61]
[39 60]
[41 58]
[42 57]
[43 56]
[45 53]
[46 52]
[96 115]
[97 114]
[98 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
