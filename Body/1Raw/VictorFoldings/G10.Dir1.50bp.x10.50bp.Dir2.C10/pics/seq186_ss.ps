%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxCAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.98380280 427.97491455]
[115.98380280 412.97491455]
[115.98380280 397.97491455]
[115.98380280 382.97491455]
[115.98380280 367.97491455]
[115.98380280 352.97491455]
[115.98380280 337.97491455]
[115.98380280 322.97491455]
[115.98380280 307.97491455]
[115.98380280 292.97491455]
[101.69879150 290.10119629]
[88.24972534 284.48092651]
[76.15928650 276.33038330]
[65.89776611 265.96423340]
[57.86478043 253.78343201]
[52.37370300 240.25959778]
[49.63943481 225.91680908]
[49.77000809 211.31132507]
[52.76230621 197.00996399]
[58.50212097 183.56813049]
[66.76850128 171.50823975]
[77.24224854 161.29940796]
[89.51827240 153.33921814]
[103.12123871 147.93821716]
[117.52394867 145.30783081]
[117.83600616 130.31108093]
[85.72911835 127.17194366]
[73.85359955 101.87814331]
[59.21009445 98.62731934]
[44.56659317 95.37649536]
[29.92309189 92.12566376]
[15.27959061 88.87483978]
[0.63608903 85.62401581]
[-14.00741196 82.37319183]
[-21.89283752 95.29985809]
[-33.54988480 104.96381378]
[-47.71408081 110.31677246]
[-62.84900284 110.77809906]
[-77.31292725 106.29774475]
[-89.53691864 97.36170197]
[-98.19500732 84.93929291]
[-102.34802246 70.37800598]
[-101.54548645 55.25733566]
[-95.87444305 41.21746445]
[-85.95005798 29.78132820]
[-72.84883881 22.18943787]
[-57.99191666 19.26530075]
[-42.99085617 21.32610893]
[-29.47286034 28.14831924]
[-18.90426445 38.99191284]
[-12.43146515 52.68065262]
[-10.75658607 67.72969055]
[3.88691473 70.98051453]
[18.53041649 74.23133850]
[33.17391586 77.48216248]
[47.81741714 80.73299408]
[62.46091843 83.98381805]
[77.10442352 87.23464203]
[86.13327789 75.15510559]
[101.35146332 69.33819580]
[118.51669312 72.76862335]
[132.10525513 85.64252472]
[140.09516907 72.94759369]
[126.62329865 79.54369354]
[111.78500366 81.74025726]
[96.97989655 79.33007812]
[83.60448456 72.54051208]
[72.92038727 62.01197052]
[65.93539429 48.73756409]
[63.30835342 33.96940231]
[65.28706360 19.10048485]
[71.68489075 5.53332281]
[81.89834595 -5.45236158]
[94.96405792 -12.82034492]
[109.64959717 -15.87564373]
[124.56976318 -14.33006763]
[138.31719971 -8.32940102]
[149.59518433 1.56034184]
[157.33992004 14.40631294]
[160.82090759 28.99681664]
[159.70976257 43.95560837]
[154.11123657 57.87185669]
[166.19122314 48.97950745]
[178.27120972 40.08715820]
[190.35119629 31.19480705]
[202.43118286 22.30245781]
[200.83956909 7.09016037]
[207.03507996 -6.78471994]
[219.26243591 -15.63674355]
[234.17907715 -17.16969109]
[247.76867676 -11.07148361]
[259.84866333 -19.96383286]
[271.92864990 -28.85618401]
[284.00863647 -37.74853134]
[296.08862305 -46.64088058]
[299.91122437 -62.22187805]
[314.53607178 -68.81677246]
[328.74429321 -61.36652756]
[331.63653564 -45.58633423]
[320.99411011 -33.58140182]
[304.98098755 -34.56089401]
[292.90100098 -25.66854477]
[280.82101440 -16.77619553]
[268.74102783 -7.88384533]
[256.66104126 1.00850451]
[258.44607544 15.79630947]
[252.55030823 29.58383560]
[240.46504211 38.62887192]
[225.37594604 40.42208481]
[211.32353210 34.38244629]
[199.24354553 43.27479553]
[187.16355896 52.16714478]
[175.08357239 61.05949402]
[163.00358582 69.95184326]
[152.79010010 80.93750763]
[144.80018616 93.63243866]
[149.84893799 107.75724030]
[164.07572937 112.51105499]
[179.01463318 106.66224670]
[192.82896423 114.81967926]
[194.92155457 130.72567749]
[183.68713379 142.17851257]
[167.74380493 140.39254761]
[159.32191467 126.73783875]
[145.09512329 121.98402405]
[132.83276367 130.62313843]
[132.52070618 145.61988831]
[147.58418274 149.11253357]
[161.59378052 155.64431763]
[173.94398499 164.93037415]
[184.10159302 176.56684875]
[191.62861633 190.04846191]
[196.20126343 204.79048157]
[197.62382507 220.15402222]
[195.83703613 235.47380066]
[190.92054749 250.08689880]
[183.08941650 263.36145020]
[172.68467712 274.72402954]
[160.15843201 283.68429565]
[146.05430603 289.85626221]
[130.98381042 292.97491455]
[130.98381042 307.97491455]
[130.98381042 322.97491455]
[130.98381042 337.97491455]
[130.98381042 352.97491455]
[130.98381042 367.97491455]
[130.98381042 382.97491455]
[130.98381042 397.97491455]
[130.98381042 412.97491455]
[130.98381042 427.97491455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 127]
[26 126]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[62 116]
[63 115]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
