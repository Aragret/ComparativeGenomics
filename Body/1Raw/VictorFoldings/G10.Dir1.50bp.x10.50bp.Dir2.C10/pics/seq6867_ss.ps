%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAxxxxxxxxxxUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.70934296 272.89831543]
[89.30034637 253.69059753]
[89.61240387 238.69384766]
[89.92445374 223.69708252]
[90.23651123 208.70033264]
[90.54856873 193.70358276]
[90.86062622 178.70683289]
[91.17268372 163.71006775]
[91.48474121 148.71331787]
[91.79679108 133.71656799]
[92.10884857 118.71981049]
[79.49771881 110.59826660]
[65.97353363 117.08643341]
[52.44934082 123.57460022]
[38.92515182 130.06275940]
[25.46918678 136.69126892]
[12.08290195 143.45938110]
[-1.30338323 150.22749329]
[-14.68966770 156.99560547]
[-28.07595253 163.76371765]
[-36.90036011 176.89538574]
[-51.74954605 175.73310852]
[-54.09173584 191.07240295]
[-65.02672577 202.08174133]
[-80.34979248 204.52781677]
[-94.16889954 197.47006226]
[-101.17032623 183.62232971]
[-98.66187286 168.30935669]
[-87.60809326 157.41928101]
[-72.25939178 155.13957214]
[-58.51766205 162.34681702]
[-50.65073395 149.69926453]
[-34.84406662 150.37744141]
[-21.45778275 143.60932922]
[-8.07149792 136.84120178]
[5.31478691 130.07308960]
[18.70107269 123.30497742]
[23.28083038 117.44226074]
[32.43698502 116.53857422]
[45.96117783 110.05040741]
[59.48536682 103.56224060]
[73.00955963 97.07408142]
[80.32865906 83.98092651]
[78.77108002 69.06201172]
[77.21350098 54.14310074]
[75.65592194 39.22418594]
[72.40509033 24.58068657]
[67.50354004 10.40412807]
[62.60199356 -3.77242970]
[57.70043945 -17.94898796]
[54.19771194 -20.75832748]
[52.02923965 -24.20343590]
[51.22957230 -27.77308846]
[51.65910339 -30.99946022]
[53.03447723 -33.51256180]
[49.32831573 -48.04749680]
[45.62215805 -62.58243561]
[30.54744911 -62.45336533]
[15.88006115 -65.93634796]
[2.47273374 -72.82888031]
[-8.89504814 -82.73023987]
[-17.56237793 -95.06478119]
[-23.02534676 -109.11537933]
[-24.96634483 -124.06516266]
[-23.27252579 -139.04496765]
[-18.04236603 -153.18386841]
[-9.57993984 -165.65988159]
[1.62275827 -175.74765015]
[14.91441822 -182.86068726]
[29.52227974 -186.58543396]
[44.59706116 -186.70536804]
[59.26233673 -183.21348572]
[72.66548157 -176.31283569]
[84.02725983 -166.40458679]
[92.68711090 -154.06478882]
[98.14155579 -140.01087952]
[100.07349396 -125.05992126]
[98.37059021 -110.08115387]
[93.13185883 -95.94541168]
[84.66187286 -83.47454071]
[73.45306396 -73.39356995]
[60.15709305 -66.28859711]
[63.86325455 -51.75365829]
[67.56941223 -37.21872330]
[71.87699890 -22.85053825]
[76.77854919 -8.67398071]
[81.68009949 5.50257730]
[86.58164978 19.67913628]
[101.25817871 22.77745819]
[111.47165680 11.79179287]
[121.68513489 0.80612797]
[124.82073212 -15.29045773]
[140.41445923 -20.36664581]
[152.42483521 -9.20048714]
[148.49659729 6.72122908]
[132.67080688 11.01960754]
[122.45732117 22.00527191]
[112.24384308 32.99093628]
[101.00303650 38.40648651]
[90.57482910 37.66660690]
[92.13241577 52.58551788]
[93.68999481 67.50443268]
[95.24757385 82.42333984]
[101.03317261 68.58402252]
[104.44801331 53.97789764]
[114.98184204 43.29901505]
[129.53990173 39.68475342]
[143.84513855 44.19694901]
[153.69480896 55.50996017]
[156.19512939 70.30010223]
[150.61206055 84.22145844]
[135.90609741 87.17685699]
[150.22868347 91.63367462]
[164.55128479 96.09048462]
[178.87388611 100.54730225]
[190.10400391 90.06970978]
[205.07197571 86.62654877]
[219.75149536 91.14400482]
[230.19383240 102.40691376]
[233.59005737 117.38560486]
[229.02661133 132.05088806]
[217.73103333 142.45787048]
[202.74176025 145.80712891]
[188.09086609 141.19773865]
[177.71932983 129.86958313]
[174.41706848 114.86990356]
[160.09446716 110.41308594]
[145.77188110 105.95626831]
[131.44927979 101.49945068]
[125.36335754 105.88255310]
[135.79591370 116.66040039]
[146.22845459 127.43824005]
[159.62541199 134.18519592]
[163.82691956 148.58476257]
[156.16047668 161.47761536]
[141.50256348 164.66282654]
[129.17683411 156.11434937]
[127.02346802 141.26976013]
[120.10749054 127.95925903]
[113.19152069 114.64876556]
[107.10560608 119.03186798]
[106.79354858 134.02862549]
[106.48149109 149.02537537]
[106.16943359 164.02212524]
[105.85737610 179.01887512]
[105.54532623 194.01564026]
[105.23326874 209.01239014]
[104.92121124 224.00914001]
[104.60915375 239.00588989]
[104.29709625 254.00265503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 42]
[13 41]
[14 40]
[15 39]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[22 31]
[43 103]
[44 102]
[45 101]
[46 100]
[47 88]
[48 87]
[49 86]
[50 85]
[55 84]
[56 83]
[57 82]
[89 98]
[90 97]
[91 96]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
