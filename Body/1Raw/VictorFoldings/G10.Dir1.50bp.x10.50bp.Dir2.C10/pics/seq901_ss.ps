%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACAxxxxxxxxxxAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.57563019 261.62261963]
[121.57563019 246.62260437]
[121.57563019 231.62260437]
[121.57563019 216.62260437]
[121.57563019 201.62260437]
[121.57563019 186.62260437]
[121.57563019 171.62260437]
[121.57563019 156.62260437]
[121.57563019 141.62260437]
[121.57563019 126.62261200]
[114.89657593 123.21082306]
[102.30815887 131.36750793]
[101.53848267 116.38724518]
[94.85942841 112.97545624]
[82.70610046 121.76730347]
[70.55276489 130.55914307]
[73.72972107 145.45300293]
[70.56779480 160.35005188]
[61.61479950 172.66929626]
[48.42190170 180.27635193]
[33.27484512 181.85324097]
[18.79795456 177.12677002]
[7.49943447 166.91583252]
[1.33682418 152.98951721]
[1.37783253 137.76066589]
[7.61535454 123.86774445]
[18.96870232 113.71779633]
[33.47084045 109.06936646]
[48.60918045 110.72781372]
[61.76092148 118.40580750]
[73.91425323 109.61396790]
[86.06758881 100.82212830]
[93.96407318 88.06887054]
[96.41699982 73.27079010]
[98.86992645 58.47270966]
[101.32285309 43.67463303]
[103.77577972 28.87655258]
[106.22871399 14.07847404]
[108.68164062 -0.71960539]
[94.10131073 -4.27296019]
[79.82730103 -8.90597343]
[65.93943024 -14.59273720]
[52.51536942 -21.30144501]
[39.63019180 -28.99458313]
[27.35595322 -37.62912369]
[15.76130009 -47.15678024]
[4.91107607 -57.52427292]
[-5.13404036 -68.67361450]
[-14.31787205 -80.54245758]
[-22.58905983 -93.06442261]
[-29.90134621 -106.16948700]
[-36.21383667 -119.78435516]
[-41.49123001 -133.83288574]
[-45.70401382 -148.23652649]
[-48.82862473 -162.91470337]
[-50.84759140 -177.78535461]
[-51.74962234 -192.76528931]
[-51.52967072 -207.77075195]
[-50.18896866 -222.71781921]
[-47.73501587 -237.52288818]
[-44.18153381 -252.10317993]
[-39.54839325 -266.37716675]
[-33.86150742 -280.26498413]
[-27.15267944 -293.68896484]
[-19.45942879 -306.57409668]
[-10.82478046 -318.84823608]
[-1.29702067 -330.44281006]
[9.07056522 -341.29293823]
[20.21999550 -351.33798218]
[32.08892059 -360.52169800]
[44.61096191 -368.79278564]
[57.71608734 -376.10494995]
[71.33101654 -382.41732788]
[85.37959290 -387.69458008]
[99.78326416 -391.90722656]
[114.46147919 -395.03173828]
[129.33213806 -397.05056763]
[144.31208801 -397.95245361]
[159.31753540 -397.73236084]
[174.26458740 -396.39154053]
[189.06964111 -393.93746948]
[203.64991760 -390.38385010]
[217.92384338 -385.75057983]
[231.81161499 -380.06356812]
[245.23554993 -373.35461426]
[258.12060547 -365.66125488]
[270.39468384 -357.02648926]
[281.98916626 -347.49865723]
[292.83920288 -337.13095093]
[302.88412476 -325.98144531]
[312.06774902 -314.11242676]
[320.33871460 -301.59033203]
[327.65078735 -288.48513794]
[333.96301270 -274.87014771]
[339.24017334 -260.82153320]
[343.45269775 -246.41781616]
[346.57705688 -231.73957825]
[348.59576416 -216.86889648]
[349.49752808 -201.88894653]
[349.27731323 -186.88348389]
[347.93634033 -171.93644714]
[345.48211670 -157.13140869]
[341.92837524 -142.55117798]
[337.29498291 -128.27729797]
[331.60787964 -114.38957214]
[324.89880371 -100.96569061]
[317.20532227 -88.08071136]
[308.57046509 -75.80670166]
[299.04248047 -64.21230316]
[288.67471313 -53.36235428]
[277.52511597 -43.31753159]
[265.65603638 -34.13401413]
[253.13383484 -25.86315727]
[240.02857971 -18.55121803]
[226.41354370 -12.23908806]
[212.36486816 -6.96206617]
[197.96112061 -2.74966431]
[183.28285217 0.37455910]
[168.41217041 2.39313221]
[153.43220520 3.29476643]
[138.42674255 3.07441902]
[123.47972107 1.73332262]
[121.02678680 16.53140259]
[118.57386017 31.32948112]
[116.12093353 46.12755966]
[113.66800690 60.92564011]
[111.21508026 75.72371674]
[108.76214600 90.52179718]
[118.00937653 78.71125793]
[127.07924652 66.76397705]
[139.68670654 58.63675308]
[154.31286621 55.30872726]
[169.19557190 57.18085098]
[182.54182434 64.02758026]
[192.74368286 75.02403259]
[198.57206726 88.84539032]
[199.32478333 103.82649231]
[194.91114807 118.16246033]
[185.86289978 130.12612915]
[173.27015686 138.27613831]
[158.65005493 141.63061523]
[143.76701355 139.78634644]
[136.57562256 126.62261200]
[136.57562256 141.62260437]
[136.57562256 156.62260437]
[136.57562256 171.62260437]
[136.57562256 186.62260437]
[136.57562256 201.62260437]
[136.57562256 216.62260437]
[136.57562256 231.62260437]
[136.57562256 246.62260437]
[136.57562256 261.62261963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 32]
[15 31]
[16 30]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
