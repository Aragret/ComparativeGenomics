%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUAxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.06257629]
[92.50000000 236.06257629]
[92.50000000 221.06257629]
[92.50000000 206.06257629]
[92.50000000 191.06257629]
[92.50000000 176.06257629]
[92.50000000 161.06257629]
[92.50000000 146.06257629]
[92.50000000 131.06257629]
[92.50000000 116.06257629]
[78.37519836 111.01382446]
[68.86683655 122.61516571]
[59.35847855 134.21650696]
[49.85012054 145.81784058]
[47.72465897 162.07867432]
[32.47792435 168.11763000]
[19.79445076 157.72236633]
[22.72190857 141.58663940]
[38.24877930 136.30949402]
[47.75713730 124.70814514]
[57.26549911 113.10680389]
[66.77385712 101.50546265]
[67.08591461 86.50871277]
[58.06838226 74.52188110]
[49.05085373 62.53504562]
[40.03332138 50.54821396]
[31.01579285 38.56137848]
[17.17257500 32.78510666]
[2.30952811 34.80744171]
[-12.55351925 36.82977676]
[-27.41656494 38.85211182]
[-36.78246689 51.58221054]
[-52.41905594 53.87842941]
[-65.04942322 44.37845993]
[-67.18019104 28.71846771]
[-57.54721832 16.18924713]
[-41.86557388 14.22416210]
[-29.43889999 23.98906326]
[-14.57585335 21.96673012]
[0.28719357 19.94439507]
[15.15024090 17.92206001]
[19.40578461 11.74627399]
[4.45347357 10.55113125]
[-1.98756027 -2.99556851]
[6.52379894 -15.34695530]
[21.47608566 -14.15148735]
[27.91687584 -0.60529834]
[32.17242050 -6.78108454]
[28.76944351 -21.38997650]
[25.36646461 -35.99887085]
[10.37958717 -34.86136246]
[-4.60528231 -36.02503204]
[-19.23687553 -39.46260452]
[-33.17220688 -45.09349823]
[-46.08461380 -52.78571320]
[-57.67141342 -62.35893250]
[-67.66098785 -73.58875275]
[-75.81916809 -86.21192169]
[-81.95471954 -99.93254852]
[-85.92381287 -114.42898560]
[-87.63341522 -129.36141968]
[-87.04343414 -144.37982178]
[-84.16770935 -159.13214111]
[-79.07365417 -173.27253723]
[-71.88068390 -186.46955872]
[-62.75739670 -198.41386414]
[-51.91767120 -208.82542419]
[-39.61559677 -217.46020508]
[-26.13955498 -224.11578369]
[-11.80544376 -228.63615417]
[3.05072498 -230.91532898]
[18.08070183 -230.89991760]
[32.93216324 -228.59024048]
[47.25696564 -224.04046631]
[60.71932220 -217.35725403]
[73.00364685 -208.69725037]
[83.82198334 -198.26345825]
[92.92073822 -186.30046082]
[100.08661652 -173.08869934]
[105.15164185 -158.93786621]
[107.99708557 -144.17968750]
[108.55623627 -129.16011047]
[106.81600189 -114.23121643]
[102.81716919 -99.74295044]
[96.65347290 -86.03495026]
[88.46939850 -73.42855072]
[78.45680237 -62.21925354]
[66.85037994 -52.66983032]
[53.92221451 -45.00413132]
[39.97535706 -39.40184784]
[43.37833405 -24.79295540]
[46.78131485 -10.18406296]
[43.00262451 29.54384995]
[52.02015686 41.53068161]
[61.03768539 53.51751328]
[70.05521393 65.50434875]
[79.07274628 77.49118042]
[129.50965881 80.19025421]
[144.50234985 80.65830231]
[159.50234985 80.65830231]
[174.49505615 80.19025421]
[189.48774719 79.72221375]
[198.03157043 76.30829620]
[204.79650879 79.40366364]
[219.79570007 79.24762726]
[234.79487610 79.09159088]
[240.80523682 65.09889984]
[251.99171448 54.76532745]
[266.41619873 49.88124466]
[281.57952881 51.29283905]
[294.85461426 58.75554657]
[303.94146729 70.97640991]
[307.26568604 85.83808899]
[304.25134277 100.76570129]
[295.42074585 113.17295837]
[282.30377197 120.91022491]
[267.17306519 122.63697052]
[252.65010071 118.05402374]
[241.25106812 107.95541382]
[234.95091248 94.09078217]
[219.95173645 94.24681854]
[204.95254517 94.40285492]
[189.95579529 94.71491241]
[174.96308899 95.18295288]
[159.97039795 95.65099335]
[157.27502441 98.01793671]
[153.27610779 99.16266632]
[148.57701111 98.47650909]
[144.03431702 95.65099335]
[129.04161072 95.18295288]
[123.65621185 100.40286255]
[136.58915710 108.00148773]
[151.35583496 110.63682556]
[160.58164978 122.46410370]
[159.54327393 137.42811584]
[148.77230835 147.86778259]
[133.78317261 148.43830872]
[122.24979401 138.84762573]
[120.07678986 124.00640869]
[112.88540649 110.84267426]
[107.50000000 116.06257629]
[107.50000000 131.06257629]
[107.50000000 146.06257629]
[107.50000000 161.06257629]
[107.50000000 176.06257629]
[107.50000000 191.06257629]
[107.50000000 206.06257629]
[107.50000000 221.06257629]
[107.50000000 236.06257629]
[107.50000000 251.06257629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[13 20]
[14 19]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 41]
[29 40]
[30 39]
[31 38]
[48 92]
[49 91]
[50 90]
[98 130]
[99 129]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
