%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxCUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.57012939 371.94259644]
[99.57012939 356.94259644]
[99.57012939 341.94259644]
[99.57012939 326.94259644]
[99.57012939 311.94259644]
[99.57012939 296.94259644]
[99.57012939 281.94259644]
[99.57012939 266.94259644]
[99.57012939 251.94258118]
[99.57012939 236.94258118]
[82.85419464 231.46966553]
[68.96421051 220.64041138]
[59.55442810 205.72428894]
[55.75236511 188.47869873]
[58.02374268 170.94189453]
[66.11548615 155.19210815]
[79.08381653 143.10124207]
[95.40430450 136.11241150]
[94.17369843 121.16297913]
[81.93074036 112.49636841]
[67.42211914 116.30422974]
[52.91349030 120.11209106]
[38.40486526 123.91994476]
[23.89624023 127.72780609]
[9.38761425 131.53565979]
[6.96976185 146.57142639]
[-1.36008418 159.32028198]
[-14.15872765 167.57344055]
[-29.20872498 169.90098572]
[-43.90257645 165.89964294]
[-55.69447708 156.26269531]
[-62.54141617 142.65977478]
[-63.25711441 127.44769287]
[-57.71757507 113.26201630]
[-46.88256073 102.56050110]
[-32.62929535 97.19726562]
[-17.42724800 98.10150909]
[-3.91026449 105.11656952]
[5.57975578 117.02703857]
[20.08838081 113.21918488]
[34.59700775 109.41132355]
[49.10563278 105.60346222]
[63.61425781 101.79560852]
[78.12288666 97.98774719]
[80.11894226 83.12114716]
[67.12855530 75.62114716]
[54.13817978 68.12114716]
[41.14779663 60.62114716]
[28.15741539 53.12114716]
[11.41715527 50.43786621]
[9.36140823 33.60901260]
[24.96349525 26.97491646]
[35.65741730 40.13076782]
[48.64779663 47.63076782]
[61.63817978 55.13076782]
[74.62855530 62.63076782]
[87.61894226 70.13076782]
[76.37165833 60.20611954]
[73.55293274 45.47334290]
[80.34236908 32.09785461]
[93.89868164 25.67708969]
[108.54878998 28.89802742]
[118.16184998 40.41276169]
[118.71495819 55.40256119]
[109.97560883 67.59516907]
[120.95641327 57.37646484]
[131.93721008 47.15775681]
[122.91336823 35.15826416]
[115.19326019 22.28124237]
[108.86148071 8.66778088]
[103.98741150 -5.53296232]
[100.62444305 -20.16539764]
[98.80942535 -35.06920242]
[98.56224823 -50.08108521]
[99.88562012 -65.03656769]
[102.76503754 -79.77178192]
[107.16896057 -94.12528992]
[113.04912567 -107.93982697]
[120.34111023 -121.06402588]
[128.96502686 -133.35409546]
[138.82637024 -144.67538452]
[149.81712341 -154.90383911]
[161.81683350 -163.92739868]
[174.69403076 -171.64718628]
[188.30764771 -177.97863770]
[202.50851440 -182.85237122]
[217.14103699 -186.21498108]
[232.04487610 -188.02963257]
[247.05676270 -188.27644348]
[262.01220703 -186.95271301]
[276.74737549 -184.07293701]
[291.10076904 -179.66867065]
[304.91516113 -173.78816223]
[318.03918457 -166.49586487]
[330.32904053 -157.87164307]
[341.65008545 -148.01002502]
[351.87826538 -137.01902771]
[360.90155029 -125.01909637]
[368.62103271 -112.14170074]
[374.95214844 -98.52793121]
[379.82553101 -84.32695007]
[383.18777466 -69.69435883]
[385.00207520 -54.79046249]
[385.24850464 -39.77856827]
[383.92440796 -24.82315063]
[381.04428101 -10.08807182]
[376.63967896 4.26522255]
[370.75881958 18.07947159]
[363.46621704 31.20331764]
[354.84170532 43.49296951]
[344.97979736 54.81377411]
[333.98855591 65.04169464]
[321.98840332 74.06466675]
[309.11083984 81.78383636]
[295.49691772 88.11462402]
[281.29580688 92.98766327]
[266.66311646 96.34956360]
[251.75918579 98.16349030]
[236.74728394 98.40957642]
[221.79190063 97.08511353]
[207.05690002 94.20462036]
[192.70370483 89.79965973]
[178.88960266 83.91848755]
[165.76593018 76.62554169]
[153.47648621 68.00073242]
[142.15592957 58.13855743]
[131.17512512 68.35726929]
[120.19432068 78.57597351]
[125.33953857 104.17534637]
[109.12313080 119.93236542]
[110.35374451 134.88180542]
[122.70197296 137.24827576]
[134.10148621 142.52566528]
[143.87799072 150.39588928]
[151.45465088 160.38766479]
[156.38609314 171.90476990]
[158.38458252 184.26156616]
[157.33682251 196.72384644]
[153.31036377 208.55244446]
[146.54924011 219.04710388]
[137.45922852 227.58789062]
[126.58350372 233.67184448]
[114.57012939 236.94258118]
[114.57012939 251.94258118]
[114.57012939 266.94259644]
[114.57012939 281.94259644]
[114.57012939 296.94259644]
[114.57012939 311.94259644]
[114.57012939 326.94259644]
[114.57012939 341.94259644]
[114.57012939 356.94259644]
[114.57012939 371.94259644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 131]
[19 130]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
