%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAxxxxxxxxxxAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.64662170 426.60287476]
[103.64662170 411.60287476]
[103.64662170 396.60287476]
[103.64662170 381.60287476]
[103.64662170 366.60287476]
[103.64662170 351.60287476]
[103.64662170 336.60287476]
[103.64662170 321.60287476]
[103.64662170 306.60287476]
[103.64662170 291.60287476]
[87.77307892 288.20343018]
[73.02613831 281.40173340]
[60.12547684 271.52655029]
[49.70138168 259.05679321]
[42.26391602 244.59817505]
[38.17797089 228.85386658]
[37.64537811 212.59025574]
[40.69493103 196.59962463]
[47.18083191 181.66163635]
[56.78968811 168.50520325]
[69.05562592 157.77304077]
[83.38289642 149.99015808]
[99.07479858 145.53825378]
[98.13917542 130.56745911]
[97.20354462 115.59667206]
[94.97135162 130.42965698]
[84.12652588 140.79255676]
[69.20746613 142.34869385]
[56.45754242 134.44682312]
[51.21239853 120.39376831]
[55.66704178 106.07048798]
[67.95727539 97.47106171]
[82.94100189 98.19465637]
[68.44541168 94.33750153]
[53.94981384 90.48033905]
[39.45421600 86.62318420]
[24.95862007 82.76602173]
[15.42816353 94.64416504]
[1.88741052 101.61323547]
[-13.31762314 102.46578979]
[-27.55257225 97.05412292]
[-38.35114670 86.31584930]
[-43.84243011 72.11141968]
[-43.07501984 56.90185165]
[-36.18187714 43.32228851]
[-24.35728073 33.72547913]
[-9.64991379 29.77411842]
[5.39208460 32.15280914]
[18.16259766 40.44943237]
[26.44905472 53.22653961]
[28.81577873 68.27042389]
[43.31137466 72.12758636]
[57.80697250 75.98474121]
[72.30256653 79.84190369]
[86.79816437 83.69906616]
[87.89739227 82.11374664]
[89.17380524 80.60064697]
[90.62278748 79.17867279]
[90.31072998 64.18192291]
[89.99868011 49.18516541]
[80.09162903 33.69871140]
[89.06446838 18.64918709]
[88.44049072 3.66217184]
[87.81651306 -11.32484436]
[73.15505981 -14.96057510]
[60.11250305 -22.58083153]
[49.74613571 -33.56787491]
[42.89632034 -47.03103638]
[40.11833191 -61.87891388]
[41.63737869 -76.90785980]
[47.33031082 -90.89954376]
[56.73563385 -102.71971893]
[69.09089661 -111.41017914]
[83.39451599 -116.26643372]
[98.48696136 -116.89479828]
[113.14475250 -113.24434662]
[126.17964935 -105.61098480]
[136.53497314 -94.61353302]
[143.37126160 -81.14350128]
[146.13432312 -66.29283905]
[144.60018921 -51.26542664]
[138.89320374 -37.27947235]
[129.47601318 -25.46875000]
[117.11202240 -16.79070282]
[102.80352783 -11.94882202]
[103.42750549 3.03819442]
[104.05148315 18.02521133]
[112.75928497 26.47988701]
[113.36521149 39.00393677]
[104.99542999 48.87311172]
[105.30748749 63.86986542]
[105.61954498 78.86661530]
[117.51192474 88.00835419]
[132.08462524 84.45359039]
[146.65733337 80.89882660]
[149.10687256 68.14637756]
[156.19099426 57.31931305]
[166.81803894 50.02102280]
[179.37495422 47.31610107]
[191.97206116 49.57519150]
[202.72744751 56.42461777]
[210.04809570 66.80767059]
[224.75605774 63.86219025]
[239.46401978 60.91670609]
[254.17198181 57.97122192]
[262.72558594 44.68171310]
[278.18850708 41.41463089]
[291.38684082 50.10827637]
[294.49026489 65.60486603]
[285.65756226 78.71054840]
[270.12902832 81.64995575]
[257.11746216 72.67918396]
[242.40950012 75.62466431]
[227.70153809 78.57015228]
[212.99357605 81.51563263]
[208.11470032 97.97165680]
[195.53530884 109.77897644]
[178.63088989 113.64668274]
[161.99971008 108.43099976]
[150.21209717 95.47153473]
[135.63938904 99.02629089]
[121.06668091 102.58105469]
[112.17433167 114.66104126]
[113.10996246 129.63183594]
[114.04559326 144.60263062]
[127.75691223 146.46084595]
[140.87724304 150.84107971]
[152.94715881 157.58818054]
[163.54432678 166.46415710]
[172.29827881 177.15657043]
[178.90342712 189.28948975]
[183.12966919 202.43679810]
[184.83042908 216.13703918]
[183.94772339 229.90972900]
[180.51417542 243.27212524]
[174.65174866 255.75619507]
[166.56748962 266.92495728]
[156.54615784 276.38784790]
[144.94021606 283.81433105]
[132.15745544 288.94546509]
[118.64662170 291.60287476]
[118.64662170 306.60287476]
[118.64662170 321.60287476]
[118.64662170 336.60287476]
[118.64662170 351.60287476]
[118.64662170 366.60287476]
[118.64662170 381.60287476]
[118.64662170 396.60287476]
[118.64662170 411.60287476]
[118.64662170 426.60287476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 125]
[24 124]
[25 123]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[58 92]
[59 91]
[60 90]
[62 87]
[63 86]
[64 85]
[93 122]
[94 121]
[95 120]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
