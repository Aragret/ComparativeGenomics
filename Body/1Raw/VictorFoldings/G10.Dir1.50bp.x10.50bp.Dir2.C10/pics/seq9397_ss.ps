%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[59.52226639 334.46127319]
[59.21021271 319.46453857]
[58.89815521 304.46777344]
[58.58609772 289.47100830]
[58.27404404 274.47427368]
[57.96198654 259.47750854]
[57.64992905 244.48075867]
[57.33787537 229.48400879]
[57.02581787 214.48725891]
[54.69471359 199.66949463]
[50.38713074 185.30131531]
[46.07954407 170.93312073]
[47.42612076 185.87255859]
[39.34607697 198.51031494]
[25.22078133 203.55769348]
[10.96144295 198.90245056]
[2.53536224 186.49273682]
[3.46871758 171.52180481]
[13.37091446 160.25474548]
[28.09929657 157.40682983]
[13.10010815 157.25079346]
[-1.89908051 157.09475708]
[-15.77899265 164.68807983]
[-28.42508888 156.81880188]
[-42.30500031 164.41213989]
[-54.95109940 156.54286194]
[-69.95028687 156.38682556]
[-84.94947815 156.23078918]
[-99.94866180 156.07475281]
[-104.99397278 170.35142517]
[-114.40350342 182.21479797]
[-127.15657043 190.37800598]
[-141.86981201 193.95556641]
[-156.94726562 192.55943298]
[-170.75343323 186.34101868]
[-181.79071045 175.97486877]
[-188.86187744 162.58541870]
[-191.19989014 147.62506104]
[-188.55114746 132.71656799]
[-181.20297241 119.47712708]
[-169.95242310 109.34283447]
[-156.01988220 103.41298676]
[-140.91664124 102.33081818]
[-126.28100586 106.21369934]
[-113.70052338 114.64045715]
[-104.53984070 126.69700623]
[-99.79262543 141.07556152]
[-84.79344177 141.23159790]
[-69.79425049 141.38763428]
[-54.79506302 141.54367065]
[-41.98799133 133.93917847]
[-28.26905251 141.81962585]
[-15.46198273 134.21513367]
[-1.74304402 142.09556580]
[13.25614452 142.25160217]
[28.25533295 142.40763855]
[21.27203751 129.13233948]
[26.14727592 114.94671631]
[39.81607437 108.76901245]
[53.68509674 114.48304749]
[59.03513336 128.49650574]
[52.50278854 141.99931335]
[62.48551559 130.80354309]
[72.46823883 119.60778046]
[66.23145294 98.53430939]
[74.27069092 78.08048248]
[93.18727112 66.89336395]
[93.49932098 51.89661026]
[93.81137848 36.89985657]
[80.01303864 30.45582008]
[70.03354645 18.95235443]
[65.60192871 4.38250065]
[67.48597717 -10.72942352]
[75.35926819 -23.76518631]
[87.85771179 -32.46626282]
[102.81587982 -35.32514191]
[117.64217377 -31.84650230]
[129.76785278 -22.63303947]
[137.09205627 -9.28104305]
[138.34584045 5.89617443]
[133.31196594 20.26906776]
[122.86259460 31.34744453]
[108.80813599 37.21191025]
[108.49607849 52.20866394]
[108.18402100 67.20542145]
[112.36423492 68.54227448]
[116.33599091 70.40949249]
[126.31871796 59.21372604]
[136.30143738 48.01795959]
[146.28416443 36.82219315]
[146.80598450 20.78763008]
[159.75326538 11.31411648]
[175.19396973 15.66892338]
[181.28330994 30.51141357]
[173.35005188 44.45570374]
[157.47993469 46.80492020]
[147.49720764 58.00068665]
[137.51448059 69.19644928]
[127.53176117 80.39221954]
[129.50354004 83.50745392]
[131.12429810 86.81890869]
[145.89035034 84.18003845]
[160.65640259 81.54117584]
[175.42245483 78.90231323]
[190.18850708 76.26345062]
[204.95457458 73.62458038]
[219.72062683 70.98571777]
[234.24902344 62.24719238]
[246.66790771 73.78875732]
[239.01528931 88.91732788]
[222.35948181 85.75177765]
[207.59342957 88.39064026]
[192.82737732 91.02950287]
[178.06132507 93.66836548]
[163.29527283 96.30722809]
[148.52920532 98.94609833]
[133.76315308 101.58496094]
[130.39749146 114.78022766]
[122.09775543 125.57639313]
[110.21115112 132.22103882]
[96.66708374 133.63560486]
[83.66400909 129.59051514]
[73.68128204 140.78627014]
[63.69855499 151.98204041]
[60.44773102 166.62553406]
[64.75531769 180.99372864]
[69.06289673 195.36190796]
[73.66605377 181.08567810]
[83.59333801 169.84071350]
[97.18866730 163.50296021]
[112.18402100 163.12966919]
[126.07784271 168.78314209]
[136.55233765 179.52021790]
[141.86012268 193.54974365]
[141.11572266 208.53126526]
[134.44334412 221.96553040]
[122.95608521 231.61138916]
[108.57027435 235.85972595]
[93.68577576 234.00180054]
[80.78567505 226.34754944]
[72.02257538 214.17520142]
[72.33462524 229.17195129]
[72.64668274 244.16870117]
[72.95874023 259.16546631]
[73.27079773 274.16220093]
[73.58285522 289.15896606]
[73.89491272 304.15573120]
[74.20696259 319.15246582]
[74.51902008 334.14923096]
[77.11002350 353.35696411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 127]
[11 126]
[12 125]
[20 56]
[21 55]
[22 54]
[24 52]
[26 50]
[27 49]
[28 48]
[29 47]
[62 124]
[63 123]
[64 122]
[67 85]
[68 84]
[69 83]
[87 99]
[88 98]
[89 97]
[90 96]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
