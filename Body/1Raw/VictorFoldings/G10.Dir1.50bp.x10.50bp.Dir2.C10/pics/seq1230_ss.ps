%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[35.43282700 264.66482544]
[29.36981583 278.38488770]
[23.30680084 292.10494995]
[17.24378777 305.82498169]
[11.18077564 319.54504395]
[5.11776257 333.26510620]
[-0.94525081 346.98516846]
[-7.00826406 360.70520020]
[-7.88004827 377.63671875]
[-24.39121056 381.48611450]
[-32.66091537 366.68585205]
[-20.72831726 354.64221191]
[-14.66530418 340.92214966]
[-8.60229111 327.20208740]
[-2.53927827 313.48202515]
[3.52373505 299.76199341]
[9.58674812 286.04193115]
[15.64976120 272.32186890]
[21.71277428 258.60183716]
[6.30646324 250.01649475]
[-8.16821957 239.93949890]
[-21.56734657 228.47103882]
[-33.75768661 215.72514343]
[-44.61802673 201.82855225]
[-54.04037857 186.91944885]
[-61.93105316 171.14605713]
[-68.21158600 154.66525269]
[-72.81953430 137.64088440]
[-75.70907593 120.24224091]
[-76.85147858 102.64231873]
[-76.23538971 85.01612854]
[-73.86692047 67.53892517]
[-69.76963806 50.38449097]
[-63.98427200 33.72340775]
[-77.64051056 27.51799965]
[-91.29675293 21.31259155]
[-107.06152344 22.64770889]
[-115.44776154 10.33835220]
[-129.10400391 4.13294554]
[-142.76025391 -2.07246184]
[-156.48030090 -8.13547516]
[-170.26268005 -14.05543804]
[-184.04505920 -19.97540092]
[-197.82743835 -25.89536476]
[-212.41137695 -19.80564880]
[-226.99789429 -25.88915825]
[-232.93307495 -40.53665543]
[-226.69567871 -55.05803680]
[-211.98625183 -60.83802795]
[-197.53163147 -54.44746017]
[-191.90748596 -39.67774582]
[-178.12510681 -33.75778198]
[-164.34271240 -27.83782005]
[-150.56033325 -21.91785622]
[-143.12512207 -22.16944695]
[-136.55484009 -15.72870255]
[-122.89859772 -9.52329540]
[-109.24235535 -3.31788874]
[-94.45436859 -5.09685755]
[-85.09134674 7.65635061]
[-71.43510437 13.86175728]
[-57.77886200 20.06716537]
[-52.54485703 10.48187733]
[-46.72925186 1.23789024]
[-40.35422134 -7.62955189]
[-33.44406891 -16.08664131]
[-26.02514267 -24.10113335]
[-18.12572670 -31.64247131]
[-9.77593994 -38.68190384]
[-1.00761688 -45.19259262]
[8.14581203 -51.14971542]
[17.64944839 -56.53055573]
[27.46705818 -61.31460190]
[37.56121063 -65.48361206]
[47.89342117 -69.02169037]
[58.42429352 -71.91535187]
[69.11367798 -74.15356445]
[79.92082214 -75.72778320]
[90.80451965 -76.63201904]
[101.72328186 -76.86282349]
[112.63546753 -76.41931152]
[123.49948120 -75.30316925]
[134.27389526 -73.51866913]
[144.91764832 -71.07259369]
[155.39013672 -67.97428894]
[165.65144348 -64.23554993]
[175.66244507 -59.87064362]
[185.38496399 -54.89620590]
[194.78195190 -49.33120346]
[203.81756592 -43.19685745]
[212.45736694 -36.51655197]
[220.66839600 -29.31575584]
[228.41937256 -21.62192726]
[235.68072510 -13.46439552]
[242.42477417 -4.87426519]
[248.62580872 4.11571312]
[261.56387329 -3.47419500]
[274.50192261 -11.06410313]
[282.12792969 -25.58222771]
[298.52258301 -25.96651268]
[306.82046509 -11.82164097]
[298.48541260 2.30135798]
[282.09182739 1.87395263]
[269.15377808 9.46386051]
[256.21572876 17.05377007]
[270.92358398 54.51863480]
[276.78057861 94.33864594]
[291.77978516 94.49468231]
[306.77896118 94.65071869]
[321.77816772 94.80675507]
[332.89233398 83.57061768]
[348.69662476 83.56793213]
[359.81460571 94.80027771]
[359.65020752 110.60371399]
[348.30093384 121.60233307]
[332.50012207 121.27085876]
[321.62213135 109.80593872]
[306.62292480 109.64990234]
[291.62374878 109.49386597]
[276.62454224 109.33782959]
[275.76434326 119.75652313]
[274.29013062 130.10618591]
[272.20700073 140.35069275]
[269.52227783 150.45422363]
[266.24530029 160.38148499]
[262.38757324 170.09780884]
[257.96252441 179.56924438]
[252.98565674 188.76271057]
[247.47431946 197.64607239]
[241.44776917 206.18830872]
[234.92707825 214.35957336]
[227.93501282 222.13133240]
[220.49600220 229.47640991]
[212.63604736 236.36917114]
[204.38258362 242.78550720]
[195.76446533 248.70303345]
[186.81179810 254.10107422]
[177.55584717 258.96075439]
[168.02896118 263.26507568]
[158.26440430 266.99905396]
[148.29629517 270.14962769]
[138.15946960 272.70578003]
[127.88934326 274.65856934]
[117.52177429 276.00119019]
[107.09299469 276.72894287]
[96.63943481 276.83929443]
[86.19761658 276.33184814]
[75.80401611 275.20840454]
[65.49494934 273.47283936]
[55.30641937 271.13125610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[34 62]
[35 61]
[36 60]
[38 58]
[39 57]
[40 56]
[41 54]
[42 53]
[43 52]
[44 51]
[96 105]
[97 104]
[98 103]
[107 120]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
