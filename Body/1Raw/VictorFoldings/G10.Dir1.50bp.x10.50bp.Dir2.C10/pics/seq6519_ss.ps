%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAxxxxxxxxxxUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[213.09414673 162.57479858]
[199.56996155 156.08663940]
[186.04576111 149.59846497]
[172.52157593 143.11030579]
[157.69978333 144.58123779]
[148.60409546 131.63601685]
[135.07991028 125.14784241]
[121.55571747 118.65968323]
[108.03152466 112.17151642]
[93.29372406 109.37918854]
[78.33347321 110.47049713]
[63.37322235 111.56181335]
[48.41297531 112.65312195]
[33.45272827 113.74443054]
[20.25204659 122.46524811]
[6.99558210 115.67440796]
[-7.96466637 116.76572418]
[-12.01861668 125.34874725]
[-18.92655373 131.75280762]
[-27.65605545 135.09446716]
[-36.92954636 134.94253540]
[-45.41122055 131.37290955]
[-51.89947510 124.94995880]
[-66.22206879 129.40676880]
[-80.54467010 133.86358643]
[-91.42270660 145.35179138]
[-105.87413025 141.74545288]
[-120.19672394 146.20227051]
[-130.91755676 158.61177063]
[-146.97190857 155.26666260]
[-151.84445190 139.60810852]
[-140.52270508 127.74427795]
[-124.65354156 131.87966919]
[-110.33094788 127.42285156]
[-100.47735596 116.25343323]
[-85.00148773 119.54099274]
[-70.67888641 115.08417511]
[-56.35628891 110.62735748]
[-56.34798431 110.28101349]
[-56.33467102 109.93482971]
[-70.35137939 104.59331512]
[-84.36809540 99.25180054]
[-98.38481140 93.91028595]
[-112.40151978 88.56877899]
[-128.49774170 91.70627594]
[-139.05741882 79.15935516]
[-133.21766663 63.83520889]
[-116.98592377 61.49800873]
[-107.06001282 74.55206299]
[-93.04329681 79.89357758]
[-79.02658081 85.23508453]
[-65.00987244 90.57659912]
[-50.99315643 95.91811371]
[-28.66127205 86.78592682]
[-9.05597687 101.80547333]
[5.90427160 100.71416473]
[18.03489494 92.07140350]
[32.36141586 98.78418732]
[47.32166290 97.69287109]
[62.28191376 96.60156250]
[77.24216461 95.51025391]
[92.20240784 94.41893768]
[91.36454773 91.73849487]
[91.16297913 88.74124908]
[91.66551208 85.55791473]
[91.97756958 70.56115723]
[92.28962708 55.56440353]
[78.06620026 50.37085342]
[66.30135345 40.83842850]
[58.27125168 28.00113297]
[54.84693146 13.25146389]
[56.39984131 -1.81064677]
[62.76153564 -15.55137444]
[73.24194336 -26.48022652]
[86.70422363 -33.41172409]
[101.68809509 -35.59399033]
[116.56822205 -32.79030609]
[129.73051453 -25.30479813]
[139.74722290 -13.94943714]
[145.53181458 0.04403367]
[146.45681763 15.15770626]
[142.42189026 29.75216103]
[133.86473083 42.24430466]
[121.71353149 51.27907944]
[107.28637695 55.87646103]
[106.97431946 70.87321472]
[106.66226959 85.86996460]
[114.51969147 98.64732361]
[128.04388428 105.13549042]
[141.56806946 111.62365723]
[155.09225464 118.11181641]
[170.88139343 117.10495758]
[179.00973511 129.58612061]
[192.53393555 136.07427979]
[206.05812073 142.56243896]
[219.58230591 149.05061340]
[227.52633667 136.30873108]
[236.82388306 124.51810455]
[247.36209106 113.82186890]
[259.01303101 104.34986115]
[271.63525391 96.21707153]
[285.07559204 89.52221680]
[299.17083740 84.34657288]
[313.74987793 80.75296021]
[328.63580322 78.78500366]
[343.64785767 78.46659088]
[358.60382080 79.80159760]
[373.32214355 82.77380371]
[387.62417603 87.34713745]
[401.33627319 93.46607971]
[414.29199219 101.05635834]
[426.33407593 110.02582550]
[437.31634521 120.26560974]
[447.10546875 131.65139771]
[455.58261108 144.04498291]
[462.64489746 157.29592896]
[468.20657349 171.24336243]
[472.20016479 185.71798706]
[474.57711792 200.54408264]
[475.30862427 215.54168701]
[474.38583374 230.52873230]
[471.81988525 245.32328796]
[467.64196777 259.74578857]
[461.90280151 273.62112427]
[454.67202759 286.78088379]
[446.03741455 299.06530762]
[436.10382080 310.32525635]
[424.99179077 320.42407227]
[412.83627319 329.23919678]
[399.78472900 336.66354370]
[385.99569702 342.60702515]
[371.63647461 346.99752808]
[356.88143921 349.78170776]
[341.90963745 350.92578125]
[326.90286255 350.41586304]
[312.04327393 348.25811768]
[297.51126099 344.47879028]
[283.48318481 339.12371826]
[270.12939453 332.25793457]
[257.61193848 323.96475220]
[246.08280945 314.34487915]
[235.68193054 303.51504517]
[226.53558350 291.60675049]
[218.75477600 278.76455688]
[212.43395996 265.14431763]
[207.64988708 250.91142273]
[204.46061707 236.23860168]
[202.90484619 221.30398560]
[203.00149536 206.28886414]
[204.74937439 191.37550354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[4 93]
[6 91]
[7 90]
[8 89]
[9 88]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[65 87]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
