%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACxxxxxxxxxxUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-64.32698822 181.78506470]
[-78.01760864 187.91423035]
[-91.70823669 194.04341125]
[-101.14221954 206.74421692]
[-115.92005920 204.88282776]
[-129.61068726 211.01200867]
[-143.30131531 217.14117432]
[-156.99192810 223.27035522]
[-170.68255615 229.39952087]
[-166.81791687 243.92745972]
[-165.33389282 258.88720703]
[-166.26893616 273.89126587]
[-169.59881592 288.55099487]
[-175.23730469 302.48669434]
[-183.03833008 315.33737183]
[-192.79983521 326.77020264]
[-204.26898193 336.48898315]
[-217.14866638 344.24203491]
[-231.10530090 349.82852173]
[-245.77735901 353.10369873]
[-260.78479004 353.98278809]
[-275.73889160 352.44299316]
[-290.25231934 348.52416992]
[-303.94909668 342.32788086]
[-316.47448730 334.01458740]
[-327.50402832 323.79965210]
[-336.75207520 311.94763184]
[-343.97900391 298.76553345]
[-348.99768066 284.59481812]
[-351.67807007 269.80255127]
[-351.95077515 254.77185059]
[-349.80871582 239.89207458]
[-345.30740356 225.54862976]
[-338.56338501 212.11306763]
[-329.75137329 199.93338013]
[-319.09963989 189.32505798]
[-306.88403320 180.56289673]
[-293.42102051 173.87382507]
[-279.05932617 169.43113708]
[-264.17092896 167.34989929]
[-249.14146423 167.68400574]
[-234.36026001 170.42481995]
[-220.21015930 175.50135803]
[-207.05770874 182.78208923]
[-195.24357605 192.07846069]
[-185.07377625 203.14965820]
[-176.81173706 215.70890808]
[-163.12110901 209.57972717]
[-149.43048096 203.45056152]
[-135.73985291 197.32138062]
[-122.04923248 191.19219971]
[-113.59449005 178.92979431]
[-97.83740997 180.35278320]
[-84.14678192 174.22361755]
[-70.45616150 168.09443665]
[-75.28324127 154.47879028]
[-79.02463531 140.52571106]
[-81.65716553 126.32162476]
[-83.16452789 111.95449829]
[-83.53738403 97.51332092]
[-82.77342224 83.08755493]
[-80.87738037 68.76654053]
[-77.86099243 54.63898087]
[-73.74295044 40.79238510]
[-68.54875946 27.31251717]
[-62.31059265 14.28286839]
[-55.06708527 1.78414583]
[-46.86310577 -10.10623646]
[-37.74946594 -21.31462860]
[-27.78261948 -31.77160835]
[-17.02429581 -41.41240692]
[-5.54113531 -50.17730713]
[6.59573889 -58.01202011]
[19.31115150 -64.86801910]
[32.52634430 -70.70284271]
[46.15946579 -75.48034668]
[60.12606812 -79.17093658]
[74.33964539 -81.75175476]
[88.71216583 -83.20681763]
[103.15459442 -83.52711487]
[117.57749176 -82.71066284]
[131.89151001 -80.76251221]
[146.00799561 -77.69473267]
[159.83952332 -73.52632904]
[173.30038452 -68.28311920]
[186.30725098 -61.99757004]
[198.77952576 -54.70862579]
[210.63998413 -46.46142960]
[221.81512451 -37.30706024]
[232.23576355 -27.30222321]
[241.83735657 -16.50888824]
[253.80760193 -25.54840660]
[265.77786255 -34.58792496]
[277.74813843 -43.62744522]
[289.71838379 -52.66696548]
[290.33999634 -68.29219055]
[300.89810181 -79.82738495]
[316.40744019 -81.82599640]
[329.54498291 -73.34432983]
[334.10760498 -58.38717651]
[327.94097900 -44.01684189]
[313.95675659 -37.01855850]
[298.75790405 -40.69670868]
[286.78765869 -31.65718842]
[274.81738281 -22.61766815]
[262.84713745 -13.57814884]
[250.87686157 -4.53862906]
[259.13644409 8.52461338]
[266.26779175 22.23639297]
[272.22033691 36.49949646]
[276.95187378 51.21280289]
[280.42886353 66.27199554]
[282.62667847 81.57032013]
[283.52969360 96.99929810]
[283.13156128 112.44955444]
[281.43502808 127.81154633]
[278.45220947 142.97636414]
[292.87957764 147.08129883]
[307.30697632 151.18624878]
[323.07015991 146.66371155]
[334.67886353 158.24688721]
[330.19104004 174.02000427]
[314.22335815 177.75703430]
[303.20202637 165.61363220]
[288.77462769 161.50868225]
[274.34725952 157.40374756]
[268.89132690 171.88792419]
[262.23455811 185.86096191]
[254.42425537 199.22349548]
[245.51597595 211.88055420]
[235.57302856 223.74209595]
[224.66613770 234.72381592]
[212.87284851 244.74761963]
[200.27700806 253.74224854]
[186.96817017 261.64370728]
[173.04096985 268.39587402]
[158.59443665 273.95071411]
[143.73127747 278.26870728]
[128.55718994 281.31918335]
[113.18004608 283.08041382]
[97.70919800 283.53994751]
[82.25463104 282.69442749]
[66.92623901 280.54992676]
[51.83300781 277.12170410]
[37.08225632 272.43408203]
[22.77886200 266.52041626]
[9.02452755 259.42276001]
[-4.08295250 251.19157410]
[-16.45038033 241.88539124]
[-27.98982048 231.57035828]
[-38.61922455 220.31983948]
[-48.26301956 208.21382141]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
