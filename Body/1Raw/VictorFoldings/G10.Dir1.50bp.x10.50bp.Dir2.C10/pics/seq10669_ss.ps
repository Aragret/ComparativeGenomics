%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.94973755 72.86217499]
[148.01167297 80.45207977]
[140.94895935 93.56571198]
[125.13076782 93.87480927]
[112.19271851 101.46471405]
[101.53108978 112.01600647]
[93.80700684 124.87440491]
[86.08291626 137.73280334]
[78.35883331 150.59121704]
[70.63475037 163.44961548]
[62.91066360 176.30801392]
[59.93756104 192.99923706]
[43.07559967 194.76292419]
[36.71298981 179.04817200]
[50.05226135 168.58393860]
[57.77634811 155.72552490]
[65.50043488 142.86712646]
[73.22451782 130.00872803]
[80.94860077 117.15032196]
[88.67268372 104.29192352]
[84.48161316 98.07219696]
[69.51767731 99.11165619]
[76.09947205 85.63275909]
[71.90840149 79.41304016]
[57.09064102 81.74414062]
[42.27288437 84.07524872]
[27.45512581 86.40634918]
[23.53905678 101.12315369]
[13.97063637 112.97073364]
[0.40764949 119.89643097]
[-14.80003452 120.70032501]
[-29.01759148 115.24313354]
[-39.78174591 104.47034454]
[-45.22753906 90.24842072]
[-44.41145706 75.04138184]
[-37.47489166 61.48395538]
[-25.61964417 51.92503357]
[-10.89970589 48.02076340]
[4.13460302 50.44758224]
[16.87849808 58.78503036]
[25.12402153 71.58859253]
[39.94178009 69.25749207]
[54.75953674 66.92638397]
[69.57729340 64.59528351]
[104.60280609 88.52665710]
[117.54086304 80.93675232]
[125.52899933 67.28024292]
[140.42176819 67.51402283]
[153.35981750 59.92411804]
[147.07514954 46.66788483]
[141.95991516 32.91843414]
[138.05233765 18.77869606]
[135.38160706 4.35452175]
[133.96762085 -10.24611568]
[133.82092285 -24.91392899]
[134.94252014 -39.53913116]
[137.32395935 -54.01226807]
[140.94734192 -68.22501373]
[145.78549194 -82.07101440]
[151.80212402 -95.44666290]
[158.95214844 -108.25186920]
[167.18197632 -120.39082336]
[176.42997742 -131.77270508]
[186.62684631 -142.31237793]
[197.69624329 -151.93099976]
[209.55525208 -160.55662537]
[222.11508179 -168.12475586]
[235.28169250 -174.57879639]
[248.95649719 -179.87051392]
[263.03710938 -183.96035767]
[277.41815186 -186.81777954]
[291.99194336 -188.42147827]
[306.64941406 -188.75950623]
[321.28085327 -187.82939148]
[335.77676392 -185.63818359]
[350.02862549 -182.20234680]
[363.92980957 -177.54765320]
[377.37628174 -171.70901489]
[390.26742554 -164.73020935]
[402.50680542 -156.66349792]
[414.00283813 -147.56935120]
[424.66949463 -137.51586914]
[434.42703247 -126.57835388]
[443.20245361 -114.83871460]
[450.93014526 -102.38485718]
[464.31640625 -109.15296936]
[477.70269775 -115.92108917]
[491.08898926 -122.68920135]
[504.33157349 -129.73432922]
[517.42474365 -137.05343628]
[530.51788330 -144.37254333]
[517.18151855 -151.23849487]
[514.02563477 -165.90275574]
[523.35699463 -177.64694214]
[538.35504150 -177.88700867]
[548.05749512 -166.44749451]
[545.37298584 -151.69027710]
[559.15539551 -157.61022949]
[572.93774414 -163.53019714]
[586.72015381 -169.45016479]
[600.50250244 -175.37013245]
[609.87683105 -188.82577515]
[626.19171143 -187.16581726]
[632.66387939 -172.09786987]
[622.63525391 -159.12254333]
[606.42248535 -161.58773804]
[592.64007568 -155.66778564]
[578.85772705 -149.74781799]
[565.07531738 -143.82785034]
[551.29296875 -137.90789795]
[537.83697510 -131.27938843]
[524.74383545 -123.96028900]
[511.65066528 -116.64118195]
[509.50009155 -112.31098938]
[504.57330322 -109.31802368]
[497.85708618 -109.30291748]
[484.47082520 -102.53479767]
[471.08453369 -95.76668549]
[457.69824219 -88.99857330]
[463.37466431 -74.73896027]
[467.73739624 -60.02370071]
[470.75054932 -44.97354889]
[472.38931274 -29.71200752]
[472.64019775 -14.36432838]
[471.50100708 0.94352585]
[468.98101807 16.08591270]
[465.10086060 30.93853760]
[459.89227295 45.37947845]
[453.39794922 59.29018402]
[445.67108154 72.55644989]
[436.77505493 85.06935120]
[426.78280640 96.72614288]
[415.77624512 107.43110657]
[403.84570312 117.09630585]
[391.08901978 125.64237213]
[377.61087036 132.99906921]
[363.52178955 139.10597229]
[348.93743896 143.91287231]
[333.97744751 147.38023376]
[318.76458740 149.47952271]
[303.42370605 150.19343567]
[288.08071899 149.51602173]
[272.86157227 147.45274353]
[257.89114380 144.02049255]
[243.29234314 139.24732971]
[229.18502808 133.17234802]
[215.68498230 125.84535217]
[202.90307617 117.32638550]
[190.94424438 107.68531036]
[179.90669250 97.00119019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[4 46]
[5 45]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[24 44]
[25 43]
[26 42]
[27 41]
[85 119]
[86 118]
[87 117]
[88 116]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
