%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGxxxxxxxxxxUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[65.58028412 297.91836548]
[55.29603958 295.85186768]
[45.13368607 293.25134277]
[35.12092972 290.12390137]
[29.74991035 304.12933350]
[24.37888908 318.13476562]
[19.00786972 332.14019775]
[22.11145973 348.24298096]
[9.54232788 358.77621460]
[-5.76948214 352.90420532]
[-8.07249260 336.66757202]
[5.00243664 326.76919556]
[10.37345695 312.76376343]
[15.74447727 298.75833130]
[21.11549759 284.75289917]
[8.18373966 278.67895508]
[-4.28361130 271.70126343]
[-16.22349548 263.85510254]
[-27.57551956 255.18016052]
[-38.28226471 245.72030640]
[-48.28957748 235.52340698]
[-57.54683685 224.64103699]
[-66.00722504 213.12821960]
[-73.62795258 201.04319763]
[-80.37046051 188.44711304]
[-86.20065308 175.40364075]
[-91.08904266 161.97879028]
[-95.01090240 148.24044800]
[-97.94639587 134.25810242]
[-99.88067627 120.10248566]
[-100.80395508 105.84518433]
[-100.71156311 91.55831909]
[-99.60397339 77.31414795]
[-97.48678589 63.18472672]
[-112.11983490 59.88719177]
[-126.75289154 56.58965302]
[-141.38594055 53.29211807]
[-156.01899719 49.99458313]
[-170.65205383 46.69704437]
[-185.28511047 43.39950943]
[-199.91815186 40.10197449]
[-214.55120850 36.80443573]
[-229.18426514 33.50690079]
[-242.40733337 42.16288757]
[-257.86087036 38.85174179]
[-266.37655640 25.53789902]
[-262.90222168 10.12023258]
[-249.49908447 1.74576771]
[-234.11901855 5.38292646]
[-225.88673401 18.87384605]
[-211.25367737 22.17138290]
[-196.62062073 25.46891975]
[-181.98756409 28.76645660]
[-167.35450745 32.06399155]
[-152.72146606 35.36153030]
[-138.08840942 38.65906525]
[-123.45535278 41.95660019]
[-108.82229614 45.25413895]
[-94.18924713 48.55167389]
[-80.68611908 12.19954872]
[-60.45003891 -20.88084412]
[-34.23506546 -49.45682144]
[-3.01805091 -72.46354675]
[-10.22408009 -85.61927032]
[-17.43010902 -98.77500153]
[-32.66843796 -102.96652222]
[-40.40697479 -116.74660492]
[-36.05457687 -131.93975830]
[-22.19345093 -139.53218079]
[-7.04715347 -135.01939392]
[0.39828491 -121.07876587]
[-4.27438211 -105.98102570]
[2.93164682 -92.82530212]
[10.13767624 -79.66957855]
[19.15945435 -83.90541077]
[28.38021660 -87.68857574]
[37.77726364 -91.00975037]
[47.32747269 -93.86077118]
[57.00733185 -96.23461151]
[66.79301453 -98.12543488]
[76.66043091 -99.52858734]
[86.58529663 -100.44061279]
[96.54318237 -100.85926056]
[106.50957489 -100.78351593]
[116.45995331 -100.21354675]
[126.36980438 -99.15076447]
[136.21475220 -97.59778595]
[145.97056580 -95.55843353]
[155.61322021 -93.03772736]
[165.11898804 -90.04187012]
[174.46446228 -86.57823181]
[183.62666321 -82.65534973]
[192.58300781 -78.28286743]
[201.31146240 -73.47154999]
[209.79055786 -68.23325348]
[217.99940491 -62.58085251]
[225.91780090 -56.52827072]
[233.52626038 -50.09040833]
[240.80606079 -43.28310394]
[247.73927307 -36.12311554]
[254.30882263 -28.62807274]
[260.49856567 -20.81641769]
[266.29324341 -12.70738029]
[271.67858887 -4.32092094]
[276.64138794 4.32231808]
[281.16937256 13.20106125]
[285.25140381 22.29345512]
[288.87747192 31.57711792]
[292.03863525 41.02920151]
[294.72711182 50.62643433]
[296.93624878 60.34519958]
[298.66067505 70.16157532]
[299.89608765 80.05139160]
[300.63946533 89.99031067]
[300.88900757 99.95387268]
[300.64404297 109.91754913]
[315.58767700 111.21688080]
[330.53128052 112.51622009]
[345.47491455 113.81555176]
[354.21179199 101.18375397]
[368.10092163 94.62725067]
[383.40618896 95.90970612]
[396.01052856 104.68614960]
[402.52346802 118.59575653]
[401.19305420 133.89691162]
[392.37713623 146.47369385]
[378.44717407 152.94300842]
[363.15026855 151.56462097]
[350.60116577 142.70933533]
[344.17556763 128.75917053]
[329.23196411 127.45983887]
[314.28833008 126.16049957]
[299.34472656 124.86116028]
[297.77520752 135.23289490]
[295.66647339 145.50856018]
[293.02420044 155.66014099]
[289.85565186 165.65995789]
[286.16940308 175.48074341]
[281.97558594 185.09571838]
[277.28558350 194.47866821]
[272.11218262 203.60401917]
[266.46948242 212.44688416]
[260.37289429 220.98315430]
[253.83905029 229.18954468]
[246.88574219 237.04368591]
[239.53193665 244.52416992]
[231.79766846 251.61058044]
[223.70404053 258.28359985]
[215.27313232 264.52505493]
[206.52790833 270.31793213]
[197.49223328 275.64639282]
[188.19073486 280.49594116]
[178.64877319 284.85336304]
[168.89236450 288.70675659]
[158.94810486 292.04559326]
[148.84312439 294.86083984]
[138.60496521 297.14474487]
[128.26155090 298.89111328]
[117.84107971 300.09521484]
[107.37196350 300.75369263]
[96.88273621 300.86480713]
[86.40201569 300.42825317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[63 74]
[64 73]
[65 72]
[116 133]
[117 132]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
