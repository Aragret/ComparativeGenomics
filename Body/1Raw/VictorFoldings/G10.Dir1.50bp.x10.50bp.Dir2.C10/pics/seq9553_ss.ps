%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAxxxxxxxxxxAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.84398651 336.09841919]
[113.84398651 321.09841919]
[113.84398651 306.09841919]
[113.84398651 291.09841919]
[113.84398651 276.09841919]
[113.84398651 261.09841919]
[113.84398651 246.09841919]
[113.84398651 231.09841919]
[113.84398651 216.09841919]
[113.84398651 201.09841919]
[110.22006226 196.77369690]
[108.94215393 190.63185120]
[110.86846161 183.99826050]
[105.80169678 169.87991333]
[100.73493195 155.76155090]
[95.66816711 141.64320374]
[81.26801300 137.44374084]
[69.40637970 146.62533569]
[57.54473877 155.80691528]
[45.68310547 164.98851013]
[39.97560120 180.36239624]
[23.76459694 182.83937073]
[13.72658157 169.87132263]
[20.18780518 154.79867554]
[36.50151443 153.12687683]
[48.36315155 143.94528198]
[60.22478485 134.76368713]
[72.08642578 125.58209991]
[62.93868637 109.22219086]
[62.71675110 90.31791687]
[71.62913513 73.46160126]
[58.58838272 66.04953766]
[45.54762650 58.63747025]
[32.50687027 51.22540665]
[19.46611595 43.81333923]
[6.42536116 36.40127563]
[-6.61539412 28.98921013]
[-19.65614891 21.57714462]
[-35.47708511 21.48464203]
[-42.71867752 8.46893501]
[-55.75942993 1.05687046]
[-68.80018616 -6.35519457]
[-75.49814606 -6.69694614]
[-80.26935577 -9.91892910]
[-82.21043396 -14.34112453]
[-94.94010162 -22.27558517]
[-107.80663300 -14.06491852]
[-122.96247864 -12.25846958]
[-137.39842224 -17.21491051]
[-148.24819946 -27.95013428]
[-153.35757446 -42.33265686]
[-151.71209717 -57.50681686]
[-143.63845825 -70.45977783]
[-130.73968506 -78.61971283]
[-115.57685089 -80.36646271]
[-101.16053772 -75.35321045]
[-90.35311890 -64.57534027]
[-85.30041504 -50.17280960]
[-87.00563812 -35.00524902]
[-74.27597809 -27.07078934]
[-61.38812256 -19.39595032]
[-48.34736633 -11.98388481]
[-35.30661011 -4.57181978]
[-20.41843605 -5.00947762]
[-12.24408436 8.53639030]
[0.79667109 15.94845486]
[13.83742619 23.36051941]
[26.87818146 30.77258492]
[39.91893768 38.18465042]
[52.95969009 45.59671402]
[66.00045013 53.00878143]
[79.04119873 60.42084503]
[71.15039825 47.66407394]
[63.25959015 34.90730667]
[52.09793091 24.88645744]
[46.87797928 10.82402134]
[48.79772568 -4.05262375]
[57.41658783 -16.32923698]
[70.75650024 -23.18829536]
[85.75591278 -23.05561829]
[98.97241211 -15.96165848]
[107.37275696 -3.53450251]
[109.02904510 11.37377453]
[103.56283569 25.33928108]
[102.24780273 40.28152466]
[100.93276215 55.22377014]
[109.25051117 42.74118042]
[117.56826019 30.25858879]
[125.88600159 17.77599716]
[124.15879059 1.82619262]
[135.65293884 -9.36595631]
[151.55111694 -7.21478939]
[159.65760803 6.62950134]
[153.75379944 21.54676247]
[138.36859131 26.09374619]
[130.05084229 38.57633591]
[121.73310089 51.05892563]
[113.41535187 63.54151917]
[122.32498169 72.25569916]
[127.28666687 82.57855988]
[141.45564270 77.65513611]
[155.62461853 72.73170471]
[169.79359436 67.80827332]
[183.96257019 62.88484955]
[198.13154602 57.96142197]
[212.30052185 53.03799438]
[225.27755737 42.12777328]
[239.35379028 51.57741547]
[234.17013550 67.71947479]
[217.22393799 67.20697021]
[203.05496216 72.13039398]
[188.88598633 77.05382538]
[174.71702576 81.97724915]
[160.54804993 86.90068054]
[146.37907410 91.82411194]
[132.21009827 96.74753571]
[132.98870850 104.45934296]
[131.89685059 112.34820557]
[128.89778137 119.95558929]
[124.06809998 126.81656647]
[117.59831238 132.48799133]
[109.78652191 136.57643127]
[114.85328674 150.69479370]
[119.92005157 164.81314087]
[124.98681641 178.93150330]
[127.87705231 164.21258545]
[134.88397217 150.94973755]
[145.41380310 140.26690674]
[158.57418823 133.06939697]
[173.24987793 129.96713257]
[188.19720459 131.22302246]
[202.14949036 136.73065186]
[213.92436218 146.02325439]
[222.52395630 158.31335449]
[227.21954346 172.55946350]
[227.61320496 187.55430603]
[223.67155457 202.02714539]
[215.72863770 214.75154114]
[204.45755005 224.64915466]
[190.81346130 230.88124084]
[175.95262146 232.91966248]
[161.13436890 230.59169006]
[147.61447144 224.09458923]
[136.53863525 213.97895813]
[128.84397888 201.09841919]
[128.84397888 216.09841919]
[128.84397888 231.09841919]
[128.84397888 246.09841919]
[128.84397888 261.09841919]
[128.84397888 276.09841919]
[128.84397888 291.09841919]
[128.84397888 306.09841919]
[128.84397888 321.09841919]
[128.84397888 336.09841919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 125]
[14 124]
[15 123]
[16 122]
[17 28]
[18 27]
[19 26]
[20 25]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[45 60]
[46 59]
[86 98]
[87 97]
[88 96]
[89 95]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
