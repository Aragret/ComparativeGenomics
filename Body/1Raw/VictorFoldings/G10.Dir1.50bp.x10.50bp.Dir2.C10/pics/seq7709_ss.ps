%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACAUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGxxxxxxxxxxCGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.62320709 422.58496094]
[124.62320709 407.58496094]
[124.62320709 392.58496094]
[124.62320709 377.58496094]
[124.62320709 362.58496094]
[124.62320709 347.58496094]
[124.62320709 332.58496094]
[124.62320709 317.58496094]
[124.62320709 302.58496094]
[124.62320709 287.58496094]
[123.06562805 272.66604614]
[119.96730804 257.98953247]
[116.86898804 243.31300354]
[104.45594788 230.94706726]
[110.22947693 213.49295044]
[106.82649994 198.88404846]
[96.53285980 209.79464722]
[81.56845093 208.76200867]
[72.87103271 196.54092407]
[76.79772186 182.06401062]
[90.47843170 175.91271973]
[103.91324615 182.58264160]
[102.04563141 167.69935608]
[100.17802429 152.81607056]
[98.31040955 137.93280029]
[95.67154694 123.16674042]
[92.26856995 108.55784607]
[85.08605957 95.38926697]
[74.64624786 84.61845398]
[64.20643616 73.84764862]
[53.76662064 63.07683945]
[43.32680893 52.30603027]
[32.88699722 41.53522110]
[20.85360527 50.52553940]
[7.76932478 57.90320587]
[-6.15098906 63.54706955]
[-20.67875290 67.36445618]
[-35.57540512 69.29267120]
[-50.59633255 69.30006409]
[-65.49488068 67.38651276]
[-80.02639008 63.58342743]
[-93.95225525 57.95326996]
[-107.04379272 50.58848572]
[-119.08602142 41.61001587]
[-129.88121033 31.16529083]
[-139.25209045 19.42582703]
[-147.04476929 6.58439350]
[-153.13130188 -7.14813995]
[-157.41172791 -21.54627419]
[-159.81576538 -36.37357712]
[-160.30393982 -51.38656998]
[-158.86824036 -66.33872986]
[-155.53222656 -80.98452759]
[-150.35069275 -95.08346558]
[-143.40870667 -108.40402222]
[-134.82028198 -120.72746277]
[-124.72644043 -131.85144043]
[-113.29293823 -141.59326172]
[-100.70751190 -149.79298401]
[-87.17682648 -156.31593323]
[-72.92308044 -161.05502319]
[-58.18032074 -163.93241882]
[-43.19064331 -164.90087891]
[-28.20019150 -163.94450378]
[-13.45512104 -161.07897949]
[0.80244058 -156.35136414]
[14.33837032 -149.83930969]
[26.93039703 -141.64973450]
[38.37174988 -131.91711426]
[48.47454453 -120.80127716]
[57.07289124 -108.48475647]
[64.02559662 -95.16979218]
[69.21849060 -81.07503510]
[72.56629181 -66.43193054]
[74.01404572 -51.48093033]
[73.53795624 -36.46754456]
[71.14585876 -21.63831139]
[66.87702942 -7.23673487]
[60.80155945 6.50069618]
[53.01922226 19.34840202]
[43.65780258 31.09540939]
[54.09761810 41.86621857]
[64.53742981 52.63702774]
[74.97724152 63.40783310]
[85.41705322 74.17864227]
[95.85686493 84.94945526]
[110.80495453 86.19632721]
[122.88494110 77.30397797]
[134.96493530 68.41162872]
[147.04492188 59.51927567]
[159.12490845 50.62692642]
[171.20489502 41.73457718]
[183.09727478 32.59284210]
[194.79690552 23.20568275]
[206.49652100 13.81852055]
[215.06678772 -0.80977303]
[231.49588013 3.37604475]
[232.02166748 20.32183647]
[215.88368225 25.51814461]
[204.18406677 34.90530396]
[192.48443604 44.29246902]
[191.08099365 48.91911316]
[186.71812439 52.68696594]
[180.09724426 53.81456757]
[168.01725769 62.70691681]
[155.93727112 71.59926605]
[143.85728455 80.49161530]
[131.77729797 89.38396454]
[119.69730377 98.27631378]
[116.90105438 101.61617279]
[113.63933563 103.89189911]
[110.20249176 105.06217194]
[106.87745667 105.15486908]
[110.28043365 119.76376343]
[120.57407379 108.85316467]
[135.53848267 109.88580322]
[144.23590088 122.10688782]
[140.30920410 136.58380127]
[126.62850952 142.73509216]
[113.19368744 136.06518555]
[115.06130219 150.94845581]
[116.92891693 165.83174133]
[118.79653168 180.71502686]
[121.43539429 195.48107910]
[124.83837128 210.08996582]
[135.38710022 217.58517456]
[137.89436340 229.87063599]
[131.54551697 240.21467590]
[134.64382935 254.89120483]
[137.74215698 269.56771851]
[144.47453308 256.16345215]
[156.93095398 247.80653381]
[171.88708496 246.66017151]
[185.47158813 253.02108765]
[194.16815186 265.24276733]
[195.72570801 280.16168213]
[189.74107361 293.91610718]
[177.76336670 302.94577026]
[162.89297485 304.91333008]
[148.97904968 299.30950928]
[139.62321472 287.58496094]
[139.62321472 302.58496094]
[139.62321472 317.58496094]
[139.62321472 332.58496094]
[139.62321472 347.58496094]
[139.62321472 362.58496094]
[139.62321472 377.58496094]
[139.62321472 392.58496094]
[139.62321472 407.58496094]
[139.62321472 422.58496094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[15 125]
[16 124]
[22 123]
[23 122]
[24 121]
[25 120]
[26 114]
[27 113]
[28 86]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 101]
[94 100]
[95 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
