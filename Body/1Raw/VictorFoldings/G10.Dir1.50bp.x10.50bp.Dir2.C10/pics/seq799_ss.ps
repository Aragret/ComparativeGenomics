%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAxxxxxxxxxxAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.63304138 139.74803162]
[104.61551666 151.73486328]
[95.59798431 163.72169495]
[86.58045197 175.70852661]
[77.56292725 187.69535828]
[68.54539490 199.68218994]
[60.42385101 212.29331970]
[53.24134445 225.46189880]
[46.05883408 238.63047791]
[38.87632751 251.79905701]
[36.60012817 268.59951782]
[19.82612610 271.06311035]
[12.81531429 255.62661743]
[25.70774269 244.61654663]
[32.89025116 231.44796753]
[40.07276154 218.27938843]
[47.25526810 205.11080933]
[32.75816727 208.96231079]
[19.10364151 202.75312805]
[12.47732639 189.29608154]
[15.88100529 174.68736267]
[27.77278137 165.54483032]
[42.76556015 166.01017761]
[54.06747055 175.87257385]
[56.55856323 190.66465759]
[65.57608795 178.67782593]
[74.59362030 166.69099426]
[83.61115265 154.70416260]
[92.62868500 142.71733093]
[101.64620972 130.73049927]
[80.05253601 118.00730133]
[77.30608368 96.43854523]
[64.21292877 89.11943817]
[51.11977005 81.80033112]
[46.63573456 82.03460693]
[42.72444534 80.90637970]
[39.75193024 78.77423859]
[37.92532349 76.08026886]
[37.27937698 73.28919220]
[24.83993721 64.90705109]
[12.40049648 56.52490616]
[-0.03894410 48.14276123]
[-12.65007210 40.02122116]
[-25.42742920 32.16379547]
[-38.20478821 24.30636978]
[-50.98214340 16.44894409]
[-64.84046173 23.22763443]
[-80.16098785 21.41516495]
[-92.05500031 11.58989143]
[-96.72715759 -3.11298108]
[-92.68659973 -18.00181770]
[-81.22264862 -28.32564354]
[-65.99341583 -30.79016685]
[-51.85848236 -24.60896301]
[-43.32826614 -11.75443459]
[-43.12471771 3.67158628]
[-30.34736061 11.52901173]
[-17.57000351 19.38643837]
[-4.79264641 27.24386406]
[0.03642849 27.00817108]
[5.05290890 29.84828186]
[8.34319878 35.70332336]
[20.78263855 44.08546448]
[33.22208023 52.46760941]
[45.66152191 60.84975052]
[58.43887711 68.70717621]
[71.53202820 76.02628326]
[84.62518311 83.34539032]
[76.64382935 70.64508057]
[68.66246796 57.94476318]
[56.63035965 48.98773575]
[49.25732040 35.92487717]
[47.80708313 20.99514961]
[52.52821732 6.75749111]
[62.61152649 -4.34777451]
[76.32873535 -10.41721630]
[91.32873535 -10.41053772]
[105.04053497 -4.32888317]
[115.11394501 6.78535700]
[119.82240295 21.02721405]
[118.35887146 35.95564651]
[110.97364044 49.01256943]
[108.80680847 63.85523605]
[106.63997650 78.69790649]
[115.65750122 66.71107483]
[124.67503357 54.72424316]
[133.69256592 42.73740768]
[142.71009827 30.75057602]
[141.89723206 14.72812939]
[154.01222229 4.21115971]
[169.76147461 7.26738691]
[177.06352234 21.55233383]
[170.31684875 36.10781479]
[154.69692993 39.76810455]
[145.67939758 51.75494003]
[136.66186523 63.74177170]
[127.64434052 75.72860718]
[118.62680817 87.71543884]
[122.14937592 94.33673096]
[135.39207458 87.29180145]
[142.43679810 100.53459930]
[129.19450378 107.57931519]
[132.71707153 114.20060730]
[147.69679260 113.42076111]
[162.67649841 112.64091492]
[168.09957886 98.41030884]
[178.84651184 87.62034607]
[193.05532837 82.14044952]
[208.26428223 82.92005157]
[221.83831787 89.82408142]
[231.42564392 101.65636444]
[235.36521912 116.36689758]
[232.97447205 131.40698242]
[224.66761780 144.17083740]
[211.88386536 152.44705200]
[196.83808899 154.80171204]
[182.13705444 150.82687378]
[170.32778931 141.21118164]
[163.45634460 127.62062836]
[148.47663879 128.40048218]
[133.49691772 129.18032837]
[147.01673889 135.67759705]
[160.53654480 142.17488098]
[175.53483582 142.40200806]
[190.17970276 145.64663696]
[203.87039185 151.77568054]
[216.04524231 160.53768921]
[226.20481873 171.57322693]
[233.93232727 184.42956543]
[238.91076660 198.57931519]
[240.93591309 213.44197083]
[239.92466736 228.40785217]
[235.91851807 242.86297607]
[229.08181763 256.21435547]
[219.69503784 267.91430664]
[208.14324951 277.48278809]
[194.90032959 284.52731323]
[180.50958252 288.75888062]
[165.56134033 290.00390625]
[150.66883850 288.21130371]
[136.44302368 283.45462036]
[123.46747589 275.92898560]
[112.27450562 265.94311523]
[103.32328796 253.90669250]
[96.98102570 240.31347656]
[93.50790405 225.72109985]
[93.04640198 210.72819519]
[95.61544800 195.94982910]
[101.10965729 181.99226379]
[109.29937744 169.43336487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[7 17]
[8 16]
[9 15]
[10 14]
[32 68]
[33 67]
[34 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 59]
[44 58]
[45 57]
[46 56]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
