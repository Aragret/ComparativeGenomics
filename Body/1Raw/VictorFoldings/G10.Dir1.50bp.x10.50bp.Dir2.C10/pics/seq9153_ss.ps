%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCxxxxxxxxxxUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[210.41621399 563.60723877]
[210.41621399 548.60723877]
[210.41621399 533.60723877]
[210.41621399 518.60723877]
[210.41621399 503.60720825]
[210.41621399 488.60720825]
[210.41621399 473.60720825]
[210.41621399 458.60720825]
[210.41621399 443.60720825]
[210.41621399 428.60720825]
[189.74522400 420.84191895]
[174.21839905 405.08648682]
[166.72964478 384.23065186]
[168.69435120 362.11914062]
[179.78198242 342.84271240]
[197.97111511 329.98150635]
[194.26495361 315.44659424]
[190.55879211 300.91165161]
[186.85263062 286.37670898]
[182.99546814 271.88110352]
[178.98773193 257.42642212]
[174.97998047 242.97174072]
[170.97224426 228.51704407]
[156.27539062 225.97383118]
[144.09007263 217.26594543]
[136.86431885 204.07695007]
[136.07830811 188.99708557]
[141.94142151 175.01455688]
[153.34013367 164.92344666]
[149.33239746 150.46875000]
[145.32466125 136.01406860]
[134.46813965 125.81675720]
[138.23698425 110.45100403]
[128.76715088 124.81055450]
[114.62526703 133.26393127]
[98.93719482 134.66966248]
[84.87652588 129.36965942]
[75.02350616 119.00274658]
[70.89328003 106.06751251]
[72.71940613 93.34235382]
[59.62625122 86.02325439]
[46.53309631 78.70414734]
[33.43994141 71.38504028]
[26.73018837 71.09056091]
[21.93214607 67.89524078]
[19.96356583 63.47933578]
[7.18620920 55.62191010]
[-5.59114838 47.76448441]
[-21.46743393 50.07167435]
[-33.07093430 38.99294281]
[-31.50044250 23.02694511]
[-17.96070099 14.42142677]
[-2.83824229 19.77780533]
[2.26627755 34.98712540]
[15.04363537 42.84455109]
[27.82099152 50.70197678]
[40.75904846 58.29188538]
[53.85220337 65.61099243]
[66.94535828 72.93009949]
[80.03851318 80.24919891]
[84.46630859 73.20645142]
[91.29197693 67.27852631]
[100.19131470 63.25056458]
[110.59255219 61.80198669]
[112.15013123 46.88307571]
[113.70771027 31.96416283]
[99.56518555 26.72586632]
[87.17015076 18.13436127]
[77.30177307 6.72971582]
[70.58039093 -6.77116442]
[67.42850494 -21.51960373]
[68.04425049 -36.58850098]
[72.38892365 -51.03061295]
[80.18941498 -63.93809891]
[90.95537567 -74.49958038]
[104.01005554 -82.05115509]
[118.53281403 -86.11812592]
[133.61074829 -86.44483185]
[148.29603577 -83.01074982]
[161.66557312 -76.03173828]
[172.87890625 -65.94651031]
[181.23117065 -53.38902283]
[186.19734192 -39.14865875]
[187.46524048 -24.12057686]
[184.95515442 -9.24945450]
[178.82487488 4.52989817]
[169.45976257 16.35129738]
[157.44851685 25.47164154]
[143.54615784 31.31761742]
[128.62663269 33.52174377]
[127.06904602 48.44065475]
[125.51146698 63.35956573]
[131.81703186 67.42034149]
[139.93878174 54.80934525]
[152.54963684 62.93130493]
[144.42816162 75.54187775]
[150.73371887 79.60265350]
[163.67178345 72.01274109]
[171.29779053 57.49462128]
[187.69244385 57.11033249]
[195.99031067 71.25520325]
[187.65525818 85.37820435]
[171.26168823 84.95079803]
[158.32362366 92.54071045]
[152.69166565 106.44326019]
[163.83485413 117.67446899]
[159.77934265 132.00633240]
[163.78707886 146.46101379]
[167.79483032 160.91571045]
[182.76242065 163.69644165]
[194.98858643 172.66348267]
[202.08000183 185.99510193]
[202.67742920 201.02188110]
[196.71588135 214.76121521]
[185.42694092 224.50930786]
[189.43467712 238.96398926]
[193.44241333 253.41868591]
[197.45014954 267.87338257]
[202.79158020 275.36477661]
[201.38755798 282.67056274]
[205.09371948 297.20547485]
[208.79988098 311.74041748]
[212.50604248 326.27536011]
[221.42047119 326.14126587]
[230.22090149 327.53573608]
[238.64730835 330.41580200]
[246.45106506 334.69458008]
[253.40222168 340.24395752]
[259.29626465 346.89837646]
[263.96023560 354.45983887]
[267.25772095 362.70379639]
[269.09280396 371.38574219]
[269.41296387 380.24850464]
[268.21054077 389.02990723]
[265.52285767 397.47042847]
[261.43112183 405.32104492]
[256.05792236 412.35031128]
[249.56356812 418.35140991]
[242.14140320 423.14819336]
[234.01190186 426.60028076]
[225.41621399 428.60720825]
[225.41621399 443.60720825]
[225.41621399 458.60720825]
[225.41621399 473.60720825]
[225.41621399 488.60720825]
[225.41621399 503.60720825]
[225.41621399 518.60723877]
[225.41621399 533.60723877]
[225.41621399 548.60723877]
[225.41621399 563.60723877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 123]
[17 122]
[18 121]
[19 120]
[20 118]
[21 117]
[22 116]
[23 115]
[29 109]
[30 108]
[31 107]
[33 105]
[40 60]
[41 59]
[42 58]
[43 57]
[46 56]
[47 55]
[48 54]
[64 92]
[65 91]
[66 90]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
