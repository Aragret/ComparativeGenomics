%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUxxxxxxxxxxUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.57473755 379.40792847]
[155.57473755 364.40792847]
[155.57473755 349.40792847]
[155.57473755 334.40792847]
[155.57473755 319.40792847]
[155.57473755 304.40792847]
[155.57473755 289.40792847]
[155.57473755 274.40792847]
[155.57473755 259.40792847]
[155.57473755 244.40792847]
[152.32389832 229.76441956]
[145.97677612 216.17347717]
[131.93338013 211.34452820]
[125.30288696 197.65179443]
[130.46315002 182.95452881]
[124.11602020 169.36357117]
[117.76889038 155.77262878]
[105.37296295 147.51489258]
[106.54401398 131.73707581]
[100.19688416 118.14612579]
[79.81381226 107.18443298]
[84.59976196 80.68117523]
[73.50844574 70.58252716]
[62.41712952 60.48387909]
[49.03084564 53.71576309]
[34.32288361 50.77027893]
[23.13518524 57.27330017]
[10.91306210 54.47353363]
[4.12215948 44.41416168]
[-10.52134132 41.16333389]
[-25.16484261 37.91250992]
[-39.80834579 34.66168594]
[-54.45184708 31.41085815]
[-63.57427979 32.60794830]
[-69.36467743 27.93708229]
[-83.93737793 24.38232040]
[-98.51007843 20.82755852]
[-113.08278656 17.27279663]
[-127.65548706 13.71803379]
[-142.22819519 10.16327190]
[-155.60165405 18.58501625]
[-170.99447632 15.00219250]
[-179.27436829 1.54042685]
[-175.52899170 -13.81365395]
[-161.98043823 -21.95074463]
[-146.66682434 -18.04325676]
[-138.67343140 -4.40943050]
[-124.10072327 -0.85466868]
[-109.52802277 2.70009327]
[-94.95531464 6.25485516]
[-80.38261414 9.80961704]
[-65.80991364 13.36437893]
[-51.20101929 16.76735687]
[-36.55751801 20.01818275]
[-21.91401672 23.26900864]
[-7.27051592 26.51983452]
[7.37298536 29.77066040]
[23.76633072 23.58534241]
[37.26836777 36.06231689]
[51.97632980 39.00780106]
[40.97623825 28.80985832]
[32.46881866 16.45575714]
[26.86477852 2.54192472]
[24.43467140 -12.25991917]
[25.29581261 -27.23517990]
[29.40663147 -41.66089249]
[36.56866455 -54.84062195]
[46.43615341 -66.13808441]
[58.53271866 -75.00787354]
[72.27436829 -81.02177429]
[86.99769592 -83.88945007]
[101.99190521 -83.47246552]
[116.53309631 -79.79094696]
[129.91928101 -73.02262115]
[141.50419617 -63.49425888]
[150.72856140 -51.66585159]
[157.14703369 -38.10845184]
[160.44976807 -23.47657013]
[160.47729492 -8.47659492]
[157.22831726 6.16731358]
[150.85964966 19.74818802]
[141.67877197 31.61037827]
[130.12892151 41.18121338]
[116.76767731 47.99863434]
[102.24009705 51.73351669]
[87.24752808 52.20554733]
[72.51577759 49.39256287]
[83.60709381 59.49121094]
[94.69841003 69.58985901]
[109.65866089 70.68117523]
[122.09809875 62.29902649]
[134.53753662 53.91688538]
[146.97697449 45.53474045]
[159.41642761 37.15259933]
[158.97808838 21.73146439]
[166.96620178 8.53321743]
[180.83177185 1.76937306]
[196.15034485 3.59824848]
[208.03382874 13.43625641]
[212.69023132 28.14412308]
[208.63372803 43.02862549]
[197.15873718 53.34016800]
[181.92686462 55.78837585]
[167.79856873 49.59203720]
[155.35913086 57.97418213]
[142.91967773 66.35632324]
[130.48023987 74.73847198]
[118.04080200 83.12061310]
[121.42131805 99.52516174]
[113.78783417 111.79900360]
[120.13496399 125.38995361]
[132.98487854 134.61981201]
[131.35983276 149.42549133]
[137.70697021 163.01644897]
[144.05409241 176.60739136]
[158.63613892 182.08477783]
[164.87942505 195.95834351]
[159.56773376 209.82633972]
[165.91485596 223.41729736]
[167.53678894 208.50524902]
[173.05072021 194.55545044]
[182.06271362 182.56446838]
[193.92901611 173.38890076]
[207.80187988 167.68421936]
[222.69029236 165.85797119]
[237.53065491 168.04060364]
[251.26278687 174.07621765]
[262.90570068 183.53361511]
[271.62765503 195.73719788]
[276.80557251 209.81517029]
[278.06958008 224.76181030]
[275.32931519 239.50939941]
[268.78060913 253.00436401]
[258.89123535 264.28268433]
[246.36769104 272.53863525]
[232.10462952 277.18246460]
[217.12097168 277.88238525]
[202.48712158 274.58843994]
[189.24847412 267.53588867]
[178.35076904 257.22860718]
[170.57473755 244.40792847]
[170.57473755 259.40792847]
[170.57473755 274.40792847]
[170.57473755 289.40792847]
[170.57473755 304.40792847]
[170.57473755 319.40792847]
[170.57473755 334.40792847]
[170.57473755 349.40792847]
[170.57473755 364.40792847]
[170.57473755 379.40792847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 119]
[12 118]
[15 115]
[16 114]
[17 113]
[19 111]
[20 110]
[22 89]
[23 88]
[24 87]
[25 60]
[26 59]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
