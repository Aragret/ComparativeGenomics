%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAxxxxxxxxxxAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[177.99246216 573.56335449]
[177.99246216 558.56335449]
[177.99246216 543.56335449]
[177.99246216 528.56335449]
[177.99246216 513.56335449]
[177.99246216 498.56335449]
[177.99246216 483.56335449]
[177.99246216 468.56335449]
[177.99246216 453.56335449]
[177.99246216 438.56335449]
[176.30206299 423.65890503]
[172.94281006 409.03988647]
[170.57284546 407.43542480]
[168.71638489 404.76657104]
[167.79309082 401.23184204]
[168.14006042 397.18176270]
[169.96025085 393.08462524]
[167.81166077 378.23928833]
[165.66308594 363.39398193]
[162.39173889 359.83764648]
[161.35974121 354.16995239]
[163.74406433 347.89639282]
[162.20677185 332.97537231]
[160.66947937 318.05435181]
[158.97909546 303.14990234]
[157.13575745 288.26358032]
[145.26792908 279.33666992]
[143.18647766 264.26608276]
[152.63031006 251.87854004]
[150.78698730 236.99223328]
[148.94366455 222.10592651]
[146.18742371 207.36132812]
[142.52871704 192.81437683]
[138.87001038 178.26742554]
[135.21130371 163.72045898]
[130.95846558 149.33598328]
[126.11864471 135.13822937]
[121.27883148 120.94047546]
[116.43901062 106.74272919]
[105.28890991 115.96555328]
[91.81683350 113.59689331]
[85.28833008 102.48538971]
[71.24635315 97.21064758]
[57.20437622 91.93590546]
[42.06012344 97.23035431]
[28.55571175 88.56949615]
[27.05056763 72.59720612]
[38.69931030 61.56605148]
[54.56602097 63.93819427]
[62.47911835 77.89392853]
[76.52109528 83.16867065]
[90.56307220 88.44341278]
[101.03867340 83.68891907]
[112.89316559 87.77413940]
[112.27734375 72.78678894]
[111.66152191 57.79943085]
[107.26121521 43.45936966]
[99.36473846 30.70611382]
[91.46825409 17.95285606]
[83.57176971 5.19959974]
[68.34690094 0.14163798]
[62.94428253 -14.96436214]
[71.50833130 -28.53036880]
[87.46945190 -30.14970398]
[98.58363342 -18.58015251]
[96.32502747 -2.69688272]
[104.22151184 10.05637455]
[112.11799622 22.80963135]
[120.01447296 35.56288910]
[119.85111237 20.56377792]
[123.08783722 5.91715193]
[129.55653381 -7.61635637]
[138.92129517 -19.33392143]
[150.69577026 -28.62701988]
[164.26849365 -35.01304245]
[178.93460083 -38.16034698]
[193.93243408 -37.90548706]
[208.48312378 -34.26169586]
[221.83103943 -27.41820908]
[233.28295898 -17.73042107]
[242.24420166 -5.70144033]
[248.24934387 8.04403782]
[250.98655701 22.79217911]
[250.31367493 37.77708054]
[246.26564026 52.22053909]
[239.05268860 65.37246704]
[229.04940796 76.54986572]
[216.77526855 85.17226410]
[202.86772156 90.79187012]
[188.04899597 93.11685944]
[173.08868408 92.02647400]
[158.76370239 87.57735443]
[145.81796265 80.00054932]
[134.92378235 69.68953705]
[126.64887238 57.18360519]
[127.26469421 72.17095947]
[127.88052368 87.15830994]
[130.63676453 101.90290833]
[135.47657776 116.10066223]
[140.31639099 130.29841614]
[145.15621948 144.49617004]
[148.64097595 147.31683350]
[150.79237366 150.76574707]
[151.57809448 154.33357239]
[151.13891602 157.55480957]
[149.75827026 160.06175232]
[153.41696167 174.60871887]
[157.07566833 189.15567017]
[160.73437500 203.70262146]
[169.67506409 191.65835571]
[184.48468018 189.27607727]
[196.75148010 197.90890503]
[199.50801086 212.65344238]
[191.18858337 225.13491821]
[176.51856995 228.26393127]
[163.82997131 220.26260376]
[165.67329407 235.14891052]
[167.51663208 250.03521729]
[179.69673157 259.74514771]
[181.35406494 274.86822510]
[172.02206421 286.42025757]
[173.86540222 301.30657959]
[178.04862976 309.49780273]
[175.59049988 316.51705933]
[177.12779236 331.43807983]
[178.66508484 346.35910034]
[180.50840759 361.24539185]
[182.65699768 376.09072876]
[184.80557251 390.93603516]
[187.56181335 405.68063354]
[190.92106628 420.29965210]
[196.99452209 406.58419800]
[208.66690063 397.16317749]
[223.35523987 394.12136841]
[237.80915833 398.13186646]
[248.83016968 408.30718994]
[253.97941589 422.39569092]
[252.11744690 437.27966309]
[243.65628052 449.66549683]
[230.46829224 456.81231689]
[215.47184753 457.13858032]
[201.98548889 450.57214355]
[192.99246216 438.56335449]
[192.99246216 453.56335449]
[192.99246216 468.56335449]
[192.99246216 483.56335449]
[192.99246216 498.56335449]
[192.99246216 513.56335449]
[192.99246216 528.56335449]
[192.99246216 543.56335449]
[192.99246216 558.56335449]
[192.99246216 573.56335449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 131]
[12 130]
[17 129]
[18 128]
[19 127]
[22 126]
[23 125]
[24 124]
[25 122]
[26 121]
[29 118]
[30 117]
[31 116]
[32 109]
[33 108]
[34 107]
[35 106]
[36 101]
[37 100]
[38 99]
[39 98]
[42 52]
[43 51]
[44 50]
[54 97]
[55 96]
[56 95]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
