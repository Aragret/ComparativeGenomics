%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAxxxxxxxxxxAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.61589813 473.03720093]
[95.61589813 458.03720093]
[95.61589813 443.03720093]
[95.61589813 428.03720093]
[95.61589813 413.03720093]
[95.61589813 398.03720093]
[95.61589813 383.03720093]
[95.61589813 368.03720093]
[95.61589813 353.03720093]
[95.61589813 338.03720093]
[80.53122711 335.11123657]
[66.29769135 329.30975342]
[53.45795822 320.85189819]
[42.50193787 310.05831909]
[33.84807587 297.33865356]
[27.82738686 283.17630005]
[24.67078209 268.10977173]
[24.50022507 252.71243286]
[27.32401085 237.57057190]
[33.03638077 223.26107788]
[41.42149734 210.32951355]
[52.16157532 199.26925659]
[64.84895325 190.50273132]
[79.00152588 184.36520386]
[94.08112335 181.09207153]
[93.78844452 166.09492493]
[93.49576569 151.09777832]
[93.20309448 136.10063171]
[86.50507355 134.16636658]
[80.29311371 131.00149536]
[74.79096222 126.71999359]
[70.19679260 121.47609711]
[66.67607880 115.45866394]
[64.35563660 108.88443756]
[63.31903839 101.99021149]
[63.60362244 95.02429962]
[49.46970749 90.00110626]
[35.33579254 84.97791290]
[21.20187950 79.95471954]
[7.06796551 74.93152618]
[-7.06594801 69.90833282]
[-21.24819756 65.02326965]
[-35.47743225 60.27680969]
[-49.70666504 55.53034973]
[-63.93590164 50.78388977]
[-77.95938110 58.07206726]
[-93.00361633 53.22989273]
[-100.14311981 39.13013840]
[-95.14215851 24.13794518]
[-80.96770477 17.14790916]
[-66.02922058 22.30709839]
[-59.18944168 36.55465698]
[-44.96020508 41.30111694]
[-30.73097229 46.04757690]
[-16.50173759 50.79403687]
[-9.12419224 49.92301559]
[-2.04275393 55.77441788]
[12.09115982 60.79761124]
[26.22507286 65.82080841]
[40.35898590 70.84400177]
[54.49290085 75.86719513]
[68.62681580 80.89038849]
[81.02290344 68.54648590]
[97.72269440 63.33574295]
[114.93894958 66.43988037]
[123.70829773 54.27030563]
[132.47764587 42.10073471]
[121.28054810 32.09860992]
[111.19029999 20.98084259]
[102.31748199 8.86924934]
[94.75928497 -4.10347033]
[88.59854126 -17.79517937]
[83.90274048 -32.05586624]
[80.72333527 -46.72928238]
[79.09516144 -61.65465546]
[79.03606415 -76.66845703]
[80.54667664 -91.60618591]
[83.61045074 -106.30417633]
[88.19383240 -120.60139465]
[94.24658966 -134.34118652]
[101.70240784 -147.37300110]
[110.47960663 -159.55407715]
[120.48200226 -170.75094604]
[131.60000610 -180.84091187]
[143.71182251 -189.71343994]
[156.68472290 -197.27131653]
[170.37658691 -203.43173218]
[184.63739014 -208.12718201]
[199.31088257 -211.30624390]
[214.23629761 -212.93405151]
[229.25009155 -212.99278259]
[244.18778992 -211.48181152]
[258.88571167 -208.41767883]
[273.18280029 -203.83395386]
[286.92245483 -197.78085327]
[299.95410156 -190.32472229]
[312.13494873 -181.54722595]
[323.33157349 -171.54455566]
[333.42126465 -160.42630005]
[342.29351807 -148.31428528]
[349.85107422 -135.34118652]
[356.01113892 -121.64918518]
[360.70626831 -107.38826752]
[363.88494873 -92.71469879]
[365.51239014 -77.78924561]
[365.57077026 -62.77544403]
[364.05944824 -47.83778763]
[360.99493408 -33.13994598]
[356.41085815 -18.84295273]
[350.35745239 -5.10345602]
[342.90100098 7.92800617]
[334.12319946 20.10865402]
[324.12026978 31.30503273]
[313.00177002 41.39446259]
[300.88952637 50.26640701]
[287.91625977 57.82365036]
[274.22409058 63.98339844]
[259.96307373 68.67816162]
[245.28941345 71.85649872]
[230.36392212 73.48358154]
[215.35012817 73.54158783]
[200.41250610 72.02989197]
[185.71473694 68.96503448]
[171.41784668 64.38061523]
[157.67849731 58.32685852]
[144.64721680 50.87008667]
[135.87786865 63.03965759]
[127.10851288 75.20922852]
[135.85624695 92.01351166]
[135.06748962 110.94190979]
[124.95203400 126.96015167]
[108.20024109 135.80796814]
[108.49291229 150.80509949]
[108.78559113 165.80224609]
[109.07826996 180.79939270]
[123.52869415 183.27705383]
[137.26950073 188.37832642]
[149.82887268 195.92643738]
[160.77586365 205.66059875]
[169.73519897 217.24507141]
[176.40010071 230.28070068]
[180.54281616 244.31871033]
[182.02243042 258.87609863]
[180.78956604 273.45230103]
[176.88813782 287.54641724]
[170.45373535 300.67437744]
[161.70889282 312.38552856]
[150.95542908 322.27825928]
[138.56404114 330.01361084]
[124.96148682 335.32699585]
[110.61589813 338.03720093]
[110.61589813 353.03720093]
[110.61589813 368.03720093]
[110.61589813 383.03720093]
[110.61589813 398.03720093]
[110.61589813 413.03720093]
[110.61589813 428.03720093]
[110.61589813 443.03720093]
[110.61589813 458.03720093]
[110.61589813 473.03720093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[25 135]
[26 134]
[27 133]
[28 132]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
