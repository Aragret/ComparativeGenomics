%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAxxxxxxxxxxCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.94064331 478.94158936]
[77.94064331 463.94158936]
[77.94064331 448.94158936]
[77.94064331 433.94158936]
[77.94064331 418.94158936]
[77.94064331 403.94158936]
[77.94064331 388.94158936]
[77.94064331 373.94158936]
[77.94064331 358.94158936]
[77.94064331 343.94158936]
[62.96457672 339.69409180]
[49.77260590 331.40267944]
[39.43159485 319.72833252]
[32.78054428 305.60592651]
[30.36252213 290.16943359]
[32.38032532 274.66094971]
[38.67951202 260.33059692]
[48.76016617 248.33590698]
[61.81659698 239.64820862]
[76.80169678 234.97399902]
[76.48963928 219.97724915]
[76.17758179 204.98049927]
[68.17717743 192.41694641]
[75.62570953 178.45878601]
[75.31365204 163.46203613]
[75.00160217 148.46528625]
[74.68954468 133.46853638]
[74.37748718 118.47177887]
[68.74552917 104.56922150]
[58.53205109 93.58355713]
[46.45957184 102.51301575]
[33.46320343 110.03461456]
[19.70638847 116.05375671]
[5.36213493 120.49474335]
[-9.38916492 123.30173492]
[-24.36199570 124.43941498]
[-39.36806107 123.89349365]
[-54.21864319 121.67082214]
[-68.72697449 117.79935455]
[-82.71060944 112.32778931]
[-95.99367523 105.32492065]
[-108.40913391 96.87883759]
[-119.80084229 87.09574127]
[-130.02554321 76.09867096]
[-138.95463562 64.02592468]
[-146.47584534 51.02932739]
[-152.49458313 37.27233505]
[-156.93513489 22.92794800]
[-159.74168396 8.17656517]
[-160.87892151 -6.79630089]
[-160.33255005 -21.80234909]
[-158.10943604 -36.65286255]
[-154.23753357 -51.16108322]
[-148.76554871 -65.14454651]
[-141.76228333 -78.42740631]
[-133.31582642 -90.84261322]
[-123.53239441 -102.23403168]
[-112.53501129 -112.45839691]
[-100.46200562 -121.38713837]
[-87.46518707 -128.90795898]
[-73.70800781 -134.92628479]
[-59.36349106 -139.36640930]
[-44.61202240 -142.17251587]
[-29.63912392 -143.30931091]
[-14.63309193 -142.76248169]
[0.21735583 -140.53892517]
[14.72545910 -136.66659546]
[28.70876312 -131.19418335]
[41.99141312 -124.19052887]
[54.40636444 -115.74369812]
[65.79749298 -105.95991516]
[76.02153015 -94.96223450]
[84.94990540 -82.88895416]
[92.47033691 -69.89191437]
[98.48824310 -56.13455963]
[102.92794800 -41.78990555]
[105.73361206 -27.03835487]
[106.86995697 -12.06542110]
[106.32268524 2.94059420]
[104.09867859 17.79097557]
[100.22591400 32.29896164]
[94.75308990 46.28210449]
[87.74903870 59.56454468]
[79.30183411 71.97924042]
[69.51771545 83.37007141]
[79.73119354 94.35573578]
[94.60818481 81.93409729]
[110.97888947 87.46038818]
[124.88143921 81.82843781]
[138.78399658 76.19647980]
[152.68655396 70.56452179]
[166.58911133 64.93256378]
[180.49166870 59.30060959]
[178.79664612 44.29962540]
[181.21282959 29.39779282]
[187.56092834 15.70092392]
[197.36987305 4.22541809]
[209.91175842 -4.17716599]
[224.25592041 -8.88330173]
[239.33790588 -9.54376125]
[254.03854370 -6.10953426]
[267.26693726 1.16453576]
[278.04147339 11.73866558]
[285.56256104 24.82818413]
[289.27215576 39.46176147]
[288.89492798 54.55348969]
[284.45889282 68.98346710]
[276.29321289 81.68087769]
[265.00387573 91.70351410]
[251.42857361 98.30760956]
[236.57472229 101.00309753]
[221.54457092 99.58997345]
[207.45344543 94.17308044]
[195.34700012 85.15439606]
[186.12362671 73.20316315]
[172.22106934 78.83512115]
[158.31851196 84.46707916]
[144.41595459 90.09903717]
[130.51339722 95.73098755]
[116.61083984 101.36294556]
[108.70202637 116.72492218]
[89.37423706 118.15972137]
[89.68629456 133.15647888]
[89.99835205 148.15322876]
[90.31040955 163.14997864]
[90.62246704 178.14672852]
[98.64518738 191.78295898]
[91.17433167 204.66844177]
[91.48638916 219.66519165]
[91.79844666 234.66194153]
[105.83592987 238.24111938]
[118.45204926 245.33639526]
[128.78450012 255.45559692]
[136.12898254 267.90005493]
[139.98710632 281.81298828]
[140.10034180 296.23837280]
[136.46722412 310.18661499]
[129.34307861 322.70260620]
[119.22206116 332.93090820]
[106.80289459 340.17434692]
[92.94064331 343.94158936]
[92.94064331 358.94158936]
[92.94064331 373.94158936]
[92.94064331 388.94158936]
[92.94064331 403.94158936]
[92.94064331 418.94158936]
[92.94064331 433.94158936]
[92.94064331 448.94158936]
[92.94064331 463.94158936]
[92.94064331 478.94158936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 86]
[30 85]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
