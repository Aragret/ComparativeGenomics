%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCxxxxxxxxxxCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[177.75982666 103.72394562]
[171.45310974 87.19184113]
[157.04089355 91.34972382]
[142.62867737 95.50761414]
[128.21646118 99.66550446]
[113.80424500 103.82338715]
[103.97048950 113.76264954]
[90.35364532 110.58882904]
[75.94142914 114.74671173]
[61.52921295 118.90460205]
[47.11699677 123.06249237]
[61.59734726 126.97649384]
[74.68412781 134.30699158]
[85.58547211 144.61041260]
[93.64176178 157.26333618]
[98.36551666 171.50012207]
[99.47090912 186.45933533]
[96.89105225 201.23580933]
[90.78205109 214.93545532]
[81.51354980 226.72930908]
[69.64637756 235.90374756]
[55.89860153 241.90362549]
[41.10207748 244.36592102]
[26.15212631 243.14161682]
[11.95334435 238.30482483]
[-0.63511533 230.14819336]
[-10.85154343 219.16526794]
[-18.07775879 206.02061462]
[-21.87651062 191.50961304]
[-22.01794243 176.51026917]
[-18.49349594 161.93020630]
[-11.51643276 148.65162659]
[-1.50892317 137.47801208]
[10.92349052 129.08544922]
[25.02661133 123.98220825]
[10.31865025 121.03672791]
[-4.38931179 118.09124756]
[-19.09727287 115.14576721]
[-33.80523300 112.20027924]
[-46.81679916 121.17105103]
[-62.34533691 118.23165131]
[-71.17803955 105.12596893]
[-68.07462311 89.62937164]
[-54.87628937 80.93572235]
[-39.41337204 84.20281219]
[-30.85975266 97.49231720]
[-16.15179062 100.43780518]
[-1.44382918 103.38328552]
[13.26413250 106.32876587]
[27.97209358 109.27424622]
[42.95911026 108.65027618]
[57.37132645 104.49238586]
[71.78353882 100.33449554]
[86.19575500 96.17661285]
[96.02951050 86.23735046]
[109.64635468 89.41117096]
[124.05857086 85.25328827]
[138.47077942 81.09539795]
[152.88299561 76.93750763]
[167.29521179 72.77962494]
[164.57440186 59.95592880]
[162.71537781 46.97943497]
[161.72644043 33.90798569]
[161.61196899 20.79986191]
[162.37243652 7.71349001]
[164.00444031 -5.29279089]
[166.50067139 -18.16100502]
[169.85000610 -30.83379173]
[174.03744507 -43.25466537]
[179.04434204 -55.36826324]
[184.84832764 -67.12059021]
[191.42352295 -78.45927429]
[198.74060059 -89.33377838]
[206.76689148 -99.69563293]
[215.46664429 -109.49867249]
[224.80101013 -118.69920349]
[234.72839355 -127.25622559]
[245.20452881 -135.13162231]
[256.18267822 -142.29029846]
[267.61389160 -148.70036316]
[279.44723511 -154.33325195]
[291.62988281 -159.16389465]
[304.10757446 -163.17077637]
[316.82467651 -166.33604431]
[329.72445679 -168.64561462]
[342.74942017 -170.08921814]
[355.84152222 -170.66044617]
[368.94238281 -170.35678101]
[381.99359131 -169.17958069]
[394.93698120 -167.13412476]
[407.71487427 -164.22956848]
[420.27026367 -160.47886658]
[432.54724121 -155.89877319]
[444.49105835 -150.50971985]
[456.04849243 -144.33575439]
[467.16802979 -137.40440369]
[477.80010986 -129.74662781]
[487.89733887 -121.39653778]
[497.41476440 -112.39140320]
[506.30990601 -102.77136993]
[514.54321289 -92.57935333]
[522.07794189 -81.86078644]
[528.88049316 -70.66347504]
[534.92065430 -59.03734589]
[540.17144775 -47.03423309]
[544.60955811 -34.70765686]
[548.21514893 -22.11257172]
[550.97216797 -9.30513477]
[552.86840820 3.65755773]
[553.89538574 16.71771622]
[554.04864502 29.81711960]
[553.32739258 42.89736938]
[551.73492432 55.90016556]
[549.27838135 68.76753998]
[563.77398682 72.62469482]
[578.26959229 76.48185730]
[592.76519775 80.33901215]
[608.44854736 75.54706573]
[620.25402832 86.92965698]
[616.03710938 102.77735138]
[600.13580322 106.78739929]
[588.90802002 94.83460999]
[574.41241455 90.97745514]
[559.91680908 87.12029266]
[545.42120361 83.26313019]
[539.47314453 99.91441345]
[532.04992676 115.96299744]
[523.21179199 131.27851868]
[513.03051758 145.73654175]
[501.58859253 159.21958923]
[488.97894287 171.61810303]
[475.30392456 182.83135986]
[460.67456055 192.76818848]
[445.20962524 201.34782410]
[429.03460693 208.50053406]
[412.28091431 214.16812134]
[395.08456421 218.30450439]
[377.58520508 220.87599182]
[359.92492676 221.86163330]
[342.24716187 221.25332642]
[324.69549561 219.05592346]
[307.41250610 215.28720093]
[290.53851318 209.97767639]
[274.21063232 203.17041016]
[258.56152344 194.92059326]
[243.71826172 185.29516602]
[229.80148315 174.37220764]
[216.92425537 162.24040222]
[205.19123840 148.99819946]
[194.69775391 134.75308228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[6 56]
[8 54]
[9 53]
[10 52]
[11 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
