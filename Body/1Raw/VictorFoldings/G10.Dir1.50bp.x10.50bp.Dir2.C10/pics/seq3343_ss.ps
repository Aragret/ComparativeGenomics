%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAxxxxxxxxxxAUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.40204620 416.21380615]
[96.40204620 401.21380615]
[96.40204620 386.21380615]
[96.40204620 371.21380615]
[96.40204620 356.21380615]
[96.40204620 341.21380615]
[96.40204620 326.21380615]
[96.40204620 311.21380615]
[96.40204620 296.21380615]
[96.40204620 281.21380615]
[82.89542389 278.55752563]
[70.11631775 273.42895508]
[58.51311874 266.00628662]
[48.49328232 256.54812622]
[40.40902328 245.38473511]
[34.54496002 232.90626526]
[31.10806274 219.54922485]
[30.22036743 205.78121948]
[31.91463852 192.08456421]
[36.13315964 178.93934631]
[42.72970963 166.80670166]
[51.47460938 156.11251831]
[62.06274033 147.23255920]
[74.12417603 140.47924805]
[87.23711395 136.09063721]
[100.94262695 134.22210693]
[101.86604309 119.25056458]
[90.67774963 109.25946808]
[75.90563202 111.86418915]
[61.13351440 114.46891022]
[46.36139679 117.07363129]
[31.58928108 119.67835236]
[17.04071617 128.38327026]
[4.64854622 116.81303406]
[12.33612251 101.70219421]
[28.98455811 104.90624237]
[43.75667572 102.30151367]
[58.52878952 99.69679260]
[73.30091095 97.09207153]
[88.07302094 94.48735046]
[99.46409607 84.72807312]
[104.30391693 70.53031921]
[109.14373016 56.33256912]
[113.98354340 42.13481522]
[118.53083801 27.84068680]
[122.78368378 13.45620441]
[127.03652954 -0.92827618]
[121.02934265 -8.08199883]
[118.46502686 -16.88457680]
[119.64537811 -25.80235481]
[107.67511749 -34.84187317]
[95.70486450 -43.88139343]
[79.42122650 -48.60152054]
[79.44913483 -65.55544281]
[95.74821472 -70.22194672]
[104.74438477 -55.85165024]
[116.71463776 -46.81213379]
[128.68490601 -37.77261353]
[133.55549622 -40.09588242]
[138.84947205 -41.14185715]
[144.23764038 -40.84550095]
[151.87060547 -53.75820160]
[159.50358582 -66.67089844]
[167.13655090 -79.58359528]
[174.76951599 -92.49629211]
[182.40249634 -105.40898895]
[185.91165161 -119.99274445]
[184.98823547 -134.96429443]
[170.70629883 -140.25068665]
[159.81381226 -150.89369202]
[154.19795227 -165.04933167]
[154.83171082 -180.26504517]
[161.60530090 -193.90464783]
[173.34512329 -203.60496521]
[188.01721191 -207.68537903]
[203.07952881 -205.43891907]
[215.92243958 -197.25480652]
[224.32081604 -184.55099487]
[226.81961060 -169.52847290]
[222.98588562 -154.79000854]
[213.48384094 -142.88911438]
[199.95979309 -135.88771057]
[200.88320923 -120.91615295]
[211.31010437 -123.86765289]
[220.72172546 -121.04319763]
[231.91001892 -131.03430176]
[243.09832764 -141.02539062]
[248.23808289 -155.98846436]
[262.88479614 -158.69461060]
[274.07308960 -168.68569946]
[285.26138306 -178.67680359]
[296.44967651 -188.66790771]
[293.92483521 -203.88725281]
[300.05001831 -218.04655457]
[312.87066650 -226.62762451]
[328.29574585 -226.89227295]
[341.40319824 -218.75604248]
[348.01046753 -204.81518555]
[346.00921631 -189.51818848]
[336.03802490 -177.74623108]
[321.27865601 -173.25575256]
[306.44076538 -177.47959900]
[295.25247192 -167.48851013]
[284.06417847 -157.49740601]
[272.87588501 -147.50631714]
[268.53637695 -133.25787354]
[253.08941650 -129.83709717]
[241.90112305 -119.84600067]
[230.71282959 -109.85490417]
[230.16233826 -97.03457642]
[220.42007446 -87.64652252]
[206.19334412 -87.55786133]
[195.31518555 -97.77602386]
[187.68222046 -84.86332703]
[180.04924011 -71.95062256]
[172.41627502 -59.03792953]
[164.78330994 -46.12522888]
[157.15034485 -33.21253204]
[160.69323730 -10.45622349]
[141.42100525 3.32457066]
[137.16816711 17.70905113]
[132.91531372 32.09353256]
[134.40081787 36.69163132]
[132.96948242 42.27187729]
[128.18130493 46.97463226]
[123.34148407 61.17238617]
[118.50166321 75.37014008]
[113.66184998 89.56788635]
[116.83759308 120.17397308]
[115.91417694 135.14552307]
[131.61329651 139.58622742]
[145.94956970 147.36065674]
[158.22547913 158.08732605]
[167.84443665 171.24116516]
[174.33984375 186.17926025]
[177.39764404 202.17224121]
[176.87156677 218.43994141]
[172.79010010 234.18940735]
[165.35498047 248.65357971]
[154.93116760 261.12863159]
[142.02902222 271.00820923]
[127.27923584 277.81298828]
[111.40204620 281.21380615]
[111.40204620 296.21380615]
[111.40204620 311.21380615]
[111.40204620 326.21380615]
[111.40204620 341.21380615]
[111.40204620 356.21380615]
[111.40204620 371.21380615]
[111.40204620 386.21380615]
[111.40204620 401.21380615]
[111.40204620 416.21380615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[26 130]
[27 129]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[41 128]
[42 127]
[43 126]
[44 125]
[45 122]
[46 121]
[47 120]
[50 58]
[51 57]
[52 56]
[61 118]
[62 117]
[63 116]
[64 115]
[65 114]
[66 113]
[67 83]
[68 82]
[85 109]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
