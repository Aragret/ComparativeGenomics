%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUxxxxxxxxxxACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.22528076 302.29733276]
[109.81105804 283.08889771]
[110.11903381 268.09207153]
[110.42701721 253.09523010]
[110.73499298 238.09838867]
[111.04296875 223.10154724]
[111.35094452 208.10470581]
[111.65892792 193.10787964]
[111.96690369 178.11103821]
[112.27487946 163.11419678]
[112.58285522 148.11735535]
[98.48746490 142.98706055]
[89.08361053 154.67326355]
[79.67975616 166.35948181]
[77.70030975 182.63871765]
[62.50838852 188.81427002]
[49.73213196 178.53326416]
[52.51465988 162.37190247]
[67.99354553 156.95561218]
[77.39739990 145.26940918]
[86.80126190 133.58320618]
[83.73667145 126.73788452]
[70.04604340 132.86706543]
[56.35542297 138.99623108]
[45.22875595 149.05592346]
[32.22319031 141.58229065]
[35.31227875 126.90381622]
[50.22624588 125.30561066]
[63.91687393 119.17643738]
[77.60749817 113.04726410]
[74.54291534 106.20195007]
[59.56267166 105.43228912]
[44.58242798 104.66262817]
[30.40342903 111.68164062]
[18.08992958 103.30149078]
[3.10968757 102.53182983]
[-11.87055397 101.76216888]
[-26.22055626 109.70001984]
[-40.12846375 101.01081848]
[-39.28701019 84.63327789]
[-24.56181526 77.41519928]
[-11.10089302 86.78192902]
[3.87934756 87.55158997]
[18.85958862 88.32124329]
[31.96710205 81.24718475]
[45.35208893 89.68238831]
[60.33232880 90.45204926]
[75.31256866 91.22171021]
[80.53357697 85.83737183]
[67.75617218 77.98001862]
[52.85739136 76.24037170]
[43.04526138 64.89479828]
[43.47214508 49.90087128]
[53.91388702 39.13193130]
[68.88751221 38.24276733]
[80.53034210 47.70027542]
[82.72847748 62.53931427]
[90.97558594 75.06868744]
[96.19658661 69.68434906]
[94.96598053 54.73491669]
[86.12258148 41.61603928]
[92.78964233 28.29689598]
[91.55902863 13.34746170]
[90.32842255 -1.60197258]
[75.53171539 -4.64076042]
[62.19115448 -11.72638702]
[51.38819504 -22.28445435]
[43.99858856 -35.45906448]
[40.62137222 -50.18221283]
[41.53032303 -65.26036072]
[46.65176010 -79.47118378]
[55.57050705 -91.66268158]
[67.56356049 -100.84654236]
[81.65870667 -106.27826691]
[96.71330261 -107.51753998]
[111.50694275 -104.46389008]
[124.84037781 -97.36486053]
[135.63272095 -86.79595184]
[143.00909424 -73.61392212]
[146.37152100 -58.88738632]
[145.44741821 -43.81016159]
[140.31170654 -29.60448837]
[131.38072205 -17.42195702]
[119.37844849 -8.25014973]
[105.27785492 -2.83258510]
[106.50846863 12.11684990]
[107.73908234 27.06628418]
[116.49445343 39.11587906]
[109.91541290 53.50430298]
[111.14602661 68.45373535]
[123.02285004 77.61567688]
[137.79496765 75.01094818]
[152.56707764 72.40622711]
[157.94865417 68.39607239]
[163.68241882 67.83763885]
[167.99822998 70.01087189]
[182.86482239 68.01481628]
[197.73143005 66.01876068]
[212.59802246 64.02269745]
[214.21751404 49.03468323]
[219.37748718 34.86999893]
[227.77792358 22.35216904]
[238.93043518 12.20896053]
[252.18666077 5.03008652]
[266.77584839 1.23291707]
[281.84985352 1.03821528]
[296.53228760 4.45730066]
[309.96948242 11.29139233]
[321.38027954 21.14316368]
[330.10122681 33.43984985]
[335.62530518 47.46652985]
[337.63137817 62.40771866]
[336.00280762 77.39475250]
[330.83425903 91.55630493]
[322.42623901 104.06903839]
[311.26757812 114.20548248]
[298.00698853 121.37631989]
[283.41549683 125.16464233]
[268.34136963 125.35020447]
[253.66104126 121.92221832]
[240.22798157 115.07998657]
[228.82316589 105.22129822]
[220.10966492 92.91932678]
[214.59408569 78.88929749]
[199.72747803 80.88535309]
[184.86088562 82.88141632]
[169.99427795 84.87747192]
[155.17179871 87.17834473]
[140.39968872 89.78306580]
[125.62757111 92.38778687]
[139.84008789 97.18405914]
[154.05261230 101.98033142]
[168.88056946 104.24562836]
[181.67468262 112.07575989]
[190.43881226 124.24909210]
[193.80561829 138.86636353]
[191.24981689 153.64701843]
[183.17015076 166.28501892]
[170.82719421 174.80860901]
[156.14668274 177.88795471]
[141.41888428 175.04257202]
[134.49928284 161.73394775]
[127.57969666 148.42533875]
[127.27172089 163.42218018]
[126.96373749 178.41900635]
[126.65576172 193.41584778]
[126.34778595 208.41268921]
[126.03981018 223.40953064]
[125.73182678 238.40637207]
[125.42385101 253.40319824]
[125.11587524 268.40005493]
[124.80789948 283.39688110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[12 21]
[13 20]
[14 19]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[59 90]
[60 89]
[62 87]
[63 86]
[64 85]
[91 130]
[92 129]
[93 128]
[96 127]
[97 126]
[98 125]
[99 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
