%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUAxxxxxxxxxxCAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.65131378 294.78216553]
[104.65131378 279.78216553]
[104.65131378 264.78216553]
[104.65131378 249.78216553]
[104.65131378 234.78216553]
[104.65131378 219.78216553]
[104.65131378 204.78216553]
[104.65131378 189.78216553]
[104.65131378 174.78216553]
[104.65131378 159.78216553]
[102.16619873 144.98945618]
[96.97445679 139.66108704]
[97.31347656 130.46669006]
[92.70791626 116.19123077]
[80.62792206 107.29888153]
[65.62873840 107.14284515]
[50.62954712 106.98680878]
[35.63035965 106.83076477]
[20.63117218 106.67472839]
[6.75125980 114.26805878]
[-5.89483690 106.39878082]
[6.81356478 114.36725616]
[16.67164803 125.67292023]
[22.83551025 139.34796143]
[24.77749062 154.22172546]
[22.33134460 169.02093506]
[15.70647621 182.47868347]
[5.47001028 193.44293213]
[-7.50175810 200.97508240]
[-22.09837532 204.43032837]
[-37.07029343 203.51289368]
[-51.13583374 198.30131531]
[-63.09091568 189.24172974]
[-71.91211700 177.10969543]
[-76.84429169 162.94375610]
[-77.46522522 147.95661926]
[-73.72175598 133.43124390]
[-65.93435669 120.61109161]
[-54.76965714 110.59362793]
[-41.18342209 104.23641205]
[-26.33528900 102.08365631]
[-40.11767197 96.16368866]
[-53.90005112 90.24372864]
[-69.63363647 91.90652466]
[-78.27413940 79.77429199]
[-94.48693848 82.23949432]
[-104.51554108 69.26416779]
[-98.04338837 54.19621658]
[-81.72846985 52.53625488]
[-72.35417938 65.99191284]
[-57.60640335 63.90568161]
[-47.98008728 76.46134186]
[-34.19770813 82.38130951]
[-20.41532516 88.30126953]
[-5.73880005 91.39959717]
[7.06826973 83.79510498]
[20.78720856 91.67554474]
[35.78639603 91.83158112]
[50.78558731 91.98761749]
[65.78477478 92.14365387]
[80.78396606 92.29969025]
[91.33525085 81.63806152]
[91.02319336 66.64131165]
[90.71114349 51.64455795]
[90.39908600 36.64780426]
[75.86080933 32.50897217]
[63.18927383 24.26739120]
[53.51123047 12.65589428]
[47.68723679 -1.29303181]
[46.23516464 -16.33905792]
[49.28412628 -31.14430046]
[56.56301498 -44.39228821]
[67.42459106 -54.90502167]
[80.90306091 -61.74771118]
[95.79991150 -64.31191254]
[110.79054260 -62.36961746]
[124.54198456 -56.09353638]
[135.83146667 -46.04172897]
[143.65515137 -33.10799789]
[147.31735229 -18.44240189]
[146.49243164 -3.34899521]
[141.25373840 10.83012581]
[132.06709290 22.83416367]
[119.74935913 31.59572792]
[105.39583588 36.33574677]
[105.70789337 51.33250046]
[106.01995087 66.32925415]
[106.33200836 81.32600403]
[118.85797119 89.57829285]
[132.76052856 83.94634247]
[146.66308594 78.31438446]
[160.56564331 72.68242645]
[174.46818542 67.05046844]
[188.37074280 61.41851425]
[202.27330017 55.78655624]
[216.17585754 50.15459824]
[230.07841492 44.52264404]
[230.55364990 29.30114365]
[237.18478394 15.59173107]
[248.82292175 5.76964474]
[263.45172119 1.53661966]
[278.53662109 3.62605333]
[291.46408081 11.67593861]
[299.99432373 24.29158401]
[302.64947510 39.28725433]
[298.96948242 54.06485748]
[289.59191895 66.06408691]
[276.14154053 73.20599365]
[260.94866943 74.25321198]
[246.64558411 69.02429962]
[235.71037292 58.42519760]
[221.80781555 64.05715942]
[207.90525818 69.68910980]
[194.00270081 75.32106781]
[180.10014343 80.95302582]
[166.19758606 86.58498383]
[152.29504395 92.21694183]
[138.39248657 97.84889221]
[124.48992157 103.48085022]
[119.02725220 108.88591003]
[112.83417511 111.54644775]
[106.98337555 111.58566284]
[111.58893585 125.86112213]
[116.34275055 140.08790588]
[119.81884766 125.49623108]
[127.99551392 112.92078400]
[139.92207336 103.82367706]
[154.21182251 99.26264191]
[169.20330811 99.76797485]
[183.15348816 105.28092194]
[194.44036865 115.16050720]
[201.75166321 128.25802612]
[204.23725891 143.05065918]
[201.60818481 157.81845093]
[194.17012024 170.84439087]
[182.78785706 180.61395264]
[168.78483582 185.99124146]
[153.78913879 186.35102844]
[139.54434204 181.65150452]
[127.70664978 172.43905640]
[119.65131378 159.78216553]
[119.65131378 174.78216553]
[119.65131378 189.78216553]
[119.65131378 204.78216553]
[119.65131378 219.78216553]
[119.65131378 234.78216553]
[119.65131378 249.78216553]
[119.65131378 264.78216553]
[119.65131378 279.78216553]
[119.65131378 294.78216553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[13 123]
[14 122]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[21 55]
[41 54]
[42 53]
[43 52]
[45 50]
[62 88]
[63 87]
[64 86]
[65 85]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
