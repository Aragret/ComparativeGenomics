%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUACCCCAGAAAACUACGAUAGxxxxxxxxxxUUGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.95001221 299.23748779]
[96.53578949 280.02908325]
[96.84376526 265.03222656]
[97.15174103 250.03540039]
[97.45971680 235.03855896]
[97.76770020 220.04171753]
[98.07567596 205.04487610]
[98.38365173 190.04804993]
[98.69162750 175.05120850]
[98.99961090 160.05436707]
[99.30758667 145.05752563]
[75.51596832 135.71975708]
[61.48346710 115.57984161]
[47.55274963 121.14177704]
[33.62203598 126.70371246]
[19.69131851 132.26565552]
[5.76060295 137.82759094]
[-8.17011356 143.38952637]
[-22.10083008 148.95146179]
[-36.03154755 154.51339722]
[-49.96226120 160.07533264]
[-63.89297867 165.63728333]
[-64.44478607 180.85618591]
[-71.14481354 194.53207397]
[-82.83222961 204.29547119]
[-97.48213196 208.45484924]
[-112.55632019 206.28953552]
[-125.44311523 198.17471313]
[-133.90980530 185.51631165]
[-136.48945618 170.50747681]
[-132.73516846 155.74856567]
[-123.29736328 143.79667664]
[-109.81121063 136.72253418]
[-94.61326599 135.75177002]
[-80.33666229 141.05256653]
[-69.45491791 151.70655823]
[-55.52420044 146.14462280]
[-41.59348297 140.58268738]
[-27.66276741 135.02075195]
[-13.73205090 129.45881653]
[0.19866543 123.89687347]
[14.12938118 118.33493805]
[28.06009865 112.77299500]
[41.99081421 107.21105957]
[55.92153168 101.64912415]
[57.91758728 86.78252411]
[45.94733047 77.74300385]
[33.97706985 68.70348358]
[22.00681114 59.66396713]
[10.03655338 50.62444687]
[-1.93370497 41.58492661]
[-17.95761681 42.36837387]
[-28.45232964 30.23410225]
[-25.36719513 14.49048424]
[-11.06886673 7.21467781]
[3.47420287 13.98805904]
[7.10581446 29.61466980]
[19.07607269 38.65419006]
[31.04633141 47.69370651]
[43.01659012 56.73322678]
[54.98684692 65.77275085]
[66.95710754 74.81226349]
[87.86151886 63.12183762]
[110.09881592 65.34051514]
[117.19521332 52.12533569]
[124.29161835 38.91015244]
[131.38803101 25.69496918]
[138.48442078 12.47978592]
[145.58082581 -0.73539704]
[133.50840759 -11.12305927]
[124.02797699 -23.91190529]
[117.60395050 -38.47046661]
[114.54994202 -54.08070374]
[115.01342773 -69.97341919]
[118.96862030 -85.36615753]
[126.21791840 -99.50173950]
[136.40173340 -111.68548584]
[149.01635742 -121.31938934]
[163.43887329 -127.93143463]
[178.95790100 -131.19874573]
[194.80868530 -130.96333313]
[210.21080017 -127.23973846]
[216.75866699 -140.73512268]
[223.30654907 -154.23049927]
[229.85441589 -167.72589111]
[228.13783264 -184.03494263]
[241.56086731 -193.45588684]
[256.31506348 -186.29725647]
[257.22253418 -169.92323303]
[243.34979248 -161.17802429]
[236.80192566 -147.68263245]
[230.25405884 -134.18725586]
[223.70619202 -120.69186401]
[234.91772461 -112.09386444]
[244.22036743 -101.45283508]
[251.24838257 -89.18400574]
[255.72486877 -75.76667023]
[257.47262573 -61.72545624]
[256.42123413 -47.60980606]
[252.60981750 -33.97247314]
[246.18560791 -21.34789085]
[237.39828491 -10.23122025]
[226.59027100 -1.05892670]
[214.18334961 5.80835199]
[200.66224670 10.09998703]
[186.55569458 11.64602089]
[172.41569519 10.38390160]
[158.79602051 6.36100626]
[151.69961548 19.57618904]
[144.60321045 32.79137039]
[137.50680542 46.00655365]
[130.41040039 59.22173691]
[123.31399536 72.43692017]
[130.52027893 77.54100800]
[136.55172729 84.54302979]
[140.90956116 93.15650940]
[143.16873169 102.96496582]
[143.01138306 113.44176483]
[157.35145569 117.84206390]
[171.69151306 122.24236298]
[188.60749817 121.10849762]
[194.37986755 137.04951477]
[180.65977478 147.00921631]
[167.29121399 136.58242798]
[152.95115662 132.18212891]
[138.61108398 127.78182220]
[132.53442383 132.17774963]
[143.00939941 142.91436768]
[153.48435974 153.65098572]
[163.95933533 164.38760376]
[174.43431091 175.12422180]
[187.56889343 182.36871338]
[193.35939026 196.20597839]
[189.29916382 210.64601135]
[177.14582825 219.43786621]
[162.16046143 218.77561951]
[150.83006287 208.94596863]
[148.05944824 194.20405579]
[141.13986206 180.89543152]
[134.22027588 167.58682251]
[127.30068207 154.27819824]
[120.38108826 140.96958923]
[114.30442047 145.36550903]
[113.99644470 160.36235046]
[113.68846893 175.35919189]
[113.38049316 190.35601807]
[113.07250977 205.35285950]
[112.76453400 220.34970093]
[112.45655823 235.34654236]
[112.14858246 250.34336853]
[111.84059906 265.34020996]
[111.53262329 280.33703613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[64 113]
[65 112]
[66 111]
[67 110]
[68 109]
[69 108]
[82 93]
[83 92]
[84 91]
[85 90]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
