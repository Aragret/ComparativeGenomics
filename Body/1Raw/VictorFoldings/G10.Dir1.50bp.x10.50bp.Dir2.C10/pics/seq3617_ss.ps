%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCxxxxxxxxxxUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.52993774 133.83052063]
[96.07746124 118.91056061]
[87.56637573 131.26213074]
[79.05528259 143.61370850]
[70.54418945 155.96528625]
[62.03310013 168.31684875]
[61.02173233 186.67324829]
[44.94552231 193.64141846]
[36.69323349 206.16737366]
[28.44094467 218.69334412]
[33.08737946 233.62466431]
[27.00142670 248.02935791]
[13.05668831 255.10595703]
[-2.16255784 251.51312256]
[-11.47024918 238.94725037]
[-10.47157764 223.34159851]
[0.36191347 212.06465149]
[15.91498184 210.44105530]
[24.16727066 197.91508484]
[32.41955948 185.38912964]
[30.29459763 173.43957520]
[37.12213898 162.92274475]
[49.68153000 159.80575562]
[58.19261932 147.45419312]
[66.70371246 135.10261536]
[75.21479797 122.75104523]
[83.72589111 110.39947510]
[79.93093872 103.93044281]
[68.54607391 84.52336121]
[53.61176682 85.92566681]
[38.67745972 87.32796478]
[30.88645554 100.74735260]
[16.68210030 106.99362946]
[1.52625585 103.66496277]
[-8.75334644 92.04130554]
[-10.20398998 76.59218597]
[-2.26787233 63.25811005]
[12.00340748 57.16629791]
[27.12225151 60.65917206]
[37.27515411 72.39366150]
[52.20946121 70.99135590]
[67.14376831 69.58905029]
[69.44654846 62.45132446]
[74.05211639 48.17586136]
[76.35489655 41.03813171]
[65.05589294 31.17240906]
[53.75688934 21.30668640]
[40.33197403 28.38736916]
[25.25532341 30.13638496]
[10.56593132 26.31719398]
[-1.74958110 17.44631004]
[-10.02564335 4.72344732]
[-13.14298630 -10.13073063]
[-10.68001366 -25.10731888]
[-2.96982360 -38.18085861]
[8.94484520 -47.58325577]
[23.45263100 -52.04291916]
[38.59147263 -50.95671463]
[52.31397247 -44.47153854]
[62.76426697 -33.46446228]
[68.52904510 -19.42409897]
[68.82866669 -4.24929619]
[63.62261200 10.00768089]
[74.92161560 19.87340355]
[86.22061920 29.73912811]
[81.03469086 15.66410923]
[75.84876251 1.58909142]
[70.66283417 -12.48592663]
[68.88633728 -27.38035774]
[68.97449493 -42.38010025]
[70.92593384 -57.25262070]
[74.71040344 -71.76736450]
[80.26923370 -85.69931793]
[87.51625061 -98.83251190]
[96.33911133 -110.96334839]
[106.60103607 -121.90377045]
[118.14295197 -131.48417664]
[130.78591919 -139.55606079]
[144.33396912 -145.99426270]
[158.57704163 -150.69902039]
[173.29437256 -153.59735107]
[188.25778198 -154.64436340]
[203.23532104 -153.82379150]
[217.99479675 -151.14839172]
[232.30741882 -146.65960693]
[245.95127869 -140.42704773]
[258.71490479 -132.54733276]
[270.40039062 -123.14258575]
[280.82662964 -112.35862732]
[289.83197021 -100.36263275]
[297.27679443 -87.34055328]
[303.04571533 -73.49426270]
[307.04928589 -59.03842163]
[309.22543335 -44.19711685]
[309.54046631 -29.20042610]
[307.98944092 -14.28082943]
[304.59646606 0.33038563]
[299.41409302 14.40671349]
[292.52267456 27.72993851]
[284.02902222 40.09352112]
[274.06484985 51.30579758]
[262.78460693 61.19295502]
[250.36314392 69.60172272]
[236.99304199 76.40173340]
[222.88154602 81.48758698]
[208.24743652 84.78043365]
[193.31756592 86.22923279]
[178.32339478 85.81151581]
[163.49710083 83.53371429]
[149.08769226 87.70131683]
[134.67828369 91.86891174]
[120.26887512 96.03651428]
[134.91236877 99.28733826]
[149.55587769 102.53816223]
[164.19937134 105.78899384]
[178.84288025 109.03981781]
[194.31336975 103.59960938]
[206.58210754 114.48126221]
[203.02804565 130.49066162]
[187.30732727 135.15870667]
[175.59205627 123.68331909]
[160.94854736 120.43249512]
[146.30505371 117.18167114]
[131.66154480 113.93083954]
[117.01804352 110.68001556]
[128.31039429 120.55335236]
[139.60275269 130.42668152]
[150.89511108 140.30001831]
[165.33880615 144.34716797]
[178.42481995 151.67904663]
[189.41838074 161.88401794]
[197.70227051 174.38911438]
[202.81137085 188.49220276]
[204.45881653 203.40145874]
[202.55212402 218.27978516]
[197.19833374 232.29180908]
[188.69805908 244.65081787]
[177.52854919 254.66291809]
[164.31690979 261.76593018]
[149.80496216 265.56106567]
[134.80746460 265.83523560]
[120.16648102 262.57308960]
[106.70405579 255.95770264]
[95.17604828 246.36058044]
[86.22970581 234.32051086]
[80.36734772 220.51353455]
[77.91810608 205.71484375]
[79.01950073 190.75534058]
[83.60969543 176.47492981]
[91.43489075 163.67044067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[8 20]
[9 19]
[10 18]
[29 42]
[30 41]
[31 40]
[45 65]
[46 64]
[47 63]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
