%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUxxxxxxxxxxACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCUCCUCCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.34733582 473.82949829]
[61.34733582 458.82949829]
[61.34733582 443.82949829]
[61.34733582 428.82949829]
[61.34733582 413.82949829]
[61.34733582 398.82949829]
[61.34733582 383.82949829]
[61.34733582 368.82949829]
[61.34733582 353.82949829]
[61.34733582 338.82949829]
[49.84275436 336.77081299]
[38.79656982 332.94409180]
[28.47880936 327.44189453]
[19.14183617 320.39773560]
[11.01419163 311.98294067]
[4.29499197 302.40228271]
[-0.85094589 291.88925171]
[-4.29714870 280.70010376]
[-5.95859432 269.10778809]
[-5.79381037 257.39523315]
[-3.80590701 245.84848022]
[-0.04252487 234.74960327]
[5.40530729 224.36990356]
[12.40537262 214.96328735]
[20.78747749 206.75994873]
[30.34758759 199.96087646]
[40.85279465 194.73283386]
[52.04698563 191.20426941]
[63.65710449 189.46224976]
[75.39978790 189.55020142]
[78.19210815 174.81239319]
[80.98443604 160.07458496]
[83.77675629 145.33677673]
[86.56908417 130.59896851]
[89.36140442 115.86116791]
[81.28908539 103.82855225]
[83.98638153 89.59230042]
[95.90078735 81.34651184]
[98.69311523 66.60870361]
[101.48543549 51.87089920]
[104.27776337 37.13309097]
[90.18038940 30.40048599]
[78.30485535 20.26695442]
[69.45098877 7.42254162]
[64.21317291 -7.26038980]
[62.94040680 -22.78639793]
[65.71310425 -38.10445404]
[72.33802032 -52.17909241]
[82.36168671 -64.06039429]
[95.10147858 -72.94812012]
[109.69207764 -78.24557495]
[125.14426422 -79.59970856]
[127.62937927 -94.39241791]
[130.11450195 -109.18512726]
[132.59962463 -123.97782898]
[135.08473206 -138.77053833]
[137.56985474 -153.56324768]
[140.05497742 -168.35595703]
[125.74119568 -172.92721558]
[112.22370911 -179.48910522]
[99.77770233 -187.90798950]
[88.65657806 -198.01251221]
[79.08673859 -209.59693909]
[71.26300812 -222.42543030]
[65.34467316 -236.23680115]
[61.45222855 -250.74987793]
[59.66491318 -265.66921997]
[60.01911545 -280.69104004]
[62.50762558 -295.50955200]
[67.07978058 -309.82302856]
[73.64249420 -323.34011841]
[82.06216431 -335.78561401]
[92.16736603 -346.90609741]
[103.75238037 -356.47521973]
[116.58135223 -364.29815674]
[130.39309692 -370.21563721]
[144.90641785 -374.10717773]
[159.82585144 -375.89358521]
[174.84765625 -375.53845215]
[189.66601562 -373.04901123]
[203.97923279 -368.47598267]
[217.49591064 -361.91244507]
[229.94085693 -353.49200439]
[241.06074524 -343.38610840]
[250.62915039 -331.80050659]
[258.45129395 -318.97103882]
[264.36791992 -305.15893555]
[268.25854492 -290.64535522]
[270.04403687 -275.72583008]
[269.68795776 -260.70404053]
[267.19763184 -245.88583374]
[262.62368774 -231.57290649]
[256.05929565 -218.05664062]
[247.63810730 -205.61219788]
[237.53152466 -194.49295044]
[225.94531250 -184.92526245]
[213.11538696 -177.10391235]
[199.30290222 -171.18814087]
[184.78909302 -167.29838562]
[169.86944580 -165.51383972]
[154.84768677 -165.87083435]
[152.36256409 -151.07812500]
[149.87744141 -136.28541565]
[147.39233398 -121.49271393]
[144.90721130 -106.70000458]
[142.42208862 -91.90730286]
[139.93696594 -77.11459351]
[153.16421509 -71.34680176]
[164.62612915 -62.56469727]
[173.64869690 -51.27896118]
[179.69999695 -38.14768219]
[182.42149353 -23.93795967]
[181.64933777 -9.48109531]
[177.42420959 4.37602949]
[169.98918152 16.82057571]
[159.77577209 27.12141609]
[147.37886047 34.67210388]
[133.52207947 39.02655411]
[119.01556396 39.92541504]
[116.22324371 54.66322327]
[113.43091583 69.40103149]
[110.63859558 84.13883209]
[118.71091461 96.17144775]
[116.01361847 110.40769958]
[104.09921265 118.65348816]
[101.30688477 133.39129639]
[98.51456451 148.12910461]
[95.72223663 162.86691284]
[92.92991638 177.60472107]
[90.13758850 192.34251404]
[107.31430054 199.89366150]
[122.07800293 211.45968628]
[133.51074219 226.31610107]
[140.90298462 243.53399658]
[143.79769897 262.03811646]
[142.01856995 280.67404175]
[135.68070984 298.28018188]
[125.18328857 313.76016235]
[111.18432617 326.15115356]
[94.55950165 334.68368530]
[76.34733582 338.82949829]
[76.34733582 353.82949829]
[76.34733582 368.82949829]
[76.34733582 383.82949829]
[76.34733582 398.82949829]
[76.34733582 413.82949829]
[76.34733582 428.82949829]
[76.34733582 443.82949829]
[76.34733582 458.82949829]
[76.34733582 473.82949829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
[35 125]
[38 122]
[39 121]
[40 120]
[41 119]
[52 107]
[53 106]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
