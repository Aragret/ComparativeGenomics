%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGxxxxxxxxxxCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[31.61179924 379.75842285]
[31.61179924 364.75842285]
[31.61179924 349.75842285]
[31.61179924 334.75842285]
[31.61179924 319.75842285]
[31.61179924 304.75842285]
[31.61179924 289.75842285]
[31.61179924 274.75842285]
[31.61179924 259.75842285]
[31.61179924 244.75843811]
[30.05421829 229.83952332]
[26.95589638 215.16299438]
[23.85757446 200.48646545]
[22.76045227 215.44628906]
[11.91498852 225.80853271]
[-3.07928109 226.22312927]
[-14.48078060 216.47604370]
[-16.40289116 201.59970093]
[-7.85322380 189.27479553]
[6.75604248 185.86499023]
[-8.22367191 185.08514404]
[-23.20338631 184.30529785]
[-32.13648605 194.43730164]
[-45.08993149 197.50914001]
[-57.25957108 192.61280823]
[-64.26458740 181.75340271]
[-79.22483063 180.66209412]
[-94.18508148 179.57078552]
[-109.14533234 178.47947693]
[-114.43132019 192.62991333]
[-123.49092865 204.71710205]
[-135.58975220 213.76118469]
[-149.74696350 219.02899170]
[-164.81492615 220.09349060]
[-179.57214355 216.86837769]
[-192.82231140 209.61511230]
[-203.49128723 198.92169189]
[-210.71420288 185.65495300]
[-213.90551758 170.89039612]
[-212.80653381 155.82490540]
[-207.50633240 141.67977905]
[-198.43458557 129.60169983]
[-186.32669067 120.56978607]
[-172.16418457 115.31620026]
[-157.09515381 114.26683807]
[-142.34118652 117.50676727]
[-129.09831238 124.77333832]
[-118.44008636 135.47749329]
[-111.23049927 148.75146484]
[-108.05402374 163.51922607]
[-93.09377289 164.61053467]
[-78.13352203 165.70184326]
[-63.17327499 166.79315186]
[-50.96349716 155.27017212]
[-33.85949326 156.12875366]
[-22.42354202 169.32559204]
[-7.44382668 170.10543823]
[7.53588772 170.88526917]
[14.19575500 151.92256165]
[30.30216217 142.69631958]
[47.00905609 145.98243713]
[57.22253418 134.99678040]
[67.43601227 124.01111603]
[77.64949799 113.02544403]
[64.43250275 83.88694000]
[90.01393890 48.73841476]
[90.01393890 33.73841476]
[90.01393890 18.73841476]
[90.01393890 3.73841453]
[76.24007416 -2.83754897]
[66.69014740 -14.74391937]
[63.26030350 -29.61667824]
[66.63154602 -44.50282669]
[76.13451385 -56.44671249]
[89.88237762 -63.07686615]
[105.14550018 -63.07686615]
[118.89336395 -56.44671249]
[128.39633179 -44.50282669]
[131.76757812 -29.61667824]
[128.33773804 -14.74391937]
[118.78781128 -2.83754897]
[105.01393890 3.73841453]
[105.01393890 18.73841476]
[105.01393890 33.73841476]
[105.01393890 48.73841476]
[111.74192047 52.05266571]
[113.88790131 37.20696640]
[128.67015076 34.66036224]
[135.66004944 47.93218231]
[125.19789124 58.68116379]
[131.92587280 61.99541092]
[143.81825256 52.85367584]
[155.71063232 43.71194458]
[167.60301208 34.57020950]
[169.40351868 18.86881828]
[181.83102417 9.10497379]
[197.51251221 11.07139301]
[207.14440918 23.60143280]
[205.01231384 39.26124573]
[192.38113403 48.76013947]
[176.74475098 46.46258926]
[164.85237122 55.60432434]
[152.95999146 64.74605560]
[141.06761169 73.88779449]
[143.29600525 81.04908752]
[157.61868286 76.59249878]
[162.07505798 90.91522980]
[147.75282288 95.37168884]
[149.98123169 102.53298950]
[164.96095276 103.31282806]
[179.94065857 104.09267426]
[191.51261902 93.32860565]
[207.30334473 93.98335266]
[217.94447327 105.66847229]
[217.12281799 121.45138550]
[205.32583618 131.96836853]
[189.55249023 130.97988892]
[179.16081238 119.07238770]
[164.18110657 118.29254913]
[149.20138550 117.51270294]
[126.89414215 134.11337280]
[103.67973328 134.45851135]
[88.63516235 123.23892975]
[78.42167664 134.22459412]
[68.20819855 145.21025085]
[57.99472046 156.19592285]
[60.63920593 180.57812500]
[38.53409958 197.38815308]
[41.63241959 212.06466675]
[44.73074341 226.74119568]
[51.46312714 213.33691406]
[63.91953659 204.97999573]
[78.87566376 203.83364868]
[92.46017456 210.19456482]
[101.15673828 222.41624451]
[102.71429443 237.33515930]
[96.72966766 251.08958435]
[84.75195312 260.11923218]
[69.88156128 262.08679199]
[55.96763229 256.48300171]
[46.61179733 244.75843811]
[46.61179733 259.75842285]
[46.61179733 274.75842285]
[46.61179733 289.75842285]
[46.61179733 304.75842285]
[46.61179733 319.75842285]
[46.61179733 334.75842285]
[46.61179733 349.75842285]
[46.61179733 364.75842285]
[46.61179733 379.75842285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[20 58]
[21 57]
[22 56]
[26 53]
[27 52]
[28 51]
[29 50]
[61 126]
[62 125]
[63 124]
[64 123]
[66 85]
[67 84]
[68 83]
[69 82]
[91 104]
[92 103]
[93 102]
[94 101]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
