%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGxxxxxxxxxxUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[7.39771366 164.99824524]
[2.28982830 157.03224182]
[-11.13762093 163.71832275]
[-24.56507111 170.40438843]
[-37.99251938 177.09046936]
[-51.41996765 183.77655029]
[-62.60826492 193.76763916]
[-70.76493073 206.35607910]
[-78.92160034 218.94451904]
[-87.07826233 231.53295898]
[-95.23493195 244.12139893]
[-93.30290985 260.04769897]
[-104.65229797 271.38662720]
[-120.57679749 269.43991089]
[-128.86051941 255.70092773]
[-123.14887238 240.70903015]
[-107.82337189 235.96473694]
[-99.66670227 223.37629700]
[-91.51004028 210.78785706]
[-83.35337067 198.19941711]
[-75.19670868 185.61097717]
[-88.70230103 192.13775635]
[-103.30744934 195.55677795]
[-118.30673218 195.70286560]
[-132.97570801 192.56900024]
[-146.60588074 186.30653381]
[-158.53890991 177.21792603]
[-168.19845581 165.74215698]
[-175.11795044 152.43348694]
[-178.96321106 137.93473816]
[-179.54850769 122.94615936]
[-176.84556580 108.19169617]
[-170.98493958 94.38397980]
[-162.24969482 82.18990326]
[-151.06173706 72.19843292]
[-137.96142578 64.89215088]
[-123.58149719 60.62393188]
[-108.61648560 59.59994125]
[-93.78919983 61.86963272]
[-79.81577301 67.32337952]
[-67.37110901 75.69776917]
[-57.05628204 86.58833313]
[-49.36948395 99.46905518]
[-44.68198013 113.71781921]
[-43.22017288 128.64642334]
[-45.05466461 143.53382874]
[-50.09685516 157.66096497]
[-58.10604477 170.34909058]
[-44.67859650 163.66302490]
[-31.25114632 156.97694397]
[-17.82369614 150.29086304]
[-4.39624691 143.60479736]
[-9.67780685 127.76208496]
[-12.56969833 111.31448364]
[-13.00891209 94.62036896]
[-10.98587799 78.04346466]
[-6.54467535 61.94495010]
[0.21793117 46.67558289]
[9.15459728 32.56805420]
[20.07061005 19.92973518]
[32.72813034 9.03599453]
[46.85137558 0.12418499]
[62.13262939 -6.61152267]
[78.23893738 -11.02437019]
[94.81938171 -13.01820946]
[95.12735748 -28.01504707]
[95.43533325 -43.01188660]
[95.74331665 -58.00872421]
[81.51847839 -63.19840622]
[69.75103760 -72.72763062]
[61.71744537 -85.56274414]
[58.28911209 -100.31147766]
[59.83792496 -115.37400818]
[66.19588470 -129.11647034]
[76.67331696 -140.04817200]
[90.13371277 -146.98332214]
[105.11698914 -149.16966248]
[119.99787903 -146.37004089]
[133.16220093 -138.88810730]
[143.18200684 -127.53546906]
[148.97039795 -113.54357147]
[149.89952087 -98.43015289]
[145.86856079 -83.83460236]
[137.31478882 -71.34013367]
[125.16605377 -62.30205154]
[110.74015045 -57.70074463]
[110.43217468 -42.70390701]
[110.12419891 -27.70706940]
[109.81621552 -12.71023178]
[134.60424805 -7.71490622]
[157.66366577 2.66112924]
[177.84260559 17.89955711]
[194.13305664 37.23917007]
[205.72125244 59.71389008]
[220.06130981 55.31359100]
[234.40138245 50.91329193]
[248.74143982 46.51298904]
[263.08151245 42.11268997]
[274.00476074 30.66747284]
[288.44183350 34.33077621]
[302.78192139 29.93047523]
[305.02795410 14.83351898]
[313.60897827 2.21097612]
[326.82125854 -5.43093824]
[342.04144287 -6.57491684]
[356.24755859 -0.99382168]
[366.61898804 10.20421696]
[371.09649658 24.79581833]
[368.79101562 39.88381195]
[360.16033936 52.47246552]
[346.91809082 60.06229019]
[331.69351196 61.14632416]
[317.50946045 55.50933075]
[307.18222046 44.27053452]
[292.84213257 48.67083740]
[282.94458008 59.80131531]
[267.48181152 56.45275116]
[253.14173889 60.85305023]
[238.80168152 65.25334930]
[224.46162415 69.65364838]
[210.12155151 74.05395508]
[211.90463257 83.34740448]
[212.90481567 92.75735474]
[213.11514282 102.21797180]
[212.53411865 111.66307831]
[211.16580200 121.02658844]
[209.01979065 130.24299622]
[206.11108398 139.24783325]
[202.46003723 147.97808838]
[198.09217834 156.37268066]
[193.03807068 164.37290955]
[187.33308411 171.92279053]
[181.01712036 178.96949768]
[174.13435364 185.46374512]
[166.73295593 191.36009216]
[158.86470032 196.61729431]
[150.58464050 201.19856262]
[141.95068359 205.07185364]
[133.02323914 208.21006775]
[123.86477661 210.59126282]
[114.53935242 212.19876099]
[105.11221313 213.02133179]
[95.64931488 213.05320740]
[86.21684265 212.29415894]
[76.88080597 210.74952698]
[67.70650482 208.43008423]
[58.75812531 205.35208130]
[50.09827423 201.53704834]
[41.78752899 197.01165771]
[33.88403702 191.80758667]
[26.44308662 185.96124268]
[19.51673508 179.51350403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[65 89]
[66 88]
[67 87]
[68 86]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
