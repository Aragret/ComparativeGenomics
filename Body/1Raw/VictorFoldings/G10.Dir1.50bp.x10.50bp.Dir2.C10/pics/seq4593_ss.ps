%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGxxxxxxxxxxCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.12158966 436.83959961]
[103.12158966 421.83959961]
[103.12158966 406.83959961]
[103.12158966 391.83959961]
[103.12158966 376.83959961]
[103.12158966 361.83959961]
[103.12158966 346.83959961]
[103.12158966 331.83959961]
[103.12158966 316.83959961]
[103.12158966 301.83959961]
[88.04051971 298.91479492]
[73.81001282 293.11578369]
[60.97234344 284.66165161]
[50.01708603 273.87261963]
[41.36244583 261.15805054]
[35.33929443 247.00080872]
[32.17852402 231.93899536]
[32.00218582 216.54548645]
[34.81879807 201.40611267]
[40.52293015 187.09738159]
[48.89916229 174.16453552]
[59.63021851 163.10076904]
[72.30897522 154.32839966]
[86.45392609 148.18276978]
[101.52745056 144.89944458]
[101.22344971 129.90252686]
[76.79184723 110.28864288]
[85.13848114 85.38258362]
[78.94499207 71.72093201]
[72.75150299 58.05928040]
[60.94412613 52.77339172]
[56.08180618 41.21991730]
[60.27936554 29.83577347]
[54.36402893 16.05140686]
[48.44869232 2.26703882]
[42.53335190 -11.51732826]
[29.98092079 -21.14785385]
[32.07210159 -35.89493179]
[26.15676117 -49.67929840]
[20.24142456 -63.46366501]
[14.32608604 -77.24803162]
[8.41074848 -91.03240204]
[-6.22385311 -91.72327423]
[-19.12867737 -98.50470734]
[-27.91057777 -110.04959869]
[-30.97048187 -124.15413666]
[-27.79428482 -138.15834045]
[-39.65592194 -147.33993530]
[-51.51755905 -156.52153015]
[-63.37919235 -165.70310974]
[-75.24082947 -174.88470459]
[-90.48246002 -171.38801575]
[-104.38224030 -178.55253601]
[-110.37711334 -192.99536133]
[-105.63649750 -207.89706421]
[-92.39875793 -216.22149658]
[-76.91434479 -214.03811646]
[-66.49453735 -202.37786865]
[-66.05924225 -186.74633789]
[-54.19760513 -177.56474304]
[-42.33596802 -168.38316345]
[-30.47433281 -159.20156860]
[-18.61269569 -150.01997375]
[-14.50384617 -152.87661743]
[-10.01096344 -155.08047485]
[-5.23695421 -156.58110046]
[-5.23695421 -171.58110046]
[-5.23695421 -186.58110046]
[-16.13150787 -197.71421814]
[-15.91782665 -212.92636108]
[-5.23695421 -223.24403381]
[-5.23695421 -238.24403381]
[-18.57808304 -245.85388184]
[-26.31305122 -259.12286377]
[-26.36119461 -274.48168945]
[-18.70956039 -287.79888916]
[-5.41640043 -295.49224854]
[9.94249153 -295.49224854]
[23.23565102 -287.79888916]
[30.88728523 -274.48168945]
[30.83914375 -259.12286377]
[23.10417366 -245.85388184]
[9.76304531 -238.24403381]
[9.76304531 -223.24403381]
[20.44391823 -212.92636108]
[20.65759850 -197.71421814]
[9.76304531 -186.58110046]
[9.76304531 -171.58110046]
[9.76304531 -156.58110046]
[26.13170433 -147.56274414]
[35.08311462 -131.02275085]
[33.66317368 -112.15092468]
[22.19511604 -96.94773865]
[28.11045265 -83.16336823]
[34.02579117 -69.37900543]
[39.94112778 -55.59463501]
[45.85646820 -41.81026840]
[57.98579407 -33.16569138]
[56.31771851 -17.43266678]
[62.23305893 -3.64829898]
[68.14839935 10.13606834]
[74.06373596 23.92043495]
[88.66065979 33.61671448]
[86.41315460 51.86579132]
[92.60664368 65.52744293]
[98.80013275 79.18909454]
[110.63413239 78.62648773]
[122.35466766 85.03709412]
[129.85301208 97.88934326]
[144.79066467 96.52312469]
[159.72831726 95.15690613]
[171.05587769 83.79619598]
[186.98410034 85.71228027]
[195.29421997 99.43531036]
[189.61140442 114.43815613]
[174.29505920 119.21190643]
[161.09454346 110.09455872]
[146.15689087 111.46077728]
[131.21923828 112.82699585]
[146.16352844 111.53540802]
[159.25137329 118.86399078]
[165.95999146 132.28019714]
[163.97103882 147.14775085]
[153.97187805 158.32884216]
[139.41790771 161.95957947]
[125.33861542 156.78529358]
[116.59938812 144.59407043]
[116.22036743 129.59851074]
[116.52436829 144.59542847]
[130.98046875 147.06315613]
[144.72842407 152.15635681]
[157.29594421 159.69845581]
[168.25161743 169.42872620]
[177.21963501 181.01141357]
[183.89277649 194.04719543]
[188.04290771 208.08708191]
[189.52876282 222.64775085]
[188.30073547 237.22828674]
[184.40260315 251.32734680]
[177.96989441 264.46044922]
[169.22520447 276.17660522]
[158.47052002 286.07373047]
[146.07675171 293.81262207]
[132.47094727 299.12838745]
[118.12158966 301.83959961]
[118.12158966 316.83959961]
[118.12158966 331.83959961]
[118.12158966 346.83959961]
[118.12158966 361.83959961]
[118.12158966 376.83959961]
[118.12158966 391.83959961]
[118.12158966 406.83959961]
[118.12158966 421.83959961]
[118.12158966 436.83959961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 129]
[26 128]
[28 106]
[29 105]
[30 104]
[33 102]
[34 101]
[35 100]
[36 99]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[66 89]
[67 88]
[68 87]
[71 84]
[72 83]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
