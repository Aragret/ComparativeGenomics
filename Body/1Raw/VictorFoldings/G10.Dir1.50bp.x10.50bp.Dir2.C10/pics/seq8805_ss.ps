%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUCACAUGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCAxxxxxxxxxxCCUAGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.23141479 272.36709595]
[90.60743713 257.38006592]
[89.98345947 242.39305115]
[89.35948181 227.40603638]
[88.73550415 212.41902161]
[88.11152649 197.43200684]
[87.48754883 182.44499207]
[86.86357117 167.45797729]
[72.54097748 163.00115967]
[63.52344513 174.98799133]
[54.50591660 186.97482300]
[45.48838425 198.96165466]
[47.94846725 214.57330322]
[38.58148193 227.30261230]
[22.94469833 229.59748840]
[10.31513977 220.09645081]
[8.18570137 204.43627930]
[17.81974030 191.90788269]
[33.50155258 189.94412231]
[42.51908112 177.95729065]
[51.53661346 165.97045898]
[60.55414200 153.98362732]
[45.36156082 138.48135376]
[35.94129562 118.93733215]
[33.28098679 97.41506958]
[18.28829002 97.88311768]
[3.29559350 98.35115814]
[-11.69710255 98.81919861]
[-16.14415741 113.29339600]
[-25.05204201 125.53791809]
[-37.45449066 134.22457886]
[-52.00618744 138.41108704]
[-67.12866211 137.64335632]
[-81.18154907 132.00463867]
[-92.64049530 122.10659790]
[-100.26251984 109.02288818]
[-103.22084045 94.17273712]
[-101.19455719 79.16696930]
[-94.40348053 65.63330841]
[-83.58423615 55.03978729]
[-69.91043091 48.53549957]
[-54.86529160 46.82599258]
[-40.08079910 50.09669495]
[-27.16066551 57.99282837]
[-17.50637245 69.65787506]
[-12.16514492 83.82649994]
[2.82755136 83.35845947]
[17.82024765 82.89041901]
[32.81294250 82.42237854]
[38.15445709 68.40566254]
[27.27563095 58.07845688]
[16.39680481 47.75125504]
[5.51798058 37.42404938]
[-5.36084461 27.09684372]
[-21.01104164 20.57705116]
[-19.07844925 3.73361206]
[-2.35826421 0.92794931]
[4.96636009 16.21801758]
[15.84518528 26.54522324]
[26.72401047 36.87242889]
[37.60283661 47.19963455]
[48.48166275 57.52683640]
[58.28518677 48.99216843]
[69.41949463 42.62311554]
[81.42202759 38.60768127]
[93.80850983 37.03778076]
[94.12056732 22.04102516]
[94.43262482 7.04427195]
[80.38577271 1.29532504]
[69.36692047 -9.14255619]
[62.86627960 -22.85773468]
[61.76300812 -37.99534607]
[66.20631409 -52.50814819]
[75.59527588 -64.43341064]
[88.66011047 -72.15833282]
[103.63391876 -74.63818359]
[118.49160004 -71.53759003]
[131.22378540 -63.27587509]
[140.10855103 -50.97037125]
[143.94429016 -36.28529358]
[142.21228027 -21.20668221]
[135.14672852 -7.77379370]
[123.70321655 2.19668531]
[109.42937469 7.35632801]
[109.11731720 22.35308266]
[108.80526733 37.34983444]
[119.34570312 39.76446533]
[129.32098389 43.93881989]
[138.43966675 49.75094604]
[146.43537903 57.03104782]
[153.07453918 65.56644440]
[158.16316223 75.10778809]
[161.55261230 85.37632751]
[176.45451355 83.66363525]
[191.35641479 81.95095062]
[206.25831604 80.23825836]
[221.16021729 78.52556610]
[236.06211853 76.81288147]
[237.96664429 61.85840607]
[243.39530945 47.79451752]
[252.03251648 35.43886948]
[263.37609863 25.50980186]
[276.76657104 18.58457756]
[291.42541504 15.06582260]
[306.50039673 15.15810966]
[321.11508179 18.85607529]
[334.41973877 25.94472313]
[345.64093018 36.01192856]
[354.12622070 48.47240067]
[359.38229370 62.60169983]
[361.10357666 77.57836914]
[359.19000244 92.53168488]
[353.75280762 106.59227753]
[345.10809326 118.94268799]
[333.75848389 128.86488342]
[320.36383057 135.78198242]
[305.70285034 139.29185486]
[290.62792969 139.19042969]
[276.01550293 135.48359680]
[262.71511841 128.38688660]
[251.50006104 118.31288147]
[243.02232361 105.84726715]
[237.77481079 91.71478271]
[222.87290955 93.42747498]
[207.97100830 95.14015961]
[193.06910706 96.85285187]
[178.16720581 98.56554413]
[163.26530457 100.27822876]
[163.06416321 107.78092194]
[161.97253418 115.23952484]
[159.99810791 122.54827118]
[157.16114807 129.60261536]
[153.49427795 136.30067444]
[149.04219055 142.54479980]
[143.86105347 148.24288940]
[138.01783752 153.30982971]
[131.58946228 157.66867065]
[124.66178894 161.25190735]
[117.32845306 164.00241089]
[109.68961334 165.87435913]
[101.85058594 166.83399963]
[102.47456360 181.82101440]
[103.09854126 196.80802917]
[103.72251892 211.79504395]
[104.34649658 226.78205872]
[104.97047424 241.76907349]
[105.59445190 256.75610352]
[106.21842957 271.74310303]
[112.91841888 287.31701660]
[99.80789185 298.06643677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 22]
[10 21]
[11 20]
[12 19]
[25 49]
[26 48]
[27 47]
[28 46]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[66 86]
[67 85]
[68 84]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
