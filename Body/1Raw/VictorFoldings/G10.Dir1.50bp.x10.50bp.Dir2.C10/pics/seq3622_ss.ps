%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGxxxxxxxxxxAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.25534058 158.29632568]
[114.07091522 143.31852722]
[106.17443085 156.07177734]
[98.27795410 168.82504272]
[90.38146973 181.57829285]
[82.48498535 194.33154297]
[82.37180328 212.71681213]
[66.65319824 220.46084595]
[59.02022934 233.37355042]
[51.38726044 246.28623962]
[53.97150421 262.11978149]
[43.09720993 273.91510010]
[27.10620689 272.62380981]
[18.26542473 259.23651123]
[23.35675430 244.02276611]
[38.47456360 238.65327454]
[46.10753250 225.74058533]
[53.74050140 212.82788086]
[51.03646851 200.99781799]
[57.34165192 190.16195679]
[69.73172760 186.43507385]
[77.62821198 173.68180847]
[85.52469635 160.92855835]
[93.42117310 148.17529297]
[101.31765747 135.42204285]
[97.04743195 129.25639343]
[84.23674011 110.75946808]
[69.52121735 113.66694641]
[54.80569458 116.57441711]
[48.41371155 130.71380615]
[34.91492844 138.36640930]
[19.49991035 136.58967590]
[8.09604073 126.06678009]
[5.08834314 110.84398651]
[11.63333797 96.77478027]
[25.21434021 89.26905060]
[40.60918045 91.21290588]
[51.89822388 101.85889435]
[66.61374664 98.95142365]
[81.32926941 96.04394531]
[82.85846710 88.70149994]
[85.91686249 74.01660156]
[87.44606018 66.67415619]
[75.11477661 58.13369370]
[62.78349304 49.59323502]
[50.23448944 58.13062286]
[35.44794846 61.55446243]
[20.42363167 59.40171432]
[7.19345188 51.96351624]
[-2.45331693 40.24582672]
[-7.21202898 25.83336258]
[-6.43910694 10.67529392]
[-0.23908280 -3.17837477]
[10.54954147 -13.85404873]
[24.46769333 -19.90793228]
[39.63305664 -20.52128601]
[53.99464035 -15.61115742]
[65.61016083 -5.84160423]
[72.90870667 7.46612310]
[74.90322113 22.51226425]
[71.32395172 37.26195145]
[83.65523529 45.80241013]
[95.98651886 54.34286880]
[89.25931549 40.93597794]
[82.53210449 27.52908897]
[75.80490112 14.12219906]
[69.07769775 0.71530867]
[57.57582092 -8.91313267]
[48.12254333 -20.55939865]
[41.06525421 -33.79551315]
[36.66329956 -48.13506699]
[35.07844162 -63.05110550]
[36.36892319 -77.99549103]
[40.48731995 -92.41904449]
[47.28228760 -105.79171753]
[56.50412369 -117.62209320]
[67.81393433 -127.47541809]
[80.79611969 -134.98960876]
[94.97358704 -139.88851929]
[109.82534790 -141.99214172]
[124.80562592 -141.22314453]
[139.36390686 -137.60980225]
[152.96522522 -131.28491211]
[165.10972595 -122.48088074]
[175.35115051 -111.52125549]
[183.31311035 -98.80876923]
[188.70303345 -84.81060791]
[191.32284546 -70.04116058]
[191.07627869 -55.04318237]
[187.97239685 -40.36783600]
[182.12524414 -26.55440331]
[173.74971008 -14.11051273]
[163.15357971 -3.49345231]
[150.72009277 4.90996027]
[142.65429688 17.55681038]
[134.58848572 30.20366096]
[126.52268219 42.85050964]
[118.45687866 55.49736023]
[131.59851074 48.26565552]
[144.74014282 41.03395462]
[152.76202393 26.73075485]
[169.16104126 26.79689217]
[177.06729126 41.16432953]
[168.34750366 55.05307770]
[151.97184753 54.17558670]
[138.83021545 61.40728760]
[125.68858337 68.63899231]
[140.68850708 68.59300995]
[155.68844604 68.54702759]
[170.68836975 68.50104523]
[184.01637268 61.61886215]
[198.08404541 56.41302872]
[212.68147278 52.96121216]
[227.59085083 51.31492615]
[242.58972168 51.49872971]
[257.45428467 53.50988007]
[271.96273804 57.31837082]
[285.89862061 62.86737442]
[299.05398560 70.07409668]
[311.23251343 78.83100128]
[322.25250244 89.00742340]
[331.94952393 100.45153046]
[340.17892456 112.99255371]
[346.81784058 126.44337463]
[351.76727295 140.60328674]
[354.95336914 155.26101685]
[356.32855225 170.19784546]
[355.87231445 185.19090271]
[353.59146118 200.01647949]
[349.52005005 214.45336914]
[343.71881104 228.28613281]
[336.27429199 241.30839539]
[327.29760742 253.32585144]
[316.92266846 264.15917969]
[305.30432129 273.64672852]
[292.61587524 281.64691162]
[279.04666138 288.04043579]
[264.79919434 292.73181152]
[250.08599854 295.65109253]
[235.12666321 296.75473022]
[220.14436340 296.02621460]
[205.36265564 293.47640991]
[191.00212097 289.14343262]
[177.27700806 283.09185791]
[164.39212036 275.41201782]
[152.53973389 266.21853638]
[141.89666748 255.64851379]
[132.62173462 243.85971069]
[124.85333252 231.02803040]
[118.70738220 217.34494019]
[114.27557373 203.01457214]
[111.62418365 188.25195312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 25]
[3 24]
[4 23]
[5 22]
[6 21]
[8 18]
[9 17]
[10 16]
[27 40]
[28 39]
[29 38]
[43 63]
[44 62]
[45 61]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
