%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAxxxxxxxxxxAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.97261047 188.99208069]
[199.73002625 181.94694519]
[186.48744202 174.90180969]
[171.61727905 175.75491333]
[163.06797791 162.44252014]
[149.82539368 155.39738464]
[136.58280945 148.35224915]
[123.34021759 141.30711365]
[108.88552856 145.31486511]
[101.16144562 158.17326355]
[103.63366699 174.02468872]
[92.67623901 185.74281311]
[76.69477081 184.33848572]
[67.94886780 170.88899231]
[73.14764404 155.71163940]
[88.30304718 150.44917297]
[96.02713013 137.59077454]
[91.51836395 131.59735107]
[82.90462494 143.87756348]
[68.56372070 139.48002625]
[68.31462860 124.48209381]
[82.50083160 119.61052704]
[77.99207306 113.61711121]
[63.49647141 117.47426605]
[49.00087738 121.33142853]
[34.50527954 125.18858337]
[30.58191299 140.03791809]
[19.74812698 150.92481995]
[4.91815996 154.92077637]
[-9.91880512 150.95088196]
[-20.77169609 140.08302307]
[-24.72114372 125.24060822]
[-20.70476341 110.41616058]
[-9.80294132 99.59738159]
[5.05178595 95.69448090]
[19.86357117 99.75730896]
[30.64812088 110.69298553]
[45.14371490 106.83583069]
[59.63931274 102.97866821]
[74.13491058 99.12151337]
[76.31174469 84.28030396]
[63.53438950 76.42288208]
[50.75703049 68.56545258]
[37.97967529 60.70802689]
[25.20231819 52.85060120]
[12.45473003 55.07611084]
[1.95887089 48.21637726]
[-0.92750913 36.42756653]
[-13.53863716 28.30602264]
[-29.93580246 28.05111122]
[-37.67613602 13.59361076]
[-28.79704475 -0.19383876]
[-12.43257809 0.87210697]
[-5.41709518 15.69489479]
[7.19403315 23.81643677]
[24.71500587 23.69199944]
[33.05974197 40.07324600]
[45.83710098 47.93067169]
[58.61445618 55.78809738]
[71.39181519 63.64552307]
[84.16917419 71.50294495]
[90.82675171 68.04944611]
[91.50266266 53.06468582]
[104.14190674 61.14244843]
[110.79948425 57.68894958]
[111.73511505 42.71815872]
[112.67073822 27.74736786]
[98.52681732 22.41436768]
[86.58422089 13.14798832]
[77.90487671 0.77219051]
[73.26054382 -13.61257935]
[73.06420135 -28.72723579]
[77.33329773 -43.22779465]
[85.68823242 -55.82487869]
[97.38608551 -65.39836121]
[111.38670349 -71.09696960]
[126.44515228 -72.41399384]
[141.22244263 -69.23233032]
[154.40460205 -61.83487701]
[164.81945801 -50.87941742]
[171.54095459 -37.34010696]
[173.97138977 -22.42084694]
[171.89468384 -7.44824839]
[165.49548340 6.24633408]
[155.34278870 17.44518852]
[142.33940125 25.15251923]
[127.64153290 28.68299675]
[126.70590210 43.65378952]
[125.77027893 58.62458038]
[144.64971924 93.97998810]
[130.38536072 128.06452942]
[143.62794495 135.10966492]
[156.87052917 142.15480042]
[170.11311340 149.19993591]
[185.93046570 148.85075378]
[193.53257751 161.65922546]
[206.77516174 168.70436096]
[220.01774597 175.74949646]
[228.53515625 163.38214111]
[238.40684509 152.06632996]
[249.50410461 141.94960022]
[261.68228149 133.16381836]
[274.78259277 125.82355499]
[288.63427734 120.02449036]
[303.05670166 115.84223175]
[317.86187744 113.33129883]
[332.85675049 112.52442932]
[347.84588623 113.43213654]
[362.63381958 116.04260254]
[377.02780151 120.32177734]
[390.84014893 126.21388245]
[403.89077759 133.64208984]
[416.00958252 142.50958252]
[427.03854370 152.70072937]
[436.83392334 164.08268738]
[445.26794434 176.50704956]
[452.23068237 189.81185913]
[457.63137817 203.82365417]
[461.39962769 218.35974121]
[463.48629761 233.23065186]
[463.86416626 248.24247742]
[462.52828979 263.19952393]
[459.49615479 277.90679932]
[454.80722046 292.17254639]
[448.52264404 305.81079102]
[440.72436523 318.64376831]
[431.51406860 330.50408936]
[421.01177979 341.23721313]
[409.35443115 350.70318604]
[396.69403076 358.77856445]
[383.19561768 365.35812378]
[369.03515625 370.35604858]
[354.39727783 373.70718384]
[339.47280884 375.36785889]
[324.45629883 375.31640625]
[309.54357910 373.55349731]
[294.92898560 370.10211182]
[280.80313110 365.00729370]
[267.35009766 358.33538818]
[254.74533081 350.17343140]
[243.15313721 340.62780762]
[232.72465515 329.82299805]
[223.59582520 317.89981079]
[215.88566589 305.01370239]
[209.69470215 291.33270264]
[205.10365295 277.03515625]
[202.17234802 262.30746460]
[200.93902588 247.34161377]
[201.41975403 232.33271790]
[203.60826111 217.47647095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[5 94]
[6 93]
[7 92]
[8 91]
[9 17]
[10 16]
[23 40]
[24 39]
[25 38]
[26 37]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[48 55]
[49 54]
[65 89]
[66 88]
[67 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
