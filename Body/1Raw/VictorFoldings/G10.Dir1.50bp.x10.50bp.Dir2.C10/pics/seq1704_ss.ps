%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUCCUCAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAxxxxxxxxxxAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCAUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.32041931 445.77041626]
[102.32041931 430.77041626]
[102.32041931 415.77041626]
[102.32041931 400.77041626]
[102.32041931 385.77041626]
[102.32041931 370.77041626]
[102.32041931 355.77041626]
[102.32041931 340.77041626]
[102.32041931 325.77041626]
[102.32041931 310.77041626]
[86.22231293 305.94448853]
[72.36246490 296.40814209]
[62.08028030 283.06970215]
[56.37348938 267.20559692]
[55.80131912 250.33815002]
[60.42971802 234.08953857]
[69.82395935 220.02574158]
[83.08944702 209.50569153]
[98.95691681 203.54989624]
[98.02128601 188.57911682]
[97.08566284 173.60832214]
[96.15003204 158.63752747]
[95.21440125 143.66673279]
[85.73430634 141.54727173]
[76.95181274 137.39608765]
[69.29641724 131.41616821]
[63.14246750 123.89996338]
[58.79090881 115.21501160]
[56.45453262 105.78602600]
[56.24759293 96.07409668]
[58.18021011 86.55414581]
[62.15787506 77.69171906]
[67.98607635 69.92019653]
[58.96854782 57.93336487]
[49.95101929 45.94652939]
[40.93348694 33.95969772]
[27.87437057 41.38181305]
[13.97332859 47.07297897]
[-0.54136962 50.93973923]
[-15.43138027 52.91860580]
[-30.45219612 52.97707367]
[-45.35716248 51.11418915]
[-59.90152359 47.36054230]
[-73.84645081 41.77777100]
[-86.96295166 34.45754623]
[-99.03564453 25.52007675]
[-109.86628723 15.11212254]
[-119.27703094 3.40459037]
[-127.11333466 -9.41026974]
[-133.24652100 -23.12202835]
[-137.57589722 -37.50552368]
[-140.03033447 -52.32456589]
[-140.56956482 -67.33581543]
[-139.18470764 -82.29277039]
[-135.89851379 -96.94982147]
[-130.76495361 -111.06629944]
[-123.86830139 -124.41038513]
[-115.32183838 -136.76295471]
[-105.26587677 -147.92118835]
[-93.86556244 -157.70184326]
[-81.30809021 -165.94430542]
[-67.79966736 -172.51322937]
[-53.56211472 -177.30076599]
[-38.82922745 -180.22828674]
[-23.84292984 -181.24769592]
[-8.84931278 -180.34230042]
[5.90541649 -177.52693176]
[20.17897034 -172.84782410]
[33.73696518 -166.38183594]
[46.35676956 -158.23512268]
[57.83115005 -148.54147339]
[67.97168732 -137.46005249]
[76.61186218 -125.17283630]
[83.60980225 -111.88159180]
[88.85059357 -97.80457306]
[92.24817657 -83.17293549]
[93.74675751 -68.22695160]
[93.32172394 -53.21203613]
[90.98006439 -38.37475204]
[86.76023102 -23.95874214]
[80.73150635 -10.20073223]
[72.99290466 2.67336202]
[63.67148590 14.45213509]
[52.92031860 24.94216919]
[61.93785095 36.92900085]
[70.95538330 48.91583252]
[79.97290802 60.90266418]
[92.57229614 55.42790985]
[106.62523651 54.02965927]
[120.80947876 57.07420731]
[133.71910095 64.49873352]
[145.22090149 54.87020493]
[156.72270203 45.24168015]
[168.22451782 35.61315155]
[173.33985901 20.03222466]
[189.44427490 16.93707466]
[199.97091675 29.51172638]
[194.09088135 44.82045746]
[177.85304260 47.11495590]
[166.35124207 56.74348068]
[154.84942627 66.37200928]
[143.34762573 76.00053406]
[148.54304504 90.07205200]
[163.54223633 89.91601562]
[178.54142761 89.75997925]
[193.54060364 89.60394287]
[208.53979492 89.44790649]
[223.53898621 89.29187012]
[231.65693665 76.17308807]
[245.58856201 69.54637909]
[260.88833618 71.52631378]
[272.67416382 81.48110199]
[277.18524170 96.23419189]
[272.98208618 111.07794189]
[261.40588379 121.27576447]
[246.15060425 123.57356262]
[232.08413696 117.23812103]
[223.69502258 104.29106140]
[208.69583130 104.44709778]
[193.69664001 104.60313416]
[178.69746399 104.75917053]
[163.69827271 104.91520691]
[148.69908142 105.07124329]
[134.90916443 130.63522339]
[110.18519592 142.73110962]
[111.12082672 157.70190430]
[112.05644989 172.67269897]
[112.99208069 187.64347839]
[113.92771149 202.61427307]
[126.96154785 205.26159668]
[138.96054077 210.97428894]
[149.21626282 219.40946960]
[157.12457275 230.06369019]
[162.22122192 242.30297852]
[164.20903015 255.40055847]
[162.97528076 268.58001709]
[158.59809875 281.06134033]
[151.34147644 292.10702515]
[141.63938904 301.06573486]
[130.06983948 307.41064453]
[117.32041931 310.77041626]
[117.32041931 325.77041626]
[117.32041931 340.77041626]
[117.32041931 355.77041626]
[117.32041931 370.77041626]
[117.32041931 385.77041626]
[117.32041931 400.77041626]
[117.32041931 415.77041626]
[117.32041931 430.77041626]
[117.32041931 445.77041626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[33 87]
[34 86]
[35 85]
[36 84]
[91 102]
[92 101]
[93 100]
[94 99]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
