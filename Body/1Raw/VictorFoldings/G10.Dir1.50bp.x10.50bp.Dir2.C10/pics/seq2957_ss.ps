%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCxxxxxxxxxxCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.33872986 265.03244019]
[120.33872986 250.03244019]
[120.33872986 235.03244019]
[120.33872986 220.03244019]
[120.33872986 205.03244019]
[120.33872986 190.03244019]
[120.33872986 175.03244019]
[120.33872986 160.03244019]
[120.33872986 145.03244019]
[120.33872986 130.03244019]
[101.32595062 133.14659119]
[85.17886353 126.16925812]
[76.32823181 112.93766785]
[61.68472672 116.18849945]
[47.04122543 119.43932343]
[32.39772415 122.69014740]
[19.15818024 135.44531250]
[2.63970399 129.60238647]
[-11.81498432 133.61012268]
[-26.13758087 138.06694031]
[-40.46017838 142.52375793]
[-54.78277588 146.98057556]
[-69.10537720 151.43737793]
[-83.42797089 155.89419556]
[-97.75057220 160.35101318]
[-109.88401794 174.16258240]
[-126.83102417 169.71296692]
[-141.05780029 174.46678162]
[-154.16424561 185.22119141]
[-168.12660217 175.60406494]
[-162.75048828 159.52508545]
[-145.81161499 160.23999023]
[-131.58483887 155.48617554]
[-125.87519836 144.77603149]
[-114.00987244 140.72227478]
[-102.20738220 146.02841187]
[-87.88478851 141.57160950]
[-73.56218719 137.11479187]
[-59.23959351 132.65797424]
[-44.91699600 128.20115662]
[-30.59439659 123.74433899]
[-16.27180099 119.28752136]
[-14.30681419 116.28646851]
[-10.75913334 114.11492157]
[-6.04753304 113.52060699]
[-0.91505796 115.02967834]
[5.66510248 104.83120728]
[17.82633400 101.77777863]
[29.14689827 108.04664612]
[43.79040146 104.79582214]
[58.43390274 101.54499817]
[73.07740021 98.29416656]
[81.93498993 75.95522308]
[107.20198822 67.61812592]
[132.02442932 82.96923065]
[132.33648682 67.97248077]
[132.64854431 52.97572708]
[117.86296844 50.25856018]
[103.70478058 45.20468140]
[90.54069519 37.94499207]
[78.71170044 28.66753769]
[68.52420044 17.61262703]
[60.24207687 5.06661081]
[54.07984924 -8.64554119]
[50.19713593 -23.16865158]
[48.69451141 -38.12653351]
[49.61089706 -53.13174820]
[52.92255020 -67.79561615]
[58.54370117 -81.73831940]
[66.32874298 -94.59869385]
[76.07601929 -106.04364014]
[87.53306580 -115.77668762]
[100.40310669 -123.54574585]
[114.35277557 -129.14956665]
[129.02075195 -132.44300842]
[144.02708435 -133.34074402]
[158.98309326 -131.81954956]
[173.50137329 -127.91879272]
[187.20585632 -121.73953247]
[199.74157715 -113.44182587]
[210.78381348 -103.24060059]
[220.04656982 -91.40009308]
[227.28990173 -78.22700500]
[232.32618713 -64.06254578]
[235.02497864 -49.27360535]
[235.31637573 -34.24325943]
[233.19282532 -19.36083031]
[228.70933533 -5.01180696]
[221.98204041 8.43213654]
[213.18518066 20.62277031]
[202.54663086 31.24432564]
[190.34194946 40.02167892]
[176.88726807 46.72747803]
[162.53109741 51.18802643]
[147.64529419 53.28778458]
[147.33323669 68.28453827]
[147.02117920 83.28128815]
[157.34838867 94.16011810]
[172.34107971 94.62815857]
[187.33378601 95.09619904]
[202.32647705 95.56423950]
[217.31916809 96.03228760]
[232.31187439 96.50032806]
[247.30456543 96.96836853]
[239.40780640 84.21527863]
[244.25372314 70.01960754]
[258.30035400 64.75724030]
[271.28073120 72.27454376]
[273.70724487 87.07697296]
[263.80694580 98.34489441]
[278.66998291 100.36722565]
[293.53305054 102.38956451]
[304.16528320 91.08757782]
[319.41635132 88.22664642]
[333.42187500 94.90684509]
[340.79644775 108.55951691]
[338.70437622 123.93491364]
[327.95016479 135.12089539]
[312.66897583 137.81622314]
[298.73672485 130.98446655]
[291.51071167 117.25260925]
[276.64764404 115.23027039]
[261.78460693 113.20793915]
[246.83653259 111.96106720]
[231.84382629 111.49301910]
[216.85113525 111.02497864]
[201.85844421 110.55693817]
[186.86573792 110.08889771]
[171.87304688 109.62085724]
[156.88035583 109.15280914]
[151.49494934 114.37271881]
[164.42788696 121.97134399]
[179.19456482 124.60668945]
[188.42037964 136.43395996]
[187.38200378 151.39797974]
[176.61105347 161.83763123]
[161.62190247 162.40817261]
[150.08853149 152.81747437]
[147.91551208 137.97627258]
[140.72413635 124.81253052]
[135.33872986 130.03244019]
[135.33872986 145.03244019]
[135.33872986 160.03244019]
[135.33872986 175.03244019]
[135.33872986 190.03244019]
[135.33872986 205.03244019]
[135.33872986 220.03244019]
[135.33872986 235.03244019]
[135.33872986 250.03244019]
[135.33872986 265.03244019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 52]
[14 51]
[15 50]
[16 49]
[18 46]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[27 33]
[28 32]
[55 97]
[56 96]
[57 95]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
