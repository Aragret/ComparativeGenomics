%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAxxxxxxxxxxAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[62.05514145 440.76351929]
[64.64614105 421.55578613]
[64.95819855 406.55905151]
[65.27025604 391.56228638]
[65.58230591 376.56555176]
[65.89436340 361.56878662]
[66.20642090 346.57202148]
[66.51847839 331.57528687]
[66.83053589 316.57852173]
[67.14259338 301.58175659]
[67.45464325 286.58502197]
[52.86771393 283.19131470]
[39.29992294 276.83633423]
[27.34535789 267.79562378]
[17.52803421 256.46240234]
[10.27890873 243.33049011]
[5.91697550 228.97270203]
[4.63522434 214.01593018]
[6.49210548 199.11372375]
[11.40886593 184.91778564]
[19.17288780 172.04940796]
[29.44688606 161.07234192]
[41.78355026 152.46806335]
[55.64502716 146.61468506]
[70.42636871 143.77026367]
[70.73842621 128.77351379]
[71.05048370 113.77675629]
[67.95216370 99.10022736]
[61.60503387 85.50927734]
[55.25790405 71.91832733]
[48.91077423 58.32737732]
[42.56364441 44.73642731]
[40.94754028 59.64911270]
[35.73987961 73.71610260]
[27.25577736 86.08623505]
[16.00859261 96.01099396]
[2.67887759 102.88984680]
[-11.92680550 106.30657196]
[-26.92468643 106.05442810]
[-41.40726089 102.14866638]
[-54.49821472 94.82562256]
[-65.40542603 84.52840424]
[-73.46891785 71.88007355]
[-78.20077515 57.64598083]
[-79.31468201 42.68739700]
[-76.74323273 27.90945053]
[-70.64203644 14.20633698]
[-61.38025284 2.40721011]
[-49.51830673 -6.77397919]
[-35.77394867 -12.78169060]
[-20.97882652 -15.25240421]
[-6.02817917 -14.03662205]
[8.17335320 -9.20790863]
[20.76645470 -1.05844247]
[30.98913383 9.91866207]
[38.22209549 23.05735779]
[38.84607315 8.07034206]
[35.44309616 -6.53854990]
[28.26058769 -19.70713234]
[21.07807922 -32.87571335]
[13.89556980 -46.04429626]
[-0.37753198 -54.11960602]
[-0.25007179 -70.51825714]
[14.14682961 -78.37072754]
[28.00287437 -69.59906769]
[27.06415176 -53.22680664]
[34.24666214 -40.05822372]
[41.42916870 -26.88964081]
[48.61167908 -13.72105885]
[49.37035370 -28.70186043]
[53.38238525 -43.15535736]
[60.45408630 -56.38377380]
[70.24405670 -67.74848175]
[82.27965546 -76.70081329]
[95.97985077 -82.80858612]
[110.68321228 -85.77691650]
[125.67991638 -85.46251678]
[140.24595642 -81.88056183]
[153.67813110 -75.20397949]
[165.32795715 -65.75508881]
[174.63302612 -53.99007034]
[181.14410400 -40.47689438]
[184.54685974 -25.86795044]
[184.67700195 -10.86851501]
[181.52827454 3.79727840]
[175.25267029 17.42140388]
[166.15316772 29.34612465]
[154.66905212 38.99575043]
[141.35476685 45.90441513]
[126.85307312 49.73859787]
[111.86408234 50.31318665]
[97.11141968 47.60044098]
[83.30731201 41.73133087]
[71.11817169 32.98920059]
[61.13246536 21.79609108]
[53.83309174 8.69431973]
[53.20911407 23.68133545]
[56.15459442 38.38929749]
[62.50172424 51.98024750]
[68.84885406 65.57119751]
[75.19598389 79.16214752]
[81.54311371 92.75309753]
[89.03903198 84.46578979]
[99.41239166 81.81418610]
[109.08174896 85.18315125]
[114.99332428 92.96440887]
[129.98602295 93.43244934]
[139.94172668 85.16578674]
[152.45878601 85.90196228]
[160.82243347 94.69723511]
[175.80213928 95.47708130]
[190.78186035 96.25692749]
[205.13725281 88.32883453]
[219.03924561 97.02748871]
[218.18666077 113.40445709]
[203.45655823 120.61252594]
[190.00201416 111.23664093]
[175.02229309 110.45679474]
[160.04258728 109.67695618]
[144.90054321 118.49275208]
[129.51797485 108.42514801]
[114.52528381 107.95710754]
[107.72370911 115.87126923]
[96.94378662 118.48884583]
[86.04724121 114.08881378]
[85.73518372 129.08557129]
[85.42312622 144.08232117]
[100.07334900 147.53915405]
[113.67933655 153.96409607]
[125.64739990 163.07411194]
[135.45587158 174.46905518]
[142.67787170 187.64926147]
[146.99984741 202.03744507]
[148.23521423 217.00399780]
[146.33239746 231.89450073]
[141.37696838 246.05841064]
[133.58784485 258.87741089]
[123.30757904 269.79241943]
[110.98728180 278.32803345]
[97.16687775 284.11312866]
[82.45140076 286.89706421]
[82.13934326 301.89382935]
[81.82728577 316.89059448]
[81.51522827 331.88732910]
[81.20317841 346.88409424]
[80.89112091 361.88082886]
[80.57906342 376.87759399]
[80.26700592 391.87435913]
[79.95494843 406.87109375]
[79.64289093 421.86785889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[25 127]
[26 126]
[27 125]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[56 97]
[57 96]
[58 69]
[59 68]
[60 67]
[61 66]
[106 122]
[107 121]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
