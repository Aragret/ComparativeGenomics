%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUxxxxxxxxxxCCAACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.08744049 288.13705444]
[104.08744049 273.13705444]
[104.08744049 258.13705444]
[104.08744049 243.13705444]
[104.08744049 228.13705444]
[104.08744049 213.13705444]
[104.08744049 198.13705444]
[104.08744049 183.13705444]
[104.08744049 168.13705444]
[104.08744049 153.13705444]
[92.03241730 150.16496277]
[81.55921936 144.63404846]
[73.16648102 137.10768127]
[62.50485611 147.65896606]
[51.84322739 158.21026611]
[41.18160248 168.76155090]
[39.66064453 184.73234558]
[26.14765930 193.37982178]
[11.00865841 188.07037354]
[5.85698462 172.87696838]
[14.64456177 159.45466614]
[30.63031197 158.09992981]
[41.29193878 147.54862976]
[51.95356369 136.99734497]
[62.61519241 126.44605255]
[55.10700989 109.03533173]
[55.29513931 90.07561493]
[63.14733124 72.81730652]
[77.31742859 60.21911621]
[72.12201691 46.14759445]
[60.08380127 35.88153458]
[62.93394089 21.26216507]
[57.73852539 7.19064665]
[52.54310989 -6.88087273]
[47.34769440 -20.95239258]
[42.15227890 -35.02391052]
[38.59186554 -37.75977325]
[36.35219193 -41.15902328]
[35.47843170 -44.71126556]
[35.84074783 -47.94587708]
[37.16354370 -50.48704910]
[33.15580368 -64.94173431]
[29.14806557 -79.39642334]
[25.14032364 -93.85111237]
[16.88803482 -106.37707520]
[5.18841171 -115.76423645]
[-10.41746235 -118.36563110]
[-15.50232983 -132.36540222]
[-27.20195389 -141.75256348]
[-38.90157700 -151.13972473]
[-50.60120010 -160.52688599]
[-62.30082321 -169.91404724]
[-78.43881226 -175.11035156]
[-77.91302490 -192.05613708]
[-61.48392487 -196.24195862]
[-52.91366196 -181.61366272]
[-41.21403885 -172.22650146]
[-29.51441574 -162.83934021]
[-17.81479073 -153.45217896]
[-6.11516762 -144.06501770]
[8.65387154 -142.13505554]
[14.57557297 -127.46385956]
[26.27519608 -118.07669830]
[21.40914917 -132.26548767]
[19.34943390 -147.12339783]
[20.17224503 -162.10081482]
[23.84714699 -176.64367676]
[30.23819542 -190.21403503]
[39.10897446 -202.30987549]
[50.13132858 -212.48374939]
[62.89752197 -220.35929871]
[76.93530273 -225.64520264]
[91.72537994 -228.14590454]
[106.72064209 -227.76892090]
[121.36637878 -224.52816772]
[135.12080383 -218.54356384]
[147.47512817 -210.03646851]
[157.97233582 -199.32157898]
[166.22409058 -186.79527283]
[171.92517090 -172.92091370]
[174.86465454 -158.21174622]
[174.93382263 -143.21191406]
[172.13009644 -128.47625732]
[166.55722046 -114.54991913]
[158.42132568 -101.94804382]
[148.02339172 -91.13681030]
[135.74804688 -82.51614380]
[122.04938507 -76.40494537]
[107.43415833 -73.02927399]
[92.44300842 -72.51401520]
[77.63050079 -74.87821960]
[63.54457092 -80.03443909]
[50.70629120 -87.79193115]
[39.59501266 -97.85885620]
[43.60275269 -83.40416718]
[47.61049271 -68.94947815]
[51.61823273 -54.49478912]
[56.22379684 -40.21932602]
[61.41921234 -26.14780807]
[66.61463165 -12.07628822]
[71.81004333 1.99523091]
[77.00546265 16.06674957]
[88.67206573 25.32632065]
[86.19353485 40.95217896]
[91.38894653 55.02370071]
[103.88978577 53.43135834]
[116.60650635 55.31776810]
[128.57075500 60.67752457]
[138.83480835 69.23591614]
[146.54626465 80.46028900]
[151.01797485 93.59204102]
[151.78750610 107.69746399]
[148.66093445 121.73402405]
[162.78573608 126.78278351]
[176.91053772 131.83154297]
[183.57635498 131.01031494]
[188.83747864 133.36656189]
[191.51045227 137.39529419]
[205.41300964 143.02725220]
[219.31556702 148.65921021]
[235.47357178 145.85725403]
[245.76994324 158.62113953]
[239.61265564 173.82048035]
[223.33580017 175.81948853]
[213.68360901 162.56176758]
[199.78105164 156.92980957]
[185.87849426 151.29785156]
[171.86178589 145.95634460]
[157.73698425 140.90759277]
[143.61218262 135.85882568]
[137.48098755 140.17839050]
[147.45617676 151.38087463]
[157.43135071 162.58337402]
[169.77209473 171.11015320]
[169.84039307 186.11000061]
[157.57780457 194.74879456]
[143.47639465 189.63504028]
[139.60139465 175.14497375]
[132.41000366 161.98124695]
[125.21862793 148.81750488]
[119.08744049 153.13705444]
[119.08744049 168.13705444]
[119.08744049 183.13705444]
[119.08744049 198.13705444]
[119.08744049 213.13705444]
[119.08744049 228.13705444]
[119.08744049 243.13705444]
[119.08744049 258.13705444]
[119.08744049 273.13705444]
[119.08744049 288.13705444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[16 22]
[29 105]
[30 104]
[32 102]
[33 101]
[34 100]
[35 99]
[36 98]
[41 97]
[42 96]
[43 95]
[44 94]
[45 63]
[46 62]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[113 130]
[114 129]
[115 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
