%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCxxxxxxxxxxAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.48379517 300.79269409]
[113.48379517 285.79269409]
[113.48379517 270.79269409]
[113.48379517 255.79270935]
[113.48379517 240.79270935]
[113.48379517 225.79270935]
[113.48379517 210.79270935]
[113.48379517 195.79270935]
[113.48379517 180.79270935]
[113.48379517 165.79270935]
[110.84493256 151.02664185]
[94.63823700 151.89010620]
[78.95052338 147.73101807]
[65.30021667 138.95198059]
[55.00857162 126.40269470]
[49.07172012 111.29785919]
[48.06430817 95.09947968]
[52.08384323 79.37542725]
[60.74126434 65.64766693]
[73.19860840 55.24492645]
[67.42233276 41.40171051]
[61.64606476 27.55849075]
[49.19121933 17.80208778]
[51.43074799 3.07681203]
[45.65447617 -10.76640606]
[39.87820435 -24.60962296]
[34.10192871 -38.45284271]
[28.32565689 -52.29605865]
[22.54938507 -66.13927460]
[16.77311325 -79.98249054]
[10.99684048 -93.82571411]
[5.22056818 -107.66893005]
[-0.55570447 -121.51214600]
[-6.78830004 -128.28021240]
[-6.30483341 -135.70394897]
[-11.79186440 -149.66433716]
[-17.27889633 -163.62472534]
[-31.74958611 -159.62261963]
[-46.55934143 -157.15505981]
[-61.54590225 -156.24908447]
[-76.54505920 -156.91462708]
[-91.39247894 -159.14437866]
[-105.92548370 -162.91392517]
[-119.98484802 -168.18194580]
[-133.41651917 -174.89073181]
[-146.07333374 -182.96678162]
[-157.81663513 -192.32160950]
[-168.51773071 -202.85272217]
[-178.05938721 -214.44471741]
[-186.33706665 -226.97061157]
[-193.26005554 -240.29313660]
[-198.75251770 -254.26635742]
[-202.75427246 -268.73715210]
[-205.22146606 -283.54696655]
[-206.12707520 -298.53353882]
[-205.46116638 -313.53268433]
[-203.23106384 -328.38003540]
[-199.46116638 -342.91296387]
[-194.19279480 -356.97219849]
[-187.48368835 -370.40371704]
[-179.40731812 -383.06033325]
[-170.05221558 -394.80340576]
[-159.52084351 -405.50424194]
[-147.92860413 -415.04559326]
[-135.40252686 -423.32296753]
[-122.07981873 -430.24563599]
[-108.10647583 -435.73776245]
[-93.63559723 -439.73916626]
[-78.82572174 -442.20599365]
[-63.83911514 -443.11126709]
[-48.83998871 -442.44497681]
[-33.99267578 -440.21450806]
[-19.45985413 -436.44427490]
[-5.40074873 -431.17556763]
[8.03059769 -424.46612549]
[20.68702507 -416.38943481]
[32.42986298 -407.03405762]
[43.13044739 -396.50241089]
[52.67154312 -384.90997314]
[60.94860840 -372.38366699]
[67.87095642 -359.06079102]
[73.36273193 -345.08731079]
[77.36378479 -330.61633301]
[79.83026123 -315.80639648]
[80.73514557 -300.81979370]
[80.06851196 -285.82067871]
[77.83768463 -270.97341919]
[74.06708527 -256.44067383]
[68.79803467 -242.38169861]
[62.08826447 -228.95051575]
[54.01128769 -216.29429626]
[44.65560532 -204.55168152]
[34.12371826 -193.85134888]
[22.53102112 -184.31053162]
[10.00453091 -176.03378296]
[-3.31850648 -169.11175537]
[2.16852498 -155.15136719]
[7.65555668 -141.19097900]
[13.28751278 -127.28842163]
[19.06378555 -113.44520569]
[24.84005737 -99.60198212]
[30.61633110 -85.75876617]
[36.39260483 -71.91555023]
[42.16887665 -58.07233047]
[47.94514847 -44.22911453]
[53.72142029 -30.38589668]
[59.49769211 -16.54267883]
[65.27396393 -2.69946051]
[77.31565094 6.06678247]
[75.48928070 21.78221893]
[81.26555634 35.62543488]
[87.04182434 49.46865463]
[100.63234711 47.83745193]
[114.17932892 49.79763031]
[126.75006866 55.21423340]
[137.47908020 63.71432495]
[145.62765503 74.71267700]
[150.63478088 87.45205688]
[152.15570068 101.05536652]
[150.08572388 114.58600616]
[144.56735229 127.11240387]
[135.98052979 137.77212524]
[124.91645050 145.83123779]
[127.97975159 131.14735413]
[135.56613159 118.20722961]
[146.88325500 108.36231232]
[160.74920654 102.64079285]
[175.71578979 101.64023590]
[190.21994019 105.46512604]
[202.74682617 113.71600342]
[211.98815918 125.53115082]
[216.97879028 139.67660522]
[217.19747925 154.67500305]
[212.62139893 168.95994568]
[203.72848511 181.03950500]
[191.44747925 189.65211487]
[177.06101990 193.89826965]
[162.07160950 193.33450317]
[148.04475403 188.01968384]
[136.44538879 178.50891113]
[128.48379517 165.79270935]
[128.48379517 180.79270935]
[128.48379517 195.79270935]
[128.48379517 210.79270935]
[128.48379517 225.79270935]
[128.48379517 240.79270935]
[128.48379517 255.79270935]
[128.48379517 270.79269409]
[128.48379517 285.79269409]
[128.48379517 300.79269409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[20 112]
[21 111]
[22 110]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[33 99]
[35 98]
[36 97]
[37 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
