%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAxxxxxxxxxxAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.37684631 266.69540405]
[79.37684631 251.69541931]
[79.37684631 236.69541931]
[79.37684631 221.69541931]
[79.37684631 206.69541931]
[79.37684631 191.69541931]
[79.37684631 176.69541931]
[79.37684631 161.69541931]
[79.37684631 146.69541931]
[79.37684631 131.69541931]
[72.79255676 128.10415649]
[65.61004639 141.27275085]
[58.42753983 154.44132996]
[51.24503326 167.60990906]
[44.06232071 180.77838135]
[30.89395905 173.59545898]
[38.07645035 160.42739868]
[45.25895691 147.25881958]
[52.44146729 134.09024048]
[59.62397766 120.92165375]
[53.03968430 117.33039856]
[40.42855835 125.45194244]
[30.38564110 139.11123657]
[14.48000622 133.24206543]
[15.71668530 116.33328247]
[32.30701447 112.84081268]
[44.91814423 104.71926880]
[55.09582520 89.85704041]
[68.25543976 81.41001892]
[81.56527710 79.54118347]
[92.44523621 83.34217072]
[98.93397522 91.02031708]
[96.44886017 76.22761536]
[93.96374512 61.43490601]
[91.47862244 46.64220047]
[88.53314209 31.93423653]
[85.13016510 17.32534409]
[81.72718811 2.71645236]
[71.06084442 -8.96857262]
[75.70903015 -23.11931992]
[65.04269409 -34.80434418]
[69.69087982 -48.95509338]
[66.28790283 -63.56398392]
[62.88492203 -78.17287445]
[59.48194504 -92.78176880]
[56.07896423 -107.39066315]
[51.77941132 -112.55024719]
[50.91184998 -118.24925232]
[52.85173035 -122.67784119]
[50.05940628 -137.41564941]
[47.26708221 -152.15345764]
[34.38390732 -155.87257385]
[25.04164124 -167.55024719]
[23.99415398 -184.02223206]
[14.01142883 -195.21798706]
[-1.85869193 -197.56721497]
[-9.79193878 -211.51150513]
[-3.70260358 -226.35398865]
[11.73809624 -230.70880127]
[24.68537712 -221.23529053]
[25.20719337 -205.20071411]
[35.18992233 -194.00495911]
[49.26144028 -199.20036316]
[49.57349777 -214.19712830]
[49.88555145 -229.19387817]
[35.43330383 -233.55679321]
[22.69470215 -241.65806580]
[12.61503792 -252.89653015]
[5.94228983 -266.43820190]
[3.17161942 -281.27822876]
[4.50862837 -296.31533813]
[9.85410213 -310.43371582]
[18.81137085 -322.58566284]
[30.71574593 -331.86944580]
[44.68384552 -337.59609985]
[59.67913818 -339.34072876]
[74.58888245 -336.97384644]
[88.30666351 -330.67108154]
[99.81454468 -320.90011597]
[108.25856018 -308.38607788]
[113.01210785 -294.05755615]
[113.72243500 -278.97784424]
[110.33683777 -264.26593018]
[103.10655212 -251.01356506]
[92.56811523 -240.20413208]
[79.50354004 -232.63977051]
[64.88230896 -228.88182068]
[64.57025146 -213.88507080]
[64.25819397 -198.88832092]
[76.07794189 -173.90653992]
[62.00488663 -154.94577026]
[64.79721069 -140.20797729]
[67.58953857 -125.47016907]
[70.68785858 -110.79364014]
[74.09083557 -96.18474579]
[77.49381256 -81.57585144]
[80.89678955 -66.96696472]
[84.29976654 -52.35807037]
[94.72270203 -41.71797180]
[90.31792450 -26.52229691]
[100.74085999 -15.88219833]
[96.33607483 -0.68652564]
[99.73905182 13.92236710]
[103.14203644 28.53125954]
[105.99217224 30.70937729]
[107.89986420 34.40564346]
[108.14981079 39.14799881]
[106.27133179 44.15708160]
[108.75644684 58.94978714]
[111.24156952 73.74249268]
[113.72668457 88.53520203]
[123.47433472 99.93622589]
[137.70111084 104.69004059]
[147.36405945 92.98567963]
[160.60449219 85.56575775]
[175.63177490 83.43375397]
[190.41355896 86.87800598]
[202.95077515 95.43270874]
[211.54782104 107.94091034]
[215.04205322 122.71097565]
[212.96087646 137.74537659]
[205.58578491 151.01083374]
[193.91416931 160.71330261]
[179.52453613 165.54060364]
[164.36296082 164.83987427]
[150.47991943 158.70590210]
[139.75297546 147.96824646]
[133.63287354 134.07908630]
[132.94729614 118.91681671]
[118.72052002 114.16300201]
[112.63460541 118.54610443]
[122.84067535 129.53865051]
[133.04675293 140.53120422]
[145.34562683 149.11827087]
[145.45532227 164.11787415]
[133.28335571 172.88389587]
[119.09186554 168.02575684]
[114.84553528 153.63978577]
[107.65415192 140.47604370]
[100.46276855 127.31230927]
[94.37684631 131.69541931]
[94.37684631 146.69541931]
[94.37684631 161.69541931]
[94.37684631 176.69541931]
[94.37684631 191.69541931]
[94.37684631 206.69541931]
[94.37684631 221.69541931]
[94.37684631 236.69541931]
[94.37684631 251.69541931]
[94.37684631 266.69540405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 27]
[22 26]
[32 111]
[33 110]
[34 109]
[35 108]
[36 104]
[37 103]
[38 102]
[40 100]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[49 93]
[50 92]
[51 91]
[54 62]
[55 61]
[63 89]
[64 88]
[65 87]
[112 130]
[113 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
