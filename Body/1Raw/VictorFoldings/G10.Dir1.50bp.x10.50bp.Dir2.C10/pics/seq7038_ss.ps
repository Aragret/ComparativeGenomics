%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUxxxxxxxxxxGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[160.99203491 280.57760620]
[160.67997742 265.58087158]
[160.36791992 250.58410645]
[160.05586243 235.58735657]
[159.74380493 220.59060669]
[159.43174744 205.59385681]
[159.11968994 190.59709167]
[158.80763245 175.60034180]
[158.49557495 160.60359192]
[151.58857727 147.28843689]
[139.50859070 138.39608765]
[127.42860413 129.50373840]
[115.34861755 120.61138153]
[104.82763672 126.44046021]
[92.27636719 126.97267151]
[80.32180786 121.62184906]
[71.67573547 111.08190918]
[68.52408600 97.26920319]
[53.54437256 98.04904938]
[38.56465530 98.82889557]
[23.58494186 99.60873413]
[8.60522842 100.38858032]
[-6.10273314 103.33406830]
[-20.22753716 108.38282013]
[-34.35234070 113.43157959]
[-48.47714233 118.48033142]
[-62.60194397 123.52909088]
[-72.79727936 136.37382507]
[-88.97689056 133.69944763]
[-94.49657440 118.25713348]
[-83.67816162 105.93260956]
[-67.65070343 109.40428925]
[-53.52589798 104.35552979]
[-39.40109634 99.30677795]
[-25.27629280 94.25801849]
[-11.15148926 89.20925903]
[-12.39836407 74.26117706]
[-27.16441917 71.62231445]
[-39.04992294 81.78443909]
[-54.68723297 81.87752533]
[-66.69287872 71.85762787]
[-69.39817047 56.45582581]
[-61.52575302 42.94438553]
[-46.79273224 37.70299530]
[-32.15559769 43.20647812]
[-24.52555466 56.85625458]
[-9.75949955 59.49512100]
[-0.84683174 64.33110809]
[5.15012074 71.06762695]
[7.97931719 78.48685455]
[7.82538319 85.40886688]
[22.80509758 84.62902069]
[37.78481293 83.84917450]
[52.76452637 83.06933594]
[67.74423981 82.28948975]
[77.49188995 70.88846588]
[75.93431091 55.96955490]
[74.37673187 41.05064392]
[72.66403961 26.14874077]
[70.79642487 11.26546001]
[68.77409363 -3.59758687]
[66.59725952 -18.43879318]
[64.42041779 -33.27999878]
[49.53311920 -36.04531479]
[36.35157776 -43.49687195]
[26.30562973 -54.82637787]
[20.48498726 -68.80489349]
[19.52102852 -83.91613007]
[23.51831627 -98.52093506]
[32.04325485 -111.03509521]
[44.17112350 -120.10115814]
[58.58638000 -124.73571014]
[73.72536469 -124.43603516]
[87.94591522 -119.23462677]
[99.70549774 -109.69570923]
[107.72850800 -96.85398102]
[111.14468384 -82.10241699]
[109.58345795 -67.04116821]
[103.21417236 -53.30395889]
[92.72773743 -42.38089752]
[79.26162720 -35.45683670]
[81.43846130 -20.61562920]
[83.61529541 -5.77442360]
[87.72438049 0.42727545]
[85.67971039 9.39784718]
[87.54731750 24.28112602]
[91.52649689 30.56696892]
[89.29563904 39.49306107]
[90.85322571 54.41197205]
[92.41080475 69.33088684]
[113.54198456 73.64688110]
[125.70198059 89.76834869]
[124.24096680 108.53139496]
[136.32095337 117.42374420]
[148.40093994 126.31609344]
[160.48092651 135.20845032]
[154.14295959 121.61322021]
[149.49760437 107.35066223]
[152.80763245 92.72042847]
[163.14004517 81.84654236]
[177.58227539 77.79415894]
[192.06332397 81.70557404]
[202.50122070 92.47823334]
[205.95372009 107.07550812]
[201.44804382 121.38197327]
[188.51510620 128.98060608]
[203.50779724 128.51255798]
[218.50048828 128.04450989]
[233.49319458 127.57646942]
[244.13034058 115.88773346]
[259.92083740 115.22760773]
[271.49645996 125.98774719]
[271.98959351 141.78433228]
[261.10766602 153.24555969]
[245.30674744 153.57165527]
[233.96122742 142.56916809]
[218.96853638 143.03721619]
[203.97584534 143.50524902]
[188.98313904 143.97329712]
[202.36486816 150.75042725]
[215.74658203 157.52757263]
[229.12829590 164.30470276]
[242.51002502 171.08183289]
[257.46734619 172.21267700]
[271.14932251 178.36112976]
[281.92611694 188.79475403]
[288.51394653 202.27067566]
[290.12808228 217.18357849]
[286.57620239 231.75697327]
[278.28143311 244.25485229]
[266.23187256 253.18838501]
[251.86291504 257.49340820]
[236.88624573 256.65707397]
[223.08595276 250.77900696]
[212.10595703 240.55943298]
[205.25424194 227.21572876]
[203.34706116 212.33665466]
[195.88337708 199.32537842]
[188.41969299 186.31410217]
[180.95602417 173.30281067]
[173.49234009 160.29153442]
[173.80439758 175.28828430]
[174.11645508 190.28503418]
[174.42849731 205.28179932]
[174.74055481 220.27854919]
[175.05261230 235.27529907]
[175.36466980 250.27204895]
[175.67672729 265.26879883]
[175.98878479 280.26556396]
[178.57978821 299.47329712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 96]
[11 95]
[12 94]
[13 93]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 36]
[24 35]
[25 34]
[26 33]
[27 32]
[37 47]
[38 46]
[56 90]
[57 89]
[58 88]
[59 86]
[60 85]
[61 83]
[62 82]
[63 81]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
