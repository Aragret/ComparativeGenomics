%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAxxxxxxxxxxACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[155.25009155 376.83978271]
[155.25009155 361.83978271]
[155.25009155 346.83978271]
[155.25009155 331.83978271]
[155.25009155 316.83978271]
[155.25009155 301.83978271]
[155.25009155 286.83978271]
[155.25009155 271.83978271]
[155.25009155 256.83978271]
[155.25009155 241.83979797]
[152.70703125 239.10926819]
[151.05543518 235.42321777]
[150.63977051 231.09452820]
[151.68965149 226.55494690]
[145.06115723 213.09898376]
[138.43266296 199.64302063]
[132.61790466 195.00253296]
[131.80950928 185.83746338]
[125.46237946 172.24650574]
[113.06645203 163.98876953]
[114.23750305 148.21096802]
[107.89037323 134.62001038]
[87.87968445 133.37516785]
[71.73326874 121.48942566]
[64.59902954 102.75228882]
[49.73598480 100.72995758]
[34.87294006 98.70761871]
[28.11120415 105.44326019]
[19.12867165 108.23333740]
[10.01267242 106.56365967]
[2.82001448 100.94120789]
[-0.88704813 92.74978638]
[-15.59500980 89.80430603]
[-30.30297089 86.85882568]
[-45.01093292 83.91334534]
[-60.06176376 88.79012299]
[-71.02191162 78.70426941]
[-85.72986603 75.75878143]
[-97.04637909 86.37557220]
[-112.44618988 88.27964783]
[-126.00775909 80.73885345]
[-132.51637268 66.65277863]
[-129.46936035 51.43780899]
[-118.03834534 40.94440842]
[-102.61878204 39.20750427]
[-89.13981628 46.89497375]
[-82.78438568 61.05082321]
[-68.07642365 63.99630356]
[-54.07760620 58.90884018]
[-42.06544876 69.20538330]
[-27.35748863 72.15086365]
[-12.64952755 75.09634399]
[2.05843449 78.04182434]
[20.88335037 69.66652679]
[36.89527512 83.84457397]
[51.75831985 85.86690521]
[66.62136841 87.88924408]
[69.20524597 82.32270813]
[72.70902252 77.28423309]
[77.02803802 72.92431641]
[82.03327179 69.37320709]
[87.57521057 66.73698425]
[93.48829651 65.09439850]
[99.59590149 64.49450684]
[105.71558380 64.95523071]
[111.20261383 50.99484253]
[116.68964386 37.03445435]
[122.17667389 23.07406425]
[127.66370392 9.11367321]
[114.99794769 0.98565537]
[104.16146088 -9.45737267]
[95.57077789 -21.81400681]
[89.55610657 -35.60929489]
[86.34862518 -50.31297684]
[86.07162476 -65.35988617]
[88.73575592 -80.17166138]
[94.23860931 -94.17897034]
[102.36868286 -106.84342194]
[112.81346130 -117.67821503]
[125.17148590 -126.26689911]
[138.96774292 -132.27934265]
[153.67195129 -135.48443604]
[168.71890259 -135.75900269]
[183.53024292 -133.09246826]
[197.53666687 -127.58734894]
[210.19979858 -119.45523071]
[221.03289795 -109.00869751]
[229.61958313 -96.64928436]
[235.62979126 -82.85205078]
[238.83250427 -68.14732361]
[239.10464478 -53.10032654]
[236.43571472 -38.28941727]
[230.92832947 -24.28388786]
[222.79415894 -11.62207317]
[212.34587097 -0.79066026]
[199.98506165 7.79401970]
[186.18685913 13.80199528]
[171.48161316 17.00233459]
[156.43457031 17.27202797]
[141.62409973 14.60070515]
[136.13706970 28.56109428]
[130.65003967 42.52148438]
[125.16300201 56.48187637]
[119.67597198 70.44226837]
[131.03518677 82.74830627]
[135.49050903 98.89205933]
[132.05082703 115.28227234]
[121.48133087 128.27288818]
[127.82846069 141.86383057]
[140.67837524 151.09368896]
[139.05332947 165.89938354]
[145.40046692 179.49034119]
[151.88862610 193.01452637]
[158.51712036 206.47048950]
[165.14562988 219.92645264]
[166.00273132 204.95095825]
[170.22895813 190.55863953]
[177.60475159 177.49732971]
[187.74682617 166.44570923]
[200.12818909 157.97802734]
[214.10551453 152.53427124]
[228.95251465 150.39730835]
[243.89773560 151.67817688]
[258.16458130 156.31031799]
[271.01177979 164.05305481]
[281.77172852 174.50404358]
[289.88537598 187.12025452]
[294.93109131 201.24613953]
[296.64672852 216.14770508]
[294.94311523 231.05064392]
[289.90881348 245.18060303]
[281.80535889 257.80334473]
[271.05383301 268.26303101]
[258.21289062 276.01611328]
[243.94976807 280.65975952]
[229.00559998 281.95269775]
[214.15687561 279.82772827]
[200.17517090 274.39523315]
[187.78697205 265.93756104]
[177.63597107 254.89411926]
[170.25009155 241.83979797]
[170.25009155 256.83978271]
[170.25009155 271.83978271]
[170.25009155 286.83978271]
[170.25009155 301.83978271]
[170.25009155 316.83978271]
[170.25009155 331.83978271]
[170.25009155 346.83978271]
[170.25009155 361.83978271]
[170.25009155 376.83978271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 115]
[15 114]
[16 113]
[18 112]
[19 111]
[21 109]
[22 108]
[25 57]
[26 56]
[27 55]
[32 53]
[33 52]
[34 51]
[35 50]
[37 48]
[38 47]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
