%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAxxxxxxxxxxAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-26.30677032 182.79116821]
[-39.24482727 190.38107300]
[-52.18288422 197.97099304]
[-65.12094116 205.56089783]
[-78.05899811 213.15080261]
[-90.91739655 220.87489319]
[-103.69475555 228.73231506]
[-116.47211456 236.58973694]
[-129.24946594 244.44717407]
[-142.02682495 252.30459595]
[-136.97357178 266.48760986]
[-134.97993469 281.41140747]
[-136.13310242 296.42352295]
[-140.38262939 310.86773682]
[-147.54277039 324.11257935]
[-157.30050659 335.57907104]
[-169.22927856 344.76593018]
[-182.80758667 351.27154541]
[-197.44186401 354.81152344]
[-212.49237061 355.23110962]
[-227.30114746 352.51196289]
[-241.22082520 346.77294922]
[-253.64289856 338.26495361]
[-264.02432251 327.35992432]
[-271.91125488 314.53457642]
[-276.95895386 300.34954834]
[-278.94671631 285.42498779]
[-277.78762817 270.41333008]
[-273.53240967 255.97079468]
[-266.36706543 242.72875977]
[-256.60482788 231.26611328]
[-244.67245483 222.08395386]
[-231.09158325 215.58367920]
[-216.45590210 212.04945374]
[-201.40524292 211.63578796]
[-186.59753418 214.36076355]
[-172.68011475 220.10523987]
[-160.26138306 228.61811829]
[-149.88424683 239.52723694]
[-137.10688782 231.66981506]
[-124.32953644 223.81237793]
[-111.55217743 215.95495605]
[-98.77482605 208.09753418]
[-94.69824982 201.87440491]
[-85.64890289 200.21275330]
[-72.71084595 192.62283325]
[-59.77279282 185.03292847]
[-46.83473587 177.44302368]
[-33.89667892 169.85311890]
[-47.31838989 133.24259949]
[-50.91917419 94.41597748]
[-44.45898819 55.96161270]
[-28.36849594 20.44305229]
[-3.72036409 -9.77187538]
[-13.46801567 -21.17289543]
[-23.21566772 -32.57391739]
[-38.84896469 -37.52690506]
[-42.11147308 -53.59824753]
[-29.64700508 -64.25512695]
[-14.27793598 -58.53465652]
[-11.81464767 -42.32156754]
[-2.06699514 -30.92054749]
[7.68065691 -19.51952744]
[14.24361229 -24.31259155]
[21.05489731 -28.74567604]
[28.09478951 -32.80594635]
[35.34289932 -36.48163986]
[42.77824402 -39.76211548]
[50.37928772 -42.63787460]
[58.12401962 -45.10058975]
[65.99002075 -47.14312744]
[73.95449829 -48.75957108]
[81.99440002 -49.94524765]
[90.08644104 -50.69671631]
[98.20719147 -51.01180267]
[106.33312988 -50.88959503]
[114.44073486 -50.33044815]
[122.50652313 -49.33597946]
[130.50712585 -47.90907288]
[138.41940308 -46.05385208]
[146.22041321 -43.77569962]
[153.88758850 -41.08120346]
[161.39871216 -37.97817230]
[168.73205566 -34.47558594]
[175.86634827 -30.58359528]
[182.78096008 -26.31346321]
[189.45585632 -21.67755699]
[195.87170410 -16.68930244]
[202.00994873 -11.36314487]
[207.85278320 -5.71450567]
[213.38330078 0.24025744]
[218.58547974 6.48390102]
[223.44427490 12.99834442]
[227.94560242 19.76472473]
[232.07643127 26.76344490]
[235.82479858 33.97424316]
[239.17985535 41.37623596]
[242.13188171 48.94798660]
[244.67231750 56.66757202]
[246.79382324 64.51264191]
[248.49024963 72.46047211]
[249.75668335 80.48804474]
[250.58944702 88.57212830]
[250.98614502 96.68930054]
[250.94563293 104.81605530]
[250.46801758 112.92887115]
[249.55467224 121.00424194]
[248.20825195 129.01879883]
[246.43266296 136.94931030]
[244.23304749 144.77284241]
[241.61575317 152.46670532]
[238.58837891 160.00865173]
[235.15969849 167.37681580]
[231.33961487 174.54988098]
[227.13920593 181.50706482]
[222.57063293 188.22822571]
[217.64712524 194.69389343]
[212.38293457 200.88536072]
[206.79330444 206.78468323]
[200.89443970 212.37477112]
[194.70339966 217.63946533]
[188.23812866 222.56349182]
[181.51734924 227.13261414]
[174.56050110 231.33358765]
[167.38774109 235.15425110]
[160.01985168 238.58352661]
[152.47814941 241.61151123]
[144.78450012 244.22943115]
[136.96115112 246.42968750]
[129.03077698 248.20591736]
[121.01633453 249.55297852]
[112.94103241 250.46696472]
[104.82826233 250.94523621]
[96.70149994 250.98641968]
[88.58429718 250.59037781]
[80.50015259 249.75825500]
[72.47247314 248.49247742]
[64.52450562 246.79669189]
[56.67926788 244.67581177]
[48.95947647 242.13600159]
[41.38748550 239.18460083]
[33.98522186 235.83013916]
[26.77412224 232.08235168]
[19.77506638 227.95208740]
[13.00832272 223.45130920]
[6.49348640 218.59304810]
[0.24942259 213.39135742]
[-5.70578766 207.86132812]
[-11.35489941 202.01895142]
[-16.68155289 195.88114929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
