%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.17778015 124.88793945]
[153.60507202 121.33317566]
[139.03236389 117.77841187]
[124.45967102 114.22365570]
[109.88696289 110.66889191]
[95.35202789 114.37505341]
[84.26071167 124.47370148]
[79.11128998 142.12202454]
[61.87340927 145.26138306]
[50.99458694 155.58857727]
[40.11576080 165.91578674]
[29.23693466 176.24299622]
[18.35811043 186.57019043]
[7.47928524 196.89739990]
[11.14530468 211.81236267]
[6.84728479 226.55761719]
[-4.25862885 237.16677856]
[-19.18500137 240.78602600]
[-33.91671371 236.44180298]
[-44.49100876 225.30268860]
[-48.06345367 210.36505127]
[-43.67308044 195.64701843]
[-32.50087738 185.10769653]
[-17.55210876 181.58209229]
[-2.84791994 186.01856995]
[8.03090572 175.69137573]
[18.90973091 165.36416626]
[29.78855515 155.03695679]
[40.66738129 144.70976257]
[51.54620743 134.38255310]
[52.18758774 122.26248932]
[61.22301102 113.56880951]
[74.16206360 113.38238525]
[85.25337982 103.28373718]
[84.47458649 95.82427979]
[82.91700745 80.90536499]
[82.13821411 73.44591522]
[69.20016479 65.85600281]
[56.18385315 58.40109253]
[43.09069824 51.08198929]
[29.99754333 43.76288223]
[16.90438843 36.44377518]
[3.81123424 29.12467003]
[-9.28192043 21.80556488]
[-22.37507439 14.48645973]
[-35.46822739 7.16735411]
[-50.02194595 12.88779068]
[-64.83124542 7.86596632]
[-72.90362549 -5.52696657]
[-70.42755890 -20.96727371]
[-58.57217026 -31.16451645]
[-42.93520737 -31.30386734]
[-30.89996910 -21.31952858]
[-28.14912415 -5.92580032]
[-15.05596924 1.39330518]
[-1.96281457 8.71241093]
[11.13033962 16.03151703]
[24.22349358 23.35062218]
[37.31665039 30.66972733]
[50.40980148 37.98883438]
[63.50295639 45.30793762]
[70.92409515 45.82977295]
[76.79006958 52.91794586]
[89.72812653 60.50785446]
[82.01271057 47.64424896]
[82.85887146 32.66813660]
[88.15844727 18.63551331]
[97.42333984 6.83882809]
[109.80021667 -1.63541532]
[124.14914703 -6.00671482]
[139.14854431 -5.87246180]
[153.41693115 -1.24502194]
[165.64015198 7.44940567]
[174.69239807 19.41003990]
[179.73994446 33.53527451]
[180.31790161 48.52413559]
[176.37303162 62.99610901]
[168.26867676 75.61828613]
[156.75125122 85.22813416]
[142.88157654 90.94055176]
[127.93472290 92.22925568]
[113.44172668 96.09619141]
[128.01443481 99.65094757]
[142.58712769 103.20571136]
[157.15983582 106.76047516]
[171.73254395 110.31523895]
[176.63945007 96.12873840]
[182.85327148 82.46408081]
[190.31936646 69.44133759]
[198.97215271 57.17496490]
[208.73556519 45.77275848]
[219.52380371 35.33492661]
[231.24206543 25.95319748]
[243.78735352 17.71002197]
[257.04943848 10.67783928]
[270.91177368 4.91845274]
[285.25250244 0.48247644]
[299.94561768 -2.59110546]
[314.86196899 -4.27528143]
[329.87051392 -4.55525112]
[344.83932495 -3.42855310]
[359.63684082 -0.90508962]
[374.13302612 2.99296260]
[388.20050049 8.23134613]
[401.71563721 14.76402664]
[414.55963135 22.53359032]
[426.61962891 31.47175980]
[437.78964233 41.49998093]
[447.97149658 52.53012848]
[457.07574463 64.46526337]
[465.02233887 77.20049286]
[471.74145508 90.62390137]
[477.17404175 104.61752319]
[481.27233887 119.05838013]
[484.00039673 133.81954956]
[485.33416748 148.77133179]
[485.26193237 163.78230286]
[483.78439331 178.72055054]
[480.91445923 193.45480347]
[476.67739868 207.85556030]
[471.11044312 221.79626465]
[464.26248169 235.15440369]
[456.19372559 247.81259155]
[446.97509766 259.65957642]
[436.68756104 270.59124756]
[425.42160034 280.51156616]
[413.27615356 289.33328247]
[400.35800171 296.97891235]
[386.78067017 303.38125610]
[372.66342163 308.48406982]
[358.13040161 312.24246216]
[343.30929565 314.62344360]
[328.33035278 315.60607910]
[313.32519531 315.18173218]
[298.42572021 313.35412598]
[283.76287842 310.13931274]
[269.46548462 305.56558228]
[255.65921021 299.67309570]
[242.46539307 292.51364136]
[229.99998474 284.15014648]
[218.37252808 274.65609741]
[207.68521118 264.11495972]
[198.03195190 252.61935425]
[189.49758911 240.27029419]
[182.15711975 227.17633057]
[176.07505798 213.45251465]
[171.30485535 199.21946716]
[167.88842773 184.60226440]
[165.85581970 169.72937012]
[165.22486877 154.73149109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[5 82]
[6 34]
[7 33]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[37 64]
[38 63]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
