%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACAxxxxxxxxxxGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.05072784 153.82205200]
[66.83724976 164.80772400]
[56.62377167 175.79338074]
[46.41029358 186.77905273]
[36.19681168 197.76470947]
[25.98333168 208.75038147]
[16.59617043 220.44999695]
[8.08508015 232.80157471]
[-0.42600986 245.15315247]
[-8.93710041 257.50473022]
[-3.64834833 272.09268188]
[-7.97659016 286.99389648]
[-20.25752831 296.47851562]
[-35.76889038 296.89953613]
[-48.54624176 288.09506226]
[-53.67642975 273.45059204]
[-49.18679428 258.59719849]
[-36.80368805 249.24635315]
[-21.28867340 248.99363708]
[-12.77758217 236.64205933]
[-4.26649237 224.29048157]
[4.24459791 211.93891907]
[-10.57406902 214.26423645]
[-23.51002693 206.67074585]
[-28.70316124 192.59838867]
[-23.80093002 178.42205811]
[-11.02409172 170.56379700]
[3.83931971 172.58345032]
[14.05603409 183.56610107]
[14.99766731 198.53689575]
[25.21114731 187.55123901]
[35.42462921 176.56556702]
[45.63810730 165.57991028]
[55.85158539 154.59423828]
[66.06506348 143.60858154]
[61.01631165 129.48377991]
[46.15326309 127.46144104]
[31.29021645 125.43910217]
[17.70121956 133.96662903]
[2.60980844 128.52339172]
[-2.40717864 113.28497314]
[6.49886179 99.94098663]
[22.49597740 98.72779846]
[33.31254959 110.57605743]
[48.17559814 112.59838867]
[63.03864670 114.62072754]
[66.28273010 107.85863495]
[76.01497650 87.57234955]
[65.13614655 77.24514008]
[54.25732422 66.91793823]
[43.37849808 56.59073257]
[28.41886711 60.36074066]
[13.80310249 55.42282867]
[4.19504166 43.35266876]
[2.66058302 28.00180817]
[9.68936634 14.26864529]
[23.03853226 6.53538513]
[38.44841003 7.26968241]
[51.00176620 16.23722649]
[56.69286728 30.57650375]
[53.70570374 45.71190643]
[64.58452606 56.03911209]
[75.46335602 66.36631775]
[86.34217834 76.69351959]
[93.79312897 75.83717346]
[89.19718933 61.55861664]
[84.60124969 47.28005219]
[80.00531006 33.00149155]
[69.58690643 22.20997429]
[66.43395996 7.54508495]
[71.49642944 -6.57480907]
[83.24904633 -15.89554310]
[98.15087128 -17.60888672]
[111.71215820 -11.19862556]
[119.84704590 1.40389824]
[120.10458374 16.40168762]
[112.40543365 29.27771568]
[111.16863251 44.22663879]
[109.93183136 59.17556381]
[108.69503021 74.12448883]
[116.14598846 73.26814270]
[124.39827728 60.74217987]
[125.52933502 44.96145630]
[138.99241638 38.59006500]
[147.24470520 26.06410027]
[155.49699402 13.53813934]
[163.74928284 1.01217723]
[164.17475891 -15.38144970]
[178.71199036 -22.97097015]
[192.40632629 -13.94893742]
[191.17021179 2.40355659]
[176.27525330 9.26446629]
[168.02296448 21.79042816]
[159.77066040 34.31639099]
[151.51837158 46.84235382]
[150.97758484 61.72713470]
[136.92424011 68.99446869]
[128.67195129 81.52043152]
[131.34269714 88.52878571]
[144.59002686 81.49257660]
[157.83737183 74.45637512]
[171.08470154 67.42016602]
[184.33203125 60.38395691]
[194.16690063 49.05809402]
[208.95506287 46.54603577]
[221.97819519 53.98902130]
[227.31985474 68.00567627]
[222.55331421 82.22819519]
[209.84403992 90.19525146]
[194.96542358 88.28717041]
[180.39512634 91.85175323]
[165.82482910 95.41633606]
[151.25451660 98.98091888]
[136.68421936 102.54550171]
[139.35496521 109.55385590]
[153.85057068 113.41101837]
[168.34616089 117.26817322]
[184.02957153 112.47622681]
[195.83502197 123.85881805]
[191.61808777 139.70651245]
[175.71678162 143.71656799]
[164.48899841 131.76377869]
[149.99340820 127.90661621]
[135.49781799 124.04945374]
[146.36967468 134.38398743]
[157.24153137 144.71852112]
[171.09727478 150.46470642]
[183.50791931 158.88941956]
[193.96257019 169.64582825]
[202.03080750 182.29113770]
[207.38047791 196.30473328]
[209.79136658 211.10971069]
[209.16419983 226.09660339]
[205.52482605 240.64839172]
[199.02304077 254.16604614]
[189.92651367 266.09304810]
[178.60974121 275.93838501]
[165.53862000 283.29675293]
[151.25123596 287.86523438]
[136.33580017 289.45571899]
[121.40634155 288.00277710]
[107.07746887 283.56616211]
[93.93907166 276.32858276]
[82.53205109 266.58795166]
[73.32598877 254.74530029]
[66.69989777 241.28814697]
[62.92654800 226.77050781]
[62.16128922 211.79003906]
[64.43562317 196.96347046]
[69.65800476 182.89691162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[5 31]
[6 30]
[7 22]
[8 21]
[9 20]
[10 19]
[36 46]
[37 45]
[38 44]
[48 64]
[49 63]
[50 62]
[51 61]
[81 98]
[82 97]
[84 95]
[85 94]
[86 93]
[87 92]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
