%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAGUGCUCUGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUxxxxxxxxxxUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.18688965 429.27978516]
[175.87483215 414.28302002]
[175.56277466 399.28625488]
[175.25071716 384.28952026]
[174.93865967 369.29275513]
[174.62660217 354.29602051]
[174.31455994 339.29925537]
[174.00250244 324.30249023]
[173.69044495 309.30575562]
[171.82283020 294.42245483]
[168.41984558 279.81356812]
[165.01687622 265.20468140]
[161.61389160 250.59579468]
[158.05912781 236.02308655]
[154.35296631 221.48814392]
[150.64680481 206.95321655]
[146.94064331 192.41827393]
[143.23448181 177.88334656]
[130.31779480 166.04446411]
[135.36026001 148.36529541]
[131.35252380 133.91059875]
[127.34477997 119.45591736]
[105.76036835 130.14688110]
[84.87291718 123.35340118]
[75.71405029 105.74832916]
[60.75380325 104.65702057]
[45.79355621 103.56571198]
[30.83330727 102.47440338]
[15.86251545 101.53877258]
[0.88280112 100.75892639]
[-4.75203085 114.81336975]
[-14.64691067 126.27504730]
[-27.72851562 133.90068054]
[-42.57785416 136.86311340]
[-57.58417511 134.84097290]
[-71.11970520 128.05363464]
[-81.71622467 117.23731232]
[-88.22428131 103.56530762]
[-89.93794250 88.52063751]
[-86.67132568 73.73523712]
[-78.77876282 60.81292725]
[-67.11637878 51.15541458]
[-52.94923019 45.81027603]
[-37.81405258 45.35730743]
[-23.35260391 49.84565353]
[-11.13355255 58.78844070]
[-2.48232913 71.21562958]
[1.66264617 85.77921295]
[16.64236069 86.55905914]
[23.53019905 83.74777222]
[31.92461777 87.51415253]
[46.88486481 88.60546112]
[61.84511566 89.69677734]
[76.80536652 90.78808594]
[93.21446228 71.53926086]
[122.24590302 74.87254333]
[124.73102570 60.07983780]
[127.21614075 45.28712845]
[120.36515045 28.22712326]
[131.98268127 15.11099911]
[134.15953064 0.26979336]
[136.33636475 -14.57141209]
[138.51319885 -29.41261673]
[140.53553772 -44.27566528]
[142.40315247 -59.15894318]
[144.27076721 -74.04222107]
[130.19363403 -79.43646240]
[117.81687927 -88.04340363]
[107.86007690 -99.36266327]
[100.90210724 -112.73614502]
[97.34748840 -127.38633728]
[97.40288544 -142.46150208]
[101.06507111 -157.08517456]
[108.12113953 -170.40716553]
[118.16085815 -181.65293884]
[130.60052490 -190.16868591]
[144.71691895 -195.45933533]
[159.68933105 -197.21725464]
[174.64727783 -195.34027100]
[188.72114563 -189.93750000]
[201.09266663 -181.32305908]
[211.04260254 -169.99777222]
[217.99246216 -156.62007141]
[221.53820801 -141.96772766]
[221.47366333 -126.89260101]
[217.80261230 -112.27114868]
[210.73847961 -98.95344543]
[200.69194031 -87.71375275]
[188.24711609 -79.20554352]
[174.12751770 -73.92346191]
[159.15403748 -72.17461395]
[157.28642273 -57.29133224]
[155.41880798 -42.40805054]
[157.72152710 -35.33393478]
[153.35440063 -27.23578072]
[151.17756653 -12.39457512]
[149.00073242 2.44663024]
[146.82389832 17.28783607]
[153.80560303 27.21572876]
[152.06953430 39.63365936]
[142.00885010 47.77224731]
[139.52372742 62.56495285]
[137.03862000 77.35765839]
[147.58990479 88.01928711]
[162.40766907 85.68818665]
[177.22541809 83.35707855]
[192.04318237 81.02597809]
[204.45141602 70.30368042]
[219.85035706 75.94322205]
[222.39891052 92.14312744]
[209.47531128 102.23831940]
[194.37428284 95.84373474]
[179.55651855 98.17483521]
[164.73876953 100.50594330]
[149.92100525 102.83704376]
[141.79946899 115.44817352]
[145.80720520 129.90286255]
[149.81494141 144.35754395]
[160.66633606 151.40745544]
[163.68249512 163.57798767]
[157.76942444 174.17718506]
[161.47558594 188.71211243]
[165.18174744 203.24705505]
[168.88790894 217.78198242]
[172.59407043 232.31692505]
[177.77848816 239.91781616]
[176.22277832 247.19281006]
[179.62576294 261.80169678]
[183.02874756 276.41058350]
[186.43171692 291.01950073]
[192.88378906 277.47802734]
[205.16365051 268.86380005]
[220.09269714 267.40655518]
[233.80657959 273.48348999]
[242.75552368 285.52160645]
[244.62312317 300.40487671]
[238.92591858 314.28082275]
[227.13865662 323.55770874]
[212.31240845 325.83419800]
[198.28491211 320.52108765]
[188.68719482 308.99368286]
[188.99925232 323.99044800]
[189.31130981 338.98718262]
[189.62336731 353.98394775]
[189.93542480 368.98071289]
[190.24748230 383.97744751]
[190.55952454 398.97421265]
[190.87158203 413.97097778]
[191.18363953 428.96771240]
[193.77464294 448.17544556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[13 127]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[20 118]
[21 117]
[22 116]
[25 54]
[26 53]
[27 52]
[28 51]
[29 49]
[30 48]
[56 103]
[57 102]
[58 101]
[60 98]
[61 97]
[62 96]
[63 95]
[64 93]
[65 92]
[66 91]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
