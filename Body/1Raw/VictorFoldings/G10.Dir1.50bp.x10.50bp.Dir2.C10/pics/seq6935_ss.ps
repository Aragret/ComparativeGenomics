%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.41799927 174.67440796]
[97.23358154 159.69659424]
[98.04915619 144.71878052]
[98.86473846 129.74096680]
[99.68031311 114.76316071]
[91.78382874 127.51641846]
[91.09735870 143.32272339]
[77.81893158 150.07051086]
[69.92244720 162.82376099]
[62.02596664 175.57702637]
[54.12948227 188.33027649]
[54.16557312 204.72938538]
[39.84770203 212.72503662]
[25.90486526 204.09201050]
[26.68026161 187.71119690]
[41.37622833 180.43379211]
[49.27270889 167.68054199]
[57.16919327 154.92727661]
[65.06567383 142.17402649]
[65.18733215 127.27991486]
[79.03057098 119.61993408]
[86.92705536 106.86667633]
[79.03057098 94.11341858]
[64.09455872 95.49744415]
[49.15855026 96.88146973]
[34.22253799 98.26549530]
[19.31808853 99.95589447]
[4.45148993 101.95195007]
[-10.41510868 103.94800568]
[-15.60129452 118.34808350]
[-26.89331245 128.68002319]
[-41.69633865 132.56961060]
[-56.60874939 129.12307739]
[-68.20377350 119.13238525]
[-73.81697083 104.89333344]
[-72.15846252 89.67794800]
[-63.60936356 76.98261261]
[-50.13419342 69.72462463]
[-34.82944489 69.57182312]
[-21.21204376 76.55930328]
[-12.41116524 89.08141327]
[2.45543313 87.08535004]
[17.32203102 85.08929443]
[20.91176033 81.85462952]
[26.58975983 80.88087463]
[32.83851242 83.32948303]
[47.77452469 81.94545746]
[62.71053696 80.56143188]
[77.64654541 79.17740631]
[64.00048828 72.94963837]
[51.01955795 65.43329620]
[38.82507324 56.69862747]
[27.53099823 46.82725906]
[17.24289131 35.91144943]
[8.05690193 24.05322266]
[0.05887998 11.36339664]
[-6.67642450 -2.03942609]
[-12.08606529 -16.02998734]
[-16.11948395 -30.47753143]
[-18.73898506 -45.24703217]
[-19.92008591 -60.20046234]
[-19.65174866 -75.19805908]
[-17.93648338 -90.09967041]
[-14.79031754 -104.76601410]
[-10.24265575 -119.06002045]
[-4.33600140 -132.84811401]
[2.87444448 -146.00141907]
[11.32129383 -158.39701843]
[20.92560196 -169.91905212]
[31.59761047 -180.45983887]
[43.23757935 -189.92086792]
[55.73672104 -198.21372986]
[68.97821808 -205.26089478]
[82.83832550 -210.99652100]
[97.18750763 -215.36700439]
[111.89164734 -218.33149719]
[126.81333160 -219.86227417]
[141.81311035 -219.94505310]
[156.75077820 -218.57905579]
[171.48674011 -215.77703857]
[185.88328552 -211.56520081]
[199.80584717 -205.98289490]
[213.12432861 -199.08229065]
[225.71423340 -190.92790222]
[237.45791626 -181.59590149]
[248.24560547 -171.17355347]
[257.97650146 -159.75822449]
[266.55966187 -147.45660400]
[273.91482544 -134.38368225]
[279.97329712 -120.66162109]
[284.67843628 -106.41867828]
[287.98629761 -91.78794861]
[289.86593628 -76.90618134]
[290.29977417 -61.91245651]
[289.28378296 -46.94690323]
[286.82745361 -32.14939117]
[282.95373535 -17.65820885]
[277.69885254 -3.60879445]
[271.11187744 9.86754990]
[263.25439453 22.64487457]
[254.19984436 34.60376740]
[244.03283691 45.63245773]
[232.84840393 55.62787628]
[220.75106812 64.49660492]
[207.85388184 72.15576172]
[194.27738953 78.53376007]
[180.14846802 83.57099915]
[165.59918213 87.22039032]
[150.76548767 89.44783783]
[135.78602600 90.23252106]
[120.79453278 89.56652069]
[135.75581360 90.64358521]
[150.71708679 91.72065735]
[165.67837524 92.79772949]
[180.18832397 85.15618134]
[193.91490173 94.12910461]
[192.73736572 110.48591614]
[177.86706543 117.40013885]
[164.60130310 107.75901031]
[149.64002991 106.68193817]
[134.67874146 105.60486603]
[119.71746063 104.52780151]
[132.33084106 112.64583588]
[144.94422913 120.76387024]
[157.55761719 128.88191223]
[170.17100525 136.99995422]
[184.98196411 139.37384033]
[199.09869385 144.44511414]
[212.03446960 152.03890991]
[223.34326172 161.89341736]
[232.63516235 173.66883850]
[239.58979797 186.95918274]
[243.96736145 201.30619812]
[245.61694336 216.21520996]
[244.48164368 231.17219543]
[240.60061646 245.66140747]
[234.10768127 259.18331909]
[225.22669983 271.27166748]
[214.26388550 281.50967407]
[201.59722900 289.54431152]
[187.66346741 295.09860229]
[172.94300842 297.98101807]
[157.94342041 298.09216309]
[143.18186951 295.42822266]
[129.16732788 290.08102417]
[116.38298798 282.23495483]
[105.26965332 272.16055298]
[96.21051025 260.20513916]
[89.51789856 246.78094482]
[85.42258453 232.35081482]
[84.06575775 217.41230774]
[85.49420929 202.48048401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 22]
[6 21]
[8 19]
[9 18]
[10 17]
[11 16]
[23 49]
[24 48]
[25 47]
[26 46]
[27 43]
[28 42]
[29 41]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
