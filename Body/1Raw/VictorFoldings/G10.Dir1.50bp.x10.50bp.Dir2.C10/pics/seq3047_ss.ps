%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCxxxxxxxxxxUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.08464050 305.38992310]
[97.67563629 286.18222046]
[97.98769379 271.18545532]
[98.29975128 256.18872070]
[98.61180878 241.19195557]
[98.92386627 226.19520569]
[99.23591614 211.19844055]
[99.54797363 196.20169067]
[99.86003113 181.20494080]
[100.17208862 166.20819092]
[100.48414612 151.21142578]
[99.23726654 136.26333618]
[96.44494629 121.52553558]
[84.94337463 119.34682465]
[75.06149292 110.89253998]
[63.76248550 120.75826263]
[52.46348190 130.62397766]
[41.16447449 140.48970032]
[36.37438202 156.17367554]
[20.33784485 159.60319519]
[9.55188179 147.25025940]
[15.11216545 131.82250977]
[31.29875183 129.19070435]
[42.59775925 119.32498169]
[53.89676285 109.45925903]
[65.19577026 99.59353638]
[68.59874725 84.98464203]
[62.82247162 71.14142609]
[57.04619980 57.29820633]
[50.98318863 43.57815170]
[44.63605881 29.98719978]
[38.28892899 16.39624977]
[31.94179916 2.80529833]
[16.85531044 4.07936049]
[2.27057457 0.12240848]
[-10.05718040 -8.56935120]
[-18.65119553 -20.93110466]
[-22.49007607 -35.45985031]
[-21.12915421 -50.39713287]
[-14.75190639 -63.94186783]
[-4.14548731 -74.46751404]
[-10.49261665 -88.05846405]
[-16.83974648 -101.64941406]
[-23.18687630 -115.24036407]
[-29.53400612 -128.83131409]
[-35.88113403 -142.42227173]
[-50.34546280 -138.32598877]
[-65.27957916 -136.60314941]
[-80.29666901 -137.29835510]
[-95.00773621 -140.39358521]
[-109.03174591 -145.80870056]
[-122.00543213 -153.40341187]
[-133.59274292 -162.98100281]
[-143.49354553 -174.29341125]
[-151.45138550 -187.04757690]
[-157.26013184 -200.91317749]
[-160.76933289 -215.53102112]
[-161.88807678 -230.52250671]
[-160.58738708 -245.49929810]
[-156.90097046 -260.07348633]
[-150.92430115 -273.86752319]
[-142.81219482 -286.52413940]
[-132.77476501 -297.71548462]
[-121.07202148 -307.15167236]
[-108.00708008 -314.58831787]
[-93.91836548 -319.83276367]
[-79.17079163 -322.74914551]
[-64.14637756 -323.26196289]
[-49.23427200 -321.35794067]
[-34.82074738 -317.08633423]
[-21.27914429 -310.55786133]
[-8.96022320 -301.94155884]
[1.81692529 -291.46066284]
[10.77314854 -279.38662720]
[17.67645836 -266.03222656]
[22.34804153 -251.74331665]
[24.66689301 -236.89007568]
[24.57295036 -221.85719299]
[22.06864738 -207.03408813]
[17.21884918 -192.80468750]
[10.14917755 -179.53759766]
[1.04275465 -167.57643127]
[-9.86454105 -157.23104858]
[-22.29018402 -148.76939392]
[-15.94305420 -135.17845154]
[-9.59592533 -121.58749390]
[-3.24879551 -107.99654388]
[3.09833407 -94.40559387]
[9.44546318 -80.81464386]
[24.32466888 -82.19107819]
[38.80415726 -78.38668060]
[51.13145065 -69.84194946]
[59.80771637 -57.57231522]
[63.77003479 -43.04750443]
[62.52155685 -28.01548767]
[56.19372559 -14.29212952]
[45.53274918 -3.54183125]
[51.87987900 10.04911995]
[58.22700882 23.64006996]
[64.57413483 37.23102188]
[68.73638916 39.69093323]
[71.36298370 44.82243729]
[70.88941956 51.52193069]
[76.66568756 65.36515045]
[82.44196320 79.20836639]
[108.11348724 76.86619568]
[121.40412903 95.77501678]
[136.22189331 98.10612488]
[151.03964233 100.43722534]
[165.85740662 102.76833344]
[169.98274231 100.99546051]
[174.04269409 100.69913483]
[177.56971741 101.66973114]
[180.21633911 103.56429291]
[181.78901672 105.95886993]
[196.36172485 109.51362610]
[210.76274109 102.44326782]
[225.20735168 109.42414856]
[228.61488342 125.10115051]
[218.37136841 137.44821167]
[202.33474731 136.99372864]
[192.80696106 124.08633423]
[178.23425293 120.53157043]
[163.52629089 117.58609009]
[148.70854187 115.25498199]
[133.89077759 112.92388153]
[119.07302094 110.59277344]
[115.66587830 115.18444824]
[111.18274689 118.73321533]
[113.97507477 133.47102356]
[120.98486328 120.20968628]
[133.61242676 112.11373138]
[148.58917236 111.27876282]
[162.03840637 117.92090607]
[170.47883606 130.32087708]
[171.72567749 145.26896667]
[165.45620728 158.89590454]
[153.29324341 167.67442322]
[138.38513184 169.33219910]
[124.59078979 163.44013977]
[115.48089600 151.52348328]
[115.16883850 166.52023315]
[114.85678864 181.51699829]
[114.54473114 196.51374817]
[114.23267365 211.51049805]
[113.92061615 226.50724792]
[113.60855865 241.50401306]
[113.29650116 256.50076294]
[112.98444366 271.49752808]
[112.67239380 286.49426270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[12 130]
[13 129]
[15 26]
[16 25]
[17 24]
[18 23]
[27 105]
[28 104]
[29 103]
[30 100]
[31 99]
[32 98]
[33 97]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[107 127]
[108 126]
[109 125]
[110 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
