%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUxxxxxxxxxxUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.67250061 282.65615845]
[98.67250061 267.65615845]
[98.67250061 252.65617371]
[98.67250061 237.65617371]
[98.67250061 222.65617371]
[98.67250061 207.65617371]
[98.67250061 192.65617371]
[98.67250061 177.65617371]
[98.67250061 162.65617371]
[98.67250061 147.65617371]
[76.56076050 135.90034485]
[65.58163452 116.28034973]
[66.92196655 96.38903046]
[77.49306488 82.55765533]
[68.47553253 70.57082367]
[59.45800400 58.58398819]
[50.44047546 46.59715652]
[41.42294693 34.61032486]
[26.94366646 28.23372269]
[25.47547722 13.41165543]
[16.45794678 1.42482316]
[7.44041777 -10.56200981]
[-4.28629208 -7.50981617]
[-17.20155334 -11.21450424]
[-27.38355064 -21.89988899]
[-41.61032867 -17.14607239]
[-55.83710861 -12.39225864]
[-64.25900269 1.26245892]
[-80.20233154 3.04841661]
[-91.43675232 -8.40441990]
[-89.34416199 -24.31041336]
[-75.52983093 -32.46784973]
[-60.59092331 -26.61903763]
[-46.36414337 -31.37285233]
[-32.13736725 -36.12666702]
[-47.13188553 -35.72117615]
[-57.54465103 -46.51813126]
[-56.59638977 -61.48812866]
[-44.90446854 -70.88488007]
[-30.08096504 -68.59059143]
[-21.77686882 -56.09939957]
[-26.08445358 -70.46758270]
[-30.39203644 -84.83576965]
[-45.19279861 -82.28726959]
[-60.19283295 -81.54143524]
[-75.17340088 -82.60913086]
[-89.91603851 -85.47479248]
[-104.20575714 -90.09662628]
[-117.83415985 -96.40724182]
[-130.60252380 -104.31460571]
[-142.32463074 -113.70339966]
[-152.82954407 -124.43672180]
[-161.96408081 -136.35803223]
[-169.59501648 -149.29348755]
[-175.61106873 -163.05447388]
[-179.92453003 -177.44027710]
[-182.47247314 -192.24113464]
[-183.21775818 -207.24119568]
[-182.14949036 -222.22172546]
[-179.28327942 -236.96424866]
[-174.66090393 -251.25379944]
[-168.34979248 -264.88195801]
[-160.44194031 -277.65002441]
[-151.05270386 -289.37179565]
[-140.31900024 -299.87631226]
[-128.39733887 -309.01037598]
[-115.46160126 -316.64083862]
[-101.70040131 -322.65640259]
[-87.31443024 -326.96929932]
[-72.51348114 -329.51669312]
[-57.51338959 -330.26141357]
[-42.53290176 -329.19259644]
[-27.79047966 -326.32583618]
[-13.50110912 -321.70291138]
[0.12682737 -315.39129639]
[12.89459515 -307.48297119]
[24.61600113 -298.09329224]
[35.12011337 -287.35919189]
[44.25375366 -275.43719482]
[51.88372421 -262.50115967]
[57.89875793 -248.73974609]
[62.21113586 -234.35362244]
[64.75797272 -219.55256653]
[65.50212860 -204.55244446]
[64.43275452 -189.57200623]
[61.56543350 -174.82968140]
[56.94199371 -160.54049683]
[50.62985229 -146.91279602]
[42.72105789 -134.14532471]
[33.33094406 -122.42426300]
[22.59644890 -111.92054749]
[10.67411137 -102.78736115]
[-2.26220608 -95.15787506]
[-16.02385330 -89.14335632]
[-11.71626854 -74.77516937]
[-7.40868378 -60.40698624]
[21.87390709 -47.10874939]
[19.42724991 -19.57954025]
[28.44478035 -7.59270668]
[37.46231079 4.39412594]
[51.29659653 9.91334820]
[53.40977859 25.59279442]
[62.42730713 37.57962799]
[71.44483948 49.56645966]
[80.46236420 61.55329132]
[89.47989655 73.54012299]
[117.06675720 65.96472931]
[146.03819275 87.61625671]
[160.99844360 86.52494049]
[174.25503540 76.87118530]
[189.13189697 83.77124786]
[190.32499695 100.12693787]
[176.60697937 109.11292267]
[162.08975220 101.48519135]
[147.12950134 102.57649994]
[144.64439392 117.36920929]
[158.42677307 123.28916931]
[172.20915222 129.20913696]
[185.99153137 135.12910461]
[199.77391052 141.04905701]
[215.14730835 136.46229553]
[228.23573303 145.73980713]
[228.99890137 161.76469421]
[216.85134888 172.24403381]
[201.11164856 169.13897705]
[193.85394287 154.83143616]
[180.07156372 148.91148376]
[166.28918457 142.99151611]
[152.50680542 137.07154846]
[138.72442627 131.15159607]
[132.46144104 135.27774048]
[141.71844482 147.08061218]
[150.97543335 158.88349915]
[163.44297791 167.22378540]
[163.39018250 182.22369385]
[150.86425781 190.47602844]
[137.06108093 184.60469055]
[134.31825256 169.85749817]
[127.12686157 156.69375610]
[119.93547821 143.53002930]
[113.67250061 147.65617371]
[113.67250061 162.65617371]
[113.67250061 177.65617371]
[113.67250061 192.65617371]
[113.67250061 207.65617371]
[113.67250061 222.65617371]
[113.67250061 237.65617371]
[113.67250061 252.65617371]
[113.67250061 267.65615845]
[113.67250061 282.65615845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[20 100]
[21 99]
[22 98]
[25 35]
[26 34]
[27 33]
[41 96]
[42 95]
[43 94]
[108 115]
[109 114]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
