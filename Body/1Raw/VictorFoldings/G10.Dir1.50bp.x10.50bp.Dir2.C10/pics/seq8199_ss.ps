%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCxxxxxxxxxxUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-2.02078986 223.04409790]
[-12.12622452 234.12922668]
[-15.70540619 249.54026794]
[-29.99764824 253.73324585]
[-40.10308456 264.81838989]
[-50.20851898 275.90350342]
[-53.78770065 291.31454468]
[-68.07994080 295.50753784]
[-78.18537903 306.59268188]
[-88.29080963 317.67779541]
[-98.39624786 328.76293945]
[-108.50167847 339.84808350]
[-103.21833801 354.21276855]
[-105.22728729 369.38586426]
[-114.06687927 381.88067627]
[-127.70584106 388.82598877]
[-143.01004028 388.62582397]
[-156.46267700 381.32617188]
[-164.97245789 368.60443115]
[-166.58386230 353.38400269]
[-160.92663574 339.16238403]
[-149.30073547 329.20761108]
[-134.37773132 325.80725098]
[-119.58681488 329.74264526]
[-109.48137665 318.65750122]
[-99.37594604 307.57235718]
[-89.27050781 296.48724365]
[-79.16507721 285.40209961]
[-76.30870056 270.78393555]
[-61.29365158 265.79809570]
[-51.18821716 254.71295166]
[-41.08278275 243.62782288]
[-38.22640991 229.00965881]
[-23.21135902 224.02380371]
[-13.10592365 212.93865967]
[-30.56477737 192.20048523]
[-44.26797485 168.81019592]
[-53.82134247 143.44059753]
[-58.95008850 116.82144928]
[-59.50667953 89.71842957]
[-55.47510910 62.91116333]
[-46.97134399 37.17073822]
[-34.23999023 13.23758411]
[-17.64726257 -8.19987774]
[-28.19927788 -18.86078644]
[-38.75129318 -29.52169418]
[-49.30330658 -40.18260574]
[-59.85532379 -50.84351349]
[-73.36130524 -44.02854919]
[-88.31250000 -41.72271729]
[-103.24414825 -44.15191269]
[-116.69340515 -51.07815552]
[-127.34263611 -61.82287598]
[-134.14854431 -75.33341980]
[-136.44436646 -90.28615570]
[-134.00515747 -105.21617889]
[-127.06990814 -118.66078186]
[-116.31805420 -129.30281067]
[-102.80295563 -136.09967041]
[-87.84867859 -138.38546753]
[-72.92029572 -135.93626404]
[-59.48034286 -128.99200439]
[-48.84551620 -118.23302460]
[-42.05772018 -104.71337128]
[-39.78194427 -89.75756836]
[-42.24115372 -74.83083344]
[-49.19441605 -61.39552689]
[-38.64239883 -50.73461914]
[-28.09038353 -40.07371140]
[-17.53836823 -29.41280174]
[-6.98635387 -18.75189209]
[0.48935959 -25.08287048]
[8.33887005 -30.94399261]
[16.53269196 -36.31324387]
[25.04004478 -41.17045212]
[33.82897568 -45.49737930]
[42.86646652 -49.27776337]
[52.11857224 -52.49741364]
[61.55053329 -55.14422607]
[71.12693024 -57.20826340]
[80.81178284 -58.68177032]
[90.56871033 -59.55921173]
[100.36106110 -59.83729553]
[110.15206146 -59.51497650]
[119.90493011 -58.59346008]
[129.58302307 -57.07621384]
[139.14999390 -54.96893311]
[148.56990051 -52.27953339]
[157.80737305 -49.01811981]
[166.82768250 -45.19694138]
[175.59698486 -40.83035278]
[184.08230591 -35.93475723]
[192.25178528 -30.52854156]
[200.07473755 -24.63201714]
[207.52177429 -18.26733017]
[214.56491089 -11.45838833]
[221.17771912 -4.23077154]
[227.33532715 3.38837290]
[233.01461792 11.37042427]
[238.19427490 19.68540001]
[242.85481262 28.30206490]
[246.97874451 37.18805313]
[250.55056763 46.30998230]
[253.55686951 55.63359070]
[255.98637390 65.12385559]
[257.82992554 74.74513245]
[259.08059692 84.46126556]
[259.73373413 94.23577881]
[259.78683472 104.03193665]
[259.23974609 113.81295013]
[274.10632324 115.80900574]
[288.97293091 117.80506134]
[303.67999268 111.97296906]
[315.26446533 121.33508301]
[330.13107300 123.33113861]
[344.99765015 125.32719421]
[361.50051880 121.44235229]
[369.80197144 136.22483826]
[357.89529419 148.29408264]
[343.00158691 140.19380188]
[328.13500977 138.19773865]
[313.26840210 136.20167542]
[299.62472534 142.17654419]
[286.97686768 132.67166138]
[272.11029053 130.67559814]
[257.24368286 128.67955017]
[254.67768860 140.28530884]
[251.25633240 151.66828918]
[246.99856567 162.76554871]
[241.92790222 173.51571655]
[236.07240295 183.85935974]
[229.46443176 193.73927307]
[222.14054871 203.10081482]
[214.14123535 211.89222717]
[205.51072693 220.06489563]
[196.29676819 227.57360840]
[186.55029297 234.37684631]
[176.32521057 240.43701172]
[165.67805481 245.72056580]
[154.66770935 250.19831848]
[143.35505676 253.84547424]
[131.80265808 256.64190674]
[120.07440186 258.57211304]
[108.23513031 259.62542725]
[96.35031128 259.79602051]
[84.48568726 259.08297729]
[72.70684814 257.49023438]
[61.07893753 255.02658081]
[49.66625595 251.70565796]
[38.53191376 247.54580688]
[27.73748207 242.57005310]
[17.34265518 236.80590820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[4 32]
[5 31]
[6 30]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[110 126]
[111 125]
[112 124]
[114 122]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
