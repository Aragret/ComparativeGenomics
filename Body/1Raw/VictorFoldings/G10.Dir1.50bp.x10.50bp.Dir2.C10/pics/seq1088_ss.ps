%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.27687836 92.62073517]
[112.71503448 106.59569550]
[101.03827667 114.28626251]
[94.13127899 127.60141754]
[87.22427368 140.91658020]
[80.31727600 154.23173523]
[73.41027832 167.54689026]
[73.92398834 183.35975647]
[61.19527817 191.09469604]
[62.47440338 207.44387817]
[48.80384064 216.50189209]
[34.24669266 208.95063782]
[33.77810669 192.55818176]
[47.88012314 184.18769836]
[46.87238312 169.32722473]
[60.09512329 160.63989258]
[67.00212097 147.32473755]
[73.90911865 134.00958252]
[80.81611633 120.69441986]
[87.72312164 107.37926483]
[87.28496552 93.40430450]
[98.96172333 85.71373749]
[83.70581055 76.62706757]
[69.05646515 66.59213257]
[55.07255936 55.64928436]
[41.81026840 43.84252167]
[29.32287216 31.21931267]
[17.66053581 17.83040428]
[6.87010765 3.72962189]
[-3.00507021 -11.02635098]
[-11.92533493 -26.37819862]
[-19.85486031 -42.26420975]
[-26.76180267 -58.62053680]
[-32.61843491 -75.38143158]
[-37.40123749 -92.47953033]
[-41.09102249 -109.84611511]
[-43.67298508 -127.41137695]
[-45.13677597 -145.10473633]
[-45.47653961 -162.85507202]
[-44.69093323 -180.59106445]
[-42.78314972 -198.24142456]
[-39.76087570 -215.73524475]
[-35.63628769 -233.00219727]
[-30.42598343 -249.97290039]
[-24.15092850 -266.57919312]
[-16.83636856 -282.75430298]
[-8.51172161 -298.43325806]
[0.78953385 -313.55310059]
[11.02999496 -328.05300903]
[22.16848755 -341.87478638]
[34.16022491 -354.96286011]
[46.95699692 -367.26467896]
[37.20934677 -378.66567993]
[27.46169472 -390.06671143]
[17.71404266 -401.46774292]
[7.96639013 -412.86874390]
[-7.66690588 -417.82174683]
[-10.92941475 -433.89309692]
[1.53505361 -444.54995728]
[16.90412140 -438.82949829]
[19.36741066 -422.61639404]
[29.11506271 -411.21539307]
[38.86271667 -399.81436157]
[48.61036682 -388.41333008]
[58.35802078 -377.01232910]
[69.25644684 -385.40295410]
[80.55380249 -393.24829102]
[92.22282410 -400.52944946]
[104.23536682 -407.22882080]
[116.56245422 -413.33026123]
[129.17433167 -418.81903076]
[142.04057312 -423.68188477]
[155.13014221 -427.90707397]
[168.41146851 -431.48440552]
[181.85247803 -434.40527344]
[195.42077637 -436.66256714]
[209.08358765 -438.25085449]
[222.80798340 -439.16632080]
[236.56082153 -439.40670776]
[250.30894470 -438.97149658]
[264.01916504 -437.86166382]
[277.65838623 -436.07992554]
[291.19372559 -433.63058472]
[304.59249878 -430.51950073]
[317.82241821 -426.75418091]
[330.85150146 -422.34371948]
[343.64837646 -417.29876709]
[356.18209839 -411.63150024]
[368.42245483 -405.35552979]
[380.33990479 -398.48605347]
[391.90570068 -391.03961182]
[403.09194946 -383.03414917]
[413.87161255 -374.48901367]
[424.21868896 -365.42483521]
[434.10821533 -355.86340332]
[443.51632690 -345.82785034]
[452.42034912 -335.34237671]
[460.79873657 -324.43228149]
[468.63131714 -313.12384033]
[475.89916992 -301.44439697]
[482.58474731 -289.42208862]
[488.67190552 -277.08593750]
[494.14599609 -264.46569824]
[498.99374390 -251.59181213]
[503.20349121 -238.49534607]
[506.76507568 -225.20791626]
[509.66986084 -211.76156616]
[511.91085815 -198.18875122]
[513.48266602 -184.52218628]
[514.38146973 -170.79487610]
[514.60510254 -157.03993225]
[514.15301514 -143.29055786]
[513.02630615 -129.57989502]
[511.22766113 -115.94105530]
[508.76141357 -102.40693665]
[505.63354492 -89.01019287]
[501.85159302 -75.78315735]
[497.42462158 -62.75774384]
[492.36337280 -49.96537781]
[486.68002319 -37.43693161]
[480.38827515 -25.20263672]
[473.50332642 -13.29201031]
[466.04177856 -1.73379862]
[458.02160645 9.44410992]
[449.46215820 20.21474075]
[440.38412476 30.55210114]
[430.80938721 40.43124771]
[420.76101685 49.82833862]
[410.26327515 58.72069550]
[399.34149170 67.08686066]
[388.02200317 74.90663910]
[376.33215332 82.16116333]
[364.30007935 88.83292389]
[351.95486450 94.90580750]
[339.32629395 100.36517334]
[326.44479370 105.19783783]
[313.34146118 109.39212799]
[300.04794312 112.93792725]
[286.59628296 115.82666779]
[273.01892090 118.05137634]
[259.34866333 119.60668182]
[245.61845398 120.48883057]
[231.86143494 120.69567871]
[218.11079407 120.22672272]
[204.39971924 119.08309174]
[190.76129150 117.26753998]
[177.22840881 114.78444672]
[163.83374023 111.63978577]
[150.60958862 107.84115601]
[137.58787537 103.39769745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[9 14]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
