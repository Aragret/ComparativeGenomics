%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGUUCACCxxxxxxxxxxAAAGACCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.96939850 558.73925781]
[112.96939850 543.73925781]
[112.96939850 528.73925781]
[112.96939850 513.73925781]
[112.96939850 498.73925781]
[112.96939850 483.73925781]
[112.96939850 468.73925781]
[112.96939850 453.73925781]
[112.96939850 438.73925781]
[112.96939850 423.73925781]
[98.42700195 420.18859863]
[85.14904785 413.25637817]
[73.90937042 403.34167480]
[65.36418915 391.01754761]
[60.01379013 376.99795532]
[58.17324066 362.09625244]
[59.95383453 347.17813110]
[65.25638580 333.11126709]
[73.77672577 320.71490479]
[85.02316284 310.71206665]
[98.34483337 303.68743896]
[112.96939850 300.05319214]
[112.96939850 285.05319214]
[112.96939850 270.05319214]
[112.96939850 255.05319214]
[112.04598236 240.08164978]
[110.20265961 225.19534302]
[98.88255310 211.82000732]
[106.11853790 194.91819763]
[103.96995544 180.07287598]
[101.82138062 165.22753906]
[92.34082794 153.73979187]
[98.02162170 138.97364807]
[95.87304688 124.12832642]
[93.72446442 109.28300476]
[82.55187988 119.29166412]
[67.72725677 117.00466156]
[60.09040833 104.09425354]
[65.22544098 90.00058746]
[79.37759399 85.02900696]
[92.19841003 92.81423187]
[91.58258820 77.82688141]
[90.96675873 62.83953094]
[78.21613312 54.19501114]
[73.06082153 39.86754990]
[77.28064728 25.42258453]
[89.05615234 16.34097862]
[88.44032288 1.35362458]
[74.49716187 -4.75781488]
[64.63035583 -16.27011681]
[60.75625610 -30.86503220]
[63.59149933 -45.63399887]
[72.52112579 -57.65777588]
[85.73099518 -64.58344269]
[85.11516571 -79.57080078]
[71.17200470 -85.68223572]
[61.30520248 -97.19454193]
[57.43109894 -111.78945160]
[60.26633835 -126.55842590]
[69.19596863 -138.58219910]
[82.40583038 -145.50787354]
[81.79000854 -160.49522400]
[81.17417908 -175.48257446]
[77.67706299 -183.98939514]
[80.70277405 -190.78330994]
[80.39479828 -205.78015137]
[65.85764313 -209.92292786]
[53.18835449 -218.16795349]
[43.51346588 -229.78208923]
[37.69326782 -243.73258972]
[36.24528885 -258.77902222]
[39.29827881 -273.58343506]
[46.58076859 -286.82943726]
[57.44520187 -297.33920288]
[70.92552948 -304.17825317]
[85.82308197 -306.73840332]
[100.81317902 -304.79202271]
[114.56291199 -298.51220703]
[125.84967041 -288.45730591]
[133.66983032 -275.52145386]
[137.32804871 -260.85485840]
[136.49902344 -245.76168823]
[131.25646973 -231.58398438]
[122.06655121 -219.58245850]
[109.74644470 -210.82423401]
[95.39163208 -206.08811951]
[95.69960785 -191.09129333]
[96.16153717 -176.09840393]
[96.77735901 -161.11105347]
[97.39318848 -146.12368774]
[111.12670898 -140.30511475]
[121.01267242 -129.05447388]
[125.05001831 -114.56789398]
[122.38635254 -99.70434570]
[113.49729156 -87.42137146]
[100.10251617 -80.18662262]
[100.71834564 -65.19927216]
[114.45186615 -59.38069916]
[124.33783722 -48.13004684]
[128.37516785 -33.64347076]
[125.71150970 -18.77992249]
[116.82244873 -6.49694681]
[103.42768097 0.73779923]
[104.04350281 15.72515297]
[116.52436829 23.81007385]
[121.91505432 37.86014557]
[117.95255280 52.56225586]
[105.95411682 62.22370529]
[106.56993866 77.21105957]
[107.18576050 92.19841003]
[108.56978607 107.13442230]
[110.71836853 121.97974396]
[112.86695099 136.82507324]
[122.50118256 149.37464905]
[116.66670227 163.07896423]
[118.81527710 177.92428589]
[120.96385956 192.76960754]
[130.83592224 201.13299561]
[132.29096985 213.58506775]
[125.08896637 223.35202026]
[126.93228912 238.23832703]
[137.28530884 227.38404846]
[152.27542114 226.83975220]
[163.38838196 236.91459656]
[164.31208801 251.88612366]
[154.52189636 263.25064087]
[139.57855225 264.55316162]
[127.96939850 255.05319214]
[127.96939850 270.05319214]
[127.96939850 285.05319214]
[127.96939850 300.05319214]
[142.59396362 303.68743896]
[155.91563416 310.71206665]
[167.16206360 320.71490479]
[175.68240356 333.11126709]
[180.98495483 347.17813110]
[182.76554871 362.09625244]
[180.92500305 376.99795532]
[175.57460022 391.01754761]
[167.02941895 403.34167480]
[155.78974915 413.25637817]
[142.51179504 420.18859863]
[127.96939850 423.73925781]
[127.96939850 438.73925781]
[127.96939850 453.73925781]
[127.96939850 468.73925781]
[127.96939850 483.73925781]
[127.96939850 498.73925781]
[127.96939850 513.73925781]
[127.96939850 528.73925781]
[127.96939850 543.73925781]
[127.96939850 558.73925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 129]
[25 128]
[26 121]
[27 120]
[29 117]
[30 116]
[31 115]
[33 113]
[34 112]
[35 111]
[41 110]
[42 109]
[43 108]
[47 104]
[48 103]
[54 97]
[55 96]
[61 90]
[62 89]
[63 88]
[65 87]
[66 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
