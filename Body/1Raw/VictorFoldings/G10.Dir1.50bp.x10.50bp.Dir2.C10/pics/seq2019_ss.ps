%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCxxxxxxxxxxUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.10023499 301.23486328]
[115.10023499 286.23486328]
[115.10023499 271.23486328]
[115.10023499 256.23486328]
[115.10023499 241.23486328]
[115.10023499 226.23486328]
[115.10023499 211.23486328]
[115.10023499 196.23486328]
[115.10023499 181.23486328]
[115.10023499 166.23486328]
[113.23262787 151.35157776]
[109.52646637 136.81665039]
[105.82030487 122.28170776]
[102.45424652 136.89915466]
[88.58840179 142.62088013]
[75.89344788 134.63099670]
[75.05456543 119.65447998]
[86.77790833 110.29683685]
[72.06994629 113.24231720]
[63.29288864 126.11092377]
[48.33496475 128.88853455]
[36.12080383 120.44165039]
[21.41284370 123.38713837]
[19.89620018 138.42678833]
[14.01238728 152.35058594]
[4.28459024 163.92044067]
[-8.42220211 172.10754395]
[-22.97811127 176.18392944]
[-38.08883286 175.78712463]
[-52.41073608 170.95240784]
[-64.67032623 162.10968018]
[-73.77748108 150.04522705]
[-78.92240906 135.83180237]
[-79.64762115 120.73328400]
[-75.88863373 106.09219360]
[-67.97969818 93.21041870]
[-56.62405777 83.23339844]
[-42.83146286 77.04828644]
[-27.82833290 75.20504761]
[-12.94874001 77.86758423]
[0.48423338 84.79915619]
[11.27613735 95.38339996]
[18.46736145 108.67917633]
[33.17532349 105.73368835]
[41.19477081 93.23473358]
[56.06877899 90.03807068]
[69.12446594 98.53435516]
[83.83242798 95.58887482]
[95.72480774 86.44713593]
[102.35330200 72.99117279]
[108.98180389 59.53520584]
[115.61029816 46.07924271]
[122.23880005 32.62327576]
[128.86729431 19.16731071]
[135.49580383 5.71134567]
[142.12429810 -7.74461985]
[129.39657593 -15.70679474]
[117.53969574 -24.91577721]
[106.67531586 -35.27706909]
[96.91493225 -46.68434143]
[88.35870361 -59.02054214]
[81.09441376 -72.15908051]
[75.19662476 -85.96513367]
[70.72585297 -100.29702759]
[67.72797394 -115.00769806]
[66.23374939 -129.94618225]
[66.25850677 -144.95918274]
[67.80200958 -159.89265442]
[70.84840393 -174.59335327]
[75.36643219 -188.91043091]
[81.30973053 -202.69694519]
[88.61731720 -215.81144714]
[97.21420288 -228.11935425]
[107.01216888 -239.49436951]
[117.91066742 -249.81976318]
[129.79786682 -258.98959351]
[142.55177307 -266.90972900]
[156.04153442 -273.49893188]
[170.12869263 -278.68954468]
[184.66871643 -282.42837524]
[199.51240540 -284.67697144]
[214.50741577 -285.41232300]
[229.49987793 -284.62686157]
[244.33595276 -282.32864380]
[258.86340332 -278.54122925]
[272.93313599 -273.30355835]
[286.40078735 -266.66928101]
[299.12814331 -258.70654297]
[310.98461914 -249.49705505]
[321.84854126 -239.13528442]
[331.60842896 -227.72758484]
[340.16412354 -215.39100647]
[347.42782593 -202.25213623]
[353.32501221 -188.44583130]
[357.79516602 -174.11373901]
[360.79238892 -159.40293884]
[362.28594971 -144.46438599]
[362.26052856 -129.45138550]
[360.71636963 -114.51797485]
[357.66934204 -99.81741333]
[353.15066528 -85.50054932]
[347.20675659 -71.71428680]
[339.89862061 -58.60010529]
[331.30117798 -46.29257584]
[321.50271606 -34.91799164]
[310.60375977 -24.59307861]
[298.71615601 -15.42378521]
[285.96191406 -7.50420141]
[272.47186279 -0.91559768]
[258.38446045 4.27441692]
[243.84426880 8.01258469]
[229.00048828 10.26054478]
[214.00544739 10.99523067]
[199.01301575 10.20910263]
[184.17704773 7.91022730]
[169.64976501 4.12219572]
[155.58026123 -1.11612117]
[148.95176697 12.33984470]
[142.32325745 25.79581070]
[135.69476318 39.25177383]
[129.06626892 52.70774078]
[122.43776703 66.16370392]
[115.80926514 79.61967468]
[109.18077087 93.07563782]
[119.50678253 100.91276550]
[120.35523987 118.57554626]
[124.06140137 133.11048889]
[127.76756287 147.64541626]
[133.22135925 133.67201233]
[144.11555481 123.36101532]
[158.36758423 118.68347168]
[173.25306702 120.53354645]
[185.92646790 128.55757141]
[193.96514893 141.22167969]
[195.83242798 156.10499573]
[191.17138672 170.36242676]
[180.87300110 181.26853943]
[166.90591431 186.73851013]
[151.94007874 185.72669983]
[138.83636475 178.42652893]
[130.10023499 166.23486328]
[130.10023499 181.23486328]
[130.10023499 196.23486328]
[130.10023499 211.23486328]
[130.10023499 226.23486328]
[130.10023499 241.23486328]
[130.10023499 256.23486328]
[130.10023499 271.23486328]
[130.10023499 286.23486328]
[130.10023499 301.23486328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[18 48]
[19 47]
[22 44]
[23 43]
[49 124]
[50 123]
[51 122]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
