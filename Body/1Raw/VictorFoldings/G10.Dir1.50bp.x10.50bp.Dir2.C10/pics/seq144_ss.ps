%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.85900116 274.49832153]
[89.42988586 255.28788757]
[89.72624969 240.29081726]
[90.02260590 225.29374695]
[90.31896210 210.29667664]
[90.61531830 195.29959106]
[90.91167450 180.30252075]
[91.20803070 165.30545044]
[91.50439453 150.30838013]
[91.80075073 135.31130981]
[92.09710693 120.31423950]
[78.61952972 113.72978973]
[66.97167206 123.18110657]
[55.32381439 132.63243103]
[43.67595673 142.08374023]
[32.02809525 151.53506470]
[20.38023949 160.98637390]
[8.73238087 170.43769836]
[-2.91547680 179.88900757]
[-14.56333447 189.34033203]
[-19.91660690 204.84112549]
[-36.06651306 207.68937683]
[-46.39941788 194.95504761]
[-40.28571320 179.73812866]
[-24.01465225 177.69247437]
[-12.36679459 168.24114990]
[-0.71893650 158.78984070]
[10.92892170 149.33851624]
[22.57678032 139.88720703]
[34.22463608 130.43588257]
[45.87249374 120.98456573]
[57.52035141 111.53324890]
[69.16821289 102.08193207]
[66.62628174 95.02583313]
[59.00049591 73.85752106]
[44.00122833 74.00570679]
[29.00196075 74.15389252]
[15.16442585 82.95472717]
[0.75101304 75.13260651]
[0.58900481 58.73425674]
[14.84506226 50.62889481]
[28.85377502 59.15462112]
[43.85304260 59.00643539]
[58.85231018 58.85824966]
[116.52445984 74.33875275]
[119.46897888 59.63059616]
[114.52478790 45.46885681]
[103.06593323 35.78925323]
[91.60707855 26.10965347]
[80.14823151 16.43005180]
[66.65788269 23.43569565]
[51.51305771 24.74055672]
[37.02322388 20.14565086]
[25.39797783 10.35166931]
[18.41008377 -3.14787889]
[17.12514687 -18.29440880]
[21.73911095 -32.77818680]
[31.54837608 -44.39053726]
[45.05710602 -51.36066818]
[60.20531082 -52.62567902]
[74.68300629 -47.99266815]
[86.28244781 -38.16813278]
[93.23480225 -24.65024757]
[94.47988129 -9.50039005]
[89.82782745 4.97119808]
[101.28668213 14.65079975]
[112.74553680 24.33040047]
[124.20439148 34.01000214]
[139.08085632 32.08884430]
[147.70471191 19.81574821]
[133.84477234 25.55176163]
[118.85117340 25.98985481]
[104.67995453 21.07287216]
[93.17988586 11.44227695]
[85.85123444 -1.64553928]
[83.65010071 -16.48316002]
[86.86362457 -31.13489151]
[95.07257843 -43.68929291]
[107.20603943 -52.50853729]
[121.68109894 -56.44208145]
[136.60935974 -54.97675705]
[150.04328918 -48.30373001]
[160.23034668 -37.29355240]
[165.84152222 -23.38259888]
[166.14480591 -8.38566399]
[161.09989929 5.74199581]
[172.93222046 -3.47734857]
[184.76454163 -12.69669247]
[196.59684753 -21.91603661]
[208.42916870 -31.13538170]
[220.26147461 -40.35472488]
[212.82470703 -53.69185638]
[218.49664307 -73.16580200]
[229.15550232 -83.71987915]
[239.81436157 -94.27396393]
[250.47323608 -104.82804108]
[261.13211060 -115.38212585]
[264.93038940 -131.33532715]
[280.72064209 -135.76258850]
[292.25915527 -124.10949707]
[287.67614746 -108.36376953]
[271.68618774 -104.72325897]
[261.02731323 -94.16917419]
[250.36845398 -83.61509705]
[239.70957947 -73.06101990]
[229.05072021 -62.50693893]
[237.18298340 -49.90272141]
[251.19198608 -55.26440430]
[263.82345581 -66.57291412]
[278.18676758 -57.56559372]
[273.50762939 -41.27013779]
[256.55368042 -41.25539398]
[242.54466248 -35.89371109]
[229.48081970 -28.52240944]
[217.64851379 -19.30306625]
[205.81619263 -10.08372116]
[193.98387146 -0.86437720]
[182.15156555 8.35496712]
[170.31924438 17.57431221]
[159.97781372 28.43961334]
[151.35394287 40.71271133]
[146.78964233 55.74015808]
[134.17713928 62.57511902]
[131.23262024 77.28327179]
[138.21356201 90.55981445]
[151.99980164 96.47075653]
[165.78605652 102.38169861]
[181.99723816 99.90589142]
[192.03433228 112.87465668]
[185.57203674 127.94683838]
[169.25820923 129.61747742]
[159.87510681 116.16795349]
[146.08886719 110.25701141]
[132.30261230 104.34606171]
[126.00050354 108.41219330]
[135.26521301 120.20902252]
[144.52993774 132.00584412]
[153.79464722 143.80265808]
[163.05937195 155.59948730]
[174.02375793 165.83580017]
[172.68992615 180.77638245]
[160.08566284 188.90858459]
[145.92333984 183.96603394]
[141.11589050 169.75746155]
[134.18598938 156.45420837]
[127.25608826 143.15095520]
[120.32618713 129.84771729]
[113.39628601 116.54446411]
[107.09417725 120.61059570]
[106.79782104 135.60766602]
[106.50146484 150.60473633]
[106.20510864 165.60180664]
[105.90874481 180.59887695]
[105.61238861 195.59594727]
[105.31603241 210.59303284]
[105.01967621 225.59010315]
[104.72332001 240.58717346]
[104.42696381 255.58424377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[35 44]
[36 43]
[37 42]
[45 124]
[46 123]
[47 68]
[48 67]
[49 66]
[50 65]
[69 121]
[70 120]
[86 119]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[107 113]
[108 112]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
