%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAxxxxxxxxxxUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.72386169 272.04299927]
[111.72386169 257.04299927]
[111.72386169 242.04299927]
[111.72386169 227.04299927]
[111.72386169 212.04299927]
[111.72386169 197.04299927]
[111.72386169 182.04299927]
[111.72386169 167.04299927]
[111.72386169 152.04299927]
[111.72386169 137.04299927]
[97.60876465 137.76397705]
[84.54859924 133.42680359]
[74.24247742 124.87902832]
[67.92730713 113.49575043]
[66.23169708 100.96405792]
[69.12140656 89.03493500]
[56.51027679 80.91339111]
[43.89914703 72.79185486]
[31.28801918 64.67031097]
[18.67689133 56.54876709]
[5.02064943 50.34336090]
[-9.39156628 46.18547440]
[-23.80378342 42.02758408]
[-43.07336044 47.80094147]
[-55.95955658 33.43516159]
[-70.53225708 29.88039970]
[-85.10496521 26.32563782]
[-99.67766571 22.77087593]
[-114.42169189 32.12775040]
[-131.05181885 28.03837967]
[-139.43821716 13.49444103]
[-154.08172607 10.24361515]
[-168.72521973 6.99278975]
[-183.36872864 3.74196386]
[-196.59834290 11.96480083]
[-211.40261841 8.45939922]
[-219.16030884 -4.20369148]
[-233.80381775 -7.45451736]
[-248.44731140 -10.70534325]
[-263.09082031 -13.95616913]
[-277.34164429 -6.58773899]
[-291.92834473 -13.26661301]
[-295.66128540 -28.86932945]
[-285.67684937 -41.42682266]
[-269.63424683 -41.30605316]
[-259.83999634 -28.59967041]
[-245.19648743 -25.34884453]
[-230.55299377 -22.09801865]
[-215.90948486 -18.84719276]
[-203.52224731 -27.03815079]
[-188.62533569 -23.94995499]
[-180.11790466 -10.90153790]
[-165.47439575 -7.65071201]
[-150.83090210 -4.39988613]
[-136.18739319 -1.14906025]
[-126.35892487 -9.53940582]
[-113.29578400 -10.73472023]
[-101.77010345 -4.07239342]
[-96.12290192 8.19817257]
[-81.55020142 11.75293446]
[-66.97750092 15.30769730]
[-52.40479660 18.86245918]
[-44.11566162 12.75327396]
[-33.61067200 12.23919010]
[-24.38581657 17.73515892]
[-19.64589500 27.61536980]
[-5.23367929 31.77325630]
[9.17853642 35.93114471]
[-0.50430161 24.47502708]
[-5.16770506 10.21835518]
[-4.12692451 -4.74549341]
[2.46521831 -18.21930695]
[13.64076710 -28.22466087]
[27.75876236 -33.29242325]
[42.74619293 -32.67846680]
[56.40238190 -26.47294235]
[66.72212219 -15.58703995]
[72.19012451 -1.61918533]
[72.00349426 13.37965393]
[66.18962860 27.20712662]
[55.60221481 37.83287811]
[41.79584503 43.69668198]
[26.79843330 43.93764114]
[39.40956116 52.05918121]
[52.02069092 60.18072510]
[64.63182068 68.30226898]
[77.24294281 76.42380524]
[88.21475220 68.34031677]
[101.91317749 65.25618744]
[116.10238647 68.01361084]
[128.32952881 76.47267914]
[136.34822083 89.48132324]
[138.52778625 105.02424622]
[153.29383850 102.38538361]
[168.05989075 99.74652100]
[182.82595825 97.10765076]
[183.65986633 82.06101227]
[187.94186401 67.61244965]
[195.44104004 54.54113770]
[205.75297546 43.55201340]
[218.32153320 35.23769760]
[232.46893311 30.04657364]
[247.43222046 28.25859070]
[262.40444946 29.97017479]
[276.57815552 35.08901978]
[289.18899536 43.33907700]
[299.55688477 54.27542496]
[307.12268066 67.30828094]
[311.47836304 81.73480988]
[312.38906860 96.77699280]
[309.80566406 111.62363434]
[303.86746216 125.47406769]
[294.89471436 137.58135986]
[283.37130737 147.29257202]
[269.91867065 154.08401489]
[255.26231384 157.58940125]
[240.19261169 157.61970520]
[225.52226257 154.17329407]
[212.04243469 147.43603516]
[200.48005676 137.77124023]
[191.45867920 125.70014191]
[185.46481323 111.87371063]
[170.69876099 114.51257324]
[155.93270874 117.15143585]
[141.16664124 119.79029846]
[155.39021301 124.55370331]
[169.61378479 129.31710815]
[184.61277771 129.14260864]
[198.41224670 135.02262878]
[208.67573547 145.96159363]
[213.66548157 160.10734558]
[212.53663635 175.06481934]
[205.48033142 188.30145264]
[193.69131470 197.57609558]
[179.16564941 201.31840515]
[164.36274719 198.89476013]
[151.78897095 190.71549988]
[143.57325745 178.16551208]
[141.10662842 163.37048340]
[133.91523743 150.20674133]
[126.72386169 137.04299927]
[126.72386169 152.04299927]
[126.72386169 167.04299927]
[126.72386169 182.04299927]
[126.72386169 197.04299927]
[126.72386169 212.04299927]
[126.72386169 227.04299927]
[126.72386169 242.04299927]
[126.72386169 257.04299927]
[126.72386169 272.04299927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 68]
[22 67]
[23 66]
[25 62]
[26 61]
[27 60]
[28 59]
[31 55]
[32 54]
[33 53]
[34 52]
[37 49]
[38 48]
[39 47]
[40 46]
[93 125]
[94 124]
[95 123]
[96 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
