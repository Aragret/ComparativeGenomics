%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAxxxxxxxxxxCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.87442017]
[92.50000000 232.87442017]
[92.50000000 217.87442017]
[92.50000000 202.87442017]
[92.50000000 187.87442017]
[92.50000000 172.87442017]
[92.50000000 157.87442017]
[92.50000000 142.87442017]
[92.50000000 127.87442780]
[92.50000000 112.87442780]
[84.91009521 99.93637085]
[71.81694031 92.61726379]
[58.72378159 85.29815674]
[45.63062668 77.97905731]
[32.46204758 70.79654694]
[19.21945953 63.75141144]
[5.97687483 56.70627594]
[-8.55806160 53.00011444]
[-23.55724907 52.84407806]
[-37.43716049 60.43740463]
[-50.08325958 52.56812668]
[-65.08245087 52.41209030]
[-80.08163452 52.25605392]
[-86.84332275 62.12785721]
[-97.43644714 67.42829895]
[-109.15084839 66.93171692]
[-119.05211639 60.87922668]
[-124.71661377 50.88903427]
[-139.69633484 50.10919189]
[-154.67604065 49.32934570]
[-166.36051941 59.63035583]
[-181.54096985 58.62609100]
[-191.28939819 47.42325211]
[-206.26911926 46.64340591]
[-221.24882507 45.86355972]
[-236.22854614 45.08371353]
[-249.06166077 54.71131516]
[-264.55331421 50.54138947]
[-270.81964111 35.77274323]
[-263.05361938 21.73462486]
[-247.21272278 19.19587135]
[-235.44869995 30.10400200]
[-220.46897888 30.88384628]
[-205.48927307 31.66369057]
[-190.50955200 32.44353485]
[-179.65052795 22.31352234]
[-164.44786072 22.89100456]
[-153.89619446 34.34963226]
[-138.91648865 35.12947464]
[-123.93676758 35.90932083]
[-111.16331482 22.86185837]
[-92.59027100 23.23526382]
[-79.92559814 37.25686646]
[-64.92641449 37.41290283]
[-49.92722321 37.56893921]
[-37.12015152 29.96445084]
[-23.40121269 37.84488678]
[-8.40202522 38.00092697]
[-21.14845467 30.09342575]
[-31.57888985 19.31353760]
[-39.06220245 6.31353474]
[-43.14558411 -8.11996746]
[-43.58195496 -23.11361885]
[-40.34491348 -37.76017380]
[-33.63032913 -51.17338943]
[-23.84448814 -62.54164886]
[-11.57952023 -71.17707062]
[2.42243624 -76.55715179]
[17.31414413 -78.35633087]
[32.19452286 -76.46575928]
[46.16318512 -70.99981689]
[58.37490463 -62.28925705]
[68.09076691 -50.86112976]
[74.72287750 -37.40694427]
[77.86993408 -22.74079323]
[77.34152222 -7.75010300]
[73.16960144 6.65805769]
[65.60662079 19.61187172]
[55.11019516 30.32752037]
[42.31546021 38.15661621]
[27.99660110 42.62542725]
[13.02200985 43.46368790]
[26.26459503 50.50882339]
[39.50717926 57.55395889]
[46.93757248 57.92129135]
[52.94973373 64.88590240]
[66.04288483 72.20500183]
[79.13603973 79.52410889]
[92.22919464 86.84321594]
[115.40991974 80.35607147]
[129.53471375 75.30731201]
[143.65953064 70.25856018]
[157.78433228 65.20980072]
[171.90913391 60.16104507]
[178.15086365 48.82550049]
[190.06970215 44.93188858]
[201.07101440 50.05815125]
[215.29779053 45.30433655]
[229.52456665 40.55052185]
[243.59608459 35.35510635]
[257.49865723 29.72314835]
[271.40121460 24.09119225]
[283.81130981 12.54019928]
[298.34634399 21.26768875]
[293.98364258 37.65069962]
[277.03317261 37.99374771]
[263.13061523 43.62570572]
[249.22804260 49.25765991]
[247.51933289 52.41166687]
[244.16442871 54.87060547]
[239.51853943 55.85450745]
[234.27838135 54.77730179]
[220.05160522 59.53111649]
[205.82482910 64.28492737]
[194.95707703 78.02872467]
[176.95788574 74.28585052]
[162.83308411 79.33460236]
[148.70828247 84.38336182]
[134.58348083 89.43212128]
[120.45867157 94.48087311]
[135.27485657 96.82196808]
[150.09103394 99.16305542]
[164.51231384 95.03667450]
[179.50590515 95.47488403]
[193.66156006 100.43647003]
[205.64782715 109.45475006]
[214.33729553 121.68148804]
[218.91265869 135.96665955]
[218.94355774 150.96662903]
[214.42709351 165.27052307]
[205.78805542 177.53295898]
[193.83905029 186.60054016]
[179.70394897 191.62039185]
[164.71228027 192.12036133]
[150.27413940 188.05343628]
[137.74754333 179.80210876]
[128.31071472 168.14251709]
[122.85126495 154.17131042]
[121.88276672 139.20190430]
[114.69138336 126.03816223]
[107.50000000 112.87442780]
[107.50000000 127.87442780]
[107.50000000 142.87442017]
[107.50000000 157.87442017]
[107.50000000 172.87442017]
[107.50000000 187.87442017]
[107.50000000 202.87442017]
[107.50000000 217.87442017]
[107.50000000 232.87442017]
[107.50000000 247.87442017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 89]
[12 88]
[13 87]
[14 86]
[15 84]
[16 83]
[17 82]
[18 58]
[19 57]
[21 55]
[22 54]
[23 53]
[28 50]
[29 49]
[30 48]
[33 45]
[34 44]
[35 43]
[36 42]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[97 114]
[98 113]
[99 112]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
