%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAxxxxxxxxxxCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.90257263 567.80682373]
[132.90257263 552.80682373]
[132.90257263 537.80682373]
[132.90257263 522.80682373]
[132.90257263 507.80685425]
[132.90257263 492.80685425]
[132.90257263 477.80685425]
[132.90257263 462.80685425]
[132.90257263 447.80685425]
[132.90257263 432.80685425]
[117.36814880 428.49301147]
[103.65092468 419.99514771]
[92.85218811 407.98632812]
[85.84146118 393.42187500]
[83.18651581 377.46334839]
[85.10737610 361.38592529]
[91.45814514 346.47650146]
[101.73799896 333.93063354]
[115.13072968 324.75674438]
[130.56951904 319.69506836]
[129.95368958 304.70770264]
[129.33786011 289.72033691]
[121.08456421 277.32147217]
[128.24877930 263.21527100]
[127.63294983 248.22792053]
[114.48899078 239.72952271]
[109.66868591 223.91259766]
[116.52851105 207.90180969]
[132.88096619 199.68223572]
[127.17630005 185.80935669]
[121.47163391 171.93647766]
[115.76696777 158.06359863]
[110.06230927 144.19071960]
[104.35764313 130.31784058]
[81.54165649 124.44279480]
[69.64699554 104.10557556]
[54.74254990 102.41517639]
[39.83810425 100.72478485]
[24.93365479 99.03438568]
[8.51403999 103.25724792]
[-0.08919251 88.64832306]
[11.56719971 76.33715057]
[26.62405396 84.12993622]
[41.52849960 85.82033539]
[56.43294907 87.51073456]
[71.33739471 89.20112610]
[70.12089539 84.14896393]
[69.76949310 78.63669586]
[58.58119965 68.64559937]
[47.39290237 58.65450287]
[36.20460510 48.66340637]
[25.01630974 38.67230988]
[9.56693077 41.09112930]
[-3.79599190 32.96916580]
[-8.76289368 18.14135742]
[-2.98855662 3.60894394]
[10.80055428 -3.76631355]
[26.09364319 -0.50204408]
[35.66978073 11.86046410]
[35.00740814 27.48401260]
[46.19570160 37.47510910]
[57.38399887 47.46620560]
[68.57229614 57.45730209]
[79.76058960 67.44840240]
[93.80256653 62.17366028]
[95.64589691 47.28735352]
[97.48921967 32.40104294]
[83.40330505 27.02978516]
[71.01252747 18.44304657]
[61.03726959 7.14005136]
[54.05748367 -6.22206020]
[50.47896194 -20.86643219]
[50.50975800 -35.94165802]
[54.14807892 -50.57128906]
[61.18239975 -63.90477371]
[71.20375061 -75.16692352]
[83.62950897 -83.70296478]
[97.73725128 -89.01663208]
[112.70677185 -90.79898834]
[127.66777039 -88.94641113]
[141.75042725 -83.56661987]
[154.13598633 -74.97236633]
[164.10440063 -63.66332626]
[171.07608032 -50.29698563]
[174.64572144 -35.65044785]
[174.60578918 -20.57524109]
[170.95860291 -5.94782066]
[163.91619873 7.38139582]
[153.88801575 18.63746452]
[141.45709229 27.16597366]
[127.34613037 32.47108459]
[112.37552643 34.24436951]
[110.53220367 49.13067627]
[108.68888092 64.01698303]
[120.73709106 70.63060760]
[129.21788025 80.93473816]
[133.14715576 93.27082062]
[132.24357605 105.78645325]
[126.92962646 116.71249390]
[118.23052216 124.61317444]
[123.93518829 138.48605347]
[129.63984680 152.35893250]
[135.34451294 166.23181152]
[141.04917908 180.10470581]
[146.75384521 193.97758484]
[159.34228516 202.13424683]
[174.33515930 201.67231750]
[189.32804871 201.21038818]
[204.32093811 200.74847412]
[212.16961670 187.46684265]
[225.96319580 180.55737305]
[241.30018616 182.22483826]
[253.28660583 191.93716431]
[258.09762573 206.59518433]
[254.19808960 221.52157593]
[242.83230591 231.95338440]
[227.62705994 234.56184387]
[213.43429565 228.51461792]
[204.78286743 215.74134827]
[189.78997803 216.20327759]
[174.79708862 216.66520691]
[159.80419922 217.12713623]
[160.35887146 227.52427673]
[157.03620911 236.86566162]
[150.70378113 243.83683777]
[142.62030029 247.61209106]
[143.23612976 262.59945679]
[151.53347778 276.07031250]
[144.32521057 289.10452271]
[144.94104004 304.09188843]
[145.55686951 319.07922363]
[159.18240356 322.04580688]
[171.68295288 328.20330811]
[182.32420349 337.18469238]
[190.48234558 348.45721436]
[195.68064880 361.35397339]
[197.61730957 375.11337280]
[196.18298340 388.92419434]
[191.46691895 401.97329712]
[183.75146484 413.49353027]
[173.49514771 422.80892944]
[161.30538940 429.37420654]
[147.90257263 432.80685425]
[147.90257263 447.80685425]
[147.90257263 462.80685425]
[147.90257263 477.80685425]
[147.90257263 492.80685425]
[147.90257263 507.80685425]
[147.90257263 522.80682373]
[147.90257263 537.80682373]
[147.90257263 552.80682373]
[147.90257263 567.80682373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 131]
[21 130]
[22 129]
[24 127]
[25 126]
[29 105]
[30 104]
[31 103]
[32 102]
[33 101]
[34 100]
[36 46]
[37 45]
[38 44]
[39 43]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[65 94]
[66 93]
[67 92]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
