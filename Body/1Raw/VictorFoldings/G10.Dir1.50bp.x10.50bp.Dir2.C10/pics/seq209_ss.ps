%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCAxxxxxxxxxxACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.01005554]
[92.50000000 234.01005554]
[92.50000000 219.01005554]
[92.50000000 204.01005554]
[92.50000000 189.01005554]
[92.50000000 174.01005554]
[92.50000000 159.01005554]
[92.50000000 144.01005554]
[92.50000000 129.01005554]
[92.50000000 114.01004791]
[87.45124054 99.88524628]
[77.94288635 88.28390503]
[65.16786194 86.22171021]
[57.48973846 76.30882263]
[58.61404037 64.22398376]
[49.34909058 52.42734528]
[40.08414459 40.63070297]
[25.47533989 34.55670547]
[23.69911385 19.76839066]
[14.43416500 7.97175074]
[2.38133073 11.12383270]
[-11.02885437 6.39115429]
[-26.02155113 6.85919666]
[-41.01424789 7.32723856]
[-56.00694275 7.79528093]
[-70.99964142 8.26332283]
[-85.99233246 8.73136520]
[-100.98503113 9.19940758]
[-105.43208313 23.67360497]
[-114.33997345 35.91812897]
[-126.74242401 44.60478210]
[-141.29411316 48.79130173]
[-156.41659546 48.02356339]
[-170.46948242 42.38484955]
[-181.92842102 32.48680496]
[-189.55044556 19.40309525]
[-192.50877380 4.55294228]
[-190.48248291 -10.45282078]
[-183.69140625 -23.98647881]
[-172.87216187 -34.58000565]
[-159.19836426 -41.08428955]
[-144.15321350 -42.79380035]
[-129.36872864 -39.52309799]
[-116.44859314 -31.62696457]
[-106.79430389 -19.96191597]
[-101.45307159 -5.79328871]
[-86.46038055 -6.26133108]
[-71.46768188 -6.72937298]
[-56.47498322 -7.19741535]
[-41.48228836 -7.66545725]
[-26.48959351 -8.13349915]
[-11.49689674 -8.60154152]
[-24.87861633 -15.37867737]
[-39.87742996 -15.56725883]
[-53.13713074 -22.58012962]
[-61.73495483 -34.87148285]
[-63.77573776 -49.73200989]
[-58.80963898 -63.88608551]
[-47.93130493 -74.21380615]
[-33.53858948 -78.43869781]
[-18.80399323 -75.62949371]
[-6.97537851 -66.40540314]
[-0.66005927 -52.79964066]
[-1.25091791 -37.80831146]
[4.82134151 -24.09234810]
[6.06821585 -39.04043579]
[7.31509066 -53.98852158]
[8.56196499 -68.93660736]
[9.80883980 -83.88469696]
[-3.96548605 -90.21270752]
[-14.74262714 -100.87240601]
[-21.22119141 -114.57656097]
[-22.61886215 -129.67034912]
[-18.76686287 -144.33110046]
[-10.13034058 -156.78848267]
[2.24780250 -165.53819275]
[16.87284470 -169.52366638]
[31.97874069 -168.26362610]
[45.74138260 -161.91023254]
[56.49885941 -151.23069763]
[62.95215988 -137.51463318]
[64.32201385 -122.41828918]
[60.44300079 -107.76465607]
[51.78353500 -95.32321167]
[39.38928986 -86.59632874]
[24.75692558 -82.63782501]
[23.51005173 -67.68973541]
[22.26317787 -52.74164963]
[21.01630211 -37.79356003]
[19.76942825 -22.84547424]
[26.47766304 -36.26186752]
[39.56530762 -43.59082031]
[54.50963593 -42.29964828]
[66.14629364 -32.83454514]
[70.45397949 -18.46639061]
[65.94406891 -4.16042185]
[54.17506790 5.13961172]
[39.21401978 6.21987534]
[26.23080444 -1.29319835]
[35.49575424 10.50344181]
[49.44186783 15.73366451]
[51.88078308 31.36575508]
[61.14573288 43.16239548]
[70.41068268 54.95903397]
[87.01048279 60.56675720]
[89.54422760 78.77555084]
[99.05258179 90.37689209]
[111.67333984 78.17030334]
[135.14192200 81.23098755]
[149.63751221 85.08814240]
[164.13311768 88.94530487]
[178.62870789 92.80245972]
[193.12429810 96.65962219]
[208.45002747 92.73113251]
[218.75971985 103.48099518]
[230.71641541 93.59075165]
[246.20500183 92.65094757]
[259.26980591 101.02296448]
[264.88711548 115.48758698]
[260.89700317 130.48287964]
[248.83372498 140.24282837]
[233.33584595 141.01455688]
[220.36264038 132.50129700]
[214.90255737 117.97659302]
[200.61366272 122.18096924]
[189.26715088 111.15522003]
[174.77154541 107.29805756]
[160.27595520 103.44090271]
[145.78034973 99.58374023]
[131.28475952 95.72658539]
[125.33856964 100.29744720]
[136.21043396 110.63198090]
[147.08229065 120.96652222]
[159.25639343 129.72958374]
[159.49238586 144.72773743]
[147.60002136 153.86947632]
[133.16688538 149.78477478]
[127.82895660 135.76666260]
[120.63757324 122.60292053]
[113.44618988 109.43918610]
[107.50000000 114.01004791]
[107.50000000 129.01005554]
[107.50000000 144.01005554]
[107.50000000 159.01005554]
[107.50000000 174.01005554]
[107.50000000 189.01005554]
[107.50000000 204.01005554]
[107.50000000 219.01005554]
[107.50000000 234.01005554]
[107.50000000 249.01005554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 107]
[12 106]
[15 104]
[16 103]
[17 102]
[19 100]
[20 99]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[115 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
