%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCxxxxxxxxxxUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.45887756 276.75463867]
[112.45887756 261.75463867]
[112.45887756 246.75463867]
[112.45887756 231.75463867]
[112.45887756 216.75463867]
[112.45887756 201.75463867]
[112.45887756 186.75463867]
[112.45887756 171.75463867]
[112.45887756 156.75463867]
[112.45887756 141.75463867]
[97.10750580 139.67955017]
[84.81437683 132.63589478]
[76.93548584 122.47924042]
[73.93507385 111.32267761]
[59.91835785 116.66419220]
[45.90164566 122.00570679]
[31.88493156 127.34721375]
[17.86821938 132.68873596]
[10.90898228 138.70710754]
[3.50394320 137.99223328]
[-10.62086010 143.04098511]
[-17.78535461 158.96604919]
[-33.92235565 164.70027161]
[-48.92692947 157.16894531]
[-62.94364166 162.51045227]
[-76.96035767 167.85197449]
[-84.80693817 181.84519958]
[-100.66217804 184.29283142]
[-112.36328888 173.31724548]
[-110.93418121 157.33798218]
[-97.47114563 148.61294556]
[-82.30186462 153.83525085]
[-68.28515625 148.49374390]
[-54.26844025 143.15223694]
[-50.67700577 130.73860168]
[-40.42605209 122.55371094]
[-27.13607407 121.77629852]
[-15.66961575 128.91618347]
[-1.54481304 123.86743164]
[12.52670670 118.67201233]
[26.54341888 113.33050537]
[40.56013107 107.98899078]
[54.57684708 102.64747620]
[68.59355927 97.30596924]
[70.92465973 82.48820496]
[59.22504044 73.10104370]
[47.52541351 63.71388245]
[32.02392960 65.24413300]
[20.29257011 55.55754852]
[18.92924118 40.76982117]
[7.22961855 31.38265991]
[-8.81039047 31.69518089]
[-18.94421768 19.25793266]
[-15.39805698 3.61171007]
[-0.89222097 -3.24104619]
[13.44565582 3.95651269]
[16.61678123 19.68303490]
[28.31640434 29.07019806]
[43.04814148 27.19630051]
[55.04694748 36.54955292]
[56.91257858 52.01425934]
[68.61219788 61.40142059]
[80.31182098 70.78858185]
[93.96806335 64.58317566]
[94.59204102 49.59616089]
[95.21601868 34.60914612]
[80.90753174 29.76726341]
[68.54354095 21.08921814]
[59.12635040 9.27849483]
[53.41936493 -4.70746183]
[51.88522339 -19.73487282]
[54.64828873 -34.58553314]
[61.48458099 -48.05556870]
[71.83990479 -59.05302048]
[84.87480164 -66.68637848]
[99.53259277 -70.33683777]
[114.62503815 -69.70846558]
[128.92864990 -64.85221863]
[141.28392029 -56.16175079]
[150.68923950 -44.34157562]
[156.38217163 -30.34989166]
[157.90121460 -15.32094669]
[155.12322998 -0.47306913]
[148.27340698 12.99009037]
[137.90704346 23.97713470]
[124.86448669 31.59739113]
[110.20303345 35.23312378]
[109.57905579 50.22013855]
[108.95507812 65.20715332]
[115.57637787 68.72972107]
[122.62172699 55.48725128]
[135.86407471 62.53282928]
[128.81895447 75.77485657]
[135.44024658 79.29742432]
[147.52024841 70.40507507]
[159.60023499 61.51272583]
[168.77159119 47.25360489]
[185.01234436 52.11922455]
[184.83276367 69.07221985]
[168.49258423 73.59271240]
[156.41259766 82.48506165]
[144.33259583 91.37741089]
[148.93817139 105.65287018]
[163.93736267 105.80890656]
[178.93653870 105.96494293]
[193.93572998 106.12097931]
[208.93492126 106.27701569]
[223.93492126 106.27701569]
[238.93411255 106.12097931]
[253.93330383 105.96494293]
[268.93249512 105.80890656]
[284.70785522 99.59812927]
[295.04296875 113.03768921]
[284.98968506 126.68934631]
[269.08853149 120.80809784]
[254.08934021 120.96413422]
[239.09014893 121.12017059]
[224.09095764 121.27620697]
[217.39189148 124.51165009]
[208.77888489 121.27620697]
[193.77969360 121.12017059]
[178.78050232 120.96413422]
[163.78131104 120.80809784]
[148.78213501 120.65206146]
[143.45132446 125.92770386]
[156.53953552 133.25563049]
[169.62774658 140.58355713]
[182.71597290 147.91149902]
[197.24876404 151.62605286]
[207.93324280 162.15420532]
[211.86155701 176.63067627]
[207.96463013 191.11563110]
[197.30299377 201.66693115]
[182.77828979 205.41297913]
[168.34346008 201.33427429]
[157.92701721 190.54086304]
[154.36384583 175.97021484]
[147.17245483 162.80647278]
[139.98107910 149.64273071]
[132.78968811 136.47900391]
[127.45887756 141.75463867]
[127.45887756 156.75463867]
[127.45887756 171.75463867]
[127.45887756 186.75463867]
[127.45887756 201.75463867]
[127.45887756 216.75463867]
[127.45887756 231.75463867]
[127.45887756 246.75463867]
[127.45887756 261.75463867]
[127.45887756 276.75463867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[20 39]
[21 38]
[24 34]
[25 33]
[26 32]
[45 63]
[46 62]
[47 61]
[50 58]
[51 57]
[64 89]
[65 88]
[66 87]
[94 102]
[95 101]
[96 100]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
