%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGxxxxxxxxxxCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.99774170 257.96417236]
[100.99774170 242.96417236]
[100.99774170 227.96417236]
[100.99774170 212.96417236]
[100.99774170 197.96417236]
[100.99774170 182.96417236]
[100.99774170 167.96417236]
[100.99774170 152.96417236]
[100.99774170 137.96417236]
[100.99774170 122.96417236]
[98.21353912 137.70352173]
[86.26436615 146.77088928]
[71.31960297 145.48478699]
[61.09526443 134.50921631]
[60.87020111 119.51091003]
[70.76061249 108.23351288]
[85.66204834 106.50007629]
[70.69977570 105.43688202]
[55.73749924 104.37368774]
[43.86017227 114.45172882]
[28.70144653 113.16035461]
[19.16677094 101.77503204]
[4.20449829 100.71183014]
[-10.75777435 99.64863586]
[-25.72004700 98.58544159]
[-40.68231964 97.52224731]
[-55.64459229 96.45905304]
[-70.60686493 95.39585876]
[-85.56913757 94.33265686]
[-100.54988861 93.57292175]
[-115.54295349 93.11695862]
[-129.57194519 100.43118286]
[-142.05813599 92.31057739]
[-157.05120850 91.85461426]
[-172.04428101 91.39864349]
[-187.03733826 90.94267273]
[-202.03041077 90.48670959]
[-216.21113586 98.72315216]
[-230.29785156 90.32694244]
[-229.79936218 73.93537140]
[-215.22845459 66.41069031]
[-201.57444763 75.49363708]
[-186.58137512 75.94960785]
[-171.58830261 76.40557861]
[-156.59524536 76.86154175]
[-141.60217285 77.31751251]
[-128.64558411 69.97066498]
[-115.08699036 78.12388611]
[-100.09391785 78.57985687]
[-96.02642059 75.97618866]
[-90.26931000 75.94065857]
[-84.50594330 79.37038422]
[-69.54367065 80.43358612]
[-54.58139801 81.49678040]
[-39.61912537 82.55997467]
[-24.65685272 83.62316895]
[-9.69457912 84.68636322]
[5.26769400 85.74955750]
[20.22996712 86.81275940]
[31.27875519 76.89006042]
[46.46777344 77.75514984]
[56.80069351 89.41141510]
[71.76296997 90.47460938]
[86.72524261 91.53780365]
[100.73800659 86.18594360]
[111.18215179 75.41934204]
[121.62630463 64.65274048]
[132.07044983 53.88613510]
[136.12556458 38.59343338]
[150.54089355 34.84543610]
[160.98504639 24.07883263]
[146.44070435 27.74794197]
[131.48588562 26.58462334]
[117.68390656 20.71048737]
[106.47760010 10.73960018]
[99.03842926 -2.28571153]
[96.14406586 -17.00381851]
[98.09708405 -31.87613297]
[104.69331360 -45.34794617]
[115.24320984 -56.01095200]
[128.64390564 -62.75047302]
[143.49455261 -64.86197662]
[158.24269104 -62.12473679]
[171.34658813 -54.82489395]
[181.43641663 -43.72554779]
[187.45739746 -29.98700142]
[188.78013611 -15.04543495]
[185.26634216 -0.46280086]
[177.28099060 12.23913479]
[190.74806213 5.63322258]
[204.21511841 -0.97268957]
[217.68218994 -7.57860184]
[231.14926147 -14.18451405]
[244.61633301 -20.79042625]
[258.08340454 -27.39633942]
[245.11766052 -34.93886185]
[242.72529602 -49.74685287]
[252.65626526 -60.98855209]
[267.64627075 -60.44087219]
[276.73040771 -48.50443268]
[273.26409912 -33.91088867]
[287.33038330 -39.12046814]
[301.39666748 -44.33004761]
[305.45989990 -59.30568695]
[317.57064819 -69.00667572]
[333.07208252 -69.70278931]
[346.00363159 -61.12635040]
[351.39279175 -46.57518005]
[347.16732788 -31.64450073]
[334.95205688 -22.07545853]
[319.44396973 -21.54755020]
[306.60623169 -30.26376534]
[292.53994751 -25.05418777]
[278.47366333 -19.84460831]
[264.68930054 -13.92927074]
[251.22224426 -7.32335806]
[237.75517273 -0.71744603]
[224.28810120 5.88846636]
[210.82102966 12.49437809]
[197.35397339 19.10029030]
[183.88690186 25.70620346]
[171.75164795 34.52298355]
[161.30749512 45.28958511]
[157.99942017 59.81218719]
[142.83705139 64.33028412]
[132.39291382 75.09688568]
[121.94876099 85.86349487]
[111.50460815 96.63009644]
[125.83200073 92.18870544]
[140.15937805 87.74731445]
[153.92634583 81.79158783]
[168.90592957 81.00910950]
[183.21847534 85.49807739]
[195.06806946 94.69520569]
[202.96781921 107.44644928]
[205.92645264 122.15177155]
[203.57272339 136.96594238]
[196.20199585 150.03010559]
[184.73912048 159.70495605]
[170.62248230 164.77648926]
[155.62342834 164.60833740]
[141.62403870 159.22160339]
[130.38050842 149.29165649]
[123.18912506 136.12791443]
[115.99774170 122.96417236]
[115.99774170 137.96417236]
[115.99774170 152.96417236]
[115.99774170 167.96417236]
[115.99774170 182.96417236]
[115.99774170 197.96417236]
[115.99774170 212.96417236]
[115.99774170 227.96417236]
[115.99774170 242.96417236]
[115.99774170 257.96417236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[17 64]
[18 63]
[19 62]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 49]
[31 48]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[65 128]
[66 127]
[67 126]
[68 125]
[70 123]
[71 122]
[89 121]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
