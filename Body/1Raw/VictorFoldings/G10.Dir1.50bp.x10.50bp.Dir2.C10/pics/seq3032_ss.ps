%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAUUAAAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGxxxxxxxxxxACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.61067963 267.64300537]
[82.29862213 252.64625549]
[81.98656464 237.64950562]
[81.67450714 222.65274048]
[81.36245728 207.65599060]
[81.05039978 192.65924072]
[80.73834229 177.66249084]
[80.42628479 162.66572571]
[80.11422729 147.66897583]
[67.25582886 139.94490051]
[53.86954117 146.71301270]
[40.48325729 153.48112488]
[34.18658447 160.18960571]
[26.74734306 160.24752808]
[13.22315216 166.73568726]
[-0.30103734 173.22386169]
[-13.82522774 179.71202087]
[-16.21625519 183.51260376]
[-19.39123917 186.06025696]
[-22.84623909 187.26228333]
[-26.10055542 187.20394897]
[-28.75426102 186.12451172]
[-42.77097321 191.46601868]
[-56.78768539 196.80752563]
[-70.80439758 202.14904785]
[-84.82111359 207.49055481]
[-92.66770172 221.48379517]
[-108.52294159 223.93142700]
[-120.22405243 212.95584106]
[-118.79494476 196.97656250]
[-105.33190155 188.25152588]
[-90.16262817 193.47384644]
[-76.14591217 188.13233948]
[-62.12919998 182.79081726]
[-48.11248779 177.44931030]
[-34.09577560 172.10778809]
[-20.31339264 166.18783569]
[-6.78920221 159.69966125]
[6.73498774 153.21150208]
[20.25917816 146.72334290]
[33.71514130 140.09483337]
[47.10142899 133.32672119]
[60.48771286 126.55860901]
[54.21335983 110.46075439]
[54.14580917 93.41782379]
[60.12585068 77.70881653]
[71.19676971 65.37404633]
[85.75314331 57.95035553]
[101.77214813 56.28052521]
[117.09419250 60.42053604]
[125.34648132 47.89457321]
[133.59877014 35.36861038]
[124.06063080 12.84554863]
[131.69279480 -10.19050407]
[152.46105957 -22.36865616]
[153.08503723 -37.35567093]
[153.70901489 -52.34268951]
[154.33299255 -67.32970428]
[154.95697021 -82.31671906]
[155.58094788 -97.30373383]
[155.89300537 -112.30049133]
[155.89300537 -127.30049133]
[155.89300537 -142.30049133]
[141.25378418 -145.90003967]
[127.90171814 -152.89901733]
[116.61306000 -162.89050293]
[108.04412842 -175.29359436]
[102.69311523 -189.38722229]
[100.87110901 -204.35195923]
[102.68403625 -219.31781006]
[108.02651215 -233.41467285]
[116.58792114 -245.82296753]
[127.87051392 -255.82128906]
[141.21833801 -262.82836914]
[155.85537720 -266.43679810]
[170.93063354 -266.43679810]
[185.56765747 -262.82836914]
[198.91549683 -255.82128906]
[210.19808960 -245.82296753]
[218.75949097 -233.41467285]
[224.10195923 -219.31781006]
[225.91490173 -204.35195923]
[224.09289551 -189.38722229]
[218.74186707 -175.29359436]
[210.17294312 -162.89050293]
[198.88429260 -152.89901733]
[185.53222656 -145.90003967]
[170.89300537 -142.30049133]
[170.89300537 -127.30049133]
[170.89300537 -112.30049133]
[173.62338257 -108.31043243]
[173.83187866 -102.54954529]
[170.56796265 -96.67975616]
[169.94398499 -81.69274139]
[169.32000732 -66.70572662]
[168.69602966 -51.71871185]
[168.07205200 -36.73169327]
[167.44807434 -21.74467850]
[173.04658508 -19.69017982]
[178.20022583 -16.68945885]
[182.75056458 -12.83475494]
[186.55772400 -8.24456501]
[189.50466919 -3.05999255]
[191.50082397 2.55958915]
[206.49351501 2.09154701]
[221.48620605 1.62350488]
[236.47891235 1.15546274]
[251.47160339 0.68742061]
[266.46429443 0.21937847]
[277.10144043 -11.46936035]
[292.89193726 -12.12948227]
[304.46755981 -1.36934829]
[304.96069336 14.42724514]
[294.07879639 25.88845825]
[278.27786255 26.21455765]
[266.93234253 15.21207428]
[251.93965149 15.68011665]
[236.94694519 16.14815903]
[221.95425415 16.61620140]
[206.96156311 17.08424377]
[191.96885681 17.55228615]
[188.83387756 26.92093277]
[183.12063599 35.02894974]
[175.29078674 41.18190765]
[165.98834229 44.84491730]
[155.98678589 45.68908310]
[146.12472534 43.62090302]
[137.87243652 56.14686203]
[129.62014771 68.67282867]
[135.74049377 75.22491455]
[140.41893005 82.96412659]
[143.42726135 91.57456207]
[144.60620117 100.69697571]
[143.87353516 109.94371796]
[141.22894287 118.91520691]
[136.75540161 127.21723938]
[130.61692810 134.47824097]
[123.05271912 140.36589050]
[114.36794281 144.60227966]
[104.92145538 146.97691345]
[95.11098480 147.35691833]
[95.42304230 162.35366821]
[95.73509216 177.35043335]
[96.04714966 192.34718323]
[96.35920715 207.34393311]
[96.67126465 222.34068298]
[96.98332214 237.33744812]
[97.29537964 252.33419800]
[97.60742950 267.33096313]
[100.19843292 286.53866577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 43]
[11 42]
[12 41]
[14 40]
[15 39]
[16 38]
[17 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[50 129]
[51 128]
[52 127]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[61 90]
[62 89]
[63 88]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
