%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUxxxxxxxxxxUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.07996368 294.66192627]
[69.76790619 279.66519165]
[69.45585632 264.66842651]
[69.14379883 249.67167664]
[68.83174133 234.67491150]
[68.51968384 219.67816162]
[68.20762634 204.68141174]
[67.89556885 189.68466187]
[67.58351898 174.68789673]
[54.97238922 166.56636047]
[41.19000626 172.48632812]
[27.40762520 178.40628052]
[13.62524414 184.32624817]
[-0.15713759 190.24621582]
[12.39419079 198.45986938]
[14.01026726 213.37255859]
[3.50986981 224.08430481]
[-11.43206024 222.76570129]
[-19.89418030 210.38053894]
[-15.69180393 195.98184204]
[-30.01440239 200.43865967]
[-44.33699799 204.89547729]
[-51.65808105 210.46804810]
[-59.00411224 209.29267883]
[-73.41632843 213.45056152]
[-87.82854462 217.60845947]
[-92.14625549 232.41929626]
[-103.80087280 242.52737427]
[-119.07345581 244.70726013]
[-133.09056091 238.26335144]
[-141.37940979 225.25186157]
[-141.29502869 209.82473755]
[-132.86436462 196.90469360]
[-118.77761078 190.61447144]
[-103.52979279 192.96127319]
[-91.98642731 203.19624329]
[-77.57421112 199.03834534]
[-63.16199875 194.88046265]
[-48.79381561 190.57287598]
[-34.47121811 186.11605835]
[-20.14862061 181.65924072]
[-6.07710075 176.46383667]
[7.70528078 170.54386902]
[21.48766136 164.62390137]
[35.27004242 158.70394897]
[49.05242538 152.78398132]
[50.76511383 137.88208008]
[38.68512726 128.98973083]
[26.60513878 120.09738159]
[14.52514935 111.20502472]
[2.44516134 102.31267548]
[-13.89501858 97.79218292]
[-14.07460022 80.83918762]
[2.16615319 75.97357178]
[11.33751106 90.23268890]
[23.41749954 99.12503815]
[35.49748611 108.01738739]
[47.57747650 116.90973663]
[59.65746307 125.80208588]
[54.91645050 104.98132324]
[59.75299072 85.35781097]
[72.15336609 70.87168121]
[88.69692993 63.96366882]
[87.13935089 49.04475403]
[85.58177185 34.12584305]
[70.92843628 30.17056847]
[58.69572830 21.18583870]
[50.53802872 8.38676167]
[47.55859375 -6.49569130]
[50.16037369 -21.44879150]
[57.99148941 -34.45025253]
[69.99285126 -43.74173737]
[84.54138184 -48.06664658]
[99.66950226 -46.84007263]
[113.33125305 -40.22789764]
[123.67900848 -29.12436676]
[129.31330872 -15.03113842]
[129.47216797 0.14579102]
[124.13410187 14.35386848]
[114.02103424 25.67156792]
[100.50067902 32.56826019]
[102.05825806 47.48717499]
[103.61584473 62.40608597]
[112.98497772 64.53498840]
[121.51374817 68.95913696]
[128.65017700 75.39220428]
[141.74333191 68.07309723]
[154.83648682 60.75399017]
[156.59257507 43.96207809]
[167.88163757 31.63168335]
[184.12840271 28.46806335]
[198.91992188 35.51905060]
[211.85797119 27.92914391]
[224.79603577 20.33923531]
[237.73408508 12.74932671]
[250.67214966 5.15941811]
[252.05297852 -10.29609585]
[262.27996826 -21.96607208]
[277.42062378 -25.36316872]
[291.65304565 -19.18112946]
[299.50460815 -5.79707718]
[297.95617676 9.64254761]
[287.60321045 21.20089531]
[272.42657471 24.43354416]
[258.26205444 18.09747505]
[245.32400513 25.68738174]
[232.38594055 33.27729034]
[219.44789124 40.86719894]
[206.50982666 48.45710754]
[206.43736267 61.84332275]
[199.69166565 73.53121948]
[187.94989014 80.40006256]
[174.23896790 80.55468750]
[162.15559387 73.84714508]
[149.06243896 81.16625214]
[135.96928406 88.48535919]
[140.16966248 103.20825195]
[138.19912720 119.36601257]
[129.63694763 134.33644104]
[115.18012238 145.41841125]
[128.42269897 152.46354675]
[141.66528320 159.50868225]
[157.36674500 156.21569824]
[169.63870239 166.54908752]
[169.06713867 182.58195496]
[156.09054565 192.01525879]
[140.66342163 187.61257935]
[134.62016296 172.75126648]
[121.37757111 165.70613098]
[108.13498688 158.66099548]
[101.74630737 162.58970642]
[109.99015045 175.12123108]
[118.23399353 187.65275574]
[131.07974243 195.39787292]
[131.14520264 210.39772034]
[118.36753082 218.25465393]
[105.01144409 211.42713928]
[103.89630890 196.46969604]
[96.43263245 183.45841980]
[88.96894836 170.44712830]
[82.58026886 174.37585449]
[82.89232635 189.37260437]
[83.20438385 204.36935425]
[83.51644135 219.36610413]
[83.82849121 234.36286926]
[84.14054871 249.35961914]
[84.45260620 264.35638428]
[84.76466370 279.35311890]
[85.07672119 294.34988403]
[87.66771698 313.55758667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[20 41]
[21 40]
[22 39]
[24 38]
[25 37]
[26 36]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[63 83]
[64 82]
[65 81]
[86 116]
[87 115]
[88 114]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
