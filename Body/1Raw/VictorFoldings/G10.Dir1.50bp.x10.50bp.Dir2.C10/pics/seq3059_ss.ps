%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAxxxxxxxxxxCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[177.35926819 124.85152435]
[174.19532776 112.78900909]
[171.87765503 100.53551483]
[156.96839905 102.18302155]
[142.05914307 103.83052826]
[127.14990234 105.47803497]
[112.24064636 107.12554169]
[99.61447906 115.22367096]
[91.89891052 128.08718872]
[84.18334961 140.95069885]
[76.46778870 153.81422424]
[76.73549652 170.21118164]
[62.53198624 178.40827942]
[48.46860504 169.97303772]
[49.01255417 153.58291626]
[63.60426712 146.09866333]
[71.31983185 133.23513794]
[79.03539276 120.37162781]
[86.75096130 107.50811005]
[76.30472565 96.74353027]
[63.21545029 104.06957245]
[50.12617874 111.39561462]
[41.86281586 124.88737488]
[26.97784805 124.35169983]
[19.05906296 138.71223450]
[2.65999675 138.76405334]
[-5.34939575 124.45386505]
[3.27026081 110.50274658]
[19.65180397 111.26242828]
[26.97893143 98.29467773]
[42.80013275 98.30634308]
[55.88940811 90.98030090]
[68.97867584 83.65425110]
[69.20375824 76.15763092]
[54.20454788 76.31150818]
[40.78193665 83.00729370]
[28.14570618 74.92486572]
[28.59590149 59.93162155]
[41.69430542 52.62191772]
[54.69095993 60.11091995]
[69.65392303 61.16438675]
[69.87899780 53.66776657]
[57.25282669 45.56963348]
[44.62665176 37.47150421]
[32.00048065 29.37337303]
[19.37430573 21.27524185]
[6.66774225 13.30383873]
[-6.11793804 5.45996284]
[-19.96905899 12.25334167]
[-35.29149628 10.45711613]
[-47.19591904 0.64445609]
[-51.88366699 -14.05345440]
[-47.85889435 -28.94656563]
[-36.40589523 -39.28253937]
[-21.17927933 -41.76320648]
[-7.03780413 -35.59699249]
[1.50603831 -22.75151253]
[1.72593772 -7.32571697]
[14.51161766 0.51815832]
[21.89894867 1.33987641]
[27.47243690 8.64906693]
[40.09860992 16.74719810]
[52.72478485 24.84532928]
[65.35095978 32.94346237]
[77.97713470 41.04159164]
[110.59313965 92.21629333]
[125.50239563 90.56878662]
[140.41163635 88.92127991]
[155.32089233 87.27377319]
[170.23014832 85.62626648]
[169.93508911 66.98176575]
[171.57832336 48.40815735]
[175.14193726 30.10639381]
[180.58720398 12.27447319]
[187.85510254 -4.89470720]
[196.86685181 -21.21543503]
[207.52481079 -36.51118851]
[219.71356201 -50.61655426]
[233.30110168 -63.37900543]
[248.14033508 -74.66055298]
[264.07061768 -84.33924866]
[280.91949463 -92.31048584]
[298.50463867 -98.48815155]
[316.63568115 -102.80552673]
[335.11645508 -105.21604919]
[353.74694824 -105.69377136]
[372.32562256 -104.23366547]
[390.65142822 -100.85166931]
[408.52612305 -95.58451080]
[425.75637817 -88.48932648]
[442.15576172 -79.64300537]
[457.54693604 -69.14139557]
[471.76342773 -57.09823608]
[484.65151978 -43.64393997]
[496.40570068 -52.96272278]
[508.15985107 -62.28150940]
[519.91400146 -71.60029602]
[520.16766357 -87.23581696]
[530.45129395 -99.01634979]
[545.90930176 -101.37948608]
[559.24285889 -93.20941162]
[564.15631104 -78.36380768]
[558.32958984 -63.85229492]
[544.51403809 -56.52677536]
[529.23278809 -59.84613419]
[517.47863770 -50.52735138]
[505.72448730 -41.20856476]
[493.97030640 -31.88978195]
[500.94299316 -21.56337547]
[507.18096924 -10.77700996]
[512.65405273 0.41713154]
[517.33569336 11.96488857]
[521.20324707 23.81038857]
[524.23797607 35.89631653]
[526.42510986 48.16418839]
[527.75408936 60.55464554]
[528.21838379 73.00772095]
[527.81579590 85.46315765]
[526.54821777 97.86067963]
[524.42181396 110.14028168]
[521.44671631 122.24253082]
[517.63732910 134.10887146]
[513.01214600 145.68183899]
[507.59347534 156.90544128]
[501.40747070 167.72534180]
[494.48410034 178.08915710]
[486.85681152 187.94673157]
[478.56253052 197.25033569]
[469.64132690 205.95492554]
[460.13638306 214.01834106]
[450.09368896 221.40156555]
[439.56179810 228.06883240]
[428.59167480 233.98785400]
[417.23638916 239.12995911]
[405.55087280 243.47023010]
[393.59167480 246.98765564]
[381.41668701 249.66514587]
[369.08480835 251.48976135]
[356.65570068 252.45260620]
[344.18951416 252.54901123]
[331.74658203 251.77848816]
[319.38711548 250.14471436]
[307.17092896 247.65557861]
[295.15716553 244.32310486]
[283.40393066 240.16337585]
[271.96817017 235.19650269]
[260.90521240 229.44650269]
[250.26858521 222.94116211]
[240.10980225 215.71195984]
[230.47804260 207.79382324]
[221.41993713 199.22508240]
[212.97933960 190.04716492]
[205.19709778 180.30447388]
[198.11093140 170.04412842]
[191.75512695 159.31578064]
[186.16049194 148.17132568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 19]
[9 18]
[10 17]
[11 16]
[20 33]
[21 32]
[22 31]
[24 29]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 59]
[48 58]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
