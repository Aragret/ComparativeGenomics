%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCxxxxxxxxxxGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCUGCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[202.61434937 62.58502960]
[187.75131226 64.60736847]
[172.88825989 66.62969971]
[158.02522278 68.65203857]
[143.16217041 70.67436981]
[128.29911804 72.69670105]
[107.42323303 143.22248840]
[97.67558289 154.62350464]
[87.92793274 166.02453613]
[78.18028259 177.42555237]
[68.43262482 188.82656860]
[74.17029572 203.01593018]
[72.64508820 218.24525452]
[64.20748901 231.01495361]
[50.79639435 238.39067078]
[35.49357224 238.67749023]
[21.81550407 231.80952454]
[12.90530872 219.36495972]
[10.81048203 204.20349121]
[16.01240158 189.80909729]
[27.31570435 179.48950195]
[42.12297440 175.61608887]
[57.03160858 179.07891846]
[66.77925873 167.67790222]
[76.52690887 156.27687073]
[86.27456665 144.87585449]
[96.02221680 133.47483826]
[93.42450714 126.43907166]
[79.40419769 131.77113342]
[65.28279877 136.82942200]
[60.08738327 122.75789642]
[74.10769653 117.42583466]
[88.22909546 112.36755371]
[85.63138580 105.33179474]
[70.81362915 103.00069427]
[55.99586868 100.66958618]
[46.40516663 112.66600800]
[32.09532928 118.24490356]
[16.91563225 115.90560150]
[4.94933701 106.27734375]
[-0.58468348 91.95008850]
[1.80219483 76.77779388]
[11.46791363 64.84174347]
[25.81244278 59.35265732]
[40.97717667 61.78707886]
[52.88287735 71.49016571]
[58.32697296 85.85182953]
[73.14472961 88.18293762]
[87.96248627 90.51403809]
[91.34654236 83.82089233]
[101.49871826 63.74146652]
[90.83708954 53.19017792]
[80.17546844 42.63888931]
[64.37467957 42.97171021]
[53.02447891 31.97405434]
[52.85873032 16.17063332]
[63.97577286 4.93733883]
[79.78005981 4.93868399]
[90.89519501 16.17387009]
[90.72675323 31.97726059]
[101.38838196 42.52855301]
[112.05001068 53.07984161]
[126.27678680 57.83365631]
[141.13983154 55.81132126]
[156.00288391 53.78898621]
[170.86592102 51.76665497]
[185.72897339 49.74431992]
[200.59202576 47.72198486]
[200.74143982 30.08326149]
[203.60333252 12.67975903]
[209.10885620 -4.07395601]
[217.12623596 -19.77889633]
[227.46382141 -34.06115723]
[239.87480164 -46.58081436]
[254.06300354 -57.04001999]
[269.68994141 -65.19008636]
[286.38302612 -70.83740234]
[303.74426270 -73.84802246]
[321.35989380 -74.15084839]
[338.81015015 -71.73931885]
[355.67938232 -66.67154694]
[371.56579590 -59.06888962]
[386.09118652 -49.11309052]
[398.90975952 -37.04190445]
[409.71658325 -23.14341736]
[418.25466919 -7.74919367]
[432.27139282 -13.09070587]
[446.28811646 -18.43221855]
[460.30480957 -23.77373123]
[474.32153320 -29.11524391]
[484.46182251 -41.25959778]
[499.11004639 -38.56168747]
[509.25030518 -50.70604324]
[523.89855957 -48.00813293]
[537.91528320 -53.34964752]
[551.93194580 -58.69115829]
[565.94866943 -64.03266907]
[566.34851074 -79.22834778]
[572.53759766 -93.11228180]
[583.57214355 -103.56728363]
[597.76947021 -108.99903107]
[612.96459961 -108.57922363]
[626.84039307 -102.37187958]
[637.28088379 -91.32357788]
[642.69396973 -77.11910248]
[642.25415039 -61.92453003]
[636.02856445 -48.05692673]
[624.96655273 -37.63099670]
[610.75494385 -32.23661804]
[595.56097412 -32.69639969]
[581.70153809 -38.94022751]
[571.29022217 -50.01595688]
[557.27349854 -44.67444611]
[543.25677490 -39.33293152]
[529.24005127 -33.99142075]
[520.10235596 -22.22912788]
[504.45153809 -24.54497528]
[495.31384277 -12.78268242]
[479.66305542 -15.09853077]
[465.64633179 -9.75701809]
[451.62960815 -4.41550541]
[437.61291504 0.92600691]
[423.59619141 6.26751947]
[426.66046143 18.62340546]
[428.32864380 31.24477959]
[428.57971191 43.97439194]
[427.41033936 56.65361786]
[424.83486938 69.12443542]
[420.88522339 81.23140717]
[415.61038208 92.82358551]
[409.07589722 103.75644684]
[401.36300659 113.89362335]
[392.56768799 123.10868835]
[382.79934692 131.28665161]
[372.17959595 138.32543945]
[360.84066772 144.13716125]
[348.92373657 148.64921570]
[336.57727051 151.80519104]
[323.95501709 153.56552124]
[311.21423340 153.90809631]
[298.51373291 152.82839966]
[286.01177979 150.33970642]
[273.86419678 146.47282410]
[262.22241211 141.27571106]
[251.23159790 134.81294250]
[241.02882385 127.16488647]
[231.74134827 118.42666626]
[223.48506165 108.70702362]
[216.36299133 98.12694550]
[210.46408081 86.81814575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[34 49]
[35 48]
[36 47]
[51 62]
[52 61]
[53 60]
[86 123]
[87 122]
[88 121]
[89 120]
[90 119]
[92 117]
[94 115]
[95 114]
[96 113]
[97 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
