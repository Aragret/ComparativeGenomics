%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.41215515 72.29818726]
[133.11315918 82.16390991]
[121.81414795 92.02963257]
[110.51514435 101.89535522]
[101.12798309 113.59497833]
[93.94547272 126.76356506]
[86.76296234 139.93214417]
[79.58045197 153.10072327]
[72.39794922 166.26931763]
[65.21543884 179.43789673]
[62.93923950 196.23834229]
[46.16523743 198.70193481]
[39.15442657 183.26545715]
[52.04685593 172.25538635]
[59.22936249 159.08680725]
[66.41187286 145.91821289]
[73.59438324 132.74963379]
[80.77689362 119.58105469]
[87.95939636 106.41247559]
[77.74591827 95.42681122]
[64.08967590 101.63221741]
[54.72665405 114.38542175]
[39.93866730 112.60645294]
[26.28242493 118.81185913]
[12.62618446 125.01726532]
[3.53385043 138.66503906]
[-12.81207085 137.34484863]
[-19.59629631 122.41479492]
[-9.83979702 109.23364258]
[6.42077732 111.36103058]
[20.07701874 105.15561676]
[33.73326111 98.95021057]
[42.11949921 86.64085388]
[57.88426971 87.97597504]
[71.54051208 81.77056885]
[90.28809357 80.69346619]
[100.64942169 90.59635162]
[111.94842529 80.73062897]
[123.24742889 70.86490631]
[134.54643250 60.99918365]
[127.12382507 50.96211624]
[120.45690918 40.40826035]
[114.58151245 29.39439774]
[109.52919769 17.97978401]
[105.32711029 6.22582388]
[101.99781036 -5.80425167]
[99.55917358 -18.04573059]
[98.02427673 -30.43276787]
[97.40134430 -42.89873886]
[97.69368744 -55.37659073]
[98.89970398 -67.79921722]
[101.01285553 -80.09980011]
[104.02175903 -92.21220398]
[107.91018677 -104.07127380]
[112.65718842 -115.61325836]
[118.23720551 -126.77607727]
[124.62019348 -137.49972534]
[131.77178955 -147.72653198]
[139.65350342 -157.40150452]
[148.22290039 -166.47265625]
[157.43388367 -174.89122009]
[167.23689270 -182.61192322]
[177.57916260 -189.59329224]
[188.40504456 -195.79779053]
[199.65632629 -201.19209290]
[211.27244568 -205.74720764]
[223.19093323 -209.43869019]
[235.34767151 -212.24668884]
[247.67726135 -214.15617371]
[260.11337280 -215.15687561]
[272.58917236 -215.24348450]
[285.03750610 -214.41554260]
[297.39141846 -212.67753601]
[309.58450317 -210.03886414]
[321.55120850 -206.51376343]
[333.22711182 -202.12120056]
[344.54949951 -196.88485718]
[355.45745850 -190.83291626]
[365.89233398 -183.99795532]
[375.79800415 -176.41679382]
[385.12127686 -168.13018799]
[393.81198120 -159.18278503]
[401.82342529 -149.62269592]
[409.11254883 -139.50137329]
[415.64016724 -128.87327576]
[421.37118530 -117.79557800]
[426.27484131 -106.32788849]
[430.32479858 -94.53189087]
[433.49926758 -82.47103882]
[448.26531982 -85.10990143]
[463.03137207 -87.74876404]
[477.79745483 -90.38763428]
[492.56350708 -93.02649689]
[506.52389526 -98.51352692]
[519.13500977 -106.63507080]
[531.74615479 -114.75661469]
[534.84558105 -130.25399780]
[548.04174805 -138.95100403]
[563.50549316 -135.68788147]
[572.06250000 -122.40055084]
[568.63604736 -106.97216797]
[555.25897217 -98.55611420]
[539.86767578 -102.14548492]
[527.25653076 -94.02394104]
[514.64544678 -85.90239716]
[516.49853516 -78.63493347]
[520.20465088 -64.09999084]
[522.05773926 -56.83252716]
[537.01800537 -55.74121475]
[551.97827148 -54.64990616]
[561.15856934 -67.04848480]
[575.59283447 -72.49418640]
[590.67510986 -69.24931335]
[601.59265137 -58.34928513]
[604.86175537 -43.27226257]
[599.43927002 -28.82927513]
[587.05541992 -19.62902069]
[571.66192627 -18.60726929]
[558.17077637 -26.09005737]
[550.88696289 -39.68965530]
[535.92669678 -40.78096771]
[520.96643066 -41.87227631]
[503.47613525 -51.01760101]
[494.78231812 -64.86821747]
[495.20236206 -78.26043701]
[480.43630981 -75.62157440]
[465.67025757 -72.98271179]
[450.90420532 -70.34384918]
[436.13815308 -67.70497894]
[437.59411621 -49.19442749]
[437.02337646 -30.63469124]
[434.43252563 -12.24702549]
[429.85226440 5.74934483]
[423.33709717 23.13984299]
[414.96447754 39.71709824]
[404.83407593 55.28341293]
[393.06649780 69.65312958]
[379.80191040 82.65484619]
[365.19833374 94.13343048]
[349.42971802 103.95192719]
[332.68395996 111.99313354]
[315.16064453 118.16104889]
[297.06854248 122.38197327]
[278.62338257 124.60542297]
[260.04495239 124.80472565]
[241.55474854 122.97734070]
[223.37319946 119.14486694]
[205.71711731 113.35283661]
[188.79699707 105.67012787]
[172.81462097 96.18817902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 105]
[95 104]
[96 103]
[108 122]
[109 121]
[110 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
