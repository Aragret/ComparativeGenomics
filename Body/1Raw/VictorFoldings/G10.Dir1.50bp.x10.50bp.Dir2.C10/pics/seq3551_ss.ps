%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUxxxxxxxxxxAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-18.86838722 236.02209473]
[-29.19928932 246.89739990]
[-39.53019333 257.77273560]
[-49.86109543 268.64804077]
[-60.07980347 279.62884521]
[-70.18523407 290.71395874]
[-80.29067230 301.79910278]
[-90.39610291 312.88424683]
[-100.50154114 323.96936035]
[-110.60697174 335.05450439]
[-114.18615723 350.46554565]
[-128.47839355 354.65853882]
[-138.58383179 365.74365234]
[-134.51252747 380.62411499]
[-139.15431213 395.33660889]
[-151.02799988 405.18643188]
[-166.34475708 407.03054810]
[-180.21704102 400.28048706]
[-188.21827698 387.09017944]
[-187.79527283 371.66864014]
[-179.08303833 358.93676758]
[-164.86160278 352.95727539]
[-149.66896057 355.63821411]
[-139.56353760 344.55310059]
[-136.70715332 329.93493652]
[-121.69210815 324.94906616]
[-111.58667755 313.86395264]
[-101.48123932 302.77880859]
[-91.37580109 291.69366455]
[-81.27037048 280.60855103]
[-71.16493225 269.52340698]
[-68.96936035 262.41766357]
[-60.73640823 258.31713867]
[-50.40550613 247.44181824]
[-40.07460403 236.56649780]
[-29.74370003 225.69119263]
[-44.75450516 208.06404114]
[-57.38742828 188.66171265]
[-67.43495178 167.80294800]
[-74.73201752 145.83038330]
[-79.15876770 123.10496521]
[-80.64247131 100.00000000]
[-79.15876770 76.89503479]
[-74.73201752 54.16961288]
[-67.43495178 32.19704819]
[-57.38742828 11.33828259]
[-44.75450516 -8.06403732]
[-29.74370003 -25.69119072]
[-40.07460403 -36.56650543]
[-50.40550613 -47.44181824]
[-60.84751511 -58.21049881]
[-71.39952850 -68.87140656]
[-81.95154572 -79.53231812]
[-97.26887512 -77.05059052]
[-111.10437012 -84.07616425]
[-118.13799286 -97.90756989]
[-115.66517639 -113.22634888]
[-104.63677216 -124.14210510]
[-89.29341888 -126.45751953]
[-75.53495026 -119.28226471]
[-68.65178680 -105.37537384]
[-71.29063416 -90.08432770]
[-60.73862076 -79.42342377]
[-50.18660736 -68.76251221]
[-43.20287704 -66.20523071]
[-39.53019333 -57.77272034]
[-29.19928932 -46.89740753]
[-18.86838722 -36.02209473]
[-10.38298225 -42.99405670]
[-1.48959124 -49.43750000]
[7.77891684 -55.32860184]
[17.38828468 -60.64559555]
[27.30299377 -65.36882782]
[37.48640060 -69.48083496]
[47.90085983 -72.96642303]
[58.50788879 -75.81270599]
[69.26827240 -78.00917053]
[80.14225006 -79.54769135]
[91.08961487 -80.42258453]
[102.06992340 -80.63061523]
[113.04257202 -80.17101288]
[123.96702576 -79.04548645]
[134.80288696 -77.25817871]
[145.51011658 -74.81571198]
[156.04913330 -71.72710419]
[166.38098145 -68.00377655]
[176.46748352 -63.65948868]
[186.27134705 -58.71029282]
[195.75634766 -53.17449188]
[204.88742065 -47.07253647]
[213.63082886 -40.42699051]
[221.95422363 -33.26240540]
[229.82688904 -25.60527039]
[237.21968079 -17.48388481]
[244.10530090 -8.92826462]
[256.43658447 -17.46872330]
[268.76785278 -26.00918198]
[273.03796387 -41.47352219]
[287.84686279 -47.64412689]
[301.83441162 -39.78743744]
[304.27059937 -23.93043137]
[293.28656006 -12.23725033]
[277.30831909 -13.67789936]
[264.97705078 -5.13744020]
[252.64575195 3.40301871]
[258.70721436 13.72300148]
[264.07202148 24.42171288]
[268.71658325 35.45219421]
[272.62051392 46.76601791]
[275.76672363 58.31352234]
[278.14135742 70.04402161]
[279.73400879 81.90601349]
[280.53765869 93.84743500]
[280.54882812 105.81586456]
[279.76742554 117.75876617]
[278.19689941 129.62370300]
[275.84414673 141.35861206]
[272.71951294 152.91197205]
[286.86682129 157.89729309]
[301.01412964 162.88261414]
[316.04647827 157.27833557]
[329.72589111 165.66009521]
[331.55865479 181.59811401]
[320.13885498 192.86611938]
[304.22677612 190.82025146]
[296.02880859 177.02992249]
[281.88150024 172.04460144]
[267.73419189 167.05928040]
[262.36398315 179.18103027]
[256.11920166 190.87625122]
[249.03347778 202.08197021]
[241.14494324 212.73779297]
[232.49610901 222.78634644]
[223.13356018 232.17347717]
[213.10774231 240.84864807]
[202.47264099 248.76512146]
[191.28556824 255.88023376]
[179.60676575 262.15570068]
[167.49914551 267.55764771]
[155.02793884 272.05706787]
[142.26031494 275.62963867]
[129.26504517 278.25616455]
[116.11212921 279.92248535]
[102.87243652 280.61962891]
[89.61726379 280.34384155]
[76.41801453 279.09658813]
[63.34580231 276.88464355]
[50.47102737 273.71984863]
[37.86305237 269.61929321]
[25.58978271 264.60504150]
[13.71733856 258.70413208]
[2.30966806 251.94834900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[12 24]
[13 23]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[95 105]
[96 104]
[97 103]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
