%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGxxxxxxxxxxACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[44.42033768 494.57473755]
[44.42033768 479.57473755]
[44.42033768 464.57473755]
[44.42033768 449.57473755]
[44.42033768 434.57473755]
[44.42033768 419.57473755]
[44.42033768 404.57473755]
[44.42033768 389.57473755]
[44.42033768 374.57473755]
[44.42033768 359.57473755]
[31.69283485 356.15780640]
[20.17566490 349.75314331]
[9.73585129 360.52395630]
[-0.70396078 371.29476929]
[-11.14377308 382.06558228]
[-10.64660263 397.86206055]
[-21.52559471 409.32604980]
[-37.32643509 409.65615845]
[-48.67476654 398.65658569]
[-48.83782578 382.85314941]
[-37.71886826 371.62173462]
[-21.91458130 371.62576294]
[-11.47476959 360.85494995]
[-1.03495681 350.08416748]
[9.40485573 339.31335449]
[0.87531114 323.68301392]
[-2.10134816 306.10256958]
[0.81536144 288.48718262]
[9.32300091 272.76126099]
[22.50748253 260.64801025]
[38.94125748 253.48066711]
[56.83788681 252.05577087]
[60.24086761 237.44686890]
[63.64384460 222.83798218]
[62.04959488 219.62460327]
[61.97165680 215.46580505]
[63.84308243 211.10115051]
[67.74171448 207.43777466]
[72.04929352 193.06959534]
[75.75545502 178.53465271]
[78.85378265 163.85813904]
[81.95210266 149.18161011]
[85.05042267 134.50508118]
[76.00153351 128.95106506]
[68.86577606 121.08911133]
[64.21199799 111.54596710]
[62.41118240 101.08238220]
[63.60690308 90.53252411]
[67.70383453 80.73738861]
[56.61251450 70.63874054]
[45.52120209 60.54009247]
[34.42988586 50.44144058]
[18.65662384 51.43126297]
[6.85875893 40.91527939]
[6.03575659 25.13243294]
[16.67588806 13.44640923]
[32.46655273 12.79031849]
[44.03942871 23.55340767]
[44.52853394 39.35012436]
[55.61985016 49.44877625]
[66.71116638 59.54742432]
[77.80248260 69.64607239]
[85.88091278 65.14685059]
[94.81306458 62.75505066]
[95.74868774 47.78425980]
[96.68431854 32.81346512]
[97.61994934 17.84267426]
[83.47602844 12.50967503]
[71.53343201 3.24329591]
[62.85408401 -9.13250256]
[58.20975113 -23.51727104]
[58.01340485 -38.63192749]
[62.28250122 -53.13248825]
[70.63743591 -65.72956848]
[82.33529663 -75.30304718]
[96.33590698 -81.00166321]
[111.39435577 -82.31868744]
[126.17165375 -79.13702393]
[139.35380554 -71.73957062]
[149.76866150 -60.78411102]
[156.49015808 -47.24480057]
[158.92060852 -32.32553864]
[156.84390259 -17.35294151]
[150.44468689 -3.65835857]
[140.29200745 7.54049540]
[127.28859711 15.24782658]
[112.59073639 18.77830315]
[111.65511322 33.74909592]
[110.71948242 48.71988678]
[109.78385162 63.69067764]
[121.65791321 69.25873566]
[130.89772034 78.56587219]
[144.68009949 72.64591217]
[158.46247864 66.72594452]
[172.24485779 60.80598068]
[186.02723694 54.88602066]
[199.80961609 48.96605682]
[213.52967834 42.90304184]
[227.18591309 36.69763565]
[240.84216309 30.49222946]
[254.49839783 24.28682137]
[266.41726685 12.22958565]
[281.30276489 20.34488487]
[277.62533569 36.89519501]
[260.70379639 37.94306183]
[247.04756165 44.14847183]
[233.39132690 50.35387802]
[219.73507690 56.55928421]
[214.91540527 62.22641754]
[205.72958374 62.74843597]
[191.94720459 68.66840363]
[178.16482544 74.58836365]
[164.38244629 80.50832367]
[150.60005188 86.42829132]
[136.81767273 92.34825134]
[134.78904724 114.27629852]
[120.82971954 131.30836487]
[99.72695160 137.60340881]
[96.62862396 152.27993774]
[93.53030396 166.95645142]
[90.43198395 181.63298035]
[91.98797607 185.84490967]
[92.07283020 189.91477966]
[90.92017365 193.38656616]
[88.89058685 195.93112183]
[86.41748047 197.37718201]
[82.10989380 211.74536133]
[78.25273895 226.24096680]
[74.84976196 240.84985352]
[71.44677734 255.45874023]
[82.90631866 261.57928467]
[92.57823944 270.23623657]
[99.91386414 280.93133545]
[104.49875641 293.05081177]
[106.07614136 305.90084839]
[104.56125641 318.74700928]
[100.04592133 330.85647583]
[92.79297638 341.53964233]
[83.22097778 350.18954468]
[71.88007355 356.31628418]
[59.42033768 359.57473755]
[59.42033768 374.57473755]
[59.42033768 389.57473755]
[59.42033768 404.57473755]
[59.42033768 419.57473755]
[59.42033768 434.57473755]
[59.42033768 449.57473755]
[59.42033768 464.57473755]
[59.42033768 479.57473755]
[59.42033768 494.57473755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 25]
[13 24]
[14 23]
[15 22]
[32 130]
[33 129]
[34 128]
[38 127]
[39 126]
[40 121]
[41 120]
[42 119]
[43 118]
[49 62]
[50 61]
[51 60]
[52 59]
[64 90]
[65 89]
[66 88]
[67 87]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
