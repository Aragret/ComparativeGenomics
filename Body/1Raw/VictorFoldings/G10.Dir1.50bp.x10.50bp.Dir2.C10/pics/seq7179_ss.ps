%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAxxxxxxxxxxGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[153.74839783 341.08065796]
[153.74839783 326.08065796]
[153.74839783 311.08065796]
[153.74839783 296.08065796]
[153.74839783 281.08065796]
[153.74839783 266.08065796]
[153.74839783 251.08064270]
[153.74839783 236.08064270]
[153.74839783 221.08064270]
[153.74839783 206.08064270]
[149.54893494 191.68049622]
[141.48588562 179.03189087]
[126.93320465 176.07296753]
[118.57594299 163.36035156]
[121.77819824 148.11622620]
[113.71514130 135.46762085]
[100.66333008 138.02127075]
[87.53038025 135.92443848]
[75.92262268 129.43360901]
[67.25982666 119.34265900]
[62.60157776 106.88587189]
[62.51762009 93.58684540]
[67.01823425 81.07223511]
[55.73646164 71.18680573]
[44.45468903 61.30138397]
[33.17291641 51.41595840]
[18.81605721 47.07078171]
[3.94604230 49.04123306]
[-10.92397213 51.01168442]
[-19.07639122 55.26365662]
[-26.11496544 52.86822510]
[-41.02186203 54.53689957]
[-55.92875671 56.20557785]
[-67.02374268 67.79353333]
[-82.98752594 66.20066071]
[-91.57405090 52.64886856]
[-86.19647980 37.53393173]
[-70.98001099 32.45074081]
[-57.59743118 41.29868317]
[-42.69053650 39.63000488]
[-27.78364182 37.96133041]
[-12.89442348 36.14167023]
[1.97559071 34.17121887]
[16.84560394 32.20076752]
[23.58765221 18.80133629]
[16.30812454 5.68613672]
[9.02859402 -7.42906237]
[-5.02341461 -3.72704244]
[-19.54377365 -3.50848007]
[-33.68237686 -6.78161907]
[-46.61255264 -13.35041046]
[-57.57942200 -22.82625198]
[-65.94393921 -34.65097427]
[-71.22015381 -48.12970734]
[-73.10343170 -62.47173691]
[-71.48802948 -76.83686829]
[-66.47304535 -90.38465118]
[-58.35632706 -102.32357788]
[-47.61680222 -111.95726776]
[-54.62903214 -125.21730804]
[-61.64126205 -138.47734070]
[-68.65348816 -151.73738098]
[-83.82868195 -156.15203857]
[-91.36419678 -170.04417419]
[-86.78935242 -185.17184448]
[-72.81832123 -192.56005859]
[-57.73986435 -187.82553101]
[-50.49976730 -173.77717590]
[-55.39345169 -158.74961853]
[-48.38122177 -145.48957825]
[-41.36899185 -132.22953796]
[-34.35676193 -118.96949768]
[-19.26032257 -122.54503632]
[-3.74135423 -122.10494995]
[11.14950657 -117.67329407]
[24.40266609 -109.54454041]
[35.11802673 -98.26404572]
[42.56610870 -84.59141541]
[46.23772049 -69.44941711]
[45.87876129 -53.86164856]
[41.50778961 -38.88337326]
[33.41517258 -25.53006935]
[22.14379311 -14.70859146]
[29.42332268 -1.59339261]
[36.70285416 11.52180672]
[45.91600037 26.08184242]
[43.05834198 40.13418961]
[54.34011459 50.01961136]
[65.62188721 59.90503693]
[76.90365601 69.79045868]
[86.48778534 64.45457458]
[97.19627380 62.07643890]
[108.13805389 62.85394669]
[118.40267181 66.72239685]
[127.13598633 73.35989380]
[139.70222473 65.16906738]
[152.26847839 56.97824860]
[164.75106812 48.66049957]
[177.14872742 40.21668243]
[183.77990723 25.21803474]
[200.11148071 23.73074913]
[209.34289551 37.28481674]
[201.97769165 51.93697357]
[185.59254456 52.61433792]
[173.19488525 61.05815887]
[169.41462708 67.46044159]
[160.45928955 69.54448700]
[147.89305115 77.73531342]
[135.32681274 85.92613220]
[137.16915894 108.03187561]
[126.36374664 127.40456390]
[134.42680359 140.05316162]
[149.59799194 143.58483887]
[157.59489441 156.52719116]
[154.13449097 170.96882629]
[162.19754028 183.61743164]
[161.89431763 168.62049866]
[164.65884399 153.87745667]
[170.37467957 140.00917053]
[178.80113220 127.59970093]
[189.58331299 117.17163849]
[202.26716614 109.16414642]
[216.31852722 103.91445160]
[231.14564514 101.64363098]
[246.12409973 102.44732666]
[260.62310791 106.29167175]
[274.03204346 113.01478577]
[285.78622437 122.33353424]
[295.39065552 133.85546875]
[302.44085693 147.09535217]
[306.63992310 161.49563599]
[307.81097412 176.44984436]
[305.90475464 191.32823181]
[301.00152588 205.50421143]
[293.30776978 218.38076782]
[283.14749146 229.41564941]
[270.94857788 238.14413452]
[257.22476196 244.19863892]
[242.55400085 247.32418823]
[227.55413818 247.38912964]
[212.85687256 244.39076233]
[199.08113098 238.45535278]
[186.80708313 229.83283997]
[176.55162048 218.88636780]
[168.74839783 206.08064270]
[168.74839783 221.08064270]
[168.74839783 236.08064270]
[168.74839783 251.08064270]
[168.74839783 266.08065796]
[168.74839783 281.08065796]
[168.74839783 296.08065796]
[168.74839783 311.08065796]
[168.74839783 326.08065796]
[168.74839783 341.08065796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 116]
[12 115]
[15 112]
[16 111]
[23 90]
[24 89]
[25 88]
[26 87]
[27 44]
[28 43]
[29 42]
[31 41]
[32 40]
[33 39]
[45 85]
[46 84]
[47 83]
[59 72]
[60 71]
[61 70]
[62 69]
[95 109]
[96 108]
[97 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
