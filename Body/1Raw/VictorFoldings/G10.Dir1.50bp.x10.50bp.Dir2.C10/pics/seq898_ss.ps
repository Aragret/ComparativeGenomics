%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUAxxxxxxxxxxGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.44776917 623.20489502]
[99.44776917 608.20489502]
[99.44776917 593.20489502]
[99.44776917 578.20489502]
[99.44776917 563.20489502]
[99.44776917 548.20489502]
[99.44776917 533.20489502]
[99.44776917 518.20489502]
[99.44776917 503.20492554]
[99.44776917 488.20492554]
[84.47170258 483.95742798]
[71.27973175 475.66601562]
[60.93872070 463.99166870]
[54.28767014 449.86926270]
[51.86964417 434.43276978]
[53.88745117 418.92428589]
[60.18663406 404.59393311]
[70.26728821 392.59924316]
[83.32372284 383.91152954]
[98.30881500 379.23733521]
[97.99675751 364.24057007]
[83.66805267 359.96868896]
[71.34459686 351.46560669]
[62.24043274 339.55364990]
[57.25714493 325.39181519]
[56.89463806 310.36279297]
[61.20098877 295.93817139]
[69.76652527 283.53411865]
[81.76275635 274.37261963]
[96.02248383 269.36087036]
[95.71042633 254.36412048]
[95.39836884 239.36737061]
[95.08631134 224.37062073]
[94.77425385 209.37387085]
[94.46219635 194.37710571]
[94.15014648 179.38035583]
[93.83808899 164.38360596]
[93.52603149 149.38685608]
[85.52562714 136.82330322]
[92.97415924 122.86515045]
[92.66210175 107.86839294]
[89.25912476 93.25950623]
[82.91199493 79.66854858]
[76.56486511 66.07759857]
[63.71495056 56.84774780]
[65.33998871 42.04205322]
[58.99286270 28.45110321]
[52.64573288 14.86015320]
[46.29860306 1.26920211]
[38.17706299 -11.34192562]
[23.32823372 -16.80296135]
[20.93837547 -31.50458908]
[11.19072247 -42.90560913]
[1.44307077 -54.30663300]
[-6.56652260 -58.83413315]
[-8.38577557 -66.04772949]
[-17.89413452 -77.64907074]
[-32.61078644 -86.06669617]
[-28.59609985 -102.53845215]
[-11.65669250 -103.24049377]
[-6.29279280 -87.15742493]
[3.21556544 -75.55608368]
[12.84409142 -64.05428314]
[22.59174347 -52.65326309]
[32.33939743 -41.25224304]
[46.49100494 -36.60668182]
[49.57808304 -21.08957863]
[48.01798630 -36.00822830]
[52.55295944 -50.30627060]
[62.42646790 -61.59847260]
[75.99139404 -68.00103760]
[90.98479462 -68.44587708]
[104.90544128 -62.85878754]
[115.43105316 -52.17181015]
[120.80572510 -38.16777802]
[120.13284302 -23.18287849]
[113.52465057 -9.71692753]
[102.08354950 -0.01634857]
[87.71817017 4.30058432]
[72.82498169 2.51370978]
[59.88955307 -5.07792759]
[66.23668671 8.51302338]
[72.58381653 22.10397530]
[78.93094635 35.69492340]
[91.32687378 43.95266342]
[90.15581512 59.73047256]
[96.50294495 73.32141876]
[102.85007477 86.91237640]
[104.49623871 72.00297546]
[110.20240021 58.13071060]
[119.52323914 46.37817764]
[131.73135376 37.66256332]
[145.87400818 32.66403198]
[160.84750366 31.77267838]
[175.48329163 35.05806351]
[188.63917542 42.26379395]
[199.28846741 52.82752609]
[206.60009766 65.92485809]
[210.00344849 80.53366852]
[209.23291016 95.51386261]
[204.34863281 109.69638062]
[195.73178101 121.97440338]
[184.05482483 131.38975525]
[170.22904968 137.20762634]
[155.33341980 138.97401428]
[140.53039551 136.55105591]
[126.97524261 130.12783813]
[115.72579956 120.20565033]
[107.65885925 107.55633545]
[107.97091675 122.55309296]
[115.99363708 136.18931580]
[108.52278137 149.07479858]
[108.83483887 164.07154846]
[109.14689636 179.06829834]
[109.45895386 194.06506348]
[109.77101135 209.06181335]
[110.08306885 224.05856323]
[110.39511871 239.05531311]
[110.70717621 254.05207825]
[111.01923370 269.04882812]
[125.47509766 273.46304321]
[137.84204102 282.11758423]
[146.91615295 294.15457153]
[151.81883240 308.38760376]
[152.08181763 323.41867065]
[147.69195557 337.77557373]
[139.09118652 350.05590820]
[127.13211823 359.06427002]
[112.99351501 363.92852783]
[113.30557251 378.92529297]
[127.34305573 382.50445557]
[139.95916748 389.59973145]
[150.29162598 399.71893311]
[157.63609314 412.16339111]
[161.49423218 426.07632446]
[161.60746765 440.50170898]
[157.97434998 454.44995117]
[150.85020447 466.96594238]
[140.72918701 477.19424438]
[128.31001282 484.43768311]
[114.44776917 488.20492554]
[114.44776917 503.20492554]
[114.44776917 518.20489502]
[114.44776917 533.20489502]
[114.44776917 548.20489502]
[114.44776917 563.20489502]
[114.44776917 578.20489502]
[114.44776917 593.20489502]
[114.44776917 608.20489502]
[114.44776917 623.20489502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[40 110]
[41 109]
[42 88]
[43 87]
[44 86]
[46 84]
[47 83]
[48 82]
[49 81]
[50 67]
[52 65]
[53 64]
[54 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
