%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAxxxxxxxxxxAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[22.53040123 265.63195801]
[15.62340355 278.94711304]
[16.13710976 294.75997925]
[3.40840197 302.49493408]
[-3.49859667 315.81008911]
[-10.40559483 329.12524414]
[-17.31259346 342.44039917]
[-24.21959305 355.75555420]
[-31.12659073 369.07070923]
[-29.84746742 385.41989136]
[-43.51802826 394.47790527]
[-58.07517624 386.92666626]
[-58.54376221 370.53421021]
[-44.44174576 362.16369629]
[-37.53474808 348.84854126]
[-30.62774849 335.53338623]
[-23.72075081 322.21823120]
[-16.81375313 308.90307617]
[-9.90675354 295.58792114]
[-10.91449451 280.72744751]
[2.30824757 272.04013062]
[9.21524620 258.72497559]
[-3.28347206 250.89073181]
[-15.11003590 242.07450867]
[-26.18748093 232.33369446]
[-36.44371796 221.73167419]
[-45.81199646 210.33743286]
[-54.23134995 198.22514343]
[-61.64699173 185.47360229]
[-68.01065826 172.16581726]
[-73.28093719 158.38839722]
[-77.42352295 144.23098755]
[-80.41146851 129.78573608]
[-82.22531891 115.14662933]
[-82.85327148 100.40895844]
[-82.29124451 85.66862488]
[-80.54289246 71.02156067]
[-77.61959839 56.56307983]
[-92.03181458 52.40519333]
[-106.44403076 48.24730301]
[-118.60389709 57.88666534]
[-134.10868835 58.50403976]
[-146.99649048 49.86203766]
[-152.31167603 35.28368759]
[-148.01046753 20.37465668]
[-135.74674988 10.86777592]
[-120.23616791 10.41863346]
[-107.44287109 19.19993401]
[-102.28614044 33.83508682]
[-87.87392426 37.99297714]
[-73.46170807 42.15086365]
[-49.48131943 -5.31297493]
[-12.85823822 -43.86975098]
[-21.62444496 -56.04158783]
[-30.39065170 -68.21342468]
[-39.15686035 -80.38526154]
[-54.67377472 -80.31516266]
[-67.24873352 -89.40637207]
[-72.04640198 -104.16313171]
[-67.22198486 -118.91117096]
[-54.63056564 -127.97956085]
[-39.11380005 -127.88132477]
[-26.63820648 -118.65424347]
[-22.00090027 -103.84630585]
[-26.98502350 -89.15146637]
[-18.21881485 -76.97962952]
[-9.45260811 -64.80779266]
[-0.68640101 -52.63595963]
[6.99722195 -57.43560791]
[14.90914059 -61.84879684]
[23.02993393 -65.86469269]
[31.33966637 -69.47343445]
[39.81793976 -72.66616821]
[48.44394302 -75.43505859]
[57.19650269 -77.77330780]
[66.05413818 -79.67516327]
[74.99509430 -81.13597870]
[83.99742889 -82.15214539]
[93.03904724 -82.72119141]
[102.09775543 -82.84169769]
[111.15131378 -82.51338196]
[120.17749786 -81.73705292]
[129.15415955 -80.51460266]
[138.05923462 -78.84904480]
[146.87091064 -76.74446106]
[155.56752014 -74.20602417]
[164.12771606 -71.23995972]
[172.53051758 -67.85354614]
[180.75526428 -64.05509949]
[188.78178406 -59.85394287]
[196.59036255 -55.26039124]
[204.16184998 -50.28572083]
[211.47763062 -44.94213867]
[218.51979065 -39.24276733]
[225.27099609 -33.20159149]
[231.71470642 -26.83344460]
[237.83509827 -20.15395737]
[243.61714172 -13.17952538]
[249.04664612 -5.92727041]
[254.11027527 1.58500659]
[258.79562378 9.33886433]
[263.09115601 17.31526947]
[266.98635864 25.49464226]
[270.47164917 33.85690689]
[273.53845215 42.38153076]
[276.17932129 51.04759216]
[278.38769531 59.83382034]
[280.15817261 68.71864319]
[281.48641968 77.68025208]
[282.36914062 86.69665527]
[282.80422974 95.74570465]
[282.79058838 104.80520630]
[282.32824707 113.85290527]
[281.41830444 122.86660767]
[280.06307983 131.82417297]
[278.26580811 140.70361328]
[276.03097534 149.48315430]
[273.36401367 158.14122009]
[270.27151489 166.65655518]
[266.76104736 175.00828552]
[262.84121704 183.17587280]
[258.52166748 191.13929749]
[253.81297302 198.87899780]
[248.72671509 206.37597656]
[243.27539062 213.61184692]
[237.47235107 220.56881714]
[231.33186340 227.22982788]
[224.86898804 233.57852173]
[218.09959412 239.59931946]
[211.04031372 245.27745056]
[203.70843506 250.59895325]
[196.12200928 255.55079651]
[188.29960632 260.12078857]
[180.26046753 264.29772949]
[172.02430725 268.07138062]
[163.61134338 271.43243408]
[155.04223633 274.37271118]
[146.33802795 276.88491821]
[137.52005005 278.96295166]
[128.60998535 280.60165405]
[119.62969208 281.79702759]
[110.60120392 282.54617310]
[101.54669952 282.84719849]
[92.48839569 282.69937134]
[83.44853210 282.10308838]
[74.44930267 281.05978394]
[65.51278687 279.57205200]
[56.66092682 277.64349365]
[47.91545486 275.27886963]
[39.29783249 272.48400879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[38 51]
[39 50]
[40 49]
[53 68]
[54 67]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
