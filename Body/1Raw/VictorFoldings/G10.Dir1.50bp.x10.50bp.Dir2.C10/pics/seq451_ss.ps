%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.63285828 343.75451660]
[140.63285828 328.75451660]
[140.63285828 313.75451660]
[140.63285828 298.75451660]
[140.63285828 283.75451660]
[140.63285828 268.75451660]
[140.63285828 253.75451660]
[140.63285828 238.75451660]
[140.63285828 223.75451660]
[140.63285828 208.75451660]
[135.58409119 194.62971497]
[126.07573700 183.02836609]
[122.55647278 182.33393860]
[119.21176910 179.86114502]
[116.89190674 175.71740723]
[116.36351013 170.39382935]
[107.59729767 158.22200012]
[98.83109283 146.05015564]
[90.06488800 133.87832642]
[76.89630127 126.69581604]
[61.91658783 125.91596985]
[46.93687439 125.13612366]
[38.13883591 127.82802582]
[31.65461731 124.18103027]
[16.69436836 123.08972168]
[1.73412013 121.99841309]
[-12.59240055 128.71118164]
[-24.72302437 120.06843567]
[-39.68327332 118.97711945]
[-45.88734055 121.54948425]
[-51.58674622 120.68457031]
[-55.23896027 117.51647186]
[-70.14086151 115.80377960]
[-85.04276276 114.09109497]
[-99.94466400 112.37840271]
[-109.02803040 124.76339722]
[-123.09340668 130.93273926]
[-138.35728455 129.22689819]
[-150.71374512 120.10475922]
[-156.83895874 106.02011871]
[-155.08529663 90.76166534]
[-145.92446899 78.43386078]
[-131.82069397 72.35282135]
[-116.56781006 74.15430450]
[-104.26878357 83.35373688]
[-98.23197937 97.47650146]
[-83.33007812 99.18919373]
[-68.42816925 100.90187836]
[-53.52627182 102.61457062]
[-38.59196091 104.01687622]
[-23.63171387 105.10818481]
[-10.37524986 98.31734467]
[2.82543063 107.03816223]
[17.78567886 108.12947083]
[32.74592972 109.22078705]
[47.71672058 110.15641022]
[62.69643402 110.93625641]
[77.67614746 111.71610260]
[73.28922272 98.24879456]
[76.85279846 83.67527771]
[88.15007019 72.56878662]
[87.83801270 57.57202911]
[87.52595520 42.57527542]
[87.21390533 27.57852364]
[72.59267426 23.82057381]
[59.52809525 16.25621986]
[48.98965454 5.44678736]
[41.75936890 -7.80559158]
[38.37377548 -22.51750183]
[39.08410263 -37.59722519]
[43.83764648 -51.92574310]
[52.28166199 -64.43978119]
[63.78953934 -74.21072388]
[77.50732422 -80.51349640]
[92.41706848 -82.88038635]
[107.41236115 -81.13576508]
[121.38046265 -75.40908813]
[133.28483582 -66.12532043]
[142.24211121 -53.97336578]
[147.58758545 -39.85499191]
[148.92459106 -24.81787109]
[146.15391541 -9.97785950]
[139.48117065 3.56381702]
[129.40150452 14.80227566]
[116.66290283 22.90354919]
[102.21065521 27.26646805]
[102.52271271 42.26322174]
[102.83477020 57.25997543]
[103.14682770 72.25672913]
[117.04937744 77.88868713]
[127.71100616 67.33739471]
[127.54257202 51.53400421]
[138.65769958 40.29881668]
[154.46199036 40.29747391]
[165.57902527 51.53076553]
[165.41328430 67.33419037]
[154.06307983 78.33184052]
[138.26229858 77.99902344]
[127.60066986 88.55030823]
[127.56692505 106.50799561]
[117.52736664 120.23175049]
[102.23672485 125.11212158]
[111.00292969 137.28395081]
[119.76913452 149.45579529]
[128.53533936 161.62762451]
[137.67707825 173.52000427]
[147.18544006 185.12135315]
[154.51968384 177.16755676]
[166.74372864 173.02378845]
[181.78102112 175.02983093]
[196.48898315 177.97531128]
[211.19694519 180.92079163]
[220.78285217 168.98895264]
[234.82038879 162.88928223]
[250.08383179 164.02340698]
[263.06573486 172.13073730]
[270.78295898 185.34826660]
[271.46212769 200.63870239]
[264.94720459 214.48840332]
[252.73526001 223.71482849]
[237.63250732 226.19779968]
[223.10943604 221.36674500]
[212.50335693 210.33181763]
[208.25146484 195.62875366]
[193.54350281 192.68327332]
[178.83554077 189.73779297]
[173.03486633 194.49197388]
[184.53018188 204.12825012]
[196.02548218 213.76452637]
[207.52079773 223.40080261]
[221.17102051 229.61944580]
[227.93034363 243.01017761]
[224.82696533 257.68563843]
[213.22532654 267.19363403]
[198.22618103 267.35388184]
[186.42404175 258.09591675]
[183.00767517 243.49154663]
[175.81628418 230.32780457]
[168.62490845 217.16407776]
[161.43351746 204.00033569]
[155.63285828 208.75451660]
[155.63285828 223.75451660]
[155.63285828 238.75451660]
[155.63285828 253.75451660]
[155.63285828 268.75451660]
[155.63285828 283.75451660]
[155.63285828 298.75451660]
[155.63285828 313.75451660]
[155.63285828 328.75451660]
[155.63285828 343.75451660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 107]
[12 106]
[16 105]
[17 104]
[18 103]
[19 102]
[20 58]
[21 57]
[22 56]
[24 55]
[25 54]
[26 53]
[28 51]
[29 50]
[32 49]
[33 48]
[34 47]
[35 46]
[61 89]
[62 88]
[63 87]
[64 86]
[90 99]
[91 98]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
