%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAAAUAGGUUUGGUCCUAGxxxxxxxxxxAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.49028778 387.23886108]
[84.49028778 372.23886108]
[84.49028778 357.23886108]
[84.49028778 342.23886108]
[84.49028778 327.23886108]
[84.49028778 312.23886108]
[84.49028778 297.23886108]
[84.49028778 282.23886108]
[84.49028778 267.23886108]
[84.49028778 252.23884583]
[69.51421356 247.99134827]
[56.32224655 239.69996643]
[45.98123550 228.02560425]
[39.33018494 213.90319824]
[36.91216278 198.46670532]
[38.92996597 182.95822144]
[45.22914886 168.62786865]
[55.30980682 156.63317871]
[68.36623383 147.94548035]
[83.35133362 143.27127075]
[83.03927612 128.27452087]
[72.26847076 117.83470917]
[57.26927948 117.99074554]
[42.27009201 118.14678192]
[27.27090454 118.30281830]
[12.27171516 118.45885468]
[-2.72747278 118.61489105]
[-11.01119137 129.28436279]
[-23.74780464 133.15820312]
[-36.19916153 129.03048706]
[-43.86788940 118.62916565]
[-58.86708069 118.47312927]
[-73.86626434 118.31709290]
[-82.25537872 131.26416016]
[-96.32185364 137.59959412]
[-111.57713318 135.30180359]
[-123.15332031 125.10398102]
[-127.35649109 110.26023102]
[-122.84542084 95.50713348]
[-111.05959320 85.55235291]
[-95.75980377 83.57241821]
[-81.82817841 90.19911957]
[-73.71022797 103.31790924]
[-58.71104431 103.47394562]
[-43.71185303 103.62998199]
[-32.24460220 91.36784363]
[-15.12034988 91.15789032]
[-2.88350940 103.61569977]
[12.11567879 103.45966339]
[27.11486816 103.30362701]
[42.11405563 103.14759064]
[57.11324310 102.99155426]
[72.11243439 102.83551788]
[75.68792725 89.74890137]
[84.61038971 80.63124847]
[96.06915283 77.24509430]
[106.93496704 79.70681000]
[116.44332886 68.10546875]
[125.95169067 56.50412369]
[135.46005249 44.90278244]
[144.84721375 33.20315933]
[154.11215210 21.40651894]
[163.37710571 9.60987949]
[172.64205933 -2.18676043]
[181.90699768 -13.98340034]
[184.34591675 -29.61549187]
[198.29203796 -34.84571457]
[207.55697632 -46.64235306]
[193.30346680 -41.96929932]
[178.33892822 -42.99994659]
[164.86064148 -49.58296204]
[154.84773254 -60.75173569]
[149.77041626 -74.86629486]
[150.37422180 -89.85414124]
[156.57049561 -103.51452637]
[167.44940186 -113.84163666]
[181.41355896 -119.31909943]
[196.41252136 -119.14262390]
[210.24392700 -113.33811951]
[220.87684631 -102.75790405]
[226.74998474 -88.95550537]
[227.00099182 -73.95761108]
[221.59333801 -59.96697998]
[233.85569763 -68.60609436]
[246.11807251 -77.24520874]
[258.38043213 -85.88432312]
[265.68713379 -102.75418091]
[283.18176270 -103.72286224]
[289.70864868 -118.13502502]
[304.54516602 -119.44894409]
[316.62515259 -128.34129333]
[328.70513916 -137.23364258]
[340.78512573 -146.12599182]
[352.86511230 -155.01834106]
[353.67791748 -170.63479614]
[364.37640381 -182.03991699]
[379.90902710 -183.84857178]
[392.94180298 -175.20675659]
[397.32104492 -160.19488525]
[390.97897339 -145.90109253]
[376.91018677 -139.07447815]
[361.75747681 -142.93835449]
[349.67749023 -134.04600525]
[337.59750366 -125.15365601]
[325.51751709 -116.26130676]
[313.43753052 -107.36895752]
[307.77468872 -93.59283447]
[292.07409668 -91.64286804]
[289.92868042 -79.69697571]
[279.88113403 -72.19591522]
[267.01956177 -73.62195587]
[254.75718689 -64.98284149]
[242.49481201 -56.34372711]
[230.23245239 -47.70460892]
[219.35362244 -37.37740326]
[210.08866882 -25.58076477]
[208.31245422 -10.79244900]
[193.70364380 -4.71845102]
[184.43869019 7.07818890]
[175.17375183 18.87482834]
[165.90879822 30.67146873]
[156.64384460 42.46810913]
[154.97505188 49.71799088]
[147.06138611 54.41114044]
[137.55302429 66.01248169]
[128.04466248 77.61382294]
[118.53630829 89.21516418]
[120.99925232 113.07745361]
[98.03603363 127.96246338]
[98.34809113 142.95921326]
[112.38557434 146.53839111]
[125.00169373 153.63368225]
[135.33415222 163.75286865]
[142.67861938 176.19734192]
[146.53674316 190.11027527]
[146.64997864 204.53564453]
[143.01687622 218.48390198]
[135.89271545 230.99987793]
[125.77169800 241.22816467]
[113.35253906 248.47163391]
[99.49028778 252.23884583]
[99.49028778 267.23886108]
[99.49028778 282.23886108]
[99.49028778 297.23886108]
[99.49028778 312.23886108]
[99.49028778 327.23886108]
[99.49028778 342.23886108]
[99.49028778 357.23886108]
[99.49028778 372.23886108]
[99.49028778 387.23886108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[31 45]
[32 44]
[33 43]
[57 127]
[58 126]
[59 125]
[60 124]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[67 116]
[68 115]
[83 114]
[84 113]
[85 112]
[86 111]
[88 108]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
