%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACxxxxxxxxxxAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.57117462 411.61889648]
[95.57117462 396.61889648]
[95.57117462 381.61889648]
[95.57117462 366.61889648]
[95.57117462 351.61889648]
[95.57117462 336.61889648]
[95.57117462 321.61889648]
[95.57117462 306.61889648]
[95.57117462 291.61889648]
[95.57117462 276.61889648]
[81.45846558 273.35729980]
[68.42469025 267.02124023]
[57.13048935 257.92816162]
[48.14916992 246.53530884]
[41.93759155 233.41676331]
[38.81294632 219.23454285]
[38.93653870 204.70520020]
[42.30549240 190.56353760]
[48.75269699 177.52555847]
[57.95510101 166.25213623]
[69.44992065 157.31553650]
[82.65787506 151.17036438]
[96.91239929 148.13049316]
[97.22445679 133.13372803]
[97.53651428 118.13697815]
[87.09670258 107.36617279]
[72.09751129 107.21013641]
[57.09832382 107.05410004]
[42.09913254 106.89806366]
[27.09994507 106.74202728]
[12.10075665 106.58599091]
[5.80060720 120.45062256]
[-5.59842587 130.54922485]
[-20.12139130 135.13217163]
[-35.25209427 133.40542603]
[-48.36905670 125.66816711]
[-57.19967651 113.26091003]
[-60.21400070 98.33329010]
[-56.88977814 83.47161865]
[-47.80295181 71.25075531]
[-34.52786636 63.78804779]
[-19.36451340 62.37645340]
[-4.94003344 67.26053619]
[6.24644375 77.59410095]
[12.25679398 91.58679962]
[27.25598145 91.74283600]
[42.25516891 91.89887238]
[57.25436020 92.05490875]
[72.25354767 92.21094513]
[87.25273895 92.36698151]
[73.43116760 86.53910065]
[66.06906128 73.47007751]
[68.24734497 58.62908554]
[79.05443573 48.22683716]
[93.96774292 46.61650848]
[106.74629211 54.47199249]
[112.04247284 68.50589752]
[107.63916016 82.84629059]
[117.14752197 71.24494934]
[116.66099548 58.31370163]
[124.87316895 48.83851624]
[136.94349670 47.56788635]
[146.69114685 36.16686249]
[156.43879700 24.76584244]
[166.18644714 13.36482143]
[175.93409729 1.96380067]
[165.72940063 -9.05348778]
[156.87277222 -21.18099785]
[149.48396301 -34.25471497]
[143.66291809 -48.09783554]
[139.48835754 -62.52314758]
[137.01673889 -77.33556366]
[136.28149414 -92.33475494]
[137.29254150 -107.31789398]
[140.03623962 -122.08232880]
[144.47546387 -136.42840576]
[150.55017090 -150.16209412]
[158.17823792 -163.09768677]
[167.25646973 -175.06021118]
[177.66212463 -185.88790894]
[189.25445557 -195.43434143]
[201.87669373 -203.57040405]
[215.35813904 -210.18606567]
[229.51647949 -215.19186401]
[244.16023254 -218.52009583]
[259.09133911 -220.12576294]
[274.10791016 -219.98712158]
[289.00683594 -218.10606384]
[303.58663940 -214.50804138]
[317.65014648 -209.24168396]
[331.00717163 -202.37825012]
[343.47705078 -194.01052856]
[354.89114380 -184.25169373]
[365.09509277 -173.23371887]
[373.95092773 -161.10562134]
[381.33886719 -148.03140259]
[387.15896606 -134.18789673]
[391.33258057 -119.76231384]
[393.80319214 -104.94972992]
[394.53744507 -89.95048523]
[393.52539062 -74.96742249]
[390.78073120 -60.20316315]
[386.34054565 -45.85738373]
[380.26492310 -32.12409592]
[372.63598633 -19.18902588]
[363.55694580 -7.22710276]
[353.15057373 3.59990025]
[341.55761719 13.14556026]
[328.93484497 21.28078461]
[315.45294189 27.89555168]
[301.29428101 32.90040588]
[286.65029907 36.22766113]
[271.71905518 37.83231735]
[256.70251465 37.69268036]
[241.80371094 35.81063461]
[227.22413635 32.21162796]
[213.16099548 26.94434357]
[199.80444336 20.08000565]
[187.33512878 11.71145248]
[177.58747864 23.11247444]
[167.83981323 34.51349640]
[158.09216309 45.91451645]
[148.34451294 57.31553650]
[146.10560608 74.69331360]
[128.74885559 80.75331116]
[119.24050140 92.35465240]
[112.53326416 118.44903564]
[112.22120667 133.44578552]
[111.90914917 148.44255066]
[126.94895935 152.43392944]
[140.59623718 159.89096069]
[152.06629944 170.38015747]
[160.70069885 183.29376221]
[166.00518799 197.88507080]
[167.67787170 213.31152344]
[165.62646484 228.68342590]
[159.97331238 243.11515808]
[151.04818726 255.77633667]
[139.36897278 265.93948364]
[125.61164856 273.02185059]
[110.57117462 276.61889648]
[110.57117462 291.61889648]
[110.57117462 306.61889648]
[110.57117462 321.61889648]
[110.57117462 336.61889648]
[110.57117462 351.61889648]
[110.57117462 366.61889648]
[110.57117462 381.61889648]
[110.57117462 396.61889648]
[110.57117462 411.61889648]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 129]
[24 128]
[25 127]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[58 126]
[59 125]
[62 123]
[63 122]
[64 121]
[65 120]
[66 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
