%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUxxxxxxxxxxCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[167.63940430 417.60641479]
[167.63940430 402.60641479]
[167.63940430 387.60641479]
[167.63940430 372.60641479]
[167.63940430 357.60641479]
[167.63940430 342.60641479]
[167.63940430 327.60641479]
[167.63940430 312.60641479]
[167.63940430 297.60641479]
[167.63940430 282.60641479]
[165.46257019 267.76519775]
[161.15498352 253.39701843]
[156.84739685 239.02882385]
[152.53981018 224.66064453]
[147.05278015 210.70025635]
[140.42428589 197.24429321]
[127.85924530 189.24621582]
[128.70181274 173.44746399]
[122.07331085 159.99150085]
[115.44480896 146.53553772]
[108.81631470 133.07957458]
[102.18781281 119.62360382]
[107.21208191 133.75714111]
[104.17868042 148.44721985]
[93.96710968 159.43464661]
[79.53807068 163.53378296]
[65.07508087 159.55612183]
[54.77148438 148.65492249]
[51.61467361 133.99087524]
[56.51993179 119.81559753]
[68.06503296 110.23902893]
[82.90020752 108.03747559]
[67.90751648 108.50551605]
[52.91481781 108.97355652]
[37.92212296 109.44160461]
[22.27936554 115.97922516]
[11.66689110 102.75758362]
[21.43399811 88.89973450]
[37.45407867 94.44890594]
[52.44677734 93.98086548]
[67.43947601 93.51281738]
[82.43216705 93.04477692]
[68.89162445 86.59080505]
[66.31091309 71.81447601]
[76.86217499 61.15282822]
[91.66456604 63.57962036]
[98.25910187 77.05233765]
[98.57115936 62.05558777]
[98.88321686 47.05883408]
[87.78795624 57.15314865]
[72.80802917 57.92885590]
[60.72948456 49.03454590]
[57.02402115 34.49943161]
[63.37025070 20.90806198]
[76.89327240 14.41745949]
[91.46701813 17.96792984]
[100.48956299 29.95146179]
[102.97468567 15.15875530]
[94.07516479 2.37453437]
[96.80615997 -12.59197235]
[109.04880524 -20.99752045]
[111.53392029 -35.79022598]
[114.01904297 -50.58293533]
[116.50415802 -65.37564087]
[118.98927307 -80.16835022]
[112.14033508 -91.14768982]
[114.55737305 -103.45121765]
[124.39995575 -110.55269623]
[127.19227600 -125.29050446]
[113.66257477 -131.98750305]
[102.44219208 -142.08728027]
[94.36374664 -154.84036255]
[90.02672577 -169.30041504]
[89.75296021 -184.39437866]
[93.56275940 -199.00218201]
[101.17341614 -212.03984070]
[112.02017212 -222.53985596]
[125.29811859 -229.72308350]
[140.02194214 -233.05645752]
[155.09906006 -232.29263306]
[169.41061401 -227.48828125]
[181.89462280 -218.99992371]
[191.62466431 -207.45745850]
[197.87873840 -193.71739197]
[200.19271851 -178.79934692]
[198.39489746 -163.81033325]
[192.61869812 -149.86264038]
[183.29275513 -137.99127197]
[171.10910034 -129.07717896]
[156.97184753 -123.78182983]
[141.93008423 -122.49817657]
[139.13775635 -107.76036835]
[145.83158875 -91.56800842]
[133.78198242 -77.68322754]
[131.29685974 -62.89052200]
[128.81175232 -48.09781647]
[126.32662964 -33.30510712]
[123.84150696 -18.51240158]
[132.66540527 -6.56775618]
[130.35586548 8.46955395]
[117.76739502 17.64387321]
[115.28227234 32.43658066]
[113.87996674 47.37088776]
[113.56791687 62.36764145]
[113.25585938 77.36439514]
[122.93303680 95.97074890]
[115.64378357 112.99510193]
[122.27227783 126.45107269]
[128.90077209 139.90702820]
[135.52928162 153.36300659]
[142.15777588 166.81896973]
[155.19692993 175.77949524]
[153.88024902 190.61578369]
[160.50874329 204.07176208]
[164.89341736 189.72691345]
[176.77508545 180.57125854]
[191.76373291 179.98765564]
[204.32133484 188.19171143]
[209.80812073 202.15219116]
[206.19682312 216.71099854]
[194.82174683 226.48890686]
[179.88575745 227.87321472]
[166.90800476 220.35305786]
[171.21557617 234.72123718]
[175.52316284 249.08943176]
[179.83074951 263.45761108]
[184.21975708 249.11408997]
[193.68099976 237.47428894]
[206.82524109 230.24734497]
[221.72247314 228.49443054]
[236.18524170 232.47293091]
[248.08990479 241.59864807]
[255.68846130 254.53161621]
[257.86517334 269.37283325]
[254.30043030 283.94311523]
[245.51763916 296.10299683]
[232.80644226 304.06698608]
[218.03326416 306.66574097]
[203.36734009 303.51760864]
[190.96212769 295.08489990]
[182.63940430 282.60641479]
[182.63940430 297.60641479]
[182.63940430 312.60641479]
[182.63940430 327.60641479]
[182.63940430 342.60641479]
[182.63940430 357.60641479]
[182.63940430 372.60641479]
[182.63940430 387.60641479]
[182.63940430 402.60641479]
[182.63940430 417.60641479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[14 123]
[15 114]
[16 113]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[32 42]
[33 41]
[34 40]
[35 39]
[47 105]
[48 104]
[49 103]
[57 102]
[58 101]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[68 92]
[69 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
