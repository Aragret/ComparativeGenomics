%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACAxxxxxxxxxxGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.68299866 256.81094360]
[87.68299866 241.81095886]
[87.68299866 226.81095886]
[87.68299866 211.81095886]
[87.68299866 196.81095886]
[87.68299866 181.81095886]
[87.68299866 166.81095886]
[87.68299866 151.81095886]
[87.68299866 136.81095886]
[87.68299866 121.81095886]
[84.75635529 114.45211029]
[84.80648041 107.54227448]
[87.25120544 102.09402466]
[91.20429993 98.80373383]
[78.94193268 90.16461945]
[66.67956543 81.52550507]
[54.41719818 72.88639069]
[42.15483093 64.24727631]
[29.89246368 55.60815811]
[15.87574959 50.26664352]
[0.97384745 48.55395508]
[-13.92805481 46.84126282]
[-28.82995796 45.12857437]
[-43.73186111 43.41588593]
[-58.63376236 41.70319366]
[-73.53566742 39.99050522]
[-88.43756866 38.27781677]
[-103.03092957 44.38882065]
[-114.79152679 35.24893188]
[-129.69342041 33.53623962]
[-144.59533691 31.82355118]
[-150.90103149 34.13560867]
[-156.55952454 33.03435516]
[-160.07679749 29.71707344]
[-174.89454651 27.38596916]
[-183.53117371 39.97054291]
[-196.77700806 47.55411148]
[-212.00209045 48.63094711]
[-226.18347168 42.98725128]
[-236.50541687 31.74357986]
[-240.91850281 17.13237190]
[-238.54650879 2.05469251]
[-229.86039734 -10.49577236]
[-216.58479309 -18.02711868]
[-201.35559082 -19.04399490]
[-187.19654846 -13.34449577]
[-176.91896057 -2.06026340]
[-172.56344604 12.56821060]
[-157.74568176 14.89931488]
[-142.88264465 16.92164803]
[-127.98073578 18.63433838]
[-113.07883453 20.34702873]
[-99.55136108 14.11351967]
[-86.72487640 23.37591362]
[-71.82297516 25.08860397]
[-56.92107391 26.80129242]
[-42.01916885 28.51398277]
[-27.11726761 30.22667313]
[-12.21536541 31.93936157]
[2.68653703 33.65205383]
[17.58843994 35.36474228]
[5.74141693 26.16430473]
[-3.61294651 14.43844032]
[-9.95117474 0.84333581]
[-12.91857815 -13.86021900]
[-12.34909821 -28.84940529]
[-8.27460289 -43.28541946]
[-0.92310417 -56.36041260]
[9.29400444 -67.34270477]
[21.80496788 -75.61771393]
[35.90966415 -80.72237396]
[50.81878662 -82.37101746]
[65.69801331 -80.47138977]
[79.71469879 -75.12979126]
[92.08444977 -66.64514923]
[102.11505890 -55.49226379]
[109.24520111 -42.29525375]
[113.07587433 -27.79263496]
[113.39270782 -12.79598045]
[110.17797089 1.85548639]
[103.61157227 15.34186268]
[94.06095886 26.90844154]
[82.06058502 35.90795135]
[68.28202057 41.83677673]
[53.49629593 44.36313629]
[38.53157806 43.34578705]
[50.79394531 51.98490524]
[63.05631638 60.62401962]
[75.31867981 69.26313782]
[87.58105469 77.90225220]
[99.84342194 86.54136658]
[114.48692322 89.79219818]
[129.25297546 87.15332794]
[144.01902771 84.51446533]
[158.78507996 81.87560272]
[173.55114746 79.23674011]
[188.31719971 76.59786987]
[189.43002319 61.55751419]
[194.24905396 47.26668549]
[202.47135925 34.62372589]
[213.58009338 24.42337608]
[226.87692261 17.30684280]
[241.52601624 13.72147751]
[256.60650635 13.89265728]
[271.17044067 17.80962372]
[284.30230713 25.22615051]
[295.17663574 35.67602921]
[303.10983276 48.50237656]
[307.60324097 62.89890671]
[308.37438965 77.96065521]
[305.37478638 92.74081421]
[298.79299927 106.31030273]
[289.04275513 117.81612396]
[276.73699951 126.53501129]
[262.64926147 131.91889954]
[247.66508484 133.62933350]
[232.72642517 131.55880737]
[218.77230835 125.83747864]
[206.67993164 116.82498932]
[197.20939636 105.08786774]
[190.95606995 91.36392975]
[176.19000244 94.00279236]
[161.42395020 96.64165497]
[146.65789795 99.28052521]
[131.89184570 101.91938782]
[117.12578583 104.55825043]
[131.34934998 109.32165527]
[145.57292175 114.08505249]
[160.55035400 114.90758514]
[173.73237610 122.06539154]
[182.57872009 134.17912292]
[185.38461304 148.91435242]
[181.60932922 163.43148804]
[171.98040771 174.93296814]
[158.35342407 181.20236206]
[143.35440063 181.03150940]
[129.87376404 174.45332336]
[120.50934601 162.73548889]
[117.06576538 148.13842773]
[109.87438202 134.97470093]
[102.68299866 121.81095886]
[102.68299866 136.81095886]
[102.68299866 151.81095886]
[102.68299866 166.81095886]
[102.68299866 181.81095886]
[102.68299866 196.81095886]
[102.68299866 211.81095886]
[102.68299866 226.81095886]
[102.68299866 241.81095886]
[102.68299866 256.81094360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[29 52]
[30 51]
[31 50]
[34 49]
[35 48]
[92 126]
[93 125]
[94 124]
[95 123]
[96 122]
[97 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
