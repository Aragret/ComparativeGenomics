%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACxxxxxxxxxxACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.96471405 337.30508423]
[126.96471405 322.30508423]
[126.96471405 307.30508423]
[126.96471405 292.30508423]
[126.96471405 277.30508423]
[126.96471405 262.30508423]
[126.96471405 247.30508423]
[126.96471405 232.30508423]
[126.96471405 217.30508423]
[126.96471405 202.30508423]
[124.32585144 187.53903198]
[119.13043213 173.46751404]
[105.53704834 167.48791504]
[100.06770325 153.29141235]
[106.43181610 139.07395935]
[101.23640442 125.00244141]
[81.83375549 121.22737885]
[69.32616425 103.25404358]
[73.16231537 79.53135681]
[58.16312408 79.68739319]
[43.16393661 79.84342957]
[28.16474724 79.99946594]
[13.23044014 81.40177155]
[-1.53561532 84.04063416]
[-16.30167007 86.67950439]
[-31.06772614 89.31836700]
[-39.10121918 99.46315765]
[-51.50041962 101.32831573]
[-61.50040054 94.45026398]
[-76.31816101 96.78136444]
[-91.13591766 99.11247253]
[-105.95367432 101.44357300]
[-120.66072845 109.87796021]
[-132.83682251 98.08054352]
[-124.87111664 83.11444855]
[-108.28477478 86.62581635]
[-93.46701813 84.29470825]
[-78.64926147 81.96360779]
[-63.83150482 79.63249969]
[-50.83694077 67.87915039]
[-33.70658875 74.55230713]
[-18.94053459 71.91344452]
[-4.17447948 69.27458191]
[10.59157562 66.63571930]
[-1.97576678 58.44658279]
[-7.47913074 44.49262619]
[-3.88513255 29.92954826]
[7.47831678 20.13812447]
[22.41264915 18.73608589]
[35.39992523 26.24145889]
[41.64160919 39.88115692]
[38.83151627 54.61558914]
[28.00871086 65.00028229]
[43.00790024 64.84424591]
[58.00708771 64.68820953]
[73.00627899 64.53217316]
[82.75392914 53.13114929]
[73.09582520 40.59992599]
[78.90419769 26.88453293]
[76.72736359 12.04332829]
[74.55052948 -2.79787755]
[72.37368774 -17.63908386]
[57.43322372 -19.93558311]
[43.83415222 -26.53533173]
[32.78569794 -36.85148621]
[25.27027893 -49.96673965]
[21.95616150 -64.71489716]
[23.13803482 -79.78455353]
[28.71080780 -93.83573151]
[38.17895508 -105.61900330]
[50.70057297 -114.08662415]
[65.16224670 -118.48564148]
[80.27805328 -118.42490387]
[94.70391083 -113.90982056]
[107.15708160 -105.34185028]
[116.53023529 -93.48287201]
[121.98991394 -79.38736725]
[123.05065155 -64.30870056]
[119.61812592 -49.58765030]
[111.99755859 -36.53321457]
[100.86656189 -26.30617714]
[87.21489716 -19.81591988]
[89.39173126 -4.97471428]
[91.56856537 9.86649132]
[93.74540710 24.70769691]
[103.24781036 36.17737579]
[97.59513092 50.95431519]
[110.91028595 57.86131287]
[124.29657745 51.09319687]
[137.68286133 44.32508087]
[134.42964172 29.59866524]
[134.94175720 14.52588940]
[139.18702698 0.05424420]
[146.89857483 -12.90657234]
[157.59165955 -23.54183197]
[170.59410095 -31.18299103]
[185.08856201 -35.34972382]
[200.16389465 -35.78010559]
[214.87245178 -32.44707870]
[228.28964233 -25.56016159]
[239.57206726 -15.55227184]
[248.01048279 -3.05251503]
[253.07444763 11.15336514]
[254.44564819 26.17237282]
[252.03788757 41.06040573]
[246.00250244 54.88158417]
[236.71888733 66.76709747]
[224.77064514 75.96981812]
[210.90881348 81.91124725]
[196.00477600 84.21791077]
[180.99542236 82.74479675]
[166.82424927 77.58451843]
[154.38204956 69.06145477]
[144.45097351 57.71136856]
[131.06468201 64.47948456]
[117.67840576 71.24759674]
[129.35089111 98.43263245]
[115.30792236 119.80702972]
[120.50334167 133.87855530]
[134.57962036 140.54910278]
[139.64805603 154.89363098]
[133.20195007 168.27209473]
[138.39736938 182.34361267]
[141.46066284 167.65974426]
[149.04704285 154.71961975]
[160.36418152 144.87469482]
[174.23011780 139.15318298]
[189.19671631 138.15261841]
[203.70085144 141.97750854]
[216.22775269 150.22839355]
[225.46908569 162.04353333]
[230.45970154 176.18898010]
[230.67840576 191.18739319]
[226.10232544 205.47233582]
[217.20939636 217.55189514]
[204.92839050 226.16450500]
[190.54193115 230.41064453]
[175.55253601 229.84687805]
[161.52568054 224.53207397]
[149.92631531 215.02130127]
[141.96470642 202.30508423]
[141.96470642 217.30508423]
[141.96470642 232.30508423]
[141.96470642 247.30508423]
[141.96470642 262.30508423]
[141.96470642 277.30508423]
[141.96470642 292.30508423]
[141.96470642 307.30508423]
[141.96470642 322.30508423]
[141.96470642 337.30508423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[15 119]
[16 118]
[19 56]
[20 55]
[21 54]
[22 53]
[23 44]
[24 43]
[25 42]
[26 41]
[29 39]
[30 38]
[31 37]
[32 36]
[57 87]
[59 85]
[60 84]
[61 83]
[62 82]
[88 116]
[89 115]
[90 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
