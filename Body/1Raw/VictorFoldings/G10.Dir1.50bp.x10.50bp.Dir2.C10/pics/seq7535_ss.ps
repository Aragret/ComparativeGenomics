%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.95363617 280.46417236]
[109.95363617 265.46417236]
[109.95363617 250.46418762]
[109.95363617 235.46418762]
[109.95363617 220.46418762]
[109.95363617 205.46418762]
[109.95363617 190.46418762]
[109.95363617 175.46418762]
[109.95363617 160.46418762]
[109.95363617 145.46418762]
[95.59677124 141.11900330]
[87.27902222 153.60159302]
[86.76774597 169.99276733]
[72.19097900 177.50608826]
[58.54405594 168.41249084]
[59.86576080 152.06669617]
[74.79643250 145.28384399]
[83.11418152 132.80125427]
[73.20237732 118.89154053]
[71.57023621 103.79559326]
[76.90152740 91.60480499]
[65.03988647 82.42321777]
[53.17825317 73.24163055]
[42.88699722 84.17074585]
[31.58896065 94.05557251]
[19.38963318 102.80382538]
[6.40291977 110.33382416]
[-7.24992323 116.57524872]
[-21.44141960 121.46982574]
[-36.03906631 124.97186279]
[-50.90656281 127.04866028]
[-65.90509033 127.68082428]
[-80.89461517 126.86244965]
[-95.73516846 124.60118103]
[-110.28820038 120.91813660]
[-124.41782379 115.84769440]
[-137.99209595 109.43720245]
[-150.88430786 101.74651337]
[-162.97404480 92.84744263]
[-174.14846802 82.82306671]
[-184.30320740 71.76699066]
[-193.34346008 59.78244781]
[-201.18481445 46.98133087]
[-207.75407410 33.48316574]
[-212.98988342 19.41398811]
[-216.84335327 4.90515471]
[-219.27851868 -9.90786266]
[-220.27264404 -24.88675690]
[-219.81642151 -39.89167023]
[-217.91413879 -54.78249741]
[-214.58354187 -69.42021179]
[-209.85574341 -83.66813660]
[-203.77487183 -97.39324188]
[-196.39770508 -110.46737671]
[-187.79313660 -122.76847076]
[-178.04148865 -134.18165588]
[-167.23382568 -144.60038757]
[-155.47105408 -153.92736816]
[-142.86299133 -162.07553101]
[-129.52737427 -168.96878052]
[-115.58872223 -174.54275513]
[-101.17716217 -178.74543762]
[-86.42725372 -181.53755188]
[-71.47673035 -182.89303589]
[-56.46517944 -182.79925537]
[-41.53276062 -181.25706482]
[-26.81889725 -178.28086853]
[-12.46097183 -173.89845276]
[1.40695405 -168.15074158]
[14.65539742 -161.09141541]
[27.16065788 -152.78634644]
[38.80597687 -143.31312561]
[49.48261642 -132.76016235]
[59.09089661 -121.22602081]
[67.54109955 -108.81838226]
[74.75432587 -95.65309143]
[80.66323090 -81.85308075]
[85.21263885 -67.54718781]
[88.36007690 -52.86900330]
[90.07615662 -37.95556641]
[90.34484863 -22.94612694]
[89.16365051 -7.98082399]
[86.54358673 6.80061007]
[82.50913239 21.26016235]
[77.09793854 35.26282501]
[70.36054230 48.67785263]
[62.35984421 61.37999344]
[74.22148132 70.56158447]
[86.08311462 79.74317169]
[118.98420715 75.82941437]
[134.49168396 113.09109497]
[148.93365479 109.03778076]
[156.70867920 95.54012299]
[171.41262817 91.63521576]
[184.23268127 99.13068390]
[198.67465210 95.07736969]
[213.11662292 91.02405548]
[227.55860901 86.97074127]
[242.00057983 82.91742706]
[246.95556641 78.39774323]
[252.60198975 77.27365112]
[257.11032104 79.00524139]
[271.70471191 75.54051971]
[286.29907227 72.07580566]
[289.51571655 57.15548325]
[298.89425659 45.11365891]
[312.57260132 38.34123993]
[327.83489990 38.18290329]
[341.65081787 44.67007828]
[351.27716064 56.51473999]
[354.80267334 71.36511230]
[351.52731323 86.27265167]
[342.10140991 98.27745819]
[328.39648438 104.99595642]
[313.13369751 105.09419250]
[299.34344482 98.55265808]
[289.76379395 86.67018127]
[275.16943359 90.13489532]
[260.57504272 93.59960938]
[246.05389404 97.35939789]
[231.61192322 101.41271210]
[217.16993713 105.46603394]
[202.72796631 109.51934814]
[188.28599548 113.57266235]
[181.23834229 126.64424133]
[166.64987183 130.96061707]
[152.98698425 123.47975922]
[138.54499817 127.53307343]
[153.16229248 130.89981079]
[167.77957153 134.26654053]
[182.72286987 132.96343994]
[197.06434631 137.35914612]
[208.71086121 146.81210327]
[215.96263123 159.94267273]
[217.76126099 174.83444214]
[213.84422302 189.31398010]
[204.78323364 201.26799011]
[191.90072632 208.95181274]
[177.07690430 211.24397278]
[162.47526550 207.80993652]
[150.22695923 199.15092468]
[142.11956787 186.53068542]
[139.33639526 171.79165649]
[132.14501953 158.62791443]
[124.95363617 145.46418762]
[124.95363617 160.46418762]
[124.95363617 175.46418762]
[124.95363617 190.46418762]
[124.95363617 205.46418762]
[124.95363617 220.46418762]
[124.95363617 235.46418762]
[124.95363617 250.46418762]
[124.95363617 265.46417236]
[124.95363617 280.46417236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 18]
[12 17]
[21 89]
[22 88]
[23 87]
[91 128]
[92 127]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
