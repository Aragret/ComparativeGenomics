%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAxxxxxxxxxxUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.03439331]
[92.50000000 241.03437805]
[92.50000000 226.03437805]
[92.50000000 211.03437805]
[92.50000000 196.03437805]
[92.50000000 181.03437805]
[92.50000000 166.03437805]
[92.50000000 151.03437805]
[92.50000000 136.03437805]
[92.50000000 121.03438568]
[85.77201843 117.72013092]
[72.31605530 111.09163666]
[65.58806610 107.77738190]
[53.69569016 116.91912079]
[41.80331039 126.06085205]
[29.91093063 135.20259094]
[32.59398651 150.27108765]
[27.95598221 164.85696411]
[17.06269264 175.60845947]
[2.41731882 180.05499268]
[-12.61474133 177.17475891]
[-24.57923126 167.62962341]
[-30.72679520 153.61299133]
[-29.64477158 138.34576416]
[-21.58180046 125.33627319]
[-8.39069176 117.57397461]
[6.89733171 116.84259796]
[20.76919556 123.31021118]
[32.66157532 114.16847229]
[44.55395508 105.02674103]
[56.44633484 95.88500214]
[60.15249634 81.35006714]
[54.08948135 67.63001251]
[48.02647018 53.90996170]
[41.96345520 40.18990707]
[35.90044403 26.46985435]
[29.83743095 12.74980068]
[23.63202286 -0.90644014]
[10.78210640 -10.13629436]
[12.40714836 -24.94198608]
[6.06001902 -38.53293610]
[-0.28711069 -52.12388992]
[-6.63424015 -65.71483612]
[-18.50366211 -70.86951447]
[-23.49447823 -82.37215424]
[-19.41914368 -93.80451965]
[-25.48215675 -107.52457428]
[-31.54516983 -121.24462891]
[-46.14670181 -117.64373016]
[-61.15170288 -116.63326263]
[-76.10418701 -118.24391937]
[-90.54977417 -122.42676544]
[-104.04946899 -129.05468750]
[-116.19303894 -137.92625427]
[-126.61145020 -148.77189636]
[-134.98809814 -161.26200867]
[-141.06843567 -175.01702881]
[-144.66767883 -189.61897278]
[-145.67643738 -204.62408447]
[-144.06408691 -219.57638550]
[-139.87960815 -234.02149963]
[-133.25015259 -247.52044678]
[-124.37720490 -259.66302490]
[-113.53038788 -270.08020020]
[-101.03932190 -278.45541382]
[-87.28360748 -284.53421021]
[-72.68126678 -288.13177490]
[-57.67603302 -289.13885498]
[-42.72391129 -287.52478027]
[-28.27927589 -283.33868408]
[-14.78108215 -276.70770264]
[-2.63952589 -267.83337402]
[7.77642536 -256.98535156]
[16.15024185 -244.49336243]
[22.22745323 -230.73695374]
[25.82337952 -216.13420105]
[26.82874680 -201.12886047]
[25.21299934 -186.17691040]
[21.02523994 -171.73275757]
[14.39272976 -158.23530579]
[5.51702309 -146.09475708]
[-5.33215714 -135.68003845]
[-17.82511711 -127.30764008]
[-11.76210403 -113.58758545]
[-5.69909048 -99.86753082]
[9.00050449 -90.33223724]
[6.95671082 -72.06196594]
[13.30384064 -58.47101593]
[19.65097046 -44.88006592]
[25.99809837 -31.28911591]
[38.39402771 -23.03137779]
[37.22297287 -7.25356960]
[42.93993759 -2.49310780]
[43.55748367 6.68678808]
[49.62049866 20.40684128]
[55.68350983 34.12689590]
[61.74652481 47.84695053]
[67.80953979 61.56700134]
[73.87255096 75.28705597]
[105.52927399 65.57697296]
[130.56263733 85.64717102]
[145.52288818 86.73848724]
[134.88143921 76.16685486]
[131.50010681 61.55293274]
[136.41661072 47.38154984]
[148.12211609 38.00172424]
[163.02435303 36.29199982]
[176.55003357 42.77707291]
[184.54827881 55.46675491]
[184.56452942 70.46674347]
[176.59381104 83.17373657]
[163.08145142 89.68825531]
[177.57704163 93.54541779]
[192.07263184 97.40257263]
[209.69841003 92.17646790]
[221.67100525 104.96931458]
[236.24369812 108.52407837]
[253.06452942 106.40360260]
[259.75860596 121.98004913]
[246.64398193 132.72450256]
[232.68894958 123.09677887]
[218.11624146 119.54202271]
[207.57913208 125.56502533]
[195.37788391 122.67563629]
[188.21548462 111.89817047]
[173.71987915 108.04100800]
[159.22428894 104.18385315]
[144.43157959 101.69873047]
[129.47132874 100.60742188]
[123.97850037 105.71416473]
[136.58415222 113.84420013]
[151.52995300 115.11816406]
[162.56300354 125.28043365]
[165.05867004 140.07136536]
[157.97084045 153.29115295]
[144.27049255 159.39854431]
[129.70028687 155.83355713]
[120.36751556 144.09049988]
[120.18421173 129.09138489]
[112.99283600 115.92764282]
[107.50000000 121.03438568]
[107.50000000 136.03437805]
[107.50000000 151.03437805]
[107.50000000 166.03437805]
[107.50000000 181.03437805]
[107.50000000 196.03437805]
[107.50000000 211.03437805]
[107.50000000 226.03437805]
[107.50000000 241.03437805]
[107.50000000 256.03439331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 31]
[14 30]
[15 29]
[16 28]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 94]
[38 92]
[40 90]
[41 89]
[42 88]
[43 87]
[46 85]
[47 84]
[48 83]
[101 129]
[102 128]
[112 127]
[113 126]
[114 125]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
