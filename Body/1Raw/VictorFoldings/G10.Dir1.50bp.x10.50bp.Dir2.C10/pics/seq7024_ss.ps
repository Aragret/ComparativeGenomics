%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUxxxxxxxxxxAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.88514709 266.24630737]
[105.88514709 251.24630737]
[105.88514709 236.24630737]
[105.88514709 221.24630737]
[105.88514709 206.24630737]
[105.88514709 191.24630737]
[105.88514709 176.24630737]
[105.88514709 161.24630737]
[105.88514709 146.24630737]
[105.88514709 131.24630737]
[78.29984283 122.25069427]
[70.02819061 95.12887573]
[55.04794693 94.35921478]
[40.06770706 93.58955383]
[25.08746719 92.81989288]
[21.17574310 95.01034546]
[17.17495346 95.72953796]
[13.57011986 95.13632202]
[10.74135971 93.53402710]
[8.92505646 91.32222748]
[-5.94154167 89.32617188]
[-20.80813980 87.33010864]
[-27.15215111 89.52011871]
[-32.78538513 88.31407166]
[-36.23928833 84.93475342]
[-51.01140594 82.33003235]
[-65.78352356 79.72531128]
[-80.55563354 77.12058258]
[-95.54852295 76.65866089]
[-110.45297241 78.34906006]
[-125.35741425 80.03945160]
[-140.26187134 81.72985077]
[-155.16630554 83.42024994]
[-168.02508545 93.59787750]
[-183.16670227 87.29998779]
[-185.01477051 71.00531006]
[-171.66815186 61.47640610]
[-156.85670471 68.51580048]
[-141.95227051 66.82540894]
[-127.04781342 65.13500977]
[-112.14337158 63.44461060]
[-97.23892212 61.75421143]
[-95.09033966 46.90888977]
[-108.90392303 41.06210327]
[-122.74658203 48.33636856]
[-138.01539612 44.96039581]
[-147.50091553 32.52822113]
[-146.72434998 16.90992928]
[-136.05238342 5.48000669]
[-120.52398682 3.63531017]
[-107.47119904 12.24684906]
[-103.05713654 27.24851990]
[-89.24355316 33.09530640]
[-81.63779449 39.82828903]
[-77.30982208 47.75675201]
[-76.23007965 55.63383484]
[-77.95091248 62.34846878]
[-63.17879868 64.95319366]
[-48.40668106 67.55791473]
[-33.63456726 70.16263580]
[-18.81208420 72.46351624]
[-3.94548488 74.45957184]
[10.92111397 76.45562744]
[25.85712624 77.83965302]
[40.83736801 78.60931396]
[55.81760788 79.37897491]
[70.79785156 80.14863586]
[81.67316437 69.81772614]
[81.67316437 54.81772995]
[81.67316437 39.81772995]
[81.67316437 24.81772995]
[68.33203888 17.20787621]
[60.59706497 3.93889642]
[60.54892349 -11.41992092]
[68.20055389 -24.73712921]
[81.49372101 -32.43046951]
[96.85260773 -32.43046951]
[110.14576721 -24.73712921]
[117.79740143 -11.41992092]
[117.74925995 3.93889642]
[110.01428986 17.20787621]
[96.67316437 24.81772995]
[96.67316437 39.81772995]
[96.67316437 54.81772995]
[96.67316437 69.81772614]
[113.15353394 72.10358429]
[126.20020294 82.84137726]
[131.78193665 99.06427765]
[146.43466187 95.85527802]
[161.08738708 92.64627838]
[175.74011230 89.43728638]
[190.39283752 86.22828674]
[191.42770386 70.56388855]
[196.81690979 55.83480072]
[206.11868286 43.22478867]
[218.57711792 33.74487305]
[233.18362427 28.15225792]
[248.75863647 26.88987732]
[264.04678345 30.05131149]
[277.81811523 37.37390137]
[288.96701050 48.26055908]
[296.60107422 61.82843781]
[311.18484497 58.31926727]
[325.76858521 54.81010056]
[340.31555176 51.15139771]
[354.82415771 47.34353638]
[366.09249878 35.42898560]
[381.98007202 39.49306870]
[386.14312744 55.35500717]
[374.29904175 66.69739532]
[358.63201904 61.85216141]
[344.12341309 65.66001892]
[338.41687012 70.42946625]
[329.27774048 69.39385223]
[314.69400024 72.90301514]
[300.11026001 76.41218567]
[299.69079590 90.76963043]
[295.55465698 104.53749847]
[287.97946167 116.76974487]
[277.47937012 126.62415314]
[264.77017212 133.42030334]
[250.72047424 136.68652344]
[236.29241943 136.19268799]
[222.47569275 131.96633911]
[210.21969604 124.29129791]
[200.36833191 113.68857574]
[193.60183716 100.88101196]
[178.94911194 104.09001160]
[164.29638672 107.29900360]
[149.64366150 110.50800323]
[134.99093628 113.71699524]
[149.38838196 117.92572784]
[164.37942505 117.40727234]
[177.73416138 124.23741913]
[186.08840942 136.69560242]
[187.33767700 151.64349365]
[181.16725159 165.31558228]
[169.13151550 174.26773071]
[154.26237488 176.24481201]
[140.30552673 170.74880981]
[130.77679443 159.16418457]
[128.07652283 144.41004944]
[120.88514709 131.24630737]
[120.88514709 146.24630737]
[120.88514709 161.24630737]
[120.88514709 176.24630737]
[120.88514709 191.24630737]
[120.88514709 206.24630737]
[120.88514709 221.24630737]
[120.88514709 236.24630737]
[120.88514709 251.24630737]
[120.88514709 266.24630737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 67]
[13 66]
[14 65]
[15 64]
[20 63]
[21 62]
[22 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[43 53]
[44 52]
[68 85]
[69 84]
[70 83]
[71 82]
[88 131]
[89 130]
[90 129]
[91 128]
[92 127]
[102 116]
[103 115]
[104 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
