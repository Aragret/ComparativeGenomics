%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUxxxxxxxxxxAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[29.28071404 197.63360596]
[19.74279976 209.21066284]
[10.20488453 220.78771973]
[0.66696954 232.36477661]
[-8.87094498 243.94181824]
[-17.93185806 255.89588928]
[-26.50088120 268.20733643]
[-35.06990433 280.51879883]
[-43.63892746 292.83026123]
[-52.20795059 305.14169312]
[-46.22565842 319.36196899]
[-48.90358734 334.55511475]
[-59.38722992 345.87310791]
[-74.33128357 349.70440674]
[-88.96716309 344.82641602]
[-98.62461090 332.79574585]
[-100.22196198 317.45129395]
[-93.24951935 303.68945312]
[-79.93215942 295.90155029]
[-64.51940155 296.57269287]
[-55.95037842 284.26123047]
[-47.38135529 271.94976807]
[-38.81233215 259.63833618]
[-30.24330902 247.32687378]
[-30.64556503 244.49609375]
[-29.91709328 241.33151245]
[-27.92342758 238.27572632]
[-24.69731522 235.81207275]
[-20.44799995 234.40391541]
[-10.91008472 222.82685852]
[-1.37216997 211.24980164]
[8.16574478 199.67274475]
[17.70365906 188.09568787]
[9.33599377 179.45802307]
[1.87055016 170.02963257]
[-4.61838007 159.90437317]
[-10.06622410 149.18296814]
[-14.41876793 137.97215271]
[-17.63269997 126.38345337]
[-19.67603683 114.53220367]
[-20.52844238 102.53634644]
[-20.18143845 90.51524353]
[-18.63847542 78.58853149]
[-15.91490650 66.87488556]
[-12.03783798 55.49088287]
[-7.04584932 44.54980087]
[-0.98861831 34.16051483]
[6.07357836 24.42642021]
[-5.00552893 14.31437969]
[-16.08463669 4.20233822]
[-31.49353600 0.61396986]
[-35.67799759 -13.68076897]
[-46.75710678 -23.79281044]
[-57.83621216 -33.90485001]
[-68.91532135 -44.01689148]
[-84.69026947 -50.22875214]
[-83.08811951 -67.10682678]
[-66.42611694 -70.23960114]
[-58.80327988 -55.09600067]
[-47.72417068 -44.98395920]
[-36.64506531 -34.87191772]
[-25.56595612 -24.75987625]
[-10.94950867 -21.89478874]
[-5.97259569 -6.87676954]
[5.10651207 3.23527145]
[16.18561935 13.34731293]
[22.29343414 7.83043718]
[28.76344299 2.74316740]
[35.56548691 -1.89078498]
[42.66786194 -6.04982090]
[50.03746414 -9.71455479]
[57.63994217 -12.86790657]
[65.43986511 -15.49517632]
[73.40087128 -17.58411789]
[81.48585510 -19.12499809]
[89.65714264 -20.11063194]
[97.87663269 -20.53642654]
[106.10601807 -20.40039444]
[114.30694580 -19.70317459]
[122.44118500 -18.44801331]
[130.47082520 -16.64076233]
[138.35844421 -14.28984356]
[146.06727600 -11.40621662]
[153.56137085 -8.00332165]
[160.80583191 -4.09701920]
[167.76686096 0.29448262]
[174.41204834 5.15071535]
[180.71037292 10.44904423]
[186.63252258 16.16477203]
[192.15086365 22.27125931]
[204.19615173 13.33195496]
[216.24142456 4.39265060]
[228.28671265 -4.54665422]
[224.55458069 -19.28231430]
[226.75057983 -34.32379150]
[234.53984070 -47.37736893]
[246.73455811 -56.45246887]
[261.47509766 -60.16521072]
[276.51367188 -57.94942093]
[289.55700684 -50.14299774]
[298.61605835 -37.93635941]
[302.30941772 -23.19093323]
[300.07382202 -8.15528679]
[292.25027466 4.87775230]
[280.03170776 13.92074013]
[265.28143311 17.59468651]
[250.24874878 15.33934116]
[237.22601318 7.49862814]
[225.18074036 16.43793297]
[213.13545227 25.37723732]
[201.09016418 34.31654358]
[218.32722473 76.93037415]
[218.36048889 122.89833832]
[232.88163757 126.65812683]
[247.40280151 130.41790771]
[261.92395020 134.17770386]
[271.74246216 122.49181366]
[285.66244507 116.23110962]
[300.92013550 116.63865662]
[314.48605347 123.63352966]
[323.66671753 135.82690430]
[326.63928223 150.79776001]
[322.81353760 165.57363892]
[312.94909668 177.22076416]
[299.00454712 183.42660522]
[283.74859619 182.95898438]
[270.21032715 175.91073608]
[261.07775879 163.68130493]
[258.16415405 148.69885254]
[243.64300537 144.93907166]
[229.12185669 141.17927551]
[214.60069275 137.41949463]
[211.31710815 146.28218079]
[207.34931946 154.86039734]
[202.72171021 163.10142517]
[197.46272278 170.95460510]
[191.60470581 178.37165833]
[185.18363953 185.30702209]
[178.23899841 191.71803284]
[170.81346130 197.56532288]
[162.95268250 202.81292725]
[154.70497131 207.42860413]
[146.12101746 211.38397217]
[137.25358582 214.65473938]
[128.15718079 217.22077942]
[118.88770294 219.06634521]
[109.50213623 220.18006897]
[100.05816650 220.55511475]
[90.61383820 220.18917847]
[81.22719574 219.08450317]
[71.95594788 217.24789429]
[62.85706711 214.69062805]
[53.98648453 211.42843628]
[45.39871597 207.48133850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 24]
[7 23]
[8 22]
[9 21]
[10 20]
[48 66]
[49 65]
[50 64]
[52 62]
[53 61]
[54 60]
[55 59]
[90 111]
[91 110]
[92 109]
[93 108]
[113 132]
[114 131]
[115 130]
[116 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
