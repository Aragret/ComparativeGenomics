%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUxxxxxxxxxxGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.18675232 345.14770508]
[160.88661194 330.15072632]
[160.58648682 315.15371704]
[160.28634644 300.15670776]
[159.98622131 285.15972900]
[159.68608093 270.16271973]
[159.38595581 255.16572571]
[159.08581543 240.16873169]
[158.78569031 225.17173767]
[154.78274536 210.71571350]
[147.32609558 197.70039368]
[134.28569031 190.50337219]
[134.13906860 174.68284607]
[126.68243408 161.66752625]
[119.09595490 148.72746277]
[111.38039398 135.86393738]
[103.66483307 123.00042725]
[95.94926453 110.13690948]
[85.72051239 99.16546631]
[72.15066528 92.77334595]
[57.69464493 88.77039337]
[43.23863220 84.76744080]
[28.78261566 80.76449585]
[14.32660103 76.76154327]
[-1.03790200 80.53548431]
[-11.23880863 69.68233490]
[-25.69482422 65.67938232]
[-40.15084076 61.67643356]
[-49.31398392 62.40088272]
[-54.85453033 57.44606400]
[-69.22755432 53.15466690]
[-83.72290039 49.29654694]
[-98.32749176 45.87517929]
[-112.93209076 42.45381165]
[-127.53668976 39.03244781]
[-138.70274353 51.19116211]
[-154.38215637 56.04767227]
[-170.28337097 52.37146378]
[-182.10359192 41.25411224]
[-186.69317627 25.78748512]
[-201.36331177 22.65902328]
[-216.03344727 19.53056145]
[-231.45797729 25.09973335]
[-243.81712341 14.32088947]
[-240.39685059 -1.71761930]
[-224.71565247 -6.51674986]
[-212.90498352 4.86043167]
[-198.23484802 7.98889256]
[-183.56472778 11.11735344]
[-175.08531189 0.37340966]
[-162.73948669 -5.68729210]
[-148.92066956 -5.82606506]
[-136.33547974 0.04148307]
[-127.47360992 10.81771564]
[-124.11531830 24.42784882]
[-109.51072693 27.84921646]
[-94.90612793 31.27058220]
[-80.30152893 34.69194794]
[-77.09185028 33.10883713]
[-72.94423676 33.03546524]
[-68.59254456 34.90057755]
[-64.93615723 38.78163910]
[-50.56312943 43.07303619]
[-36.14788818 47.22041702]
[-21.69187355 51.22336960]
[-7.23585749 55.22632217]
[7.09465408 51.16606140]
[18.32955170 62.30552673]
[32.78556824 66.30847931]
[47.24158096 70.31143188]
[61.69759750 74.31437683]
[76.15361023 78.31732941]
[65.92911530 67.34191895]
[59.74204254 53.67736053]
[58.23947525 38.75280762]
[61.57856750 24.12918282]
[69.41009521 11.33593464]
[80.91497040 1.71108162]
[94.88993073 -3.73873496]
[109.87336731 -4.44353151]
[124.29818726 -0.32959455]
[136.65574646 8.17280865]
[145.65357971 20.17443085]
[150.35063171 34.42004776]
[150.25566101 49.41974640]
[145.37858582 63.60474396]
[136.22947693 75.49146271]
[123.76525116 83.83669281]
[109.28948212 87.76763153]
[94.31732941 86.87340546]
[109.30531311 86.27326202]
[120.87066650 76.72115326]
[132.43600464 67.16905212]
[127.94451141 52.64683151]
[129.35729980 37.51168823]
[136.45892334 24.07162666]
[148.16645813 14.37615490]
[162.69458008 9.90376186]
[177.82783508 11.33645535]
[191.25854492 18.45576096]
[200.93861389 30.17603493]
[205.39189148 44.71002197]
[203.93928528 59.84139252]
[196.80232239 73.26272583]
[185.06933594 82.92736053]
[170.52949524 87.36151886]
[155.40005493 85.88901520]
[141.98811340 78.73439789]
[130.42277527 88.28650665]
[118.85742188 97.83860779]
[114.01845551 101.08168793]
[108.81278229 102.42134857]
[116.52835083 115.28486633]
[124.24391174 128.14837646]
[131.95947266 141.01190186]
[139.09811401 146.80223083]
[139.69775391 154.21089172]
[147.15438843 167.22621155]
[160.72814941 175.35417175]
[160.34143066 190.24375916]
[167.79806519 203.25907898]
[168.02857971 188.26084900]
[171.65023804 173.70463562]
[178.47479248 160.34703064]
[188.14749146 148.88235474]
[200.16558838 139.90652466]
[213.90437317 133.88609314]
[228.64974976 131.13400269]
[243.63525391 131.79328918]
[258.08197021 135.82968140]
[271.23898315 143.03337097]
[282.42236328 153.02993774]
[291.05090332 165.29977417]
[296.67602539 179.20509338]
[299.00537109 194.02313232]
[297.91787720 208.98365784]
[293.47003174 223.30905151]
[285.89309692 236.25468445]
[275.58084106 247.14768982]
[263.06930542 255.42182922]
[249.00881958 260.64706421]
[234.13023376 262.55175781]
[219.20692444 261.03692627]
[205.01457214 256.18130493]
[192.29087830 248.23727417]
[181.69718933 237.61776733]
[173.78268433 224.87159729]
[174.08282471 239.86860657]
[174.38294983 254.86560059]
[174.68307495 269.86257935]
[174.98321533 284.85958862]
[175.28334045 299.85659790]
[175.58348083 314.85357666]
[175.88360596 329.85058594]
[176.18374634 344.84756470]
[178.75947571 364.05734253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 121]
[11 120]
[13 118]
[14 117]
[15 115]
[16 114]
[17 113]
[18 112]
[19 90]
[20 72]
[21 71]
[22 70]
[23 69]
[24 68]
[26 66]
[27 65]
[28 64]
[30 63]
[31 62]
[32 58]
[33 57]
[34 56]
[35 55]
[40 49]
[41 48]
[42 47]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
