%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUxxxxxxxxxxAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[22.86072159 284.65621948]
[10.64265251 279.06326294]
[-1.17253828 272.66299438]
[-9.23559380 285.31158447]
[-17.29864883 297.96020508]
[-25.36170387 310.60879517]
[-26.25540543 326.40475464]
[-39.62118530 332.97781372]
[-47.68424225 345.62640381]
[-55.74729538 358.27502441]
[-63.81035233 370.92361450]
[-61.76023865 386.83514404]
[-73.02519226 398.25793457]
[-88.96369934 396.42941284]
[-97.34910583 382.75225830]
[-91.74884796 367.71841431]
[-76.45895386 362.86056519]
[-68.39589691 350.21194458]
[-60.33284378 337.56335449]
[-52.26979065 324.91476440]
[-51.95281219 310.02352905]
[-38.01030731 302.54574585]
[-29.94725037 289.89715576]
[-21.88419533 277.24853516]
[-13.82114029 264.59994507]
[-27.41415977 254.31793213]
[-40.08298492 242.91658020]
[-51.73572159 230.47859192]
[-62.28784561 217.09417725]
[-71.66281891 202.86042786]
[-79.79264069 187.88058472]
[-86.61834717 172.26329041]
[-92.09042358 156.12184143]
[-96.16916656 139.57331848]
[-98.82501221 122.73775482]
[-100.03868103 105.73725891]
[-99.80137634 88.69514465]
[-98.11482239 71.73503876]
[-94.99124146 54.97994614]
[-90.45330811 38.55140305]
[-84.53391266 22.56857872]
[-77.27601624 7.14740086]
[-68.73224640 -7.60027361]
[-58.96458817 -21.56747246]
[-48.04388428 -34.65288544]
[-36.04934692 -46.76159668]
[-23.06797791 -57.80577850]
[-9.19394016 -67.70532227]
[5.47213316 -76.38842010]
[20.82386208 -83.79208374]
[36.74989319 -89.86261749]
[53.13470459 -94.55599213]
[69.85945129 -97.83816528]
[86.80282593 -99.68531799]
[103.84192657 -100.08406067]
[120.85315704 -99.03149414]
[122.97419739 -113.88078308]
[125.09523773 -128.73005676]
[117.82852936 -145.62014771]
[129.12712097 -159.01528931]
[130.94677734 -173.90451050]
[132.76643372 -188.79373169]
[134.58609009 -203.68295288]
[136.40574646 -218.57215881]
[138.22540283 -233.46138000]
[123.92886353 -238.16194153]
[110.82421875 -245.56156921]
[99.41516113 -255.37582397]
[90.14023590 -267.22747803]
[83.35594177 -280.66101074]
[79.32305145 -295.16006470]
[78.19657898 -310.16729736]
[80.01982117 -325.10589600]
[84.72269440 -339.40167236]
[92.12443542 -352.50512695]
[101.94054413 -363.91259766]
[113.79370880 -373.18560791]
[127.22833252 -379.96771240]
[141.72801208 -383.99826050]
[156.73544312 -385.12231445]
[171.67375183 -383.29666138]
[185.96876526 -378.59146118]
[199.07102966 -371.18759155]
[210.47689819 -361.36965942]
[219.74798584 -349.51498413]
[226.52793884 -336.07925415]
[230.55613708 -321.57891846]
[231.67774963 -306.57131958]
[229.84967041 -291.63330078]
[225.14216614 -277.33905029]
[217.73619080 -264.23800659]
[207.91638184 -252.83370972]
[196.06021118 -243.56452942]
[182.62339783 -236.78675842]
[168.12240601 -232.76091003]
[153.11462402 -231.64172363]
[151.29496765 -216.75250244]
[149.47531128 -201.86329651]
[147.65565491 -186.97407532]
[145.83599854 -172.08485413]
[144.01632690 -157.19563293]
[151.23318481 -147.44189453]
[149.79986572 -134.98916626]
[139.94451904 -126.60901642]
[137.82348633 -111.75973511]
[135.70243835 -96.91045380]
[148.83627319 -94.07063293]
[161.74993896 -90.35581970]
[174.38517761 -85.78276825]
[186.68505859 -80.37209320]
[198.59410095 -74.14819336]
[210.05863953 -67.13912964]
[221.02694702 -59.37649918]
[231.44960022 -50.89530563]
[241.27960205 -41.73378754]
[250.47262573 -31.93324280]
[258.98721313 -21.53786469]
[266.78503418 -10.59452152]
[273.83084106 0.84744865]
[280.09292603 12.73645878]
[285.54306030 25.01890564]
[290.15664673 37.63941193]
[293.91287231 50.54108047]
[296.79486084 63.66573715]
[298.78955078 76.95420837]
[299.88796997 90.34658813]
[300.08520508 103.78248596]
[299.38031006 117.20133972]
[297.77648926 130.54263306]
[295.28097534 143.74621582]
[291.90502930 156.75257874]
[287.66384888 169.50305176]
[282.57656860 181.94017029]
[276.66610718 194.00785828]
[269.95913696 205.65168762]
[262.48590088 216.81918335]
[254.28007507 227.45999146]
[245.37866211 237.52613831]
[235.82179260 246.97221375]
[225.65255737 255.75566101]
[214.91679382 263.83688354]
[203.66291809 271.17941284]
[191.94168091 277.75015259]
[179.80590820 283.51950073]
[167.31031799 288.46142578]
[154.51126099 292.55364990]
[141.46643066 295.77774048]
[128.23463440 298.11914062]
[114.87555695 299.56729126]
[101.44940186 300.11569214]
[88.01671600 299.76184082]
[74.63805389 298.50732422]
[61.37373734 296.35784912]
[48.28357315 293.32305908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
[56 106]
[57 105]
[58 104]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
