%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACxxxxxxxxxxGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[82.33549500 483.09600830]
[84.92649841 463.88827515]
[85.23855591 448.89151001]
[85.55061340 433.89477539]
[85.86266327 418.89801025]
[86.17472076 403.90124512]
[86.48677826 388.90451050]
[86.79883575 373.90774536]
[87.11089325 358.91101074]
[87.42295074 343.91424561]
[87.73500061 328.91748047]
[73.35308838 324.78106689]
[60.52214432 317.05685425]
[50.11990738 306.26620483]
[42.85979080 293.14053345]
[39.24194717 278.57168579]
[39.51882172 263.55126953]
[43.67754745 249.10334778]
[51.44040298 236.21440125]
[62.28337479 225.76615906]
[75.47149658 218.47514343]
[90.10868073 214.84362793]
[90.42073822 199.84686279]
[90.73279572 184.85011292]
[91.04485321 169.85336304]
[91.35690308 154.85661316]
[91.66896057 139.85984802]
[76.37967682 133.17068481]
[65.05757141 120.91030121]
[59.60425949 105.13790131]
[60.93565750 88.50256348]
[68.82814789 73.79828644]
[59.31978989 62.19694519]
[49.81143188 50.59560394]
[40.30307388 38.99426270]
[29.42424774 28.66705894]
[17.34425926 19.77470970]
[5.26427174 10.88235950]
[-6.81571627 1.99000955]
[-18.89570427 -6.90233994]
[-30.97569275 -15.79469013]
[-43.05568314 -24.68704033]
[-58.75625992 -26.63700294]
[-64.41909790 -40.41312790]
[-76.85662842 -31.77678299]
[-91.42516327 -27.64924049]
[-106.54440308 -28.47822380]
[-120.57434082 -34.17381287]
[-131.99310303 -44.11819077]
[-139.56205750 -57.23266983]
[-142.46020508 -72.09468079]
[-140.37315369 -87.09211731]
[-133.52731323 -100.59815979]
[-122.66525269 -111.14777374]
[-108.96521759 -117.59661865]
[-93.91326904 -119.24517059]
[-79.14215088 -115.91461182]
[-66.25410461 -107.96620941]
[-56.64714050 -96.26214600]
[-51.36334991 -82.07199860]
[-50.97587585 -66.93500519]
[-55.52674484 -52.49311447]
[-40.69020844 -51.17919159]
[-34.16333008 -36.76702881]
[-22.08334351 -27.87467766]
[-10.00335503 -18.98232841]
[2.07663321 -10.08997917]
[14.15662193 -1.19762909]
[26.23661041 7.69472075]
[38.31659698 16.58707047]
[33.67708588 2.32260633]
[35.56685257 -12.55787659]
[43.62465286 -25.20982742]
[56.31015778 -33.21470261]
[71.19840240 -35.04228592]
[85.44335938 -30.34322357]
[96.32196045 -20.01578522]
[101.75466156 -6.03415966]
[100.70293427 8.92892361]
[93.36783600 22.01312637]
[81.15153503 30.71726990]
[66.38931274 33.37747574]
[51.90441513 29.48590469]
[61.41277313 41.08724594]
[70.92113495 52.68858719]
[80.42948914 64.28993225]
[99.40792084 59.28313065]
[118.52391052 63.73598480]
[133.33628845 76.61397552]
[146.99252319 70.40856934]
[160.64877319 64.20316315]
[165.92663574 52.38800049]
[177.48057556 47.51710892]
[188.86991882 51.71114731]
[202.65229797 45.79118729]
[216.43469238 39.87122345]
[216.20204163 24.67206764]
[221.80821228 10.54269218]
[232.39831543 -0.36227635]
[246.35740662 -6.37990952]
[261.55685425 -6.59256172]
[275.67883301 -0.96780527]
[286.56988525 9.63662529]
[292.56915283 23.60363197]
[292.76181030 38.80334473]
[287.11846924 52.91792297]
[276.49972534 63.79499054]
[262.52484131 69.77587891]
[247.32487488 69.94853973]
[233.21774292 64.28665161]
[222.35464478 53.65360260]
[208.57226562 59.57356644]
[194.78988647 65.49353027]
[185.10218811 80.09313965]
[166.85417175 77.85939789]
[153.19793701 84.06481171]
[139.54168701 90.27021790]
[140.69578552 98.56217957]
[140.12976074 106.91490936]
[137.86756897 114.97537231]
[134.00479126 122.40286255]
[128.70472717 128.88343811]
[122.19138336 134.14317322]
[114.74005890 137.95977783]
[106.66571808 140.17190552]
[106.35366058 155.16865540]
[106.04160309 170.16542053]
[105.72954559 185.16217041]
[105.41748810 200.15892029]
[105.10543823 215.15567017]
[119.57888794 219.39294434]
[132.45230103 227.22624207]
[142.85125732 238.11650085]
[150.07122803 251.31721497]
[153.62533569 265.92562866]
[153.27714539 280.94454956]
[149.05639648 295.35031128]
[141.25654602 308.16259766]
[130.41444397 318.51116943]
[117.27329254 325.69497681]
[102.73175812 329.22955322]
[102.41970062 344.22628784]
[102.10764313 359.22305298]
[101.79558563 374.21981812]
[101.48353577 389.21655273]
[101.17147827 404.21331787]
[100.85942078 419.21008301]
[100.54736328 434.20681763]
[100.23530579 449.20358276]
[99.92324829 464.20031738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[32 86]
[33 85]
[34 84]
[35 83]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[44 62]
[89 117]
[90 116]
[91 115]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
