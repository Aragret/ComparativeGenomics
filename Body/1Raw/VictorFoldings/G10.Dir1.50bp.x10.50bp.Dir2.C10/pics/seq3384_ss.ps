%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCxxxxxxxxxxGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.73114014 296.02410889]
[114.73114014 281.02410889]
[114.73114014 266.02410889]
[114.73114014 251.02410889]
[114.73114014 236.02410889]
[114.73114014 221.02410889]
[114.73114014 206.02410889]
[114.73114014 191.02410889]
[114.73114014 176.02410889]
[114.73114014 161.02410889]
[91.79939270 161.03637695]
[70.83552551 152.88389587]
[54.58370209 137.97445679]
[45.04634476 118.57587433]
[43.23994446 97.47515106]
[28.47389030 94.83628845]
[13.68118382 92.35116577]
[-1.13657475 90.02006531]
[-16.01985550 88.15245056]
[-30.95416260 86.75014496]
[-45.88846970 85.34783936]
[-60.82277679 83.94554138]
[-51.56243515 95.74579620]
[-51.87863541 110.74246216]
[-61.62813568 122.14189911]
[-76.39431763 124.78005981]
[-89.48796082 117.46181488]
[-94.97750854 103.50241852]
[-90.37614441 89.22560120]
[-77.76794434 81.09881592]
[-92.34064484 77.54405212]
[-106.91334534 73.98928833]
[-121.48605347 70.43453217]
[-136.05876160 66.87976837]
[-150.63145447 63.32500458]
[-165.20416260 59.77024460]
[-179.84765625 56.51941681]
[-194.55561829 53.57393646]
[-209.26358032 50.62845230]
[-223.97154236 47.68297195]
[-239.32551575 53.44384384]
[-251.81796265 42.81978607]
[-248.59774780 26.73991585]
[-232.97752380 21.74582863]
[-221.02606201 32.97500992]
[-206.31809998 35.92049026]
[-191.61013794 38.86597443]
[-176.90217590 41.81145859]
[-172.45365906 39.91775131]
[-166.76397705 40.84454727]
[-161.64939880 45.19754028]
[-147.07669067 48.75230408]
[-132.50399780 52.30706406]
[-117.93128967 55.86182785]
[-103.35858917 59.41658783]
[-88.78588104 62.97135162]
[-74.21318054 66.52611542]
[-59.42047501 69.01123047]
[-44.48616791 70.41353607]
[-29.55185890 71.81584167]
[-14.61755085 73.21813965]
[-11.64844227 71.20521545]
[-7.53812265 70.56728363]
[-2.96101618 71.83317566]
[1.19452918 75.20230865]
[16.01228714 77.53340912]
[23.15481186 75.45254517]
[31.11275482 80.07022858]
[45.87881088 82.70909119]
[48.43023682 76.15386200]
[51.77214050 69.96415710]
[55.85329056 64.23484039]
[60.61113358 59.05374527]
[65.97274017 54.50028610]
[71.85592651 50.64425659]
[78.17050934 47.54476166]
[84.81970215 45.24931717]
[91.70157623 43.79310608]
[98.71066284 43.19844818]
[105.73950195 43.47446060]
[112.68036652 44.61690903]
[119.42687225 46.60828400]
[125.87558746 49.41806030]
[131.92767334 53.00317001]
[137.49037170 57.30866241]
[148.78938293 47.44293594]
[160.08837891 37.57721329]
[171.38739014 27.71149063]
[182.68638611 17.84576797]
[193.67205811 7.63228846]
[204.33367920 -2.91900158]
[214.99531555 -13.47029209]
[218.79779053 -29.42250824]
[234.58917236 -33.84562683]
[246.12464905 -22.18951988]
[241.53750610 -6.44499445]
[225.54660034 -2.80866575]
[214.88497925 7.74262476]
[204.22334290 18.29391479]
[203.86096191 21.86268997]
[201.71168518 25.42391586]
[197.80297852 28.12100410]
[192.55210876 29.14477348]
[181.25311279 39.01049805]
[169.95410156 48.87622070]
[158.65510559 58.74194336]
[147.35609436 68.60766602]
[153.92930603 78.63187408]
[158.35604858 90.03653717]
[160.34664917 102.35697174]
[159.71302795 115.06798553]
[156.38121033 127.60628510]
[171.02471924 130.85711670]
[181.34501648 119.48227692]
[195.97497559 114.80681610]
[210.97920227 118.08840942]
[222.32164001 128.44432068]
[226.95121765 143.08885193]
[223.62260437 158.08271790]
[213.23120117 169.39263916]
[198.57221985 173.97628784]
[183.58885193 170.60069275]
[172.31156921 160.17388916]
[167.77389526 145.50061035]
[153.13038635 142.24978638]
[147.28057861 146.94335938]
[158.57293701 156.81669617]
[169.86528015 166.69003296]
[181.15763855 176.56336975]
[195.46452332 181.07035828]
[204.52316284 193.02615356]
[204.99070740 208.01887512]
[196.69464111 220.51588440]
[182.69638062 225.90556335]
[168.16154480 222.19900513]
[158.45378113 210.76399231]
[157.15510559 195.82174683]
[149.96371460 182.65800476]
[142.77233887 169.49426270]
[135.58094788 156.33053589]
[129.73114014 161.02410889]
[129.73114014 176.02410889]
[129.73114014 191.02410889]
[129.73114014 206.02410889]
[129.73114014 221.02410889]
[129.73114014 236.02410889]
[129.73114014 251.02410889]
[129.73114014 266.02410889]
[129.73114014 281.02410889]
[129.73114014 296.02410889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 69]
[16 68]
[17 66]
[18 65]
[19 61]
[20 60]
[21 59]
[22 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 48]
[38 47]
[39 46]
[40 45]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 99]
[91 98]
[92 97]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
