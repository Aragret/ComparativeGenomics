%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUxxxxxxxxxxUUCGAAUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.85057831 433.40512085]
[81.44158173 414.19741821]
[81.75363922 399.20065308]
[82.06568909 384.20388794]
[82.37774658 369.20715332]
[82.68980408 354.21038818]
[83.00186157 339.21362305]
[83.31391907 324.21688843]
[83.62597656 309.22012329]
[83.93802643 294.22338867]
[84.25008392 279.22662354]
[70.46926880 276.09701538]
[57.56987762 270.31274414]
[46.05791855 262.09854126]
[36.38541794 251.77441406]
[28.93267441 239.74328613]
[23.99328804 226.47523499]
[21.76261711 212.48919678]
[22.33003616 198.33258057]
[25.67536354 184.55986023]
[31.66956711 171.71090698]
[40.07975006 160.28981018]
[50.57818604 150.74502563]
[62.75510025 143.45190430]
[76.13465881 138.69778442]
[90.19355774 136.67079163]
[79.87875366 132.18771362]
[71.33033752 124.87897491]
[65.29872894 115.38619232]
[50.65523148 118.63702393]
[38.93996048 130.11241150]
[23.21923065 125.44435883]
[19.66517830 109.43496704]
[31.93391037 98.55331421]
[47.40440369 103.99352264]
[62.04790497 100.74269104]
[64.82669067 85.72585297]
[73.29865265 73.01943207]
[86.09251404 64.68010712]
[101.13745117 62.05768585]
[104.54042816 47.44879150]
[107.94340515 32.83990097]
[111.34638214 18.23100662]
[114.74935913 3.62211466]
[118.15233612 -10.98677826]
[104.78369141 -19.59844780]
[95.17897034 -32.23886490]
[90.48007202 -47.37497330]
[91.23529816 -63.17886353]
[97.33544159 -77.74852753]
[108.02912140 -89.33675385]
[122.01529694 -96.56065369]
[137.60156250 -98.56668854]
[140.69987488 -113.24321747]
[143.79820251 -127.91973877]
[146.89653015 -142.59626770]
[149.99484253 -157.27279663]
[152.94032288 -171.98075867]
[155.73265076 -186.71855164]
[150.69956970 -201.71784973]
[160.67086792 -212.78231812]
[163.46319580 -227.52012634]
[166.25552368 -242.25791931]
[156.20646667 -231.12164307]
[143.46902466 -223.19967651]
[129.03724670 -219.11024475]
[114.03736877 -219.17250061]
[99.64002228 -223.38157654]
[86.96877289 -231.40899658]
[77.01250458 -242.62829590]
[70.54821014 -256.16390991]
[68.08036804 -270.95950317]
[69.80156708 -285.86044312]
[75.57749176 -299.70379639]
[84.95737457 -311.40924072]
[97.20921326 -320.06329346]
[111.37685394 -324.99057007]
[126.35464478 -325.80651855]
[140.97370911 -322.44750977]
[154.09315491 -315.17562866]
[164.68913269 -304.55841064]
[171.93473816 -291.42443848]
[175.26449585 -276.79870605]
[174.41802979 -261.81991577]
[182.92910767 -274.17147827]
[191.44020081 -286.52304077]
[199.95129395 -298.87463379]
[208.46238708 -311.22619629]
[212.47080994 -327.69946289]
[229.40995789 -328.40795898]
[234.77996826 -312.32693481]
[220.81394958 -302.71511841]
[212.30287170 -290.36352539]
[203.79177856 -278.01196289]
[195.28068542 -265.66040039]
[186.76959229 -253.30882263]
[180.99331665 -239.46560669]
[178.20100403 -224.72779846]
[175.40867615 -209.98999023]
[180.64147949 -196.04484558]
[170.47045898 -183.92623901]
[167.67813110 -169.18843079]
[169.53511047 -161.98445129]
[164.67137146 -154.17446899]
[161.57304382 -139.49794006]
[158.47473145 -124.82141876]
[155.37640381 -110.14488983]
[152.27809143 -95.46836853]
[164.54127502 -88.33077240]
[174.00793457 -77.73246765]
[179.73869324 -64.70514679]
[181.15873718 -50.52246475]
[178.11540222 -36.57555389]
[170.89451599 -24.23655891]
[160.19351196 -14.72363663]
[147.05418396 -8.98070812]
[132.76123047 -7.58379984]
[129.35824585 7.02509260]
[125.95527649 21.63398552]
[122.55229950 36.24287796]
[119.14932251 50.85176849]
[115.74633789 65.46066284]
[128.70045471 75.15655518]
[136.43959045 89.36658478]
[137.55751038 105.50875854]
[131.85108948 120.64996338]
[120.35720825 132.03898621]
[105.16434479 137.60641479]
[120.46730804 142.00886536]
[134.41709900 149.67385864]
[146.32852173 160.22152710]
[155.61726379 173.13049316]
[161.82852173 187.76364136]
[164.65928650 203.39958191]
[163.97312927 219.26815796]
[159.80680847 234.58847046]
[152.36822510 248.60717773]
[142.02610779 260.63568115]
[129.29176331 270.08386230]
[114.79374695 276.48904419]
[99.24684143 279.53866577]
[98.93478394 294.53543091]
[98.62272644 309.53219604]
[98.31066895 324.52893066]
[97.99861145 339.52569580]
[97.68656158 354.52246094]
[97.37450409 369.51919556]
[97.06244659 384.51596069]
[96.75038910 399.51269531]
[96.43833160 414.50946045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[26 128]
[29 36]
[30 35]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[58 102]
[59 101]
[61 99]
[62 98]
[63 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
