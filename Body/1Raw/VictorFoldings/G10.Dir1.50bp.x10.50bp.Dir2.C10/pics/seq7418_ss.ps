%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCxxxxxxxxxxCUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.01976013 317.64990234]
[121.01976013 302.64990234]
[121.01976013 287.64990234]
[121.01976013 272.64990234]
[121.01976013 257.64990234]
[121.01976013 242.64990234]
[121.01976013 227.64990234]
[121.01976013 212.64990234]
[121.01976013 197.64990234]
[121.01976013 182.64990234]
[118.26351929 167.90530396]
[112.84489441 153.91821289]
[107.42626953 139.93113708]
[102.00764465 125.94405365]
[93.13617706 125.10004425]
[85.06971741 121.31222534]
[73.28757477 130.59561157]
[61.50543976 139.87899780]
[49.72330475 149.16238403]
[46.41329956 164.86026001]
[32.01236725 171.93081665]
[17.56766701 164.95011902]
[14.15993786 149.27316284]
[24.40329742 136.92596436]
[40.43991852 137.38024902]
[52.22205353 128.09686279]
[64.00418854 118.81347656]
[75.78633118 109.53009033]
[75.45759583 108.64840698]
[75.16095734 107.75541687]
[60.16174698 107.90941620]
[45.16254044 108.06340790]
[30.16333008 108.21740723]
[15.16412067 108.37140656]
[0.16491093 108.52540588]
[-14.83429813 108.67939758]
[-30.61052132 114.88803101]
[-40.94381332 101.44706726]
[-30.88866806 87.79678345]
[-14.98829556 93.68019104]
[0.01091399 93.52619171]
[15.01012325 93.37219238]
[30.00933266 93.21820068]
[45.00854111 93.06420135]
[60.00775146 92.91020203]
[75.00695801 92.75621033]
[80.38331604 82.90292358]
[89.40974426 76.23088074]
[100.40670013 73.98155975]
[104.95398712 59.68743134]
[109.50127411 45.39330292]
[109.12456512 36.20342255]
[114.29145813 30.85408401]
[119.13127136 16.65633202]
[123.97108459 2.45857882]
[113.45979309 -16.65838814]
[126.32897186 -38.44612885]
[123.87604523 -53.24420929]
[121.42311096 -68.04228973]
[118.97018433 -82.84037018]
[116.51725769 -97.63844299]
[101.49944305 -99.09710693]
[87.37122345 -104.39387512]
[75.09587860 -113.16760254]
[65.51036072 -124.82008362]
[59.26823044 -138.55682373]
[56.79508209 -153.44125366]
[58.25954819 -168.45849609]
[63.56176758 -182.58467102]
[72.34023285 -194.85662842]
[83.99641418 -204.43765259]
[97.73557281 -210.67448425]
[112.62094116 -213.14187622]
[127.63762665 -211.67161560]
[141.76174927 -206.36393738]
[154.03031921 -197.58073425]
[163.60684204 -185.92085266]
[169.83836365 -172.17929077]
[172.30000305 -157.29296875]
[170.82394409 -142.27685547]
[165.51081848 -128.15476990]
[156.72288513 -115.88960266]
[145.05931091 -106.31758881]
[131.31533813 -100.09137726]
[133.76826477 -85.29329681]
[136.22119141 -70.49521637]
[138.67411804 -55.69713593]
[141.12704468 -40.89905548]
[154.87988281 -34.91075897]
[167.38391113 -43.19623566]
[179.88795471 -51.48170853]
[192.39198303 -59.76718521]
[188.82164001 -74.49906921]
[190.50828552 -89.56330109]
[197.24827576 -103.14079285]
[208.22770691 -113.59201050]
[222.12075806 -119.65490723]
[237.24980164 -120.59735870]
[251.78788757 -116.30557251]
[263.97952271 -107.29778290]
[272.35244751 -94.66174316]
[275.89566040 -79.92330170]
[274.18124390 -64.86220551]
[267.41625977 -51.29715729]
[256.41757202 -40.86619568]
[242.51336670 -34.82891083]
[227.38262939 -33.91433716]
[212.85246277 -38.23291397]
[200.67745972 -47.26314926]
[188.17343140 -38.97767258]
[175.66938782 -30.69219971]
[163.16535950 -22.40672493]
[157.14266968 0.26444823]
[138.16883850 7.29839516]
[133.32902527 21.49614716]
[128.48921204 35.69390106]
[123.79541016 49.94059372]
[119.24811554 64.23472595]
[114.70082855 78.52885437]
[126.00927734 99.19866180]
[115.99472809 120.52542877]
[121.41335297 134.51251221]
[126.83197784 148.49958801]
[132.25061035 162.48667908]
[134.95130920 147.73181152]
[142.00346375 134.49296570]
[152.74156189 124.01950836]
[166.15223694 117.29985046]
[180.96989441 114.96811676]
[195.79618835 117.24436188]
[209.23191833 123.91378021]
[220.00914001 134.34696960]
[227.11080933 147.55931091]
[229.86672974 162.30397034]
[228.01679993 177.18946838]
[221.73562622 190.81101990]
[211.61595154 201.88316345]
[198.61279297 209.36099243]
[183.95327759 212.53880310]
[169.02084351 211.11672974]
[155.22467041 205.22895813]
[143.86674500 195.43113708]
[136.01976013 182.64990234]
[136.01976013 197.64990234]
[136.01976013 212.64990234]
[136.01976013 227.64990234]
[136.01976013 242.64990234]
[136.01976013 257.64990234]
[136.01976013 272.64990234]
[136.01976013 287.64990234]
[136.01976013 302.64990234]
[136.01976013 317.64990234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 124]
[12 123]
[13 122]
[14 121]
[16 28]
[17 27]
[18 26]
[19 25]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[49 119]
[50 118]
[51 117]
[53 116]
[54 115]
[55 114]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[89 112]
[90 111]
[91 110]
[92 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
