%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUxxxxxxxxxxUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.19016266 280.52761841]
[104.19016266 265.52761841]
[104.19016266 250.52761841]
[104.19016266 235.52761841]
[104.19016266 220.52761841]
[104.19016266 205.52761841]
[104.19016266 190.52761841]
[104.19016266 175.52761841]
[104.19016266 160.52761841]
[104.19016266 145.52761841]
[86.79894257 142.30958557]
[72.45859528 132.92114258]
[63.16738129 119.17192078]
[60.02257919 103.43480682]
[63.10246658 88.24137115]
[71.51632690 75.87556458]
[62.25137711 64.07892609]
[52.98642731 52.28228760]
[35.38170242 55.74195480]
[18.38064575 50.26255798]
[6.21775246 37.28950500]
[1.88331151 20.12448692]
[6.38849735 3.08541226]
[-4.91050768 -6.78031111]
[-16.20951271 -16.64603424]
[-27.50851631 -26.51175690]
[-38.80752182 -36.37747955]
[-50.10652542 -46.24320221]
[-61.40553284 -56.10892487]
[-74.99648285 -62.45605469]
[-89.81423950 -64.78716278]
[-104.63199615 -67.11826324]
[-119.44975281 -69.44936371]
[-130.35725403 -62.48658752]
[-142.68527222 -64.77550507]
[-149.88874817 -74.54367828]
[-164.65480042 -77.18254089]
[-179.42085266 -79.82141113]
[-191.30636597 -69.65928650]
[-206.94366455 -69.56619263]
[-218.94931030 -79.58609009]
[-221.65460205 -94.98789215]
[-213.78218079 -108.49932861]
[-199.04916382 -113.74072266]
[-184.41203308 -108.23724365]
[-176.78199768 -94.58746338]
[-162.01593018 -91.94860077]
[-147.24987793 -89.30973816]
[-131.12802124 -96.17163849]
[-117.11865234 -84.26712799]
[-102.30089569 -81.93601990]
[-87.48313904 -79.60491943]
[-72.66537476 -77.27381134]
[-84.05210114 -87.03816223]
[-93.12257385 -98.98498535]
[-99.46847534 -112.57650757]
[-102.80416107 -127.20091248]
[-102.97947693 -142.19989014]
[-99.98653412 -156.89826965]
[-93.96004486 -170.63439941]
[-85.17129517 -182.78997803]
[-74.01591492 -192.81781006]
[-60.99604416 -200.26649475]
[-46.69777298 -204.80075073]
[-31.76472855 -206.21646118]
[-16.86911774 -204.44989014]
[-2.68145490 -199.58058167]
[10.15960789 -191.82769775]
[21.07603836 -181.54025269]
[29.57643509 -169.18132019]
[35.27816391 -155.30723572]
[37.92455673 -140.54252625]
[37.39649200 -125.55182648]
[33.71773911 -111.00992584]
[27.05389786 -97.57142639]
[17.70493317 -85.84126282]
[6.09168720 -76.34744263]
[-7.26307726 -69.51734924]
[-21.75820160 -65.65841675]
[-36.74119568 -64.94435883]
[-51.53980637 -67.40792847]
[-40.24080276 -57.54220963]
[-28.94179916 -47.67648315]
[-17.64279366 -37.81076050]
[-6.34378910 -27.94503784]
[4.95521545 -18.07931519]
[16.25422096 -8.21359253]
[28.57841492 -14.05507755]
[42.19847107 -14.76413822]
[55.06261444 -10.23396111]
[65.27609253 -21.21962547]
[68.41168976 -37.31621170]
[84.00541687 -42.39239883]
[96.01578522 -31.22624016]
[92.08756256 -15.30452442]
[76.26175690 -11.00614548]
[66.04827881 -0.02048082]
[71.12820435 10.20346355]
[72.68105316 21.57846642]
[70.50320435 32.91577530]
[64.78306580 43.01733780]
[74.04801941 54.81397629]
[83.31296539 66.61061859]
[99.72505951 60.99532700]
[117.67303467 63.35479355]
[133.33564758 73.85914612]
[143.08671570 90.87948608]
[144.32330322 111.21456146]
[159.14106750 113.54566193]
[173.95881653 115.87677002]
[188.77658081 118.20787048]
[197.85784912 105.88760376]
[211.62950134 99.20925903]
[226.92689514 99.70747375]
[240.23481750 107.26776123]
[248.49519348 120.15281677]
[249.80984497 135.40176392]
[243.87669373 149.51049805]
[232.05911255 159.23692322]
[217.07272339 162.34599304]
[202.36125183 158.12327576]
[191.30531311 147.53909302]
[186.44548035 133.02563477]
[171.62771606 130.69453430]
[156.80996704 128.36341858]
[141.99220276 126.03231812]
[136.29168701 130.90614319]
[148.17790222 140.05589294]
[160.06411743 149.20564270]
[171.95033264 158.35539246]
[185.51254272 164.76371765]
[192.24038696 178.17028809]
[189.27278137 192.87380981]
[177.87174988 202.62142944]
[162.88568115 203.26789856]
[150.68759155 194.53826904]
[146.46482849 180.14501953]
[139.27343750 166.98127747]
[132.08206177 153.81753540]
[124.89067078 140.65379333]
[119.19016266 145.52761841]
[119.19016266 160.52761841]
[119.19016266 175.52761841]
[119.19016266 190.52761841]
[119.19016266 205.52761841]
[119.19016266 220.52761841]
[119.19016266 235.52761841]
[119.19016266 250.52761841]
[119.19016266 265.52761841]
[119.19016266 280.52761841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 103]
[17 102]
[18 101]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 53]
[31 52]
[32 51]
[33 50]
[36 48]
[37 47]
[38 46]
[90 97]
[91 96]
[108 126]
[109 125]
[110 124]
[111 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
