%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCxxxxxxxxxxUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.51411438 98.02838898]
[153.80616760 100.97387695]
[139.09820557 103.91935730]
[124.39023590 106.86483765]
[109.68227386 109.81031799]
[97.33070374 118.32141113]
[89.34078979 131.01634216]
[81.35086823 143.71127319]
[73.36095428 156.40620422]
[72.55844116 172.20704651]
[59.23081589 178.85713196]
[59.14648819 195.25607300]
[44.77029037 203.14637756]
[30.89122200 194.41117859]
[31.78687859 178.03651428]
[46.53588867 170.86721802]
[46.76691055 155.97441101]
[60.66602325 148.41629028]
[68.65593719 135.72135925]
[76.64585876 123.02642059]
[84.63577271 110.33149719]
[81.89225769 103.35130310]
[68.79417419 110.66157532]
[60.15141678 122.92137909]
[45.21978760 124.35189056]
[34.40653229 113.95604706]
[35.24842834 98.97969055]
[47.15867996 89.86125183]
[61.83492279 92.95549011]
[76.40522766 89.39090729]
[73.66171265 82.41071320]
[59.16611481 78.55355835]
[44.67051697 74.69639587]
[31.11029625 82.36178589]
[16.46464729 78.24358368]
[9.24043846 65.26874542]
[-5.25515842 61.41158295]
[-19.75075531 57.55442429]
[-30.06225967 68.86510468]
[-44.45293045 74.07731628]
[-59.61589813 71.99333191]
[-72.06682587 63.09204102]
[-78.94457245 49.41888809]
[-78.66869354 34.11586380]
[-71.30258179 20.69949722]
[-58.53890991 12.25276566]
[-43.31068039 10.71666813]
[-29.11722755 16.44418907]
[-19.22010422 28.11918449]
[-15.89359570 43.05882645]
[-1.39799893 46.91598511]
[13.09759808 50.77314758]
[25.81484985 43.10456848]
[40.57039261 46.80978012]
[48.52767563 60.20079803]
[63.02327347 64.05796051]
[77.51886749 67.91511536]
[93.04621887 69.31299591]
[103.91319275 76.57156372]
[108.43685150 86.35697174]
[106.73679352 95.10235596]
[121.44475555 92.15687561]
[136.15270996 89.21139526]
[150.86067200 86.26591492]
[165.56863403 83.32042694]
[164.01449585 65.00154114]
[164.73593140 46.63224411]
[167.72157288 28.49410248]
[172.92536926 10.86511326]
[180.26725769 -5.98458052]
[189.63439941 -21.79681015]
[200.88294983 -36.32934570]
[213.84025574 -49.35960770]
[228.30744934 -60.68806839]
[244.06259155 -70.14131927]
[260.86401367 -77.57469940]
[278.45404053 -82.87455750]
[296.56295776 -85.95993805]
[314.91311646 -86.78384399]
[333.22320557 -85.33396149]
[351.21258545 -81.63280487]
[368.60556030 -75.73741913]
[385.13558960 -67.73845673]
[400.54943848 -57.75880814]
[410.05780029 -69.36014557]
[419.56616211 -80.96148682]
[422.32974243 -96.53945923]
[436.38165283 -101.47841644]
[445.89001465 -113.07975769]
[455.39837646 -124.68109894]
[460.76226807 -140.76416016]
[477.70166016 -140.06211853]
[481.71636963 -123.59037018]
[466.99972534 -115.17274475]
[457.49136353 -103.57140350]
[447.98300171 -91.97006226]
[445.89950562 -77.22189331]
[431.16751099 -71.45313263]
[421.65914917 -59.85179138]
[412.15078735 -48.25045013]
[419.20162964 -41.40944290]
[425.78411865 -34.11663818]
[431.86932373 -26.40403557]
[437.43054199 -18.30547905]
[442.44342041 -9.85650253]
[446.88589478 -1.09418249]
[450.73852539 7.94303226]
[453.98440552 17.21548462]
[456.60922241 26.68248940]
[458.60153198 36.30250549]
[459.95257568 46.03331375]
[460.65643311 55.83222198]
[460.70996094 65.65622711]
[460.11300659 75.46222687]
[458.86810303 85.20718384]
[456.98077393 94.84835052]
[454.45928955 104.34339905]
[468.58410645 109.39215851]
[482.70892334 114.44091797]
[498.73635864 110.96923828]
[509.55477905 123.29376221]
[504.03509521 138.73606873]
[487.85549927 141.41044617]
[477.66015625 128.56571960]
[463.53533936 123.51696014]
[449.41055298 118.46820831]
[443.32135010 131.35440063]
[436.02301025 143.59719849]
[427.58276367 155.08348083]
[418.07849121 165.70707703]
[407.59786987 175.36979675]
[396.23754883 183.98231506]
[384.10241699 191.46498108]
[371.30441284 197.74858093]
[357.96173096 202.77494812]
[344.19747925 206.49755859]
[330.13879395 208.88188171]
[315.91546631 209.90579224]
[301.65881348 209.55969238]
[287.50051880 207.84661865]
[273.57135010 204.78230286]
[259.99996948 200.39486694]
[246.91175842 194.72473145]
[234.42762756 187.82412720]
[222.66293335 179.75666809]
[211.72642517 170.59674072]
[201.71916199 160.42883301]
[192.73365784 149.34675598]
[184.85299683 137.45275879]
[178.15008545 124.85662842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[6 21]
[7 20]
[8 19]
[9 18]
[11 16]
[31 57]
[32 56]
[33 55]
[36 52]
[37 51]
[38 50]
[84 100]
[85 99]
[86 98]
[88 96]
[89 95]
[90 94]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
