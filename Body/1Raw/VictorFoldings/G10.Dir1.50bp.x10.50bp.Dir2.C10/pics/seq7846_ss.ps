%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGxxxxxxxxxxCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.00460815 266.31613159]
[80.00460815 251.31611633]
[80.00460815 236.31611633]
[80.00460815 221.31611633]
[80.00460815 206.31611633]
[80.00460815 191.31611633]
[80.00460815 176.31611633]
[80.00460815 161.31611633]
[80.00460815 146.31611633]
[80.00460815 131.31611633]
[72.28051758 118.45771790]
[59.03793335 111.41258240]
[44.81115723 106.65876770]
[29.99339867 104.32766724]
[15.17564011 101.99655914]
[0.35788181 99.66545868]
[-14.52539825 97.79784393]
[-29.45970535 96.39553833]
[-44.39401245 94.99323273]
[-59.32831955 93.59093475]
[-74.26262665 92.18862915]
[-86.36549377 101.99466705]
[-101.49102783 100.35978699]
[-110.76499939 88.76112366]
[-125.69931030 87.35881805]
[-132.69892883 97.80496216]
[-143.42709351 104.22422028]
[-155.79707336 105.44004822]
[-167.43333435 101.28111267]
[-176.12776184 92.60230255]
[-180.25860596 81.10984039]
[-195.12164307 79.08750153]
[-209.98469543 77.06517029]
[-224.84774780 75.04283142]
[-239.71078491 73.02050018]
[-254.42813110 78.82658386]
[-265.99603271 69.44400787]
[-280.85906982 67.42167664]
[-294.44808960 75.94920349]
[-309.53948975 70.50595856]
[-314.55648804 55.26754379]
[-305.65042114 41.92355728]
[-289.65332031 40.71036530]
[-278.83673096 52.55862808]
[-263.97369385 54.58095932]
[-250.31947327 48.63022232]
[-237.68846130 58.15745163]
[-222.82540894 60.17978668]
[-207.96235657 62.20212173]
[-193.09931946 64.22445679]
[-178.23626709 66.24678802]
[-166.68824768 52.95352554]
[-149.33015442 49.17229843]
[-133.01451111 56.58726883]
[-124.29700470 72.42451477]
[-109.36270142 73.82681274]
[-98.09168243 64.15728760]
[-82.92619324 65.36667633]
[-72.86032867 77.25431824]
[-57.92601776 78.65662384]
[-42.99171066 80.05892944]
[-28.05740166 81.46123505]
[-13.12309456 82.86353302]
[-10.15398598 80.85060883]
[-6.04366636 80.21267700]
[-1.46655977 81.47856903]
[2.68898582 84.84770203]
[17.50674438 87.17880249]
[32.32450104 89.50990295]
[47.14226151 91.84101105]
[35.89280319 81.91883087]
[28.63108253 68.79376221]
[26.20141792 53.99184418]
[28.88630295 39.23408508]
[36.37356567 26.23636055]
[47.79267120 16.50990105]
[61.81592941 11.18559361]
[76.81286621 10.88249302]
[91.03980255 15.63584042]
[102.84258270 24.89296722]
[110.84890747 37.57755280]
[114.12789154 52.21477509]
[112.29827881 67.10277557]
[105.57281494 80.51053619]
[94.73345184 90.87915039]
[81.04047394 97.00306702]
[66.08306885 98.16999817]
[79.32565308 105.21513367]
[76.80184937 94.99665070]
[79.54161072 83.72684479]
[87.85643768 74.16046143]
[100.62513733 69.04591370]
[115.40111542 70.39656830]
[128.92530823 63.90840149]
[142.44949341 57.42023849]
[155.97369385 50.93207169]
[155.94485474 35.66898346]
[162.54902649 21.90861320]
[174.47492981 12.38309956]
[189.35469055 8.98373604]
[204.23390198 12.38547039]
[216.15829468 21.91288567]
[222.76026917 35.67430496]
[222.72898865 50.93738937]
[216.07069397 64.67164612]
[204.10736084 74.15012360]
[189.21434021 77.49085999]
[174.34863281 74.03056335]
[162.46185303 64.45626068]
[148.93766785 70.94442749]
[135.41346741 77.43259430]
[121.88928223 83.92076111]
[123.13616180 98.86884308]
[137.54837036 103.02673340]
[152.95249939 99.41792297]
[163.03633118 110.37994385]
[177.44854736 114.53782654]
[192.13121033 108.07264709]
[206.27293396 115.64836121]
[209.02537537 131.45353699]
[198.27709961 143.36380005]
[182.27326965 142.24259949]
[173.29064941 128.95004272]
[158.87843323 124.79216003]
[144.50517273 128.69836426]
[133.39048767 117.43894958]
[118.97827148 113.28105927]
[112.98485565 117.78982544]
[123.63936615 128.34829712]
[134.29388428 138.90676880]
[144.94839478 149.46524048]
[157.81996155 157.16737366]
[161.51081848 171.70620728]
[153.87165833 184.61523438]
[139.35102844 188.37707520]
[126.40483856 180.80105591]
[122.57217407 166.29856873]
[115.38079071 153.13482666]
[108.18940735 139.97109985]
[100.99802399 126.80735779]
[95.00460815 131.31611633]
[95.00460815 146.31611633]
[95.00460815 161.31611633]
[95.00460815 176.31611633]
[95.00460815 191.31611633]
[95.00460815 206.31611633]
[95.00460815 221.31611633]
[95.00460815 236.31611633]
[95.00460815 251.31611633]
[95.00460815 266.31613159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 88]
[12 87]
[13 70]
[14 69]
[15 68]
[16 67]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[24 56]
[25 55]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[93 112]
[94 111]
[95 110]
[96 109]
[113 127]
[114 126]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
