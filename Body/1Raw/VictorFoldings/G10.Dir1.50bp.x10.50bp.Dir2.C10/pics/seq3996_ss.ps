%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCxxxxxxxxxxUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.67654419 309.18902588]
[132.37640381 294.19204712]
[132.07627869 279.19503784]
[131.77613831 264.19805908]
[131.47601318 249.20104980]
[131.17587280 234.20405579]
[130.87574768 219.20706177]
[130.57562256 204.21005249]
[130.27548218 189.21305847]
[126.85411835 174.60845947]
[120.46199799 161.03862000]
[114.06987762 147.46876526]
[99.64356995 149.50877380]
[85.24812317 147.26127625]
[72.13020325 140.92089844]
[61.42583847 131.03674316]
[54.06202698 118.46477509]
[39.45743179 121.88614655]
[27.78584290 132.56718445]
[13.62925529 127.93682098]
[-0.97534198 131.35818481]
[-15.54497719 134.92550659]
[-30.07819366 138.63839722]
[-44.61140823 142.35130310]
[-59.14462280 146.06420898]
[-73.67784119 149.77711487]
[-88.21105194 153.49000549]
[-102.74427032 157.20291138]
[-117.27748871 160.91581726]
[-123.88766479 175.08760071]
[-138.08256531 181.64799500]
[-153.15979004 177.49937439]
[-162.00035095 164.60058594]
[-160.42999268 149.04205322]
[-149.19018555 138.17002869]
[-133.58802795 137.11796570]
[-120.99038696 146.38259888]
[-106.45717621 142.66969299]
[-91.92395782 138.95680237]
[-77.39073944 135.24389648]
[-62.85752487 131.53099060]
[-48.32431030 127.81808472]
[-33.79109573 124.10518646]
[-19.25787926 120.39228058]
[-13.52353001 115.66310883]
[-4.39670849 116.75358582]
[10.20788860 113.33222198]
[20.83485794 102.89590454]
[36.03606415 107.28154755]
[50.64065933 103.86018372]
[52.32794571 86.63509369]
[59.84092712 71.04323578]
[72.26148224 58.99000168]
[88.07178497 51.94832993]
[105.33975220 50.77873993]
[109.19786835 36.28339767]
[108.38178253 27.12796211]
[113.28092194 21.53812218]
[117.42830658 7.12287855]
[121.57568359 -7.29236412]
[125.72306824 -21.70760727]
[129.87045288 -36.12284851]
[134.01783752 -50.53809357]
[120.27922058 -56.61791992]
[107.49647522 -64.51192474]
[95.90773773 -74.07303619]
[85.72889709 -85.12314606]
[77.14957428 -97.45639038]
[70.32959747 -110.84301758]
[65.39602661 -125.03363037]
[62.44076157 -139.76388550]
[61.51885986 -154.75933838]
[62.64749908 -169.74066162]
[65.80564880 -184.42874146]
[70.93447876 -198.54997253]
[77.93844604 -211.84124756]
[86.68705750 -224.05499268]
[97.01734161 -234.96365356]
[108.73685455 -244.36402893]
[121.62725830 -252.08096313]
[135.44841003 -257.97073364]
[149.94285583 -261.92358398]
[164.84054565 -263.86587524]
[179.86395264 -263.76147461]
[194.73321533 -261.61224365]
[209.17129517 -257.45831299]
[222.90925598 -251.37698364]
[235.69113159 -243.48159790]
[247.27883911 -233.91923523]
[257.45648193 -222.86801147]
[266.03448486 -210.53384399]
[272.85299683 -197.14648438]
[277.78503418 -182.95533752]
[280.73870850 -168.22476196]
[281.65899658 -153.22920227]
[280.52871704 -138.24800110]
[277.36898804 -123.56026459]
[272.23861694 -109.43959808]
[265.23321533 -96.14907074]
[256.48327637 -83.93627167]
[246.15182495 -73.02872467]
[234.43128967 -63.62963104]
[221.54005432 -55.91408157]
[207.71826172 -50.02581787]
[193.22338867 -46.07453537]
[178.32548523 -44.13384247]
[163.30209351 -44.23989105]
[148.43307495 -46.39070892]
[144.28569031 -31.97546768]
[140.13830566 -17.56022453]
[135.99092102 -3.14498210]
[131.84355164 11.27026081]
[127.69616699 25.68550301]
[123.69321442 40.14151764]
[119.83509064 54.63685989]
[131.10612488 61.48176193]
[140.17051697 71.05910492]
[146.38525391 82.68948364]
[149.30946350 95.54785919]
[148.73573303 108.72206116]
[144.70472717 121.27752686]
[137.50241089 132.32359314]
[127.63972473 141.07664490]
[134.03184509 154.64649963]
[140.42396545 168.21633911]
[141.84216309 153.28353882]
[147.16778564 139.26077271]
[156.01982117 127.15122223]
[167.76504517 117.82116699]
[181.56320190 111.93806458]
[196.42720032 109.92278290]
[211.29371643 111.91948700]
[225.09921265 117.78534698]
[236.85607910 127.10071564]
[245.72323608 139.19920349]
[251.06637573 153.21530151]
[252.50323486 168.14631653]
[249.93103027 182.92413330]
[243.53378296 196.49156189]
[233.76911926 207.87802124]
[221.33560181 216.26893616]
[207.12268066 221.06404114]
[192.14714050 221.92031860]
[177.48030090 218.77650452]
[164.17138672 211.85748291]
[153.17248535 201.65824890]
[145.27247620 188.91293335]
[145.57261658 203.90992737]
[145.87274170 218.90692139]
[146.17288208 233.90391541]
[146.47300720 248.90092468]
[146.77314758 263.89791870]
[147.07327271 278.89492798]
[147.37341309 293.89190674]
[147.67353821 308.88891602]
[150.24926758 328.09869385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 125]
[11 124]
[12 123]
[17 50]
[18 49]
[20 47]
[21 46]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[55 115]
[56 114]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
[63 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
