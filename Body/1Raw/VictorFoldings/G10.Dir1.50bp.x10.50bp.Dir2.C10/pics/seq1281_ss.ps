%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAAxxxxxxxxxxCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.62686157 289.57839966]
[101.62686157 274.57839966]
[101.62686157 259.57839966]
[101.62686157 244.57839966]
[101.62686157 229.57839966]
[101.62686157 214.57839966]
[101.62686157 199.57839966]
[101.62686157 184.57839966]
[101.62686157 169.57839966]
[101.62686157 154.57839966]
[84.54360199 149.74162292]
[70.70046997 139.98745728]
[61.35848236 126.85651398]
[47.83428955 133.34468079]
[34.31010056 139.83283997]
[25.21441650 152.77807617]
[10.39262199 151.30714417]
[-3.13156843 157.79530334]
[-16.65575790 164.28346252]
[-30.11172295 170.91197205]
[-43.49800873 177.68008423]
[-56.88429260 184.44819641]
[-70.27057648 191.21630859]
[-74.96250916 206.30807495]
[-88.99037933 213.58779907]
[-104.03169250 208.73657227]
[-111.16270447 194.63252258]
[-106.15272522 179.64334106]
[-91.97406769 172.66184998]
[-77.03869629 177.83003235]
[-63.65240860 171.06190491]
[-50.26612473 164.29379272]
[-36.87983704 157.52568054]
[-32.30007935 151.66296387]
[-23.14392281 150.75927734]
[-9.61973381 144.27111816]
[3.90445638 137.78294373]
[12.03280067 125.30178833]
[27.82193565 126.30865479]
[41.34612656 119.82048798]
[54.87031555 113.33232117]
[52.97500229 98.24249268]
[55.99138641 83.33623505]
[63.60440445 70.17048645]
[75.01889801 60.12038803]
[89.04262543 54.23565674]
[104.21083832 53.13094711]
[107.91699982 38.59601212]
[111.62316132 24.06107521]
[115.32932281 9.52614021]
[119.03548431 -5.00879622]
[115.17832184 -19.50439262]
[104.73851013 -30.27520180]
[94.29869843 -41.04600906]
[78.34458923 -42.73302460]
[69.83815002 -56.33522797]
[75.30478668 -71.41818237]
[90.55097198 -76.41152954]
[103.88112640 -67.48480225]
[105.06950378 -51.48582077]
[115.50932312 -40.71501541]
[125.94913483 -29.94420624]
[139.60537720 -36.14961243]
[138.35850525 -51.09769821]
[137.11161804 -66.04578400]
[122.47926331 -70.00429535]
[110.08501434 -78.73117828]
[101.42555237 -91.17261505]
[97.54653931 -105.82625580]
[98.91638947 -120.92259216]
[105.36968994 -134.63867188]
[116.12716675 -145.31820679]
[129.88981628 -151.67158508]
[144.99571228 -152.93162537]
[159.62074280 -148.94615173]
[171.99888611 -140.19645691]
[180.63540649 -127.73907471]
[184.48741150 -113.07830811]
[183.08973694 -97.98452759]
[176.61117554 -84.28036499]
[165.83403015 -73.62067413]
[152.05970764 -67.29266357]
[153.30657959 -52.34457397]
[154.55346680 -37.39648819]
[161.34893799 -34.22292328]
[174.93988037 -27.87579346]
[181.73536682 -24.70222855]
[193.99772644 -33.34134293]
[206.26010132 -41.98046112]
[218.52246094 -50.61957550]
[214.53294373 -65.24351501]
[215.78878784 -80.34975433]
[222.13835144 -94.11415863]
[232.81491089 -104.87460327]
[246.52919006 -111.33171082]
[261.62515259 -112.70574951]
[276.27984619 -108.83080292]
[288.72369385 -100.17478943]
[297.45401001 -87.78296661]
[301.41659546 -73.15170288]
[300.13290405 -58.04779816]
[293.75799561 -44.29512024]
[283.06161499 -33.55437088]
[269.33544922 -27.12255287]
[254.23699951 -25.77633286]
[239.58944702 -29.67827797]
[227.16157532 -38.35720825]
[214.89921570 -29.71809196]
[202.63684082 -21.07897568]
[190.37448120 -12.43985939]
[159.08978271 7.23588467]
[133.57041931 -1.30263507]
[129.86425781 13.23230076]
[126.15809631 27.76723671]
[122.45193481 42.30217361]
[118.74577332 56.83710861]
[132.65322876 64.04864502]
[143.80564880 75.73798370]
[150.76818848 90.85811615]
[152.50164795 107.90665436]
[148.50488281 125.07437897]
[162.02908325 131.56254578]
[178.92514038 132.96221924]
[182.25747681 149.58544922]
[167.20635986 157.38931274]
[155.54090881 145.08673096]
[142.01672363 138.59857178]
[135.66925049 142.59352112]
[144.42726135 154.77127075]
[153.18525696 166.94900513]
[161.94325256 179.12675476]
[175.37942505 185.79528809]
[179.27128601 200.28160095]
[170.98599243 212.78576660]
[156.12852478 214.84872437]
[144.74992371 205.07492065]
[144.54847717 190.07466125]
[137.35708618 176.91091919]
[130.16571045 163.74717712]
[122.97432709 150.58343506]
[116.62686157 154.57839966]
[116.62686157 169.57839966]
[116.62686157 184.57839966]
[116.62686157 199.57839966]
[116.62686157 214.57839966]
[116.62686157 229.57839966]
[116.62686157 244.57839966]
[116.62686157 259.57839966]
[116.62686157 274.57839966]
[116.62686157 289.57839966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[20 33]
[21 32]
[22 31]
[23 30]
[47 116]
[48 115]
[49 114]
[50 113]
[51 112]
[52 62]
[53 61]
[54 60]
[63 84]
[64 83]
[65 82]
[87 110]
[88 109]
[89 108]
[90 107]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
