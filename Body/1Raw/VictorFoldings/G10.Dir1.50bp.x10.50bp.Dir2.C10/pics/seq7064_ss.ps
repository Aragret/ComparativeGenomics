%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCxxxxxxxxxxUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.70303345 305.72735596]
[116.70303345 290.72735596]
[116.70303345 275.72735596]
[116.70303345 260.72735596]
[116.70303345 245.72737122]
[116.70303345 230.72737122]
[116.70303345 215.72737122]
[116.70303345 200.72737122]
[116.70303345 185.72737122]
[116.70303345 170.72737122]
[103.53444672 163.54486084]
[90.92331696 171.66639709]
[78.31219482 179.78794861]
[72.74615479 187.11399841]
[65.35314941 187.94409180]
[52.57579041 195.80151367]
[48.85519028 212.86300659]
[34.25061417 221.80674744]
[18.01398659 217.53710938]
[5.40285826 225.65864563]
[-7.20827007 233.78018188]
[-11.99527454 249.09240723]
[-27.00302696 254.76223755]
[-40.71886444 246.44024658]
[-42.62117386 230.51037598]
[-31.25065994 219.19265747]
[-15.32981205 221.16905212]
[-2.71868396 213.04751587]
[9.89244461 204.92597961]
[10.84233379 192.03820801]
[19.18159866 181.91244507]
[32.02440262 178.40669250]
[44.71836472 183.02415466]
[57.49571991 175.16673279]
[70.19065094 167.17681885]
[82.80178070 159.05526733]
[95.41290283 150.93373108]
[80.26509094 145.39758301]
[68.07003021 135.65631104]
[59.89023590 122.97736359]
[56.30181122 108.85694122]
[57.36182022 94.84680176]
[62.63381958 82.38469696]
[71.26563263 72.64685059]
[82.10816956 66.43755341]
[77.80059052 52.06937027]
[73.49300385 37.70118713]
[58.63257980 39.92572403]
[43.60682678 40.01267242]
[28.72165489 37.96026993]
[14.28010178 33.81029129]
[0.57618147 27.64723015]
[-12.11111259 19.59655571]
[-23.52348328 9.82217312]
[-33.42858887 -1.47692585]
[-41.62477493 -14.07070637]
[-47.94517517 -27.70277405]
[-52.26111984 -42.09560013]
[-54.48473358 -56.95616150]
[-54.57075500 -71.98191833]
[-52.51742935 -86.86696625]
[-48.36655807 -101.30825806]
[-42.20264816 -115.01179504]
[-34.15118790 -127.69859314]
[-24.37610054 -139.11036682]
[-13.07638836 -149.01477051]
[-0.48210061 -157.21017456]
[13.15035915 -163.52972412]
[27.54345131 -167.84478760]
[42.40414810 -170.06747437]
[57.42991257 -170.15257263]
[72.31483459 -168.09832764]
[86.75586700 -163.94656372]
[100.45903015 -157.78179932]
[113.14532471 -149.72955322]
[124.55648804 -139.95376587]
[134.46018982 -128.65344238]
[142.65481567 -116.05863953]
[148.97354126 -102.42578888]
[153.28768921 -88.03243256]
[155.50947571 -73.17159271]
[155.59362793 -58.14582825]
[153.53846741 -43.26103592]
[149.38580322 -28.82025337]
[143.22019958 -15.11747742]
[135.16717529 -2.43167806]
[125.39067078 8.97887707]
[114.08972931 18.88188553]
[101.49443054 27.07573318]
[87.86119080 33.39360428]
[92.16876984 47.76178741]
[96.47635651 62.12997055]
[133.11576843 70.14496613]
[150.15823364 109.97187042]
[163.25138855 102.65276337]
[176.34454346 95.33365631]
[189.43769836 88.01454926]
[202.53085327 80.69544220]
[208.26364136 65.71163177]
[223.59582520 60.98896027]
[236.76586914 70.15026093]
[237.67083740 86.16777039]
[225.61651611 96.75422668]
[209.84996033 93.78859711]
[196.75680542 101.10770416]
[183.66365051 108.42681122]
[170.57049561 115.74591827]
[157.47734070 123.06502533]
[159.34495544 137.94830322]
[173.84054565 141.80546570]
[188.33613586 145.66262817]
[202.83174133 149.51977539]
[198.03411865 135.30770874]
[205.97418213 122.58155060]
[220.84840393 120.64308167]
[231.78491211 130.90916443]
[230.79002380 145.87614441]
[218.59155273 154.60423279]
[232.60826111 159.94573975]
[246.62498474 165.28724670]
[263.57891846 165.27758789]
[268.28152466 181.56629944]
[253.93119812 190.59428406]
[241.28346252 179.30397034]
[227.26675415 173.96244812]
[213.25004578 168.62094116]
[198.97457886 164.01538086]
[184.47898865 160.15821838]
[169.98338318 156.30105591]
[155.48779297 152.44389343]
[149.54159546 157.01477051]
[160.41346741 167.34930420]
[171.28532410 177.68383789]
[183.45942688 186.44689941]
[183.69541931 201.44505310]
[171.80305481 210.58679199]
[157.36991882 206.50210571]
[152.03198242 192.48397827]
[144.84060669 179.32023621]
[137.64921570 166.15649414]
[131.70303345 170.72737122]
[131.70303345 185.72737122]
[131.70303345 200.72737122]
[131.70303345 215.72737122]
[131.70303345 230.72737122]
[131.70303345 245.72737122]
[131.70303345 260.72735596]
[131.70303345 275.72735596]
[131.70303345 290.72735596]
[131.70303345 305.72735596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 37]
[12 36]
[13 35]
[15 34]
[16 33]
[19 29]
[20 28]
[21 27]
[45 92]
[46 91]
[47 90]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[109 130]
[110 129]
[111 128]
[112 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
