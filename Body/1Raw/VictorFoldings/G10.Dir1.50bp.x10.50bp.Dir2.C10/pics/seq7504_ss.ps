%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAxxxxxxxxxxGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[184.92504883 394.01794434]
[184.62492371 379.02093506]
[184.32478333 364.02395630]
[184.02465820 349.02694702]
[183.72451782 334.02993774]
[183.42439270 319.03295898]
[183.12425232 304.03594971]
[182.82412720 289.03897095]
[182.52398682 274.04196167]
[178.66587830 259.54663086]
[171.47114563 246.38470459]
[164.27642822 233.22279358]
[149.95552063 229.29249573]
[142.47155762 216.04693604]
[146.69111633 201.05249023]
[139.49639893 187.89057922]
[132.30168152 174.72866821]
[125.10695648 161.56675720]
[117.91223907 148.40484619]
[110.71751404 135.24291992]
[103.52279663 122.08100891]
[83.60774994 118.85030365]
[72.40362549 99.47731781]
[81.04637909 76.46022797]
[69.67447662 66.67862701]
[58.83281708 77.06198120]
[47.03962326 86.35047150]
[34.40500641 94.45738220]
[21.04693604 101.30701447]
[7.09013414 106.83541107]
[-7.33508492 110.99095917]
[-22.09403229 113.73485565]
[-37.04890823 115.04148102]
[-52.06007385 114.89863586]
[-66.98737335 113.30764771]
[-81.69142914 110.28338623]
[-96.03495789 105.85407257]
[-109.88402557 100.06107330]
[-123.10932922 92.95848083]
[-135.58737183 84.61259460]
[-147.20167542 75.10135651]
[-157.84376526 64.51356506]
[-167.41430664 52.94808197]
[-175.82391357 40.51288986]
[-182.99407959 27.32409668]
[-188.85784912 13.50484657]
[-193.36047363 -0.81583136]
[-196.45993042 -15.50422573]
[-198.12725830 -30.42319107]
[-198.34689331 -45.43342972]
[-197.11680603 -60.39479446]
[-194.44844055 -75.16758728]
[-190.36674500 -89.61387634]
[-184.90982056 -103.59877777]
[-178.12861633 -116.99171448]
[-170.08645630 -129.66763306]
[-160.85841370 -141.50819397]
[-150.53067017 -152.40283203]
[-139.19963074 -162.24981689]
[-126.97111511 -170.95722961]
[-113.95928955 -178.44374084]
[-100.28564453 -184.63948059]
[-86.07785797 -189.48657227]
[-71.46858215 -192.93975830]
[-56.59422684 -194.96682739]
[-41.59366608 -195.54881287]
[-26.60696411 -194.68031311]
[-11.77405167 -192.36943054]
[2.76657891 -188.63772583]
[16.87916183 -183.52006531]
[30.43192673 -177.06420898]
[43.29833603 -169.33044434]
[55.35824966 -160.39099121]
[66.49907684 -150.32929993]
[76.61678314 -139.23931885]
[85.61690521 -127.22460938]
[93.41540527 -114.39733887]
[99.93947601 -100.87728119]
[105.12820435 -86.79067230]
[108.93313599 -72.26902771]
[111.31874847 -57.44794846]
[112.26276398 -42.46581650]
[111.75637054 -27.46251297]
[109.80429077 -12.57812786]
[106.42476654 2.04836488]
[101.64933014 16.28039932]
[95.52259064 29.98509026]
[88.10174561 43.03447723]
[79.45607758 55.30672073]
[90.82798004 65.08832550]
[82.68127441 52.49343872]
[85.08336639 37.68702316]
[96.79404449 28.31365967]
[111.76707458 29.21284103]
[122.27183533 39.92031479]
[122.88469696 54.90778732]
[113.28745270 66.43819427]
[125.74906921 58.08905411]
[138.21067810 49.73990631]
[150.67228699 41.39076233]
[155.18052673 25.99416161]
[170.08288574 20.05282402]
[183.94754028 28.12443542]
[186.13871765 44.01714706]
[174.97554016 55.53942871]
[159.02143860 53.85237503]
[146.55982971 62.20151901]
[134.09820557 70.55066681]
[121.63659668 78.89981079]
[126.28459167 99.41701508]
[116.68470764 114.88629150]
[123.87943268 128.04820251]
[131.07415771 141.21011353]
[138.26887512 154.37202454]
[145.46359253 167.53395081]
[152.65830994 180.69586182]
[159.85304260 193.85777283]
[174.75256348 198.40110779]
[181.86154175 211.85165405]
[177.43833923 226.02807617]
[184.63307190 239.18998718]
[191.82778931 252.35189819]
[192.33877563 237.36061096]
[196.35935974 222.90948486]
[203.66419983 209.80836487]
[213.84396362 198.79144287]
[226.32815552 190.47610474]
[240.41717529 185.32833862]
[255.32147217 183.63661194]
[270.20581055 185.49574280]
[284.23608398 190.80154419]
[296.62603760 199.25668335]
[306.68130493 210.38732910]
[313.83843994 223.56971741]
[317.69635010 238.06510925]
[318.03881836 253.06120300]
[314.84664917 267.71762085]
[308.29876709 281.21298218]
[298.76205444 292.79104614]
[286.77099609 301.80294800]
[272.99758911 307.74371338]
[258.21362305 310.28036499]
[243.24763489 309.27081299]
[228.93830872 304.77154541]
[216.08753967 297.03479004]
[205.41546631 286.49404907]
[197.52099609 273.74182129]
[197.82112122 288.73883057]
[198.12126160 303.73583984]
[198.42138672 318.73281860]
[198.72151184 333.72982788]
[199.02165222 348.72680664]
[199.32177734 363.72381592]
[199.62191772 378.72082520]
[199.92204285 393.71780396]
[202.49777222 412.92758179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 122]
[11 121]
[12 120]
[15 117]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[24 90]
[25 89]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
