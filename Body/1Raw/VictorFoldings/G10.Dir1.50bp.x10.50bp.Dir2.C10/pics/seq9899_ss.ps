%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUxxxxxxxxxxUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-8.54708385 215.87030029]
[-19.30776978 226.32054138]
[-30.06845474 236.77078247]
[-40.82913971 247.22103882]
[-45.33864594 262.38595581]
[-59.85937119 265.70227051]
[-70.62005615 276.15249634]
[-81.38074493 286.60275269]
[-92.14142609 297.05300903]
[-102.90211487 307.50323486]
[-113.66279602 317.95349121]
[-124.42348480 328.40374756]
[-118.19637299 342.22396851]
[-117.07469177 357.34075928]
[-121.19389343 371.92871094]
[-130.05656433 384.22622681]
[-142.59249878 392.74832153]
[-157.28791809 396.46594238]
[-172.36827087 394.93011475]
[-186.01254272 388.32635498]
[-196.57310486 377.45205688]
[-202.77474976 363.62039185]
[-203.86856079 348.50155640]
[-199.72248840 333.92123413]
[-190.83715820 321.64007568]
[-178.28555298 313.14108276]
[-163.58329773 309.45056152]
[-148.50581360 311.01416016]
[-134.87373352 317.64303589]
[-124.11304474 307.19281006]
[-113.35235596 296.74255371]
[-102.59167480 286.29229736]
[-91.83098602 275.84207153]
[-81.07030487 265.39181519]
[-70.30961609 254.94157410]
[-66.56978607 240.52412415]
[-51.27938461 236.46034241]
[-40.51869965 226.01010132]
[-29.75801659 215.55986023]
[-18.99732971 205.10960388]
[-32.05651093 188.14460754]
[-42.71456528 169.57691956]
[-50.77770233 149.74414062]
[-56.09931564 129.00688171]
[-58.58263779 107.74220276]
[-58.18252182 86.33674622]
[-54.90624237 65.17973328]
[-48.81336594 44.65583420]
[-40.01468277 25.13823891]
[-28.67017174 6.98182154]
[-40.39764404 -2.37052536]
[-52.12511826 -11.72287273]
[-63.85258865 -21.07522011]
[-78.77408600 -16.81744766]
[-93.33689117 -22.17508316]
[-101.94131470 -35.08800507]
[-101.27877808 -50.59092712]
[-91.60404205 -62.72266769]
[-76.63723755 -66.81831360]
[-62.13340378 -61.30302048]
[-53.66956711 -48.29751587]
[-54.50024033 -32.80269241]
[-42.77276993 -23.45034409]
[-31.04529762 -14.09799767]
[-19.31782532 -4.74565029]
[-13.34836674 -11.17797661]
[-7.03264046 -17.27066422]
[-0.38993946 -23.00510025]
[6.55944347 -28.36376953]
[13.79427814 -33.33029938]
[21.29246330 -37.88951492]
[29.03109169 -42.02749252]
[36.98652649 -45.73159027]
[45.13445663 -48.99049377]
[53.44999695 -51.79424286]
[61.90774536 -54.13427734]
[70.48186493 -56.00344467]
[79.14614868 -57.39603424]
[87.87414551 -58.30779648]
[96.63919067 -58.73594284]
[105.41449738 -58.67916489]
[114.17326355 -58.13764191]
[122.88873291 -57.11301804]
[131.53427124 -55.60843277]
[140.08349609 -53.62847519]
[148.51025391 -51.17919922]
[156.78881836 -48.26808548]
[164.89389038 -44.90402603]
[171.66461182 -58.28899765]
[178.43531799 -71.67397308]
[176.98934937 -88.00924683]
[190.56674194 -97.20635223]
[205.20021057 -89.80410004]
[205.83612061 -73.41728210]
[191.82028198 -64.90325928]
[185.04957581 -51.51828766]
[178.27886963 -38.13331604]
[204.47883606 -19.55153084]
[226.40270996 3.92321849]
[243.15322876 31.33016586]
[256.96905518 25.48866463]
[270.78488159 19.64716148]
[284.60067749 13.80565929]
[298.41650391 7.96415663]
[299.10931396 -7.28322887]
[306.35668945 -20.71597290]
[318.71960449 -29.66699219]
[333.74343872 -32.35905838]
[348.44519043 -28.25765610]
[359.90579224 -18.17712593]
[365.84976196 -4.11896133]
[365.09692383 11.12557793]
[357.79672241 24.52967644]
[345.39862061 33.43194199]
[330.36431885 36.06482315]
[315.67883301 31.90555954]
[304.25802612 21.77997589]
[290.44219971 27.62147713]
[276.62637329 33.46297836]
[262.81054688 39.30448151]
[248.99473572 45.14598465]
[252.25555420 54.98175430]
[254.86782837 65.00927734]
[256.82043457 75.18585205]
[258.10510254 85.46811676]
[258.71627808 95.81227875]
[258.65142822 106.17427826]
[257.91079712 116.50997925]
[256.49752808 126.77535248]
[254.41766357 136.92668152]
[251.68005371 146.92071533]
[248.29637146 156.71490479]
[244.28102112 166.26750183]
[239.65110779 175.53784180]
[234.42633057 184.48641968]
[228.62898254 193.07513428]
[222.28373718 201.26737976]
[215.41761780 209.02828979]
[208.05987549 216.32479858]
[200.24185181 223.12580872]
[191.99685669 229.40237427]
[183.35998535 235.12774658]
[174.36805725 240.27754211]
[165.05935669 244.82981873]
[155.47352600 248.76519775]
[145.65141296 252.06690979]
[135.63484192 254.72088623]
[125.46648407 256.71582031]
[115.18965149 258.04324341]
[104.84812164 258.69747925]
[94.48593903 258.67575073]
[84.14724731 257.97811890]
[73.87608337 256.60757446]
[63.71618652 254.56997681]
[53.71084213 251.87399292]
[43.90266800 248.53108215]
[34.33344269 244.55551147]
[25.04392052 239.96421814]
[16.07367706 234.77673340]
[7.46091700 229.01516724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 29]
[50 65]
[51 64]
[52 63]
[53 62]
[88 97]
[89 96]
[90 95]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
