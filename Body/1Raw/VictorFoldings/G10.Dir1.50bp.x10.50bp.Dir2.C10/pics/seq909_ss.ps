%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.35291290 254.27186584]
[110.35291290 239.27186584]
[110.35291290 224.27186584]
[110.35291290 209.27186584]
[110.35291290 194.27186584]
[110.35291290 179.27186584]
[110.35291290 164.27186584]
[110.35291290 149.27186584]
[110.35291290 134.27186584]
[110.35291290 119.27187347]
[96.63285828 113.20885468]
[85.54154205 123.30751038]
[74.45022583 133.40615845]
[79.27654266 147.85006714]
[77.80427551 163.00764465]
[70.28850555 176.25276184]
[58.03137589 185.29060364]
[43.15651321 188.55532837]
[28.24108124 185.48129272]
[15.86926270 176.60108948]
[8.18455315 163.45327759]
[6.51837397 148.31578064]
[11.15940189 133.81126404]
[21.30354881 122.45274353]
[35.19328308 116.20812225]
[50.42211914 116.15933990]
[64.35157776 122.31484222]
[75.44289398 112.21619415]
[86.53420258 102.11754608]
[93.85330963 89.02439117]
[96.64563751 74.28658295]
[99.43795776 59.54877472]
[102.23028564 44.81097031]
[105.02260590 30.07316399]
[90.50131226 26.29099655]
[76.26847076 21.53712463]
[62.38904190 15.83323765]
[48.92634201 9.20536327]
[35.94180679 1.68374276]
[23.49468040 -6.69730425]
[11.64175320 -15.89953613]
[0.43711123 -25.88096619]
[-10.06812191 -36.59605026]
[-19.82601357 -47.99589539]
[-28.79203796 -60.02849197]
[-36.92528915 -72.63893127]
[-44.18865204 -85.76967621]
[-50.54898834 -99.36081696]
[-55.97727203 -113.35033417]
[-60.44874191 -127.67440033]
[-63.94299316 -142.26765442]
[-66.44408417 -157.06352234]
[-67.94059753 -171.99447632]
[-68.42570496 -186.99240112]
[-67.89719391 -201.98884583]
[-66.35748291 -216.91540527]
[-63.81359100 -231.70397949]
[-60.27712631 -246.28706360]
[-55.76422501 -260.59811401]
[-50.29547882 -274.57186890]
[-43.89583969 -288.14456177]
[-36.59450912 -301.25424194]
[-28.42480278 -313.84109497]
[-19.42399597 -325.84768677]
[-9.63315868 -337.21923828]
[0.90303767 -347.90386963]
[12.13651657 -357.85284424]
[24.01602173 -367.02075195]
[36.48735046 -375.36572266]
[49.49359894 -382.84976196]
[62.97541809 -389.43862915]
[76.87129974 -395.10232544]
[91.11782837 -399.81500244]
[105.65001678 -403.55514526]
[120.40154266 -406.30566406]
[135.30509949 -408.05404663]
[150.29269409 -408.79229736]
[165.29592896 -408.51705933]
[180.24636841 -407.22955322]
[195.07575989 -404.93569946]
[209.71647644 -401.64596558]
[224.10169983 -397.37530518]
[238.16578674 -392.14324951]
[251.84457397 -385.97369385]
[265.07565308 -378.89471436]
[277.79864502 -370.93869019]
[289.95547485 -362.14187622]
[301.49072266 -352.54443359]
[312.35171509 -342.19012451]
[322.48892212 -331.12619019]
[331.85607910 -319.40316772]
[340.41043091 -307.07452393]
[348.11297607 -294.19647217]
[354.92852783 -280.82781982]
[360.82601929 -267.02954102]
[365.77856445 -252.86459351]
[369.76348877 -238.39762878]
[372.76269531 -223.69464111]
[374.76242065 -208.82272339]
[375.75360107 -193.84973145]
[375.73171997 -178.84397888]
[374.69680786 -163.87394714]
[372.65365601 -149.00793457]
[369.61154175 -134.31376648]
[365.58438110 -119.85849762]
[360.59051514 -105.70807648]
[354.65277100 -91.92707825]
[347.79818726 -78.57837677]
[340.05810547 -65.72287750]
[331.46777344 -53.41924667]
[322.06643677 -41.72361374]
[311.89697266 -30.68935013]
[301.00579834 -20.36680031]
[289.44259644 -10.80306530]
[277.26010132 -2.04178119]
[264.51394653 5.87707520]
[251.26225281 12.91737175]
[237.56550598 19.04698563]
[223.48620605 24.23794746]
[209.08857727 28.46657181]
[194.43832397 31.71356583]
[179.60227966 33.96411133]
[164.64816284 35.20794296]
[149.64418030 35.43938065]
[134.65881348 34.65737534]
[119.76041412 32.86548996]
[116.96809387 47.60329437]
[114.17576599 62.34110260]
[111.38344574 77.07890320]
[108.59111786 91.81671143]
[111.83975983 77.17272949]
[121.42648315 65.63605499]
[135.22828674 59.76150894]
[150.18873596 60.85001755]
[162.99482727 68.66053009]
[170.81062317 81.46338654]
[171.90530396 96.42339325]
[166.03646851 110.22761536]
[154.50375366 119.81909943]
[139.86111450 123.07379150]
[125.35291290 119.27187347]
[125.35291290 134.27186584]
[125.35291290 149.27186584]
[125.35291290 164.27186584]
[125.35291290 179.27186584]
[125.35291290 194.27186584]
[125.35291290 209.27186584]
[125.35291290 224.27186584]
[125.35291290 239.27186584]
[125.35291290 254.27186584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 29]
[12 28]
[13 27]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
