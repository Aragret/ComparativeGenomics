%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCxxxxxxxxxxCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 488.48022461]
[92.50000000 473.48022461]
[92.50000000 458.48022461]
[92.50000000 443.48022461]
[92.50000000 428.48022461]
[92.50000000 413.48022461]
[92.50000000 398.48022461]
[92.50000000 383.48022461]
[92.50000000 368.48022461]
[92.50000000 353.48022461]
[77.84561920 350.39074707]
[64.14855957 344.31939697]
[52.00850296 335.52932739]
[41.95753098 324.40280151]
[34.43677902 311.42453003]
[29.77709579 297.16061401]
[28.18446350 282.23373413]
[29.73092079 267.29611206]
[34.35128784 253.00096130]
[41.84592056 239.97386169]
[51.88933182 228.78543091]
[64.04432678 219.92637634]
[77.78102875 213.78587341]
[92.50000000 210.63456726]
[92.50000000 195.63456726]
[92.50000000 180.63456726]
[78.47840118 178.07051086]
[65.12355804 173.08773804]
[52.84923172 165.84063721]
[42.03568268 156.55371094]
[33.01793671 145.51469421]
[26.07536507 133.06558228]
[21.42306137 119.59205627]
[19.20515633 105.51155090]
[19.49036407 91.26029205]
[22.26984787 77.27980042]
[27.45749855 64.00320435]
[34.89259338 51.84182739]
[44.34478760 41.17244339]
[55.52124405 32.32560349]
[68.07569885 25.57538795]
[81.61920166 21.13092995]
[95.73216248 19.12992096]
[96.33230591 4.14193201]
[96.93244934 -10.84605694]
[97.53259277 -25.83404732]
[98.13273621 -40.82203674]
[90.95377350 -54.92072296]
[99.19409180 -67.32823944]
[99.79423523 -82.31623077]
[100.39437866 -97.30422211]
[100.99452209 -112.29220581]
[86.41342163 -116.02989197]
[72.93339539 -122.71507263]
[61.14258194 -132.05335999]
[51.55485916 -143.63465881]
[44.58743668 -156.95118713]
[40.54271317 -171.41975403]
[39.59514236 -186.40727234]
[41.78371429 -201.25848389]
[47.01036072 -215.32455444]
[55.04434586 -227.99153137]
[65.53244019 -238.70700073]
[78.01445770 -247.00431824]
[91.94347382 -252.52279663]
[106.70972443 -255.02349854]
[107.30986786 -270.01147461]
[107.91001129 -284.99948120]
[108.51015472 -299.98745728]
[109.11029816 -314.97546387]
[94.91499329 -320.20501709]
[83.03173828 -329.56683350]
[74.62473297 -342.14370728]
[70.51760864 -356.70346069]
[71.11274719 -371.81970215]
[76.35182953 -386.01150513]
[85.72159576 -397.88848877]
[98.30409241 -406.28707886]
[112.86660004 -410.38442993]
[127.98245239 -409.77917480]
[142.17073059 -404.53057861]
[154.04142761 -395.15286255]
[162.43157959 -382.56472778]
[166.51918030 -367.99948120]
[165.90379333 -352.88403320]
[160.64569092 -338.69927979]
[151.26000977 -326.83486938]
[138.66627502 -318.45315552]
[124.09828949 -314.37530518]
[123.49814606 -299.38732910]
[122.89800262 -284.39932251]
[122.29785919 -269.41134644]
[121.69771576 -254.42335510]
[136.21675110 -250.75001526]
[149.65992737 -244.13551331]
[161.43858337 -234.86676025]
[171.03633118 -223.34701538]
[178.03181458 -210.07824707]
[182.11706543 -195.63929749]
[183.11120605 -180.66065979]
[180.96833801 -165.79689026]
[175.77972412 -151.69802856]
[167.76988220 -138.98121643]
[157.28688049 -128.20358276]
[144.78717041 -119.83792877]
[130.81578064 -114.25194550]
[115.98251343 -111.69206238]
[115.38237000 -96.70407104]
[114.78222656 -81.71608734]
[114.18208313 -66.72809601]
[121.40397644 -53.70144653]
[113.12072754 -40.22189331]
[112.52058411 -25.23390198]
[111.92044067 -10.24591351]
[111.32029724 4.74207640]
[110.72015381 19.73006630]
[126.02501678 23.31308746]
[140.34939575 29.78525925]
[153.15364075 38.90274048]
[163.95532227 50.32203674]
[172.34753418 63.61293411]
[178.01406860 78.27469635]
[180.74145508 93.75495148]
[180.42694092 109.47048187]
[177.08238220 124.82922363]
[170.83377075 139.25253296]
[161.91651917 152.19700623]
[150.66659546 163.17498779]
[137.50782776 171.77288818]
[122.93596649 177.66676331]
[107.50000000 180.63456726]
[107.50000000 195.63456726]
[107.50000000 210.63456726]
[122.21897125 213.78587341]
[135.95567322 219.92637634]
[148.11067200 228.78543091]
[158.15408325 239.97386169]
[165.64871216 253.00096130]
[170.26907349 267.29611206]
[171.81553650 282.23373413]
[170.22290039 297.16061401]
[165.56321716 311.42453003]
[158.04246521 324.40280151]
[147.99150085 335.52932739]
[135.85144043 344.31939697]
[122.15438080 350.39074707]
[107.50000000 353.48022461]
[107.50000000 368.48022461]
[107.50000000 383.48022461]
[107.50000000 398.48022461]
[107.50000000 413.48022461]
[107.50000000 428.48022461]
[107.50000000 443.48022461]
[107.50000000 458.48022461]
[107.50000000 473.48022461]
[107.50000000 488.48022461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[24 133]
[25 132]
[26 131]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[49 110]
[50 109]
[51 108]
[52 107]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
