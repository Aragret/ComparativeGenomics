%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUxxxxxxxxxxAGAAAACUACGAUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[161.82748413 550.34558105]
[161.82748413 535.34558105]
[161.82748413 520.34558105]
[161.82748413 505.34561157]
[161.82748413 490.34561157]
[161.82748413 475.34561157]
[161.82748413 460.34561157]
[161.82748413 445.34561157]
[161.82748413 430.34561157]
[161.82748413 415.34561157]
[160.26991272 400.42669678]
[150.28172302 393.53152466]
[147.60925293 381.28094482]
[154.22828674 370.16149902]
[151.43597412 355.42367554]
[148.64364624 340.68588257]
[145.39282227 326.04238892]
[141.68666077 311.50744629]
[137.98049927 296.97250366]
[125.06379700 285.13363647]
[130.10626221 267.45446777]
[126.09852600 252.99977112]
[122.09078979 238.54507446]
[119.15251160 236.48741150]
[117.09271240 232.87368774]
[116.64570618 228.14584351]
[118.31418610 223.06295776]
[115.21586609 208.38642883]
[112.11754608 193.70989990]
[109.01921844 179.03338623]
[105.92089844 164.35685730]
[102.82257843 149.68032837]
[92.62325287 138.82569885]
[97.34320831 123.72494507]
[83.95320129 117.67574310]
[76.64158630 104.93112946]
[78.17792511 90.31864929]
[87.98027039 79.37337494]
[77.55932617 67.46897888]
[82.50089264 53.41799545]
[79.40257263 38.74146652]
[76.30425262 24.06494331]
[73.20593262 9.38841724]
[70.10761261 -5.28810835]
[67.00928497 -19.96463394]
[63.45452499 -34.53733826]
[59.44678497 -48.99202347]
[55.43904495 -63.44671249]
[44.29586029 -74.67791748]
[48.35137177 -89.00977325]
[44.34363174 -103.46446228]
[33.20044708 -114.69567108]
[37.25595856 -129.02752686]
[31.19294357 -142.74757385]
[23.20302773 -155.44250488]
[15.93526840 -161.08445740]
[15.18212891 -168.48570251]
[7.45804405 -181.34410095]
[-0.26604068 -194.20249939]
[-7.99012566 -207.06091309]
[-22.58679390 -214.53549194]
[-23.14160156 -230.92524719]
[-9.08381367 -239.36981201]
[5.12512589 -231.18212891]
[4.86827660 -214.78498840]
[12.59236145 -201.92658997]
[20.31644630 -189.06819153]
[28.04053116 -176.20977783]
[35.89795685 -163.43243408]
[43.88787460 -150.73750305]
[44.28497314 -165.73223877]
[50.29231262 -179.47676086]
[61.02780151 -189.95289612]
[74.91510010 -195.62236023]
[89.91506958 -195.65270996]
[103.82519531 -190.03945923]
[114.60298157 -179.60685730]
[120.66587830 -165.88674927]
[121.12364197 -150.89373779]
[115.90904999 -136.82931519]
[105.78779602 -125.75862122]
[92.24603271 -119.30722809]
[77.27214813 -118.42241669]
[63.06484222 -123.23410797]
[51.71064377 -133.03526306]
[62.56716919 -122.83795929]
[58.79832077 -107.47220612]
[62.80606079 -93.01751709]
[73.66258240 -82.82020569]
[69.89373016 -67.45445251]
[73.90147400 -52.99976730]
[77.90921021 -38.54507828]
[80.84748840 -36.48740768]
[82.90728760 -32.87369537]
[83.35429382 -28.14584351]
[81.68581390 -23.06295586]
[84.78413391 -8.38642979]
[87.88245392 6.29009533]
[90.98078156 20.96662140]
[94.07910156 35.64314651]
[97.17742157 50.31967163]
[107.37674713 61.17430496]
[102.65679169 76.27505493]
[116.04679871 82.32425690]
[123.35841370 95.06887054]
[121.82207489 109.68135071]
[112.01972961 120.62662506]
[122.44067383 132.53102112]
[117.49910736 146.58200073]
[120.59742737 161.25852966]
[123.69574738 175.93505859]
[126.79406738 190.61158752]
[129.89239502 205.28810120]
[132.99070740 219.96463013]
[136.54547119 234.53733826]
[140.55320740 248.99201965]
[144.56095886 263.44671631]
[155.41235352 270.49661255]
[158.42849731 282.66714478]
[152.51542664 293.26635742]
[156.22158813 307.80126953]
[159.92774963 322.33621216]
[163.67062378 326.15859985]
[165.35885620 330.59732056]
[165.10798645 334.74926758]
[163.38145447 337.89355469]
[166.17376709 352.63134766]
[168.96609497 367.36917114]
[181.30194092 381.00027466]
[174.94642639 397.32836914]
[181.67881775 383.92407227]
[194.13522339 375.56716919]
[209.09135437 374.42080688]
[222.67585754 380.78173828]
[231.37243652 393.00341797]
[232.92997742 407.92233276]
[226.94535828 421.67675781]
[214.96765137 430.70642090]
[200.09724426 432.67398071]
[186.18331909 427.07015991]
[176.82748413 415.34561157]
[176.82748413 430.34561157]
[176.82748413 445.34561157]
[176.82748413 460.34561157]
[176.82748413 475.34561157]
[176.82748413 490.34561157]
[176.82748413 505.34561157]
[176.82748413 520.34558105]
[176.82748413 535.34558105]
[176.82748413 550.34558105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[14 128]
[15 127]
[16 126]
[17 122]
[18 121]
[19 120]
[21 117]
[22 116]
[23 115]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[34 107]
[38 103]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 92]
[47 91]
[48 90]
[50 88]
[51 87]
[53 85]
[54 70]
[55 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
