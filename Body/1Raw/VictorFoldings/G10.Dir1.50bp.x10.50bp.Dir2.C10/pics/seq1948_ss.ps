%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGxxxxxxxxxxAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.10767365 405.71392822]
[102.10767365 390.71392822]
[102.10767365 375.71392822]
[102.10767365 360.71392822]
[102.10767365 345.71392822]
[102.10767365 330.71392822]
[102.10767365 315.71392822]
[102.10767365 300.71392822]
[102.10767365 285.71392822]
[102.10767365 270.71392822]
[85.49446106 265.82617188]
[71.15120697 256.09201050]
[60.45223236 242.43148804]
[54.42655945 226.14146423]
[53.65889740 208.77252197]
[58.23294067 191.98133850]
[67.72238922 177.37266541]
[81.23065186 166.34597778]
[97.47555542 159.96144104]
[96.22868347 145.01335144]
[89.21850586 143.86552429]
[82.47495270 141.63288879]
[76.16480255 138.37066650]
[70.44409943 134.15953064]
[65.45431519 129.10362244]
[61.31886292 123.32797241]
[58.13999557 116.97541809]
[43.49649429 120.22624207]
[28.85299301 123.47707367]
[14.20949173 126.72789764]
[2.49422216 138.20327759]
[-13.22650814 133.53523254]
[-16.78055954 117.52584076]
[-4.51182842 106.64418793]
[10.95866585 112.08439636]
[25.60216713 108.83357239]
[40.24567032 105.58274078]
[54.88917160 102.33191681]
[57.87723160 83.68750763]
[68.22579956 67.89353180]
[84.12657166 57.70982361]
[102.80105591 54.91586685]
[106.20403290 40.30697632]
[109.60700989 25.69808388]
[105.20223236 10.50240993]
[115.62516785 -0.13768879]
[119.02814484 -14.74658108]
[122.43112183 -29.35547447]
[116.65759277 -46.80958939]
[129.07063293 -59.17552948]
[132.16894531 -73.85205841]
[135.26727295 -88.52857971]
[137.90612793 -103.29463959]
[140.08297729 -118.13584137]
[142.25981140 -132.97705078]
[140.27752686 -137.94596863]
[140.42875671 -142.69248962]
[142.25914001 -146.42764282]
[145.06335449 -148.66458130]
[148.16168213 -163.34111023]
[134.21826172 -157.81109619]
[121.09650421 -165.07879639]
[118.38734436 -179.83212280]
[128.07096863 -191.28756714]
[143.06942749 -191.07215881]
[152.41990662 -179.34394836]
[157.02546692 -193.61941528]
[161.63102722 -207.89486694]
[166.23658752 -222.17033386]
[170.84216309 -236.44580078]
[157.95005798 -244.24903870]
[147.20545959 -254.81550598]
[139.18777466 -267.57534790]
[134.32940674 -281.84045410]
[132.89236450 -296.84149170]
[134.95411682 -311.76953125]
[140.40350342 -325.81945801]
[148.94664001 -338.23361206]
[160.12281799 -348.34252930]
[173.32928467 -355.60104370]
[187.85386658 -359.61767578]
[202.91325378 -360.17584229]
[217.69531250 -357.24542236]
[231.40287781 -350.98446655]
[243.29670715 -341.73062134]
[252.73538208 -329.98294067]
[259.20989990 -316.37496948]
[262.37106323 -301.64050293]
[262.04843140 -286.57424927]
[258.25939941 -271.98864746]
[251.20828247 -258.67028809]
[241.27536011 -247.33743286]
[228.99629211 -238.60122681]
[215.03326416 -232.93283081]
[200.13931274 -230.63790894]
[185.11761475 -231.84022522]
[180.51205444 -217.56477356]
[175.90649414 -203.28930664]
[171.30091858 -189.01385498]
[166.69535828 -174.73838806]
[162.83819580 -160.24279785]
[159.73988342 -145.56626892]
[157.10101318 -130.80021667]
[154.92417908 -115.95900726]
[152.74734497 -101.11779785]
[154.60317993 -98.04805756]
[155.02655029 -93.91012573]
[153.52441406 -89.40502167]
[149.94380188 -85.43025970]
[146.84547424 -70.75373077]
[143.74714661 -56.07720947]
[150.09600830 -45.73316193]
[147.58874512 -33.44769669]
[137.04000854 -25.95249557]
[133.63703918 -11.34360313]
[130.23405457 3.26528907]
[134.88224792 17.41603661]
[124.21590424 29.10106087]
[120.81292725 43.70995331]
[117.40995026 58.31884766]
[130.86372375 67.01734924]
[140.43511963 79.86479950]
[144.92010498 95.24508667]
[143.75451660 111.22349548]
[137.08499146 125.79008484]
[125.75047302 137.11250305]
[111.17676544 143.76647949]
[112.42364502 158.71456909]
[125.07625580 160.84162903]
[136.91503906 165.76429749]
[147.33137512 173.22521973]
[155.79077148 182.83671570]
[161.86019897 194.10084534]
[165.23036194 206.43525696]
[165.73136902 219.20323181]
[163.34132385 231.74664307]
[158.18725586 243.41979980]
[150.53840637 253.62271118]
[140.79209900 261.83190918]
[129.45314026 267.62738037]
[117.10767365 270.71392822]
[117.10767365 285.71392822]
[117.10767365 300.71392822]
[117.10767365 315.71392822]
[117.10767365 330.71392822]
[117.10767365 345.71392822]
[117.10767365 360.71392822]
[117.10767365 375.71392822]
[117.10767365 390.71392822]
[117.10767365 405.71392822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 128]
[20 127]
[27 38]
[28 37]
[29 36]
[30 35]
[42 120]
[43 119]
[44 118]
[46 116]
[47 115]
[48 114]
[50 111]
[51 110]
[52 109]
[53 105]
[54 104]
[55 103]
[59 102]
[60 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
