%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUxxxxxxxxxxGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.31712341 262.88015747]
[118.31712341 247.88015747]
[118.31712341 232.88015747]
[118.31712341 217.88015747]
[118.31712341 202.88015747]
[118.31712341 187.88015747]
[118.31712341 172.88015747]
[118.31712341 157.88015747]
[118.31712341 142.88015747]
[118.31712341 127.88016510]
[111.88792419 124.01811981]
[104.16364288 136.87640381]
[91.30547333 129.15191650]
[99.02951813 116.29403687]
[92.60031891 112.43199158]
[79.35773468 119.47712708]
[66.11515045 126.52226257]
[53.02199173 133.84136963]
[40.08393860 141.43127441]
[27.14588165 149.02117920]
[26.62145996 164.43963623]
[17.82566452 177.11392212]
[3.56520104 182.99972534]
[-11.60946941 180.21891785]
[-22.85616302 169.65882874]
[-26.58610344 154.68914795]
[-21.60907745 140.08665466]
[-9.51323605 130.51095581]
[5.84167957 129.01760864]
[19.55597305 136.08312988]
[32.49403000 128.49322510]
[45.43208694 120.90331268]
[47.49210739 116.52931976]
[52.35558701 113.43450165]
[59.07001495 113.27967834]
[72.31259918 106.23454285]
[85.55518341 99.18940735]
[93.93732452 86.74996948]
[95.49491119 71.83105469]
[97.05249023 56.91214371]
[98.61006927 41.99323273]
[82.38073730 30.62299538]
[74.86577606 12.40891361]
[78.31613922 -6.87583685]
[91.52774048 -21.18893814]
[86.62618256 -35.36549759]
[81.72463226 -49.54205704]
[76.82308197 -63.71861267]
[71.92153168 -77.89517212]
[57.09754944 -75.38532257]
[42.06263733 -75.34980011]
[27.22695923 -77.78958130]
[12.99524498 -82.63810730]
[-0.24425441 -89.76309967]
[-12.13035583 -98.97018433]
[-22.33879662 -110.00819397]
[-30.59108543 -122.57599640]
[-36.66209030 -136.33073425]
[-40.38619614 -150.89715576]
[-41.66179657 -165.87789917]
[-40.45410156 -180.86427307]
[-36.79605484 -195.44743347]
[-30.78744888 -209.22953796]
[-22.59220505 -221.83460999]
[-12.43389320 -232.91877747]
[-0.58964229 -242.17964172]
[12.61742973 -249.36456299]
[26.82702446 -254.27752686]
[41.65149307 -256.78451538]
[56.68640900 -256.81713867]
[71.52161407 -254.37451172]
[85.75239563 -249.52323914]
[98.99052429 -242.39570618]
[110.87484741 -233.18632507]
[121.08116913 -222.14634705]
[129.33103943 -209.57696533]
[135.39938354 -195.82106018]
[139.12068176 -181.25390625]
[140.39340210 -166.27291870]
[139.18281555 -151.28677368]
[135.52195740 -136.70433044]
[129.51069641 -122.92337799]
[121.31302643 -110.31988525]
[111.15258026 -99.23767853]
[99.30654907 -89.97910309]
[86.09809113 -82.79672241]
[90.99964142 -68.62016296]
[95.90119171 -54.44360733]
[100.80274200 -40.26704788]
[105.70429230 -26.09049034]
[112.90036011 -26.16653061]
[119.95684052 -24.75396919]
[126.56913757 -21.91378021]
[132.45184326 -17.76855659]
[137.35104370 -12.49722099]
[151.00729370 -18.70262718]
[160.37031555 -31.45583534]
[175.15830994 -29.67686653]
[177.28091431 -44.95750809]
[187.34524536 -56.64993668]
[202.13980103 -61.02313614]
[216.94367981 -56.68163681]
[227.03303528 -45.01079559]
[229.18836975 -29.73473358]
[222.72195435 -15.72798824]
[209.69717407 -7.46006203]
[194.27018738 -7.56921816]
[181.36370850 -16.02062607]
[172.97746277 -3.71126986]
[157.21269226 -5.04638672]
[143.55645752 1.15902042]
[143.74594116 15.55621243]
[138.04817200 28.86981583]
[127.38015747 38.78573227]
[113.52898407 43.55081177]
[111.97140503 58.46972656]
[110.41381836 73.38863373]
[108.85623932 88.30754852]
[117.37565613 75.96171570]
[122.82218170 61.98547363]
[131.46975708 49.72907639]
[142.81089783 39.91180801]
[156.18000793 33.10982132]
[170.79248047 29.72230339]
[185.79078674 29.94805908]
[200.29469299 33.77383423]
[213.45303345 40.97511292]
[224.49354553 51.12926865]
[232.76832581 63.64038467]
[237.79174805 77.77421570]
[239.26898193 92.70130157]
[237.11335754 107.54560089]
[231.45137024 121.43595123]
[222.61531067 133.55717468]
[211.12373352 143.19790649]
[197.65104675 149.79235840]
[182.98793030 152.95352173]
[167.99491882 152.49588013]
[153.55189514 148.44628906]
[140.50851440 141.04389954]
[133.31712341 127.88016510]
[133.31712341 142.88015747]
[133.31712341 157.88015747]
[133.31712341 172.88015747]
[133.31712341 187.88015747]
[133.31712341 202.88015747]
[133.31712341 217.88015747]
[133.31712341 232.88015747]
[133.31712341 247.88015747]
[133.31712341 262.88015747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 37]
[16 36]
[17 35]
[18 32]
[19 31]
[20 30]
[38 118]
[39 117]
[40 116]
[41 115]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[95 111]
[96 110]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
