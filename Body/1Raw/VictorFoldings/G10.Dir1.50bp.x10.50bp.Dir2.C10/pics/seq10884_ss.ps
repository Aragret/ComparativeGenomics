%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAxxxxxxxxxxAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 308.57186890]
[92.50000000 293.57186890]
[92.50000000 278.57186890]
[92.50000000 263.57186890]
[92.50000000 248.57186890]
[92.50000000 233.57186890]
[92.50000000 218.57186890]
[92.50000000 203.57186890]
[92.50000000 188.57186890]
[92.50000000 173.57186890]
[77.43660736 170.42700195]
[63.35014343 164.23284912]
[50.85052109 155.25756836]
[40.47894287 143.88980103]
[32.68446350 130.62170410]
[27.80456543 116.02777863]
[26.05053711 100.73989105]
[27.49832344 85.41997528]
[32.08523560 70.73133087]
[39.61267471 57.30994034]
[49.75472260 45.73691177]
[62.07225800 36.51333237]
[76.03195953 30.03855705]
[91.02941895 26.59292221]
[90.72928619 11.59592533]
[90.42915344 -3.40107155]
[90.12902069 -18.39806938]
[88.78015900 -33.33729935]
[86.38918304 -48.14551163]
[83.99820709 -62.95372772]
[81.60723114 -77.76194763]
[79.21626282 -92.57015991]
[76.82528687 -107.37837219]
[61.87277603 -106.09984589]
[46.86652756 -105.94229889]
[31.89047241 -106.90661621]
[17.02835464 -108.98741150]
[2.36329436 -112.17303467]
[-12.02269554 -116.44567871]
[-26.04916191 -121.78145599]
[-39.63766098 -128.15051270]
[-52.71220398 -135.51722717]
[-65.19966888 -143.84042358]
[-77.03021240 -153.07353210]
[-88.13768768 -163.16493225]
[-98.45996094 -174.05816650]
[-107.93932343 -185.69235229]
[-116.52274323 -198.00239563]
[-124.16222382 -210.91944885]
[-130.81504822 -224.37129211]
[-136.44401550 -238.28269958]
[-141.01762390 -252.57585144]
[-144.51031494 -267.17083740]
[-146.90254211 -281.98599243]
[-148.18093872 -296.93853760]
[-148.33836365 -311.94476318]
[-147.37390137 -326.92080688]
[-145.29298401 -341.78292847]
[-142.10722351 -356.44793701]
[-137.83445740 -370.83389282]
[-132.49856567 -384.86032104]
[-126.12938690 -398.44876099]
[-118.76255035 -411.52325439]
[-110.43924713 -424.01062012]
[-101.20603180 -435.84109497]
[-91.11454010 -446.94848633]
[-80.22119904 -457.27066040]
[-68.58694458 -466.74990845]
[-56.27682877 -475.33322144]
[-43.35969925 -482.97259521]
[-29.90779495 -489.62530518]
[-15.99634552 -495.25415039]
[-1.70315039 -499.82763672]
[12.89185715 -503.32019043]
[27.70705414 -505.71228027]
[42.65958786 -506.99057007]
[57.66583633 -507.14782715]
[72.64187622 -506.18325806]
[87.50395203 -504.10220337]
[102.16896057 -500.91632080]
[116.55487823 -496.64343262]
[130.58125305 -491.30740356]
[144.16963196 -484.93811035]
[157.24404907 -477.57116699]
[169.73135376 -469.24774170]
[181.56175232 -460.01443481]
[192.66903687 -449.92282104]
[202.99111938 -439.02938843]
[212.47027588 -427.39505005]
[221.05348206 -415.08486938]
[228.69273376 -402.16766357]
[235.34532166 -388.71569824]
[240.97404480 -374.80419922]
[245.54740906 -360.51098633]
[249.03984070 -345.91592407]
[251.43180847 -331.10070801]
[252.70994568 -316.14816284]
[252.86709595 -301.14193726]
[251.90237427 -286.16589355]
[249.82118225 -271.30383301]
[246.63517761 -256.63885498]
[242.36215210 -242.25297546]
[237.02600098 -228.22665405]
[230.65658569 -214.63832092]
[223.28952026 -201.56398010]
[214.96600342 -189.07673645]
[205.73257446 -177.24642944]
[195.64088440 -166.13922119]
[184.74737549 -155.81723022]
[173.11294556 -146.33818054]
[160.80267334 -137.75509644]
[147.88542175 -130.11595154]
[134.43339539 -123.46347809]
[120.52184296 -117.83488464]
[106.22856903 -113.26165009]
[91.63349915 -109.76934814]
[94.02447510 -94.96113586]
[96.41545105 -80.15291595]
[98.80642700 -65.34470367]
[101.19740295 -50.53648758]
[103.58837128 -35.72827148]
[112.63486481 -47.69326401]
[127.21726227 -51.20805359]
[140.72149658 -44.67845535]
[147.02252197 -31.06606483]
[143.26240540 -16.54499245]
[131.14660645 -7.70149088]
[116.17043304 -8.54666328]
[105.12601471 -18.69820023]
[105.42614746 -3.70120358]
[105.72628021 11.29579353]
[106.02641296 26.29278946]
[120.35265350 28.90260315]
[133.88977051 34.26907730]
[146.11286926 42.18413544]
[156.54803467 52.34089279]
[164.79066467 64.34553528]
[170.52116394 77.73260498]
[173.51733398 91.98305511]
[173.66302490 106.54434204]
[170.95259094 120.85189056]
[165.49108887 134.35093689]
[157.49031067 146.51811218]
[147.26046753 156.88162231]
[135.19818115 165.03967285]
[121.77115631 170.67593384]
[107.50000000 173.57186890]
[107.50000000 188.57186890]
[107.50000000 203.57186890]
[107.50000000 218.57186890]
[107.50000000 233.57186890]
[107.50000000 248.57186890]
[107.50000000 263.57186890]
[107.50000000 278.57186890]
[107.50000000 293.57186890]
[107.50000000 308.57186890]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[24 132]
[25 131]
[26 130]
[27 129]
[28 121]
[29 120]
[30 119]
[31 118]
[32 117]
[33 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
