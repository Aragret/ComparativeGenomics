%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACxxxxxxxxxxAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[214.41877747 410.88293457]
[214.10671997 395.88616943]
[213.79466248 380.88940430]
[213.48260498 365.89266968]
[213.17054749 350.89590454]
[212.85848999 335.89916992]
[212.54643250 320.90240479]
[212.23437500 305.90563965]
[211.92231750 290.90890503]
[207.02076721 276.73233032]
[198.00325012 264.74551392]
[188.98571777 252.75866699]
[185.49838257 251.91844177]
[182.25944519 249.30867004]
[180.11395264 245.07200623]
[179.80746460 239.73106384]
[171.55517578 227.20510864]
[159.73698425 224.44151306]
[152.76843262 214.01757812]
[154.86122131 201.24752808]
[146.87130737 188.55259705]
[138.88137817 175.85766602]
[130.89146423 163.16273499]
[122.90155029 150.46780396]
[103.44739532 156.12519836]
[82.96322632 154.43734741]
[64.16807556 145.41822815]
[49.63136292 130.06860352]
[41.42215729 110.26877594]
[26.60439873 112.59988403]
[11.78664112 114.93098450]
[-3.03111696 117.26209259]
[-17.73816872 125.69647980]
[-29.91425896 113.89905548]
[-21.94855881 98.93296051]
[-5.36222076 102.44432831]
[9.45553684 100.11322784]
[24.27329445 97.78211975]
[39.09105301 95.45101929]
[42.03653717 80.74305725]
[29.25917816 72.88563538]
[16.48182106 65.02820587]
[11.99191856 65.07574463]
[8.13094997 63.78579330]
[5.24969864 61.53184509]
[3.53674078 58.76422119]
[3.00745678 55.94869232]
[-9.07253170 47.05634308]
[-21.15251923 38.16399384]
[-36.30522537 42.02787018]
[-50.37403107 35.20125580]
[-56.71607971 20.90746307]
[-52.33684540 5.89559078]
[-39.30407333 -2.74621797]
[-23.77143860 -0.93756425]
[-13.07297421 10.46756077]
[-12.26016998 26.08400536]
[-0.18018177 34.97635651]
[11.89980698 43.86870575]
[24.33924675 52.25084686]
[37.11660385 60.10827637]
[49.89396286 67.96569824]
[62.27872849 55.78279114]
[77.33867645 47.94800186]
[93.64398193 44.94473648]
[93.95603943 29.94798279]
[94.26808929 14.95122910]
[94.58014679 -0.04552434]
[94.89220428 -15.04227829]
[81.09386444 -21.48631287]
[71.11437225 -32.98978043]
[66.68275452 -47.55963135]
[68.56680298 -62.67155838]
[76.44009399 -75.70732117]
[88.93853760 -84.40839386]
[103.89670563 -87.26727295]
[118.72299957 -83.78863525]
[130.84867859 -74.57517242]
[138.17288208 -61.22317505]
[139.42666626 -46.04595947]
[134.39279175 -31.67306519]
[123.94342041 -20.59468842]
[109.88896179 -14.73022175]
[109.57690430 0.26653188]
[109.26484680 15.26328564]
[108.95278931 30.26003838]
[108.64073181 45.25679398]
[118.09060669 47.61478424]
[126.98176575 51.59064865]
[135.03961182 57.06159592]
[142.01528931 63.85866165]
[147.69335938 71.77192688]
[151.89846802 80.55698395]
[154.50071716 89.94252777]
[155.41976929 99.63869476]
[154.62721252 109.34601593]
[152.14755249 118.76468658]
[148.05735779 127.60383606]
[142.48294067 135.59045410]
[135.59648132 142.47789001]
[143.58639526 155.17282104]
[151.57630920 167.86775208]
[159.56622314 180.56268311]
[167.55615234 193.25761414]
[184.02331543 201.43148804]
[184.08114624 218.95281982]
[192.33343506 231.47877502]
[200.97254944 243.74114990]
[209.99008179 255.72798157]
[219.00759888 267.71481323]
[217.79815674 252.76364136]
[219.47335815 237.85748291]
[223.97123718 223.54772949]
[231.12541199 210.36373901]
[240.67123413 198.79319763]
[252.25559998 189.26416016]
[265.44995117 182.12908936]
[279.76620483 177.65194702]
[294.67477417 175.99835205]
[309.62417603 177.22947693]
[324.06137085 181.29977417]
[337.45230103 188.05867004]
[349.30163574 197.25613403]
[359.17102051 208.55195618]
[366.69534302 221.52825928]
[371.59628296 235.70501709]
[373.69256592 250.55781555]
[372.90661621 265.53720093]
[369.26751709 280.08908081]
[362.90988159 293.67514038]
[354.06890869 305.79275513]
[343.07162476 315.99371338]
[330.32485962 323.90066528]
[316.30010986 329.22109985]
[301.51623535 331.75820923]
[286.52008057 331.41812134]
[271.86642456 328.21343994]
[258.09732056 322.26269531]
[245.72209167 313.78601074]
[235.19854736 303.09698486]
[226.91908264 290.59683228]
[227.23114014 305.59359741]
[227.54319763 320.59036255]
[227.85523987 335.58709717]
[228.16729736 350.58386230]
[228.47935486 365.58059692]
[228.79141235 380.57736206]
[229.10346985 395.57412720]
[229.41552734 410.57086182]
[232.00653076 429.77859497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 110]
[11 109]
[12 108]
[16 107]
[17 106]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[29 39]
[30 38]
[31 37]
[32 36]
[40 62]
[41 61]
[42 60]
[47 59]
[48 58]
[49 57]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
