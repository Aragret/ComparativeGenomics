%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[49.01325226 259.74871826]
[43.81783295 273.82025146]
[38.62241745 287.89175415]
[33.42700195 301.96328735]
[28.23158836 316.03482056]
[23.03617287 330.10632324]
[26.34094048 346.16903687]
[13.90454483 356.85867310]
[-1.47951663 351.17861938]
[-3.98544025 334.97207642]
[8.96465302 324.91091919]
[14.16006851 310.83938599]
[19.35548401 296.76788330]
[24.55089951 282.69635010]
[29.74631500 268.62484741]
[34.94173050 254.55331421]
[23.82850838 249.38945007]
[13.12207603 243.42779541]
[2.87960815 236.70016479]
[-6.84419537 229.24249268]
[-15.99740505 221.09461975]
[-24.53113937 212.30004883]
[-32.39982224 202.90574646]
[-39.56143570 192.96188354]
[-45.97772980 182.52156067]
[-51.61444092 171.64053345]
[-56.44146729 160.37692261]
[-60.43302536 148.79087830]
[-63.56780624 136.94425964]
[-65.82906342 124.90034485]
[-67.20471954 112.72344971]
[-82.19741821 113.19149780]
[-97.19011688 113.65953827]
[-112.18280792 114.12757874]
[-127.17550659 114.59561920]
[-142.81826782 121.13323975]
[-153.43074036 107.91160583]
[-143.66363525 94.05375671]
[-127.64354706 99.60292816]
[-112.65085602 99.13488007]
[-97.65815735 98.66683960]
[-82.66545868 98.19879913]
[-67.67276764 97.73075867]
[-59.04412079 46.85611725]
[-35.35522079 1.01379275]
[-47.05484390 -8.37336922]
[-58.75447083 -17.76053047]
[-70.45409393 -27.14769173]
[-82.15371704 -36.53485489]
[-96.74819183 -31.53437614]
[-111.72383881 -35.24026108]
[-122.30197906 -46.46997833]
[-125.10717010 -61.64015961]
[-119.24427795 -75.91006470]
[-106.58413696 -84.72620392]
[-91.16655731 -85.27539825]
[-77.91121674 -77.38238525]
[-71.04785919 -63.56580734]
[-72.76655579 -48.23447800]
[-61.06693268 -38.84731674]
[-49.36730576 -29.46015358]
[-37.66768265 -20.07299232]
[-25.96805954 -10.68583107]
[-19.18065834 -17.96302795]
[-11.97354412 -24.82480049]
[-4.37209702 -31.24698257]
[3.59691143 -37.20695877]
[11.90541840 -42.68374252]
[20.52416420 -47.65803909]
[29.42279625 -52.11233902]
[38.56997681 -56.03094864]
[47.93349075 -59.40007401]
[57.48036575 -62.20784760]
[67.17697906 -64.44438171]
[76.98918915 -66.10179901]
[86.88243103 -67.17426300]
[96.82186890 -67.65799713]
[106.77249908 -67.55130005]
[116.69927979 -66.85454559]
[126.56724548 -65.57018280]
[136.34165955 -63.70274734]
[145.98808289 -61.25880432]
[155.47256470 -58.24695969]
[164.76167297 -54.67782974]
[173.82272339 -50.56397629]
[182.62379456 -45.91988754]
[191.13389587 -40.76192093]
[199.32305908 -35.10823822]
[207.16242981 -28.97875214]
[214.62442017 -22.39504814]
[221.68273926 -15.38031101]
[228.31253052 -7.95924473]
[234.49046326 -0.15798326]
[240.19474792 7.99599981]
[245.40533447 16.47398949]
[250.10383606 25.24612808]
[254.27374268 34.28152466]
[257.90032959 43.54835510]
[260.97085571 53.01399231]
[275.54357910 49.45923233]
[290.11627197 45.90446854]
[304.68896484 42.34970856]
[319.26168823 38.79494476]
[325.02273560 24.38697243]
[338.17025757 16.14545441]
[353.64871216 17.23942375]
[365.50634766 27.24822807]
[369.18365479 42.32327652]
[363.26663208 56.66790390]
[350.03048706 64.76631165]
[334.56478882 63.50449753]
[322.81643677 53.36764908]
[308.24374390 56.92240906]
[293.67105103 60.47717285]
[279.09832764 64.03193665]
[264.52563477 67.58669281]
[266.11917114 77.11495209]
[267.16137695 86.71916199]
[267.64877319 96.36745453]
[267.57974243 106.02780151]
[266.95452881 115.66814423]
[265.77520752 125.25648499]
[264.04565430 134.76100159]
[261.77166748 144.15013123]
[258.96075439 153.39274597]
[255.62225342 162.45814514]
[251.76724243 171.31625366]
[247.40853882 179.93766785]
[242.56057739 188.29376221]
[237.23945618 196.35681152]
[231.46286011 204.10006714]
[225.24992371 211.49780273]
[218.62130737 218.52549744]
[211.59896851 225.15979004]
[204.20625305 231.37869263]
[196.46768188 237.16156006]
[188.40892029 242.48918152]
[180.05674744 247.34388733]
[171.43885803 251.70956421]
[162.58387756 255.57173157]
[153.52117920 258.91754150]
[144.28083801 261.73593140]
[134.89353943 264.01751709]
[125.39042664 265.75473022]
[115.80304718 266.94180298]
[106.16320801 267.57482910]
[96.50292206 267.65164185]
[86.85424042 267.17205811]
[77.24919128 266.13760376]
[67.71965027 264.55175781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
