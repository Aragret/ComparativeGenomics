%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCxxxxxxxxxxGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[25.25515747 259.72006226]
[18.32523155 273.02331543]
[18.81169510 288.83703613]
[6.06968212 296.55001831]
[-0.86024469 309.85327148]
[-7.79017115 323.15649414]
[-14.72009850 336.45974731]
[-21.65002441 349.76296997]
[-28.57995224 363.06622314]
[-25.15080452 378.73849487]
[-35.37728500 391.09967041]
[-51.41450882 390.66729736]
[-60.96009445 377.77307129]
[-56.69148254 362.30831909]
[-41.88319016 356.13629150]
[-34.95326233 342.83303833]
[-28.02333450 329.52981567]
[-21.09340858 316.22656250]
[-14.16348171 302.92333984]
[-7.23355484 289.62008667]
[-8.21569347 274.75790405]
[5.02199459 266.09338379]
[11.95192146 252.79014587]
[0.24505578 245.41748047]
[-10.84780788 237.14974976]
[-21.25839233 228.03785706]
[-30.92262077 218.13787842]
[-39.78100586 207.51074219]
[-47.77902603 196.22187805]
[-54.86745071 184.34075928]
[-61.00265503 171.94050598]
[-66.14686584 159.09745789]
[-70.26843262 145.89065552]
[-73.34197235 132.40139771]
[-75.34858704 118.71269989]
[-76.27590179 104.90882111]
[-76.11822510 91.07472992]
[-74.87652588 77.29557800]
[-72.55844879 63.65617371]
[-87.09165955 59.94327164]
[-101.62487793 56.23036957]
[-113.48268890 66.23896027]
[-128.96118164 67.33264923]
[-142.10853577 59.09089279]
[-147.86933899 44.68281555]
[-144.02845764 29.64861488]
[-132.06275940 19.76924896]
[-116.57332611 18.84353638]
[-103.51614380 27.22743034]
[-97.91197205 41.69715500]
[-83.37876129 45.41005707]
[-68.84554291 49.12295914]
[-48.43687057 4.79607773]
[-16.66110992 -32.24022293]
[-26.09702682 -43.90055847]
[-35.53294373 -55.56089783]
[-44.96886063 -67.22123718]
[-60.45735550 -66.27984619]
[-73.52301025 -74.65052795]
[-79.14182281 -89.11457062]
[-75.15322876 -104.11026764]
[-63.09094238 -113.87145233]
[-47.59315109 -114.64476776]
[-34.61906815 -106.13284302]
[-29.15749931 -91.60869598]
[-33.30852509 -76.65715027]
[-23.87260818 -64.99681091]
[-14.43669033 -53.33647537]
[-5.00077248 -41.67613983]
[4.13169861 -48.00864792]
[13.64490986 -53.75333786]
[23.50107956 -58.88740158]
[33.66106415 -63.39044189]
[44.08451462 -67.24458313]
[54.73003387 -70.43450928]
[65.55533600 -72.94755554]
[76.51744080 -74.77374268]
[87.57280731 -75.90581512]
[98.67752838 -76.33927917]
[109.78749847 -76.07241821]
[120.85859680 -75.10628510]
[131.84686279 -73.44470978]
[142.70863342 -71.09430695]
[153.40080261 -68.06440735]
[163.88088989 -64.36703491]
[174.10726929 -60.01688766]
[184.03932190 -55.03123093]
[193.63763428 -49.42986679]
[202.86405945 -43.23504257]
[211.68194580 -36.47136307]
[220.05630493 -29.16568756]
[227.95385742 -21.34703255]
[235.34323120 -13.04644775]
[242.19509888 -4.29690027]
[254.65672302 -12.64604568]
[267.11831665 -20.99518967]
[279.57992554 -29.34433556]
[282.87881470 -35.17831039]
[287.89038086 -38.00473785]
[292.71139526 -37.76653290]
[305.49707031 -45.61040878]
[310.61770630 -60.81431198]
[325.74581909 -66.15465546]
[339.27645874 -57.53478622]
[340.83001709 -41.56713104]
[329.21478271 -30.50070953]
[313.34094238 -32.82472992]
[300.55526733 -24.98085403]
[287.92907715 -16.88272285]
[275.46746826 -8.53357792]
[263.00585938 -0.18443321]
[250.54425049 8.16471195]
[255.41258240 16.66801834]
[259.80111694 25.42859650]
[263.69628906 34.41939926]
[267.08609009 43.61267090]
[269.96002197 52.98002625]
[272.30926514 62.49254990]
[274.12652588 72.12086487]
[275.40618896 81.83525848]
[276.14434814 91.60572815]
[276.33865356 101.40211487]
[275.98858643 111.19416809]
[275.09518433 120.95166779]
[273.66119385 130.64448547]
[271.69104004 140.24269104]
[269.19085693 149.71664429]
[266.16830444 159.03712463]
[262.63275146 168.17532349]
[258.59512329 177.10305786]
[254.06782532 185.79273987]
[249.06489563 194.21755981]
[243.60174561 202.35150146]
[237.69525146 210.16944885]
[231.36366272 217.64726257]
[224.62651062 224.76187134]
[217.50459290 231.49130249]
[210.01989746 237.81477356]
[202.19554138 243.71278381]
[194.05567932 249.16708374]
[185.62542725 254.16087341]
[176.93083191 258.67871094]
[167.99873352 262.70669556]
[158.85668945 266.23229980]
[149.53294373 269.24472046]
[140.05627441 271.73464966]
[130.45593262 273.69433594]
[120.76156616 275.11779785]
[111.00310516 276.00064087]
[101.21067810 276.34008789]
[91.41450500 276.13513184]
[81.64484406 275.38638306]
[71.93184662 274.09616089]
[62.30550766 272.26843262]
[52.79554367 269.90887451]
[43.43131256 267.02478027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[39 52]
[40 51]
[41 50]
[54 69]
[55 68]
[56 67]
[57 66]
[94 112]
[95 111]
[96 110]
[97 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
