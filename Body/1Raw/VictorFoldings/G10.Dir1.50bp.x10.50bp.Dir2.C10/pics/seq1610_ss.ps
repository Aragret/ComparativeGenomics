%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGxxxxxxxxxxUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.28500366 441.35449219]
[93.28500366 426.35449219]
[93.28500366 411.35449219]
[93.28500366 396.35449219]
[93.28500366 381.35449219]
[93.28500366 366.35449219]
[93.28500366 351.35449219]
[93.28500366 336.35449219]
[93.28500366 321.35449219]
[93.28500366 306.35449219]
[77.18689728 301.52856445]
[63.32704926 291.99221802]
[53.04486465 278.65377808]
[47.33807373 262.78967285]
[46.76590347 245.92222595]
[51.39430237 229.67359924]
[60.78853989 215.60981750]
[74.05403137 205.08976746]
[89.92150116 199.13397217]
[88.98587799 184.16317749]
[88.05024719 169.19238281]
[76.74660492 159.56101990]
[75.58448029 144.39183044]
[85.76338959 132.60084534]
[73.59155273 123.83463287]
[59.09595490 127.69179535]
[44.60035706 131.54895020]
[39.14027405 146.07365417]
[26.16706467 154.58691406]
[10.66919136 153.81518555]
[-1.39409673 144.05523682]
[-5.38421917 129.05995178]
[0.23310775 114.59532928]
[13.29790688 106.22331238]
[28.78649521 107.16311646]
[40.74319839 117.05335999]
[55.23879242 113.19619751]
[69.73439026 109.33903503]
[68.55160522 98.02570343]
[71.43781281 87.08379364]
[77.97845459 77.92150879]
[87.29151154 71.70269775]
[98.14620972 69.19911957]
[94.13846588 54.74443054]
[86.14855194 42.04949951]
[74.84954834 32.18377686]
[63.55054092 22.31805420]
[45.42967987 19.21737862]
[40.34264755 2.45068336]
[28.84084511 -7.17784309]
[17.33904076 -16.80636978]
[5.83723783 -26.43489456]
[-10.40059757 -28.72939491]
[-16.28063393 -44.03812408]
[-5.75399160 -56.61277771]
[10.35042000 -53.51762772]
[15.46576405 -37.93669891]
[26.96756744 -28.30817223]
[38.46937180 -18.67964554]
[49.97117615 -9.05111980]
[62.08520889 -9.79779434]
[71.75369263 -1.81409979]
[73.41626740 11.01904869]
[84.71527100 20.88477135]
[96.01427460 30.75049591]
[91.62684631 16.40649033]
[90.25835419 1.46904612]
[91.96635437 -13.43339443]
[96.67900085 -27.67386246]
[104.19802094 -40.65324402]
[114.20708466 -51.82547379]
[126.28508759 -60.72052002]
[139.92388916 -66.96414948]
[154.54969788 -70.29369354]
[169.54716492 -70.56906891]
[184.28533936 -67.77869415]
[198.14416504 -62.03995132]
[210.54055786 -53.59429169]
[220.95301819 -42.79702759]
[228.94345093 -30.10242462]
[234.17568970 -16.04455757]
[236.42961121 -1.21486366]
[235.61039734 13.76274872]
[231.75250244 28.25815010]
[225.01824951 41.66149521]
[215.69093323 53.40888977]
[204.16297913 63.00609970]
[190.91940308 70.04935455]
[176.51734924 74.24233246]
[161.56275940 75.40863800]
[146.68479919 73.49919128]
[132.50938416 68.59433746]
[119.63290405 60.90042114]
[108.59315491 50.73669052]
[112.60089874 65.19137573]
[125.37825775 73.04880524]
[140.08621216 70.10331726]
[154.79417419 67.15783691]
[169.50213623 64.21235657]
[181.51429749 53.91581726]
[195.51310730 59.00328064]
[210.22106934 56.05780029]
[213.96429443 41.26080322]
[223.76358032 29.55880737]
[237.67327881 23.27524757]
[252.93161011 23.65773010]
[266.50900269 30.63031197]
[275.70968628 42.80858612]
[278.70681763 57.77453995]
[274.90536499 72.55667877]
[265.06008911 84.22000122]
[251.12574768 90.44873047]
[235.86904907 90.00616455]
[222.31919861 82.98017120]
[213.16656494 70.76576233]
[198.45860291 73.71124268]
[187.49845886 83.79710388]
[172.44761658 78.92031860]
[157.73965454 81.86579895]
[143.03169250 84.81127930]
[128.32373047 87.75676727]
[130.20791626 107.51636505]
[119.62396240 124.51418304]
[100.73417664 131.66520691]
[112.30194855 142.09710693]
[113.03754425 157.29295349]
[103.02103424 168.25675964]
[103.95666504 183.22755432]
[104.89229584 198.19834900]
[117.92613220 200.84567261]
[129.92512512 206.55836487]
[140.18084717 214.99354553]
[148.08915710 225.64776611]
[153.18580627 237.88703918]
[155.17361450 250.98463440]
[153.93986511 264.16409302]
[149.56268311 276.64541626]
[142.30606079 287.69110107]
[132.60397339 296.64981079]
[121.03442383 302.99472046]
[108.28500366 306.35449219]
[108.28500366 321.35449219]
[108.28500366 336.35449219]
[108.28500366 351.35449219]
[108.28500366 366.35449219]
[108.28500366 381.35449219]
[108.28500366 396.35449219]
[108.28500366 411.35449219]
[108.28500366 426.35449219]
[108.28500366 441.35449219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 129]
[20 128]
[21 127]
[24 124]
[25 38]
[26 37]
[27 36]
[43 95]
[44 94]
[45 65]
[46 64]
[47 63]
[49 60]
[50 59]
[51 58]
[52 57]
[96 121]
[97 120]
[98 119]
[99 118]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
