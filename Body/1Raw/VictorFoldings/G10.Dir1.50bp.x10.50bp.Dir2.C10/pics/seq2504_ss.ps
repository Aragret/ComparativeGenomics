%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAxxxxxxxxxxGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 257.86428833]
[92.50000000 242.86427307]
[92.50000000 227.86427307]
[92.50000000 212.86427307]
[92.50000000 197.86427307]
[92.50000000 182.86427307]
[92.50000000 167.86427307]
[92.50000000 152.86427307]
[92.50000000 137.86427307]
[92.50000000 122.86427307]
[78.54463959 117.36445618]
[68.31105804 128.33139038]
[58.07746506 139.29832458]
[47.84387970 150.26525879]
[37.61029053 161.23220825]
[33.85223770 176.60060120]
[19.51222992 180.62718201]
[13.12680912 196.33268738]
[-3.73257470 194.54452515]
[-6.68143654 177.84899902]
[8.54529476 170.39360046]
[11.57137299 155.80963135]
[26.64335632 150.99861145]
[36.87694168 140.03167725]
[47.11053085 129.06474304]
[57.34412003 118.09780884]
[67.57770538 107.13086700]
[63.76372147 100.67304230]
[52.32177353 81.29956055]
[37.77694702 84.96672058]
[23.23212051 88.63388062]
[11.84891415 100.43873596]
[-3.99856067 96.22096252]
[-8.00777912 80.31945038]
[3.94559860 69.09230804]
[19.56496239 74.08905029]
[34.10978699 70.42189789]
[48.65461349 66.75473785]
[91.36842346 56.61183548]
[115.49690247 77.51477814]
[117.27099609 62.62005997]
[119.04509735 47.72534180]
[120.81919098 32.83062744]
[113.44789124 19.76678467]
[99.78111267 13.58461761]
[86.11434174 7.40244913]
[72.44756317 1.22028136]
[57.74996185 7.03028774]
[43.28232193 0.66924149]
[37.62803268 -14.08896160]
[44.14168549 -28.48854065]
[58.95884323 -33.98648071]
[73.28874969 -27.32095337]
[78.62973022 -12.44649601]
[92.29650879 -6.26432800]
[105.96327972 -0.08215975]
[119.63005829 6.10000849]
[106.21614838 -16.37687492]
[121.58528137 -35.33389282]
[122.17787933 -50.32218170]
[122.77047729 -65.31047058]
[123.36307526 -80.29875946]
[123.21488953 -95.29802704]
[122.32627869 -110.27168274]
[121.43766785 -125.24533844]
[120.54906464 -140.21899414]
[119.66045380 -155.19265747]
[111.11920929 -168.51022339]
[118.08895111 -181.67350769]
[117.20034027 -196.64717102]
[116.31172943 -211.62081909]
[102.04211426 -216.94039917]
[91.17439270 -227.60870361]
[85.59145355 -241.77734375]
[86.26058960 -256.99154663]
[93.06584930 -270.61535645]
[104.82820129 -280.28839111]
[119.50973511 -284.33465576]
[134.56678772 -282.05322266]
[147.39062500 -273.83926392]
[155.75946045 -261.11596680]
[158.22332764 -246.08767700]
[154.35534668 -231.35815430]
[144.82568359 -219.47938538]
[131.28538513 -212.50942993]
[132.17399597 -197.53576660]
[133.06260681 -182.56211853]
[141.54028320 -170.31556702]
[134.63410950 -156.08126831]
[135.52272034 -141.10760498]
[136.41133118 -126.13394928]
[137.29994202 -111.16029358]
[138.18855286 -96.18663788]
[150.13612366 -105.25611877]
[164.72459412 -101.76662445]
[171.27505493 -88.27249908]
[164.99250793 -74.65157318]
[150.47583008 -70.87449646]
[138.35136414 -79.70616150]
[137.75877380 -64.71787262]
[137.16616821 -49.72958374]
[136.57356262 -34.74129486]
[150.26681519 -18.63235283]
[142.82873535 2.78746724]
[156.49551392 -3.39470077]
[170.16229248 -9.57686901]
[179.27783203 -23.20914841]
[195.62147522 -21.86115456]
[202.38029480 -6.91958761]
[192.60139465 6.24494839]
[176.34446716 4.08990860]
[162.67768860 10.27207661]
[149.01091003 16.45424461]
[163.75878906 13.71565151]
[177.49722290 19.73689842]
[185.47859192 32.43721008]
[184.94473267 47.42770767]
[176.08015442 59.52808762]
[161.94819641 64.55679321]
[147.43247986 60.77604294]
[137.54924011 49.49235916]
[135.71391296 34.60472488]
[133.93981934 49.49943924]
[132.16571045 64.39415741]
[130.39161682 79.28887177]
[138.01957703 92.20452881]
[151.91992188 97.84194183]
[168.87026978 98.19164276]
[173.22654724 114.57636261]
[158.68809509 123.29814911]
[146.28251648 111.74228668]
[132.38217163 106.10487366]
[126.16162872 110.29472351]
[135.65760803 121.90619659]
[145.15357971 133.51766968]
[154.64956665 145.12915039]
[164.14553833 156.74063110]
[177.87574768 162.78060913]
[184.33132935 176.32038879]
[180.38008118 190.79061890]
[167.93913269 199.17051697]
[153.04467773 197.39425659]
[142.92332458 186.32365417]
[142.48606873 171.32937622]
[135.29469299 158.16563416]
[128.10330200 145.00190735]
[120.91192627 131.83816528]
[113.72054291 118.67442322]
[107.50000000 122.86427307]
[107.50000000 137.86427307]
[107.50000000 152.86427307]
[107.50000000 167.86427307]
[107.50000000 182.86427307]
[107.50000000 197.86427307]
[107.50000000 212.86427307]
[107.50000000 227.86427307]
[107.50000000 242.86427307]
[107.50000000 257.86428833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[17 21]
[29 38]
[30 37]
[31 36]
[40 125]
[41 124]
[42 123]
[43 122]
[44 57]
[45 56]
[46 55]
[47 54]
[59 102]
[60 101]
[61 100]
[62 99]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[69 87]
[70 86]
[71 85]
[104 113]
[105 112]
[106 111]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
