%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAxxxxxxxxxxUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.39627075]
[92.50000000 236.39627075]
[92.50000000 221.39627075]
[92.50000000 206.39627075]
[92.50000000 191.39627075]
[92.50000000 176.39627075]
[92.50000000 161.39627075]
[92.50000000 146.39627075]
[92.50000000 131.39627075]
[92.50000000 116.39627075]
[86.32421112 112.14072418]
[79.13282776 125.30446625]
[76.76753998 140.11680603]
[62.97829437 146.02076721]
[50.62683487 137.50950623]
[51.23381805 122.52179718]
[64.23267365 115.03722382]
[73.97264099 103.62963867]
[67.79685211 99.37409210]
[53.78014374 104.71560669]
[39.76342773 110.05711365]
[25.74671555 115.39862823]
[11.73000240 120.74014282]
[-2.28671026 126.08165741]
[-5.35832834 141.20014954]
[-16.13237762 152.24203491]
[-31.17089653 155.68391418]
[-45.67515182 150.42745972]
[-55.01688385 138.15002441]
[-56.21518326 122.76927185]
[-48.88767624 109.19314575]
[-35.37254333 101.75373840]
[-19.98241234 102.82494354]
[-7.62822247 112.06494141]
[6.38849020 106.72342682]
[20.40520287 101.38191986]
[34.42191696 96.04040527]
[48.43862915 90.69889069]
[62.45534134 85.35737610]
[75.32929230 82.35131073]
[86.86732483 84.43119812]
[95.46014404 90.64044189]
[98.86312103 76.03154755]
[102.26609802 61.42265701]
[105.66907501 46.81376266]
[104.56694794 37.67936707]
[109.29779053 31.93787766]
[113.00395203 17.40294075]
[116.71011353 2.86800456]
[102.58229828 -2.20639253]
[89.00080872 -8.60076237]
[76.08865356 -16.25719452]
[63.96276474 -25.10634804]
[52.73295593 -35.06808472]
[42.50093460 -46.05218506]
[33.35936356 -57.95917892]
[25.39103127 -70.68122101]
[18.66810226 -84.10310364]
[13.25146103 -98.10327911]
[9.19016361 -112.55493927]
[6.52099037 -127.32722473]
[5.26811504 -142.28633118]
[5.44288301 -157.29679871]
[7.04371262 -172.22268677]
[10.05610466 -186.92881775]
[14.45277977 -201.28201294]
[20.19391823 -215.15226746]
[27.22752762 -228.41398621]
[35.48990631 -240.94705200]
[44.90623093 -252.63796997]
[55.39122391 -263.38085938]
[66.84992218 -273.07843018]
[79.17856598 -281.64285278]
[92.26548767 -288.99658203]
[105.99217224 -295.07299805]
[120.23430634 -299.81707764]
[134.86291504 -303.18588257]
[149.74549866 -305.14883423]
[164.74729919 -305.68823242]
[179.73242188 -304.79916382]
[194.56520081 -302.48965454]
[209.11126709 -298.78067017]
[223.23889160 -293.70574951]
[236.82014465 -287.31088257]
[249.73202515 -279.65399170]
[261.85760498 -270.80438232]
[273.08703613 -260.84225464]
[283.31866455 -249.85777283]
[292.45980835 -237.95043945]
[300.42767334 -225.22810364]
[307.15011597 -211.80598450]
[312.56622314 -197.80561829]
[316.62701416 -183.35380554]
[319.29565430 -168.58142090]
[320.54797363 -153.62226868]
[320.37265015 -138.61180115]
[318.77127075 -123.68597412]
[315.75836182 -108.97994995]
[311.36114502 -94.62692261]
[305.61950684 -80.75687408]
[298.58541870 -67.49541473]
[290.32257080 -54.96264648]
[280.90582275 -43.27207184]
[270.42044067 -32.52956390]
[258.96139526 -22.83240891]
[246.63244629 -14.26842880]
[233.54525757 -6.91518354]
[219.81834412 -0.83926600]
[205.57603455 3.90429807]
[190.94731140 7.27254915]
[176.06465149 9.23498344]
[161.06283569 9.77382851]
[146.07772827 8.88420296]
[131.24505615 6.57416582]
[127.53889465 21.10910225]
[123.83273315 35.64403915]
[120.27796936 50.21673965]
[116.87499237 64.82563019]
[113.47201538 79.43452454]
[110.06903076 94.04341888]
[116.78558350 80.63118744]
[126.93804932 69.58911133]
[139.74026489 61.77225494]
[154.20088196 57.78592682]
[169.20010376 57.93880463]
[183.57644653 62.21906281]
[196.21667480 70.29524231]
[206.14195251 81.54196167]
[212.58372498 95.08831024]
[215.04316711 109.88530731]
[213.32980347 124.78713226]
[207.57632446 138.63984680]
[198.22825623 150.37072754]
[186.00947571 159.07139587]
[171.86618042 164.06808472]
[156.89355469 164.97389221]
[142.25102234 161.71865845]
[129.07246399 154.55447388]
[118.37837982 144.03608704]
[110.99687195 130.97801208]
[107.50000000 116.39627075]
[107.50000000 131.39627075]
[107.50000000 146.39627075]
[107.50000000 161.39627075]
[107.50000000 176.39627075]
[107.50000000 191.39627075]
[107.50000000 206.39627075]
[107.50000000 221.39627075]
[107.50000000 236.39627075]
[107.50000000 251.39627075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[42 120]
[43 119]
[44 118]
[45 117]
[47 116]
[48 115]
[49 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
