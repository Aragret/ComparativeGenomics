%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAxxxxxxxxxxUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.12798309 478.28555298]
[71.71897888 459.07781982]
[72.03103638 444.08105469]
[72.34309387 429.08432007]
[72.65515137 414.08755493]
[72.96720123 399.09082031]
[73.27925873 384.09405518]
[73.59131622 369.09729004]
[73.90337372 354.10055542]
[74.21543121 339.10379028]
[60.91482162 336.44692993]
[48.24657440 331.59210205]
[36.57120514 324.67630005]
[26.22116470 315.89520264]
[17.49139214 305.49755859]
[10.63088608 293.77822876]
[5.83562183 281.06985474]
[3.24294090 267.73327637]
[2.92762399 254.14743042]
[4.89973259 240.69847107]
[9.10429096 227.76887512]
[15.42282104 215.72653198]
[23.67667770 204.91430664]
[33.63209915 195.64019775]
[45.00682831 188.16865540]
[57.47811890 182.71299744]
[70.69189453 179.42932129]
[84.27277374 178.41201782]
[85.83036041 163.49310303]
[87.38793945 148.57420349]
[88.94551849 133.65528870]
[70.83029175 120.09995270]
[64.61438751 98.34515381]
[50.11879349 94.48799896]
[35.62319946 90.63083649]
[21.12760162 86.77368164]
[6.63200474 82.91651917]
[-7.86359215 79.05935669]
[-22.43629456 75.50460052]
[-37.07979584 72.25376892]
[-51.72329712 69.00294495]
[-68.49636078 71.47290039]
[-75.51303864 56.03908539]
[-62.62479019 45.02412415]
[-48.47247314 54.35944366]
[-33.82897186 57.61027145]
[-19.18546867 60.86109543]
[-14.69850826 59.06034851]
[-9.02935028 60.10530853]
[-4.00643253 64.56376648]
[10.48916435 68.42092133]
[24.98476028 72.27808380]
[39.48035812 76.13523865]
[53.97595215 79.99240112]
[68.47154999 83.84956360]
[78.75389862 71.65422821]
[93.34432983 65.20658112]
[109.28433990 65.81402588]
[116.19134521 52.49887085]
[103.70353699 44.16112900]
[92.20876312 34.50020981]
[81.84655762 23.63338470]
[72.74270630 11.69256687]
[65.00772858 -1.17729068]
[58.73550797 -14.81996155]
[54.00218964 -29.06983566]
[50.86523438 -43.75393295]
[49.36272049 -58.69400024]
[49.51288605 -73.70867920]
[51.31390381 -88.61570740]
[54.74391937 -103.23413086]
[59.76129150 -117.38648224]
[66.30511475 -130.90098572]
[74.29594421 -143.61355591]
[83.63679504 -155.36991882]
[94.21427155 -166.02731323]
[105.89996338 -175.45640564]
[118.55202484 -183.54272461]
[132.01687622 -190.18809509]
[146.13105774 -195.31187439]
[160.72323608 -198.85183716]
[175.61628723 -200.76502991]
[190.62940979 -201.02822876]
[205.58036804 -199.63822937]
[220.28767395 -196.61190796]
[234.57276917 -191.98599243]
[248.26228333 -185.81666565]
[261.19000244 -178.17878723]
[273.19900513 -169.16508484]
[284.14355469 -158.88499451]
[293.89071655 -147.46327209]
[302.32223511 -135.03858948]
[309.33575439 -121.76176453]
[314.84606934 -107.79396820]
[318.78637695 -93.30475616]
[321.10879517 -78.47001648]
[321.78515625 -63.46982574]
[320.80722046 -48.48627472]
[318.18688965 -33.70124817]
[313.95596313 -19.29421997]
[308.16580200 -5.44008446]
[300.88665771 7.69298506]
[292.20693970 19.94556427]
[282.23199463 31.16892052]
[271.08291626 41.22681046]
[258.89505005 49.99713898]
[245.81629944 57.37344360]
[232.00547791 63.26618576]
[217.63021851 67.60382843]
[202.86503601 70.33371735]
[187.88914490 71.42272186]
[172.88435364 70.85760498]
[158.03279114 68.64524841]
[143.51477051 64.81249237]
[129.50650024 59.40586853]
[122.59949493 72.72102356]
[128.85380554 79.44914246]
[133.16784668 87.55919647]
[135.25152588 96.50582886]
[134.96473694 105.68743134]
[132.32675171 114.48657227]
[127.51496887 122.31157684]
[120.85294342 128.63624573]
[112.78867340 133.03527832]
[103.86443329 135.21286011]
[102.30684662 150.13177490]
[100.74926758 165.05068970]
[99.19168854 179.96960449]
[114.98861694 184.87469482]
[129.45062256 192.89244080]
[141.97224426 203.68476868]
[152.02969360 216.79751587]
[159.20286560 231.67950439]
[163.19279480 247.70573425]
[163.83416748 264.20358276]
[161.10218811 280.48114014]
[155.11346436 295.85607910]
[146.12107849 309.68441772]
[134.50389099 321.38732910]
[120.75057983 330.47549438]
[105.43904114 336.56954956]
[89.21218109 339.41586304]
[88.90012360 354.41259766]
[88.58807373 369.40936279]
[88.27601624 384.40609741]
[87.96395874 399.40286255]
[87.65190125 414.39962769]
[87.33984375 429.39636230]
[87.02778625 444.39312744]
[86.71573639 459.38989258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[28 128]
[29 127]
[30 126]
[31 125]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[38 50]
[39 47]
[40 46]
[41 45]
[58 116]
[59 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
