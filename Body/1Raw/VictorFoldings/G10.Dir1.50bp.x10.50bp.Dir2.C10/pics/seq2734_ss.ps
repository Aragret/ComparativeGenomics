%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.46497345 292.33108521]
[99.46497345 277.33108521]
[99.46497345 262.33108521]
[99.46497345 247.33110046]
[99.46497345 232.33110046]
[99.46497345 217.33110046]
[99.46497345 202.33110046]
[99.46497345 187.33110046]
[99.46497345 172.33110046]
[99.46497345 157.33110046]
[85.93164825 150.86199951]
[74.25852966 160.28210449]
[62.58541489 169.70220947]
[50.91230011 179.12231445]
[39.23918152 188.54241943]
[43.19662857 203.24813843]
[40.82416534 218.29112244]
[32.53283310 231.06507874]
[19.75915718 239.35682678]
[4.71625137 241.72976685]
[-9.98960686 237.77279663]
[-21.81054115 228.17147827]
[-28.69849968 214.58929443]
[-29.46010590 199.37942505]
[-23.96340561 185.17709351]
[-13.16073418 174.44293213]
[1.07627952 169.03671265]
[16.28098679 169.89506531]
[29.81907845 176.86929321]
[41.49219513 167.44918823]
[53.16531372 158.02909851]
[64.83843231 148.60899353]
[76.51154327 139.18888855]
[60.00682449 116.51181030]
[60.40066147 89.98358917]
[75.72647858 70.21244049]
[63.50249863 61.51908875]
[51.27851486 52.82574081]
[39.05453491 44.13239670]
[26.83055496 35.43904877]
[13.96667385 36.80848694]
[3.95351386 29.26782417]
[1.85625386 17.31710243]
[-10.18902874 8.37779808]
[-22.23431206 -0.56150639]
[-34.55198669 8.22086430]
[-48.98130417 12.76508999]
[-64.10862732 12.62597466]
[-78.45192719 7.81714582]
[-90.60600281 -1.19027519]
[-99.38011932 -13.51383400]
[-103.91467285 -27.94619179]
[-103.76542664 -43.07341766]
[-98.94698334 -57.41349411]
[-89.93141937 -69.56153107]
[-77.60198975 -78.32738495]
[-63.16659164 -82.85227203]
[-48.03947067 -82.69288635]
[-33.70262527 -77.86483765]
[-21.56063271 -68.84113312]
[-12.80304146 -56.50582886]
[-8.28783035 -42.06740570]
[-8.45735455 -26.94039726]
[-13.29500675 -12.60678864]
[-1.24972403 -3.66748428]
[10.79555893 5.27182055]
[28.28861618 6.31149483]
[35.52390289 23.21506691]
[47.74788284 31.90841484]
[59.97186279 40.60176086]
[72.19584656 49.29510880]
[84.41982269 57.98845673]
[77.86008453 44.49883652]
[67.61997223 33.53799438]
[64.69586945 18.82576942]
[69.96627808 4.78216410]
[81.84779358 -4.37368393]
[96.77084351 -5.89107513]
[110.25209045 0.68586212]
[118.24133301 13.38121223]
[118.33837128 28.38089752]
[110.51440430 41.17821884]
[106.80438232 55.71216965]
[117.02818298 44.73610687]
[127.25198364 33.76004410]
[137.47578430 22.78397942]
[147.69956970 11.80791569]
[157.92337036 0.83185232]
[168.14717102 -10.14421082]
[162.15005493 -24.14258575]
[162.37156677 -39.36989212]
[168.77331543 -53.18790436]
[180.24615479 -63.20257187]
[194.80236816 -67.67878723]
[209.91999817 -65.84102631]
[222.97981262 -58.00769043]
[231.71911621 -45.53594971]
[234.62379456 -30.58661079]
[231.19056702 -15.74973488]
[222.01428223 -3.59590197]
[208.68478394 3.76916313]
[193.51147461 5.06941843]
[179.12322998 0.07958635]
[168.89942932 11.05564976]
[158.67564392 22.03171349]
[148.45184326 33.00777817]
[138.22804260 43.98384094]
[128.00424194 54.95990372]
[117.78044891 65.93596649]
[131.14709473 74.52035522]
[140.40095520 88.31401062]
[143.54414368 105.36164093]
[139.49913025 122.96289825]
[154.32615662 125.23431396]
[169.15318298 127.50573730]
[179.28562927 115.87228394]
[194.10546875 111.58556366]
[208.88374329 116.01345062]
[218.90475464 127.74301910]
[220.97084045 143.03140259]
[214.42272949 157.00013733]
[201.34988403 165.19186401]
[185.92379761 164.99261475]
[173.06689453 156.46597290]
[166.88175964 142.33276367]
[152.05473328 140.06134033]
[137.22770691 137.78993225]
[131.53703308 142.67521667]
[143.45999146 151.77702332]
[155.38294983 160.87884521]
[167.30592346 169.98065186]
[179.22888184 179.08245850]
[192.87539673 185.30923462]
[200.97122192 197.93688965]
[200.93356323 212.93684387]
[192.77442932 225.52368164]
[179.09683228 231.68186951]
[164.26429749 229.44674683]
[153.00880432 219.53140259]
[148.92118835 205.10075378]
[141.72981262 191.93702698]
[134.53842163 178.77328491]
[127.34703827 165.60954285]
[120.15565491 152.44580078]
[114.46497345 157.33110046]
[114.46497345 172.33110046]
[114.46497345 187.33110046]
[114.46497345 202.33110046]
[114.46497345 217.33110046]
[114.46497345 232.33110046]
[114.46497345 247.33110046]
[114.46497345 262.33108521]
[114.46497345 277.33108521]
[114.46497345 292.33108521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[36 72]
[37 71]
[38 70]
[39 69]
[40 68]
[43 66]
[44 65]
[45 64]
[83 109]
[84 108]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
