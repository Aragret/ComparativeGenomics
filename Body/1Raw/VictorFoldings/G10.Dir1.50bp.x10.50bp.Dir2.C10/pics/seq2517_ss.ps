%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCxxxxxxxxxxCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[115.29277039 521.73846436]
[115.29277039 506.73846436]
[115.29277039 491.73846436]
[115.29277039 476.73846436]
[115.29277039 461.73846436]
[115.29277039 446.73846436]
[115.29277039 431.73846436]
[115.29277039 416.73846436]
[115.29277039 401.73846436]
[115.29277039 386.73846436]
[100.21170044 383.81362915]
[85.98119354 378.01464844]
[73.14352417 369.56048584]
[62.18826675 358.77148438]
[53.53362656 346.05688477]
[47.51047516 331.89965820]
[44.34970474 316.83782959]
[44.17337036 301.44433594]
[46.98997879 286.30496216]
[52.69411087 271.99621582]
[61.07034683 259.06338501]
[71.80139923 247.99961853]
[84.48016357 239.22724915]
[98.62511444 233.08163452]
[113.69863129 229.79829407]
[111.70930481 227.74458313]
[110.43856812 224.75619507]
[110.25532532 221.11216736]
[111.41720581 217.22276306]
[114.02727509 213.58586121]
[114.93878937 198.61357117]
[115.85030365 183.64129639]
[116.76181793 168.66902161]
[114.04074097 153.91789246]
[107.84725189 140.25624084]
[101.65376282 126.59458923]
[95.46027374 112.93293762]
[84.17849731 103.04751587]
[69.82164001 98.70233917]
[55.46477890 94.35716248]
[41.10791779 90.01198578]
[29.43228149 100.09578705]
[14.15519714 102.24386597]
[0.15152848 95.77078247]
[-8.11020470 82.74207306]
[-7.99371386 67.31514740]
[0.46382931 54.41268539]
[14.56365395 48.15181351]
[29.80655670 50.53035736]
[41.32858276 60.78932571]
[45.45309448 75.65512085]
[59.80995560 80.00029755]
[74.16681671 84.34548187]
[88.52367401 88.69065857]
[94.40766907 84.03999329]
[106.17564392 74.73867035]
[112.05963898 70.08800507]
[111.14812469 55.11573029]
[110.23661041 40.14345169]
[95.30078888 38.36550140]
[80.92252350 33.94902802]
[67.56401062 27.03600311]
[55.65467453 17.84864998]
[45.57734680 6.68230581]
[37.65597534 -6.10407925]
[32.14519882 -20.09947586]
[29.22216415 -34.85398865]
[28.98083687 -49.89332199]
[31.42897224 -64.73402405]
[36.48787689 -78.89902496]
[43.99492264 -91.93298340]
[53.70879364 -103.41690063]
[65.31723022 -112.98163605]
[78.44705963 -120.31970215]
[92.67622375 -125.19522095]
[107.54730988 -127.45146942]
[122.58226776 -127.01590729]
[137.29779053 -123.90254211]
[151.22084045 -118.21144867]
[163.90385437 -110.12558746]
[174.93910217 -99.90486908]
[183.97186279 -87.87786102]
[190.71176147 -74.43116760]
[194.94215393 -59.99705887]
[196.52703857 -45.03952026]
[195.41546631 -30.03938103]
[191.64317322 -15.47883034]
[185.33143616 -1.82593226]
[176.68312073 10.48043060]
[165.97625732 21.04465866]
[153.55502319 29.52715683]
[139.81872559 35.65524673]
[125.20889282 39.23193741]
[126.12040710 54.20421600]
[127.03191376 69.17649841]
[126.01919556 97.19825745]
[109.12191772 106.73944855]
[115.31541443 120.40110016]
[121.50890350 134.06274414]
[127.70239258 147.72439575]
[129.38554382 132.81913757]
[134.52445984 118.72688293]
[142.83128357 106.23702240]
[153.84071350 96.04917145]
[166.93606567 88.73400116]
[181.38380432 84.70126343]
[196.37463379 84.17686462]
[211.06884766 87.19016266]
[224.64335632 93.57238007]
[236.33778381 102.96601868]
[245.49707031 114.84488678]
[251.60816956 128.54359436]
[254.32873535 143.29481506]
[253.50640869 158.27224731]
[249.18725586 172.63696289]
[241.61317444 185.58428955]
[231.20846558 196.38902283]
[218.55593872 204.44589233]
[204.36430359 209.30363464]
[189.42851257 210.69012451]
[174.58520508 208.52769470]
[160.66581726 202.93748474]
[148.45002747 194.23262024]
[138.62211609 182.90071106]
[131.73410034 169.58053589]
[130.82258606 184.55281067]
[129.91107178 199.52508545]
[128.99955750 214.49737549]
[128.69555664 229.49429321]
[143.15164185 231.96200562]
[156.89959717 237.05520630]
[169.46713257 244.59730530]
[180.42279053 254.32757568]
[189.39080811 265.91024780]
[196.06396484 278.94604492]
[200.21409607 292.98593140]
[201.69993591 307.54660034]
[200.47192383 322.12713623]
[196.57379150 336.22619629]
[190.14106750 349.35931396]
[181.39639282 361.07543945]
[170.64170837 370.97259521]
[158.24792480 378.71145630]
[144.64212036 384.02722168]
[130.29277039 386.73846436]
[130.29277039 401.73846436]
[130.29277039 416.73846436]
[130.29277039 431.73846436]
[130.29277039 446.73846436]
[130.29277039 461.73846436]
[130.29277039 476.73846436]
[130.29277039 491.73846436]
[130.29277039 506.73846436]
[130.29277039 521.73846436]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 100]
[35 99]
[36 98]
[37 97]
[38 54]
[39 53]
[40 52]
[41 51]
[57 95]
[58 94]
[59 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
