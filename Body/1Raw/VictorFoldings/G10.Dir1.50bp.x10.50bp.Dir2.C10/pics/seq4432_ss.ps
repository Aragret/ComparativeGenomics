%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUxxxxxxxxxxUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.18309021 192.42056274]
[98.93621826 177.47247314]
[97.68933868 162.52438354]
[96.44246674 147.57629395]
[95.19559479 132.62820435]
[93.94871521 117.68012238]
[85.18251038 105.50828552]
[71.40013123 99.58831787]
[57.61774826 93.66835785]
[43.83536530 87.74839783]
[30.05298424 81.82843018]
[16.27060318 75.90847015]
[9.16775036 89.13113403]
[0.93948597 101.68441772]
[-8.35156822 113.47279358]
[-18.63469887 124.40652466]
[-29.83164597 134.40242004]
[-41.85718918 143.38436890]
[-54.61980820 151.28405762]
[-68.02236938 158.04132080]
[-81.96286774 163.60476685]
[-96.33521271 167.93202209]
[-111.03000641 170.99017334]
[-125.93542480 172.75593567]
[-140.93801880 173.21588135]
[-155.92361450 172.36650085]
[-170.77815247 170.21424866]
[-185.38856506 166.77552795]
[-199.64369202 162.07650757]
[-213.43501282 156.15292358]
[-226.65757751 149.04988098]
[-239.21075439 140.82144165]
[-250.99899292 131.53022766]
[-261.93258667 121.24694061]
[-271.92831421 110.04985809]
[-280.91009521 98.02418518]
[-288.80960083 85.26145935]
[-295.56668091 71.85880280]
[-301.12994385 57.91822052]
[-305.45700073 43.54582214]
[-308.51492310 28.85097885]
[-310.28048706 13.94553852]
[-310.74023438 -1.05706143]
[-309.89062500 -16.04263878]
[-307.73818970 -30.89714432]
[-304.29925537 -45.50752258]
[-299.60000610 -59.76257706]
[-293.67623901 -73.55381775]
[-286.57302856 -86.77628326]
[-278.34442139 -99.32933807]
[-269.05303955 -111.11745453]
[-258.76959229 -122.05089569]
[-247.57235718 -132.04647827]
[-235.54656982 -141.02809143]
[-222.78372192 -148.92741394]
[-209.38098145 -155.68431091]
[-195.44032288 -161.24736023]
[-181.06785583 -165.57421875]
[-166.37297058 -168.63194275]
[-151.46751404 -170.39729309]
[-136.46490479 -170.85681152]
[-121.47933197 -170.00701904]
[-106.62486267 -167.85435486]
[-92.01452637 -164.41522217]
[-77.75953674 -159.71578979]
[-63.96838379 -153.79183960]
[-50.74601746 -146.68843079]
[-38.19307709 -138.45962524]
[-26.40509605 -129.16807556]
[-15.47179222 -118.88449097]
[-5.47637701 -107.68712616]
[3.50507903 -95.66120148]
[11.40421963 -82.89824677]
[18.16092682 -69.49540710]
[23.72377586 -55.55466843]
[28.05043221 -41.18214798]
[31.10796356 -26.48722076]
[32.87310028 -11.58172989]
[33.33241272 3.42088342]
[32.48239899 18.40643692]
[30.32953262 33.26088333]
[26.89019585 47.87116241]
[22.19056511 62.12608719]
[35.97294617 68.04605103]
[49.75532913 73.96601105]
[63.53770828 79.88597870]
[77.32009125 85.80593872]
[91.10247040 91.72590637]
[95.85935974 83.85678864]
[106.65340424 79.89070892]
[119.97054291 83.82862091]
[134.73660278 81.18975830]
[149.50265503 78.55089569]
[161.72640991 68.50647736]
[175.61636353 73.88407135]
[187.84013367 63.83966064]
[201.73008728 69.21724701]
[216.49613953 66.57838440]
[231.26219177 63.93952179]
[246.02824402 61.30065536]
[248.32769775 46.33432007]
[255.36431885 32.92668533]
[266.37484741 22.53211975]
[280.16494751 16.27814102]
[295.23873901 14.84313965]
[309.96115112 18.38276863]
[322.73522949 26.51308060]
[332.17529297 38.35215759]
[337.25738525 52.61578369]
[337.43023682 67.75675201]
[332.67507935 82.13267517]
[323.50775146 94.18416595]
[310.92260742 102.60397339]
[296.28482056 106.47877502]
[281.18218994 105.38825989]
[267.25292969 99.45072174]
[256.00799561 89.31021118]
[248.66711426 76.06671143]
[233.90106201 78.70557404]
[219.13499451 81.34444427]
[204.36894226 83.98330688]
[193.20135498 93.83896637]
[178.25523376 88.65012360]
[167.08763123 98.50579071]
[152.14151001 93.31694794]
[137.37545776 95.95581055]
[122.60940552 98.59468079]
[136.83297729 103.35807800]
[151.05654907 108.12148285]
[166.03103638 108.99608612]
[178.89598083 116.70926666]
[186.72297668 129.50527954]
[187.73039246 144.47142029]
[181.68890381 158.20095825]
[169.97372437 167.56869507]
[155.25154114 170.44226074]
[140.87353516 166.16757202]
[130.11253357 155.71765137]
[125.41826630 141.47404480]
[117.15753174 128.95364380]
[108.89680481 116.43325043]
[110.14367676 131.38133240]
[111.39055634 146.32942200]
[112.63742828 161.27751160]
[113.88430023 176.22560120]
[115.13117981 191.17367554]
[126.40106201 202.59161377]
[124.35782623 218.50402832]
[110.56886292 226.70426941]
[95.61188507 220.90182495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 88]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[91 127]
[92 126]
[93 125]
[95 123]
[97 121]
[98 120]
[99 119]
[100 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
