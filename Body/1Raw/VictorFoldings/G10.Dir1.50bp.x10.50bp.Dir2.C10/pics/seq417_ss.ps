%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUxxxxxxxxxxAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.51913452 257.49835205]
[114.51913452 242.49836731]
[114.51913452 227.49836731]
[114.51913452 212.49836731]
[114.51913452 197.49836731]
[114.51913452 182.49836731]
[114.51913452 167.49836731]
[114.51913452 152.49836731]
[114.51913452 137.49836731]
[114.51913452 122.49835968]
[103.81307220 125.10561371]
[93.55780792 123.13016510]
[85.52703857 117.39367676]
[80.91152954 109.32536316]
[65.97721863 110.72766876]
[51.04291534 112.12996674]
[36.10860443 113.53227234]
[29.96459579 125.91170502]
[18.58676910 133.56402588]
[5.02071333 134.57032776]
[-7.16573811 128.77360535]
[-14.82082272 117.79200745]
[-29.78107262 118.88331604]
[-44.74132156 119.97462463]
[-55.05231857 131.65028381]
[-70.23968506 132.54391479]
[-81.30709839 122.64200592]
[-96.26734924 123.73331451]
[-100.67792511 138.25610352]
[-110.03997040 150.20249939]
[-123.08735657 157.95686340]
[-138.05552673 160.47047424]
[-152.92016602 157.40338135]
[-165.67094421 149.17039490]
[-174.58343506 136.88494873]
[-178.45228577 122.20855713]
[-176.75425720 107.12608337]
[-169.71902466 93.67729187]
[-158.29801941 83.68103790]
[-144.03584290 78.48922729]
[-128.86134338 78.80400848]
[-114.82675171 84.58280945]
[-103.83012390 95.04409790]
[-97.35865784 108.77306366]
[-82.39840698 107.68175507]
[-72.88514709 96.27853394]
[-57.72887421 94.95867920]
[-45.83263016 105.01438141]
[-30.87238312 103.92306519]
[-15.91213322 102.83175659]
[-7.73300982 88.63291168]
[7.44025564 82.01944733]
[23.73244095 85.76728058]
[34.70630264 98.59796906]
[49.64060974 97.19566345]
[64.57492065 95.79335785]
[79.50922394 94.39105225]
[89.97422028 79.20179749]
[109.82940674 77.08681488]
[125.49092865 91.80279541]
[134.99928284 80.20145416]
[144.50764465 68.60011292]
[154.01600647 56.99877548]
[163.52436829 45.39743423]
[149.49078369 10.82235527]
[150.73765564 -4.12573195]
[151.98454285 -19.07381821]
[153.07585144 -34.03406906]
[154.01147461 -49.00485992]
[154.94709778 -63.97565079]
[141.42877197 -70.98809814]
[131.93644714 -82.89673615]
[128.11474609 -97.63832855]
[130.62579346 -112.65879822]
[139.03454590 -125.35575867]
[151.88410950 -133.52938843]
[166.94825745 -135.76354980]
[181.61701965 -131.67117310]
[193.34892273 -121.96128082]
[200.11137390 -108.31616211]
[200.73272705 -93.09992981]
[195.10531616 -78.94887543]
[184.20414734 -68.31476593]
[169.91789246 -63.04002380]
[168.98226929 -48.06922913]
[168.04663086 -33.09843826]
[170.78611755 -26.18172836]
[166.93261719 -17.82694435]
[165.68574524 -2.87885737]
[164.43887329 12.06923008]
[169.87828064 17.23283195]
[178.13902283 4.71243525]
[186.39974976 -7.80796194]
[193.56498718 -20.98594666]
[208.38121033 -23.32679176]
[219.26008606 -12.99963284]
[217.69281006 1.91826522]
[204.90509033 9.75905800]
[192.83110046 18.65954781]
[180.75711060 27.56003761]
[186.19651794 32.72364044]
[201.05957031 30.70130539]
[215.92262268 28.67897034]
[230.78565979 26.65663528]
[235.94638062 12.24741936]
[247.22012329 1.89553666]
[262.01623535 -2.02022386]
[276.93472290 1.39995003]
[288.54739380 11.37012768]
[294.18576050 25.59923553]
[292.55413818 40.81752777]
[284.02749634 53.52795410]
[270.56518555 60.80974960]
[255.26072693 60.98961258]
[241.63099670 54.02621078]
[232.80799866 41.51968384]
[217.94494629 43.54201889]
[203.08190918 45.56435013]
[188.21885681 47.58668518]
[175.12570190 54.90579224]
[165.61734009 66.50713348]
[156.10899353 78.10847473]
[146.60063171 89.70981598]
[137.09226990 101.31115723]
[147.52548218 90.53395844]
[160.95188904 83.84577179]
[175.83911133 82.00992584]
[190.48809814 85.23594666]
[203.22695923 93.15563965]
[212.60179138 104.86514282]
[217.54266357 119.02804565]
[217.48567200 134.02793884]
[212.43731689 148.15287781]
[202.97377014 159.79080200]
[190.17510986 167.61346436]
[175.50202942 170.72807312]
[160.62918091 168.77915955]
[147.25398254 161.98913574]
[136.90296936 151.13296509]
[130.75749207 137.44966125]
[129.51913452 122.49835968]
[129.51913452 137.49836731]
[129.51913452 152.49836731]
[129.51913452 167.49836731]
[129.51913452 182.49836731]
[129.51913452 197.49836731]
[129.51913452 212.49836731]
[129.51913452 227.49836731]
[129.51913452 242.49836731]
[129.51913452 257.49835205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 57]
[15 56]
[16 55]
[17 54]
[22 50]
[23 49]
[24 48]
[27 45]
[28 44]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 90]
[66 89]
[67 88]
[68 86]
[69 85]
[70 84]
[101 119]
[102 118]
[103 117]
[104 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
