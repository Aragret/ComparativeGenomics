%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGxxxxxxxxxxAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.27188110]
[92.50000000 236.27188110]
[92.50000000 221.27188110]
[92.50000000 206.27188110]
[92.50000000 191.27188110]
[92.50000000 176.27188110]
[92.50000000 161.27188110]
[92.50000000 146.27188110]
[92.50000000 131.27188110]
[92.50000000 116.27188110]
[86.53086853 111.73101807]
[79.33948517 124.89475250]
[72.60729218 138.29914856]
[57.63904190 137.32371521]
[52.70342255 123.15898132]
[63.82537460 113.09278870]
[74.59260559 102.64928436]
[68.62347412 98.10842133]
[54.16745758 102.11136627]
[39.71144104 106.11431885]
[25.25542641 110.11727142]
[10.79941177 114.12022400]
[24.40946198 120.42629242]
[32.56975937 133.01237488]
[32.77279663 148.01100159]
[24.95618057 160.81336975]
[11.52181721 167.48554993]
[-3.40216231 165.97727966]
[-15.22989368 156.75205994]
[-20.32693100 142.64460754]
[-17.12705040 127.98989105]
[-6.61208963 117.29022980]
[-21.55131912 118.63909149]
[-36.49054718 119.98794556]
[-51.42977905 121.33680725]
[-66.66102600 128.78297424]
[-78.03262329 116.20826721]
[-69.09731293 101.80005646]
[-52.77863693 106.39758301]
[-37.83940887 105.04872131]
[-22.90017891 103.69985962]
[-7.96094990 102.35099792]
[6.79646015 99.66420746]
[21.25247574 95.66125488]
[35.70849228 91.65830231]
[50.16450500 87.65535736]
[64.62052155 83.65240479]
[85.73860168 78.56333160]
[99.54772949 87.48750305]
[106.47766113 74.18426514]
[113.40758514 60.88102722]
[120.33750916 47.57779312]
[121.50843811 18.03317261]
[120.60852051 3.06019163]
[119.70861053 -11.91278934]
[118.80869293 -26.88576889]
[117.16118622 -41.79502106]
[114.77021027 -56.60323334]
[112.37923431 -71.41145325]
[109.98825836 -86.21966553]
[107.59729004 -101.02787781]
[105.20631409 -115.83609772]
[90.18050385 -117.05615997]
[75.88352203 -121.83734894]
[63.14657593 -129.90168762]
[52.71017456 -140.78033447]
[45.18107224 -153.84082031]
[40.99700546 -168.32380676]
[40.40122604 -183.38728333]
[43.42837906 -198.15548706]
[49.90246201 -211.76980591]
[59.44708633 -223.43872070]
[71.50733185 -232.48382568]
[85.38204193 -238.37922668]
[100.26455688 -240.78219604]
[115.28961945 -239.55302429]
[129.58369446 -234.76316833]
[142.31575012 -226.69111633]
[152.74555969 -215.80613708]
[160.26673889 -202.74110413]
[164.44203186 -188.25556946]
[165.02867126 -173.19174194]
[161.99256897 -158.42536926]
[155.51023865 -144.81498718]
[145.95854187 -133.15185547]
[133.89280701 -124.11406708]
[120.01452637 -118.22707367]
[122.40550232 -103.41885376]
[124.79647827 -88.61064148]
[127.18745422 -73.80242157]
[129.57843018 -58.99420929]
[131.96940613 -44.18599319]
[142.95443726 -54.40014648]
[157.81822205 -52.38323593]
[165.68418884 -39.61113739]
[160.79643250 -25.42981911]
[146.73155212 -20.21644974]
[133.78167725 -27.78568459]
[134.68159485 -12.81270504]
[135.58149719 2.16027594]
[136.48141479 17.13325691]
[148.41967773 26.21498871]
[163.08981323 23.08652878]
[177.75994873 19.95806694]
[179.83497620 4.94240618]
[186.92326355 -8.45654678]
[198.16886902 -18.62080193]
[212.21383667 -24.32297897]
[227.36215210 -24.87450981]
[241.78460693 -20.20879555]
[253.73959351 -10.88924313]
[261.78350830 1.95876551]
[264.94497681 16.78377151]
[262.84228516 31.79558182]
[255.72932434 45.18144989]
[244.46499634 55.32496262]
[230.40954590 61.00124741]
[215.26023865 61.52486038]
[200.84642029 56.83257675]
[188.90863037 47.49100876]
[180.88841248 34.62819672]
[166.21827698 37.75666046]
[151.54814148 40.88512039]
[165.27543640 46.93172836]
[170.06990051 61.14485931]
[162.81010437 74.27098083]
[148.22253418 77.76428223]
[135.80453491 69.35042572]
[133.64074707 54.50771713]
[126.71082306 67.81095886]
[119.78089905 81.11418915]
[112.85096741 94.41742706]
[122.71927643 83.12068176]
[136.07740784 76.29717255]
[151.01434326 74.92308807]
[165.39317322 79.19499969]
[177.15684509 88.50176239]
[184.62245178 101.51194763]
[186.72193909 116.36428833]
[183.15495300 130.93400574]
[174.43179321 143.13673401]
[161.80039978 151.22673035]
[147.06784058 154.04663086]
[132.34178162 151.19302368]
[119.72894287 143.07414246]
[111.03372192 130.85150146]
[107.50000000 116.27188110]
[107.50000000 131.27188110]
[107.50000000 146.27188110]
[107.50000000 161.27188110]
[107.50000000 176.27188110]
[107.50000000 191.27188110]
[107.50000000 206.27188110]
[107.50000000 221.27188110]
[107.50000000 236.27188110]
[107.50000000 251.27188110]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 132]
[50 131]
[51 130]
[52 129]
[53 101]
[54 100]
[55 99]
[56 98]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[102 123]
[103 122]
[104 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
