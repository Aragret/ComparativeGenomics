%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAxxxxxxxxxxGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.90498352 75.71112061]
[121.92225647 86.90689087]
[111.93952942 98.10265350]
[119.71213531 128.47160339]
[112.52962494 141.64018250]
[105.34711456 154.80876160]
[98.16460419 167.97734070]
[90.98209381 181.14591980]
[83.79959106 194.31451416]
[86.92906189 210.04937744]
[76.46857452 222.21316528]
[60.44252014 221.47486877]
[51.14471436 208.40083313]
[55.70763397 193.02033997]
[70.63100433 187.13200378]
[77.81351471 173.96342468]
[84.99602509 160.79483032]
[92.17852783 147.62625122]
[99.36103821 134.45767212]
[106.54354858 121.28908539]
[95.99225616 110.62746429]
[82.74967194 117.67259979]
[69.50708771 124.71773529]
[63.46382141 139.57904053]
[48.03670502 143.98171997]
[35.06010056 134.54841614]
[34.48854828 118.51554871]
[46.76049423 108.18215942]
[62.46195221 111.47514343]
[75.70453644 104.43000793]
[88.94712067 97.38488007]
[100.74376678 88.11992645]
[110.72649384 76.92416382]
[120.70921326 65.72839355]
[109.10355377 53.21096802]
[98.81606293 39.59025574]
[89.95096588 25.00446320]
[82.59806824 9.60157585]
[76.83182526 -6.46215057]
[72.71058655 -23.02376747]
[70.27603149 -39.91529083]
[69.55272675 -56.96540451]
[70.54788208 -74.00119019]
[73.25128174 -90.84989929]
[77.63538361 -107.34067535]
[83.65561676 -123.30632019]
[91.25080109 -138.58496094]
[100.34380341 -153.02172852]
[110.84230804 -166.47026062]
[122.63974762 -178.79425049]
[135.61639404 -189.86882019]
[149.64056396 -199.58174133]
[164.56996155 -207.83462524]
[180.25312805 -214.54388428]
[196.53097534 -219.64158630]
[213.23838806 -223.07615662]
[230.20588684 -224.81289673]
[247.26142883 -224.83430481]
[264.23199463 -223.14028931]
[280.94555664 -219.74815369]
[297.23260498 -214.69242859]
[303.00888062 -228.53564453]
[308.78512573 -242.37887573]
[314.56140137 -256.22207642]
[320.33767700 -270.06530762]
[326.11395264 -283.90850830]
[331.89022827 -297.75173950]
[336.79177856 -311.92828369]
[340.79953003 -326.38299561]
[344.80725098 -340.83767700]
[332.65884399 -332.03903198]
[317.75350952 -330.35656738]
[303.94943237 -336.22576904]
[294.81976318 -348.12741089]
[292.72769165 -362.98080444]
[298.21475220 -376.94119263]
[309.86062622 -386.39495850]
[324.65081787 -388.89501953]
[338.75692749 -383.79425049]
[348.52761841 -372.41299438]
[351.43383789 -357.69732666]
[358.34082031 -371.01248169]
[365.24783325 -384.32763672]
[359.07604980 -398.69577026]
[363.63333130 -413.65454102]
[376.76788330 -422.14089966]
[392.27792358 -420.14782715]
[402.84011841 -408.61639404]
[403.46731567 -392.99139404]
[393.86337280 -380.65048218]
[378.56298828 -377.42062378]
[371.65597534 -364.10546875]
[364.74899292 -350.79031372]
[359.26196289 -336.82992554]
[355.25421143 -322.37524414]
[351.24645996 -307.92056274]
[364.97894287 -313.95538330]
[379.02523804 -308.69216919]
[385.41052246 -295.11911011]
[380.50952148 -280.94235229]
[367.10479736 -274.21084595]
[352.80694580 -278.74636841]
[345.73345947 -291.97546387]
[339.95718384 -278.13226318]
[334.18090820 -264.28903198]
[328.40463257 -250.44581604]
[322.62835693 -236.60260010]
[316.85208130 -222.75938416]
[311.07580566 -208.91615295]
[322.90850830 -202.77569580]
[334.22180176 -195.72332764]
[344.94549561 -187.80271912]
[355.01318359 -179.06291199]
[364.36239624 -169.55804443]
[372.93518066 -159.34696960]
[380.67837524 -148.49295044]
[387.54394531 -137.06321716]
[393.48928833 -125.12857819]
[398.47753906 -112.76296234]
[402.47775269 -100.04299927]
[405.46505737 -87.04749298]
[407.42092896 -73.85697174]
[408.33319092 -60.55316925]
[408.19610596 -47.21852493]
[407.01052856 -33.93567657]
[404.78372192 -20.78694916]
[401.52944946 -7.85383034]
[397.26782227 4.78351927]
[392.02523804 17.04676819]
[385.83410645 28.85990143]
[378.73278809 40.14968872]
[370.76519775 50.84614182]
[361.98071289 60.88294220]
[352.43374634 70.19786072]
[342.18338013 78.73313904]
[331.29315186 86.43584442]
[319.83050537 93.25820160]
[307.86645508 99.15789795]
[295.47509766 104.09832001]
[282.73324585 108.04880524]
[269.71984863 110.98484039]
[256.51550293 112.88816833]
[243.20204163 113.74695587]
[229.86198425 113.55583191]
[216.57798767 112.31593323]
[203.43238831 110.03489685]
[190.50666809 106.72679901]
[177.88090515 102.41211700]
[165.63340759 97.11752319]
[153.84004211 90.87579346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[21 31]
[22 30]
[23 29]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[66 104]
[67 103]
[68 96]
[69 95]
[70 94]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
