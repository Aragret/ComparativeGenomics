%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUxxxxxxxxxxAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[139.98637390 313.59185791]
[139.98637390 298.59185791]
[139.98637390 283.59185791]
[139.98637390 268.59185791]
[139.98637390 253.59185791]
[139.98637390 238.59185791]
[139.98637390 223.59185791]
[139.98637390 208.59185791]
[139.98637390 193.59185791]
[139.98637390 178.59185791]
[135.52957153 164.26927185]
[127.01847076 151.91769409]
[118.50738525 139.56611633]
[109.86827087 127.30375671]
[101.10205841 115.13191986]
[83.65965271 108.94556427]
[68.69940186 107.85425568]
[53.73915863 106.76293945]
[37.39434433 115.17881775]
[23.24957275 104.83834839]
[8.26985931 104.05850220]
[-6.70985508 103.27865601]
[-21.68956947 102.49880981]
[-25.29736137 117.10635376]
[-31.60469437 130.76702881]
[-40.38356400 142.98701477]
[-51.31661987 153.32455444]
[-64.00863647 161.40596008]
[-78.00080872 166.93910217]
[-92.78733063 169.72393799]
[-107.83367157 169.65982056]
[-122.59591675 166.74906921]
[-136.54043579 161.09687805]
[-149.16311646 152.90759277]
[-160.00767517 142.47724915]
[-168.68208313 130.18290710]
[-174.87275696 116.46897125]
[-178.35592651 101.83120728]
[-179.00566101 86.79876709]
[-176.79849243 71.91505432]
[-171.81417847 57.71810913]
[-164.23292542 44.72114563]
[-154.32878113 33.39398956]
[-142.45977783 24.14611816]
[-129.05496216 17.31182861]
[-114.59892273 13.13818073]
[-99.61422729 11.77604866]
[-84.64257050 13.27467060]
[-70.22515869 17.57987404]
[-56.88317871 24.53602982]
[-45.09893417 33.89167404]
[-35.29841995 45.30860901]
[-27.83591270 58.37411499]
[-22.98118401 72.61589050]
[-20.90972519 87.51909637]
[-5.93001032 88.29894257]
[9.04970455 89.07878876]
[24.02941895 89.85862732]
[33.26113510 81.97937012]
[45.78697968 82.54692841]
[54.83046722 91.80269623]
[69.79071808 92.89400482]
[84.75096130 93.98531342]
[97.44589233 85.99539948]
[102.93292236 72.03501129]
[106.18375397 57.39150620]
[107.11937714 42.42071533]
[108.05500793 27.44992447]
[108.99063873 12.47913265]
[109.92626190 -2.49165916]
[96.40792847 -9.50410652]
[86.91560364 -21.41274643]
[83.09390259 -36.15433884]
[85.60494995 -51.17480850]
[94.01370239 -63.87176895]
[106.86328125 -72.04540253]
[121.92742157 -74.27956390]
[136.59617615 -70.18718719]
[148.32809448 -60.47728729]
[155.09053040 -46.83217239]
[155.71188354 -31.61593628]
[150.08448792 -17.46488762]
[139.18330383 -6.83077669]
[124.89705658 -1.55603063]
[123.96142578 13.41476059]
[123.02580261 28.38555336]
[122.09017181 43.35634232]
[121.15454102 58.32713699]
[130.09634399 46.28370285]
[142.73066711 38.19829559]
[157.41220093 35.12382889]
[172.22906494 37.46067810]
[185.25169373 44.90452957]
[194.78424072 56.48600388]
[199.58532715 70.69689941]
[199.02970886 85.68660736]
[193.18977356 99.50308228]
[182.82598877 110.34707642]
[169.28802490 116.80643463]
[154.33882141 118.03997040]
[139.92517090 113.88705444]
[127.92408752 104.88850403]
[119.89840698 92.21615601]
[116.89331818 77.52204132]
[111.40628052 91.48242950]
[113.27389526 106.36570740]
[122.04010773 118.53754425]
[129.64562988 123.71517944]
[130.85896301 131.05503845]
[139.37004089 143.40660095]
[147.88113403 155.75817871]
[147.23121643 140.77226257]
[149.55441284 125.95326233]
[154.75914001 111.88518524]
[162.64028931 99.12245178]
[172.88728333 88.16804504]
[185.09628296 79.45366669]
[198.78613281 73.32274628]
[213.41731262 70.01691437]
[228.41322327 69.66644287]
[243.18286133 72.28514099]
[257.14416504 77.76982117]
[269.74694824 85.90431976]
[280.49450684 96.36806488]
[288.96328735 108.74868011]
[294.81958008 122.55825043]
[297.83251953 137.25253296]
[297.88339233 152.25245667]
[294.97021484 166.96684265]
[289.20779419 180.81582642]
[280.82318115 193.25361633]
[270.14688110 203.79003906]
[257.59957886 212.00985718]
[243.67579651 217.58914185]
[228.92427063 220.30798340]
[213.92633057 220.05926514]
[199.27305603 216.85278320]
[185.54193115 210.81489563]
[173.27407837 202.18354797]
[162.95300293 191.29891968]
[154.98637390 178.59185791]
[154.98637390 193.59185791]
[154.98637390 208.59185791]
[154.98637390 223.59185791]
[154.98637390 238.59185791]
[154.98637390 253.59185791]
[154.98637390 268.59185791]
[154.98637390 283.59185791]
[154.98637390 298.59185791]
[154.98637390 313.59185791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[13 109]
[14 107]
[15 106]
[16 63]
[17 62]
[18 61]
[20 58]
[21 57]
[22 56]
[23 55]
[64 105]
[65 104]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
