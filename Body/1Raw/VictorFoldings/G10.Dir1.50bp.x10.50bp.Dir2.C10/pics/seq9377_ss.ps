%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGAxxxxxxxxxxGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.90022278 281.20538330]
[105.58816528 266.20864868]
[105.27610779 251.21188354]
[104.96405029 236.21513367]
[104.65200043 221.21838379]
[104.33994293 206.22161865]
[104.02788544 191.22486877]
[103.71582794 176.22811890]
[103.40377045 161.23136902]
[89.56055450 155.45509338]
[78.68173218 165.78228760]
[67.80290222 176.10949707]
[56.92407990 186.43670654]
[46.04525375 196.76391602]
[49.71127319 211.67886353]
[45.41325378 226.42411804]
[34.30733871 237.03327942]
[19.38096809 240.65252686]
[4.64925528 236.30831909]
[-5.92503977 225.16920471]
[-9.49748611 210.23155212]
[-5.10711241 195.51353455]
[6.06509161 184.97421265]
[21.01386070 181.44859314]
[35.71804810 185.88508606]
[46.59687424 175.55787659]
[57.47570038 165.23068237]
[68.35452271 154.90347290]
[79.23335266 144.57626343]
[86.41585541 131.40768433]
[89.20818329 116.66987610]
[79.10953522 105.57855988]
[64.17522430 106.98086548]
[51.12234497 116.90831757]
[36.10514832 110.31924438]
[34.57204437 93.99191284]
[48.10015488 84.72248840]
[62.77292252 92.04655457]
[77.70722961 90.64425659]
[63.90993500 84.75913239]
[60.71677780 70.10295105]
[70.81539917 59.01160812]
[85.70592499 60.82054520]
[92.85520172 74.00727844]
[92.85520172 59.00728226]
[92.85520172 44.00728226]
[92.85520172 29.00728035]
[92.85520172 14.00728035]
[79.86757660 8.34755039]
[70.05652618 -1.81249428]
[64.88591003 -14.90920734]
[65.10893250 -28.94449234]
[70.65863800 -41.79063034]
[80.66305542 -51.51284027]
[93.58206177 -56.66066360]
[93.89411926 -71.65741730]
[94.20617676 -86.65416718]
[94.51823425 -101.65092468]
[94.83029175 -116.64767456]
[80.08911896 -119.63727570]
[66.11873627 -125.21115875]
[53.36823273 -133.19015503]
[42.24748230 -143.31777954]
[33.11397171 -155.26846313]
[26.26130867 -168.65803528]
[21.90977287 -183.05609131]
[20.19924927 -197.99977112]
[21.18472672 -213.00872803]
[24.83452606 -227.60046387]
[31.03131866 -241.30592346]
[39.57590485 -253.68452454]
[50.19361115 -264.33834839]
[62.54312134 -272.92492676]
[76.22745514 -279.16824341]
[90.80670929 -282.86758423]
[105.81222534 -283.90402222]
[120.76164246 -282.24426270]
[135.17439270 -277.94165039]
[148.58715820 -271.13452148]
[160.56880188 -262.04162598]
[170.73413086 -250.95535278]
[178.75639343 -238.23202515]
[184.37768555 -224.28065491]
[187.41732788 -209.54971313]
[187.77760315 -194.51277161]
[185.44692993 -179.65316772]
[180.50022888 -165.44859314]
[173.09651184 -152.35566711]
[163.47377014 -140.79527283]
[151.94136047 -131.13902283]
[138.86996460 -123.69733429]
[124.67981720 -118.70941925]
[109.82704163 -116.33562469]
[109.51498413 -101.33886719]
[109.20293427 -86.34211731]
[108.89087677 -71.34535980]
[108.57881927 -56.34860611]
[122.94158173 -49.41237640]
[132.88990784 -36.87099838]
[136.40095520 -21.19330025]
[132.72541809 -5.49372244]
[122.54687500 7.08638048]
[107.85520172 14.00728035]
[107.85520172 29.00728035]
[107.85520172 44.00728226]
[107.85520172 59.00728226]
[107.85520172 74.00727844]
[119.33090973 96.37209320]
[134.03887939 99.31758118]
[148.74684143 102.26306152]
[163.45480347 105.20854187]
[178.16276550 108.15402985]
[192.87071228 111.09951019]
[203.52334595 99.94042969]
[218.52331543 96.33427429]
[233.08419800 101.43175507]
[242.55966187 113.60628510]
[243.92613220 128.97300720]
[236.74755859 142.62847900]
[223.31460571 150.21525574]
[207.91368103 149.31245422]
[195.45915222 140.20814514]
[189.92523193 125.80747223]
[175.21726990 122.86198425]
[160.50930786 119.91650391]
[145.80134583 116.97102356]
[131.09338379 114.02554321]
[116.38542938 111.08005524]
[103.94599152 119.46220398]
[101.15366364 134.20001221]
[103.96089172 119.46503448]
[113.20826721 107.65460968]
[126.83964539 101.39476776]
[141.82409668 102.07737732]
[154.82987976 109.55065918]
[162.96513367 122.15293884]
[164.42103577 137.08210754]
[158.87385559 151.01870728]
[147.55697632 160.86393738]
[132.98672485 164.42872620]
[118.40052795 160.91931152]
[118.71258545 175.91606140]
[119.02463531 190.91281128]
[119.33669281 205.90956116]
[119.64875031 220.90632629]
[119.96080780 235.90307617]
[120.27286530 250.89982605]
[120.58492279 265.89657593]
[120.89697266 280.89334106]
[123.48797607 300.10107422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[30 130]
[31 129]
[32 39]
[33 38]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[108 128]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
