%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUxxxxxxxxxxCUAACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-3.33988786 736.18957520]
[-3.33988786 721.18957520]
[-3.33988786 706.18957520]
[-3.33988786 691.18957520]
[-3.33988786 676.18957520]
[-3.33988786 661.18957520]
[-3.33988786 646.18957520]
[-3.33988786 631.18957520]
[-3.33988786 616.18957520]
[-3.33988786 601.18957520]
[-16.07417297 598.72723389]
[-28.17173004 594.03894043]
[-39.24671555 587.27282715]
[-48.94562149 578.64312744]
[-56.95857620 568.42358398]
[-63.02921677 556.93890381]
[-66.96291351 544.55407715]
[-68.63300323 531.66326904]
[-67.98486328 518.67687988]
[-65.03768921 506.00851440]
[-59.88395691 494.06207275]
[-52.68649673 483.21862793]
[-43.67335510 473.82434082]
[-33.13056946 466.17944336]
[-21.39309692 460.52859497]
[-8.83416557 457.05307007]
[4.14659119 455.86499023]
[5.68388319 440.94396973]
[3.95837235 438.66061401]
[3.06231308 435.53552246]
[3.32889032 431.89193726]
[4.96408749 428.17041016]
[8.00888252 424.87969971]
[10.76512527 410.13510132]
[13.52136803 395.39050293]
[8.25444031 381.45819092]
[18.39577293 369.31472778]
[21.15201569 354.57012939]
[23.90825844 339.82553101]
[26.66450119 325.08093262]
[19.15427208 319.27673340]
[14.27381611 311.06811523]
[12.74332333 301.58273315]
[14.81933117 292.14208984]
[20.25289345 284.07730103]
[28.31859779 278.54165649]
[37.91118622 276.34555054]
[41.86779785 261.87680054]
[45.82440948 247.40802002]
[49.78101730 232.93925476]
[44.39830399 216.26379395]
[57.51851273 203.38392639]
[61.17721939 188.83697510]
[64.83592224 174.29002380]
[68.49462891 159.74307251]
[54.91971970 166.12443542]
[40.74522400 161.21691895]
[34.02215576 147.80795288]
[38.56916428 133.51373291]
[51.80358505 126.45326996]
[66.20835876 130.63685608]
[73.60179138 143.68902588]
[79.02041626 129.70193481]
[84.43904114 115.71485901]
[89.85766602 101.72777557]
[92.76513672 87.01225281]
[93.07311249 72.01541138]
[93.38109589 57.01857376]
[79.15625763 51.82889175]
[67.38881683 42.29966736]
[59.35522461 29.46455574]
[55.92689133 14.71581841]
[57.47570801 -0.34671423]
[63.83366013 -14.08917141]
[74.31109619 -25.02087402]
[87.77149200 -31.95603180]
[102.75476837 -34.14237213]
[117.63565826 -31.34273720]
[130.79998779 -23.86080742]
[140.81977844 -12.50817108]
[146.60818481 1.48372555]
[147.53729248 16.59714508]
[143.50634766 31.19269753]
[134.95257568 43.68716812]
[122.80383301 52.72524643]
[108.37792969 57.32654953]
[108.06995392 72.32338715]
[107.76197815 87.32022858]
[121.51480103 93.30852509]
[132.28347778 82.86651611]
[143.05215454 72.42450714]
[153.82084656 61.98249435]
[152.51759338 46.39931488]
[161.57812500 33.65407944]
[176.72430420 29.76470375]
[190.80458069 36.56763077]
[197.17066956 50.85072708]
[192.81671143 65.86994934]
[179.79850769 74.53368378]
[164.26284790 72.75117493]
[153.49417114 83.19318390]
[142.72549438 93.63519287]
[131.95681763 104.07720184]
[121.84095764 110.38041687]
[111.70017242 111.13030243]
[103.84474945 107.14640045]
[98.42612457 121.13348389]
[93.00749969 135.12055969]
[87.58887482 149.10765076]
[83.04158020 163.40177917]
[79.38288116 177.94873047]
[75.72417450 192.49568176]
[72.06546783 207.04263306]
[78.01504517 218.53202820]
[74.62509918 230.60182190]
[64.24978638 236.89585876]
[60.29317474 251.36463928]
[56.33656693 265.83340454]
[52.37995529 280.30215454]
[64.01134491 297.74841309]
[59.18552780 317.85510254]
[41.40909958 327.83718872]
[38.65285492 342.58178711]
[35.89661407 357.32638550]
[33.14036942 372.07098389]
[38.21015167 387.05789185]
[28.26596451 398.14672852]
[25.50972176 412.89132690]
[22.75347900 427.63592529]
[20.60490036 442.48126221]
[19.06760788 457.40228271]
[35.36497879 462.90093994]
[49.91798782 472.05459595]
[61.92134857 484.35247803]
[70.71183014 499.11004639]
[75.80492401 515.50695801]
[76.92152405 532.63269043]
[74.00322723 549.53717041]
[67.21539307 565.28344727]
[56.93776703 578.99945068]
[43.74322128 589.92657471]
[28.36584854 597.46154785]
[11.66011238 601.18957520]
[11.66011238 616.18957520]
[11.66011238 631.18957520]
[11.66011238 646.18957520]
[11.66011238 661.18957520]
[11.66011238 676.18957520]
[11.66011238 691.18957520]
[11.66011238 706.18957520]
[11.66011238 721.18957520]
[11.66011238 736.18957520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[27 131]
[28 130]
[33 129]
[34 128]
[35 127]
[37 125]
[38 124]
[39 123]
[40 122]
[47 119]
[48 118]
[49 117]
[50 116]
[52 113]
[53 112]
[54 111]
[55 110]
[62 109]
[63 108]
[64 107]
[65 106]
[66 88]
[67 87]
[68 86]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
