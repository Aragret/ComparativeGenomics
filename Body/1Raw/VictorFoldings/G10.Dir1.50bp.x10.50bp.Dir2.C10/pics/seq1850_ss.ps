%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACCUAGCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACxxxxxxxxxxAGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-36.79423141 302.77151489]
[-45.56044006 314.94335938]
[-54.32664490 327.11517334]
[-51.19019318 344.29367065]
[-61.22438431 358.17166138]
[-77.85303497 360.48376465]
[-86.36412811 372.83535767]
[-94.87522125 385.18692017]
[-103.38630676 397.53848267]
[-104.84542084 413.29226685]
[-118.43814087 419.38220215]
[-126.94923401 431.73376465]
[-127.71566010 448.11499023]
[-142.40763855 455.40045166]
[-155.91131592 446.09548950]
[-154.33528137 429.77224731]
[-139.30079651 423.22268677]
[-130.78971863 410.87112427]
[-129.93937683 396.00079346]
[-115.73788452 389.02740479]
[-107.22679138 376.67584229]
[-98.71569824 364.32424927]
[-90.20461273 351.97268677]
[-94.29085541 339.71301270]
[-90.49398804 327.15682983]
[-79.99161530 318.97586060]
[-66.49848175 318.34896851]
[-57.73227692 306.17715454]
[-48.96606827 294.00531006]
[-59.61996078 285.33865356]
[-69.77063751 276.08770752]
[-79.38609314 266.28161621]
[-88.43601990 255.95132446]
[-96.89188385 245.12937927]
[-104.72702789 233.84988403]
[-111.91674805 222.14843750]
[-118.43838501 210.06188965]
[-124.27137756 197.62837219]
[-129.39732361 184.88706970]
[-133.80007935 171.87814331]
[-137.46575928 158.64262390]
[-140.38281250 145.22222900]
[-142.54203796 131.65925598]
[-143.93661499 117.99649048]
[-144.56216431 104.27697754]
[-144.41671753 90.54398346]
[-143.50071716 76.84080505]
[-141.81706238 63.21063614]
[-139.37104797 49.69644547]
[-136.17041016 36.34084320]
[-132.22520447 23.18593407]
[-127.54789734 10.27318764]
[-122.15322876 -2.35668731]
[-116.05819702 -14.66387367]
[-109.28202057 -26.60957146]
[-101.84606171 -38.15612030]
[-93.77377319 -49.26712036]
[-85.09058380 -59.90753937]
[-75.82389069 -70.04383850]
[-66.00289154 -79.64405823]
[-55.65855026 -88.67793274]
[-44.82348633 -97.11698151]
[-33.53184891 -104.93460846]
[-21.81924248 -112.10614777]
[-9.72258854 -118.60901642]
[2.71997547 -124.42269135]
[15.46922302 -129.52885437]
[28.48496246 -133.91140747]
[41.72615814 -137.55653381]
[55.15106964 -140.45274353]
[68.71736908 -142.59089661]
[82.38229370 -143.96426392]
[96.10276031 -144.56851196]
[109.83551025 -144.40173340]
[123.53724670 -143.46446228]
[137.16479492 -141.75964355]
[150.67515564 -139.29264832]
[164.02577209 -136.07127380]
[177.17454529 -132.10565186]
[190.08001709 -127.40830994]
[202.70149231 -121.99402618]
[214.99920654 -115.87989807]
[222.45411682 -128.89620972]
[229.90902710 -141.91252136]
[237.36393738 -154.92881775]
[234.56248474 -170.72538757]
[245.27375793 -182.66893005]
[261.28097534 -181.59738159]
[270.30477905 -168.33274841]
[265.42288208 -153.05052185]
[250.38024902 -147.47390747]
[242.92533875 -134.45761108]
[235.47042847 -121.44129181]
[228.01551819 -108.42498779]
[248.32751465 -94.49394989]
[267.13549805 -78.59079742]
[284.24877930 -60.87677002]
[299.49380493 -41.53149796]
[312.71603394 -20.75112915]
[323.78137207 1.25362730]
[337.68392944 -4.37832928]
[351.58648682 -10.01028633]
[363.99658203 -21.56127739]
[378.53161621 -12.83378983]
[374.16891479 3.54922104]
[357.21844482 3.89226985]
[343.31588745 9.52422619]
[329.41333008 15.15618324]
[333.89132690 28.41935539]
[337.60327148 41.91698456]
[340.53692627 55.60485840]
[342.68276978 69.43814087]
[344.03369141 83.37153625]
[344.58529663 97.35939026]
[344.33581543 111.35588837]
[343.28601074 125.31520081]
[341.43936157 139.19158936]
[338.80187988 152.93960571]
[335.38226318 166.51423645]
[331.19161987 179.87098694]
[326.24377441 192.96614075]
[320.55487061 205.75679016]
[314.14355469 218.20104980]
[307.03082275 230.25814819]
[299.23999023 241.88858032]
[290.79656982 253.05429077]
[281.72821045 263.71868896]
[272.06460571 273.84683228]
[261.83743286 283.40554810]
[251.08016968 292.36352539]
[239.82806396 300.69146729]
[228.11795044 308.36203003]
[215.98820496 315.35012817]
[203.47854614 321.63287354]
[190.62995911 327.18969727]
[177.48452759 332.00234985]
[164.08529663 336.05511475]
[150.47615051 339.33471680]
[136.70169067 341.83038330]
[122.80699921 343.53396606]
[108.83761597 344.43984985]
[94.83928680 344.54510498]
[80.85786438 343.84939575]
[66.93913269 342.35494995]
[53.12868881 340.06671143]
[39.47177124 336.99215698]
[26.01310921 333.14135742]
[12.79678249 328.52691650]
[-0.13391747 323.16394043]
[-12.73663807 317.07003784]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[6 23]
[7 22]
[8 21]
[9 20]
[11 18]
[12 17]
[82 94]
[83 93]
[84 92]
[85 91]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
