%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAxxxxxxxxxxAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.93585205 555.62164307]
[178.93585205 540.62164307]
[178.93585205 525.62164307]
[178.93585205 510.62167358]
[178.93585205 495.62167358]
[178.93585205 480.62167358]
[178.93585205 465.62167358]
[178.93585205 450.62167358]
[178.93585205 435.62167358]
[178.93585205 420.62167358]
[177.37828064 405.70275879]
[174.27995300 391.02624512]
[171.18162537 376.34970093]
[156.48983765 373.68884277]
[143.90197754 365.58383179]
[135.35310364 353.24356079]
[132.17153931 338.53082275]
[134.87254333 323.68093872]
[143.07514954 310.96246338]
[155.55558777 302.33029175]
[152.45727539 287.65374756]
[149.35894775 272.97723389]
[146.26062012 258.30072021]
[143.16230774 243.62419128]
[140.06398010 228.94766235]
[130.07579041 222.05249023]
[127.40332031 209.80189514]
[134.02236938 198.68244934]
[131.23004150 183.94464111]
[119.07695007 171.32315063]
[125.21234131 153.99291992]
[122.11402130 139.31639099]
[119.01570129 124.63986206]
[115.91738129 109.96334076]
[104.16737366 117.25852203]
[91.43185425 114.37010193]
[84.81540680 104.01589203]
[70.24270630 100.46112823]
[55.67000580 96.90636444]
[43.92164612 107.04321289]
[28.45595932 108.30503082]
[15.21981907 100.20662689]
[9.30278969 85.86199951]
[12.98009014 70.78694916]
[24.83772278 60.77814484]
[40.31618881 59.68417358]
[53.46369553 67.92568970]
[59.22476578 82.33366394]
[73.79747009 85.88842773]
[88.37017059 89.44319153]
[96.14488220 83.71961212]
[106.39877319 83.43862152]
[115.48914337 89.38314819]
[117.97425842 74.59043884]
[120.45938110 59.79772949]
[110.44865417 70.96847534]
[98.48454285 80.01612854]
[85.00962067 86.60599518]
[70.52235413 90.49431610]
[55.55865097 91.53723907]
[40.67206192 89.69618988]
[26.41327095 85.03927612]
[13.30974197 77.73876190]
[1.84620321 68.06470490]
[-7.55328369 56.37498474]
[-14.54101181 43.10201645]
[-18.85848808 28.73680305]
[-20.34600067 13.81074047]
[-18.94852448 -1.12401915]
[-14.71775246 -15.51500797]
[-7.81019211 -28.82987213]
[1.51863122 -40.57606506]
[12.92362404 -50.31906891]
[25.98289108 -57.69847107]
[40.21334076 -62.44128799]
[55.08855820 -64.37207031]
[70.05827332 -63.41940308]
[84.56872559 -59.61851883]
[98.08314514 -53.11002731]
[110.10160065 -44.13468552]
[120.17950439 -33.02451324]
[127.94404602 -20.19050217]
[133.10800171 -6.10740948]
[135.48036194 8.70380116]
[134.97334290 23.69522858]
[131.60778809 38.30606842]
[135.97404480 23.09927940]
[150.46284485 19.64615059]
[161.12446594 9.09486008]
[171.78608704 -1.45643020]
[182.44772339 -12.00771999]
[182.27928162 -27.81111145]
[193.39440918 -39.04629898]
[209.19869995 -39.04764175]
[220.31575012 -27.81434822]
[220.14999390 -12.01092815]
[208.79978943 -1.01327240]
[192.99900818 -1.34609425]
[182.33738708 9.20519638]
[171.67575073 19.75648689]
[161.01412964 30.30777740]
[157.41047668 44.75986481]
[142.15908813 48.96769333]
[135.25209045 62.28284836]
[132.76696777 77.07555389]
[130.28184509 91.86826324]
[130.59390259 106.86502075]
[133.69223022 121.54154205]
[136.79054260 136.21806335]
[139.88887024 150.89459229]
[150.27938843 158.60763550]
[152.53053284 170.94259644]
[145.96784973 181.15231323]
[148.76017761 195.89012146]
[161.09602356 209.52122498]
[154.74050903 225.84933472]
[157.83883667 240.52586365]
[160.93714905 255.20239258]
[164.03547668 269.87890625]
[167.13378906 284.55545044]
[170.23211670 299.23196411]
[185.13673401 302.08294678]
[197.78024292 310.40066528]
[206.25309753 322.89166260]
[209.28991699 337.63497925]
[206.45846558 352.37768555]
[198.22077942 364.87911987]
[185.85815430 373.25137329]
[188.95648193 387.92791748]
[192.05479431 402.60443115]
[198.78718567 389.20013428]
[211.24359131 380.84323120]
[226.19972229 379.69686890]
[239.78422546 386.05780029]
[248.48080444 398.27947998]
[250.03834534 413.19839478]
[244.05372620 426.95281982]
[232.07601929 435.98248291]
[217.20561218 437.95004272]
[203.29168701 432.34622192]
[193.93585205 420.62167358]
[193.93585205 435.62167358]
[193.93585205 450.62167358]
[193.93585205 465.62167358]
[193.93585205 480.62167358]
[193.93585205 495.62167358]
[193.93585205 510.62167358]
[193.93585205 525.62164307]
[193.93585205 540.62164307]
[193.93585205 555.62164307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[28 114]
[29 113]
[31 110]
[32 109]
[33 108]
[34 107]
[37 50]
[38 49]
[39 48]
[53 106]
[54 105]
[55 104]
[86 103]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
