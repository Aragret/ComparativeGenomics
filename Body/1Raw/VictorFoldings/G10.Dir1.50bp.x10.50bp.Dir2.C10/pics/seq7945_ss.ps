%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAxxxxxxxxxxCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[162.16062927 276.23001099]
[161.85661316 261.23309326]
[161.55261230 246.23617554]
[161.24861145 231.23925781]
[160.94461060 216.24234009]
[160.64060974 201.24542236]
[160.33659363 186.24850464]
[160.03259277 171.25158691]
[159.72859192 156.25466919]
[152.44906616 143.13946533]
[139.88281250 134.94863892]
[127.31657410 126.75782013]
[111.32331848 139.78941345]
[89.36916351 143.21160889]
[67.19616699 134.53422546]
[55.15088654 143.47352600]
[43.10560226 152.41282654]
[31.06031990 161.35214233]
[19.01503754 170.29144287]
[18.26302910 185.91093445]
[7.60904074 197.35762024]
[-7.91643715 199.22671509]
[-20.98274994 190.63571167]
[-25.42038345 175.64099121]
[-19.13402367 161.32263184]
[-5.09189749 154.44129944]
[10.07573318 158.24615479]
[22.12101555 149.30685425]
[34.16629791 140.36755371]
[46.21158218 131.42825317]
[58.25686264 122.48894501]
[56.97113800 115.09996796]
[43.71101379 122.11203003]
[32.94466782 111.66761780]
[39.55108643 98.20079803]
[54.39969254 100.32202148]
[53.11396790 92.93305206]
[38.75710678 88.58787537]
[24.40024567 84.24269867]
[10.04338646 79.89752197]
[-4.31347418 75.55234528]
[-15.98911190 85.63613892]
[-31.26619530 87.78422546]
[-45.26986313 81.31114197]
[-53.53159714 68.28242493]
[-53.41510773 52.85550308]
[-44.95756149 39.95304489]
[-30.85773849 33.69217300]
[-15.61483574 36.07071304]
[-4.09280968 46.32968521]
[0.03170354 61.19548035]
[14.38856411 65.54065704]
[28.74542427 69.88583374]
[43.10228348 74.23101044]
[57.45914459 78.57619476]
[62.96700287 73.13291168]
[69.08003998 68.87322235]
[75.56628418 65.84435272]
[82.19515991 64.05066681]
[88.74510193 63.45545578]
[87.22757721 48.53241730]
[85.71005249 33.60937881]
[82.95473480 30.08123016]
[81.63619232 26.24211121]
[81.67160797 22.59364319]
[82.82019806 19.55622482]
[84.72466278 17.42357826]
[84.42066193 2.42665911]
[84.11665344 -12.57026005]
[69.84558868 -17.73756599]
[58.40742874 -27.71418762]
[51.34909821 -41.15086746]
[49.62517548 -56.23040771]
[53.46880722 -70.91342163]
[62.36017227 -83.21415710]
[75.09679413 -91.46903229]
[89.95613861 -94.56165314]
[104.92860413 -92.07376099]
[117.98929596 -84.34181976]
[127.37184906 -72.41152191]
[131.80735779 -57.89633179]
[130.69596863 -42.75931931]
[124.18796539 -29.04763222]
[113.16351318 -18.61566925]
[99.11357117 -12.87426376]
[99.41757965 2.12265491]
[99.72158051 17.11957359]
[100.63309479 32.09185410]
[102.15061951 47.01489258]
[103.66814423 61.93793106]
[120.30567932 67.59852600]
[132.65411377 80.10314941]
[138.10516357 96.81050873]
[135.50740051 114.19157410]
[148.07363892 122.38240051]
[160.63987732 130.57322693]
[171.17491150 123.20747375]
[186.46093750 123.80712891]
[201.23887634 121.23567963]
[216.01681519 118.66423035]
[218.72369385 105.66633606]
[225.68534851 94.39876556]
[236.04801941 86.20179749]
[248.55494690 82.04167938]
[261.69879150 82.39676666]
[273.90322876 87.20259857]
[283.71218872 95.86230469]
[289.96325684 107.32057953]
[304.83328247 105.35012817]
[319.70330811 103.37967682]
[330.56115723 91.56923676]
[346.55395508 92.83824921]
[355.41336060 106.21323395]
[350.34323120 121.43405151]
[335.23291016 126.82459259]
[321.67373657 118.24968719]
[306.80374146 120.22013855]
[291.93371582 122.19058990]
[287.16442871 138.34727478]
[275.79714966 150.85443115]
[260.06610107 157.18246460]
[243.09442139 156.02330017]
[228.27413940 147.56050110]
[218.58827209 133.44218445]
[203.81033325 136.01362610]
[189.03237915 138.58508301]
[203.23406982 143.41334534]
[217.43574524 148.24160767]
[231.63743591 153.06987000]
[246.62834167 153.59219360]
[260.41088867 159.51176453]
[271.11123657 170.02378845]
[277.27459717 183.69905090]
[278.06301880 198.67831421]
[273.36929321 212.92503357]
[263.83157349 224.50225830]
[250.74661255 231.83596802]
[235.89337158 233.92910767]
[221.29127502 230.49708557]
[208.92558289 222.00650024]
[200.47752380 209.61174011]
[197.09559631 194.99652100]
[189.63890076 181.98123169]
[182.18220520 168.96594238]
[174.72550964 155.95065308]
[175.02951050 170.94757080]
[175.33351135 185.94448853]
[175.63752747 200.94142151]
[175.94152832 215.93833923]
[176.24552917 230.93525696]
[176.54953003 245.93217468]
[176.85354614 260.92907715]
[177.15754700 275.92599487]
[179.73823547 295.13513184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 96]
[11 95]
[12 94]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[60 90]
[61 89]
[62 88]
[67 87]
[68 86]
[69 85]
[98 126]
[99 125]
[100 124]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
