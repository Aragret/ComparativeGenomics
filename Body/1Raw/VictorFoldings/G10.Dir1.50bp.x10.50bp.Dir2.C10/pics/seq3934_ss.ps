%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAxxxxxxxxxxUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.53901672 319.06393433]
[80.53901672 304.06393433]
[80.53901672 289.06393433]
[80.53901672 274.06393433]
[80.53901672 259.06393433]
[80.53901672 244.06394958]
[80.53901672 229.06394958]
[80.53901672 214.06394958]
[80.53901672 199.06394958]
[80.53901672 184.06394958]
[73.93141937 180.51574707]
[66.83502197 193.73092651]
[59.73861694 206.94610596]
[52.64199448 220.16117859]
[39.42704391 213.06433105]
[46.52343369 199.84970093]
[53.61983490 186.63452148]
[60.71623993 173.41934204]
[54.10864639 169.87113953]
[41.60461044 178.15661621]
[29.10057640 186.44209290]
[24.51386452 201.81549072]
[9.58140278 207.68074036]
[-4.24190092 199.53851318]
[-6.35199165 183.63484192]
[4.86981153 172.16964722]
[20.81510162 173.93804932]
[33.31913757 165.65257263]
[45.82317352 157.36709595]
[66.75105286 152.22489929]
[82.58685303 159.18685913]
[85.03977966 144.38877869]
[87.49270630 129.59071350]
[89.94564056 114.79262543]
[81.82035828 127.40135193]
[67.03106689 129.90669250]
[55.20639420 120.67755127]
[54.04484940 105.72259521]
[64.30266571 94.77831268]
[79.30103302 94.96985626]
[65.61040497 88.84067535]
[51.91978073 82.71150208]
[38.22915649 76.58232880]
[25.83223915 85.64941406]
[10.56093216 87.28733063]
[-3.47686005 81.05548096]
[-12.50504208 68.63020325]
[-14.09507847 53.35383606]
[-7.81925678 39.33564758]
[4.63425779 30.34645462]
[19.91553307 28.80431175]
[33.91398239 35.12404251]
[42.86409378 47.60567093]
[44.35832977 62.89170456]
[58.04895401 69.02088165]
[71.73957825 75.15005493]
[85.43020630 81.27922821]
[95.07202148 69.78855896]
[86.65860748 57.37024689]
[78.24520111 44.95193100]
[64.35543823 35.23026657]
[69.85210419 19.19209480]
[86.78513336 20.03414536]
[90.66351318 36.53852081]
[99.07692719 48.95683670]
[107.49033356 61.37514877]
[106.63243866 72.01709747]
[104.91525269 82.50548553]
[102.35068512 92.78778839]
[113.74175262 83.02851105]
[125.13282776 73.26924133]
[117.54584503 59.83836746]
[112.71211243 45.19450760]
[110.81386566 29.89544678]
[111.92153931 14.52356148]
[115.99118805 -0.33634627]
[122.86623383 -14.11930466]
[132.28343201 -26.30165100]
[143.88305664 -36.42092514]
[157.22248840 -44.09342194]
[171.79328918 -49.02875519]
[187.04039001 -51.04082489]
[202.38340759 -50.05485535]
[217.23861694 -46.11016083]
[231.04119873 -39.35858154]
[243.26675415 -30.05864525]
[254.45504761 -40.04973984]
[265.64334106 -50.04084015]
[276.83163452 -60.03193665]
[288.01992798 -70.02303314]
[299.20822144 -80.01412964]
[310.18902588 -90.23283386]
[320.95770264 -100.67484283]
[331.72637939 -111.11685181]
[338.88842773 -126.48374939]
[355.63742065 -123.85559082]
[357.74856567 -107.03359222]
[342.16839600 -100.34817505]
[331.39971924 -89.90616608]
[320.63104248 -79.46415710]
[319.66702271 -74.72919464]
[315.67980957 -70.57107544]
[309.19934082 -68.82583618]
[298.01101685 -58.83473587]
[286.82272339 -48.84363937]
[275.63442993 -38.85254288]
[264.44613647 -28.86144447]
[253.25784302 -18.87034798]
[260.79388428 -6.36025667]
[265.89154053 7.33021593]
[268.37402344 21.73067284]
[268.15441895 36.34601593]
[265.23876953 50.67348480]
[259.72586060 64.21993256]
[251.80393982 76.51879883]
[241.74421692 87.14620209]
[229.89160156 95.73553467]
[216.65293884 101.99008942]
[202.48294067 105.69335175]
[187.86866760 106.71644592]
[173.31269836 105.02266693]
[159.31593323 100.66876221]
[146.36027527 93.80303192]
[134.89210510 84.66030884]
[123.50102997 94.41958618]
[112.10995483 104.17886353]
[104.74371338 117.24555206]
[102.29078674 132.04364014]
[99.83786011 146.84172058]
[97.38493347 161.63978577]
[106.18013763 149.48889160]
[119.26116180 142.14813232]
[134.21495056 140.97166443]
[148.28298950 146.17649841]
[158.87013245 156.80252075]
[164.02339172 170.88954163]
[162.79211426 185.83892822]
[155.40347290 198.89295959]
[143.22041321 207.64356995]
[128.49037170 210.47653198]
[113.93057251 206.86924744]
[102.22688293 197.48716736]
[95.53901672 184.06394958]
[95.53901672 199.06394958]
[95.53901672 214.06394958]
[95.53901672 229.06394958]
[95.53901672 244.06394958]
[95.53901672 259.06393433]
[95.53901672 274.06393433]
[95.53901672 289.06393433]
[95.53901672 304.06393433]
[95.53901672 319.06393433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[19 29]
[20 28]
[21 27]
[31 130]
[32 129]
[33 128]
[34 127]
[40 57]
[41 56]
[42 55]
[43 54]
[58 66]
[59 65]
[60 64]
[69 126]
[70 125]
[71 124]
[86 108]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
