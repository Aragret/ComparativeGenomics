%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACxxxxxxxxxxGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.28115845 296.78198242]
[112.65718079 281.79498291]
[112.03320312 266.80795288]
[111.40922546 251.82093811]
[110.78524780 236.83392334]
[110.16127014 221.84690857]
[109.53729248 206.85989380]
[108.91331482 191.87287903]
[106.42819214 177.08016968]
[102.12061310 162.71199036]
[97.81302643 148.34379578]
[93.50543976 133.97561646]
[90.39723206 148.65005493]
[89.44792938 163.61997986]
[79.34249878 174.70512390]
[64.52402496 177.03164673]
[51.50776672 169.57664490]
[46.01662064 155.61787415]
[50.46488571 141.29261780]
[62.89647293 132.89936829]
[73.98097992 122.79325104]
[59.40827560 126.34801483]
[53.08140182 143.28269958]
[38.01454926 152.98693848]
[20.29148483 151.76480103]
[6.93655777 140.28813171]
[-7.47565842 144.44602966]
[-21.88787460 148.60391235]
[-36.30009079 152.76179504]
[-49.84255600 162.96170044]
[-63.39276886 152.77209473]
[-57.35244370 136.93066406]
[-40.45797729 138.34957886]
[-26.04576111 134.19169617]
[-11.63354588 130.03381348]
[2.77867031 125.87592316]
[5.19796753 113.90563965]
[12.54086208 104.05695343]
[23.45038795 98.25335693]
[35.86585999 97.66115570]
[47.41202927 102.45555115]
[55.85351181 111.77531433]
[70.42621613 108.22055054]
[73.94881439 90.46735382]
[86.04367828 79.51672363]
[100.51972961 78.17478180]
[106.00676727 64.21439362]
[101.57335663 52.05714035]
[106.47962189 40.51818085]
[117.57678986 35.60288239]
[123.35306549 21.75966263]
[129.12933350 7.91644526]
[134.90560913 -5.92677212]
[140.68188477 -19.76999092]
[146.45816040 -33.61320877]
[137.51062012 -43.18886566]
[136.70658875 -59.05244064]
[135.77095032 -74.02323151]
[134.83532715 -88.99402618]
[133.89970398 -103.96481323]
[119.01721191 -106.27257538]
[104.97893524 -111.72608948]
[92.44146729 -120.07029724]
[81.99119568 -130.91493225]
[74.11690521 -143.75274658]
[69.18688965 -157.98332214]
[67.43173981 -172.94104004]
[68.93354797 -187.92631531]
[73.62206268 -202.23826599]
[81.27799988 -215.20748901]
[91.54327393 -226.22738647]
[103.93775940 -234.78254700]
[117.88175201 -240.47282410]
[132.72305298 -243.03207397]
[147.76751709 -242.34059143]
[162.31149292 -238.43072510]
[175.67471313 -231.48535156]
[187.23217773 -221.82929993]
[196.44329834 -209.91421509]
[202.87727356 -196.29739380]
[206.23316956 -181.61570740]
[206.35403442 -166.55584717]
[203.23419189 -151.82218933]
[197.01957703 -138.10385132]
[188.00086975 -126.04247284]
[176.59986877 -116.20217896]
[163.34983826 -109.04322815]
[148.87048340 -104.90044403]
[149.80612183 -89.92964935]
[150.74174500 -74.95886230]
[151.67736816 -59.98807144]
[164.53578186 -52.26398468]
[178.19201660 -58.46939087]
[191.84826660 -64.67479706]
[205.50450134 -70.88020325]
[219.16073608 -77.08561707]
[232.61671448 -83.71411133]
[245.85929871 -90.75924683]
[259.10186768 -97.80438232]
[267.32522583 -111.99270630]
[283.72164917 -111.69467163]
[291.42395020 -97.21685791]
[282.50860596 -83.45281219]
[266.14700317 -84.56179810]
[252.90443420 -77.51666260]
[239.66183472 -70.47152710]
[238.28987122 -67.15714264]
[235.20843506 -64.36312866]
[230.68983459 -62.90211868]
[225.36614990 -63.42937088]
[211.70991516 -57.22396469]
[198.05366516 -51.01855850]
[184.39743042 -44.81315231]
[170.74118042 -38.60774231]
[160.30137634 -27.83693504]
[154.52510071 -13.99371719]
[148.74882507 -0.15049990]
[142.97254944 13.69271755]
[137.19628906 27.53593636]
[131.42001343 41.37915421]
[134.62487793 58.60497284]
[119.96715546 69.70142365]
[114.48012543 83.66181183]
[125.55424500 106.06116486]
[107.87362671 129.66802979]
[112.18121338 144.03620911]
[116.48879242 158.40440369]
[120.79637909 172.77258301]
[125.66419220 158.58441162]
[136.12002563 147.82914734]
[150.16514587 142.56278992]
[165.11470032 143.79205322]
[178.11091614 151.28193665]
[186.66944885 163.60067749]
[189.15423584 178.39343262]
[185.09031677 192.83242798]
[175.25451660 204.15750122]
[161.52706909 210.20373535]
[146.53210449 209.81536865]
[133.13604736 203.06660461]
[123.90032959 191.24890137]
[124.52430725 206.23591614]
[125.14828491 221.22293091]
[125.77226257 236.20994568]
[126.39624023 251.19696045]
[127.02021790 266.18399048]
[127.64419556 281.17098999]
[128.26817322 296.15802002]
[134.96815491 311.73190308]
[121.85763550 322.48135376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 128]
[10 127]
[11 126]
[12 125]
[21 43]
[22 42]
[26 36]
[27 35]
[28 34]
[29 33]
[46 123]
[47 122]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[55 115]
[57 91]
[58 90]
[59 89]
[60 88]
[92 114]
[93 113]
[94 112]
[95 111]
[96 110]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
