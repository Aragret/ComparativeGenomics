%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUxxxxxxxxxxACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[189.88279724 76.81621552]
[175.75799561 81.86497498]
[161.63319397 86.91372681]
[147.50839233 91.96248627]
[133.38359070 97.01124573]
[124.00315094 108.58089447]
[108.40392303 105.93994904]
[95.23533630 113.12245941]
[83.34295654 122.26419067]
[71.45057678 131.40592957]
[59.55820084 140.54766846]
[47.66582108 149.68939209]
[35.77344131 158.83113098]
[23.88106155 167.97286987]
[11.98868179 177.11459351]
[15.59764862 191.90971375]
[12.87050343 206.89245605]
[4.27974081 219.46697998]
[-8.68623829 227.45466614]
[-23.78099823 229.47161865]
[-38.38928223 225.16838074]
[-49.98011780 215.29049683]
[-56.54531860 201.54939270]
[-56.94742584 186.32579041]
[-51.11677551 172.25726318]
[-40.06355667 161.78128052]
[-25.70281219 156.71286011]
[-10.52262402 157.93013000]
[2.84694743 165.22221375]
[14.73932743 156.08049011]
[26.63170624 146.93875122]
[38.52408600 137.79701233]
[50.41646576 128.65528870]
[62.30884552 119.51354980]
[74.20122528 110.37181091]
[86.09360504 101.23007965]
[84.62086487 93.87609863]
[80.20264435 71.81415558]
[65.70704651 67.95699310]
[51.21144867 64.09983826]
[38.52235031 73.23880768]
[22.93142509 72.03172302]
[11.80022907 61.04853439]
[10.38457298 45.47516251]
[19.35288620 32.66487885]
[34.47060776 28.66630936]
[48.59960556 35.36745453]
[55.06860733 49.60424042]
[69.56420135 53.46139908]
[84.05979919 57.31855774]
[100.42984772 72.80002594]
[103.35516357 91.81514740]
[113.74589539 79.88437653]
[128.33482361 82.88643646]
[142.45962524 77.83768463]
[156.58442688 72.78892517]
[170.70924377 67.74017334]
[184.83404541 62.69141388]
[181.10755920 49.15087128]
[178.36552429 35.37742233]
[176.62216187 21.44254112]
[175.88644409 7.41853857]
[176.16218567 -6.62181520]
[177.44792175 -20.60566711]
[179.73693848 -34.46046066]
[183.01731873 -48.11431122]
[187.27203369 -61.49637222]
[192.47895813 -74.53722382]
[198.61103821 -87.16920471]
[205.63644409 -99.32678986]
[213.51867676 -110.94690704]
[222.21682739 -121.96928406]
[231.68572998 -132.33673096]
[241.87622070 -141.99549866]
[252.73539734 -150.89547729]
[264.20690918 -158.99050903]
[276.23120117 -166.23863220]
[288.74584961 -172.60224915]
[301.68594360 -178.04837036]
[314.98428345 -182.54878235]
[328.57186890 -186.08013916]
[342.37820435 -188.62417603]
[356.33163452 -190.16769409]
[370.35977173 -190.70274353]
[384.38977051 -190.22657776]
[398.34887695 -188.74168396]
[412.16464233 -186.25579834]
[425.76541138 -182.78187561]
[439.08059692 -178.33793640]
[452.04113770 -172.94711304]
[464.57974243 -166.63739014]
[476.63143921 -159.44151306]
[488.13366699 -151.39688110]
[499.02676392 -142.54525757]
[509.25421143 -132.93258667]
[518.76300049 -122.60877991]
[527.50384521 -111.62741852]
[535.43127441 -100.04550934]
[542.50433350 -87.92317200]
[548.68627930 -75.32331848]
[553.94506836 -62.31134415]
[558.25347900 -48.95477676]
[561.58917236 -35.32293320]
[563.93481445 -21.48655701]
[578.86907959 -22.88886070]
[593.80340576 -24.29116440]
[608.73773193 -25.69346809]
[623.67205811 -27.09577179]
[634.97210693 -38.48382568]
[650.90490723 -36.60622787]
[659.24816895 -22.90331268]
[653.60162354 -7.88678360]
[638.29681396 -3.07603621]
[625.07434082 -12.16146374]
[610.14001465 -10.75916004]
[595.20574951 -9.35685730]
[580.27142334 -7.95455313]
[565.33709717 -6.55224943]
[565.56262207 9.57144833]
[564.45385742 25.65891457]
[562.01855469 41.59993744]
[558.27313232 57.28529739]
[553.24328613 72.60752869]
[546.96343994 87.46163940]
[539.47656250 101.74584961]
[530.83386230 115.36228180]
[521.09448242 128.21762085]
[510.32510376 140.22375488]
[498.59948730 151.29840088]
[485.99792480 161.36564636]
[472.60668945 170.35647583]
[458.51748657 178.20925903]
[443.82681274 184.87014771]
[428.63528442 190.29342651]
[413.04696655 194.44192505]
[397.16860962 197.28715515]
[381.10900879 198.80957031]
[364.97817993 198.99867249]
[348.88659668 197.85311890]
[332.94451904 195.38067627]
[317.26119995 191.59826660]
[301.94403076 186.53170776]
[287.09802246 180.21568298]
[272.82485962 172.69337463]
[259.22238159 164.01629639]
[246.38380432 154.24383545]
[234.39709473 143.44287109]
[223.34442139 131.68737793]
[213.30154419 119.05785370]
[204.33731079 105.64076233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[7 52]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[38 50]
[39 49]
[40 48]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
