%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCxxxxxxxxxxAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.82997131 302.72973633]
[141.20599365 287.74270630]
[140.58201599 272.75570679]
[139.95803833 257.76867676]
[139.33406067 242.78166199]
[138.71008301 227.79464722]
[138.08610535 212.80763245]
[137.46212769 197.82061768]
[132.70831299 183.59384155]
[124.19721985 171.24226379]
[115.68613434 158.89068604]
[107.17504120 146.53912354]
[98.66395569 134.18754578]
[84.16835785 130.33038330]
[70.64416504 136.81855774]
[57.11997604 143.30671692]
[43.59578705 149.79487610]
[30.07159615 156.28305054]
[16.68531036 163.05116272]
[3.44272518 170.09629822]
[-9.79986095 177.14143372]
[-10.96521187 192.52471924]
[-20.28062439 204.82214355]
[-34.77358627 210.10963440]
[-49.81944275 206.69998169]
[-60.61711884 195.68119812]
[-63.72111511 180.56932068]
[-58.14095306 166.18650818]
[-45.65724945 157.12225342]
[-30.25350380 156.26893616]
[-16.84499550 163.89884949]
[-3.60240984 156.85371399]
[9.64017582 149.80857849]
[11.88036537 145.52406311]
[16.86837387 142.63423157]
[23.58343124 142.75885010]
[37.10762024 136.27069092]
[50.63180923 129.78253174]
[64.15599823 123.29435730]
[77.68019104 116.80619812]
[74.06415558 100.94985962]
[79.85061646 87.02263641]
[91.64701080 79.66854095]
[91.02303314 64.68152618]
[90.39905548 49.69450760]
[75.41498566 48.74832535]
[60.61190414 46.24103546]
[46.15200424 42.20011902]
[32.19371796 36.66984177]
[18.88997841 29.71080208]
[6.38654995 21.39924431]
[-5.17957354 11.82623482]
[-15.68166733 1.09666145]
[-25.00466347 -10.67191696]
[-33.04641724 -23.35055733]
[-39.71881485 -36.80034637]
[-44.94875336 -50.87391663]
[-48.67892838 -65.41707611]
[-50.86847305 -80.27048492]
[-51.49339294 -95.27138519]
[-50.54684448 -110.25543976]
[-48.03919601 -125.05845642]
[-43.99792862 -139.51826477]
[-38.46731186 -153.47640991]
[-31.50794792 -166.77998352]
[-23.19608688 -179.28320312]
[-13.62279701 -190.84910583]
[-2.89296913 -201.35093689]
[8.87583542 -210.67364502]
[21.55467033 -218.71508789]
[35.00462341 -225.38716125]
[49.07832336 -230.61676025]
[63.62157059 -234.34657288]
[78.47502899 -236.53576660]
[93.47595215 -237.16032410]
[108.45997620 -236.21340942]
[123.26293945 -233.70539856]
[137.72264099 -229.66377258]
[151.68066406 -224.13282776]
[164.98405457 -217.17314148]
[177.48707581 -208.86097717]
[189.05273438 -199.28739929]
[199.55430603 -188.55731201]
[208.87673950 -176.78828430]
[216.91787720 -164.10925293]
[223.58961487 -150.65914917]
[228.81887817 -136.58531189]
[232.54833984 -122.04197693]
[234.73716736 -107.18846130]
[235.36135864 -92.18753052]
[234.41407776 -77.20352173]
[231.90571594 -62.40062332]
[227.86373901 -47.94102097]
[222.33244324 -33.98313522]
[215.37243652 -20.67990494]
[207.05996704 -8.17708206]
[197.48611450 3.38834357]
[186.75578308 13.88965511]
[174.98652649 23.21179581]
[162.30729675 31.25262451]
[148.85702515 37.92404175]
[134.78306580 43.15295410]
[120.23963928 46.88207245]
[105.38607025 49.07052994]
[106.01004791 64.05754852]
[106.63402557 79.04456329]
[121.53595734 89.48276520]
[124.32934570 109.03620148]
[111.01552582 125.67645264]
[119.52661133 138.02803040]
[128.03770447 150.37959290]
[136.54879761 162.73117065]
[145.05989075 175.08274841]
[144.30198669 160.10189819]
[146.72164917 145.29835510]
[152.20993042 131.33845520]
[160.51980591 118.85061646]
[171.27719116 108.39696503]
[183.99784851 100.44807434]
[198.10916138 95.36175537]
[212.97593689 93.36696625]
[227.92892456 94.55349731]
[242.29505920 98.86795044]
[255.42762756 106.11609650]
[266.73547363 115.97167206]
[275.70959473 127.99103546]
[281.94604492 141.63313293]
[285.16403198 156.28388977]
[285.21875000 171.28378296]
[282.10775757 185.95762634]
[275.97100830 199.64486694]
[267.08483887 211.72938538]
[255.84918213 221.66720581]
[242.76985168 229.01098633]
[228.43559265 233.43014526]
[213.49165344 234.72575378]
[198.61071777 232.83949280]
[184.46266174 227.85626221]
[171.68434143 220.00041199]
[160.85098267 209.62553406]
[152.44914246 197.19664001]
[153.07312012 212.18365479]
[153.69709778 227.17066956]
[154.32107544 242.15768433]
[154.94505310 257.14471436]
[155.56903076 272.13171387]
[156.19300842 287.11874390]
[156.81698608 302.10574341]
[163.51696777 317.67965698]
[150.40644836 328.42907715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 33]
[20 32]
[21 31]
[43 106]
[44 105]
[45 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
