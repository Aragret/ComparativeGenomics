%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 254.21481323]
[92.50000000 239.21481323]
[92.50000000 224.21481323]
[92.50000000 209.21481323]
[92.50000000 194.21481323]
[92.50000000 179.21481323]
[92.50000000 164.21481323]
[92.50000000 149.21481323]
[92.50000000 134.21481323]
[92.50000000 119.21480560]
[87.06571960 114.04579926]
[76.72753906 124.91419220]
[65.85930634 114.57585144]
[76.19716644 103.70778656]
[70.76288605 98.53878021]
[55.78165436 99.28884888]
[40.80041885 100.03891754]
[25.81918335 100.78898621]
[23.99495888 108.69637299]
[20.25671196 116.05773926]
[14.76405907 122.40947723]
[7.78883696 127.33387756]
[-0.29792386 130.48623657]
[-9.04555798 131.61830139]
[-17.94882965 130.59651184]
[-26.47711372 127.41368866]
[-34.10599899 122.19337463]
[-40.34945297 115.18619537]
[-54.95404816 118.60755920]
[-69.55864716 122.02892303]
[-84.16324615 125.45029449]
[-95.74389648 137.06150818]
[-111.51799774 132.57710266]
[-115.25849152 116.61024475]
[-103.11749268 105.58626556]
[-87.58460999 110.84569550]
[-72.98001099 107.42433167]
[-58.37541580 104.00296021]
[-43.77081680 100.58159637]
[-43.02075195 85.60036469]
[-57.21057129 80.73734283]
[-71.40039062 75.87432098]
[-82.92443848 86.02774048]
[-97.98442078 89.04311371]
[-112.52928925 84.10930634]
[-122.64653778 72.55348969]
[-125.61468506 57.48413086]
[-120.63530731 42.95479965]
[-109.04784393 32.87382126]
[-93.96925354 29.95292282]
[-79.45560455 34.97781372]
[-69.41099548 46.59682465]
[-66.53737640 61.68449783]
[-52.34755325 66.54751587]
[-38.15773010 71.41053772]
[-13.78274536 58.40677643]
[11.59910774 64.97401428]
[25.06911659 85.80774689]
[40.05035019 85.05767822]
[55.03158569 84.30761719]
[70.01281738 83.55754852]
[84.94399261 77.53717804]
[97.78292084 80.23947906]
[104.56705475 88.12049103]
[114.68553162 77.04726410]
[124.80400085 65.97402954]
[134.92248535 54.90079880]
[145.04095459 43.82756805]
[155.15942383 32.75433731]
[165.27790833 21.68110466]
[155.41870117 10.35442162]
[146.91491699 -2.02231598]
[139.87745667 -15.28775120]
[134.39804077 -29.26894379]
[130.54809570 -43.78361893]
[128.37783813 -58.64254761]
[127.91555786 -73.65200806]
[129.16726685 -88.61633301]
[132.11665344 -103.34042358]
[136.72528076 -117.63232422]
[142.93304443 -131.30570984]
[150.65901184 -144.18231201]
[159.80249023 -156.09428406]
[170.24423218 -166.88629150]
[181.84814453 -176.41766357]
[194.46293640 -184.56413269]
[207.92413330 -191.21948242]
[222.05625916 -196.29696655]
[236.67506409 -199.73037720]
[251.58996582 -201.47496033]
[266.60650635 -201.50796509]
[281.52893066 -199.82896423]
[296.16268921 -196.45985413]
[310.31698608 -191.44453430]
[323.80731201 -184.84840393]
[336.45779419 -176.75747681]
[348.10348511 -167.27720642]
[358.59259033 -156.53118896]
[367.78833008 -144.65953064]
[375.57083130 -131.81701660]
[381.83862305 -118.17105103]
[386.51004028 -103.89954376]
[389.52410889 -89.18856049]
[390.84158325 -74.22988129]
[390.44528198 -59.21853256]
[388.34036255 -44.35020828]
[384.55426025 -29.81875038]
[379.13635254 -15.81360817]
[372.15725708 -2.51736593]
[363.70797729 9.89663219]
[353.89865112 21.26654243]
[342.85717773 31.44413757]
[330.72747803 40.29673004]
[317.66772461 47.70891190]
[303.84814453 53.58404160]
[289.44894409 57.84553146]
[274.65780640 60.43782425]
[259.66757202 61.32712173]
[244.67367554 60.50183105]
[229.87161255 57.97271347]
[215.45433044 53.77273560]
[201.60980225 47.95666122]
[188.51850891 40.60030746]
[176.35113525 31.79957962]
[166.23266602 42.87281036]
[156.11418152 53.94604111]
[145.99571228 65.01927185]
[135.87722778 76.09250641]
[125.75875854 87.16573334]
[115.64028168 98.23896790]
[126.35960388 87.74629974]
[139.96104431 81.42167664]
[154.89227295 79.98692322]
[169.44918823 83.60580444]
[181.97041321 91.86528015]
[191.02688599 103.82270813]
[195.58502197 118.11338043]
[195.12458801 133.10630798]
[189.69813538 147.09036255]
[179.92497253 158.46952820]
[166.92053223 165.94509888]
[152.16897583 168.66390991]
[137.35392761 166.31564331]
[124.16622162 159.16831970]
[114.11095428 148.03765869]
[108.33574677 134.19400024]
[107.50000000 119.21480560]
[107.50000000 134.21481323]
[107.50000000 149.21481323]
[107.50000000 164.21481323]
[107.50000000 179.21481323]
[107.50000000 194.21481323]
[107.50000000 209.21481323]
[107.50000000 224.21481323]
[107.50000000 239.21481323]
[107.50000000 254.21481323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[15 61]
[16 60]
[17 59]
[18 58]
[28 39]
[29 38]
[30 37]
[31 36]
[40 55]
[41 54]
[42 53]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[70 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
