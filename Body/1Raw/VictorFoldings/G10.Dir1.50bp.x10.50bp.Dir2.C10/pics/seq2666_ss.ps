%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUxxxxxxxxxxCCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.48345184 521.45031738]
[106.48345184 506.45034790]
[106.48345184 491.45034790]
[106.48345184 476.45034790]
[106.48345184 461.45034790]
[106.48345184 446.45034790]
[106.48345184 431.45034790]
[106.48345184 416.45034790]
[106.48345184 401.45034790]
[106.48345184 386.45034790]
[91.87920380 383.14611816]
[78.36997986 376.67163086]
[66.63468170 367.34866333]
[57.26387405 355.64227295]
[50.73003769 342.13757324]
[47.36374664 327.51043701]
[47.33697128 312.49371338]
[50.65427017 297.84057617]
[57.15240479 284.28659058]
[66.50837708 272.51293945]
[78.25548553 263.11206055]
[91.80658722 256.55795288]
[106.48345184 253.18226624]
[106.48345184 238.18226624]
[106.48345184 223.18226624]
[106.48345184 208.18226624]
[98.74615479 195.45498657]
[106.48345184 181.65481567]
[106.48345184 166.65481567]
[98.74615479 153.92755127]
[106.48345184 140.12738037]
[106.48345184 125.12737274]
[86.74256134 120.01324463]
[78.17992401 103.25646210]
[84.47726440 87.20329285]
[77.29475403 74.03471375]
[70.11224365 60.86613083]
[62.52233505 47.92807388]
[54.53242111 35.23314285]
[40.63330841 27.67502213]
[40.40228271 12.78220844]
[32.41236496 0.08727860]
[24.42245102 -12.60765076]
[15.15750122 -24.40429115]
[4.71768904 -35.17509842]
[-5.72212362 -45.94590759]
[-18.62435341 -46.93904114]
[-27.09991264 -56.17938232]
[-26.98405266 -68.31584930]
[-37.19753265 -79.30151367]
[-47.41101074 -90.28717804]
[-61.97624969 -85.72466278]
[-77.07743835 -87.94208527]
[-89.71621704 -96.49919128]
[-97.38314819 -109.69695282]
[-98.55596924 -124.91493988]
[-93.00180054 -139.13162231]
[-81.82343292 -149.52426147]
[-67.24034119 -154.02938843]
[-52.14800644 -151.75250244]
[-39.54302216 -143.14570618]
[-31.92811775 -129.91784668]
[-30.81523895 -114.69535828]
[-36.42534637 -100.50066376]
[-26.21186829 -89.51499939]
[-15.99838829 -78.52932739]
[1.01010501 -74.32087708]
[5.04868507 -56.38571930]
[15.48849773 -45.61491013]
[25.92831039 -34.84410477]
[24.48617554 -49.77461624]
[30.57699203 -63.48234940]
[42.62417221 -72.41909790]
[57.50933838 -74.27160645]
[71.37951660 -68.56036377]
[80.64443970 -56.76371002]
[82.90592957 -41.93516541]
[77.57859039 -27.91306114]
[66.04138947 -18.32697105]
[51.28070831 -15.65822697]
[37.11738205 -20.59756660]
[45.10729599 -7.90263748]
[53.09721375 4.79229212]
[66.42483521 11.44238758]
[67.22734833 27.24322701]
[75.21726990 39.93815613]
[78.62268829 41.06536484]
[81.63348389 43.93534470]
[83.41936493 48.33568573]
[83.28083038 53.68362045]
[90.46333313 66.85220337]
[97.64584351 80.02078247]
[114.87709045 82.41500092]
[125.91899109 98.72479248]
[140.24159241 94.26797485]
[154.56417847 89.81115723]
[165.44223022 78.32295227]
[179.89364624 81.92929840]
[194.16909790 77.32373047]
[208.39588928 72.56991577]
[219.03257751 60.85789490]
[233.55589294 64.16281128]
[247.78266907 59.40899658]
[258.24301147 46.77914810]
[274.36349487 49.78953934]
[279.56072998 65.34334564]
[268.48825073 77.44013977]
[252.53648376 73.63578033]
[238.30970764 78.38959503]
[228.69061279 89.76158905]
[213.14970398 86.79669952]
[198.92291260 91.55051422]
[193.54083252 96.68653870]
[184.35046387 96.25189209]
[174.49687195 107.42131805]
[159.02099609 104.13375854]
[144.69839478 108.59056854]
[130.37580872 113.04738617]
[121.48345184 125.12737274]
[121.48345184 140.12738037]
[129.22074890 153.92755127]
[121.48345184 166.65481567]
[121.48345184 181.65481567]
[129.22074890 195.45498657]
[121.48345184 208.18226624]
[121.48345184 223.18226624]
[121.48345184 238.18226624]
[121.48345184 253.18226624]
[136.16032410 256.55795288]
[149.71142578 263.11206055]
[161.45852661 272.51293945]
[170.81449890 284.28659058]
[177.31263733 297.84057617]
[180.62994385 312.49371338]
[180.60316467 327.51043701]
[177.23687744 342.13757324]
[170.70303345 355.64227295]
[161.33222961 367.34866333]
[149.59693909 376.67163086]
[136.08770752 383.14611816]
[121.48345184 386.45034790]
[121.48345184 401.45034790]
[121.48345184 416.45034790]
[121.48345184 431.45034790]
[121.48345184 446.45034790]
[121.48345184 461.45034790]
[121.48345184 476.45034790]
[121.48345184 491.45034790]
[121.48345184 506.45034790]
[121.48345184 521.45031738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
[26 125]
[28 123]
[29 122]
[31 120]
[32 119]
[35 92]
[36 91]
[37 90]
[38 86]
[39 85]
[41 83]
[42 82]
[43 81]
[44 70]
[45 69]
[46 68]
[49 66]
[50 65]
[51 64]
[94 118]
[95 117]
[96 116]
[98 114]
[99 112]
[100 111]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
