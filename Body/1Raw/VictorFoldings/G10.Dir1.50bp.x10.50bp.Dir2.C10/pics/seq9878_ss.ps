%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGxxxxxxxxxxGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-31.69859505 373.26284790]
[-44.24089050 366.85516357]
[-51.69752502 379.87048340]
[-59.15415955 392.88580322]
[-66.61079407 405.90112305]
[-74.06742859 418.91644287]
[-81.52406311 431.93176270]
[-88.98070526 444.94708252]
[-96.43733978 457.96240234]
[-103.89397430 470.97772217]
[-101.09461212 486.77465820]
[-111.80747223 498.71679688]
[-127.81455231 497.64312744]
[-136.83660889 484.37728882]
[-131.95266724 469.09570312]
[-116.90929413 463.52108765]
[-109.45265961 450.50576782]
[-101.99602509 437.49044800]
[-94.53939056 424.47512817]
[-87.08275604 411.45980835]
[-79.62611389 398.44448853]
[-72.16947937 385.42916870]
[-64.71284485 372.41384888]
[-57.25621414 359.39852905]
[-71.39053345 350.28463745]
[-84.99803162 340.40139771]
[-98.03688812 329.77923584]
[-110.46701050 318.45077515]
[-122.25020599 306.45086670]
[-133.35025024 293.81634521]
[-143.73301697 280.58605957]
[-153.36660767 266.80068970]
[-162.22138977 252.50263977]
[-170.27015686 237.73580933]
[-177.48817444 222.54559326]
[-183.85324097 206.97871399]
[-189.34580994 191.08299255]
[-193.94898987 174.90730286]
[-197.64862061 158.50137329]
[-200.43333435 141.91561890]
[-202.29458618 125.20101929]
[-203.22665405 108.40895081]
[-203.22665405 91.59104919]
[-202.29458618 74.79898071]
[-200.43333435 58.08438492]
[-197.64862061 41.49862671]
[-193.94898987 25.09269142]
[-189.34580994 8.91700363]
[-183.85324097 -6.97871208]
[-177.48817444 -22.54559708]
[-170.27015686 -37.73580170]
[-162.22138977 -52.50263596]
[-153.36660767 -66.80070496]
[-143.73301697 -80.58605957]
[-133.35025024 -93.81633759]
[-122.25020599 -106.45085907]
[-110.46701050 -118.45079041]
[-98.03688812 -129.77925110]
[-84.99803162 -140.40141296]
[-71.39053345 -150.28463745]
[-57.25621414 -159.39852905]
[-64.71284485 -172.41384888]
[-72.16947937 -185.42916870]
[-86.60852051 -193.20388794]
[-86.82441711 -209.60160828]
[-72.59506989 -217.75376892]
[-58.55841827 -209.27412415]
[-59.15415955 -192.88580322]
[-51.69752502 -179.87048340]
[-44.24089050 -166.85516357]
[-31.69859505 -173.26286316]
[-18.87238693 -179.08146667]
[-5.78991842 -184.29844666]
[7.52060986 -188.90252686]
[21.03050232 -192.88381958]
[34.71063614 -196.23370361]
[48.53151703 -198.94499207]
[62.46335220 -201.01181030]
[76.47611237 -202.42971802]
[90.53957367 -203.19566345]
[104.62344360 -203.30798340]
[118.69733429 -202.76644897]
[132.73092651 -201.57220459]
[146.69395447 -199.72785950]
[160.55632019 -197.23735046]
[174.28814697 -194.10607910]
[187.85981750 -190.34077454]
[201.24208069 -185.94955444]
[214.40609741 -180.94190979]
[227.32347107 -175.32861328]
[239.96636963 -169.12176514]
[252.30754089 -162.33476257]
[264.32037354 -154.98220825]
[275.97894287 -147.07998657]
[287.25814819 -138.64511108]
[298.13369751 -129.69578552]
[308.58209229 -120.25126648]
[318.58084106 -110.33194733]
[328.10836792 -99.95919800]
[337.14416504 -89.15538788]
[345.66870117 -77.94379425]
[353.66366577 -66.34860229]
[361.11178589 -54.39479446]
[367.99697876 -42.10815048]
[374.30447388 -29.51515198]
[380.02059937 -16.64295006]
[385.13305664 -3.51929140]
[389.63085938 9.82753086]
[393.50427246 23.36874390]
[396.74496460 37.07515717]
[399.34594727 50.91722107]
[401.30160522 64.86509705]
[402.60769653 78.88871765]
[403.26147461 92.95784760]
[403.26147461 107.04215240]
[402.60769653 121.11128235]
[401.30160522 135.13490295]
[399.34594727 149.08277893]
[396.74496460 162.92485046]
[393.50427246 176.63125610]
[389.63085938 190.17247009]
[385.13305664 203.51928711]
[380.02059937 216.64294434]
[374.30447388 229.51515198]
[367.99697876 242.10815430]
[361.11178589 254.39479065]
[353.66366577 266.34860229]
[345.66870117 277.94378662]
[337.14416504 289.15539551]
[328.10836792 299.95919800]
[318.58084106 310.33193970]
[308.58209229 320.25128174]
[298.13369751 329.69577026]
[287.25814819 338.64511108]
[275.97894287 347.07998657]
[264.32037354 354.98220825]
[252.30754089 362.33474731]
[239.96636963 369.12176514]
[227.32347107 375.32861328]
[214.40609741 380.94189453]
[201.24208069 385.94955444]
[187.85981750 390.34075928]
[174.28814697 394.10607910]
[160.55632019 397.23736572]
[146.69395447 399.72784424]
[132.73092651 401.57220459]
[118.69733429 402.76644897]
[104.62344360 403.30798340]
[90.53957367 403.19567871]
[76.47611237 402.42971802]
[62.46335220 401.01181030]
[48.53151703 398.94497681]
[34.71063614 396.23370361]
[21.03050232 392.88381958]
[7.52060986 388.90252686]
[-5.78991842 384.29843140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
