%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACxxxxxxxxxxGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 304.70300293]
[92.50000000 289.70300293]
[92.50000000 274.70300293]
[92.50000000 259.70300293]
[92.50000000 244.70300293]
[92.50000000 229.70300293]
[92.50000000 214.70300293]
[92.50000000 199.70300293]
[92.50000000 184.70300293]
[92.50000000 169.70300293]
[85.81058502 168.65434265]
[79.25353241 166.96522522]
[72.89002228 164.65142822]
[66.77940369 161.73451233]
[60.97869492 158.24169922]
[55.54199982 154.20556641]
[50.52003479 149.66377258]
[45.95965195 144.65869141]
[41.90339279 139.23699951]
[38.38909531 133.44927979]
[24.51658821 139.15484619]
[10.64408112 144.86041260]
[-3.22842622 150.56599426]
[-4.07091427 165.80583191]
[-11.44981003 179.16677856]
[-23.90002823 187.99597168]
[-38.94956970 190.54040527]
[-53.61033249 186.29484558]
[-64.97142029 176.10227966]
[-70.77706909 161.98643494]
[-69.87457275 146.75001526]
[-62.44312286 133.41824341]
[-49.95823288 124.63813782]
[-34.89878845 122.15299988]
[-20.25485611 126.45625305]
[-8.93399620 136.69348145]
[4.93851089 130.98791504]
[18.81101799 125.28234100]
[32.68352509 119.57676697]
[29.92495346 97.93952179]
[33.95009613 76.50174713]
[44.36929703 57.33874893]
[60.17390442 42.30563736]
[79.83393097 32.85770798]
[101.44616699 29.90958595]
[122.91840363 33.74666595]
[129.31053162 20.17681694]
[135.70265198 6.60696840]
[142.09477234 -6.96288013]
[148.48689270 -20.53272820]
[154.87901306 -34.10257721]
[141.86022949 -41.56969452]
[129.48452759 -50.06018066]
[117.83216858 -59.51897049]
[106.97871399 -69.88471985]
[96.99455261 -81.09020996]
[87.94444275 -93.06275177]
[79.88707733 -105.72470856]
[72.87470245 -118.99395752]
[66.95281982 -132.78443909]
[62.15980911 -147.00672913]
[58.52677155 -161.56857300]
[56.07726669 -176.37554932]
[54.82717896 -191.33160400]
[54.78461456 -206.33975220]
[55.94984818 -221.30265808]
[58.31533051 -236.12327576]
[61.86571121 -250.70549011]
[66.57797241 -264.95474243]
[72.42154694 -278.77859497]
[79.35853577 -292.08740234]
[87.34395599 -304.79486084]
[96.32601166 -316.81854248]
[106.24644470 -328.08047485]
[117.04093170 -338.50762939]
[128.63946533 -348.03234863]
[140.96679688 -356.59289551]
[153.94300842 -364.13375854]
[167.48393250 -370.60598755]
[181.50175476 -375.96762085]
[195.90554810 -380.18389893]
[210.60189819 -383.22747803]
[225.49551392 -385.07861328]
[240.48977661 -385.72531128]
[255.48747253 -385.16333008]
[270.39129639 -383.39639282]
[285.10461426 -380.43588257]
[299.53201294 -376.30105591]
[313.57989502 -371.01870728]
[327.15716553 -364.62307739]
[340.17578125 -357.15567017]
[352.55130005 -348.66491699]
[364.20343018 -339.20587158]
[375.05667114 -328.83987427]
[385.04058838 -317.63418579]
[394.09042358 -305.66143799]
[402.14752197 -292.99929810]
[409.15960693 -279.72988892]
[415.08117676 -265.93927002]
[419.87387085 -251.71688843]
[423.50659180 -237.15496826]
[425.95578003 -222.34794617]
[427.20553589 -207.39186096]
[427.24777222 -192.38371277]
[426.08218384 -177.42082214]
[423.71640015 -162.60026550]
[420.16567993 -148.01811218]
[415.45312500 -133.76898193]
[409.60922241 -119.94525146]
[402.67193604 -106.63659668]
[394.68624878 -93.92931366]
[385.70391846 -81.90583038]
[375.78323364 -70.64411163]
[364.98852539 -60.21720123]
[353.38980103 -50.69272614]
[341.06225586 -42.13245010]
[328.08587646 -34.59189606]
[314.54483032 -28.11996651]
[300.52688599 -22.75863457]
[286.12298584 -18.54266930]
[271.42657471 -15.49941444]
[256.53292847 -13.64860821]
[241.53863525 -13.00225258]
[226.54096985 -13.56453991]
[211.63717651 -15.33182335]
[196.92391968 -18.29264259]
[182.49662781 -22.42779350]
[168.44885254 -27.71045685]
[162.05673218 -14.14060879]
[155.66461182 -0.57075971]
[149.27249146 12.99908924]
[142.88037109 26.56893730]
[136.48825073 40.13878632]
[146.49209595 47.52864838]
[155.03265381 56.56999588]
[161.84111023 66.97825623]
[166.70317078 78.42584229]
[169.46583557 90.55245209]
[170.04211426 102.97640991]
[168.41390991 115.30669403]
[164.63243103 127.15521240]
[158.81672668 138.14904785]
[151.14982605 147.94218445]
[141.87303162 156.22639465]
[131.27832031 162.74092102]
[119.69916534 167.28076172]
[107.50000000 169.70300293]
[107.50000000 184.70300293]
[107.50000000 199.70300293]
[107.50000000 214.70300293]
[107.50000000 229.70300293]
[107.50000000 244.70300293]
[107.50000000 259.70300293]
[107.50000000 274.70300293]
[107.50000000 289.70300293]
[107.50000000 304.70300293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[20 39]
[21 38]
[22 37]
[23 36]
[46 133]
[47 132]
[48 131]
[49 130]
[50 129]
[51 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
