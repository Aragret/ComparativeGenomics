%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.49192047 276.66201782]
[104.49192047 261.66201782]
[104.49192047 246.66201782]
[104.49192047 231.66201782]
[104.49192047 216.66201782]
[104.49192047 201.66201782]
[104.49192047 186.66201782]
[104.49192047 171.66201782]
[104.49192047 156.66201782]
[104.49192047 141.66201782]
[78.87279510 132.72177124]
[65.79497528 111.21208191]
[69.12263489 88.23753357]
[56.68319702 79.85539246]
[44.24375916 71.47325134]
[31.80431747 63.09110641]
[15.33663559 66.60503387]
[1.59697962 57.74919128]
[-12.81523609 61.90707779]
[-27.22745323 66.06496429]
[-27.09927368 81.16086578]
[-31.04978561 95.73124695]
[-38.78583145 108.69489288]
[-49.73335266 119.08981323]
[-63.07995987 126.14464569]
[-77.83525848 129.33586121]
[-92.90429688 128.42665100]
[-107.16885376 123.48449707]
[-119.57041168 114.87612915]
[-129.18869019 103.24034882]
[-135.30993652 89.44060516]
[-137.47993469 74.50093842]
[-135.53764343 59.52996445]
[-129.62718201 45.63862991]
[-120.18717957 33.85776520]
[-107.91811371 25.06158829]
[-93.73045349 19.90283394]
[-78.67700195 18.76431656]
[-63.87483215 21.73052025]
[-50.42236328 28.58133507]
[-39.31785583 38.80838394]
[-31.38533974 51.65275192]
[-16.97312355 47.49486160]
[-2.56090784 43.33697510]
[-1.47534084 38.17793655]
[0.85436273 33.44859695]
[4.28298283 29.44375992]
[-1.20404851 15.48336983]
[-6.69108009 1.52298021]
[-12.17811108 -12.43740940]
[-17.66514206 -26.39779854]
[-23.15217400 -40.35818863]
[-38.00299072 -37.87887955]
[-53.04473877 -38.54180145]
[-67.61986542 -42.31797409]
[-81.09119415 -49.04232025]
[-92.86983490 -58.42087936]
[-102.44086456 -70.04366302]
[-109.38587952 -83.40257263]
[-113.40127563 -97.91361237]
[-114.31151581 -112.94242096]
[-112.07681274 -127.83200836]
[-106.79485321 -141.93145752]
[-98.69654083 -154.62442017]
[-88.13590240 -165.35598755]
[-75.57460785 -173.65702820]
[-61.56177139 -179.16467285]
[-46.70998383 -181.63815308]
[-31.66849518 -180.96931458]
[-17.09486008 -177.18740845]
[-3.62617087 -170.45776367]
[8.14877605 -161.07456970]
[17.71523285 -149.44801331]
[24.65499306 -136.08638000]
[28.66468048 -121.57376099]
[29.56900978 -106.54459381]
[27.32844734 -91.65588379]
[22.04094124 -77.55850983]
[13.93763828 -64.86874390]
[3.37277937 -54.14133072]
[-9.19178486 -45.84522247]
[-3.70475316 -31.88483047]
[1.78227842 -17.92444038]
[7.26931000 -3.96405125]
[12.75634098 9.99633884]
[18.24337196 23.95672798]
[35.60552597 31.63842773]
[40.18645859 50.65166473]
[52.62590027 59.03380966]
[65.06533813 67.41595459]
[77.50478363 75.79809570]
[86.71310425 68.36953735]
[98.34632874 64.46467590]
[111.05145264 64.85700226]
[123.23844147 69.80039215]
[133.27906799 78.96131134]
[139.72285461 91.42655182]
[141.50157166 105.78970337]
[156.49427795 106.25774384]
[171.48696899 106.72578430]
[186.47966003 107.19383240]
[190.40354919 92.64392090]
[197.57763672 79.39140320]
[207.61503601 68.15097046]
[219.97444153 59.52880096]
[233.98931885 53.98987961]
[248.90388489 51.83291626]
[263.91381836 53.17422867]
[278.20962524 57.94148636]
[291.02035522 65.87759399]
[301.65515137 76.55456543]
[309.54049683 89.39660645]
[314.25112915 103.71116638]
[315.53302002 118.72627258]
[313.31704712 133.63218689]
[307.72271729 147.62504578]
[299.05169678 159.95022583]
[287.77163696 169.94305420]
[274.49081421 177.06463623]
[259.92550659 180.93090820]
[244.86114502 181.33335876]
[230.11016846 178.25030518]
[216.46806335 171.84799194]
[204.67053223 162.47167969]
[195.35380554 150.62705994]
[189.02030945 136.95285034]
[186.01162720 122.18652344]
[171.01892090 121.71848297]
[156.02622986 121.25044250]
[141.03353882 120.78240204]
[135.64813232 126.00230408]
[148.58106995 133.60093689]
[163.34774780 136.23628235]
[172.57356262 148.06355286]
[171.53518677 163.02755737]
[160.76423645 173.46722412]
[145.77508545 174.03776550]
[134.24171448 164.44706726]
[132.06871033 149.60585022]
[124.87731934 136.44212341]
[119.49192047 141.66201782]
[119.49192047 156.66201782]
[119.49192047 171.66201782]
[119.49192047 186.66201782]
[119.49192047 201.66201782]
[119.49192047 216.66201782]
[119.49192047 231.66201782]
[119.49192047 246.66201782]
[119.49192047 261.66201782]
[119.49192047 276.66201782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 91]
[14 90]
[15 89]
[16 88]
[18 44]
[19 43]
[20 42]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[98 130]
[99 129]
[100 128]
[101 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
