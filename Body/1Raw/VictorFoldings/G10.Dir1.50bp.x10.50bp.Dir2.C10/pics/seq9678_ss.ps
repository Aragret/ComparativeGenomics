%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGxxxxxxxxxxCCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[136.93376160 353.80871582]
[136.62577820 338.81188965]
[136.31781006 323.81503296]
[136.00982666 308.81820679]
[135.70185852 293.82135010]
[135.39387512 278.82452393]
[135.08589172 263.82769775]
[134.77792358 248.83084106]
[134.46994019 233.83401489]
[132.01701355 219.03593445]
[127.46972656 204.74180603]
[113.88465118 193.67427063]
[117.89173126 175.73063660]
[113.05191040 161.53288269]
[108.21209717 147.33512878]
[103.37228394 133.13737488]
[89.90242767 131.74108887]
[78.10164642 125.09820557]
[65.94831085 133.89004517]
[53.79497910 142.68190002]
[41.64164734 151.47373962]
[32.35232925 165.65629578]
[16.15249252 160.65612793]
[16.47269058 143.70520020]
[32.84980392 139.32040405]
[45.00313950 130.52856445]
[57.15647125 121.73671722]
[69.30980682 112.94487762]
[67.03494263 95.22893524]
[74.23933411 78.88493347]
[65.07740021 67.00811005]
[55.91546631 55.13128662]
[46.75352859 43.25446320]
[37.59159470 31.37763977]
[28.42965889 19.50081444]
[15.51967144 27.17477036]
[1.77880251 33.23661041]
[-12.59256649 37.59792709]
[-27.38485909 40.19512939]
[-42.38235855 40.99033737]
[-57.36635971 39.97195816]
[-72.11834717 37.15483475]
[-86.42320251 32.58005905]
[-100.07230377 26.31433678]
[-112.86662292 18.44904518]
[-124.61956787 9.09888172]
[-135.15975952 -1.59979963]
[-144.33348083 -13.49098110]
[-152.00695801 -26.40125465]
[-158.06828308 -40.14234924]
[-162.42906189 -54.51388168]
[-165.02571106 -69.30627441]
[-165.82035828 -84.30380249]
[-164.80140686 -99.28776550]
[-161.98373413 -114.03964996]
[-157.40843201 -128.34432983]
[-151.14219666 -141.99319458]
[-143.27642822 -154.78721619]
[-133.92582703 -166.53982544]
[-123.22674561 -177.07960510]
[-111.33522034 -186.25288391]
[-98.42465973 -193.92587280]
[-84.68334198 -199.98669434]
[-70.31164551 -204.34693909]
[-55.51916122 -206.94302368]
[-40.52159882 -207.73712158]
[-25.53767586 -206.71760559]
[-10.78589725 -203.89938354]
[3.51861143 -199.32354736]
[17.16724968 -193.05679321]
[29.96097755 -185.19055176]
[41.71322632 -175.83950806]
[52.25261688 -165.14004517]
[61.42544556 -153.24816895]
[69.09795380 -140.33732605]
[75.15824890 -126.59577179]
[79.51795959 -112.22391510]
[82.11350250 -97.43133545]
[82.90702820 -82.43374634]
[81.88696289 -67.44985962]
[79.06819153 -52.69818497]
[74.49180603 -38.39384460]
[68.22455597 -24.74544334]
[60.35782623 -11.95200825]
[51.00634766 -0.20010832]
[40.30648041 10.33887959]
[49.46841812 22.21570396]
[58.63035202 34.09252548]
[67.79228973 45.96935272]
[76.95422363 57.84617615]
[86.11615753 69.72299957]
[107.45946503 67.53749084]
[125.70784760 78.82065582]
[139.13529968 72.13458252]
[152.56274414 65.44850159]
[165.99018860 58.76242828]
[164.90270996 43.60044479]
[169.70498657 29.17801094]
[179.66471863 17.69444656]
[193.26310730 10.90091324]
[208.42651367 9.83337307]
[222.84262085 14.65461922]
[234.31306458 24.62944603]
[241.08869934 38.23676682]
[242.13629150 53.40156174]
[237.29609680 67.81130981]
[227.30618286 79.26863098]
[213.68997192 86.02635956]
[198.52380371 87.05400848]
[184.12043762 82.19484711]
[172.67626953 72.18988037]
[159.24882507 78.87595367]
[145.82136536 85.56202698]
[132.39392090 92.24810791]
[133.25573730 98.12545776]
[133.05986023 104.06243896]
[131.81253052 109.87020874]
[129.55340576 115.36405945]
[126.35433960 120.36926270]
[122.31707764 124.72662354]
[117.57003021 128.29756165]
[122.40985107 142.49531555]
[127.24966431 156.69306946]
[132.08947754 170.89082336]
[143.33021545 177.29780579]
[147.04855347 189.27049255]
[141.76385498 200.19450378]
[146.31114197 214.48863220]
[150.42295837 200.06321716]
[159.65925598 188.24412537]
[172.66317749 180.76763916]
[187.52442932 178.73208618]
[202.05981445 182.43647766]
[214.13403320 191.33665466]
[221.97335815 204.12512207]
[224.42614746 218.92323303]
[221.13209534 233.55706787]
[212.57508850 245.87687683]
[200.01220703 254.07283020]
[185.28895569 256.94091797]
[170.56825256 254.05981445]
[158.01260376 245.85275269]
[149.46678162 233.52603149]
[149.77476501 248.52287292]
[150.08273315 263.51971436]
[150.39071655 278.51654053]
[150.69868469 293.51339722]
[151.00666809 308.51022339]
[151.31465149 323.50704956]
[151.62261963 338.50390625]
[151.93060303 353.50073242]
[154.51637268 372.70916748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 128]
[11 127]
[13 124]
[14 123]
[15 122]
[16 121]
[18 28]
[19 27]
[20 26]
[21 25]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[93 114]
[94 113]
[95 112]
[96 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
