%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGxxxxxxxxxxAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.18679047 263.98928833]
[110.18679047 248.98928833]
[110.18679047 233.98928833]
[110.18679047 218.98928833]
[110.18679047 203.98928833]
[110.18679047 188.98928833]
[110.18679047 173.98928833]
[110.18679047 158.98928833]
[110.18679047 143.98928833]
[110.18679047 128.98928833]
[104.53728485 124.05641937]
[97.34590149 137.22015381]
[94.51461792 151.95053101]
[81.66010284 159.68107605]
[67.32133484 155.27656555]
[61.02325058 141.66281128]
[66.94953918 127.88315582]
[81.16429138 123.09118652]
[93.23828125 114.19069672]
[87.58877563 109.25783539]
[72.72573090 111.28016663]
[64.27718353 121.08200073]
[51.81113052 122.42975616]
[42.10592270 115.14167023]
[27.20401955 116.85436249]
[12.32073879 118.72196960]
[-2.54230785 120.74430847]
[-17.40535545 122.76663971]
[-32.19806290 125.25176239]
[-46.90602493 128.19723511]
[-56.96249771 140.69711304]
[-73.00413513 140.48411560]
[-82.72516632 127.72162628]
[-78.66844940 112.19994354]
[-63.94594955 105.82597351]
[-49.85150528 113.48928070]
[-35.14354324 110.54380035]
[-32.87755585 107.76300812]
[-29.12356186 105.97158051]
[-24.37571907 105.86973572]
[-19.42768860 107.90359497]
[-4.56464243 105.88126373]
[10.29840469 103.85892487]
[16.54251289 99.81457520]
[25.49132919 101.95245361]
[40.39323044 100.23976898]
[53.86547089 89.03714752]
[70.70339966 96.41712189]
[85.56644440 94.39479065]
[98.34380341 86.53736115]
[106.85488892 74.18579102]
[115.36598206 61.83421707]
[123.87707520 49.48264694]
[132.38816833 37.13107300]
[140.89924622 24.77949905]
[149.41033936 12.42792702]
[157.92143250 0.07635491]
[166.04296875 -12.53477287]
[173.76705933 -25.39317513]
[174.24069214 -41.20729065]
[187.42707825 -48.13321304]
[195.15115356 -60.99161530]
[202.33366394 -74.16019440]
[208.96217346 -87.61616516]
[196.31103516 -79.55709076]
[182.12080383 -74.69525909]
[167.18557739 -73.30273438]
[152.34114075 -75.45744324]
[138.41819763 -81.03881073]
[126.19588470 -89.73450470]
[116.35816956 -101.05789948]
[109.45556641 -114.37533569]
[105.87435913 -128.94155884]
[105.81495667 -143.94145203]
[109.28067017 -158.53558350]
[116.07756805 -171.90727234]
[125.82528687 -183.30824280]
[137.97834778 -192.10046387]
[151.85664368 -197.79194641]
[166.68353271 -200.06416321]
[181.62931824 -198.78999329]
[195.85762024 -194.04071045]
[208.57218933 -186.08209229]
[219.06153870 -175.35952759]
[226.73867798 -162.47303772]
[231.17396545 -148.14375305]
[232.11921692 -133.17356873]
[229.52154541 -118.40020752]
[223.52667236 -104.65105438]
[230.35195923 -118.92431641]
[245.21261597 -119.92929840]
[257.47497559 -128.56842041]
[269.73736572 -137.20753479]
[274.99383545 -144.75878906]
[282.34591675 -145.89569092]
[294.78533936 -154.27783203]
[299.25274658 -169.68632507]
[314.13931274 -175.66714478]
[328.02529907 -167.63230896]
[330.25860596 -151.74545288]
[319.12600708 -140.19363403]
[303.16748047 -141.83839417]
[290.72805786 -133.45625305]
[278.37646484 -124.94515991]
[266.11410522 -116.30604553]
[253.85174561 -107.66693115]
[247.90353394 -94.01159668]
[232.16578674 -92.38868713]
[222.41813660 -80.98766327]
[215.78964233 -67.53170013]
[216.61625671 -64.78870392]
[216.37010193 -61.54318619]
[214.85035706 -58.21568680]
[212.01704407 -55.29278183]
[208.00956726 -53.26752853]
[200.28547668 -40.40912628]
[200.36433411 -25.51473045]
[186.62545776 -17.66909027]
[178.90138245 -4.81068850]
[179.43199158 -1.26302195]
[178.22926331 2.71882629]
[175.10810852 6.29805040]
[170.27301025 8.58744526]
[161.76191711 20.93901825]
[153.25082397 33.29058838]
[144.73973083 45.64216232]
[136.22863770 57.99373627]
[127.71755219 70.34530640]
[119.20646667 82.69687653]
[110.69537354 95.04845428]
[124.08621979 88.28936005]
[137.45112610 81.47913361]
[152.45112610 81.49494934]
[165.80163574 88.33334351]
[174.57931519 100.49691772]
[176.86209106 115.32219696]
[172.15011597 129.56288147]
[161.47515869 140.10069275]
[147.17474365 144.62815857]
[132.37817383 142.15301514]
[125.18679047 128.98928833]
[125.18679047 143.98928833]
[125.18679047 158.98928833]
[125.18679047 173.98928833]
[125.18679047 188.98928833]
[125.18679047 203.98928833]
[125.18679047 218.98928833]
[125.18679047 233.98928833]
[125.18679047 248.98928833]
[125.18679047 263.98928833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 49]
[21 48]
[24 46]
[25 45]
[26 43]
[27 42]
[28 41]
[29 37]
[30 36]
[50 130]
[51 129]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
[57 123]
[58 119]
[59 118]
[61 116]
[62 115]
[63 110]
[64 109]
[89 108]
[91 106]
[92 105]
[93 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
