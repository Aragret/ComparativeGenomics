%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAAxxxxxxxxxxUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[179.94863892 87.34390259]
[169.63893127 98.09375763]
[154.31321716 94.16526794]
[139.81762695 98.02243042]
[125.32202911 101.87959290]
[110.82643127 105.73674774]
[98.13150024 113.72666931]
[88.38385010 125.12768555]
[78.63619995 136.52870178]
[68.88854980 147.92973328]
[65.66079712 156.54560852]
[58.81756973 159.46380615]
[48.83484268 170.65957642]
[38.85211563 181.85534668]
[28.86939049 193.05110168]
[26.06934166 209.20944214]
[10.58459187 214.60893250]
[-1.65547621 203.69505310]
[1.94067049 187.69506836]
[17.67362404 183.06837463]
[27.65635109 171.87261963]
[37.63907623 160.67684937]
[47.62180328 149.48107910]
[57.48752594 138.18208313]
[67.23517609 126.78105927]
[76.98283386 115.38003540]
[86.73048401 103.97901154]
[83.91450500 97.02773285]
[72.43273926 106.68015289]
[59.70470047 98.74308777]
[63.32014084 84.18531799]
[78.28254700 83.12518311]
[75.46656799 76.17390442]
[60.53226089 74.77159882]
[45.59795380 73.36929321]
[30.66364670 71.96698761]
[15.72933865 70.56468964]
[2.50683689 79.65011597]
[-12.79794216 74.83937073]
[-18.44448090 59.82283783]
[-10.10124016 46.11992264]
[5.83156204 44.24232864]
[17.13164330 55.63037872]
[32.06594849 57.03268433]
[47.00025940 58.43498611]
[61.93456650 59.83729172]
[76.86887360 61.23959351]
[64.43508148 52.84906769]
[70.16465759 38.98645782]
[81.59998322 29.27907181]
[96.20894623 25.87641335]
[110.75670624 29.53192711]
[122.02194977 39.43617630]
[127.51023865 53.39607620]
[126.00629425 68.32048798]
[117.84113312 80.90661621]
[106.96927643 91.24114990]
[121.46486664 87.38399506]
[135.96046448 83.52683258]
[150.45606995 79.66967773]
[161.80258179 68.64392853]
[176.09147644 72.84830475]
[173.24223328 58.11526108]
[171.41622925 43.22075272]
[170.62217712 28.23575592]
[170.86384583 13.23168182]
[172.14009094 -1.71996903]
[174.44483948 -16.54794312]
[177.76708984 -31.18157959]
[182.09103394 -45.55113983]
[187.39604187 -59.58814621]
[193.65684509 -73.22570038]
[200.84359741 -86.39882660]
[208.92207336 -99.04473877]
[217.85374451 -111.10316467]
[227.59606934 -122.51665497]
[238.10261536 -133.23081970]
[249.32331848 -143.19458008]
[261.20468140 -152.36047363]
[273.69012451 -160.68481445]
[286.72012329 -168.12792969]
[300.23257446 -174.65435791]
[314.16308594 -180.23298645]
[328.44531250 -184.83723450]
[343.01113892 -188.44517517]
[357.79116821 -191.03958130]
[372.71499634 -192.60812378]
[387.71148682 -193.14329529]
[402.70913696 -192.64257812]
[417.63653564 -191.10833740]
[432.42248535 -188.54789734]
[446.99658203 -184.97344971]
[461.28933716 -180.40202332]
[475.23263550 -174.85542297]
[488.76004028 -168.36006165]
[501.80709839 -160.94691467]
[514.31164551 -152.65127563]
[526.21405029 -143.51271057]
[537.45758057 -133.57475281]
[547.98876953 -122.88476562]
[557.75726318 -111.49369049]
[566.71661377 -99.45581818]
[574.82415771 -86.82850647]
[582.04113770 -73.67192841]
[588.33325195 -60.04879379]
[593.67053223 -46.02401733]
[598.02746582 -31.66442871]
[601.38336182 -17.03846741]
[603.72216797 -2.21582770]
[605.03277588 12.73285103]
[605.30889893 27.73633003]
[604.54925537 42.72311401]
[602.75750732 57.62177658]
[599.94213867 72.36132812]
[596.11657715 86.87152100]
[591.29901123 101.08319855]
[585.51245117 114.92865753]
[578.78448486 128.34188843]
[571.14715576 141.25900269]
[562.63684082 153.61842346]
[553.29412842 165.36125183]
[543.16345215 176.43153381]
[532.29321289 186.77650452]
[520.73516846 196.34687805]
[508.54440308 205.09704590]
[495.77896118 212.98529053]
[482.49972534 219.97404480]
[468.76998901 226.02998352]
[454.65512085 231.12426758]
[440.22244263 235.23260498]
[425.54071045 238.33541870]
[410.67990112 240.41793823]
[395.71081543 241.47021484]
[380.70480347 241.48724365]
[365.73336792 240.46894836]
[350.86788940 238.42018127]
[336.17913818 235.35070801]
[321.73718262 231.27514648]
[307.61077881 226.21292114]
[293.86730957 220.18815613]
[280.57226562 213.22956848]
[267.78897095 205.37031555]
[255.57833862 196.64785767]
[243.99858093 187.10374451]
[233.10488892 176.78346252]
[222.94915771 165.73622131]
[213.57978821 154.01461792]
[205.04144287 141.67456055]
[197.37478638 128.77482605]
[190.61637878 115.37689209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[3 60]
[4 59]
[5 58]
[6 57]
[7 27]
[8 26]
[9 25]
[10 24]
[12 23]
[13 22]
[14 21]
[15 20]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
