%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUxxxxxxxxxxGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.06259155 285.60546875]
[121.06259155 270.60546875]
[121.06259155 255.60546875]
[121.06259155 240.60546875]
[121.06259155 225.60546875]
[121.06259155 210.60546875]
[121.06259155 195.60546875]
[121.06259155 180.60546875]
[121.06259155 165.60546875]
[121.06259155 150.60546875]
[116.51530457 136.31134033]
[107.84869385 124.06838226]
[102.03858185 125.23357391]
[96.11676788 125.01618195]
[90.40773010 123.42813110]
[85.22425842 120.55641937]
[73.25399780 129.59593201]
[61.28374100 138.63545227]
[49.31348038 147.67497253]
[47.37852097 163.36036682]
[34.86782837 173.01739502]
[19.20377159 170.91670227]
[9.67955971 158.30461121]
[11.94573879 142.66363525]
[24.65782356 133.27330017]
[40.27396011 135.70471191]
[52.24422073 126.66519928]
[64.21447754 117.62567902]
[76.18473816 108.58615875]
[74.83031464 102.71582031]
[74.90132141 96.69167328]
[76.39373779 90.85488129]
[79.22304535 85.53601074]
[83.22901154 81.03627777]
[88.18476868 77.61051178]
[85.42852020 62.86591721]
[82.67227936 48.12131882]
[64.82975006 37.27303314]
[60.91968536 17.21305466]
[47.77805328 9.98135281]
[34.63642120 2.74965048]
[21.49478912 -4.48205233]
[8.35315800 -11.71375465]
[-4.78847361 -18.94545746]
[-17.41183853 -16.10744286]
[-28.22567368 -22.45034027]
[-31.67969131 -34.08356476]
[-44.67007065 -41.58356476]
[-60.47625351 -38.83690643]
[-72.38258362 -49.58953094]
[-71.25553894 -65.59294891]
[-57.95969391 -74.57070160]
[-42.69448471 -69.63583374]
[-37.17007065 -54.57394791]
[-24.17969131 -47.07394791]
[-6.68405104 -48.04714584]
[2.44322872 -32.08708954]
[15.58486080 -24.85538673]
[28.72649193 -17.62368393]
[41.86812210 -10.39198112]
[55.00975418 -3.16027856]
[68.15139008 4.07142401]
[75.93209076 -0.98971522]
[85.02239990 -2.86610198]
[89.27524567 -17.25058365]
[93.52809906 -31.63506317]
[97.78094482 -46.01954651]
[102.03379059 -60.40402603]
[88.70948792 -67.40039062]
[77.00631714 -76.86200714]
[67.37412262 -88.42518616]
[60.18314743 -101.64546967]
[55.70978165 -116.01471710]
[54.12597275 -130.98060608]
[55.49259949 -145.96788025]
[59.75713348 -160.40048218]
[66.75565338 -173.72366333]
[76.21916199 -185.42529297]
[87.78390503 -195.05561829]
[101.00535583 -202.24446106]
[115.37532043 -206.71549988]
[130.34146118 -208.29687500]
[145.32852173 -206.92782593]
[159.76043701 -202.66094971]
[173.08247375 -195.66027832]
[184.78257751 -186.19488525]
[194.41102600 -174.62858582]
[201.59773254 -161.40596008]
[206.06643677 -147.03527832]
[207.64540100 -132.06887817]
[206.27392578 -117.08203888]
[202.00471497 -102.65081787]
[195.00189209 -89.32991028]
[185.53459167 -77.63134003]
[173.96673584 -68.00476074]
[160.74295044 -60.82020187]
[146.37153625 -56.35381317]
[131.40489197 -54.77727509]
[116.41827393 -56.15118027]
[112.16542053 -41.76669693]
[107.91257477 -27.38221741]
[103.65972900 -12.99773598]
[99.40688324 1.38674486]
[108.10710144 10.90960312]
[110.97379303 23.63030624]
[107.11677551 36.23399734]
[97.41687775 45.36507797]
[100.17311859 60.10967255]
[102.92935944 74.85427094]
[123.31344604 90.13226318]
[120.09164429 115.40177155]
[128.75825500 127.64472198]
[127.91069031 112.66869354]
[129.94647217 97.80747986]
[134.79026794 83.61108398]
[142.26280212 70.60488129]
[152.08752441 59.27021790]
[163.90086365 50.02656555]
[177.26560974 43.21601486]
[191.68716431 39.09061813]
[206.63179016 37.80304718]
[221.54644775 39.40094757]
[235.87913513 43.82519150]
[249.09944153 50.91204453]
[260.71810913 60.39922714]
[270.30514526 71.93563843]
[277.50573730 85.09433746]
[282.05343628 99.38834381]
[283.77987671 114.28865814]
[282.62124634 129.24383545]
[278.62039185 143.70043945]
[271.92535400 157.12341309]
[262.78390503 169.01602173]
[251.53439331 178.93814087]
[238.59312439 186.52256775]
[224.43902588 191.48860168]
[209.59591675 193.65248108]
[194.61312866 192.93409729]
[180.04515076 189.36006165]
[166.43110657 183.06262207]
[154.27482605 174.27485657]
[144.02619934 163.32196045]
[136.06259155 150.60546875]
[136.06259155 165.60546875]
[136.06259155 180.60546875]
[136.06259155 195.60546875]
[136.06259155 210.60546875]
[136.06259155 225.60546875]
[136.06259155 240.60546875]
[136.06259155 255.60546875]
[136.06259155 270.60546875]
[136.06259155 285.60546875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 112]
[12 111]
[16 29]
[17 28]
[18 27]
[19 26]
[35 109]
[36 108]
[37 107]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[47 55]
[48 54]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
