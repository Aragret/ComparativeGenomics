%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAxxxxxxxxxxCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.76412964 279.36044312]
[130.86421204 264.38745117]
[129.96429443 249.41447449]
[129.06437683 234.44149780]
[128.16445923 219.46852112]
[127.26454926 204.49552917]
[126.36463165 189.52255249]
[121.64382935 175.28479004]
[113.41977692 162.74026489]
[105.19572449 150.19575500]
[96.97167969 137.65122986]
[82.55643463 133.50384521]
[68.92330933 139.75988770]
[55.29018784 146.01591492]
[41.65706635 152.27195740]
[28.02394485 158.52798462]
[14.39082241 164.78402710]
[0.75770074 171.04005432]
[-5.00076675 187.53015137]
[-20.58543587 194.63935852]
[-36.18690872 188.42774963]
[-49.69212723 194.95532227]
[-63.19734192 201.48289490]
[-76.70256042 208.01045227]
[-90.20777893 214.53802490]
[-96.82143402 229.15441895]
[-112.40732574 232.95700073]
[-125.00928497 223.02874756]
[-124.96016693 206.98576355]
[-112.29766083 197.13485718]
[-96.73534393 201.03280640]
[-83.23012543 194.50523376]
[-69.72490692 187.97767639]
[-56.21969223 181.45010376]
[-42.71447372 174.92254639]
[-40.20645523 162.25065613]
[-30.70406914 153.21485901]
[-17.53630829 151.29100037]
[-5.49833488 157.40693665]
[8.13478756 151.15089417]
[21.76791000 144.89486694]
[35.40103149 138.63882446]
[49.03415298 132.38279724]
[62.66727448 126.12676239]
[76.30039978 119.87071991]
[70.89614868 105.44005585]
[73.22143555 90.88232422]
[82.02223206 79.89772034]
[94.48513794 74.95106506]
[95.68446350 59.99908447]
[96.88378906 45.04710770]
[98.08311462 30.09513092]
[99.28244019 15.14315510]
[84.54290009 12.27507305]
[70.21717072 7.77468967]
[56.48541260 1.69860160]
[43.52032089 -5.87677813]
[31.48494148 -14.85618114]
[20.53063583 -25.12668228]
[10.79516315 -36.55911636]
[2.40095806 -49.00971222]
[-4.54641247 -62.32189178]
[-9.95957851 -76.32823181]
[-13.77046394 -90.85260010]
[-15.93114281 -105.71232605]
[-16.41444206 -120.72053528]
[-15.21428394 -135.68849182]
[-12.34576130 -150.42794800]
[-7.84494972 -164.75354004]
[-1.76845098 -178.48512268]
[5.80731630 -191.44998169]
[14.78707981 -203.48509216]
[25.05790710 -214.43910217]
[36.49063492 -224.17422485]
[48.94148254 -232.56805420]
[62.25386810 -239.51502991]
[76.26036835 -244.92778015]
[90.78485107 -248.73823547]
[105.64463806 -250.89846802]
[120.65287018 -251.38131714]
[135.62078857 -250.18070984]
[150.36015320 -247.31173706]
[164.68562317 -242.81050110]
[178.41700745 -236.73359680]
[191.38165283 -229.15744019]
[203.41648865 -220.17732239]
[214.37017822 -209.90615845]
[224.10498047 -198.47314453]
[232.49842834 -186.02204895]
[239.44500732 -172.70945740]
[244.85733032 -158.70278931]
[248.66735840 -144.17819214]
[250.82714844 -129.31834412]
[251.30953979 -114.31009674]
[250.10848999 -99.34221649]
[247.23908997 -84.60292816]
[242.73741150 -70.27760315]
[236.66009521 -56.54639053]
[229.08355713 -43.58197784]
[220.10307312 -31.54740334]
[209.83158875 -20.59401894]
[198.39828491 -10.85957241]
[185.94692993 -2.46648479]
[172.63412476 4.47969151]
[158.62730408 9.89160061]
[144.10260010 13.70118332]
[129.24267578 15.86052895]
[114.23442078 16.34248161]
[113.03509521 31.29445839]
[111.83576965 46.24643707]
[110.63643646 61.19841385]
[109.43711090 76.15039062]
[120.36271667 82.72298431]
[127.13185883 94.12640381]
[127.71595001 107.88630676]
[121.49472046 120.74378204]
[109.51619720 129.42718506]
[117.74024963 141.97169495]
[125.96429443 154.51622009]
[134.18833923 167.06074524]
[133.54753113 152.07443237]
[136.19734192 137.31033325]
[142.00965881 123.48221588]
[150.70349121 111.25857544]
[161.85853577 101.23036957]
[174.93551636 93.88240814]
[189.30223083 89.56991577]
[204.26411438 88.50138092]
[219.09786987 90.72846222]
[233.08633423 96.14350128]
[245.55326843 104.48469543]
[255.89596558 115.34880066]
[263.61437988 128.21060181]
[268.33541870 142.44830322]
[269.83078003 157.37356567]
[268.02825928 172.26487732]
[263.01492310 186.40228271]
[255.03315735 199.10234070]
[244.46884155 209.75106812]
[231.83271790 217.83366394]
[217.73565674 222.95936584]
[202.85917664 224.88038635]
[187.92247009 223.50384521]
[173.64764404 218.89630127]
[160.72482300 211.28048706]
[149.77873230 201.02459717]
[141.33761597 188.62263489]
[142.23753357 203.59562683]
[143.13745117 218.56860352]
[144.03736877 233.54158020]
[144.93728638 248.51455688]
[145.83718872 263.48754883]
[146.73710632 278.46051025]
[156.22055054 291.83947754]
[149.13081360 306.62689209]
[132.76121521 307.61074829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 120]
[9 119]
[10 118]
[11 117]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
