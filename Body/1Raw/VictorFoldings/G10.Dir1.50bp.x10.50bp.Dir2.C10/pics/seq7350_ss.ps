%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAAxxxxxxxxxxACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.40464783 278.62661743]
[119.09259033 263.62985229]
[118.78053284 248.63310242]
[118.46847534 233.63633728]
[118.15642548 218.63958740]
[117.84436798 203.64283752]
[117.53231049 188.64608765]
[117.22025299 173.64932251]
[116.90819550 158.65257263]
[113.35343170 144.07986450]
[106.72493744 130.62390137]
[100.09643555 117.16793823]
[80.61111450 104.77524567]
[89.53969574 79.77677155]
[78.66087341 69.44956970]
[67.78204346 59.12236404]
[54.84967041 58.66680145]
[45.99706268 49.78703308]
[45.60796356 37.65625000]
[34.94633865 27.10495758]
[22.16898155 19.24753189]
[7.94220209 14.49371719]
[-6.28457737 9.73990250]
[-20.51135635 4.98608780]
[-34.73813629 0.23227303]
[-41.57041931 13.61799622]
[-50.32151031 25.83585358]
[-60.79590988 36.61289215]
[-72.75962067 45.70835114]
[-85.94535828 52.91903687]
[-100.05855560 58.08385468]
[-114.78391266 61.08742523]
[-129.79246521 61.86264420]
[-144.74891663 60.39219284]
[-159.31913757 56.70892334]
[-173.17761230 50.89512253]
[-186.01473999 43.08066940]
[-197.54374695 33.44014359]
[-207.50706482 22.18892097]
[-215.68209839 9.57835293]
[-221.88623047 -4.10983372]
[-225.98085022 -18.56983948]
[-227.87448120 -33.47862244]
[-227.52481079 -48.50311661]
[-224.93966675 -63.30766678]
[-220.17680359 -77.56153107]
[-213.34262085 -90.94628143]
[-204.58978271 -103.16289520]
[-194.11384583 -113.93844604]
[-182.14884949 -123.03219604]
[-168.96208191 -130.24099731]
[-154.84814453 -135.40380859]
[-140.12236023 -138.40528870]
[-125.11370087 -139.17835999]
[-110.15745544 -137.70578003]
[-95.58776855 -134.02044678]
[-81.73011780 -128.20466614]
[-68.89409637 -120.38838196]
[-57.36646652 -110.74621582]
[-47.40475464 -99.49357605]
[-39.23151398 -86.88184357]
[-33.02933502 -73.19277191]
[-28.93677902 -58.73218536]
[-27.04527092 -43.82313156]
[-27.39707184 -28.79868889]
[-29.98431969 -13.99450588]
[-15.75754166 -9.24069118]
[-1.53076231 -4.48687649]
[12.69601631 0.26693842]
[26.92279625 5.02075338]
[17.21707535 -6.41598511]
[10.73563862 -19.94340134]
[7.90386724 -34.67367935]
[8.90761375 -49.64005661]
[13.68100071 -63.86028290]
[21.91074753 -76.40106201]
[33.05672836 -86.43934631]
[46.38742065 -93.31630707]
[61.02792740 -96.58060455]
[76.01737213 -96.01799774]
[90.37198639 -91.66541290]
[103.14967346 -83.80851746]
[113.51181030 -72.96296692]
[120.77832794 -59.84054947]
[124.47232056 -45.30251694]
[124.35134125 -30.30300522]
[120.42333984 -15.82644558]
[112.94610596 -2.82294631]
[102.41037750 7.85406113]
[89.50762939 15.50383663]
[75.08467865 19.62431717]
[60.08810806 19.94507599]
[45.49762726 16.44333267]
[56.15925598 26.99462128]
[73.32809448 30.49190903]
[78.10925293 48.24353790]
[88.98807526 58.57074356]
[99.86689758 68.89794922]
[114.43960571 72.45271301]
[125.55428314 61.19329834]
[139.92755127 65.09950256]
[154.33976746 60.94161606]
[159.49650574 46.30646133]
[172.28979492 37.52516174]
[187.80036926 37.97430420]
[200.06408691 47.48118210]
[204.36531067 62.39021301]
[199.05010986 76.96856689]
[186.16230774 85.61056519]
[170.65753174 84.99318695]
[158.49766541 75.35382843]
[144.08544922 79.51171875]
[134.00161743 90.47373199]
[118.59748840 86.86492920]
[120.52696228 96.06022644]
[118.50872040 104.44470978]
[113.55240631 110.53944397]
[120.18090057 123.99540710]
[126.80940247 137.45137024]
[128.12075806 122.50880432]
[133.34327698 108.44731903]
[142.10388184 96.27144623]
[153.77671814 86.85099792]
[167.52790833 80.85894775]
[182.37510681 78.72335815]
[197.25765991 80.59679413]
[211.11238098 86.34541321]
[222.94952393 95.55854797]
[231.92347717 107.57804108]
[237.39315796 121.54524231]
[238.96781921 136.46235657]
[236.53497314 151.26374817]
[230.26841736 164.89204407]
[220.61581421 176.37365723]
[208.26673889 184.88836670]
[194.10337830 189.82789612]
[179.13751221 190.83940125]
[164.43829346 187.85058594]
[151.05580139 181.07499695]
[139.94602966 170.99665833]
[131.90495300 158.34051514]
[132.21701050 173.33726501]
[132.52906799 188.33403015]
[132.84112549 203.33078003]
[133.15318298 218.32752991]
[133.46522522 233.32427979]
[133.77728271 248.32104492]
[134.08934021 263.31777954]
[134.40139771 278.31454468]
[136.99240112 297.52227783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 119]
[11 118]
[12 117]
[14 98]
[15 97]
[16 96]
[19 94]
[20 93]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[99 114]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
