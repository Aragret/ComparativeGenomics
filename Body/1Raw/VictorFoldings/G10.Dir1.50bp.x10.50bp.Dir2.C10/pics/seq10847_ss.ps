%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCxxxxxxxxxxCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[280.97305298 66.25641632]
[275.51403809 52.19589996]
[261.17398071 56.59619904]
[246.83392334 60.99650192]
[232.49386597 65.39680481]
[222.59629822 76.52728271]
[207.13351440 73.17871857]
[192.79345703 77.57901764]
[178.45338440 81.97931671]
[164.11332703 86.37961578]
[149.77326965 90.77991486]
[135.43321228 95.18022156]
[121.09314728 99.58052063]
[106.75308228 103.98081970]
[112.56248474 112.74619293]
[113.84432220 124.28469849]
[109.70301056 136.75178528]
[99.90950012 148.06832886]
[87.07585144 155.83346558]
[74.24219513 163.59860229]
[68.47530365 170.76371765]
[61.06436157 171.38830566]
[48.07397842 178.88830566]
[40.34746552 193.35319519]
[23.95054817 193.62376404]
[15.75097466 179.42169189]
[24.18376160 165.35684204]
[40.57397842 165.89791870]
[53.56436157 158.39791870]
[66.47705841 150.76495361]
[79.31071472 142.99981689]
[92.14436340 135.23468018]
[90.53987122 127.90831757]
[87.33087158 113.25559235]
[85.72637177 105.92922974]
[70.82192993 104.23883057]
[55.91748047 102.54843140]
[44.70527649 113.44891357]
[29.10584068 114.54054260]
[16.48475075 105.30787659]
[12.80129814 90.11030579]
[19.79469681 76.12364960]
[34.16287994 69.95199585]
[49.12162781 74.50939178]
[57.60787582 87.64398956]
[72.51232147 89.33438873]
[87.41677094 91.02478027]
[102.35278320 89.64075470]
[116.69284821 85.24045563]
[131.03291321 80.84015656]
[145.37297058 76.43985748]
[159.71302795 72.03955841]
[174.05308533 67.63925934]
[188.39315796 63.23895645]
[202.73321533 58.83865356]
[213.65646362 47.39343643]
[228.09355164 51.05673981]
[242.43362427 46.65644073]
[256.77368164 42.25613785]
[271.11373901 37.85583878]
[267.77536011 23.30303764]
[265.49044800 8.54832935]
[264.27078247 -6.33212280]
[264.12265015 -21.26151466]
[265.04678345 -36.16278458]
[267.03833008 -50.95903015]
[270.08703613 -65.57388306]
[274.17709351 -79.93191528]
[279.28738403 -93.95902252]
[285.39147949 -107.58283234]
[292.45785522 -120.73302460]
[300.45001221 -133.34175110]
[309.32669067 -145.34393311]
[319.04202271 -156.67767334]
[329.54583740 -167.28446960]
[340.78393555 -177.10960388]
[352.69824219 -186.10238647]
[365.22726440 -194.21643066]
[378.30630493 -201.40989685]
[391.86785889 -207.64566040]
[405.84191895 -212.89158630]
[420.15631104 -217.12062073]
[434.73721313 -220.31095886]
[449.50927734 -222.44618225]
[464.39633179 -223.51528931]
[479.32147217 -223.51280212]
[494.20770264 -222.43876648]
[508.97817993 -220.29875183]
[523.55664062 -217.10383606]
[537.86791992 -212.87054443]
[551.83813477 -207.62075806]
[565.39514160 -201.38160706]
[578.46899414 -194.18531799]
[590.99230957 -186.06906128]
[602.90032959 -177.07475281]
[614.13171387 -167.24885559]
[624.62854004 -156.64210510]
[634.33654785 -145.30924988]
[643.20568848 -133.30883789]
[651.19030762 -120.70279694]
[658.24908447 -107.55622864]
[664.34570312 -93.93699646]
[669.44866943 -79.91540527]
[683.87603760 -84.02034760]
[698.30346680 -88.12529755]
[712.73083496 -92.23023987]
[726.31066895 -102.38034821]
[739.82336426 -92.14105988]
[733.72491455 -76.32191467]
[716.83575439 -77.80285645]
[702.40838623 -73.69791412]
[687.98101807 -69.59296417]
[673.55358887 -65.48802185]
[676.62207031 -50.73016357]
[678.61206055 -35.78839111]
[679.51318359 -20.74140549]
[679.32061768 -5.66845751]
[678.03527832 9.35105896]
[675.66400146 24.23803139]
[672.21917725 38.91403961]
[667.71893311 53.30177307]
[662.18695068 67.32543945]
[655.65234375 80.91116333]
[648.14947510 93.98737335]
[639.71783447 106.48516846]
[630.40185547 118.33870697]
[620.25048828 129.48553467]
[609.31726074 139.86689758]
[597.65972900 149.42811584]
[585.33923340 158.11878967]
[572.42065430 165.89312744]
[558.97204590 172.71012878]
[545.06420898 178.53387451]
[530.77038574 183.33364868]
[516.16589355 187.08413696]
[501.32760620 189.76556396]
[486.33367920 191.36376953]
[471.26309204 191.87030029]
[456.19522095 191.28244019]
[441.20947266 189.60327148]
[426.38470459 186.84158325]
[411.79907227 183.01191711]
[397.52938843 178.13438416]
[383.65081787 172.23466492]
[370.23648071 165.34379578]
[357.35705566 157.49803162]
[345.08041382 148.73869324]
[333.47119141 139.11186218]
[322.59060669 128.66822815]
[312.49597168 117.46279144]
[303.24047852 105.55453491]
[294.87292480 93.00616455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[3 59]
[4 58]
[5 57]
[7 55]
[8 54]
[9 53]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[18 32]
[19 31]
[20 30]
[22 29]
[23 28]
[35 47]
[36 46]
[37 45]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
