%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAxxxxxxxxxxACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.09384155 256.57675171]
[111.09384155 241.57676697]
[111.09384155 226.57676697]
[111.09384155 211.57676697]
[111.09384155 196.57676697]
[111.09384155 181.57676697]
[111.09384155 166.57676697]
[111.09384155 151.57676697]
[111.09384155 136.57676697]
[111.09384155 121.57676697]
[96.84714508 116.88296509]
[87.93099976 128.94540405]
[79.01484680 141.00782776]
[77.70541382 157.35461426]
[62.77983856 164.14866638]
[49.59226608 154.40084839]
[51.70894241 138.13888550]
[66.95241547 132.09167480]
[75.86856079 120.02924347]
[84.78471375 107.96681213]
[78.09833527 94.53877258]
[71.41256714 81.11191559]
[56.41335678 80.95791626]
[41.41414642 80.80392456]
[26.41493607 80.64992523]
[20.22262192 95.45655060]
[8.85866833 106.73523712]
[-5.92300367 112.78671265]
[-21.85680962 112.71530914]
[-36.51273727 106.56136322]
[-47.66694641 95.29061127]
[-53.63918304 80.64272308]
[-68.63838959 80.79672241]
[-83.63760376 80.95072174]
[-98.63681030 81.10471344]
[-113.63601685 81.25871277]
[-129.41224670 87.46734619]
[-139.74552917 74.02638245]
[-129.69038391 60.37609482]
[-113.79001617 66.25950623]
[-98.79080963 66.10550690]
[-83.79159546 65.95150757]
[-68.79238892 65.79751587]
[-53.79317856 65.64351654]
[-49.04065704 52.40588379]
[-40.02815628 41.56896210]
[-27.82694244 34.45287323]
[-13.89827919 31.93356323]
[0.08154584 34.33502579]
[12.42297173 41.38779068]
[21.62735176 52.25900269]
[26.56893349 65.65071869]
[41.56814194 65.80471039]
[56.56735229 65.95870972]
[71.56655884 66.11270905]
[84.85390472 59.15235138]
[93.26731110 46.73403549]
[101.68072510 34.31572342]
[88.05766296 40.59363174]
[73.36700439 43.62423325]
[58.37166595 43.25014114]
[43.85039902 39.49077988]
[30.55732155 32.54138565]
[19.18277550 22.76285172]
[10.31746578 10.66300583]
[4.42179012 -3.12978220]
[1.80192351 -17.89921951]
[2.59392214 -32.87829590]
[6.75665617 -47.28911209]
[14.07394409 -60.38328552]
[24.16578293 -71.48079681]
[36.50807953 -80.00533295]
[50.45986938 -85.51419067]
[65.29660797 -87.72128296]
[80.24777985 -86.51200104]
[94.53694916 -81.94912720]
[107.42202759 -74.26963043]
[118.23387909 -63.87233353]
[126.41101837 -51.29718018]
[131.52877808 -37.19723129]
[133.32138062 -22.30473137]
[131.69573975 -7.39308214]
[126.73628235 6.76332092]
[118.70323944 19.42597771]
[132.13069153 12.73990154]
[145.55813599 6.05382633]
[158.98559570 -0.63224924]
[172.41304016 -7.31832457]
[185.84048462 -14.00440025]
[188.39656067 -30.69471741]
[200.26325989 -42.47223282]
[216.64424133 -44.85455322]
[231.08189392 -37.10185623]
[244.36923218 -44.06221390]
[257.65658569 -51.02256775]
[255.91700745 -66.10031128]
[259.74539185 -80.78730774]
[268.62399292 -93.09726715]
[281.35202026 -101.36535645]
[296.20816040 -104.47339630]
[311.18319702 -102.00104523]
[324.25189209 -94.28267670]
[333.64685059 -82.36212158]
[338.09741211 -67.85154724]
[337.00173950 -52.71338272]
[330.50796509 -38.99494934]
[319.49435425 -28.55154800]
[305.45037842 -22.79556274]
[290.27539062 -22.50544167]
[276.02166748 -27.72042656]
[264.61694336 -37.73522949]
[251.32958984 -30.77487183]
[238.04225159 -23.81451607]
[237.32798767 -10.44881439]
[230.03105164 0.90115261]
[217.97554016 7.19956923]
[204.27456665 6.69884491]
[192.52656555 -0.57695049]
[179.09912109 6.10912466]
[165.67166138 12.79520035]
[152.24421692 19.48127556]
[138.81677246 26.16735077]
[125.38932037 32.85342789]
[114.09903717 42.72913361]
[105.68563080 55.14744568]
[97.27221680 67.56575775]
[110.60933685 60.70126724]
[120.70159912 49.60414124]
[133.62945557 41.99687576]
[148.23114014 38.56309509]
[163.19447327 39.61138153]
[177.17474365 45.04752731]
[188.91564941 54.38301468]
[197.36206055 66.77890778]
[201.75495911 81.12123871]
[201.69955444 96.12113190]
[197.20083618 110.43062592]
[188.66308594 122.76378632]
[176.85354614 132.01228333]
[162.83348083 137.34501648]
[147.86282349 138.28274536]
[133.28521729 134.74050903]
[126.09384155 121.57676697]
[126.09384155 136.57676697]
[126.09384155 151.57676697]
[126.09384155 166.57676697]
[126.09384155 181.57676697]
[126.09384155 196.57676697]
[126.09384155 211.57676697]
[126.09384155 226.57676697]
[126.09384155 241.57676697]
[126.09384155 256.57675171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 20]
[12 19]
[13 18]
[22 55]
[23 54]
[24 53]
[25 52]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[56 126]
[57 125]
[58 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[93 113]
[94 112]
[95 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
