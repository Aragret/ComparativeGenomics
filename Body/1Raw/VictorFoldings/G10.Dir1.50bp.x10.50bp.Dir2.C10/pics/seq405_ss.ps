%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGxxxxxxxxxxACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.33760834 282.51000977]
[98.33760834 267.51000977]
[98.33760834 252.51000977]
[98.33760834 237.51000977]
[98.33760834 222.51000977]
[98.33760834 207.51000977]
[98.33760834 192.51000977]
[98.33760834 177.51000977]
[98.33760834 162.51000977]
[98.33760834 147.51000977]
[88.29925537 144.56536865]
[79.45672607 139.60113525]
[72.19195557 132.99345398]
[66.78162384 125.18443298]
[63.38743210 116.65473175]
[62.05328751 107.89516449]
[47.05410004 108.05120087]
[32.05491257 108.20723724]
[17.05572319 108.36327362]
[9.90393639 120.18914032]
[-2.07061148 126.86920166]
[-15.67336559 126.74433899]
[-27.33578873 119.95468903]
[-34.05153656 108.37475586]
[-49.05072403 108.21871948]
[-64.04991150 108.06268311]
[-75.29576111 118.84083557]
[-90.50485229 118.46892548]
[-100.71086884 107.68130493]
[-115.71006012 107.52526855]
[-121.31256866 121.63115692]
[-131.63526917 132.75799561]
[-145.28207397 139.40095520]
[-160.40739441 140.66163635]
[-174.96563721 136.36953735]
[-186.98791504 127.10513306]
[-194.84832764 114.12136078]
[-197.48381042 99.17416382]
[-194.53793335 84.28503418]
[-186.40911865 71.46759796]
[-174.19670105 62.45530701]
[-159.55232239 58.46700668]
[-144.45651245 60.04207611]
[-130.95085144 66.96750641]
[-120.86186981 78.30667877]
[-115.55402374 92.52607727]
[-100.55483246 92.68211365]
[-90.12660217 82.10914612]
[-74.91307068 82.05371857]
[-63.89387512 93.06349945]
[-48.89468765 93.21953583]
[-33.89550018 93.37557220]
[-24.56440353 79.90575409]
[-8.89390659 74.57645416]
[7.03035402 79.66560364]
[16.89968681 93.36408997]
[31.89887619 93.20805359]
[46.89806366 93.05201721]
[61.89725113 92.89598083]
[68.39832306 77.55850983]
[80.73683929 66.36642456]
[96.63364410 61.38712311]
[113.15227509 63.54037476]
[120.87635803 50.68197250]
[128.60044861 37.82357025]
[136.19035339 24.88551521]
[143.64526367 11.86920547]
[151.10017395 -1.14710391]
[158.55508423 -14.16341305]
[166.00999451 -27.17972374]
[156.79826355 -36.11040497]
[149.84291077 -46.88130188]
[145.49906921 -58.93521118]
[143.98689270 -71.64958954]
[145.38043213 -84.36873627]
[149.60392761 -96.43760681]
[156.43601990 -107.23552704]
[165.52127075 -116.20812225]
[176.38874817 -122.89579773]
[188.47628784 -126.95725250]
[201.15972900 -128.18692017]
[213.78503418 -126.52532959]
[225.70208740 -122.06201935]
[234.21318054 -134.41358948]
[242.72427368 -146.76516724]
[236.67524719 -160.95716858]
[239.28176880 -176.16273499]
[249.71212769 -187.52984619]
[264.63800049 -191.43130493]
[279.29666138 -186.62214661]
[289.01049805 -174.63696289]
[290.67993164 -159.30018616]
[283.77221680 -145.50573730]
[270.49157715 -137.65534973]
[255.07585144 -138.25407410]
[246.56475830 -125.90250397]
[238.05366516 -113.55093384]
[248.96028137 -100.09973145]
[255.24783325 -83.94579315]
[256.30670166 -66.62653351]
[252.02543640 -49.79371262]
[242.80232239 -35.05588913]
[229.50845337 -23.82472038]
[213.40542603 -17.17974854]
[196.02560425 -15.76463127]
[179.02630615 -19.72481346]
[171.57139587 -6.70850325]
[164.11648560 6.30780649]
[156.66157532 19.32411575]
[149.20666504 32.34042358]
[148.60766602 39.75573730]
[141.45884705 45.54765701]
[133.73475647 58.40605927]
[126.01067352 71.26445770]
[141.99118042 90.07047272]
[144.30949402 117.22305298]
[158.09187317 123.14302063]
[171.87425232 129.06298828]
[185.65664673 134.98294067]
[199.43902588 140.90290833]
[214.81240845 136.31613159]
[227.90084839 145.59365845]
[228.66400146 161.61854553]
[216.51644897 172.09788513]
[200.77674866 168.99281311]
[193.51905823 154.68528748]
[179.73667908 148.76531982]
[165.95429993 142.84536743]
[152.17192078 136.92539978]
[138.38952637 131.00543213]
[132.12655640 135.13157654]
[141.38354492 146.93446350]
[150.64054871 158.73735046]
[163.10809326 167.07763672]
[163.05529785 182.07754517]
[150.52935791 190.32986450]
[136.72619629 184.45852661]
[133.98335266 169.71134949]
[126.79197693 156.54760742]
[119.60059357 143.38386536]
[113.33760834 147.51000977]
[113.33760834 162.51000977]
[113.33760834 177.51000977]
[113.33760834 192.51000977]
[113.33760834 207.51000977]
[113.33760834 222.51000977]
[113.33760834 237.51000977]
[113.33760834 252.51000977]
[113.33760834 267.51000977]
[113.33760834 282.51000977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 59]
[17 58]
[18 57]
[19 56]
[24 52]
[25 51]
[26 50]
[29 47]
[30 46]
[63 114]
[64 113]
[65 112]
[66 110]
[67 109]
[68 108]
[69 107]
[70 106]
[83 97]
[84 96]
[85 95]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
