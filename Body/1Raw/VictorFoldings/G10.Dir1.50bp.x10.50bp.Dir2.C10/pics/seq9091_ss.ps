%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAxxxxxxxxxxCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.62106323]
[92.50000000 233.62106323]
[92.50000000 218.62106323]
[92.50000000 203.62106323]
[92.50000000 188.62106323]
[92.50000000 173.62106323]
[92.50000000 158.62106323]
[92.50000000 143.62106323]
[92.50000000 128.62106323]
[92.50000000 113.62105560]
[82.81616211 125.07633209]
[68.26158142 121.44807434]
[65.08802795 106.78763580]
[76.84027863 97.46484375]
[61.84758377 96.99680328]
[46.85488892 96.52876282]
[31.86219215 96.06071472]
[16.86949730 95.59267426]
[11.47551060 108.49774170]
[-1.32168984 117.49612427]
[-18.60363007 118.45363617]
[-35.26963043 109.37566376]
[-50.13267517 111.39799500]
[-58.27582169 115.68064880]
[-65.32559967 113.30446625]
[-80.22750092 115.01715851]
[-95.12940979 116.72984314]
[-110.03131104 118.44253540]
[-124.93321228 120.15522766]
[-130.39257812 134.45396423]
[-141.87924194 144.56906128]
[-156.75361633 148.17616272]
[-171.59771729 144.44636536]
[-183.00045776 134.23677063]
[-188.34158325 119.89344025]
[-186.39372253 104.71237946]
[-177.60450745 92.18209076]
[-163.99360657 85.18193817]
[-148.68872070 85.32050323]
[-135.20681763 92.56594849]
[-126.64589691 105.25332642]
[-111.74399567 103.54063416]
[-96.84209442 101.82794189]
[-81.94019318 100.11525726]
[-67.03829193 98.40256500]
[-52.15501022 96.53495026]
[-37.29196548 94.51261902]
[-35.36338425 87.26481628]
[-31.50622559 72.76921844]
[-29.57764626 65.52142334]
[-41.47002411 56.37968826]
[-57.78925323 54.76264572]
[-64.30101776 39.71176529]
[-54.30657578 26.71010780]
[-38.08734894 29.13265991]
[-32.32829285 44.48730850]
[-20.43591118 53.62904358]
[7.13935518 59.81053925]
[17.33753967 80.59997559]
[32.33023453 81.06802368]
[47.32292938 81.53606415]
[62.31562805 82.00410461]
[77.30832672 82.47214508]
[106.05274200 82.06865692]
[116.93156433 71.74145508]
[102.18243408 74.47333527]
[87.42399597 71.79221344]
[74.57816315 64.04724121]
[65.31778717 52.24700928]
[60.84880829 37.92820358]
[61.75319290 22.95549393]
[67.91316986 9.27870083]
[78.52655792 -1.32111049]
[92.21122742 -7.46357822]
[107.18508148 -8.34879875]
[121.49815369 -3.86149406]
[133.28652954 5.41397619]
[141.01504517 18.26971245]
[143.67727661 33.03157425]
[140.92651367 47.77719498]
[133.12217712 60.58499908]
[146.64636230 54.09683228]
[160.17056274 47.60866928]
[173.69474792 41.12050247]
[187.21893311 34.63233948]
[172.29322815 33.14135742]
[158.36235046 27.57981300]
[146.51348877 18.38173485]
[137.67135620 6.26494551]
[132.52597046 -7.82494736]
[131.47891235 -22.78835869]
[134.61187744 -37.45752716]
[141.68035889 -50.68766403]
[152.13273621 -61.44627380]
[165.15330505 -68.89374542]
[179.72592163 -72.44887543]
[194.71331787 -71.83422089]
[208.94587708 -67.09774017]
[221.31288147 -58.60907364]
[230.84918213 -47.03069305]
[236.81056213 -33.26617813]
[238.73181152 -18.38972664]
[236.46296692 -3.56230831]
[230.18110657 10.05893326]
[220.37646484 21.41098404]
[207.81176758 29.60906982]
[222.80445862 29.14102936]
[237.79714966 28.67298698]
[252.78985596 28.20494461]
[263.42700195 16.51620483]
[279.21749878 15.85608292]
[290.79312134 26.61621666]
[291.28625488 42.41281128]
[280.40432739 53.87402344]
[264.60342407 54.20012283]
[253.25788879 43.19763947]
[238.26519775 43.66568375]
[223.27250671 44.13372421]
[208.27980042 44.60176849]
[193.70710754 48.15652847]
[180.18290710 54.64469528]
[166.65872192 61.13285828]
[153.13453674 67.62102509]
[139.61033630 74.10919189]
[127.25876617 82.62027740]
[116.37994385 92.94748688]
[127.97526550 83.43178558]
[142.27539062 78.90336609]
[157.23451233 80.01004791]
[170.71255493 86.59352875]
[180.78135681 97.71195221]
[186.00044250 111.77470398]
[185.62316895 126.76995850]
[179.70352173 140.55247498]
[169.08834839 151.15049744]
[155.29629517 157.04788208]
[140.30044556 157.40092468]
[126.24613953 152.15911865]
[115.14399719 142.07237244]
[108.58230591 128.58370972]
[107.50000000 113.62105560]
[107.50000000 128.62106323]
[107.50000000 143.62106323]
[107.50000000 158.62106323]
[107.50000000 173.62106323]
[107.50000000 188.62106323]
[107.50000000 203.62106323]
[107.50000000 218.62106323]
[107.50000000 233.62106323]
[107.50000000 248.62106323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[22 47]
[23 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[50 57]
[51 56]
[64 126]
[65 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
