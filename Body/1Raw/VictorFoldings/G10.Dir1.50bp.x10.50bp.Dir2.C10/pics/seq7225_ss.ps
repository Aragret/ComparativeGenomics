%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAxxxxxxxxxxCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[230.61067200 551.76855469]
[230.30270386 536.77172852]
[229.99472046 521.77490234]
[229.68673706 506.77804565]
[229.37876892 491.78118896]
[229.07078552 476.78436279]
[228.76280212 461.78753662]
[228.45483398 446.79067993]
[228.14685059 431.79385376]
[224.78759766 417.17483521]
[218.51818848 403.54785156]
[206.16963196 395.21945190]
[207.43077087 379.44860840]
[201.16136169 365.82162476]
[194.89196777 352.19464111]
[183.62705994 347.68197632]
[178.30899048 336.32901001]
[182.29963684 324.02136230]
[176.31134033 310.26852417]
[162.07133484 313.51147461]
[147.47325134 314.06909180]
[133.01918030 311.92068481]
[119.20653534 307.13867188]
[106.51096344 299.88610840]
[95.36992645 290.41110229]
[86.16764069 279.03848267]
[79.22183990 266.15841675]
[74.77278900 252.21328735]
[72.97498322 237.68229675]
[73.89178467 223.06509399]
[77.49316406 208.86460876]
[83.65673828 195.56967163]
[92.17185974 183.63825989]
[102.74686432 173.48165894]
[115.01905823 165.45036316]
[109.31439209 151.57748413]
[103.60973358 137.70460510]
[97.90506744 123.83172607]
[92.20040131 109.95884705]
[82.20930481 98.77054596]
[69.06767273 91.53884888]
[55.92604446 84.30714417]
[44.53293228 94.30578613]
[30.40604973 99.80187225]
[15.25128078 100.13172150]
[0.89864045 95.25550079]
[-10.91872120 85.76203918]
[-18.77379990 72.79772186]
[-21.71805573 57.92805099]
[-19.39595795 42.94860840]
[-12.08790970 29.66823769]
[-0.67639244 19.69060898]
[13.46059608 14.22056675]
[28.61594772 13.91864777]
[42.95957565 18.82130814]
[54.75942230 28.33653069]
[62.59059525 41.31530380]
[65.50744629 56.19037628]
[63.15774536 71.16551208]
[76.29937744 78.39721680]
[89.44100952 85.62891388]
[102.27466583 77.86378479]
[101.96668243 62.86694336]
[101.65870667 47.87010574]
[101.35073090 32.87326813]
[86.73052216 29.11134148]
[73.66800690 21.54343414]
[63.13250351 10.73113632]
[55.90582275 -2.52320838]
[52.52422714 -17.23604012]
[53.23865891 -32.31556702]
[57.99610138 -46.64279175]
[66.44351959 -59.15453720]
[77.95405579 -68.92234802]
[91.67355347 -75.22138214]
[106.58393860 -77.58422089]
[121.57875824 -75.83552551]
[135.54530334 -70.10504913]
[147.44714355 -60.81803894]
[156.40110779 -48.66365433]
[161.74275208 -34.54382706]
[163.07566833 -19.50634384]
[160.30096436 -4.66708469]
[153.62452698 8.87277699]
[143.54180908 20.10849380]
[130.80101013 28.20630264]
[116.34756470 32.56528854]
[116.65554810 47.56212616]
[116.96352386 62.55896759]
[117.27149963 77.55580139]
[119.78962708 86.17687225]
[119.03995514 94.01562500]
[115.77719116 100.01044464]
[111.05794525 103.49166870]
[106.07328796 104.25418091]
[111.77794647 118.12705994]
[117.48261261 131.99993896]
[123.18727112 145.87281799]
[128.89193726 159.74569702]
[144.02241516 156.74252319]
[159.44343567 156.73390198]
[174.56816101 159.71836853]
[188.82145691 165.58058167]
[201.66160583 174.09582520]
[212.60104370 184.93856812]
[221.22476196 197.69493103]
[227.20608521 211.87852478]
[230.31907654 226.94894409]
[230.44706726 242.33233643]
[227.58695984 257.44335938]
[221.84938049 271.70730591]
[213.45429993 284.58209229]
[202.72267151 295.57879639]
[190.06416321 304.28024292]
[196.05245972 318.03308105]
[211.10227966 328.59402466]
[208.51893616 345.92523193]
[214.78834534 359.55221558]
[221.05775452 373.17919922]
[233.85473633 382.48229980]
[232.14517212 397.27844238]
[238.41458130 410.90542603]
[240.09524536 395.99987793]
[245.83445740 382.14126587]
[255.18406677 370.41159058]
[267.41409302 361.72674561]
[281.56961060 356.76483154]
[296.54541016 355.91320801]
[311.17221069 359.23840332]
[324.30795288 366.48080444]
[334.92703247 377.07492065]
[342.20031738 390.19357300]
[345.55993652 404.81250000]
[344.74356079 419.79028320]
[339.81494141 433.95745850]
[331.15890503 446.20788574]
[319.45129395 455.58505249]
[305.60620117 461.35684204]
[290.70465088 463.07260132]
[275.91012573 460.59835815]
[262.37774658 454.12725830]
[251.16412354 444.16461182]
[243.14369202 431.48587036]
[243.45167542 446.48269653]
[243.75964355 461.47955322]
[244.06762695 476.47637939]
[244.37561035 491.47320557]
[244.68357849 506.47006226]
[244.99156189 521.46691895]
[245.29953003 536.46374512]
[245.60751343 551.46057129]
[248.19328308 570.66900635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 122]
[11 121]
[13 119]
[14 118]
[15 117]
[18 115]
[19 114]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 61]
[41 60]
[42 59]
[62 90]
[63 89]
[64 88]
[65 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
