%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAxxxxxxxxxxAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.17711639 321.35992432]
[118.17711639 306.35992432]
[118.17711639 291.35992432]
[118.17711639 276.35992432]
[118.17711639 261.35992432]
[118.17711639 246.35990906]
[118.17711639 231.35990906]
[118.17711639 216.35990906]
[118.17711639 201.35990906]
[118.17711639 186.35990906]
[116.08291626 171.50682068]
[111.93553162 157.09158325]
[97.29743195 153.81649780]
[87.40254974 165.08996582]
[77.50765991 176.36344910]
[77.11122131 192.40159607]
[64.23840332 201.97604370]
[48.76412964 197.74209595]
[42.55893707 182.94767761]
[50.38291931 168.94178772]
[66.23418427 166.46855164]
[76.12907410 155.19508362]
[86.02396393 143.92161560]
[74.38042450 132.82093811]
[68.36647797 119.53807068]
[54.27680206 124.68403625]
[40.18712616 129.83000183]
[26.09744644 134.97598267]
[15.99086380 147.89065552]
[-0.20678991 145.32783508]
[-5.83275604 129.92391968]
[4.90047646 117.52514648]
[20.95147896 120.88629913]
[35.04115677 115.74032593]
[49.13083267 110.59436035]
[63.22051239 105.44839478]
[62.86435318 98.16712952]
[63.93577957 90.95632935]
[66.39361572 84.09319305]
[70.14335632 77.84155273]
[75.04087067 72.44174194]
[80.89787292 68.10134125]
[87.48921204 64.98720551]
[85.39501190 50.13410950]
[83.30081177 35.28102112]
[81.20661163 20.42792892]
[79.11241150 5.57483721]
[65.87422180 2.93055797]
[54.12259293 -3.66675925]
[45.00267029 -13.55802536]
[39.39813995 -25.76397133]
[37.84560013 -39.08208847]
[40.48321915 -52.20510101]
[47.03856659 -63.84927750]
[56.85667038 -72.88001251]
[68.96544647 -78.42237091]
[67.46719360 -93.34735870]
[65.96893311 -108.27234650]
[54.86755371 -122.93138885]
[62.63134766 -138.64297485]
[60.83475876 -153.53498840]
[59.03816986 -168.42701721]
[54.88277435 -176.62583923]
[57.35769653 -183.63459778]
[55.85943985 -198.55958557]
[54.36117935 -213.48457336]
[39.54088974 -216.45951843]
[26.25669670 -223.67213440]
[15.68982887 -234.48104858]
[8.77988243 -247.92515564]
[6.14128494 -262.80902100]
[8.00865841 -277.80914307]
[14.21595764 -291.59179688]
[24.21123505 -302.93136597]
[37.10571289 -310.81954956]
[51.75283051 -314.55499268]
[66.85016632 -313.80548096]
[81.05529022 -308.63769531]
[93.10507202 -299.51113892]
[101.92807007 -287.23733521]
[106.73974609 -272.90768433]
[107.11224365 -257.79632568]
[103.01244354 -243.24700928]
[94.80489349 -230.55340576]
[83.21941376 -220.84422302]
[69.28616333 -214.98281860]
[70.78442383 -200.05784607]
[72.28268433 -185.13285828]
[73.93019104 -170.22360229]
[75.72677612 -155.33158875]
[77.52336884 -140.43955994]
[86.86376953 -132.69796753]
[88.45380402 -120.26609039]
[80.89392090 -109.77059937]
[82.39218140 -94.84561157]
[83.89043427 -79.92063141]
[99.89983368 -75.52065277]
[113.03472900 -65.30537415]
[121.27731323 -50.80856705]
[123.34776306 -34.22443771]
[118.90291595 -18.07548904]
[108.59274292 -4.82884932]
[93.96549988 3.48063564]
[96.05970001 18.33372688]
[98.15390015 33.18681717]
[100.24810028 48.03990936]
[102.34230804 62.89300156]
[122.04141998 67.33183289]
[137.55007935 82.01200104]
[143.71011353 103.67013550]
[137.66561890 126.56574249]
[152.57487488 128.21325684]
[167.48411560 129.86074829]
[182.39337158 131.50825500]
[197.30261230 133.15576172]
[206.23312378 130.97999573]
[212.49263000 134.98831177]
[227.36592102 136.93380737]
[242.23922729 138.87928772]
[258.72879028 134.93835449]
[267.08047485 149.69252014]
[255.21487427 161.80218506]
[240.29373169 153.75259399]
[225.42042542 151.80709839]
[210.54713440 149.86160278]
[195.65510559 148.06501770]
[180.74586487 146.41751099]
[165.83660889 144.77000427]
[150.92736816 143.12249756]
[136.01811218 141.47499084]
[126.35077667 152.94419861]
[130.49815369 167.35943604]
[134.94015503 153.03224182]
[144.44749451 141.43005371]
[157.62223816 134.25886536]
[172.52720642 132.57307434]
[186.97080994 136.62057495]
[198.82929993 145.80622864]
[206.35902405 158.77940369]
[208.45285034 173.63255310]
[204.80287170 188.18170166]
[195.94581604 200.28758240]
[183.18397522 208.17018127]
[168.39381409 210.67045593]
[153.75006104 207.42076111]
[141.40588379 198.89895630]
[133.17710876 186.35990906]
[133.17710876 201.35990906]
[133.17710876 216.35990906]
[133.17710876 231.35990906]
[133.17710876 246.35990906]
[133.17710876 261.35992432]
[133.17710876 276.35992432]
[133.17710876 291.35992432]
[133.17710876 306.35992432]
[133.17710876 321.35992432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 132]
[12 131]
[13 23]
[14 22]
[15 21]
[25 36]
[26 35]
[27 34]
[28 33]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[56 96]
[57 95]
[58 94]
[60 91]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
