%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGxxxxxxxxxxCAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.67887878 491.22378540]
[93.67887878 476.22378540]
[93.67887878 461.22378540]
[93.67887878 446.22378540]
[93.67887878 431.22378540]
[93.67887878 416.22378540]
[93.67887878 401.22378540]
[93.67887878 386.22378540]
[93.67887878 371.22378540]
[93.67887878 356.22378540]
[78.94907379 353.49011230]
[64.96869659 348.09484863]
[52.21441650 340.22036743]
[41.12137222 330.13357544]
[32.06834412 318.17694092]
[25.36481667 304.75677490]
[21.24040413 290.32946777]
[19.83698082 275.38598633]
[21.20380402 260.43511963]
[25.29578018 245.98614502]
[31.97496033 232.53157043]
[41.01518631 220.53028870]
[52.10974503 210.39189148]
[64.88178253 202.46273804]
[78.89708710 197.01412964]
[93.67887878 194.23298645]
[93.67887878 179.23298645]
[93.67887878 164.23298645]
[93.52284241 149.23379517]
[93.21079254 134.23703003]
[78.75936127 127.69663239]
[68.69496918 115.43576813]
[65.09630585 99.98680878]
[68.70664215 84.54057312]
[78.78029633 72.28732300]
[72.43316650 58.69637299]
[66.08603668 45.10542297]
[59.73891068 31.51447296]
[53.39178085 17.92352104]
[47.04465103 4.33257055]
[45.35712051 19.23734283]
[39.42784500 33.01572037]
[29.76439667 44.48819733]
[17.19401932 52.67267227]
[2.79280543 56.86850739]
[-12.20642471 56.71651840]
[-26.51965523 52.22971344]
[-38.92160034 43.79219055]
[-48.35058212 32.12624359]
[-53.99943161 18.23054504]
[-55.38457870 3.29463577]
[-52.38744354 -11.40288734]
[-45.26460266 -24.60383797]
[-34.62580109 -35.17814636]
[-21.38178635 -42.22058868]
[-6.66631031 -45.12829971]
[8.26090050 -43.65236664]
[22.12199593 -37.91912842]
[33.73039627 -28.41938591]
[42.09382248 -15.96328449]
[41.46984482 -30.95030022]
[40.84586716 -45.93731689]
[40.22188950 -60.92433167]
[31.91722107 -74.39070129]
[39.11838913 -87.42881775]
[38.49441147 -102.41583252]
[24.03938293 -106.97959900]
[12.01889038 -116.21450806]
[3.88446617 -129.00540161]
[0.61838168 -143.80770874]
[2.61503267 -158.83399963]
[9.63331413 -172.26976013]
[20.82573318 -182.49255371]
[34.84075165 -188.26792908]
[49.98598862 -188.89849854]
[64.43257904 -184.30810547]
[76.43603516 -175.05105591]
[84.54687500 -162.24519348]
[87.78567505 -147.43688965]
[85.76133728 -132.41430664]
[78.71830750 -118.99150848]
[67.50706482 -108.78935242]
[53.48142624 -103.03981018]
[54.10540390 -88.05279541]
[62.36544418 -75.65839386]
[55.20890808 -61.54830933]
[55.83288574 -46.56129456]
[56.45686340 -31.57427788]
[57.08083725 -16.58726120]
[60.63560104 -2.01455879]
[66.98272705 11.57639217]
[73.32985687 25.16734314]
[79.67698669 38.75829315]
[86.02411652 52.34924316]
[92.37124634 65.94019318]
[111.40547943 67.01238251]
[127.03706360 77.92591858]
[140.42335510 71.15779877]
[153.80963135 64.38968658]
[167.19592285 57.62157059]
[178.60290527 45.07896805]
[193.81311035 52.56802750]
[190.82733154 69.25698853]
[173.96403503 71.00785828]
[160.57774353 77.77597046]
[147.19146729 84.54409027]
[133.80517578 91.31220245]
[133.90940857 91.72837830]
[134.00852966 92.14580536]
[149.00770569 91.98976898]
[161.21531677 81.58044434]
[176.93690491 84.77595520]
[184.11221313 99.12497711]
[177.23696899 113.62017059]
[161.58526611 117.14205933]
[149.16374207 106.98895264]
[134.16456604 107.14498901]
[129.15892029 119.18399811]
[120.08450317 128.54612732]
[108.20754242 133.92498779]
[108.51959991 148.92173767]
[111.84445953 157.50061035]
[108.67887878 164.23298645]
[108.67887878 179.23298645]
[108.67887878 194.23298645]
[123.46067810 197.01412964]
[137.47598267 202.46273804]
[150.24801636 210.39189148]
[161.34257507 220.53028870]
[170.38279724 232.53157043]
[177.06198120 245.98614502]
[181.15396118 260.43511963]
[182.52078247 275.38598633]
[181.11735535 290.32946777]
[176.99295044 304.75677490]
[170.28941345 318.17694092]
[161.23638916 330.13357544]
[150.14334106 340.22036743]
[137.38906860 348.09484863]
[123.40869141 353.49011230]
[108.67887878 356.22378540]
[108.67887878 371.22378540]
[108.67887878 386.22378540]
[108.67887878 401.22378540]
[108.67887878 416.22378540]
[108.67887878 431.22378540]
[108.67887878 446.22378540]
[108.67887878 461.22378540]
[108.67887878 476.22378540]
[108.67887878 491.22378540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[29 121]
[30 120]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[60 89]
[61 88]
[62 87]
[63 86]
[65 84]
[66 83]
[97 107]
[98 106]
[99 105]
[100 104]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
