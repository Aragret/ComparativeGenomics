%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCxxxxxxxxxxCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[235.60171509 61.08467484]
[221.27912903 65.54148865]
[206.95652771 69.99830627]
[192.63392639 74.45512390]
[178.35847473 79.06068420]
[164.13168335 83.81449890]
[149.90490723 88.56831360]
[135.67813110 93.32212830]
[121.45135498 98.07594299]
[107.22457123 102.82975769]
[113.38784790 111.02379608]
[114.44828033 122.72103119]
[109.06288910 135.36643982]
[97.02075958 145.99620056]
[84.40962982 154.11775208]
[71.79850006 162.23928833]
[74.88043976 177.10086060]
[72.38178253 192.07153320]
[64.64046478 205.12666321]
[52.70342255 214.50064087]
[38.18505096 218.92572021]
[23.04883766 217.80343628]
[9.34183311 211.28558350]
[-1.08220398 200.25363159]
[-6.81350803 186.19956970]
[-7.07696676 171.02409363]
[-1.83695054 156.77957153]
[8.19787216 145.39244080]
[21.67037392 138.40272522]
[36.75851059 136.75572205]
[51.42173004 140.67417908]
[63.67695999 149.62815857]
[76.28808594 141.50662231]
[88.89921570 133.38507080]
[87.65666199 125.98872375]
[73.60312653 120.74483490]
[85.17153931 111.19601440]
[83.92897797 103.79965973]
[69.35627747 100.24490356]
[54.78357315 96.69013977]
[41.41010284 105.11188507]
[26.01728249 101.52906036]
[17.73740005 88.06729126]
[21.48276711 72.71321106]
[35.03131866 64.57611847]
[50.34494400 68.48361206]
[58.33833694 82.11743927]
[72.91104126 85.67219543]
[87.48374176 89.22695923]
[102.47075653 88.60298157]
[116.69754028 83.84916687]
[130.92431641 79.09535217]
[145.15109253 74.34153748]
[159.37786865 69.58772278]
[173.60466003 64.83390808]
[180.80822754 59.11023331]
[188.17710876 60.13252640]
[202.49971008 55.67570877]
[216.82231140 51.21889496]
[231.14491272 46.76207733]
[227.66365051 32.16571426]
[225.17573547 17.36763382]
[223.69252014 2.43535280]
[223.22076416 -12.56299400]
[223.76261902 -27.55897141]
[225.31562805 -42.48415375]
[227.87268066 -57.27044678]
[231.42213440 -71.85037231]
[235.94776917 -86.15741730]
[241.42895508 -100.12629700]
[247.84068298 -113.69327545]
[255.15368652 -126.79644012]
[263.33459473 -139.37600708]
[272.34609985 -151.37458801]
[282.14703369 -162.73742676]
[292.69274902 -173.41268921]
[303.93508911 -183.35163879]
[315.82275391 -192.50895691]
[328.30151367 -200.84284973]
[341.31442261 -208.31527710]
[354.80209351 -214.89215088]
[368.70300293 -220.54348755]
[382.95373535 -225.24345398]
[397.48922729 -228.97065735]
[412.24319458 -231.70805359]
[427.14831543 -233.44316101]
[442.13656616 -234.16806030]
[457.13955688 -233.87945557]
[472.08883667 -232.57865906]
[486.91616821 -230.27160645]
[501.55395508 -226.96881104]
[515.93536377 -222.68536377]
[529.99481201 -217.44079590]
[543.66809082 -211.25904846]
[556.89282227 -204.16830444]
[569.60876465 -196.20094299]
[581.75775146 -187.39331055]
[593.28442383 -177.78558350]
[604.13623047 -167.42161560]
[614.26354980 -156.34867859]
[623.62030029 -144.61730957]
[632.16363525 -132.28103638]
[639.85473633 -119.39614868]
[646.65838623 -106.02142334]
[652.54357910 -92.21790314]
[657.48352051 -78.04856110]
[661.45556641 -63.57804871]
[664.44165039 -48.87239838]
[666.42816162 -33.99870682]
[667.40600586 -19.02483749]
[667.37072754 -4.01911545]
[666.32250977 10.94999218]
[664.26611328 25.81418228]
[661.21093750 40.50563431]
[657.17089844 54.95731354]
[652.16442871 69.10327911]
[646.21441650 82.87899017]
[639.34796143 96.22158051]
[631.59643555 109.07018280]
[622.99517822 121.36616516]
[613.58343506 133.05342102]
[603.40411377 144.07862854]
[592.50378418 154.39146423]
[580.93200684 163.94490051]
[568.74176025 172.69534302]
[555.98852539 180.60284424]
[542.73059082 187.63134766]
[529.02838135 193.74874878]
[514.94445801 198.92718506]
[500.54309082 203.14299011]
[485.88995361 206.37693787]
[471.05191040 208.61427307]
[456.09667969 209.84478760]
[441.09249878 210.06286621]
[426.10784912 209.26751709]
[411.21105957 207.46235657]
[396.47012329 204.65565491]
[381.95227051 200.86016846]
[367.72381592 196.09326172]
[353.84960938 190.37666321]
[340.39300537 183.73645020]
[327.41534424 176.20294189]
[314.97592163 167.81048584]
[303.13140869 158.59739685]
[291.93594360 148.60569763]
[281.44052124 137.88099670]
[271.69308472 126.47221375]
[262.73809814 114.43141174]
[254.61639404 101.81352234]
[247.36506653 88.67612457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[4 57]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[14 34]
[15 33]
[16 32]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
