%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUxxxxxxxxxxUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[83.61449432 455.16500854]
[83.61449432 440.16500854]
[83.61449432 425.16500854]
[83.61449432 410.16500854]
[83.61449432 395.16500854]
[83.61449432 380.16500854]
[83.61449432 365.16500854]
[83.61449432 350.16500854]
[83.61449432 335.16500854]
[83.61449432 320.16500854]
[69.97729492 317.64163208]
[56.99504471 312.75231934]
[45.07486725 305.64901733]
[34.59082031 296.55310059]
[25.87217712 285.74847412]
[19.19306183 273.57278442]
[14.76384449 260.40676880]
[12.72451496 246.66242981]
[13.14025211 232.77012634]
[15.99934864 219.16505432]
[21.21353149 206.27363586]
[28.62068939 194.50018311]
[37.98991013 184.21420288]
[49.02868652 175.73876953]
[61.39203644 169.34040833]
[74.69329071 165.22071838]
[88.51618958 163.50999451]
[89.45181274 148.53921509]
[90.38744354 133.56842041]
[91.32307434 118.59762573]
[82.39313507 113.94886780]
[76.11140442 104.98504639]
[74.53185272 93.26477814]
[59.53266907 93.10874176]
[49.49502182 105.09955597]
[34.08923721 107.78206635]
[20.58945656 99.88966370]
[15.36986351 85.14891052]
[20.89499092 70.51993561]
[34.55603790 62.91008759]
[49.90268326 65.91251373]
[59.68870544 78.10955811]
[74.68788910 78.26559448]
[86.76788330 69.37324524]
[91.07546234 55.00505829]
[95.38304901 40.63687515]
[99.69063568 26.26869011]
[99.16040802 17.08333588]
[104.24017334 11.64811230]
[108.84574127 -2.62734842]
[113.45130157 -16.90280914]
[106.50127411 -30.84321213]
[111.37532806 -45.25495148]
[124.70820618 -51.79483414]
[129.31376648 -66.07028961]
[133.91932678 -80.34575653]
[120.24644470 -86.55460358]
[107.37044525 -94.28160095]
[95.45921326 -103.42601776]
[84.66802979 -113.86862946]
[75.13758087 -125.47329712]
[66.99211884 -138.08872986]
[60.33782959 -151.55046082]
[55.26146698 -165.68298340]
[51.82921600 -180.30206299]
[50.08581924 -195.21710205]
[50.05400848 -210.23365784]
[51.73419571 -225.15594482]
[55.10447693 -239.78942871]
[60.12091827 -253.94332886]
[66.71810913 -267.43313599]
[74.81005859 -280.08297729]
[84.29125214 -291.72790527]
[95.03809357 -302.21615601]
[106.91047668 -311.41094971]
[119.75361633 -319.19244385]
[133.40008545 -325.45916748]
[147.67195129 -330.12942505]
[162.38317871 -333.14233398]
[177.34196472 -334.45861816]
[192.35328674 -334.06112671]
[207.22143555 -331.95501709]
[221.75259399 -328.16778564]
[235.75730896 -322.74874878]
[249.05299377 -315.76861572]
[261.46630859 -307.31832886]
[272.83544922 -297.50808716]
[283.01217651 -286.46582031]
[291.86380005 -274.33541870]
[299.27493286 -261.27505493]
[305.14898682 -247.45503235]
[309.40933228 -233.05546570]
[312.00042725 -218.26412964]
[312.88854980 -203.27383423]
[312.06207275 -188.28001404]
[309.53176880 -173.47813416]
[305.33065796 -159.06118774]
[299.51345825 -145.21711731]
[292.15606689 -132.12641907]
[283.35440063 -119.95974731]
[273.22314453 -108.87571716]
[261.89443970 -99.01883698]
[249.51594543 -90.51760864]
[236.24906921 -83.48287201]
[222.26673889 -78.00632477]
[207.75128174 -74.15937805]
[192.89190674 -71.99217987]
[177.88233948 -71.53298187]
[162.91827393 -72.78777313]
[148.19479370 -75.74018860]
[143.58923340 -61.46472931]
[138.98367310 -47.18926620]
[145.98071289 -34.09052658]
[141.51336670 -19.54757309]
[127.72676086 -12.29724503]
[123.12120056 1.97821593]
[118.51563263 16.25367737]
[114.05882263 30.57627296]
[109.75123596 44.94445801]
[105.44364929 59.31264114]
[101.13606262 73.68082428]
[120.15812683 86.24625397]
[121.24940491 107.28253937]
[106.29386139 119.53325653]
[105.35823822 134.50404358]
[104.42260742 149.47483826]
[103.48697662 164.44563293]
[119.13586426 168.65145874]
[133.58686829 175.97091675]
[146.22825623 186.09172058]
[156.52537537 198.58308411]
[164.04330444 212.91398621]
[168.46519470 228.47583008]
[169.60565186 244.60816956]
[167.41844177 260.62689209]
[161.99847412 275.85305786]
[153.57756042 289.64184570]
[142.51458740 301.40972900]
[129.28019714 310.65924072]
[114.43677521 316.99993896]
[98.61449432 320.16500854]
[98.61449432 335.16500854]
[98.61449432 350.16500854]
[98.61449432 365.16500854]
[98.61449432 380.16500854]
[98.61449432 395.16500854]
[98.61449432 410.16500854]
[98.61449432 425.16500854]
[98.61449432 440.16500854]
[98.61449432 455.16500854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[27 127]
[28 126]
[29 125]
[30 124]
[33 43]
[34 42]
[44 121]
[45 120]
[46 119]
[47 118]
[49 117]
[50 116]
[51 115]
[54 112]
[55 111]
[56 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
