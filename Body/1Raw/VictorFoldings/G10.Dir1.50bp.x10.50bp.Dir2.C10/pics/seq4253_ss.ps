%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAxxxxxxxxxxGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 284.79653931]
[92.50000000 269.79653931]
[92.50000000 254.79655457]
[92.50000000 239.79655457]
[92.50000000 224.79655457]
[92.50000000 209.79655457]
[92.50000000 194.79655457]
[92.50000000 179.79655457]
[92.50000000 164.79655457]
[92.50000000 149.79655457]
[78.60349274 145.58657837]
[66.48587036 137.58656311]
[57.15459442 126.46162415]
[51.38545609 113.13668823]
[36.48355484 114.84937286]
[33.42452240 130.33860779]
[25.74714470 144.11247253]
[14.21031570 154.83406067]
[-0.05313246 161.46687317]
[-15.64765167 163.37516785]
[-31.05152321 160.38478088]
[-44.76534271 152.79895020]
[-55.45798492 141.36770630]
[-62.09577942 127.21357727]
[-76.95882416 129.23591614]
[-91.82187653 131.25823975]
[-106.68492126 133.28057861]
[-121.54796600 135.30291748]
[-136.41101074 137.32525635]
[-142.15270996 151.57054138]
[-154.25769043 161.02384949]
[-169.46978760 163.14225769]
[-183.69702148 157.35594177]
[-193.11233521 145.22138977]
[-195.18305969 130.00273132]
[-189.35217285 115.79370117]
[-177.18815613 106.41647339]
[-161.96307373 104.39346313]
[-147.77239990 110.26885986]
[-138.43334961 122.46220398]
[-123.57030487 120.43986511]
[-108.70725250 118.41753387]
[-93.84420776 116.39520264]
[-78.98116302 114.37286377]
[-64.11811066 112.35053253]
[-61.91963196 98.23442078]
[-55.81709671 85.29947662]
[-46.29924011 74.60272217]
[-34.13429260 67.02108765]
[-20.30797386 63.17953110]
[-5.94363546 63.39951706]
[7.78901863 67.67214203]
[19.76917839 75.65811920]
[29.01640511 86.71472168]
[34.77086639 99.94747162]
[49.67276764 98.23478699]
[55.11204529 77.17418671]
[68.92612457 60.37222290]
[88.53769684 50.96366882]
[110.28780365 50.70388031]
[130.11849976 59.64133072]
[140.78012085 49.09004211]
[151.44175720 38.53874969]
[162.10337830 27.98746109]
[147.44378662 31.16491508]
[132.56881714 29.23216629]
[119.20799255 22.41393280]
[108.91475677 11.50296593]
[102.88588715 -2.23212647]
[101.82236481 -17.19437599]
[105.84783936 -31.64413452]
[114.49427795 -43.90134048]
[126.75636292 -52.54086304]
[141.20838928 -56.55818558]
[156.17004395 -55.48621750]
[169.90173340 -49.44960403]
[180.80688477 -39.15020752]
[187.61756897 -25.78553391]
[189.54193115 -10.90948486]
[186.35620117 3.74831700]
[178.42887878 16.48578072]
[191.95306396 9.99761486]
[205.47724915 3.50945020]
[219.00144958 -2.97871494]
[232.52563477 -9.46687984]
[229.93559265 -24.94890022]
[231.79750061 -40.52066422]
[237.95332336 -54.92893219]
[247.89974976 -67.01640320]
[260.82937622 -75.81468201]
[275.69622803 -80.62184906]
[291.30035400 -81.05847168]
[306.38470459 -77.09751129]
[319.73641968 -69.06588745]
[330.28427124 -57.61746216]
[343.67056274 -64.38557434]
[357.05685425 -71.15369415]
[370.37200928 -78.06069183]
[383.61459351 -85.10582733]
[391.83792114 -99.29415131]
[408.23437500 -98.99610901]
[415.93664551 -84.51830292]
[407.02133179 -70.75425720]
[390.65972900 -71.86324310]
[377.41714478 -64.81810760]
[372.96032715 -58.86138153]
[363.82495117 -57.76740646]
[350.43865967 -50.99929047]
[337.05239868 -44.23117828]
[339.94519043 -30.16044235]
[339.08462524 -15.80903912]
[334.52337646 -2.16176343]
[326.56835938 9.84326458]
[315.75994873 19.37908745]
[302.83538818 25.78686905]
[288.67840576 28.62142181]
[274.25885010 27.68211937]
[260.56619263 23.02709579]
[248.54174805 14.96967697]
[239.01379395 4.05731010]
[225.48960876 10.54547501]
[211.96542358 17.03363991]
[198.44122314 23.52180481]
[184.91703796 30.00996971]
[172.65466309 38.64908600]
[161.99304199 49.20037842]
[151.33142090 59.75166702]
[140.66978455 70.30295563]
[144.83233643 77.06513977]
[147.88017273 84.39758301]
[149.73750305 92.11795807]
[150.35816956 100.03431702]
[149.72671509 107.94982910]
[147.85885620 115.66766357]
[144.80104065 122.99594879]
[140.62927246 129.75245667]
[135.44731140 135.76919556]
[129.38397217 140.89656067]
[122.59002686 145.00708008]
[115.23441315 147.99853516]
[107.50000000 149.79655457]
[107.50000000 164.79655457]
[107.50000000 179.79655457]
[107.50000000 194.79655457]
[107.50000000 209.79655457]
[107.50000000 224.79655457]
[107.50000000 239.79655457]
[107.50000000 254.79655457]
[107.50000000 269.79653931]
[107.50000000 284.79653931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 56]
[15 55]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[61 128]
[62 127]
[63 126]
[64 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[95 109]
[96 108]
[97 107]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
