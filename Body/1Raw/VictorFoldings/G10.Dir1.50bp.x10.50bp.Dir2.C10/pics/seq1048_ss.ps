%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUxxxxxxxxxxACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.55854797 522.95996094]
[127.55854797 507.95996094]
[127.55854797 492.95996094]
[127.55854797 477.95996094]
[127.55854797 462.95996094]
[127.55854797 447.95996094]
[127.55854797 432.95996094]
[127.55854797 417.95996094]
[127.55854797 402.95996094]
[127.55854797 387.95996094]
[113.27489471 385.08663940]
[99.82697296 379.46728516]
[87.73733521 371.31805420]
[77.47615051 360.95358276]
[69.44294739 348.77459717]
[63.95104599 335.25262451]
[61.21534729 320.91152954]
[61.34392166 306.30743408]
[64.33372498 292.00698853]
[70.07066345 278.56549072]
[78.33394623 266.50515747]
[88.80455017 256.29513550]
[101.07758331 248.33291626]
[114.67790985 242.92910767]
[129.07853699 240.29519653]
[129.38652039 225.29835510]
[126.93359375 210.50027466]
[121.80329132 196.40487671]
[116.67298889 182.30949402]
[111.54268646 168.21411133]
[106.41238403 154.11871338]
[101.28208160 140.02333069]
[96.15177917 125.92793274]
[91.02147675 111.83255005]
[80.25279999 101.39054108]
[66.00610352 96.69673920]
[53.81563950 107.82408142]
[37.77272415 111.28335571]
[22.25812531 106.22640991]
[11.45990086 94.11752319]
[8.24292660 78.31097412]
[-6.09713411 73.91067505]
[-20.43719482 69.51037598]
[-36.28993607 73.70831299]
[-47.65836334 61.88922882]
[-42.84761810 46.21157837]
[-26.80658150 42.80318451]
[-16.03689575 55.17031479]
[-1.69683397 59.57061386]
[12.64322758 63.97091675]
[22.03284836 54.00843048]
[34.86519241 49.05198288]
[48.64595413 50.12634277]
[60.66987991 57.07801056]
[68.55184937 68.59412384]
[70.69990540 82.45004272]
[84.94659424 87.14384460]
[91.32322693 83.19560242]
[79.87226868 73.50666809]
[85.54847717 59.62211990]
[100.50750732 60.72998047]
[104.07648468 75.29912567]
[110.45310974 71.35088348]
[112.60169220 56.50555801]
[114.75026703 41.66023636]
[116.89884949 26.81491280]
[119.04742432 11.96959019]
[117.17298126 2.96502256]
[121.39554596 -3.15724134]
[123.84847260 -17.95532036]
[126.30139923 -32.75339890]
[112.86360168 -39.70183945]
[102.23213196 -50.46413040]
[95.44853973 -63.98589325]
[93.17741394 -78.94240570]
[95.64126587 -93.86837006]
[102.59870911 -107.30151367]
[113.36812592 -117.92577362]
[126.89443207 -124.70030212]
[141.85246277 -126.96140289]
[156.77677917 -124.48754883]
[170.20524597 -117.52110291]
[180.82229614 -106.74457550]
[187.58775330 -93.21373749]
[189.83883667 -78.25419617]
[187.35498047 -63.33153915]
[180.37953186 -49.90773773]
[169.59590149 -39.29791641]
[156.06053162 -32.54152298]
[141.09948730 -30.30047226]
[138.64654541 -15.50239277]
[136.19361877 -0.70431322]
[133.89274597 14.11816883]
[131.74417114 28.96349144]
[129.59559631 43.80881500]
[127.44701385 58.65413666]
[125.29843140 73.49945831]
[127.73102570 86.15232086]
[125.17993164 97.02345276]
[119.20491791 104.45222473]
[111.82336426 107.63308716]
[105.11686707 106.70224762]
[110.24716949 120.79763031]
[115.37747192 134.89302063]
[120.50777435 148.98841858]
[125.63807678 163.08380127]
[130.76837158 177.17918396]
[135.89868164 191.27458191]
[141.02897644 205.36996460]
[144.03205872 190.67366028]
[151.35455322 177.58239746]
[162.30541992 167.33163452]
[175.85124207 160.88873291]
[190.71365356 158.86172485]
[205.49006653 161.44189453]
[218.78604126 168.38577271]
[229.34678650 179.03802490]
[236.17567444 192.39341736]
[238.62828064 207.19154358]
[236.47311401 222.03591919]
[229.91358948 235.52563477]
[219.56871033 246.38766479]
[206.41476440 253.59693909]
[191.69308472 256.47311401]
[176.79299927 254.74473572]
[163.12063599 248.57495117]
[151.96626282 238.54598999]
[144.38336182 225.60632324]
[144.07537842 240.60316467]
[159.14109802 244.09216309]
[173.15350342 250.62112427]
[185.50688171 259.90524292]
[195.66773987 271.54067993]
[203.19792175 285.02209473]
[207.77340698 299.76464844]
[209.19833374 315.12933350]
[207.41331482 330.45068359]
[202.49797058 345.06558228]
[194.66731262 358.34201050]
[184.26243591 369.70626831]
[171.73551941 378.66793823]
[157.63034058 384.84088135]
[142.55854797 387.95996094]
[142.55854797 402.95996094]
[142.55854797 417.95996094]
[142.55854797 432.95996094]
[142.55854797 447.95996094]
[142.55854797 462.95996094]
[142.55854797 477.95996094]
[142.55854797 492.95996094]
[142.55854797 507.95996094]
[142.55854797 522.95996094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 129]
[26 128]
[27 109]
[28 108]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 57]
[36 56]
[41 50]
[42 49]
[43 48]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[69 92]
[70 91]
[71 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
