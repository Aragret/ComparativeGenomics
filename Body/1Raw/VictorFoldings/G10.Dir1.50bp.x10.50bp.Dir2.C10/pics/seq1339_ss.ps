%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGxxxxxxxxxxUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 251.98698425]
[92.50000000 236.98698425]
[92.50000000 221.98698425]
[92.50000000 206.98698425]
[92.50000000 191.98698425]
[92.50000000 176.98698425]
[92.50000000 161.98698425]
[92.50000000 146.98698425]
[92.50000000 131.98698425]
[92.50000000 116.98699188]
[86.85049438 112.05413055]
[72.65703583 116.90651703]
[75.55149078 102.18840790]
[69.90199280 97.25554657]
[55.03894424 99.27787781]
[40.17589569 101.30020905]
[25.31284904 103.32254791]
[10.44980240 105.34487915]
[-4.41324425 107.36721802]
[-12.09905910 127.63634491]
[-38.57661057 135.02587891]
[-51.81919479 142.07101440]
[-65.06178284 149.11614990]
[-78.30436707 156.16128540]
[-89.44795227 168.93849182]
[-104.81066895 161.76748657]
[-102.17272949 145.02001953]
[-85.34950256 142.91870117]
[-72.10691833 135.87356567]
[-58.86433029 128.82843018]
[-45.62174606 121.78330231]
[-47.01791000 114.41439819]
[-49.81023407 99.67658997]
[-51.20639420 92.30768585]
[-66.10829926 90.59499359]
[-81.01020050 88.88230896]
[-91.40502930 100.40303802]
[-106.59326172 103.58062744]
[-120.73471832 97.19323730]
[-128.39172363 83.69694519]
[-126.61999512 68.28134918]
[-116.10079956 56.87406158]
[-100.87899017 53.86141968]
[-86.80765533 60.40184021]
[-79.29750824 73.98040771]
[-64.39560699 75.69309235]
[-49.49370575 77.40578461]
[-29.68640709 72.48059845]
[-13.52122974 79.46453094]
[-6.43557835 92.50416565]
[8.42746830 90.48183441]
[23.29051590 88.45950317]
[38.15356064 86.43716431]
[53.01660919 84.41483307]
[67.87965393 82.39249420]
[89.36296082 77.23259735]
[102.64389038 86.62928772]
[111.66142273 74.64245605]
[120.67894745 62.65562439]
[129.69647217 50.66879272]
[121.52140808 22.39535904]
[145.61853027 -2.30480981]
[145.61853027 -17.30480957]
[145.61853027 -32.30480957]
[131.04141235 -36.19968033]
[117.96954346 -43.73551178]
[107.29419708 -54.39850235]
[99.74322510 -67.46163177]
[95.83147430 -82.03422546]
[95.82564545 -97.12271118]
[99.72614288 -111.69832611]
[107.26702881 -124.76728058]
[117.93413544 -135.43850708]
[131.00018311 -142.98443604]
[145.57427979 -146.89056396]
[160.66276550 -146.89056396]
[175.23687744 -142.98443604]
[188.30291748 -135.43850708]
[198.97003174 -124.76728058]
[206.51091003 -111.69832611]
[210.41140747 -97.12271118]
[210.40557861 -82.03422546]
[206.49383545 -67.46163177]
[198.94285583 -54.39850235]
[188.26751709 -43.73551178]
[175.19564819 -36.19968033]
[160.61853027 -32.30480957]
[160.61853027 -17.30480957]
[160.61853027 -2.30480981]
[166.56471252 2.26605749]
[173.75610352 -10.89768124]
[177.45413208 -25.43468857]
[191.62931824 -30.34020615]
[203.52169800 -21.19847679]
[202.42620850 -6.23853254]
[189.32896423 1.07325649]
[178.45709229 11.40779114]
[184.40328979 15.97865868]
[198.89888000 12.12149906]
[213.39448547 8.26433945]
[226.09196472 -5.03053284]
[242.83920288 0.12020136]
[257.25143433 -4.03768587]
[271.66363525 -8.19557381]
[282.64031982 -20.37935829]
[298.62161255 -16.70098305]
[303.16732788 -0.94444549]
[291.60122681 10.68127918]
[275.82153320 6.21664238]
[261.40930176 10.37452984]
[246.99708557 14.53241730]
[240.84686279 24.99578476]
[228.82318115 28.55245590]
[217.25163269 22.75993729]
[202.75604248 26.61709595]
[188.26045227 30.47425461]
[185.80825806 42.68308258]
[179.64959717 52.83213043]
[170.85215759 59.90958405]
[160.71473694 63.36787033]
[150.58491516 63.15613174]
[141.68331909 59.68632126]
[132.66578674 71.67315674]
[123.64825439 83.65998840]
[114.63072205 95.64682007]
[125.10372925 84.90828705]
[138.68084717 78.53160858]
[153.63256836 77.32905579]
[168.05429077 81.45381927]
[180.10894775 90.38047028]
[188.26098633 102.97190857]
[191.47196960 117.62419891]
[189.33285522 132.47088623]
[182.11616516 145.62077332]
[170.74114990 155.39875793]
[156.65679932 160.55931091]
[141.65724182 160.44506836]
[127.65313721 155.07057190]
[116.42839050 145.12045288]
[109.41282654 131.86216736]
[107.50000000 116.98699188]
[107.50000000 131.98698425]
[107.50000000 146.98698425]
[107.50000000 161.98698425]
[107.50000000 176.98698425]
[107.50000000 191.98698425]
[107.50000000 206.98698425]
[107.50000000 221.98698425]
[107.50000000 236.98698425]
[107.50000000 251.98698425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[21 31]
[22 30]
[23 29]
[24 28]
[34 47]
[35 46]
[36 45]
[57 125]
[58 124]
[59 123]
[60 122]
[62 89]
[63 88]
[64 87]
[98 116]
[99 115]
[100 114]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
