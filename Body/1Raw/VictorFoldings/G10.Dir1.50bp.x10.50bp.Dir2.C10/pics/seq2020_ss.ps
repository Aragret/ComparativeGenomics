%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCxxxxxxxxxxUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[200.17596436 234.05841064]
[190.66760254 222.45707703]
[181.15924072 210.85572815]
[171.65087891 199.25439453]
[162.14253235 187.65304565]
[152.63417053 176.05171204]
[143.12580872 164.45036316]
[133.61744690 152.84902954]
[124.10909271 141.24768066]
[114.60073090 129.64634705]
[104.11360168 132.78971863]
[93.17498779 132.33428955]
[82.98544312 128.33006287]
[78.93650055 143.62438965]
[64.52267456 147.37818909]
[54.08286285 158.14900208]
[50.61307526 174.17686462]
[34.91711807 178.92755127]
[23.14164734 167.51394653]
[27.40025711 151.67739868]
[43.31205750 147.70918274]
[53.75186920 136.93838501]
[57.05409241 122.41445160]
[72.21463776 117.89024353]
[67.05821991 102.63182831]
[69.72660065 86.74826050]
[79.58594513 74.01243591]
[73.23881531 60.42148209]
[66.89168549 46.83053207]
[60.54455566 33.23958206]
[46.43665314 38.36449051]
[31.93101311 42.22247696]
[17.14116478 44.78334045]
[2.18286180 46.02704620]
[-12.82682514 45.94385529]
[-27.77042198 44.53442001]
[-42.53097534 41.80976868]
[-56.99295807 37.79122925]
[-71.04319000 32.51025391]
[-84.57169342 26.00817108]
[-97.47260284 18.33587074]
[-109.64494324 9.55339909]
[-120.99344635 -0.27050707]
[-131.42929077 -11.05896091]
[-140.87080383 -22.72752571]
[-149.24409485 -35.18487930]
[-156.48362732 -48.33352280]
[-162.53273010 -62.07054901]
[-167.34408569 -76.28844452]
[-170.88002014 -90.87593079]
[-173.11285400 -105.71884918]
[-174.02511597 -120.70101166]
[-173.60968018 -135.70518494]
[-171.86978149 -150.61392212]
[-168.81904602 -165.31053162]
[-164.48135376 -179.68002319]
[-158.89064026 -193.60989380]
[-152.09066772 -206.99114990]
[-144.13465881 -219.71905518]
[-135.08488464 -231.69400024]
[-125.01216888 -242.82225037]
[-113.99533844 -253.01672363]
[-102.12062836 -262.19760132]
[-89.48097229 -270.29309082]
[-76.17528534 -277.23977661]
[-62.30771637 -282.98330688]
[-47.98679733 -287.47872925]
[-33.32460785 -290.69085693]
[-18.43590546 -292.59457397]
[-3.43721318 -293.17495728]
[11.55408096 -292.42749023]
[26.42064667 -290.35797119]
[41.04613113 -286.98266602]
[55.31606674 -282.32794189]
[69.11877441 -276.43023682]
[82.34622192 -269.33569336]
[94.89488983 -261.09988403]
[106.66655731 -251.78723145]
[117.56909943 -241.47064209]
[127.51718903 -230.23083496]
[136.43296814 -218.15580750]
[144.24664307 -205.34002686]
[150.89707947 -191.88383484]
[156.33222961 -177.89251709]
[160.50953674 -163.47558594]
[163.39631653 -148.74589539]
[164.96997070 -133.81869507]
[165.21818542 -118.81082916]
[164.13902283 -103.83975220]
[161.74093628 -89.02264404]
[158.04266357 -74.47546387]
[153.07318115 -60.31206131]
[146.87136841 -46.64329529]
[139.48577881 -33.57614136]
[130.97419739 -21.21286583]
[121.40323639 -9.65023327]
[110.84782410 1.02126145]
[99.39055634 10.71809864]
[87.12110901 19.36438560]
[74.13550568 26.89245224]
[80.48263550 40.48340225]
[86.82976532 54.07435608]
[93.17689514 67.66530609]
[109.09591675 68.22970581]
[122.90160370 76.17556000]
[131.38636780 89.65675354]
[132.57888794 105.54106903]
[126.20207214 120.13798523]
[135.71043396 131.73933411]
[145.21879578 143.34066772]
[154.72715759 154.94201660]
[164.23550415 166.54335022]
[173.74386597 178.14469910]
[183.25222778 189.74603271]
[192.76058960 201.34738159]
[202.26893616 212.94871521]
[211.77729797 224.55006409]
[220.37214661 227.69717407]
[224.49351501 234.75286865]
[237.87979126 241.52099609]
[251.26608276 248.28910828]
[264.65237427 255.05722046]
[280.98736572 253.60809326]
[290.18710327 267.18368530]
[282.78768921 281.81860352]
[266.40100098 282.45767212]
[257.88424683 268.44351196]
[244.49797058 261.67538452]
[231.11167908 254.90727234]
[217.72538757 248.13916016]
[225.68978882 260.85012817]
[230.01393127 275.21331787]
[230.39068604 290.20858765]
[226.79327393 304.77081299]
[219.47723389 317.86569214]
[208.96220398 328.56307983]
[195.99505615 336.10317993]
[181.49682617 339.95040894]
[166.49729919 339.83151245]
[152.06185913 335.75497437]
[139.21586609 328.01028442]
[128.87171936 317.14755249]
[121.76416016 303.93835449]
[118.39803314 289.32092285]
[119.01242065 274.33352661]
[123.56369019 260.04064941]
[131.72857666 247.45755005]
[142.92712402 237.47795105]
[156.36392212 230.81068420]
[171.08457947 227.92933655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[3 115]
[4 114]
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[13 24]
[15 22]
[16 21]
[27 103]
[28 102]
[29 101]
[30 100]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
