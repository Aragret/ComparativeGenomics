%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCxxxxxxxxxxCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.89894104 345.82638550]
[132.89894104 330.82638550]
[132.89894104 315.82638550]
[132.89894104 300.82638550]
[132.89894104 285.82638550]
[132.89894104 270.82638550]
[132.89894104 255.82640076]
[132.89894104 240.82640076]
[132.89894104 225.82640076]
[132.89894104 210.82640076]
[114.50304413 189.31076050]
[120.96388245 167.12554932]
[111.45552063 155.52420044]
[101.94716644 143.92286682]
[92.43880463 132.32151794]
[78.98284149 125.69302368]
[63.99014282 125.22498322]
[76.38745117 133.66931152]
[85.22683716 145.78811646]
[89.48054504 160.17233276]
[88.65400696 175.14955139]
[82.84331512 188.97836304]
[72.72408295 200.05090332]
[59.47286224 207.07977295]
[44.63035965 209.24774170]
[29.92230034 206.30274963]
[17.05878067 198.58718872]
[7.53542852 186.99815369]
[2.45951772 172.88308716]
[2.42121983 157.88313293]
[7.42498732 143.74232483]
[16.88903618 132.10481262]
[29.71299171 124.32366943]
[44.40871048 121.30352020]
[30.39199829 115.96200562]
[16.37528610 110.62049103]
[3.40478659 118.93146515]
[-11.79476357 118.02203369]
[-23.40695763 108.45014954]
[-27.11183548 94.04834747]
[-41.12854767 88.70683289]
[-55.14525986 83.36531830]
[-69.16197205 78.02381134]
[-83.47995758 84.71492004]
[-98.30690765 79.24345398]
[-104.84626770 64.85552979]
[-99.21835327 50.08725357]
[-84.76209259 43.70037842]
[-70.05413818 49.48412323]
[-63.82046127 64.00709534]
[-49.80374908 69.34860992]
[-35.78703690 74.69012451]
[-21.77032280 80.03163147]
[-9.42044353 71.74800873]
[5.61694956 72.33179474]
[17.56690025 81.76853180]
[21.71679878 96.60378265]
[35.73351288 101.94528961]
[49.75022507 107.28680420]
[64.45818329 110.23228455]
[79.45088196 110.70032501]
[81.18842316 90.83856201]
[96.57670593 81.63682556]
[99.97968292 67.02793121]
[103.38265991 52.41904068]
[106.78563690 37.81015015]
[98.70086670 24.49571228]
[102.36008453 9.72869396]
[115.10318756 2.10315251]
[118.50616455 -12.50574017]
[105.26675415 -19.75975418]
[94.47621918 -30.31754112]
[86.93527985 -43.39564514]
[83.20352936 -58.02358627]
[83.55788422 -73.11586761]
[87.97204590 -87.55255127]
[96.11846924 -100.26232910]
[107.39261627 -110.30205536]
[120.95787811 -116.92671967]
[135.80763245 -119.64472198]
[150.83990479 -118.25437164]
[164.93923950 -112.85884094]
[177.05932617 -103.85851288]
[186.30081177 -91.92127228]
[191.97789001 -77.93294525]
[193.66929626 -62.93155670]
[191.24952698 -48.03030777]
[184.89811707 -34.33496857]
[175.08641052 -22.86182785]
[162.54249573 -14.46226501]
[148.19720459 -9.75958729]
[133.11505127 -9.10276222]
[129.71208191 5.50613022]
[137.77374268 17.97790909]
[134.53074646 32.84188080]
[121.39453125 41.21312714]
[117.99155426 55.82201767]
[114.58857727 70.43090820]
[111.18560028 85.03980255]
[118.61672211 93.25280762]
[120.35665131 104.83881378]
[115.12957764 116.03502655]
[104.04014587 122.81316376]
[113.54850769 134.41450500]
[123.05686188 146.01585388]
[132.56521606 157.61718750]
[155.11528015 155.31295776]
[173.03208923 176.51333618]
[187.84985352 178.84443665]
[202.66760254 181.17553711]
[217.48536682 183.50663757]
[232.30313110 185.83775330]
[247.12088013 188.16885376]
[261.93862915 190.49995422]
[275.70208740 182.25697327]
[290.67700195 188.01300049]
[295.37588501 203.35249329]
[286.19418335 216.50830078]
[270.17529297 217.38842773]
[259.60754395 205.31771851]
[244.78977966 202.98660278]
[229.97201538 200.65550232]
[215.15426636 198.32440186]
[200.33650208 195.99330139]
[185.51875305 193.66218567]
[170.70098877 191.33108521]
[165.00047302 196.20491028]
[176.88668823 205.35466003]
[188.77290344 214.50440979]
[200.65911865 223.65415955]
[214.22132874 230.06248474]
[220.94917297 243.46905518]
[217.98156738 258.17257690]
[206.58053589 267.92019653]
[191.59446716 268.56665039]
[179.39636230 259.83703613]
[175.17359924 245.44378662]
[167.98222351 232.28004456]
[160.79083252 219.11630249]
[153.59945679 205.95256042]
[147.89894104 210.82640076]
[147.89894104 225.82640076]
[147.89894104 240.82640076]
[147.89894104 255.82640076]
[147.89894104 270.82638550]
[147.89894104 285.82638550]
[147.89894104 300.82638550]
[147.89894104 315.82638550]
[147.89894104 330.82638550]
[147.89894104 345.82638550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 106]
[13 105]
[14 104]
[15 103]
[16 61]
[17 60]
[34 59]
[35 58]
[36 57]
[40 53]
[41 52]
[42 51]
[43 50]
[63 99]
[64 98]
[65 97]
[66 96]
[69 93]
[70 92]
[108 126]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
