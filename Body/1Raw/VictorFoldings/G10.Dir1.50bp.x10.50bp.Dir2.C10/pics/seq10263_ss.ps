%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGxxxxxxxxxxUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.10884857 286.62469482]
[121.10884857 271.62469482]
[121.10884857 256.62469482]
[121.10884857 241.62469482]
[121.10884857 226.62469482]
[121.10884857 211.62469482]
[121.10884857 196.62469482]
[121.10884857 181.62469482]
[121.10884857 166.62469482]
[121.10884857 151.62469482]
[105.52542114 153.03985596]
[90.86360168 150.05316162]
[78.28596497 143.29322815]
[68.67922211 133.67185974]
[62.59298325 122.28126526]
[48.57627106 127.62277222]
[34.55955505 132.96429443]
[30.02675247 137.92021179]
[24.49674797 139.54820251]
[19.84705544 138.22311401]
[5.62027693 142.97692871]
[-8.60650253 147.73074341]
[-9.29207611 162.89300537]
[-15.41217804 176.78216553]
[-26.13911438 187.51982117]
[-40.02215576 193.65379333]
[-55.18373108 194.35452271]
[-69.57336426 189.52722168]
[-81.24497986 179.82475281]
[-88.62008667 166.55929565]
[-90.70124817 151.52490234]
[-87.20702362 136.75483704]
[-78.60997009 124.24663544]
[-66.07276917 115.69192505]
[-51.29096985 112.24767303]
[-36.26369476 114.37967682]
[-23.02325630 121.79959869]
[-13.36031723 133.50396729]
[0.86646193 128.75015259]
[15.09324074 123.99633026]
[29.21804428 118.94757080]
[43.23475647 113.60606384]
[57.25146866 108.26454926]
[56.48758698 98.44773865]
[57.94904709 88.71031952]
[61.56110764 79.55027771]
[67.13903809 71.43609619]
[74.39756775 64.78274536]
[82.96546936 59.93050385]
[79.56249237 45.32161331]
[76.15951538 30.71272087]
[72.75653839 16.10382843]
[59.86433411 2.99768400]
[65.53512573 -13.58067894]
[61.82896042 -28.11561584]
[58.12279892 -42.65055084]
[43.06299591 -42.26322556]
[28.29468536 -45.23724365]
[14.55864429 -51.42343140]
[2.54386520 -60.51148987]
[-7.14699602 -72.04557037]
[-14.02784920 -85.44712067]
[-17.75355530 -100.04393005]
[-18.13723183 -115.10382843]
[-15.15963459 -129.87141418]
[-8.97011948 -143.60595703]
[0.12085018 -155.61853027]
[11.65727520 -165.30659485]
[25.06049538 -172.18420410]
[39.65820694 -175.90637207]
[54.71819687 -176.28640747]
[69.48506165 -173.30522156]
[83.21810913 -167.11238098]
[95.22847748 -158.01850891]
[104.91374969 -146.47973633]
[111.78810883 -133.07484436]
[115.50673676 -118.47623444]
[115.88311768 -103.41615295]
[112.89836884 -88.65000916]
[106.70219421 -74.91846466]
[97.60540771 -62.91029739]
[86.06428528 -53.22782135]
[72.65773773 -46.35671234]
[76.36389923 -31.82177544]
[80.07006073 -17.28684044]
[90.33642578 -10.81312466]
[93.51619720 1.31568599]
[87.36543274 12.70084953]
[90.76840973 27.30974197]
[94.17138672 41.91863632]
[97.57436371 56.52752686]
[130.98291016 61.19457245]
[154.99293518 90.70114136]
[168.23551941 83.65600586]
[181.47811890 76.61087036]
[194.72070312 69.56573486]
[207.96328735 62.52059937]
[221.20587158 55.47546387]
[225.58282471 40.28936005]
[239.45620728 32.71936798]
[254.59518433 37.25663376]
[262.01806641 51.20927811]
[257.32101440 66.29944611]
[243.29066467 73.57440186]
[228.25100708 68.71804810]
[215.00842285 75.76318359]
[201.76583862 82.80831909]
[188.52325439 89.85345459]
[175.28065491 96.89859009]
[162.03807068 103.94372559]
[163.75076294 118.84562683]
[178.24636841 122.70278931]
[192.74195862 126.55994415]
[207.23754883 130.41709900]
[218.02210999 119.48143005]
[232.83389282 115.41860199]
[247.68861389 119.32150269]
[258.59042358 130.14027405]
[262.60681152 144.96472168]
[258.65737915 159.80714417]
[247.80447388 170.67500305]
[232.96751404 174.64489746]
[218.13754272 170.64894104]
[207.30375671 159.76203918]
[203.38040161 144.91270447]
[188.88479614 141.05554199]
[174.38920593 137.19837952]
[159.89360046 133.34123230]
[153.94741821 137.91209412]
[164.81927490 148.24662781]
[175.69114685 158.58116150]
[189.94720459 163.24642944]
[197.54580688 176.17936707]
[194.68170166 190.90339661]
[182.78916931 200.04493713]
[167.82380676 199.02604675]
[157.28004456 188.35697937]
[156.43780518 173.38130188]
[149.24641418 160.21755981]
[142.05503845 147.05383301]
[136.10884094 151.62469482]
[136.10884094 166.62469482]
[136.10884094 181.62469482]
[136.10884094 196.62469482]
[136.10884094 211.62469482]
[136.10884094 226.62469482]
[136.10884094 241.62469482]
[136.10884094 256.62469482]
[136.10884094 271.62469482]
[136.10884094 286.62469482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 43]
[16 42]
[17 41]
[20 40]
[21 39]
[22 38]
[49 91]
[50 90]
[51 89]
[52 88]
[54 85]
[55 84]
[56 83]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[111 128]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
