%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUxxxxxxxxxxAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.45227051]
[92.50000000 233.45227051]
[92.50000000 218.45227051]
[92.50000000 203.45227051]
[92.50000000 188.45227051]
[92.50000000 173.45227051]
[92.50000000 158.45227051]
[92.50000000 143.45227051]
[92.50000000 128.45227051]
[92.50000000 113.45226288]
[86.58003998 99.66988373]
[75.70121002 89.34268188]
[64.82238770 79.01547241]
[53.94356155 68.68827057]
[42.83618546 78.77952576]
[31.01387405 88.02291107]
[18.54119682 96.36794281]
[5.48627472 103.76903534]
[-8.07958889 110.18577576]
[-22.08230019 115.58312225]
[-36.44538116 119.93157959]
[-51.09038544 123.20740509]
[-65.93732452 125.39271545]
[-80.90511322 126.47556305]
[-95.91200256 126.45004272]
[-110.87601471 125.31628418]
[-125.71543884 123.08049011]
[-140.34921265 119.75485992]
[-154.69741821 115.35757446]
[-168.68170166 109.91263580]
[-182.22564697 103.44978333]
[-195.25532532 96.00432587]
[-207.69953918 87.61691284]
[-219.49034119 78.33336639]
[-230.56333923 68.20439148]
[-240.85801697 57.28530121]
[-250.31819153 45.63573456]
[-258.89218140 33.31932068]
[-266.53314209 20.40332985]
[-273.19937134 6.95830107]
[-278.85443115 -6.94233084]
[-283.46743774 -21.22264481]
[-287.01321411 -35.80464554]
[-289.47235107 -50.60868835]
[-290.83148193 -65.55392456]
[-291.08316040 -80.55871582]
[-290.22598267 -95.54112244]
[-288.26467896 -110.41931152]
[-285.20989990 -125.11201477]
[-281.07836914 -139.53900146]
[-275.89266968 -153.62145996]
[-269.68109131 -167.28247070]
[-262.47753906 -180.44744873]
[-254.32142639 -193.04446411]
[-245.25724792 -205.00471497]
[-235.33451843 -216.26290894]
[-224.60743713 -226.75752258]
[-213.13459778 -236.43125916]
[-200.97865295 -245.23126221]
[-188.20599365 -253.10949707]
[-174.88638306 -260.02291870]
[-161.09257507 -265.93374634]
[-146.89990234 -270.80975342]
[-132.38587952 -274.62423706]
[-117.62979126 -277.35641479]
[-102.71221161 -278.99136353]
[-87.71462250 -279.52014160]
[-72.71894073 -278.93984985]
[-57.80706406 -277.25366211]
[-43.06044006 -274.47079468]
[-28.55961037 -270.60644531]
[-14.38377380 -265.68173218]
[-0.61035365 -259.72354126]
[12.68542290 -252.76440430]
[25.43093872 -244.84234619]
[37.55657959 -236.00062561]
[48.99612045 -226.28753662]
[59.68708420 -215.75611877]
[69.57107544 -204.46391296]
[78.59410858 -192.47257996]
[86.70690918 -179.84762573]
[93.86516571 -166.65797424]
[100.02977753 -152.97570801]
[105.16708374 -138.87551880]
[109.24901581 -124.43442535]
[112.25328064 -109.73130798]
[114.16348267 -94.84647369]
[114.96916962 -79.86120605]
[114.66595459 -64.85736847]
[113.25549316 -49.91689301]
[110.74548340 -35.12138367]
[107.14963531 -20.55165100]
[102.48759460 -6.28726912]
[96.78481293 7.59385204]
[90.07244873 21.01589966]
[82.38715363 33.90556335]
[73.77090454 46.19244766]
[64.27076721 57.80944443]
[75.14958954 68.13665009]
[86.02841949 78.46385193]
[96.90724182 88.79106140]
[88.18643188 76.58665466]
[88.51683807 61.59029770]
[97.76672363 49.78183746]
[112.24765015 45.86995697]
[126.18528748 51.41452789]
[134.02194214 64.20462799]
[132.63314819 79.13920593]
[147.45089722 81.47030640]
[162.28584290 75.97164917]
[173.65605164 85.59285736]
[188.47381592 87.92395782]
[203.29156494 90.25506592]
[218.10932922 92.58616638]
[232.92709351 94.91727448]
[249.51342773 91.40589905]
[257.47912598 106.37199402]
[245.30303955 118.16941833]
[230.59597778 109.73503113]
[215.77822876 107.40392303]
[200.96046448 105.07282257]
[186.14271545 102.74171448]
[171.32495117 100.41061401]
[157.54988098 106.07600403]
[145.11979675 96.28806305]
[130.30204773 93.95696259]
[124.60153198 98.83078766]
[136.48774719 107.98053741]
[148.37396240 117.13027954]
[160.26017761 126.28002930]
[173.82237244 132.68836975]
[180.55021667 146.09492493]
[177.58262634 160.79844666]
[166.18157959 170.54608154]
[151.19552612 171.19253540]
[138.99742126 162.46290588]
[134.77465820 148.06965637]
[127.58327484 134.90591431]
[120.39189148 121.74217987]
[113.20050812 108.57843781]
[107.50000000 113.45226288]
[107.50000000 128.45227051]
[107.50000000 143.45227051]
[107.50000000 158.45227051]
[107.50000000 173.45227051]
[107.50000000 188.45227051]
[107.50000000 203.45227051]
[107.50000000 218.45227051]
[107.50000000 233.45227051]
[107.50000000 248.45227051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 101]
[12 100]
[13 99]
[14 98]
[108 126]
[109 125]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
