%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGxxxxxxxxxxCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.81603241 116.64247131]
[92.90903473 129.95762634]
[86.00203705 143.27278137]
[79.23392487 156.65907288]
[72.60542297 170.11503601]
[65.97692871 183.57099915]
[59.34842682 197.02696228]
[52.71992874 210.48292542]
[46.09143066 223.93888855]
[44.51607513 240.81948853]
[27.85907555 243.97871399]
[20.21219826 228.84724426]
[32.63546371 217.31039429]
[39.26396179 203.85443115]
[45.89246368 190.39846802]
[52.52096176 176.94250488]
[59.14945984 163.48652649]
[65.77795410 150.03056335]
[65.91326141 142.59233093]
[72.68688202 136.36578369]
[79.59387970 123.05062866]
[86.50087738 109.73547363]
[77.89966583 122.02445221]
[67.32064056 132.65856934]
[55.07650375 141.32350159]
[41.52914047 147.76313782]
[27.07897377 151.78715515]
[12.15310669 153.27661133]
[-2.80730081 152.18746948]
[-17.36006355 148.55194092]
[-31.07504845 142.47746277]
[-43.54688263 134.14360046]
[-54.40693665 123.79665375]
[-63.33422089 111.74246216]
[-70.06487274 98.33730316]
[-74.39995575 83.97739410]
[-76.21134186 69.08716583]
[-75.44548035 54.10672760]
[-72.12502289 39.47885895]
[-66.34809875 25.63591194]
[-58.28546524 12.98704243]
[-48.17542267 1.90610957]
[-36.31679535 -7.27936697]
[-23.06008911 -14.29789352]
[-8.79712868 -18.94202423]
[6.05051708 -21.07449150]
[21.04399681 -20.63226891]
[35.74015045 -17.62842560]
[49.70460510 -12.15174675]
[62.52461243 -4.36410427]
[73.82125854 5.50432158]
[83.26064301 17.16185188]
[90.56377411 30.26392555]
[95.51478577 44.42328644]
[97.96734619 59.22142410]
[97.84896088 74.22095490]
[95.16529083 88.97064209]
[99.77085114 74.69518280]
[104.37641907 60.41972351]
[108.98197937 46.14426422]
[113.58754730 31.86880302]
[117.74542999 17.45658684]
[121.45159149 2.92165065]
[124.85457611 -11.68724155]
[127.95289612 -26.36376762]
[131.05120850 -41.04029465]
[134.14953613 -55.71681976]
[137.24786377 -70.39334106]
[140.34617615 -85.06987000]
[126.88792419 -91.89172363]
[115.65451050 -101.96509552]
[107.41187286 -114.60318756]
[102.72198486 -128.94429016]
[101.90463257 -144.01062012]
[105.01553345 -158.77493286]
[111.84257507 -172.23056030]
[121.92029572 -183.46008301]
[134.56156921 -191.69784546]
[148.90447998 -196.38218689]
[163.97113037 -197.19372559]
[178.73423767 -194.07711792]
[192.18722534 -187.24487305]
[203.41284180 -177.16282654]
[211.64572144 -164.51838684]
[216.32452393 -150.17366028]
[217.13024902 -135.10668945]
[214.00794983 -120.34479523]
[207.17051697 -106.89444733]
[197.08413696 -95.67271423]
[184.43650818 -87.44471741]
[170.08998108 -82.77145386]
[155.02270508 -81.97154999]
[151.92439270 -67.29502106]
[148.82606506 -52.61849594]
[145.72773743 -37.94197083]
[142.62942505 -23.26544571]
[139.53109741 -8.58892059]
[141.37843323 -4.12093449]
[140.39248657 1.55878699]
[135.98652649 6.62781191]
[132.28036499 21.16274834]
[133.80741882 24.40860558]
[133.79882812 28.56812668]
[131.83700562 32.89289474]
[127.86300659 36.47436905]
[123.25743866 50.74982834]
[118.65187836 65.02529144]
[114.04631042 79.30075073]
[109.44075012 93.57621002]
[113.23357391 92.26820374]
[117.23463440 91.45999146]
[121.39260101 91.17286682]
[136.29450989 92.88555908]
[151.19641113 94.59824371]
[167.62231445 90.39994812]
[176.20368958 105.02172852]
[164.52890015 117.31544495]
[149.48371887 109.50014496]
[134.58181763 107.78746033]
[119.67991638 106.07476807]
[131.93646240 114.72214508]
[144.19299316 123.36952972]
[156.44953918 132.01690674]
[168.70608521 140.66429138]
[183.42480469 143.55555725]
[197.19494629 149.50392151]
[209.38949585 158.23851013]
[219.45315552 169.36157227]
[226.92767334 182.36663818]
[231.47267151 196.66149902]
[232.88122559 211.59521484]
[231.08915710 226.48777771]
[226.17810059 240.66104126]
[218.37165833 253.46961975]
[208.02532959 264.33026123]
[195.61021423 272.74838257]
[181.69168091 278.34072876]
[166.90348816 280.85260010]
[151.91903687 280.16958618]
[137.42066956 276.32287598]
[124.06858063 269.48754883]
[112.47075653 259.97491455]
[103.15531921 248.21809387]
[96.54644775 234.75247192]
[92.94509888 220.19120789]
[92.51525116 205.19737244]
[95.27648163 190.45370483]
[101.10469055 176.62863159]
[100.78252411 161.63209534]
[100.46036530 146.63554382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[57 109]
[58 108]
[59 107]
[60 106]
[61 105]
[62 101]
[63 100]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
