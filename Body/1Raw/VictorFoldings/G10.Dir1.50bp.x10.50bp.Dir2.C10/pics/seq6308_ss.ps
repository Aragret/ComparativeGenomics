%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUAxxxxxxxxxxAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[300.13897705 171.34735107]
[286.01416016 166.29858398]
[271.88937378 161.24983215]
[257.30044556 164.25189209]
[246.90971375 152.32112122]
[232.78491211 147.27236938]
[218.66011047 142.22361755]
[204.53529358 137.17486572]
[190.41049194 132.12609863]
[197.24591064 145.47814941]
[195.08644104 160.32188416]
[184.72996521 171.17286682]
[170.00300598 174.02185059]
[156.34687805 167.81619263]
[148.80725098 154.84878540]
[150.16984558 139.91079712]
[159.93124390 128.52153015]
[174.48390198 124.88904572]
[161.39074707 117.56993866]
[147.11529541 112.96437836]
[132.21339417 111.25168610]
[117.31148529 109.53899384]
[103.72868347 127.20569611]
[74.91055298 124.62422943]
[60.09279251 126.95533752]
[45.27503586 129.28643799]
[35.97026062 141.77879333]
[20.90973854 143.93177795]
[9.05752945 134.98411560]
[-5.76022816 137.31521606]
[-20.57798576 139.64631653]
[-35.39574432 141.97743225]
[-50.10279846 150.41181946]
[-62.27888489 138.61439514]
[-54.31318665 123.64830017]
[-37.72684860 127.15966797]
[-22.90909004 124.82856750]
[-8.09133244 122.49745941]
[6.72642565 120.16635895]
[15.25887203 108.01181030]
[30.25297737 105.43665314]
[42.94393158 114.46868134]
[57.76168823 112.13758087]
[72.57944489 109.80647278]
[74.05218506 102.45249176]
[78.47041321 80.39054871]
[65.69305420 72.53312683]
[52.91569519 64.67569733]
[40.13834000 56.81827164]
[23.47894478 53.67170334]
[21.89076805 36.79230499]
[37.67086029 30.59351349]
[47.99576569 44.04091644]
[60.77312088 51.89834213]
[73.55048370 59.75576782]
[86.32783508 67.61318970]
[104.95252228 70.38644409]
[116.61792755 81.46309662]
[119.02417755 94.63709259]
[133.92607117 96.34978485]
[148.82798767 98.06247711]
[137.01571655 88.81745148]
[128.38488770 76.54924774]
[123.67434692 62.30808640]
[123.28733826 47.31307983]
[127.25698853 32.84788513]
[135.24348450 20.15079880]
[146.56312561 10.30876350]
[160.24690247 4.16430664]
[175.12339783 2.24342799]
[189.91911316 4.71056509]
[203.36746216 11.35451794]
[214.31716919 21.60652733]
[221.83090210 34.58896637]
[225.26545715 49.19047165]
[224.32678223 64.16107178]
[219.09526062 78.21920776]
[210.01872253 90.16142273]
[197.87417603 98.96540070]
[183.70126343 103.87747955]
[168.70985413 104.47678375]
[181.80300903 111.79589081]
[195.45925903 118.00129700]
[209.58406067 123.05005646]
[223.70886230 128.09881592]
[237.83366394 133.14756775]
[251.95846558 138.19631958]
[267.55770874 135.55538940]
[276.93814087 147.12503052]
[291.06292725 152.17378235]
[305.18774414 157.22254944]
[311.64459229 143.66894531]
[319.43954468 130.83813477]
[328.49258423 118.86176300]
[338.71081543 107.86273956]
[349.98941040 97.95391846]
[362.21258545 89.23699188]
[375.25494385 81.80140686]
[388.98263550 75.72346497]
[403.25479126 71.06553650]
[417.92498779 67.87541962]
[432.84262085 66.18584442]
[447.85467529 66.01415253]
[462.80706787 67.36210632]
[477.54638672 70.21588135]
[491.92132568 74.54618073]
[505.78445435 80.30857086]
[518.99346924 87.44392395]
[531.41278076 95.87901306]
[542.91503906 105.52729034]
[553.38214111 116.28974915]
[562.70672607 128.05593872]
[570.79309082 140.70512390]
[577.55828857 154.10749817]
[582.93280029 168.12553406]
[586.86151123 182.61538696]
[589.30419922 197.42837524]
[590.23571777 212.41247559]
[589.64648438 227.41394043]
[587.54260254 242.27882385]
[583.94561768 256.85458374]
[578.89245605 270.99163818]
[572.43499756 284.54495239]
[564.63952637 297.37542725]
[555.58593750 309.35140991]
[545.36718750 320.34997559]
[534.08819580 330.25830078]
[521.86462402 338.97470093]
[508.82192993 346.40969849]
[495.09396362 352.48703003]
[480.82159424 357.14434814]
[466.15127563 360.33383179]
[451.23355103 362.02273560]
[436.22149658 362.19375610]
[421.26916504 360.84515381]
[406.52999878 357.99072266]
[392.15521240 353.65979004]
[378.29235840 347.89678955]
[365.08367920 340.76086426]
[352.66470337 332.32522583]
[341.16287231 322.67645264]
[330.69622803 311.91351318]
[321.37216187 300.14694214]
[313.28637695 287.49737549]
[306.52178955 274.09472656]
[301.14788818 260.07644653]
[297.21978760 245.58641052]
[294.77777100 230.77331543]
[293.84695435 215.78916931]
[294.43682861 200.78773499]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[18 82]
[19 81]
[20 61]
[21 60]
[22 59]
[24 44]
[25 43]
[26 42]
[29 39]
[30 38]
[31 37]
[32 36]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
