%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAxxxxxxxxxxCUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.34782410 556.22528076]
[102.34782410 541.22528076]
[102.34782410 526.22528076]
[102.34782410 511.22525024]
[102.34782410 496.22525024]
[102.34782410 481.22525024]
[102.34782410 466.22525024]
[102.34782410 451.22525024]
[102.34782410 436.22525024]
[102.34782410 421.22525024]
[87.99975586 418.51437378]
[74.39506531 413.19943237]
[62.00210190 405.46176147]
[51.24783707 395.56613159]
[42.50309753 383.85168457]
[36.06980515 370.72033691]
[32.17054367 356.62295532]
[30.94087029 342.04391479]
[32.42458344 327.48437500]
[36.57218552 313.44512939]
[43.24251556 300.40939331]
[52.20756149 288.82608032]
[63.16026306 279.09448242]
[75.72500610 271.55032349]
[89.47051239 266.45437622]
[103.92467499 263.98324585]
[103.77459717 248.98400879]
[103.17445374 233.99601746]
[102.57431030 219.00802612]
[101.97416687 204.02003479]
[101.37402344 189.03204346]
[100.77388000 174.04405212]
[99.57455444 159.09208679]
[97.77796173 144.20005798]
[95.98136902 129.30804443]
[82.08993530 125.47763062]
[71.01674652 115.14899445]
[65.73629761 100.17736816]
[68.08045197 83.73475647]
[54.99118042 76.40870667]
[41.90190506 69.08266449]
[28.66866875 62.01998901]
[15.29676342 55.22350311]
[1.92485905 48.42702103]
[-9.87400150 58.05545807]
[-24.57073784 62.04617691]
[-39.61904907 59.70776749]
[-52.41172791 51.44536591]
[-60.73236465 38.69048691]
[-63.13935471 23.65299034]
[-59.21567917 8.93821430]
[-49.64113235 -2.90441847]
[-36.07456589 -9.82310009]
[-20.86646843 -10.61912727]
[-6.65173388 -5.15458345]
[4.10684681 5.62376642]
[9.54528618 19.84850693]
[8.72134113 35.05511856]
[22.09324646 41.85160065]
[35.46514893 48.64808273]
[40.25165939 48.02517700]
[45.47317123 50.44185638]
[49.22795105 55.99339294]
[62.31722260 63.31943512]
[75.40649414 70.64548492]
[88.56841278 63.45075989]
[89.46833038 48.47777939]
[90.36824036 33.50479889]
[91.26815796 18.53181839]
[92.16807556 3.55883718]
[93.06799316 -11.41414356]
[93.96790314 -26.38712502]
[80.15730286 -32.68249893]
[69.55625153 -43.54445648]
[63.59845352 -57.50400925]
[63.08965683 -72.67324066]
[68.09866333 -87.00063324]
[77.94805145 -98.54853058]
[91.30577850 -105.75517273]
[106.36531067 -107.64591980]
[121.08997345 -103.96506500]
[133.48837280 -95.21041107]
[141.88374329 -82.56595612]
[145.14067078 -67.74175262]
[142.81866455 -52.74266434]
[135.23178101 -39.59718323]
[123.40608215 -30.08313179]
[108.94088745 -25.48720932]
[108.04096985 -10.51422787]
[107.14105225 4.45875311]
[106.24114227 19.43173409]
[105.34122467 34.40471268]
[104.44130707 49.37769699]
[103.54138947 64.35067749]
[111.27702332 68.19618225]
[117.41790009 73.55818939]
[121.71392059 79.90979767]
[134.94715881 72.84712219]
[148.18040466 65.78444672]
[161.41363525 58.72176743]
[174.64686584 51.65908813]
[176.64904785 36.27172470]
[187.33773804 25.02310371]
[202.60292053 22.23854637]
[216.57482910 28.98877144]
[223.88096619 42.67818069]
[221.71199036 58.04291916]
[210.90190125 69.17492676]
[195.60740662 71.79372406]
[181.70954895 64.89232635]
[168.47631836 71.95500183]
[155.24307251 79.01768494]
[142.00984192 86.08036041]
[128.77659607 93.14303589]
[126.23599243 113.66686249]
[110.87339020 127.51145172]
[112.66998291 142.40347290]
[114.46656799 157.29548645]
[117.28292084 160.76672363]
[118.67227936 164.57489014]
[118.70766449 168.21881104]
[117.62081909 171.27503967]
[115.76187134 173.44390869]
[116.36201477 188.43190002]
[116.96215820 203.41989136]
[117.56230164 218.40788269]
[118.16244507 233.39587402]
[118.76258850 248.38386536]
[121.61782074 252.88713074]
[122.34773254 257.56506348]
[121.25000000 261.56546021]
[118.92166901 264.28338623]
[133.99726868 267.56323242]
[148.14482117 273.70608521]
[160.82653809 282.47647095]
[171.56066895 293.53903198]
[179.93994141 306.47143555]
[185.64689636 320.78042603]
[188.46595764 335.92065430]
[188.29159546 351.31546021]
[185.13224792 366.37890625]
[179.10993958 380.53790283]
[170.45556641 393.25421143]
[159.50004578 404.04479980]
[146.66166687 412.50018311]
[132.43013000 418.30004883]
[117.34782410 421.22525024]
[117.34782410 436.22525024]
[117.34782410 451.22525024]
[117.34782410 466.22525024]
[117.34782410 481.22525024]
[117.34782410 496.22525024]
[117.34782410 511.22525024]
[117.34782410 526.22528076]
[117.34782410 541.22528076]
[117.34782410 556.22528076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[26 132]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 123]
[33 118]
[34 117]
[35 116]
[39 65]
[40 64]
[41 63]
[42 60]
[43 59]
[44 58]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
