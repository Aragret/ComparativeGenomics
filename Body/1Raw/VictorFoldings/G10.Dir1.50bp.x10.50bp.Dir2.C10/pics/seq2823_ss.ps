%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUxxxxxxxxxxGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.40886688 284.63851929]
[125.78488922 269.65148926]
[125.16091156 254.66448975]
[124.53693390 239.67745972]
[123.91295624 224.69044495]
[123.28897858 209.70343018]
[122.66500092 194.71641541]
[122.04102325 179.72940063]
[119.70992279 164.91165161]
[115.70217896 150.45695496]
[111.69443512 136.00227356]
[107.68669891 121.54757690]
[93.15176392 117.84141541]
[82.71195221 128.61222839]
[72.27214050 139.38304138]
[61.83232498 150.15383911]
[58.36253738 166.18171692]
[42.66658020 170.93238831]
[30.89110947 159.51879883]
[35.14971924 143.68225098]
[51.06151581 139.71403503]
[61.50132751 128.94322205]
[71.94113922 118.17241669]
[82.38095093 107.40160370]
[87.28250122 93.22504425]
[85.72492218 78.30613708]
[84.16734314 63.38722229]
[70.89807892 55.56208038]
[64.85152435 41.58736801]
[68.15414429 26.90551758]
[79.33491516 17.10101128]
[77.77733612 2.18209934]
[76.21975708 -12.73681259]
[74.66217804 -27.65572548]
[56.60842896 -43.82513809]
[60.86068726 -67.11615753]
[52.60839462 -79.64212036]
[44.35610580 -92.16808319]
[28.93247604 -86.49348450]
[12.61302280 -84.62293243]
[-3.67852330 -86.65846252]
[-19.02091599 -92.48110199]
[-32.54749680 -101.75787354]
[-43.49513245 -113.96076965]
[-51.24729919 -128.39683533]
[-55.36877060 -144.24754333]
[-55.63006210 -160.61512756]
[-52.02021790 -176.57351685]
[-44.74719238 -191.22070312]
[-34.22589493 -203.72967529]
[-43.24342346 -215.71650696]
[-52.26095200 -227.70333862]
[-61.27848434 -239.69017029]
[-76.11033630 -236.23530579]
[-91.06389618 -239.11816406]
[-103.54837799 -247.83926392]
[-111.40076447 -260.88763428]
[-113.26058197 -276.00256348]
[-108.80560303 -290.56527710]
[-98.80768585 -302.05273438]
[-84.99903107 -308.47463989]
[-69.77206421 -308.71838379]
[-55.76495743 -302.74169922]
[-45.40451813 -291.58010864]
[-40.48575974 -277.16738892]
[-41.86088562 -262.00070190]
[-49.29164886 -248.70770264]
[-40.27412033 -236.72087097]
[-31.25658989 -224.73403931]
[-22.23906136 -212.74720764]
[-9.87235928 -218.53948975]
[3.40080309 -221.77319336]
[17.05671883 -222.31851196]
[30.55614281 -220.15176392]
[43.36558914 -215.35643005]
[54.97840881 -208.11988831]
[64.93482971 -198.72613525]
[72.84017181 -187.54458618]
[78.38045502 -175.01564026]
[81.33493805 -161.63325500]
[81.58483124 -147.92546082]
[79.11812592 -134.43363953]
[74.03015137 -121.69099426]
[66.51985931 -110.20159912]
[56.88206863 -100.42037201]
[65.13436127 -87.89440918]
[73.38665009 -75.36844635]
[80.68287659 -76.17508698]
[87.88064575 -74.73362732]
[94.30356598 -71.17952728]
[106.74301147 -79.56167603]
[119.18244934 -87.94381714]
[131.62188721 -96.32595825]
[129.88395691 -111.53247833]
[135.42272949 -125.80064392]
[146.96543884 -135.85174561]
[161.85964966 -139.37609863]
[176.68278503 -135.56384277]
[188.02859497 -125.29100800]
[193.28988647 -110.91821289]
[191.25767517 -95.74822235]
[182.39894104 -83.26698303]
[168.74934387 -76.34259796]
[153.44546509 -76.56624603]
[140.00402832 -83.88652039]
[127.56459045 -75.50437927]
[115.12515259 -67.12223053]
[102.68571472 -58.74008942]
[103.78076172 -50.19372940]
[101.77308655 -41.70935440]
[96.84963989 -34.39005280]
[89.58108521 -29.21330643]
[91.13867188 -14.29439354]
[92.69625092 0.62451845]
[94.25382996 15.54343033]
[107.21865845 22.82706070]
[113.48265839 36.51012421]
[110.45304108 51.43241882]
[99.08625793 61.82964325]
[100.64383698 76.74855042]
[102.20141602 91.66746521]
[107.63922119 90.05026245]
[114.29673767 91.82331848]
[120.24134827 97.49705505]
[123.41748047 106.56829834]
[122.14138794 117.53984070]
[126.14912415 131.99452209]
[130.15686035 146.44921875]
[134.16461182 160.90390015]
[139.64987183 146.94282532]
[150.91040039 137.03320312]
[165.45545959 133.36695862]
[180.06781006 136.75503540]
[191.51535034 146.44801331]
[197.26597595 160.30189514]
[196.04771423 175.25234985]
[188.13002014 187.99244690]
[175.26422119 195.70420837]
[160.29612732 196.68186951]
[146.53651428 190.70916748]
[137.02804565 179.10542297]
[137.65202332 194.09243774]
[138.27600098 209.07945251]
[138.89997864 224.06646729]
[139.52395630 239.05348206]
[140.14791870 254.04051208]
[140.77189636 269.02752686]
[141.39587402 284.01452637]
[148.09587097 299.58843994]
[134.98533630 310.33789062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 129]
[10 128]
[11 127]
[12 126]
[13 24]
[14 23]
[15 22]
[16 21]
[25 121]
[26 120]
[27 119]
[31 115]
[32 114]
[33 113]
[34 112]
[36 87]
[37 86]
[38 85]
[50 70]
[51 69]
[52 68]
[53 67]
[90 108]
[91 107]
[92 106]
[93 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
