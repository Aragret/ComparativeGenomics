%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGxxxxxxxxxxCCCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[101.21350098 277.68319702]
[100.90144348 262.68643188]
[100.58938599 247.68968201]
[100.27732849 232.69291687]
[99.96527100 217.69616699]
[99.65321350 202.69941711]
[99.34116364 187.70266724]
[99.02910614 172.70590210]
[98.71704865 157.70915222]
[84.44158936 153.10359192]
[75.42405701 165.09042358]
[66.40652466 177.07725525]
[57.38899612 189.06408691]
[55.94179916 205.39924622]
[40.95947647 212.06723022]
[27.85455322 202.20857239]
[30.10825539 185.96502686]
[45.40216446 180.04655457]
[54.41969681 168.05972290]
[63.43722534 156.07289124]
[72.45475769 144.08605957]
[67.64524078 130.15187073]
[67.78823853 117.09889221]
[53.37602234 121.25677490]
[38.96380615 125.41466522]
[24.55158997 129.57255554]
[10.13937378 133.73043823]
[-4.27284193 137.88832092]
[-18.68505859 142.04621887]
[-32.22752380 152.24610901]
[-45.77773666 142.05650330]
[-39.73741150 126.21507263]
[-22.84294510 127.63399506]
[-8.43072891 123.47611237]
[5.98148680 119.31822205]
[20.39370346 115.16033173]
[34.80591965 111.00244904]
[49.21813583 106.84455872]
[63.63035202 102.68667603]
[67.11448669 84.23572540]
[79.31661224 69.96390533]
[97.00193787 63.65469360]
[98.86954498 48.77141571]
[100.73715973 33.88813400]
[101.36113739 18.90111923]
[100.73715973 3.91410303]
[100.11318207 -11.07291317]
[99.48920441 -26.05992889]
[81.45859528 -34.27691650]
[70.05913544 -50.38897705]
[68.32538605 -69.97154236]
[76.65061188 -87.69502258]
[92.70110321 -98.77533722]
[90.52426910 -113.61653900]
[88.34743500 -128.45774841]
[86.17059326 -143.29895020]
[83.99375916 -158.14015198]
[81.81692505 -172.98136902]
[66.79411316 -174.04402161]
[52.35109711 -178.31173706]
[39.16340256 -185.58489990]
[27.84783936 -195.52331543]
[18.93365860 -207.66215515]
[12.83779430 -221.43365479]
[9.84535789 -236.19372559]
[10.09631252 -251.25198364]
[13.57892036 -265.90414429]
[20.13029480 -279.46487427]
[29.44401360 -291.29992676]
[41.08445740 -300.85577393]
[54.50718689 -307.68545532]
[69.08438873 -311.46951294]
[84.13426971 -312.03100586]
[98.95291138 -309.34362793]
[112.84722137 -303.53311157]
[125.16733551 -294.87118530]
[135.33702087 -283.76303101]
[142.88063049 -270.72814941]
[147.44532776 -256.37622070]
[148.81762695 -241.37852478]
[146.93331909 -226.43652344]
[141.88055420 -212.24908447]
[133.89564514 -199.47976685]
[123.35208130 -188.72583008]
[110.74299622 -180.49023438]
[96.65812683 -175.15820312]
[98.83496094 -160.31700134]
[101.01180267 -145.47578430]
[103.18863678 -130.63458252]
[105.36547852 -115.79338074]
[107.54231262 -100.95217133]
[117.94542694 -98.93087769]
[127.38168335 -94.06095886]
[135.08686829 -86.72347260]
[140.43322754 -77.49982452]
[142.98056030 -67.12574005]
[142.51251221 -56.43257904]
[139.05488586 -46.28070068]
[132.87443542 -37.49024582]
[124.45843506 -30.77489471]
[114.47622681 -26.68390656]
[115.10019684 -11.69689083]
[115.72417450 3.29012585]
[116.34815216 18.27714157]
[126.15687561 6.92861938]
[140.72541809 3.35680723]
[154.67097473 8.88141823]
[162.84095764 21.46121979]
[162.21670532 36.44822693]
[153.02888489 48.30503464]
[138.67219543 52.65079117]
[124.45116425 47.87982559]
[115.62044525 35.75574875]
[113.75283051 50.63902664]
[111.88521576 65.52230835]
[133.27581787 74.96707916]
[146.75106812 97.60925293]
[144.51264954 126.85043335]
[158.29502869 132.77038574]
[172.07740784 138.69035339]
[185.85978699 144.61032104]
[202.79945374 145.30592346]
[206.82040405 161.77615356]
[192.10694885 170.19937134]
[179.93981934 158.39270020]
[166.15744019 152.47273254]
[152.37506104 146.55278015]
[138.59268188 140.63281250]
[132.37295532 144.82388306]
[141.62995911 156.62677002]
[150.88694763 168.42964172]
[160.14395142 180.23252869]
[172.37469482 188.91636658]
[172.19158936 203.91525269]
[159.75250244 212.29791260]
[145.78176880 206.83728027]
[142.32456970 192.23986816]
[134.86088562 179.22859192]
[127.39720154 166.21731567]
[119.93352509 153.20602417]
[113.71379852 157.39709473]
[114.02585602 172.39384460]
[114.33791351 187.39060974]
[114.64997101 202.38735962]
[114.96202850 217.38410950]
[115.27408600 232.38085938]
[115.58613586 247.37762451]
[115.89819336 262.37435913]
[116.21025085 277.37112427]
[118.80125427 296.57885742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 21]
[11 20]
[12 19]
[13 18]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[42 115]
[43 114]
[44 113]
[45 104]
[46 103]
[47 102]
[48 101]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 86]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
