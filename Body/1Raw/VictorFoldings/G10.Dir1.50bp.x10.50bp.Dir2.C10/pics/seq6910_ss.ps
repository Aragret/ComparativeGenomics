%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.00194550 427.93017578]
[108.00194550 412.93017578]
[108.00194550 397.93017578]
[108.00194550 382.93017578]
[108.00194550 367.93017578]
[108.00194550 352.93017578]
[108.00194550 337.93017578]
[108.00194550 322.93017578]
[108.00194550 307.93017578]
[108.00194550 292.93017578]
[93.02587891 288.68267822]
[79.83390808 280.39129639]
[69.49289703 268.71691895]
[62.84184647 254.59451294]
[60.42382431 239.15803528]
[62.44162750 223.64953613]
[68.74081421 209.31919861]
[78.82146454 197.32450867]
[91.87789917 188.63679504]
[106.86299133 183.96260071]
[106.55094147 168.96583557]
[106.23888397 153.96908569]
[103.90777588 139.15133667]
[99.60019684 124.78314972]
[85.48630524 122.30630493]
[74.18923950 111.93925476]
[69.98107910 96.15332031]
[55.07917786 97.86601257]
[40.17727280 99.57870483]
[34.71790314 113.87744141]
[23.23125076 123.99254608]
[8.35686111 127.59963989]
[-6.48723555 123.86985016]
[-17.88997650 113.66024017]
[-23.23109627 99.31690979]
[-21.28324127 84.13585663]
[-12.49401855 71.60556793]
[1.11687565 64.60541534]
[16.42175674 64.74398041]
[29.90367508 71.98942566]
[38.46458435 84.67679596]
[53.36648560 82.96411133]
[68.26838684 81.25141907]
[78.36704254 70.16010284]
[78.67909241 55.16334915]
[78.99114990 40.16659546]
[79.30320740 25.16984367]
[79.61526489 10.17308998]
[78.36838531 -4.77499723]
[75.57606506 -19.51280403]
[72.78373718 -34.25061035]
[62.55592728 -42.17813492]
[60.56188965 -54.55726242]
[67.33554840 -64.62825012]
[64.85043335 -79.42095947]
[62.36531067 -94.21366882]
[59.88019180 -109.00637054]
[57.39507294 -123.79907990]
[52.86042404 -131.80462646]
[55.01547241 -138.92512512]
[52.83863449 -153.76632690]
[50.66179657 -168.60752869]
[35.72133255 -170.90403748]
[22.12226295 -177.50378418]
[11.07380676 -187.81993103]
[3.55838752 -200.93519592]
[0.24426991 -215.68334961]
[1.42614353 -230.75300598]
[6.99891663 -244.80418396]
[16.46706200 -256.58746338]
[28.98867989 -265.05508423]
[43.45035553 -269.45410156]
[58.56616592 -269.39334106]
[72.99201965 -264.87826538]
[85.44519043 -256.31030273]
[94.81834412 -244.45132446]
[100.27802277 -230.35581970]
[101.33876038 -215.27714539]
[97.90623474 -200.55610657]
[90.28566742 -187.50166321]
[79.15467072 -177.27462769]
[65.50300598 -170.78436279]
[67.67984009 -155.94316101]
[69.85667419 -141.10195923]
[72.18778229 -126.28420258]
[74.67289734 -111.49149323]
[77.15802002 -96.69878387]
[79.64313507 -81.90607452]
[82.12825775 -67.11337280]
[94.01614380 -54.24177170]
[87.52154541 -37.04293442]
[90.31387329 -22.30512810]
[93.10619354 -7.56732178]
[100.11598206 -20.82865334]
[112.74355316 -28.92461014]
[127.72029114 -29.75957870]
[141.16952515 -23.11742973]
[149.60995483 -10.71746540]
[150.85679626 4.23062372]
[144.58732605 17.85756874]
[132.42436218 26.63607788]
[117.51625061 28.29385948]
[103.72191620 22.40180206]
[94.61201477 10.48514557]
[94.29996490 25.48189926]
[93.98790741 40.47865295]
[93.67584991 55.47540665]
[93.36379242 70.47216034]
[109.49956512 72.42146301]
[121.71777344 82.21120453]
[126.73761749 96.40982819]
[123.63970184 110.53760529]
[113.96837616 120.47556305]
[118.27596283 134.84375000]
[122.87911987 120.56751251]
[132.80641174 109.32255554]
[146.40173340 102.98479462]
[161.39707947 102.61151123]
[175.29090881 108.26497650]
[185.76539612 119.00205994]
[191.07318115 133.03158569]
[190.32879639 148.01310730]
[183.65641785 161.44735718]
[172.16914368 171.09323120]
[157.78334045 175.34155273]
[142.89884949 173.48362732]
[129.99874878 165.82939148]
[121.23563385 153.65702820]
[121.54769135 168.65379333]
[121.85974884 183.65054321]
[135.89723206 187.22972107]
[148.51335144 194.32499695]
[158.84580994 204.44418335]
[166.19027710 216.88865662]
[170.04840088 230.80158997]
[170.16165161 245.22695923]
[166.52853394 259.17523193]
[159.40438843 271.69119263]
[149.28335571 281.91949463]
[136.86419678 289.16296387]
[123.00194550 292.93017578]
[123.00194550 307.93017578]
[123.00194550 322.93017578]
[123.00194550 337.93017578]
[123.00194550 352.93017578]
[123.00194550 367.93017578]
[123.00194550 382.93017578]
[123.00194550 397.93017578]
[123.00194550 412.93017578]
[123.00194550 427.93017578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[23 114]
[24 113]
[27 43]
[28 42]
[29 41]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[49 93]
[50 92]
[51 91]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[60 84]
[61 83]
[62 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
