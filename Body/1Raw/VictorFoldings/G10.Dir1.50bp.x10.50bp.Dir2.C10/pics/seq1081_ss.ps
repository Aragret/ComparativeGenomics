%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAxxxxxxxxxxACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 278.58349609]
[92.50000000 263.58349609]
[92.50000000 248.58349609]
[92.50000000 233.58349609]
[92.50000000 218.58349609]
[92.50000000 203.58349609]
[92.50000000 188.58349609]
[92.50000000 173.58349609]
[92.50000000 158.58349609]
[92.50000000 143.58349609]
[79.88223267 139.38333130]
[69.08361053 131.62194824]
[56.93027496 140.41378784]
[58.80078506 156.81277466]
[52.20044708 171.83865356]
[39.00973892 181.44493103]
[22.86976242 183.09660339]
[8.17740536 176.43849182]
[-3.79285336 185.47799683]
[-15.76311207 194.51751709]
[-21.65349960 209.82228088]
[-37.89288330 212.10578918]
[-47.77557755 199.01898193]
[-41.13511276 184.02444458]
[-24.80263138 182.54727173]
[-12.83237267 173.50775146]
[-0.86211437 164.46823120]
[-3.43047047 151.02130127]
[0.07503685 137.71916199]
[9.02272606 127.18339539]
[21.70261955 121.51587677]
[35.65303040 121.87958527]
[48.13843155 128.26045227]
[60.29176331 119.46861267]
[55.91760254 96.46258545]
[63.90442657 74.44847107]
[82.01268005 59.59917068]
[105.16468811 56.07851410]
[109.41753387 41.69403458]
[113.67037964 27.30955124]
[117.92322540 12.92507076]
[122.17607117 -1.45940995]
[118.66893768 -16.88700104]
[129.69721985 -26.89831161]
[126.19007874 -42.32590103]
[137.21836853 -52.33721161]
[141.47120667 -66.72169495]
[145.72406006 -81.10617828]
[149.97689819 -95.49065399]
[154.22975159 -109.87513733]
[153.66442871 -119.05534363]
[158.72039795 -124.50964355]
[163.26768494 -138.80377197]
[160.66296387 -153.57588196]
[151.50103760 -165.45271301]
[142.33909607 -177.32952881]
[133.17715454 -189.20635986]
[124.01522827 -201.08317566]
[108.65081024 -206.81613159]
[106.20069122 -223.03121948]
[119.18534088 -233.04774475]
[134.24726868 -226.56156921]
[135.89204407 -210.24511719]
[145.05398560 -198.36830139]
[154.21592712 -186.49147034]
[163.37785339 -174.61463928]
[172.53979492 -162.73782349]
[184.21609497 -171.26997375]
[197.20762634 -171.03257751]
[205.10411072 -183.78584290]
[213.00057983 -196.53909302]
[202.08085632 -207.62641907]
[194.12338257 -220.98970032]
[189.58340454 -235.85630798]
[188.71871948 -251.36788940]
[191.57502747 -266.62985229]
[197.98356628 -280.76303101]
[207.57104492 -292.95422363]
[219.78143311 -302.50314331]
[233.90815735 -308.86248779]
[249.13500977 -311.66937256]
[264.58331299 -310.76605225]
[279.36260986 -306.20874023]
[286.99557495 -319.12145996]
[294.62854004 -332.03414917]
[288.33969116 -346.21969604]
[291.62289429 -361.38546753]
[303.21566772 -371.69989014]
[318.66036987 -373.19683838]
[332.01818848 -365.30075073]
[338.15277100 -351.04782104]
[334.70526123 -335.91854858]
[323.00128174 -325.73049927]
[307.54122925 -324.40118408]
[299.90826416 -311.48846436]
[292.27529907 -298.57577515]
[302.76354980 -288.58767700]
[310.75903320 -276.50231934]
[315.85464478 -262.92895508]
[317.78964233 -248.55273438]
[316.46276855 -234.10012817]
[311.93780518 -220.30223083]
[304.44036865 -207.85778809]
[294.34667969 -197.39776611]
[282.16467285 -189.45343018]
[268.50851440 -184.42929077]
[254.06753540 -182.58256531]
[239.57154846 -184.00994873]
[225.75384521 -188.64260864]
[217.85736084 -175.88935852]
[209.96087646 -163.13610840]
[214.62609863 -149.46218872]
[208.49398804 -135.43547058]
[193.71789551 -128.86885071]
[177.56181335 -134.25648499]
[173.01452637 -119.96234894]
[168.61422729 -105.62229156]
[164.36138916 -91.23780823]
[160.10853577 -76.85332489]
[155.85568237 -62.46884537]
[151.60284424 -48.08436584]
[155.41416931 -33.68564987]
[144.08169556 -22.64546394]
[147.89302063 -8.24674797]
[136.56056213 2.79343677]
[132.30770874 17.17791748]
[128.05485535 31.56239891]
[123.80201721 45.94688034]
[119.54917145 60.33135986]
[126.31817627 64.45953369]
[132.24127197 69.73003387]
[137.12809753 75.97344971]
[140.82156372 82.98911285]
[143.20297241 90.55152893]
[144.19578552 98.41763306]
[143.76806641 106.33459473]
[141.93359375 114.04795837]
[138.75129700 121.30979919]
[134.32348633 127.88671112]
[128.79248047 133.56730652]
[122.33603668 138.16900635]
[115.16167450 141.54388428]
[107.50000000 143.58349609]
[107.50000000 158.58349609]
[107.50000000 173.58349609]
[107.50000000 188.58349609]
[107.50000000 203.58349609]
[107.50000000 218.58349609]
[107.50000000 233.58349609]
[107.50000000 248.58349609]
[107.50000000 263.58349609]
[107.50000000 278.58349609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 34]
[13 33]
[18 27]
[19 26]
[20 25]
[38 129]
[39 128]
[40 127]
[41 126]
[42 125]
[44 123]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[52 116]
[53 115]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[69 111]
[70 110]
[71 109]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
