%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUxxxxxxxxxxUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUACAUCACAAGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[314.22180176 471.38235474]
[312.68450928 456.46133423]
[311.14721680 441.54031372]
[309.60992432 426.61929321]
[308.07263184 411.69827271]
[302.51071167 397.76757812]
[293.34875488 385.89074707]
[284.18682861 374.01391602]
[275.02490234 362.13708496]
[265.86297607 350.26028442]
[256.70101929 338.38345337]
[242.80096436 333.03204346]
[240.49818420 317.37933350]
[231.33624268 305.50250244]
[222.17430115 293.62567139]
[218.78530884 308.23782349]
[206.15808105 316.33432007]
[191.46481323 313.31643677]
[183.05116272 300.89828491]
[185.69601440 286.13330078]
[197.89712524 277.40786743]
[212.72502136 279.67840576]
[205.09205627 266.76571655]
[197.45907593 253.85301208]
[189.82611084 240.94030762]
[181.66944885 228.35186768]
[173.00283813 216.10891724]
[164.33622742 203.86596680]
[155.66963196 191.62300110]
[147.00302124 179.38005066]
[138.33641052 167.13710022]
[124.66776276 161.21954346]
[123.00954437 145.48548889]
[114.34294128 133.24252319]
[105.67633057 120.99957275]
[83.93912506 129.66110229]
[56.53089142 114.12796021]
[41.70840836 111.82707977]
[26.88592720 109.52620697]
[12.06344509 107.22533417]
[-4.51569605 110.77052307]
[-12.51190567 95.82070923]
[-0.35990530 83.99847412]
[14.36432076 92.40285492]
[29.18680191 94.70372772]
[44.00928497 97.00460052]
[58.83176804 99.30547333]
[62.24355316 92.62642670]
[69.06713104 79.26832581]
[72.47891998 72.58927917]
[61.92690277 61.92836761]
[51.37488556 51.26745987]
[36.53969955 55.24398041]
[21.70794678 51.25465775]
[10.86929798 40.37259293]
[6.93929720 25.52501297]
[10.97509193 10.70583820]
[21.89107513 -0.09864584]
[36.75090408 -3.98208809]
[51.55735397 0.10013842]
[62.32756805 11.04993534]
[66.16441345 25.92186165]
[62.03579712 40.71544266]
[72.58781433 51.37635422]
[83.13982391 62.03726196]
[96.95340729 56.19047546]
[96.64543152 41.19363403]
[96.33745575 26.19679832]
[96.02947235 11.19995975]
[81.97660828 5.33167076]
[71.53025055 -5.74954796]
[66.50028992 -20.12380981]
[67.75819397 -35.30068588]
[75.08603668 -48.65068817]
[87.21421814 -57.86085510]
[102.04145813 -61.33546066]
[116.99884796 -58.47251511]
[129.49491882 -49.76803970]
[137.36466980 -36.73013687]
[139.24461365 -21.61769867]
[134.80902100 -7.04905176]
[124.82640839 4.45170021]
[111.02631378 10.89198208]
[111.33428955 25.88882065]
[111.64227295 40.88565826]
[111.95024872 55.88249588]
[131.66517639 88.37894440]
[117.91928864 112.33296967]
[126.58589172 124.57592010]
[135.25250244 136.81887817]
[149.54104614 143.61212158]
[150.57936096 158.47048950]
[159.24597168 170.71343994]
[167.91258240 182.95640564]
[176.57919312 195.19935608]
[185.24578857 207.44230652]
[193.91239929 219.68525696]
[198.05387878 221.40217590]
[201.09484863 224.09959412]
[202.85989380 227.29823303]
[203.35203552 230.51181030]
[202.73881531 233.30734253]
[210.37178040 246.22003174]
[218.00474548 259.13272095]
[225.63772583 272.04544067]
[234.05113220 284.46374512]
[243.21307373 296.34057617]
[252.37500000 308.21740723]
[266.93038940 314.41830444]
[268.57785034 329.22149658]
[277.73977661 341.09832764]
[286.90173340 352.97515869]
[296.06365967 364.85198975]
[305.22558594 376.72882080]
[314.38751221 388.60562134]
[312.76138306 373.69403076]
[314.31854248 358.77508545]
[318.98883057 344.52066040]
[326.56198120 331.57278442]
[336.69683838 320.51455688]
[348.93701172 311.84402466]
[362.73123169 305.95166016]
[377.45822144 303.10287476]
[392.45474243 303.42596436]
[407.04537964 306.90637207]
[420.57302856 313.38732910]
[432.42843628 322.57696533]
[442.07763672 334.06140137]
[449.08612061 347.32342529]
[453.13818359 361.76574707]
[454.05136108 376.73794556]
[451.78454590 391.56567383]
[446.43978882 405.58114624]
[438.25781250 418.15313721]
[427.60714722 428.71548462]
[414.96740723 436.79244995]
[400.90789795 442.02026367]
[386.06182861 444.16351318]
[371.09777832 443.12567139]
[356.68969727 438.95343018]
[343.48651123 431.83474731]
[332.08282471 422.09020996]
[322.99365234 410.16098022]
[324.53094482 425.08200073]
[326.06823730 440.00302124]
[327.60552979 454.92404175]
[329.14282227 469.84506226]
[341.56121826 479.62051392]
[343.34704590 495.32357788]
[333.44085693 507.63790894]
[317.71978760 509.25762939]
[305.51086426 499.22177124]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 115]
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[13 108]
[14 107]
[15 106]
[22 105]
[23 104]
[24 103]
[25 102]
[26 97]
[27 96]
[28 95]
[29 94]
[30 93]
[31 92]
[33 90]
[34 89]
[35 88]
[37 47]
[38 46]
[39 45]
[40 44]
[50 65]
[51 64]
[52 63]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
