%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCxxxxxxxxxxACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[188.86763000 56.06269073]
[175.62504578 63.10782623]
[162.38246155 70.15296173]
[149.13987732 77.19809723]
[135.89729309 84.24323273]
[123.20236206 92.23314667]
[111.12236786 101.12549591]
[99.13553619 110.14302826]
[87.24315643 119.28475952]
[75.35077667 128.42649841]
[63.45840073 137.56822205]
[51.56602097 146.70996094]
[66.38286591 149.04685974]
[76.36249542 160.24537659]
[76.98404694 175.23249817]
[67.96594238 187.21888733]
[53.39347076 190.77461243]
[39.86811447 184.28889465]
[33.51698303 170.69981384]
[37.21743011 156.16302490]
[24.12427521 163.48213196]
[11.03112030 170.80123901]
[-2.06203437 178.12034607]
[-9.98843098 192.47666931]
[-26.38752174 192.51980591]
[-34.38932800 178.20536804]
[-25.76227760 164.25883484]
[-9.38113976 165.02719116]
[3.71201468 157.70808411]
[16.80516815 150.38897705]
[29.89832306 143.06987000]
[42.42428589 134.81758118]
[54.31666565 125.67584991]
[66.20904541 116.53411865]
[78.10142517 107.39237976]
[89.99380493 98.25064850]
[93.98976898 91.18550110]
[102.23001862 89.04550934]
[114.31001282 80.15316010]
[99.54498291 77.50852966]
[89.80048370 66.10481262]
[89.49085999 51.10800934]
[98.75637817 39.31181717]
[113.39966583 36.06002045]
[126.78717041 42.82572174]
[132.85421753 56.54399109]
[128.85215759 71.00064850]
[142.09474182 63.95550919]
[155.33732605 56.91037369]
[168.57991028 49.86524200]
[181.82249451 42.82010651]
[175.60383606 29.16463470]
[170.23760986 15.15223694]
[165.74418640 0.83606482]
[162.14060974 -13.72957420]
[159.44053650 -28.48942757]
[157.65420532 -43.38750458]
[156.78842163 -58.36729431]
[156.84645081 -73.37197113]
[157.82807922 -88.34461212]
[159.72956848 -103.22842407]
[162.54371643 -117.96695709]
[166.25984192 -132.50428772]
[170.86386108 -146.78527832]
[176.33830261 -160.75575256]
[182.66238403 -174.36271667]
[189.81214905 -187.55455017]
[197.76045227 -200.28123474]
[206.47714233 -212.49446106]
[215.92916870 -224.14790344]
[226.08065796 -235.19738770]
[236.89311218 -245.60095215]
[248.32551575 -255.31918335]
[260.33450317 -264.31518555]
[272.87451172 -272.55480957]
[285.89797974 -280.00686646]
[299.35549927 -286.64303589]
[313.19601440 -292.43817139]
[327.36706543 -297.37023926]
[341.81481934 -301.42059326]
[356.48455811 -304.57385254]
[371.32055664 -306.81805420]
[386.26660156 -308.14465332]
[401.26593018 -308.54864502]
[416.26171875 -308.02850342]
[431.19702148 -306.58618164]
[446.01519775 -304.22717285]
[460.66006470 -300.96041870]
[475.07604980 -296.79830933]
[489.20843506 -291.75662231]
[503.00369263 -285.85449219]
[516.40942383 -279.11428833]
[529.37475586 -271.56161499]
[541.85058594 -263.22509766]
[553.78955078 -254.13638306]
[565.14636230 -244.32992554]
[575.87792969 -233.84292603]
[585.94354248 -222.71516418]
[595.30505371 -210.98886108]
[603.92687988 -198.70849609]
[611.77636719 -185.92065430]
[618.82379150 -172.67384338]
[625.04229736 -159.01831055]
[630.40838623 -145.00585938]
[634.90167236 -130.68963623]
[638.50512695 -116.12397003]
[641.20501709 -101.36408997]
[642.99121094 -86.46599579]
[643.85687256 -71.48619843]
[643.79870605 -56.48152542]
[642.81689453 -41.50888824]
[640.91528320 -26.62509155]
[638.10095215 -11.88659191]
[634.38470459 2.65070367]
[629.78057861 16.93164825]
[624.30596924 30.90206909]
[617.98175049 44.50897217]
[610.83184814 57.70074081]
[602.88342285 70.42733765]
[594.16662598 82.64047241]
[584.71447754 94.29383850]
[574.56286621 105.34320831]
[563.75030518 115.74668121]
[552.31781006 125.46479034]
[540.30877686 134.46066284]
[527.76867676 142.70019531]
[514.74511719 150.15209961]
[501.28753662 156.78814697]
[487.44696045 162.58312988]
[473.27587891 167.51509094]
[458.82806396 171.56529236]
[444.15829468 174.71839905]
[429.32226562 176.96244812]
[414.37622070 178.28890991]
[399.37689209 178.69276428]
[384.38110352 178.17247009]
[369.44583130 176.73001099]
[354.62765503 174.37084961]
[339.98281860 171.10394287]
[325.56689453 166.94168091]
[311.43453979 161.89985657]
[297.63934326 155.99758911]
[284.23370361 149.25726318]
[271.26840210 141.70446777]
[258.79266357 133.36782837]
[246.85379028 124.27899170]
[235.49708557 114.47241211]
[224.76562500 103.98530579]
[214.70011902 92.85745239]
[205.33874512 81.13105774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[5 47]
[6 39]
[7 38]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[20 31]
[21 30]
[22 29]
[23 28]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
