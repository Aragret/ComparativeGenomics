%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUxxxxxxxxxxGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.07118225]
[92.50000000 235.07118225]
[92.50000000 220.07118225]
[92.50000000 205.07118225]
[92.50000000 190.07118225]
[92.50000000 175.07118225]
[92.50000000 160.07118225]
[92.50000000 145.07118225]
[92.50000000 130.07118225]
[92.50000000 115.07118225]
[86.07080078 111.20913696]
[78.87941742 124.37287903]
[74.98900604 138.85958862]
[60.03173065 139.99092102]
[54.00656128 126.25421143]
[64.96855164 116.01657867]
[73.21239471 103.48505402]
[66.78319550 99.62300873]
[53.54061127 106.66814423]
[54.64852905 121.85670471]
[49.47681427 136.18057251]
[38.92148972 147.15805054]
[24.81133842 152.88723755]
[9.59102249 152.37548828]
[-4.10244417 145.71150208]
[-13.89658546 134.04981995]
[-18.09450722 119.41091919]
[-15.96889496 104.33107758]
[-7.88802242 91.42296600]
[4.74804926 82.92298889]
[19.75004387 80.30382538]
[34.51877594 84.01925659]
[46.49547577 93.42556000]
[59.73806000 86.38042450]
[80.41638184 81.23010254]
[95.76648712 89.04010010]
[99.47264099 74.50516510]
[94.06347656 56.93471527]
[106.73108673 44.82968903]
[110.13406372 30.22079659]
[113.53704071 15.61190414]
[116.94001770 1.00301135]
[120.34299469 -13.60588074]
[123.74597168 -28.21477318]
[127.14894867 -42.82366562]
[114.20793152 -35.23881149]
[99.39081573 -37.57400894]
[89.40991211 -48.77139282]
[88.78665161 -63.75843811]
[97.80339050 -75.74587250]
[112.37545013 -79.30326080]
[125.90155029 -72.81907654]
[132.25427246 -59.23031616]
[137.59577942 -73.24703217]
[142.79119873 -87.31855011]
[147.98661804 -101.39006805]
[153.18202209 -115.46158600]
[146.81791687 -129.67903137]
[152.28726196 -143.87554932]
[165.88064575 -149.85513306]
[171.07606506 -163.92665100]
[176.27146912 -177.99818420]
[181.46688843 -192.06970215]
[178.98835754 -207.69555664]
[190.65496826 -216.95512390]
[195.85037231 -231.02664185]
[201.04579163 -245.09815979]
[206.24121094 -259.16967773]
[211.43663025 -273.24121094]
[216.63203430 -287.31271362]
[203.95227051 -295.43908691]
[193.31619263 -306.10153198]
[185.22128296 -318.80139160]
[180.04612732 -332.94464111]
[178.03282166 -347.86981201]
[179.27548218 -362.87881470]
[183.71603394 -377.26962280]
[191.14674377 -390.36920166]
[201.22009277 -401.56478882]
[213.46492004 -410.33282471]
[227.30851746 -416.26318359]
[242.10339355 -419.07846069]
[257.15756226 -418.64700317]
[271.76690674 -414.98901367]
[285.24813843 -408.27554321]
[296.97070312 -398.82061768]
[306.38632202 -387.06646729]
[313.05459595 -373.56283569]
[316.66366577 -358.94131470]
[317.04467773 -343.88577271]
[314.17987061 -329.10043335]
[308.20321655 -315.27676392]
[299.39422607 -303.06137085]
[288.16494751 -293.02557373]
[275.04058838 -285.63876343]
[260.63497925 -281.24642944]
[245.62190247 -280.05401611]
[230.70355225 -282.11730957]
[225.50814819 -268.04577637]
[220.31272888 -253.97427368]
[215.11730957 -239.90275574]
[209.92189026 -225.83123779]
[204.72648621 -211.75970459]
[207.57662964 -197.14033508]
[195.53840637 -186.87428284]
[190.34298706 -172.80276489]
[185.14758301 -158.73124695]
[179.95216370 -144.65972900]
[186.39825439 -131.28125000]
[181.32981873 -116.93672180]
[167.25355530 -110.26617432]
[162.05813599 -96.19465637]
[156.86271667 -82.12313080]
[151.66729736 -68.05161285]
[152.30509949 -60.63953781]
[146.21466064 -53.74328613]
[141.75784302 -39.42068863]
[138.35487366 -24.81179619]
[134.95188904 -10.20290279]
[131.54890442 4.40598917]
[128.14593506 19.01488113]
[124.74295044 33.62377548]
[121.33997345 48.23266602]
[127.47226715 58.70655441]
[124.70996094 70.93719482]
[114.00758362 78.21132660]
[110.30142212 92.74626160]
[119.18460083 80.65953064]
[132.11164856 73.05089569]
[146.99090576 71.15148926]
[161.41481018 75.26864624]
[173.04949951 84.73617554]
[180.01240540 98.02218628]
[181.17687988 112.97691345]
[176.35450745 127.18060303]
[166.32559204 138.33500671]
[152.71286011 144.63528442]
[137.71893311 145.06201172]
[123.76991272 139.54614258]
[113.12284088 128.98016357]
[107.50000000 115.07118225]
[107.50000000 130.07118225]
[107.50000000 145.07118225]
[107.50000000 160.07118225]
[107.50000000 175.07118225]
[107.50000000 190.07118225]
[107.50000000 205.07118225]
[107.50000000 220.07118225]
[107.50000000 235.07118225]
[107.50000000 250.07118225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 34]
[19 33]
[36 127]
[37 126]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
[53 116]
[54 114]
[55 113]
[56 112]
[57 111]
[60 108]
[61 107]
[62 106]
[63 105]
[65 103]
[66 102]
[67 101]
[68 100]
[69 99]
[70 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
