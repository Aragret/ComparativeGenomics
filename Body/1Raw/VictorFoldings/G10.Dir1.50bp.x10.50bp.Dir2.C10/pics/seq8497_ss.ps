%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCxxxxxxxxxxGAAUUCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.35972595 523.36547852]
[94.35972595 508.36547852]
[94.35972595 493.36547852]
[94.35972595 478.36547852]
[94.35972595 463.36547852]
[94.35972595 448.36547852]
[94.35972595 433.36547852]
[94.35972595 418.36547852]
[94.35972595 403.36547852]
[94.35972595 388.36547852]
[79.30134583 385.02459717]
[65.35102081 378.42767334]
[53.20339203 368.89981079]
[43.46408081 356.91204834]
[36.61951828 343.05828857]
[33.01262665 328.02563477]
[32.82566452 312.56054688]
[36.07100296 297.43148804]
[42.59036636 283.39108276]
[52.06254196 271.13839722]
[64.01920319 261.28427124]
[77.86808014 254.32080078]
[92.92227936 250.59683228]
[92.61022186 235.60008240]
[92.29816437 220.60333252]
[78.35850525 215.25401306]
[67.49946594 204.94737244]
[61.39723206 191.23141479]
[61.01013565 176.18356323]
[66.42829895 162.09608459]
[76.85514069 151.12686157]
[90.72434235 144.96887207]
[90.41229248 129.97212219]
[90.10023499 114.97536469]
[80.59187317 103.37402344]
[65.94837189 100.12319946]
[51.27184677 97.02487946]
[36.56388855 94.07939911]
[21.85592461 91.13391113]
[8.84436035 100.10468292]
[-6.68417645 97.16528320]
[-15.51687908 84.05960083]
[-12.41346264 68.56300354]
[0.78487229 59.86935806]
[16.24778748 63.13644028]
[24.80140686 76.42594910]
[39.50936890 79.37143707]
[54.21733093 82.31691742]
[61.44023514 80.53497314]
[69.19919586 85.47969818]
[83.84270477 88.73052216]
[96.70110321 81.00643921]
[100.70884705 66.55175018]
[104.71658325 52.09706497]
[106.42927551 37.19515991]
[105.80529785 22.20814514]
[105.18132019 7.22112894]
[104.55734253 -7.76588678]
[103.93336487 -22.75290298]
[103.30938721 -37.73991776]
[102.68540955 -52.72693634]
[102.06143188 -67.71395111]
[87.28514862 -70.70142365]
[73.65348816 -77.13890839]
[61.95897675 -86.65215302]
[52.88151550 -98.68806458]
[46.94885254 -112.54688263]
[44.50591278 -127.42288971]
[45.69472122 -142.45120239]
[50.44616318 -156.75810242]
[58.48399353 -169.51179504]
[69.34090424 -179.97079468]
[82.38569641 -187.52705383]
[96.85995483 -191.74122620]
[111.92216492 -192.36834717]
[126.69663239 -189.37191772]
[140.32438660 -182.92616272]
[152.01312256 -173.40582275]
[161.08329773 -161.36442566]
[167.00755310 -147.50199890]
[169.44146729 -132.62452698]
[168.24354553 -117.59693146]
[163.48344421 -103.29292297]
[155.43788147 -90.54410553]
[144.57463074 -80.09167480]
[131.52525330 -72.54333496]
[117.04844666 -68.33792877]
[117.67242432 -53.35091400]
[118.29640198 -38.36389542]
[118.92037964 -23.37688065]
[119.54435730 -8.38986397]
[120.16833496 6.59715176]
[120.79231262 21.58416748]
[121.41629028 36.57118225]
[129.05917358 23.66435242]
[140.78562927 14.31071854]
[155.06854248 9.72836018]
[170.04795837 10.51401424]
[183.77316284 16.56537056]
[194.45677185 27.09439087]
[200.70755005 40.72992706]
[201.71145630 55.69629669]
[197.33775330 70.04449463]
[188.15603638 81.90602875]
[175.36198425 89.73622894]
[160.62168884 92.51540375]
[145.85472107 89.88163757]
[132.98411560 82.17790985]
[123.68593597 70.40744019]
[119.17127228 56.10480499]
[115.16352844 70.55949402]
[111.15579224 85.01418304]
[116.55526733 93.21247101]
[116.90409088 102.60138702]
[112.53511047 110.44036865]
[105.09698486 114.66331482]
[105.40904236 129.66006470]
[105.72109985 144.65681458]
[119.83446503 150.23252869]
[130.70858765 160.75852966]
[136.70806885 174.60842896]
[136.94728088 189.65934753]
[131.42088318 203.61727905]
[120.99999237 214.36671448]
[107.29492188 220.29127502]
[107.60697937 235.28802490]
[107.91902924 250.28477478]
[122.25415039 253.10675049]
[135.67810059 258.85818481]
[147.59976196 267.28302002]
[157.49473572 278.00756836]
[164.92840576 290.55703735]
[169.57505798 304.37658691]
[171.23214722 318.85583496]
[169.82910156 333.35577393]
[165.43032837 347.23706055]
[158.23228455 359.88818359]
[148.55468750 370.75234985]
[136.82630920 379.35198975]
[123.56600952 385.30987549]
[109.35972595 388.36547852]
[109.35972595 403.36547852]
[109.35972595 418.36547852]
[109.35972595 433.36547852]
[109.35972595 448.36547852]
[109.35972595 463.36547852]
[109.35972595 478.36547852]
[109.35972595 493.36547852]
[109.35972595 508.36547852]
[109.35972595 523.36547852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[24 126]
[25 125]
[32 118]
[33 117]
[34 116]
[35 51]
[36 50]
[37 48]
[38 47]
[39 46]
[52 112]
[53 111]
[54 110]
[55 94]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
