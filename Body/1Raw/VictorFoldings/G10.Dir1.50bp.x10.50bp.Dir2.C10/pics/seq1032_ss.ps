%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACAxxxxxxxxxxUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.17330933]
[92.50000000 237.17330933]
[92.50000000 222.17330933]
[92.50000000 207.17330933]
[92.50000000 192.17330933]
[92.50000000 177.17330933]
[92.50000000 162.17330933]
[92.50000000 147.17330933]
[92.50000000 132.17330933]
[92.50000000 117.17330933]
[87.83492279 131.42942810]
[74.16316223 137.60057068]
[60.38578033 131.66897583]
[55.47260666 117.49644470]
[62.62238693 104.31006622]
[77.17977905 100.69480896]
[62.21953201 99.60350037]
[47.25928116 98.51219177]
[38.11733246 108.45615387]
[25.10278702 111.25785828]
[13.03763962 106.10940552]
[6.26005936 95.10662079]
[-8.67424870 93.70431519]
[-23.60855675 92.30201721]
[-38.54286194 90.89971161]
[-48.32498550 105.43264008]
[-64.02319336 113.00666046]
[-81.30995178 111.63311005]
[-95.46967316 101.77633667]
[-102.68504333 86.20256042]
[-117.66475677 85.42271423]
[-132.64447021 84.64286804]
[-142.77000427 92.70063019]
[-155.26904297 91.70420837]
[-163.44789124 82.73683929]
[-178.40814209 81.64553070]
[-193.36839294 80.55422211]
[-207.88562012 88.18194580]
[-221.60363770 79.19596100]
[-220.41053772 62.84027481]
[-205.53366089 55.94021225]
[-192.27708435 65.59397125]
[-177.31683350 66.68527985]
[-162.35658264 67.77658844]
[-147.03440857 59.27770996]
[-131.86462402 69.66315460]
[-116.88491058 70.44300079]
[-101.90519714 71.22283936]
[-96.16886902 59.88731766]
[-86.52134705 51.54955292]
[-74.38543701 47.48625565]
[-61.56890869 48.34025192]
[-49.99521637 54.01905441]
[-41.41484070 63.70343399]
[-37.14056015 75.96540070]
[-22.20625305 77.36770630]
[-7.27194500 78.77001190]
[7.66236258 80.17231750]
[20.10921860 68.90583038]
[37.19165802 70.12005615]
[48.35059357 83.55194092]
[63.31084061 84.64324951]
[78.27108765 85.73456573]
[94.12641144 79.90060425]
[106.49587250 85.50191498]
[117.58718872 75.40326691]
[128.67849731 65.30461121]
[119.82881927 53.17488098]
[112.34249878 40.15942383]
[106.30730438 26.41083527]
[101.79399109 12.09031487]
[98.85549164 -2.63423777]
[97.52625275 -17.59018517]
[97.82184601 -32.60217667]
[99.73882294 -47.49420166]
[103.25469971 -62.09166336]
[108.32825470 -76.22341156]
[114.90000153 -89.72375488]
[122.89289856 -102.43441772]
[132.21322632 -114.20636749]
[142.75170898 -124.90158081]
[154.38478088 -134.39466858]
[166.97605896 -142.57434082]
[180.37792969 -149.34466553]
[194.43322754 -154.62628174]
[208.97720337 -158.35726929]
[223.83930969 -160.49386597]
[238.84529114 -161.01104736]
[253.81922913 -159.90274048]
[268.58557129 -157.18193054]
[282.97116089 -152.88050842]
[296.80734253 -147.04893494]
[309.93188477 -139.75556946]
[322.19094849 -131.08590698]
[333.44076538 -121.14162445]
[343.54943848 -110.03929138]
[352.39846802 -97.90908051]
[359.88409424 -84.89321899]
[365.91854858 -71.14431000]
[370.43109131 -56.82354355]
[373.36877441 -42.09883118]
[374.69723511 -27.14281464]
[374.40081787 -12.13083935]
[372.48303223 2.76108336]
[368.96636963 17.35835457]
[363.89205933 31.48982811]
[357.31958008 44.98982239]
[349.32601929 57.70005035]
[340.00506592 69.47149658]
[329.46600342 80.16615295]
[317.83242798 89.65861511]
[305.24069214 97.83760071]
[291.83847046 104.60720825]
[277.78286743 109.88806915]
[263.23870850 113.61827087]
[248.37648010 115.75408173]
[233.37046814 116.27044678]
[218.39659119 115.16133118]
[203.63040161 112.43972015]
[189.24505615 108.13753510]
[175.40917969 102.30521393]
[162.28501892 95.01113892]
[150.02642822 86.34082031]
[138.77714539 76.39592743]
[127.68583679 86.49457550]
[116.59452057 96.59323120]
[128.28820801 87.19866943]
[142.63465881 82.81924438]
[157.58145142 84.08148193]
[170.99029541 90.80480957]
[180.94288635 102.02736664]
[186.01539612 116.14365387]
[185.48216248 131.13417053]
[179.41946411 144.85437012]
[168.69462585 155.34140015]
[154.84196472 161.09498596]
[139.84324646 161.29200745]
[125.84423828 155.90429688]
[114.84761810 145.70260620]
[108.42659760 132.14640808]
[107.50000000 117.17330933]
[107.50000000 132.17330933]
[107.50000000 147.17330933]
[107.50000000 162.17330933]
[107.50000000 177.17330933]
[107.50000000 192.17330933]
[107.50000000 207.17330933]
[107.50000000 222.17330933]
[107.50000000 237.17330933]
[107.50000000 252.17330933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 63]
[17 62]
[18 61]
[22 58]
[23 57]
[24 56]
[25 55]
[30 48]
[31 47]
[32 46]
[35 44]
[36 43]
[37 42]
[65 126]
[66 125]
[67 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
