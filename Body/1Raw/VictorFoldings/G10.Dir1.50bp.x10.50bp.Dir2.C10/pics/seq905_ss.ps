%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACxxxxxxxxxxCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.41714478 317.62957764]
[96.41714478 302.62957764]
[96.41714478 287.62957764]
[96.41714478 272.62957764]
[96.41714478 257.62957764]
[96.41714478 242.62957764]
[96.41714478 227.62957764]
[96.41714478 212.62957764]
[96.41714478 197.62957764]
[96.41714478 182.62957764]
[93.31882477 167.95304871]
[87.25580597 154.23300171]
[81.19279480 140.51295471]
[74.07940674 138.13604736]
[73.95455170 153.13552856]
[59.65060806 157.65185547]
[50.93518448 145.44360352]
[59.85262680 133.38223267]
[52.73923874 131.00532532]
[39.64608383 138.32441711]
[26.55292892 145.64352417]
[13.45977402 152.96263123]
[9.39969540 168.23651123]
[-4.31320238 176.09347534]
[-19.54330063 171.87214661]
[-27.25485039 158.07695007]
[-22.87272835 142.89233398]
[-8.99676800 135.32705688]
[6.14066839 139.86947632]
[19.23382187 132.55036926]
[32.32697678 125.23126984]
[45.42013168 117.91216278]
[50.90716171 103.95177460]
[46.30159760 89.67631531]
[41.69603348 75.40085602]
[37.09046936 61.12539291]
[26.10754204 57.50732040]
[18.51008987 49.07982635]
[16.13886452 38.20580292]
[2.12215090 32.86429214]
[-11.89456177 27.52277946]
[-23.75635719 37.27948761]
[-38.90995407 39.78231812]
[-53.27910614 34.35801697]
[-62.99858475 22.46569633]
[-65.45390320 7.30433083]
[-59.98458862 -7.04774809]
[-48.06185913 -16.72990417]
[-32.89287186 -19.13768578]
[-18.55800819 -13.62341118]
[-8.91327190 -1.67039311]
[-6.55304956 13.50606632]
[7.46366358 18.84757805]
[21.48037720 24.18909073]
[25.99338150 20.30073166]
[31.40040970 17.80060959]
[32.33603668 2.82981777]
[33.27166748 -12.14097404]
[34.20729446 -27.11176491]
[19.57338524 -30.56961060]
[5.73441601 -36.45101929]
[-6.91143751 -44.58676529]
[-18.00032997 -54.74277115]
[-27.21320915 -66.62683105]
[-34.28500748 -79.89701080]
[-39.01224899 -94.17150879]
[-41.25892639 -109.03961182]
[-40.96039200 -124.07353210]
[-38.12524414 -138.84072876]
[-32.83504868 -152.91630554]
[-25.24201965 -165.89527893]
[-15.56461906 -177.40423584]
[-4.08128834 -187.11201477]
[8.87757492 -194.73933411]
[22.93911934 -200.06671143]
[37.69876480 -202.94088745]
[52.73184586 -203.27914429]
[67.60583496 -201.07177734]
[81.89277649 -196.38229370]
[95.18160248 -189.34559631]
[107.08997345 -180.16415405]
[117.27525330 -169.10214233]
[125.44439697 -156.47784424]
[131.36236572 -142.65446472]
[134.85888672 -128.02975464]
[135.83334351 -113.02446747]
[134.25770569 -98.07035828]
[130.17732239 -83.59767914]
[123.70958710 -70.02283478]
[115.04058075 -57.73640823]
[104.41973114 -47.09189606]
[92.15262604 -38.39556503]
[78.59221649 -31.89762878]
[64.12865448 -27.78504372]
[49.17808533 -26.17613602]
[48.24245834 -11.20534515]
[47.30683136 3.76544619]
[46.37120056 18.73623848]
[59.61159515 35.84197617]
[51.36592865 56.51982880]
[55.97149658 70.79528809]
[60.57706070 85.07074738]
[65.18262482 99.34620667]
[75.09506989 78.88023376]
[94.45561981 70.02343750]
[113.61688232 75.17338562]
[124.23686218 90.19121552]
[139.17117310 88.78890991]
[154.10546875 87.38660431]
[169.30998230 79.88599396]
[180.72650146 92.41992950]
[171.84280396 106.86002350]
[155.50778198 102.32091522]
[140.57347107 103.72322083]
[125.63916016 105.12551880]
[122.13496399 118.79617310]
[111.25122070 129.88325500]
[94.91284943 134.44993591]
[100.97586060 148.16998291]
[107.03887177 161.89004517]
[108.99485779 147.01811218]
[114.98837280 133.26756287]
[124.55168915 121.71148682]
[136.93847656 113.25173187]
[151.18206787 108.54850006]
[166.17085266 107.96884155]
[180.73512268 111.55799866]
[193.73826599 119.03585815]
[204.16549683 129.81884766]
[211.20306396 143.06546021]
[214.30175781 157.74191284]
[213.21974182 172.70283508]
[208.04147339 186.78067017]
[199.17106628 198.87677002]
[187.30075073 208.04714966]
[173.35693359 213.57615662]
[158.42778015 215.03227234]
[143.67837524 212.30187988]
[130.25978088 205.59805298]
[119.21918488 195.44396973]
[111.41714478 182.62957764]
[111.41714478 197.62957764]
[111.41714478 212.62957764]
[111.41714478 227.62957764]
[111.41714478 242.62957764]
[111.41714478 257.62957764]
[111.41714478 272.62957764]
[111.41714478 287.62957764]
[111.41714478 302.62957764]
[111.41714478 317.62957764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[13 118]
[19 32]
[20 31]
[21 30]
[22 29]
[33 103]
[34 102]
[35 101]
[36 100]
[39 54]
[40 53]
[41 52]
[56 98]
[57 97]
[58 96]
[59 95]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
