%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCxxxxxxxxxxAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.29599762 286.77404785]
[88.29599762 271.77404785]
[88.29599762 256.77404785]
[88.29599762 241.77403259]
[88.29599762 226.77403259]
[88.29599762 211.77403259]
[88.29599762 196.77403259]
[88.29599762 181.77403259]
[88.29599762 166.77403259]
[88.29599762 151.77403259]
[74.27928162 146.43252563]
[64.29655457 157.62829590]
[69.18969727 172.18688965]
[66.13224792 187.23838806]
[55.94665527 198.73400879]
[41.37279129 203.58148193]
[26.33095169 200.47686768]
[14.86731434 190.25529480]
[10.06554127 175.66630554]
[13.21728516 160.63427734]
[23.47474289 149.20274353]
[38.07870865 144.44671631]
[53.10079193 147.64556885]
[63.08351898 136.44979858]
[52.59806442 119.08604431]
[49.68320084 99.32208252]
[54.55802917 80.26425934]
[66.23571777 64.81633759]
[82.71225739 55.23719406]
[101.30718994 52.81169128]
[104.09951019 38.07388306]
[106.89183807 23.33607674]
[109.68415833 8.59827137]
[108.20301056 -0.48236915]
[112.69092560 -6.41568708]
[115.78924561 -21.09221268]
[118.88756561 -35.76873779]
[121.37268829 -50.56144714]
[115.41381836 -65.21758270]
[124.67555237 -76.88246918]
[126.54316711 -91.76574707]
[127.94547272 -106.70005798]
[128.88110352 -121.67085266]
[129.81672668 -136.64164734]
[130.75234985 -151.61242676]
[131.68798828 -166.58322144]
[132.62361145 -181.55401611]
[122.58509064 -190.59202576]
[119.64815521 -203.57672119]
[124.67082214 -215.69477844]
[135.60250854 -222.58644104]
[136.84938049 -237.53453064]
[138.09625244 -252.48262024]
[123.40240479 -255.59613037]
[109.21466064 -260.52676392]
[95.75679016 -267.19677734]
[83.24103546 -275.50094604]
[71.86479187 -285.30831909]
[61.80748367 -296.46420288]
[53.22772217 -308.79266357]
[46.26082993 -322.09924316]
[41.01667404 -336.17413330]
[37.57797241 -350.79528809]
[35.99895477 -365.73214722]
[36.30452347 -380.74914551]
[38.48985672 -395.60940552]
[42.52049637 -410.07858276]
[48.33286667 -423.92849731]
[55.83530426 -436.94067383]
[64.90947723 -448.90988159]
[75.41227722 -459.64743042]
[87.17806244 -468.98388672]
[100.02126312 -476.77203369]
[113.73932648 -482.88906860]
[128.11590576 -487.23846436]
[142.92425537 -489.75167847]
[157.93081665 -490.38900757]
[172.89892578 -489.14047241]
[187.59251404 -486.02572632]
[201.77984619 -481.09390259]
[215.23715210 -474.42276001]
[227.75221252 -466.11752319]
[239.12762451 -456.30920410]
[249.18399048 -445.15249634]
[257.76272583 -432.82330322]
[264.72848511 -419.51611328]
[269.97146606 -405.44079590]
[273.40893555 -390.81933594]
[274.98669434 -375.88235474]
[274.67987061 -360.86538696]
[272.49328613 -346.00531006]
[268.46142578 -331.53646851]
[262.64788818 -317.68704224]
[255.14434814 -304.67550659]
[246.06916809 -292.70703125]
[235.56546021 -281.97039795]
[223.79888916 -272.63491821]
[210.95503235 -264.84783936]
[197.23645020 -258.73199463]
[182.85951233 -254.38378906]
[168.05096436 -251.87184143]
[153.04434204 -251.23574829]
[151.79747009 -236.28765869]
[150.55059814 -221.33956909]
[161.94593811 -209.01058960]
[160.90948486 -191.91644287]
[147.59440613 -180.61839294]
[146.65876770 -165.64759827]
[145.72314453 -150.67680359]
[144.78752136 -135.70600891]
[143.85188293 -120.73522186]
[142.91625977 -105.76442719]
[145.02085876 -102.85957336]
[145.78672791 -98.77116394]
[144.66427612 -94.15678406]
[141.42645264 -89.89813995]
[139.55883789 -75.01485443]
[145.65129089 -61.42326736]
[136.25596619 -48.69383240]
[137.93353271 -46.37153244]
[138.76142883 -43.22374344]
[138.41242981 -39.58230591]
[136.68977356 -35.89401245]
[133.56408691 -32.67041779]
[130.46577454 -17.99389076]
[127.36744690 -3.31736541]
[124.42196655 11.39059639]
[121.62963867 26.12840271]
[118.83731842 40.86620712]
[116.04499054 55.60401535]
[126.70133972 60.55678177]
[135.89289856 68.04576111]
[143.02185059 77.65052032]
[147.60838318 88.81130219]
[149.32272339 100.86156464]
[148.00828552 113.06771851]
[143.69453430 124.67383575]
[136.59819031 134.94842529]
[127.11299896 143.23049927]
[115.78800964 148.97204590]
[103.29599762 151.77403259]
[103.29599762 166.77403259]
[103.29599762 181.77403259]
[103.29599762 196.77403259]
[103.29599762 211.77403259]
[103.29599762 226.77403259]
[103.29599762 241.77403259]
[103.29599762 256.77404785]
[103.29599762 271.77404785]
[103.29599762 286.77404785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 24]
[12 23]
[30 130]
[31 129]
[32 128]
[33 127]
[35 126]
[36 125]
[37 124]
[38 119]
[40 117]
[41 116]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[51 104]
[52 103]
[53 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
