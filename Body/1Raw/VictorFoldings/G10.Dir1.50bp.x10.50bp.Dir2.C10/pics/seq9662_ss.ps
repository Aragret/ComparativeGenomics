%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUxxxxxxxxxxACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.02746582 294.28002930]
[124.71949005 279.28320312]
[124.41151428 264.28637695]
[124.10353088 249.28952026]
[123.79555511 234.29269409]
[123.48757935 219.29585266]
[123.17960358 204.29901123]
[122.87162018 189.30216980]
[122.56364441 174.30534363]
[119.20438385 159.68632507]
[112.93498230 146.05935669]
[106.66557312 132.43237305]
[84.91210938 129.47276306]
[69.79188538 113.55574799]
[67.95236969 91.67907715]
[53.48360062 87.72246552]
[38.50335693 86.95280457]
[23.52311707 86.18314362]
[8.54287529 85.41349030]
[-6.43736553 84.64382935]
[-21.41760635 83.87416840]
[-26.34737015 93.88897705]
[-35.67520142 101.13882446]
[-47.87048721 103.72267914]
[-60.60523987 100.57269287]
[-71.19829559 91.77261353]
[-86.10274506 93.46300507]
[-101.00719452 95.15340424]
[-115.91164398 96.84380341]
[-130.81608582 98.53420258]
[-139.04983521 102.63312531]
[-146.04347229 100.10305786]
[-160.97949219 101.48708344]
[-175.91549683 102.87110901]
[-191.12918091 110.35310364]
[-202.53034973 97.80520630]
[-193.62898254 83.37599945]
[-177.29953003 87.93509674]
[-162.36351013 86.55107117]
[-147.42750549 85.16704559]
[-132.50648499 83.62975311]
[-117.60203552 81.93935394]
[-102.69759369 80.24896240]
[-87.79314423 78.55856323]
[-72.88869476 76.86816406]
[-69.83029938 62.18326569]
[-82.82067871 54.68326569]
[-95.81106567 47.18326569]
[-108.80144501 39.68326569]
[-125.54170227 36.99998474]
[-127.59745026 20.17113304]
[-111.99536896 13.53703499]
[-101.30144501 26.69288445]
[-88.31106567 34.19288635]
[-75.32067871 41.69288635]
[-62.33029938 49.19288635]
[-34.54563904 48.85942459]
[-20.64794731 68.89392853]
[-5.66770554 69.66358185]
[9.31253529 70.43324280]
[24.29277611 71.20290375]
[39.27301788 71.97256470]
[54.25325775 72.74222565]
[41.81464005 64.35886383]
[32.04163361 52.97956848]
[25.63273811 39.41763687]
[23.04600334 24.64235878]
[24.46631050 9.70975304]
[29.79214859 -4.31292391]
[38.64286804 -16.42344666]
[50.38589478 -25.75625610]
[64.18193054 -31.64431953]
[79.04496002 -33.66680908]
[93.91268921 -31.67917061]
[107.72249603 -25.82346725]
[119.48736572 -16.51821327]
[128.36645508 -4.42847443]
[133.72515869 9.58167744]
[135.18046570 24.51091194]
[132.62837219 39.29221344]
[126.25129700 52.86913681]
[116.50498962 64.27130890]
[104.08605957 72.68380737]
[89.88210297 77.50537872]
[74.91271973 78.39173889]
[85.58579254 70.19196320]
[98.64065552 66.91766357]
[111.92014313 69.10989380]
[123.22994995 76.40639496]
[135.90145874 68.37940216]
[148.57298279 60.35240173]
[147.71554565 43.86937714]
[155.22837830 29.27831650]
[168.98544312 20.50228500]
[185.19648743 19.84734535]
[199.45109558 27.39730644]
[211.95512390 19.11183167]
[224.45916748 10.82635689]
[231.28054810 -4.08674765]
[247.62971497 -5.36622286]
[256.68801880 8.30414581]
[249.13708496 22.86145401]
[232.74464417 23.33039284]
[220.24060059 31.61586761]
[207.73657227 39.90134048]
[209.47224426 53.48086548]
[205.15449524 66.54196930]
[195.57519531 76.50693512]
[182.57044983 81.38311768]
[168.66888428 80.16130066]
[156.59997559 73.02391815]
[143.92846680 81.05091858]
[131.25694275 89.07791138]
[132.69790649 94.79079437]
[133.10350037 100.66861725]
[132.46089172 106.52527618]
[130.79042053 112.17530823]
[128.14500427 117.43981934]
[124.60838318 122.15210724]
[120.29255676 126.16296387]
[126.56195831 139.78994751]
[132.83135986 153.41693115]
[134.51203918 138.51138306]
[140.25123596 124.65274811]
[149.60086060 112.92309570]
[161.83087158 104.23825073]
[175.98640442 99.27630615]
[190.96221924 98.42469788]
[205.58900452 101.74990082]
[218.72474670 108.99229431]
[229.34382629 119.58641052]
[236.61711121 132.70507812]
[239.97673035 147.32400513]
[239.16035461 162.30177307]
[234.23173523 176.46893311]
[225.57569885 188.71936035]
[213.86807251 198.09655762]
[200.02299500 203.86834717]
[185.12144470 205.58409119]
[170.32691956 203.10983276]
[156.79454041 196.63874817]
[145.58091736 186.67610168]
[137.56048584 173.99736023]
[137.86845398 188.99420166]
[138.17643738 203.99102783]
[138.48442078 218.98786926]
[138.79238892 233.98471069]
[139.10037231 248.98155212]
[139.40835571 263.97839355]
[139.71632385 278.97521973]
[140.02430725 293.97207642]
[142.61007690 313.18048096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 122]
[11 121]
[12 120]
[15 85]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[21 58]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[32 40]
[33 39]
[34 38]
[46 56]
[47 55]
[48 54]
[49 53]
[89 113]
[90 112]
[91 111]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
