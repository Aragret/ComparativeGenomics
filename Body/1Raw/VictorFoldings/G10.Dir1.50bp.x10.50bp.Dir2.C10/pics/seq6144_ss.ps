%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGxxxxxxxxxxGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.51263428 294.07531738]
[131.51263428 279.07531738]
[131.51263428 264.07531738]
[131.51263428 249.07530212]
[131.51263428 234.07530212]
[131.51263428 219.07530212]
[131.51263428 204.07530212]
[131.51263428 189.07530212]
[131.51263428 174.07530212]
[131.51263428 159.07530212]
[129.02752686 144.28259277]
[124.12596893 130.10603333]
[119.22441864 115.92948151]
[109.38019562 122.00245667]
[98.33491516 122.80986023]
[88.61724091 118.61874390]
[82.24805450 110.79130554]
[67.48200226 113.43016815]
[52.71594238 116.06903076]
[37.94989014 118.70789337]
[23.18383217 121.34676361]
[8.41777706 123.98562622]
[-6.34827805 126.62448883]
[-21.11433411 129.26335144]
[-35.88039017 131.90222168]
[-50.64644623 134.54107666]
[-65.41249847 137.17994690]
[-69.46274567 151.89585876]
[-79.50335693 163.39146423]
[-93.54076385 169.38429260]
[-108.78782654 168.68446350]
[-122.21723938 161.43092346]
[-131.16256714 149.06388855]
[-133.84771729 134.03881836]
[-129.73956299 119.33895874]
[-119.65375519 107.88298798]
[-105.59285736 101.94548035]
[-90.34866333 102.70535278]
[-76.94792175 110.01171112]
[-68.05136108 122.41388702]
[-53.28530884 119.77502441]
[-38.51925278 117.13616180]
[-23.75319862 114.49729919]
[-8.98714256 111.85843658]
[5.77891302 109.21956635]
[20.54496765 106.58070374]
[35.31102371 103.94184113]
[50.07707977 101.30297852]
[64.84313202 98.66410828]
[79.60919189 96.02524567]
[82.31843567 87.81547546]
[88.28742981 81.17424774]
[96.67981720 77.37172699]
[106.17702484 77.25463104]
[115.18465424 81.06972504]
[122.10015869 88.38493347]
[129.82424927 75.52652740]
[137.54832458 62.66812897]
[145.00323486 49.65182114]
[152.18574524 36.48323822]
[159.36825562 23.31465340]
[166.55076599 10.14607143]
[173.59590149 -3.09651399]
[180.50289917 -16.41166878]
[187.40989685 -29.72682571]
[186.89619446 -45.53968811]
[199.62489319 -53.27462769]
[186.49044800 -46.02989578]
[171.59561157 -44.25680161]
[157.12747192 -48.21570206]
[145.21044922 -57.32529449]
[137.59439087 -70.24797058]
[135.39758301 -85.08623505]
[138.94259644 -99.66130829]
[147.70890808 -111.83306885]
[160.40930176 -119.81427765]
[175.17893982 -122.43302155]
[189.84912109 -119.30476379]
[202.26574707 -110.88885498]
[210.60562134 -98.42103577]
[213.64416504 -83.73201752]
[210.93545532 -68.97927856]
[221.37525940 -79.75009155]
[231.81507874 -90.52089691]
[242.25488281 -101.29170227]
[252.69470215 -112.06251526]
[263.13452148 -122.83332062]
[257.41665649 -136.94805908]
[257.94058228 -152.16796875]
[264.61557007 -165.85607910]
[276.28509521 -175.64086914]
[290.92733765 -179.82705688]
[306.00549316 -177.68936157]
[318.90710449 -169.59814453]
[327.39694214 -156.95526123]
[330.00408936 -141.95117188]
[326.27682495 -127.18542480]
[316.86093140 -115.21627045]
[303.38775635 -108.11743927]
[288.19161987 -107.11885071]
[273.90533447 -112.39350891]
[263.46551514 -101.62270355]
[253.02569580 -90.85189056]
[242.58589172 -80.08108521]
[232.14607239 -69.31027222]
[221.70626831 -58.53946686]
[212.94004822 -46.36763000]
[213.94779968 -31.50715446]
[200.72505188 -22.81982613]
[193.81805420 -9.50467110]
[186.91105652 3.81048465]
[186.62103271 11.24429512]
[179.71934509 17.32858086]
[172.53683472 30.49716377]
[165.35432434 43.66574478]
[158.17181396 56.83432770]
[158.65824890 61.64461899]
[156.08279419 66.80197144]
[150.40672302 70.39221191]
[142.68264771 83.25061798]
[134.95855713 96.10901642]
[133.40098572 111.02793121]
[138.30253601 125.20449066]
[143.20408630 139.38104248]
[146.68017578 124.78937531]
[154.85684204 112.21392059]
[166.78340149 103.11682129]
[181.07315063 98.55578613]
[196.06463623 99.06111908]
[210.01481628 104.57406616]
[221.30169678 114.45365143]
[228.61297607 127.55117035]
[231.09858704 142.34379578]
[228.46951294 157.11160278]
[221.03143311 170.13754272]
[209.64918518 179.90710449]
[195.64616394 185.28437805]
[180.65046692 185.64418030]
[166.40567017 180.94464111]
[154.56797791 171.73220825]
[146.51263428 159.07530212]
[146.51263428 174.07530212]
[146.51263428 189.07530212]
[146.51263428 204.07530212]
[146.51263428 219.07530212]
[146.51263428 234.07530212]
[146.51263428 249.07530212]
[146.51263428 264.07531738]
[146.51263428 279.07531738]
[146.51263428 294.07531738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 124]
[12 123]
[13 122]
[17 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[56 121]
[57 120]
[58 119]
[59 116]
[60 115]
[61 114]
[62 113]
[63 111]
[64 110]
[65 109]
[67 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
