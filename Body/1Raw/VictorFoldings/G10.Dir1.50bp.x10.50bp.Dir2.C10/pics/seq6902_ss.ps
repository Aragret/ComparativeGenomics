%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGAxxxxxxxxxxAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.56135559 264.23367310]
[69.56135559 249.23367310]
[69.56135559 234.23367310]
[69.56135559 219.23367310]
[69.56135559 204.23367310]
[69.56135559 189.23367310]
[69.56135559 174.23367310]
[69.56135559 159.23367310]
[69.56135559 144.23367310]
[69.56135559 129.23367310]
[70.36736298 109.32317352]
[80.31456757 96.91262054]
[92.82749176 94.92314148]
[87.05121613 81.07992554]
[81.27494812 67.23670197]
[75.49867249 53.39348602]
[69.72240448 39.55027008]
[55.11351013 36.14729309]
[50.32341385 51.83126450]
[34.28687668 55.26078033]
[23.50091553 42.90784073]
[29.06119919 27.48009872]
[45.24778748 24.84828758]
[31.75272179 31.39681625]
[16.90988159 29.23114204]
[5.84854555 19.09966469]
[2.39120436 4.50354290]
[7.73262024 -9.51320648]
[20.02694702 -18.10678101]
[35.02560425 -18.30747795]
[47.54547119 -10.04594231]
[53.26005554 3.82321787]
[51.39244080 -11.06006241]
[49.52482986 -25.94334221]
[47.65721512 -40.82662201]
[45.17209625 -55.61932755]
[42.07377625 -70.29585266]
[38.97545242 -84.97238159]
[23.32066154 -86.12511444]
[8.63372517 -91.62424469]
[-3.90526867 -101.01924133]
[-13.29126453 -113.54686737]
[-18.77479362 -128.19322205]
[-19.92181969 -143.77578735]
[-16.64807320 -159.03887939]
[-9.22519779 -172.75485229]
[1.74178112 -183.82284546]
[15.36375713 -191.35714722]
[11.96077919 -205.96603394]
[8.55780125 -220.57492065]
[5.00303936 -235.14762878]
[1.29687786 -249.68257141]
[-2.40928340 -264.21749878]
[-8.32924652 -277.99987793]
[-16.31916237 -290.69482422]
[-24.30907822 -303.38973999]
[-39.56241989 -302.12713623]
[-53.65081406 -308.10842896]
[-63.33685303 -319.95913696]
[-66.39475250 -334.95605469]
[-62.12183380 -349.65301514]
[-51.49998093 -360.67276001]
[-36.97001266 -365.48303223]
[-21.87081909 -362.97845459]
[-9.67207623 -353.73458862]
[-3.17696977 -339.87557983]
[-3.87802672 -324.58612061]
[-11.61414909 -311.37966919]
[-3.62423301 -298.68472290]
[4.36568308 -285.98980713]
[4.58321047 -300.98822021]
[10.11017990 -314.93286133]
[20.22684097 -326.00775146]
[33.61574936 -332.77066040]
[48.53333282 -334.34091187]
[63.03694534 -330.51400757]
[75.23785400 -321.78829956]
[83.54719543 -309.30010986]
[86.88287354 -294.67572021]
[84.81051636 -279.81954956]
[77.59997559 -266.66632080]
[66.19026947 -256.92883301]
[52.06720734 -251.87519836]
[37.06997681 -252.16352844]
[23.15159607 -257.75625610]
[12.12565327 -267.92367554]
[15.83181381 -253.38873291]
[19.53797531 -238.85379028]
[24.26882362 -233.11230469]
[23.16669273 -223.97790527]
[26.56967163 -209.36901855]
[29.97264862 -194.76011658]
[44.32810974 -194.23599243]
[58.06674957 -189.99887085]
[70.24431610 -182.33337402]
[80.02215576 -171.75996399]
[86.72491455 -158.99960327]
[89.88724518 -144.92468262]
[89.28606415 -130.49923706]
[84.95631409 -116.71302795]
[77.18895721 -104.51361084]
[66.51145935 -94.74117279]
[53.65197754 -88.07070160]
[56.75030136 -73.39418030]
[59.84862137 -58.71765137]
[62.19296265 -57.07101440]
[64.00401306 -54.36656189]
[64.86408234 -50.81098175]
[64.44122314 -46.76224899]
[62.54049683 -42.69423676]
[64.40811157 -27.81095505]
[66.27571869 -12.92767525]
[68.14333344 1.95560467]
[86.82916260 12.21501732]
[83.56562042 33.77399826]
[89.34188843 47.61721420]
[95.11816406 61.46043396]
[100.89443970 75.30364990]
[106.67070770 89.14686584]
[116.88418579 100.13253021]
[130.27047729 106.90065002]
[143.65675354 113.66876221]
[159.99176025 112.21963501]
[169.19149780 125.79523468]
[161.79206848 140.43014526]
[145.40538025 141.06922913]
[136.88864136 127.05504608]
[123.50235748 120.28693390]
[110.11607361 113.51882172]
[103.72739410 117.44753265]
[112.23015594 129.80484009]
[120.73291779 142.16213989]
[129.23568726 154.51945496]
[139.26805115 165.67076111]
[132.94097900 179.27107239]
[117.94900513 178.78070068]
[112.52418518 164.79617310]
[105.33280182 151.63243103]
[98.14141846 138.46868896]
[90.95003510 125.30495453]
[84.56135559 129.23367310]
[84.56135559 144.23367310]
[84.56135559 159.23367310]
[84.56135559 174.23367310]
[84.56135559 189.23367310]
[84.56135559 204.23367310]
[84.56135559 219.23367310]
[84.56135559 234.23367310]
[84.56135559 249.23367310]
[84.56135559 264.23367310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[18 23]
[32 113]
[33 112]
[34 111]
[35 110]
[36 105]
[37 104]
[38 103]
[48 92]
[49 91]
[50 90]
[51 88]
[52 87]
[53 86]
[54 70]
[55 69]
[56 68]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
