%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCxxxxxxxxxxAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[14.87107754 365.01583862]
[1.11424232 360.19595337]
[-4.59042120 374.06884766]
[-10.29508400 387.94171143]
[-15.99974728 401.81460571]
[-21.70441055 415.68746948]
[-27.40907478 429.56036377]
[-24.69174767 445.73281860]
[-37.50936508 455.96221924]
[-52.67625809 449.72543335]
[-54.59003067 433.43835449]
[-41.28195572 423.85568237]
[-35.57729340 409.98281860]
[-29.87262917 396.10992432]
[-24.16796494 382.23706055]
[-18.46330070 368.36416626]
[-12.75863838 354.49130249]
[-25.84353256 348.28155518]
[-38.58770752 341.39962769]
[-50.95666504 333.86407471]
[-62.91690826 325.69537354]
[-74.43606567 316.91561890]
[-85.48294067 307.54855347]
[-96.02762604 297.61956787]
[-106.04157257 287.15554810]
[-115.49767303 276.18478394]
[-124.37031555 264.73703003]
[-132.63548279 252.84324646]
[-140.27081299 240.53564453]
[-147.25559998 227.84753418]
[-153.57096863 214.81329346]
[-159.19978333 201.46820068]
[-164.12683105 187.84838867]
[-168.33877563 173.99072266]
[-171.82418823 159.93273926]
[-174.57365417 145.71249390]
[-176.57972717 131.36846924]
[-177.83695984 116.93952179]
[-178.34196472 102.46470642]
[-178.09336853 87.98322296]
[-177.09184265 73.53427124]
[-175.34010315 59.15697861]
[-172.84289551 44.89026642]
[-169.60696411 30.77276039]
[-165.64108276 16.84268570]
[-160.95599365 3.13775563]
[-155.56437683 -10.30492306]
[-149.48081970 -23.44895554]
[-142.72181702 -36.25875473]
[-135.30563354 -48.69963837]
[-127.25238800 -60.73792267]
[-118.58385468 -72.34101105]
[-109.32351685 -83.47750092]
[-99.49643707 -94.11722565]
[-89.12923431 -104.23138428]
[-78.24996948 -113.79259491]
[-66.88809967 -122.77497101]
[-75.55470276 -135.01792908]
[-84.22131348 -147.26087952]
[-99.33740997 -153.61978149]
[-101.11975098 -169.92178345]
[-87.73481750 -179.39678955]
[-72.95188141 -172.29771423]
[-71.97836304 -155.92749023]
[-63.31175232 -143.68453979]
[-54.64514542 -131.44158936]
[-42.75635910 -138.95805359]
[-30.50305748 -145.86434937]
[-17.91652489 -152.14285278]
[-5.02890205 -157.77752686]
[8.12690544 -162.75399780]
[21.51730347 -167.05952454]
[35.10810471 -170.68315125]
[48.86459732 -173.61560059]
[62.75166321 -175.84939575]
[76.73384094 -177.37882996]
[90.77542877 -178.19998169]
[104.84056854 -178.31079102]
[118.89334869 -177.71093750]
[132.89788818 -176.40197754]
[146.81842041 -174.38725281]
[160.61940002 -171.67189026]
[174.26560974 -168.26283264]
[187.72216797 -164.16877747]
[200.95474243 -159.40020752]
[213.92955017 -153.96925354]
[226.61343384 -147.88983154]
[238.97401428 -141.17742920]
[250.97973633 -133.84919739]
[262.59994507 -125.92384338]
[273.80496216 -117.42161560]
[284.56619263 -108.36421204]
[294.85614014 -98.77477264]
[304.64852905 -88.67777252]
[313.91839600 -78.09899902]
[325.70053101 -87.38238525]
[331.27542114 -102.80484772]
[347.46450806 -105.42131042]
[357.61380005 -92.54017639]
[351.28262329 -77.41245270]
[334.98391724 -75.60024261]
[323.20175171 -66.31685638]
[334.71215820 -49.63463974]
[344.97817993 -32.15908432]
[353.94534302 -13.98284531]
[361.56616211 4.79770756]
[367.80017090 24.08300400]
[372.61437988 43.77079773]
[375.98324585 63.75671005]
[377.88888550 83.93477631]
[392.88177490 83.47284698]
[407.87466431 83.01092529]
[423.52008057 76.47968292]
[434.12716675 89.70565033]
[424.35440063 103.55951691]
[408.33657837 98.00380707]
[393.34368896 98.46573639]
[378.35083008 98.92765808]
[378.02526855 113.50077820]
[376.93728638 128.03688049]
[375.08981323 142.49607849]
[372.48794556 156.83874512]
[369.13882446 171.02554321]
[365.05157471 185.01754761]
[360.23748779 198.77641296]
[354.70971680 212.26438904]
[348.48339844 225.44448853]
[341.57568359 238.28057861]
[334.00546265 250.73744202]
[325.79348755 262.78091431]
[316.96231079 274.37799072]
[307.53613281 285.49685669]
[297.54080200 296.10699463]
[287.00375366 306.17935181]
[275.95385742 315.68627930]
[264.42141724 324.60168457]
[252.43807983 332.90118408]
[240.03669739 340.56195068]
[227.25126648 347.56298828]
[214.11688232 353.88513184]
[200.66952515 359.51101685]
[186.94610596 364.42523193]
[172.98423767 368.61428833]
[158.82221985 372.06668091]
[144.49888611 374.77294922]
[130.05351257 376.72570801]
[115.52573395 377.91955566]
[100.95537567 378.35122681]
[86.38239288 378.01959229]
[71.84675598 376.92547607]
[57.38832474 375.07192993]
[43.04675293 372.46405029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[57 66]
[58 65]
[59 64]
[95 102]
[96 101]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
