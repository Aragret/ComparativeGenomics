%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCxxxxxxxxxxCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.32955933 429.93237305]
[99.32955933 414.93237305]
[99.32955933 399.93237305]
[99.32955933 384.93237305]
[99.32955933 369.93237305]
[99.32955933 354.93237305]
[99.32955933 339.93237305]
[99.32955933 324.93237305]
[99.32955933 309.93237305]
[99.32955933 294.93237305]
[83.49306488 291.76239014]
[68.63812256 285.41061401]
[55.39680099 276.14501953]
[44.33295441 264.35745239]
[35.91827774 250.54736328]
[30.51216316 235.30039978]
[28.34635735 219.26370239]
[29.51502800 203.11836243]
[33.97067642 187.55059814]
[41.52605820 173.22247314]
[51.86205673 160.74380493]
[64.54114532 150.64620972]
[79.02593994 143.36042786]
[94.70193481 139.19796753]
[93.81332397 124.22430420]
[92.92471313 109.25064850]
[83.92953491 121.25426483]
[69.92242432 126.62090302]
[55.20941162 123.70075226]
[44.31354523 113.39153290]
[40.58440781 98.86247253]
[45.16840363 84.58007050]
[56.65633011 74.93498993]
[71.51659393 72.89231110]
[85.18088531 79.07997894]
[93.44815826 91.59452820]
[95.22225189 76.69981384]
[96.99635315 61.80509949]
[98.77044678 46.91038132]
[100.54454803 32.01566315]
[102.31864166 17.12094879]
[93.23614502 29.05862808]
[81.68530273 38.62827301]
[68.26678467 45.33225250]
[53.67836380 48.82194519]
[38.67865753 48.91588974]
[24.04767036 45.60919189]
[10.54623318 39.07381439]
[-1.12356353 29.64959717]
[-10.35487461 17.82661438]
[-16.66765976 4.21967793]
[-19.73364830 -10.46363640]
[-19.39340210 -25.45977783]
[-15.66461468 -39.98892593]
[-8.74118996 -53.29554749]
[1.01684654 -64.68768311]
[13.10206413 -73.57292175]
[26.88601685 -79.48922729]
[41.65192032 -82.12893677]
[56.63193130 -81.35478973]
[71.04706573 -77.20703888]
[84.14772034 -69.90136719]
[95.25264740 -59.81768799]
[103.78437805 -47.48035812]
[109.29924011 -33.53094101]
[111.51046753 -18.69482040]
[110.30194092 -3.73783040]
[118.92581177 -16.01092911]
[127.54967499 -28.28402519]
[136.17353821 -40.55712509]
[144.79740906 -52.83022308]
[153.42127991 -65.10331726]
[162.04513550 -77.37641907]
[151.07241821 -87.64020538]
[141.63497925 -99.33126831]
[133.91653442 -112.22203064]
[128.06732178 -126.06156921]
[124.20119476 -140.58049011]
[122.39341736 -155.49620056]
[122.67917633 -170.51832581]
[125.05290222 -185.35447693]
[129.46839905 -199.71586609]
[135.83972168 -213.32295227]
[144.04283142 -225.91084290]
[153.91806030 -237.23452759]
[165.27319336 -247.07359314]
[177.88719177 -255.23649597]
[191.51452637 -261.56436157]
[205.88993835 -265.93402100]
[220.73358154 -268.26040649]
[235.75656128 -268.49826050]
[250.66641235 -266.64288330]
[265.17294312 -262.73046875]
[278.99374390 -256.83712769]
[291.85980225 -249.07760620]
[303.52069092 -239.60292053]
[313.74942017 -228.59750366]
[322.34689331 -216.27558899]
[329.14575195 -202.87699890]
[334.01364136 -188.66258240]
[336.85580444 -173.90899658]
[337.61694336 -158.90344238]
[336.28222656 -143.93798828]
[332.87762451 -129.30395508]
[327.46942139 -115.28620148]
[320.16290283 -102.15757751]
[311.10025024 -90.17364502]
[300.45791626 -79.56765747]
[288.44305420 -70.54608154]
[275.28948975 -63.28451538]
[261.25332642 -57.92431259]
[246.60772705 -54.56980896]
[231.63780212 -53.28630066]
[216.63493347 -54.09877014]
[201.89115906 -56.99140549]
[187.69346619 -61.90789795]
[174.31823730 -68.75254822]
[165.69436646 -56.47945404]
[157.07051086 -44.20635605]
[148.44664001 -31.93325806]
[139.82276917 -19.66016006]
[131.19891357 -7.38706160]
[122.57504272 4.88603592]
[117.21335602 18.89504623]
[115.43926239 33.78976440]
[113.66516113 48.68447876]
[111.89106750 63.57919693]
[110.11696625 78.47391510]
[108.34287262 93.36862946]
[107.89836884 108.36203766]
[108.78697968 123.33569336]
[109.67559052 138.30935669]
[123.47663879 140.06030273]
[136.75007629 144.21327209]
[149.08139038 150.63717651]
[160.08570862 159.13003540]
[169.41987610 169.42536926]
[176.79309082 181.20046997]
[181.97598267 194.08654785]
[184.80775452 207.68034363]
[185.20117188 221.55664062]
[183.14526367 235.28167725]
[178.70558167 248.42658997]
[172.02215576 260.58093262]
[163.30503845 271.36541748]
[152.82774353 280.44375610]
[140.91862488 287.53314209]
[127.95062256 292.41311646]
[114.32955933 294.93237305]
[114.32955933 309.93237305]
[114.32955933 324.93237305]
[114.32955933 339.93237305]
[114.32955933 354.93237305]
[114.32955933 369.93237305]
[114.32955933 384.93237305]
[114.32955933 399.93237305]
[114.32955933 414.93237305]
[114.32955933 429.93237305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[24 132]
[25 131]
[26 130]
[36 129]
[37 128]
[38 127]
[39 126]
[40 125]
[41 124]
[67 123]
[68 122]
[69 121]
[70 120]
[71 119]
[72 118]
[73 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
