%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUxxxxxxxxxxCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[195.11834717 462.48809814]
[195.11834717 447.48809814]
[195.11834717 432.48809814]
[195.11834717 417.48809814]
[195.11834717 402.48809814]
[195.11834717 387.48809814]
[195.11834717 372.48809814]
[195.11834717 357.48809814]
[195.11834717 342.48809814]
[195.11834717 327.48809814]
[192.61096191 312.69912720]
[187.66677856 298.53738403]
[182.72257996 284.37564087]
[177.77838135 270.21389771]
[163.48677063 266.10446167]
[154.24609375 254.22698975]
[153.76556396 239.00784302]
[162.43893433 226.27682495]
[157.49473572 212.11508179]
[152.55053711 197.95333862]
[147.32751465 183.89204407]
[141.82769775 169.93669128]
[136.32788086 155.98133850]
[130.82806396 142.02597046]
[122.57168579 129.50271606]
[111.91281891 118.94863129]
[101.25395203 108.39455414]
[96.32598877 113.91638947]
[87.48225403 115.97947693]
[77.00218201 112.56031799]
[62.21323013 110.05294037]
[47.42427826 107.54557037]
[32.63533020 105.03819275]
[17.84637833 102.53081512]
[3.05742669 100.02344513]
[-4.16531563 113.33173370]
[-15.31959248 123.57189178]
[-29.19547272 129.63313293]
[-44.28780365 130.85798645]
[-58.95948410 127.11358643]
[-71.61903381 118.80609131]
[-80.89324951 106.83664703]
[-85.77612305 92.50359344]
[-85.73800659 77.36169434]
[-80.78302765 63.05341339]
[-71.44866943 51.13080978]
[-58.74744797 42.88716125]
[-44.05710220 39.21667480]
[-28.97113037 40.51749802]
[-15.12594318 46.64852524]
[-4.02336502 56.94471359]
[3.13228059 70.28920746]
[5.56480217 85.23448944]
[20.35375214 87.74186707]
[35.14270401 90.24924469]
[49.93165588 92.75661469]
[64.72060394 95.26399231]
[79.50955963 97.77136993]
[90.06363678 87.11250305]
[87.41028595 72.34904480]
[84.75692749 57.58558655]
[69.70770264 57.00696182]
[55.13481522 53.20629120]
[41.71987534 46.36133194]
[30.09032059 36.79224014]
[20.79008484 24.94657898]
[14.25415993 11.37839127]
[10.78824043 -3.27771616]
[10.55443478 -18.33624840]
[13.56367874 -33.09289169]
[19.67522240 -46.85745239]
[28.60322189 -58.98613358]
[39.93009567 -68.91165924]
[53.12606430 -76.16978455]
[67.57392883 -80.42105103]
[82.59793854 -81.46660614]
[97.49539185 -79.25754547]
[111.56951141 -73.89720154]
[124.16201782 -65.63628387]
[134.68394470 -54.86116409]
[142.64315796 -42.07581711]
[147.66738892 -27.87824249]
[149.52165222 -12.93248081]
[148.11920166 2.06242633]
[143.52566528 16.40513992]
[135.95585632 29.42482376]
[125.76386261 40.51252747]
[113.42635345 49.14965439]
[99.52038574 54.93223190]
[102.17374420 69.69569397]
[104.82709503 84.45915222]
[111.80803680 97.73568726]
[122.46689606 108.28977203]
[133.12576294 118.84384918]
[129.28828430 104.34303284]
[129.43249512 89.34372711]
[133.54811096 74.91938019]
[141.34054565 62.10228729]
[152.25216675 51.80973053]
[165.50204468 44.77831268]
[180.14192200 41.51123810]
[195.12409973 42.24232864]
[209.37632751 46.91925812]
[221.87866211 55.20731735]
[231.73631287 66.51335907]
[238.24383545 80.02824402]
[240.93548584 94.78476715]
[239.61865234 109.72686005]
[234.38755798 123.78515625]
[225.61659241 135.95355225]
[213.93344116 145.36122131]
[200.17424011 151.33485413]
[185.32368469 153.44697571]
[170.44458008 151.54640198]
[156.60176086 145.76916504]
[144.78343201 136.52615356]
[150.28324890 150.48152161]
[155.78306580 164.43687439]
[161.28288269 178.39222717]
[166.27587891 182.85630798]
[167.96936035 188.35145569]
[166.71228027 193.00915527]
[171.65647888 207.17089844]
[176.60067749 221.33264160]
[191.31301880 225.89915466]
[200.40908813 238.11042786]
[200.56866455 253.15829468]
[191.94012451 265.26971436]
[196.88432312 279.43145752]
[201.82852173 293.59320068]
[206.77270508 307.75494385]
[209.92918396 293.09082031]
[217.60147095 280.20141602]
[228.98677063 270.43542480]
[242.89384460 264.81463623]
[257.86758423 263.92718506]
[272.34121704 267.86593628]
[284.80038452 276.21871948]
[293.94143677 288.11163330]
[298.80792236 302.30026245]
[298.89068604 317.30004883]
[294.18106079 331.54150391]
[285.17178345 343.53454590]
[272.80557251 352.02432251]
[258.37625122 356.12252808]
[243.39364624 355.40036011]
[229.42539978 349.93338013]
[217.93301392 340.29360962]
[210.11834717 327.48809814]
[210.11834717 342.48809814]
[210.11834717 357.48809814]
[210.11834717 372.48809814]
[210.11834717 387.48809814]
[210.11834717 402.48809814]
[210.11834717 417.48809814]
[210.11834717 432.48809814]
[210.11834717 447.48809814]
[210.11834717 462.48809814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 131]
[12 130]
[13 129]
[14 128]
[18 124]
[19 123]
[20 122]
[21 119]
[22 118]
[23 117]
[24 116]
[25 94]
[26 93]
[27 92]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[59 91]
[60 90]
[61 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
