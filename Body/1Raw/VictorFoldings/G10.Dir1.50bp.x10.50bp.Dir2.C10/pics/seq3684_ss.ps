%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCxxxxxxxxxxUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.70510864 376.81530762]
[157.70510864 361.81530762]
[157.70510864 346.81530762]
[157.70510864 331.81530762]
[157.70510864 316.81530762]
[157.70510864 301.81530762]
[157.70510864 286.81530762]
[157.70510864 271.81530762]
[157.70510864 256.81530762]
[157.70510864 241.81530762]
[154.30212402 227.20642090]
[147.67362976 213.75045776]
[141.04513550 200.29447937]
[134.41662598 186.83851624]
[127.78813171 173.38255310]
[121.15963745 159.92658997]
[113.10620117 162.18644714]
[104.82572937 163.36906433]
[96.46166229 163.45397949]
[88.15888977 162.43968201]
[80.06124115 160.34378052]
[72.30898285 157.20256042]
[65.03639984 153.07044983]
[58.36948013 148.01901245]
[52.42371368 142.13577271]
[47.30208969 135.52261353]
[43.09333038 128.29412842]
[39.87034607 120.57550049]
[37.68896484 112.50045776]
[36.58697510 104.20886993]
[21.60725975 103.42902374]
[6.62754583 102.64917755]
[-8.35216808 101.86933136]
[-16.10503006 115.06598663]
[-29.10875893 123.13825989]
[-44.37519455 124.23120880]
[-58.39622116 118.09366608]
[-67.94991302 106.13600922]
[-70.84089661 91.10601044]
[-66.40484619 76.45745850]
[-55.66113281 65.55648041]
[-41.07858658 60.90804672]
[-26.00816917 63.58032990]
[-13.91295052 72.95925903]
[-7.57232332 86.88961792]
[7.40739107 87.66946411]
[22.38710594 88.44931030]
[37.36682129 89.22915649]
[45.11356354 67.96243286]
[59.82194138 50.75926590]
[79.62638855 39.80164337]
[76.52806091 25.12511635]
[73.42974091 10.44859219]
[70.33142090 -4.22793388]
[55.29181671 -3.87433839]
[40.44335938 -6.29051876]
[26.29177666 -11.39418030]
[13.31906891 -19.01149559]
[1.96707940 -28.88301849]
[-7.37754583 -40.67253113]
[-14.39653301 -53.97848892]
[-18.85081673 -68.34769440]
[-20.58868790 -83.29073334]
[-19.55095482 -98.29865265]
[-15.77295971 -112.86029816]
[-9.38338280 -126.47969055]
[-0.59984916 -138.69297791]
[10.27847672 -149.08415222]
[22.88108444 -157.29931641]
[36.77873230 -163.05865479]
[51.49806976 -166.16601562]
[66.53776550 -166.51556396]
[81.38557434 -164.09538269]
[95.53578186 -158.98789978]
[108.50643158 -151.36709595]
[119.85576630 -141.49250793]
[129.19720459 -129.70048523]
[136.21261597 -116.39263153]
[140.66302490 -102.02222443]
[142.39686584 -87.07872009]
[141.35508728 -72.07107544]
[137.57316589 -57.51045609]
[131.17991638 -43.89278030]
[122.39308929 -31.68186951]
[111.51196289 -21.29362106]
[98.90714264 -13.08185291]
[85.00794220 -7.32625580]
[88.10626984 7.35026979]
[91.20458984 22.02679634]
[94.30290985 36.70331955]
[114.71194458 38.17375183]
[133.59588623 46.05333328]
[148.99714661 59.52524185]
[161.60827637 51.40369797]
[174.21940613 43.28215790]
[186.83053589 35.16061401]
[199.44165039 27.03907204]
[206.45713806 12.21628380]
[222.82160950 11.15033817]
[231.70069885 24.93778801]
[223.96037292 39.39528656]
[207.56320190 39.65019989]
[194.95207214 47.77174377]
[182.34094238 55.89328384]
[169.72981262 64.01482391]
[157.11868286 72.13636780]
[161.62519836 84.46742249]
[163.50183105 97.46134186]
[162.66847229 110.56359100]
[159.16070557 123.21504211]
[153.12820435 134.87577820]
[144.82844543 145.04815674]
[134.61560059 153.29809570]
[141.24409485 166.75405884]
[147.87260437 180.21002197]
[154.50109863 193.66598511]
[161.12959290 207.12194824]
[167.75808716 220.57792664]
[169.05984497 205.63450623]
[174.11563110 191.51222229]
[182.59362793 179.13790894]
[193.93740845 169.32369995]
[207.40248108 162.71372986]
[222.10511780 159.74179077]
[237.08038330 160.60296631]
[251.34542847 165.24069214]
[263.96401978 173.35063171]
[274.10800171 184.40051270]
[281.11160278 197.66510010]
[284.51519775 212.27384949]
[284.09536743 227.26797485]
[279.87969971 241.66339111]
[272.14483643 254.51533508]
[261.39846802 264.98028564]
[248.34585571 272.37145996]
[233.84365845 276.20373535]
[218.84367371 276.22561646]
[204.33036804 272.43566895]
[191.25624084 265.08261108]
[180.47938538 254.64904785]
[172.70510864 241.81530762]
[172.70510864 256.81530762]
[172.70510864 271.81530762]
[172.70510864 286.81530762]
[172.70510864 301.81530762]
[172.70510864 316.81530762]
[172.70510864 331.81530762]
[172.70510864 346.81530762]
[172.70510864 361.81530762]
[172.70510864 376.81530762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[13 116]
[14 115]
[15 114]
[16 113]
[30 48]
[31 47]
[32 46]
[33 45]
[51 90]
[52 89]
[53 88]
[54 87]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
