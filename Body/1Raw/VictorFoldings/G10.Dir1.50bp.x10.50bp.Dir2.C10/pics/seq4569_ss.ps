%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUxxxxxxxxxxUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAAUUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[42.75118637 486.78756714]
[42.75118637 471.78756714]
[42.75118637 456.78756714]
[42.75118637 441.78756714]
[42.75118637 426.78756714]
[42.75118637 411.78756714]
[42.75118637 396.78756714]
[42.75118637 381.78756714]
[42.75118637 366.78756714]
[42.75118637 351.78756714]
[27.69280434 348.44671631]
[13.74248123 341.84979248]
[1.59485078 332.32189941]
[-8.14445972 320.33416748]
[-14.98902512 306.48040771]
[-18.59591675 291.44775391]
[-18.78287697 275.98263550]
[-15.53753662 260.85360718]
[-9.01817417 246.81320190]
[0.45399925 234.56051636]
[12.41066265 224.70637512]
[26.25953865 217.74291992]
[41.31373596 214.01895142]
[33.80781174 227.00590515]
[23.35863113 237.76762390]
[10.59846020 245.65292358]
[-3.70060110 250.18469238]
[-18.67333603 251.08868408]
[-33.41376495 248.31024170]
[-47.02996063 242.01745605]
[-58.69803238 232.59109497]
[-67.71195221 220.60154724]
[-73.52630615 206.77429199]
[-75.78927612 191.94596863]
[-74.36393738 177.01383972]
[-69.33651733 162.88143921]
[-61.01123810 150.40386963]
[-49.89183807 140.33615112]
[-36.65114594 133.28746033]
[-22.09033203 129.68431091]
[-7.09045267 129.74470520]
[7.44086790 133.46502686]
[20.62436104 140.62013245]
[31.66230965 150.77708435]
[39.88682175 163.32130432]
[44.80024719 177.49374390]
[46.10535049 192.43489075]
[52.73384857 178.97892761]
[51.41717529 164.14262390]
[64.45632172 155.18209839]
[71.08482361 141.72613525]
[77.71332550 128.27017212]
[84.34181976 114.81420135]
[75.76030731 104.13455200]
[74.77475739 88.74049377]
[83.65734100 74.06059265]
[75.66742706 61.36566162]
[67.67751312 48.67073059]
[59.68759537 35.97579956]
[44.42599869 31.02977180]
[38.91259766 15.96385002]
[47.37680435 2.33532262]
[63.32560349 0.59882909]
[74.52443695 12.08645821]
[72.38252258 27.98588562]
[80.37244415 40.68081284]
[88.36235809 53.37574387]
[96.35227203 66.07067108]
[95.42673492 51.09925461]
[94.50119781 36.12783813]
[88.63532257 22.32234764]
[89.94503021 7.37963486]
[98.12306976 -5.19492579]
[111.25099182 -12.45149708]
[126.24913025 -12.68777561]
[139.59910583 -5.84833384]
[148.16918945 6.46237898]
[149.94894409 21.35642052]
[144.52085876 35.33983231]
[133.15788269 45.13247681]
[125.71174622 58.15380859]
[118.26560974 71.17514038]
[131.04296875 63.31771469]
[143.82032776 55.46028900]
[151.52262878 41.64054871]
[166.41703796 41.56446075]
[174.11933899 27.74472237]
[189.01374817 27.66863251]
[201.79110718 19.81120682]
[214.56846619 11.95378113]
[227.34580994 4.09635544]
[224.01116943 -10.67384720]
[225.65557861 -25.72624588]
[232.10063171 -39.42806625]
[242.64724731 -50.29304123]
[256.15139771 -57.14261627]
[271.14825439 -59.23379898]
[286.01107788 -56.33975983]
[299.12762451 -48.77441788]
[309.07516479 -37.35840607]
[314.77462769 -23.33004761]
[315.60778809 -8.21103382]
[311.48428345 6.35863733]
[302.85134888 18.79855728]
[290.64550781 27.75933647]
[276.19067383 32.26897430]
[261.05484009 31.83830452]
[246.87983704 26.51403809]
[235.20324707 16.87371254]
[222.42588806 24.73113823]
[209.64852905 32.58856583]
[196.87117004 40.44599152]
[190.08279419 53.70371246]
[174.27445984 54.34181976]
[167.48608398 67.59954071]
[151.67774963 68.23764801]
[138.90039062 76.09506989]
[126.12303925 83.95249939]
[122.10348511 113.89272308]
[97.79778290 121.44270325]
[91.16928864 134.89866638]
[84.54078674 148.35462952]
[77.91229248 161.81059265]
[78.75485229 177.60934448]
[66.18981171 185.60742188]
[59.56131744 199.06338501]
[56.31048965 213.70689392]
[70.64560699 216.52886963]
[84.06956482 222.28028870]
[95.99122620 230.70512390]
[105.88619232 241.42967224]
[113.31986237 253.97914124]
[117.96652222 267.79870605]
[119.62361145 282.27792358]
[118.22055817 296.77786255]
[113.82178497 310.65917969]
[106.62374115 323.31030273]
[96.94614410 334.17446899]
[85.21777344 342.77410889]
[71.95746613 348.73196411]
[57.75118637 351.78756714]
[57.75118637 366.78756714]
[57.75118637 381.78756714]
[57.75118637 396.78756714]
[57.75118637 411.78756714]
[57.75118637 426.78756714]
[57.75118637 441.78756714]
[57.75118637 456.78756714]
[57.75118637 471.78756714]
[57.75118637 486.78756714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 127]
[47 126]
[48 125]
[50 123]
[51 122]
[52 121]
[53 120]
[56 68]
[57 67]
[58 66]
[59 65]
[82 118]
[83 117]
[84 116]
[86 114]
[88 112]
[89 111]
[90 110]
[91 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
