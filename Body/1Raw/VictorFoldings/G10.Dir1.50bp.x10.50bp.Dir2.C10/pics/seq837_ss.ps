%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACxxxxxxxxxxCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[111.53333282 257.15057373]
[111.53333282 242.15055847]
[111.53333282 227.15055847]
[111.53333282 212.15055847]
[111.53333282 197.15055847]
[111.53333282 182.15055847]
[111.53333282 167.15055847]
[111.53333282 152.15055847]
[111.53333282 137.15055847]
[111.53333282 122.15056610]
[94.37804413 121.08249664]
[84.28119659 110.06509399]
[69.46343231 112.39620209]
[54.64567947 114.72730255]
[42.21559906 124.51524353]
[28.44052696 118.84985352]
[13.62276936 121.18095398]
[-1.19498861 123.51206207]
[-16.21150017 136.89685059]
[-33.96597290 129.33323669]
[-48.67393494 132.27871704]
[-63.38189697 135.22419739]
[-78.08985901 138.16967773]
[-92.73336029 141.42051697]
[-107.30606079 144.97526550]
[-121.87876892 148.53002930]
[-136.45146179 152.08479309]
[-141.38154602 166.70320129]
[-153.44656372 176.31773376]
[-168.79660034 177.86041260]
[-182.53352356 170.83897400]
[-190.27392578 157.49395752]
[-189.54788208 142.08367920]
[-180.58706665 129.52552795]
[-166.25083923 123.82675171]
[-151.11384583 126.80580902]
[-140.00622559 137.51210022]
[-125.43352509 133.95733643]
[-110.86082458 130.40257263]
[-96.28812408 126.84780884]
[-93.05877686 123.24963379]
[-87.51141357 121.68183136]
[-81.03533936 123.46172333]
[-66.32737732 120.51624298]
[-51.61941910 117.57075500]
[-36.91145706 114.62527466]
[-31.98602867 105.58248901]
[-22.68537140 100.67159271]
[-12.00149250 101.74786377]
[-3.52609253 108.69430542]
[11.29166603 106.36319733]
[26.10942459 104.03209686]
[37.47963715 94.41089630]
[52.31457520 99.90954590]
[67.13233185 97.57844543]
[81.95008850 95.24733734]
[98.85396576 78.21090698]
[123.34983826 91.14276886]
[133.33256531 79.94700623]
[143.31529236 68.75123596]
[143.36709595 55.81094742]
[151.96632385 46.68557739]
[164.07905579 45.91815186]
[174.29254150 34.93248749]
[184.50601196 23.94682121]
[174.67868042 12.59469891]
[166.13635254 0.24658497]
[158.97920227 -12.95274544]
[153.29112244 -26.84853554]
[149.13880920 -41.27786636]
[146.57095337 -56.07155991]
[145.61766052 -71.05616760]
[146.29010010 -86.05599976]
[148.58039856 -100.89520264]
[152.46168518 -115.39978027]
[157.88847351 -129.39967346]
[164.79713440 -142.73075867]
[173.10665894 -155.23670959]
[182.71963501 -166.77093506]
[193.52333069 -177.19816589]
[205.39109802 -186.39616394]
[218.18380737 -194.25709534]
[231.75143433 -200.68878174]
[245.93492126 -205.61581421]
[260.56799316 -208.98043823]
[275.47906494 -210.74320984]
[290.49331665 -210.88343811]
[305.43469238 -209.39949036]
[320.12805176 -206.30876160]
[334.40109253 -201.64750671]
[348.08648682 -195.47035217]
[361.02377319 -187.84973145]
[373.06127930 -178.87500000]
[384.05786133 -168.65138245]
[393.88458252 -157.29872131]
[402.42623901 -144.95014954]
[409.58270264 -131.75044250]
[415.27001953 -117.85433960]
[419.42156982 -103.42478943]
[421.98861694 -88.63095856]
[422.94110107 -73.64630127]
[422.26785278 -58.64649963]
[419.97677612 -43.80742645]
[416.09469604 -29.30305481]
[410.66714478 -15.30344772]
[403.75778198 -1.97273970]
[395.44757080 10.53277302]
[385.83398438 22.06646919]
[375.02972412 32.49312210]
[363.16143799 41.69048691]
[350.36834717 49.55072403]
[336.80035400 55.98168182]
[322.61660767 60.90795898]
[307.98333740 64.27179718]
[293.07220459 66.03375244]
[278.05792236 66.17317200]
[263.11663818 64.68842316]
[248.42343140 61.59691238]
[234.15063477 56.93488312]
[220.46557617 50.75699615]
[207.52870178 43.13568115]
[195.49168396 34.16030121]
[185.27819824 45.14596558]
[175.06472778 56.13162994]
[172.10485840 73.40122986]
[154.51104736 78.73396301]
[144.52832031 89.92973328]
[134.54560852 101.12549591]
[146.37434387 91.90156555]
[160.98130798 88.49030304]
[175.67193604 91.52099609]
[187.73628235 100.43457031]
[194.94880676 113.58673859]
[195.97903442 128.55131531]
[190.63690186 142.56779480]
[179.90788269 153.05055237]
[165.77116394 158.06584167]
[150.83453369 156.68849182]
[137.85336304 149.17256165]
[129.22227478 136.90455627]
[126.53333282 122.15056610]
[126.53333282 137.15055847]
[126.53333282 152.15055847]
[126.53333282 167.15055847]
[126.53333282 182.15055847]
[126.53333282 197.15055847]
[126.53333282 212.15055847]
[126.53333282 227.15055847]
[126.53333282 242.15055847]
[126.53333282 257.15057373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 56]
[13 55]
[14 54]
[16 52]
[17 51]
[18 50]
[20 46]
[21 45]
[22 44]
[23 43]
[24 40]
[25 39]
[26 38]
[27 37]
[58 128]
[59 127]
[60 126]
[63 124]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
