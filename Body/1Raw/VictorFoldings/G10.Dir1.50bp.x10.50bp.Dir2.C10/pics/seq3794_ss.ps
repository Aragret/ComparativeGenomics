%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACxxxxxxxxxxACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.12377930 472.97604370]
[89.12377930 457.97604370]
[89.12377930 442.97604370]
[89.12377930 427.97604370]
[89.12377930 412.97604370]
[89.12377930 397.97604370]
[89.12377930 382.97604370]
[89.12377930 367.97604370]
[89.12377930 352.97604370]
[89.12377930 337.97604370]
[74.84012604 335.10272217]
[61.39220428 329.48333740]
[49.30256653 321.33413696]
[39.04137802 310.96963501]
[31.00817490 298.79067993]
[25.51627541 285.26867676]
[22.78057861 270.92761230]
[22.90915108 256.32351685]
[25.89895630 242.02307129]
[31.63589668 228.58154297]
[39.89917755 216.52124023]
[50.36978149 206.31120300]
[62.64281845 198.34899902]
[76.24314117 192.94519043]
[90.64376831 190.31126404]
[90.95175171 175.31442261]
[91.25972748 160.31758118]
[74.86035919 155.52119446]
[60.43680954 146.36116028]
[49.12268066 133.55744934]
[41.80719376 118.11631775]
[39.06529999 101.25136566]
[41.11249161 84.28806305]
[47.78787613 68.55961609]
[58.56680679 55.30218887]
[72.60212708 45.55773163]
[88.79075623 40.09209824]
[87.86734009 25.12054825]
[86.94393158 10.14899921]
[86.02051544 -4.82255125]
[77.44834137 -18.12023354]
[84.38745880 -31.29968071]
[83.46405029 -46.27123260]
[82.54063416 -61.24278259]
[81.61721802 -76.21433258]
[70.53907013 -83.93988800]
[66.01789093 -96.45948029]
[69.50041199 -109.10466766]
[79.49235535 -117.29694366]
[78.87652588 -132.28430176]
[78.26070404 -147.27165222]
[77.64487457 -162.25900269]
[77.02905273 -177.24635315]
[76.41323090 -192.23370361]
[61.46473312 -193.75794983]
[46.88533783 -197.39414978]
[32.97185516 -203.06828308]
[20.00754738 -210.66482544]
[8.25635147 -220.02912903]
[-2.04249263 -230.97055054]
[-10.67931557 -243.26631165]
[-17.47828102 -256.66613770]
[-22.30097008 -270.89715576]
[-25.04920197 -285.66970825]
[-25.66702461 -300.68301392]
[-24.14185905 -315.63140869]
[-20.50475693 -330.21057129]
[-14.82976437 -344.12368774]
[-7.23241711 -357.08752441]
[2.13261294 -368.83816528]
[13.07466507 -379.13632202]
[25.37097359 -387.77236938]
[38.77120209 -394.57052612]
[53.00253677 -399.39233398]
[67.77524567 -402.13964844]
[82.78858185 -402.75653076]
[97.73688507 -401.23043823]
[112.31583405 -397.59243774]
[126.22861481 -391.91659546]
[139.19198608 -384.31845093]
[150.94201660 -374.95269775]
[161.23950195 -364.01000977]
[169.87480164 -351.71316528]
[176.67211914 -338.31250000]
[181.49304199 -324.08087158]
[184.23944092 -309.30798340]
[184.85540771 -294.29461670]
[183.32839966 -279.34640503]
[179.68948364 -264.76766968]
[174.01277161 -250.85525513]
[166.41381836 -237.89236450]
[157.04733276 -226.14289856]
[146.10400391 -215.84608459]
[133.80664062 -207.21154785]
[120.40556335 -200.41506958]
[106.17362976 -195.59501648]
[91.40058136 -192.84953308]
[92.01640320 -177.86218262]
[92.63223267 -162.87483215]
[93.24805450 -147.88748169]
[93.86388397 -132.90011597]
[94.47970581 -117.91276550]
[107.31601715 -107.09000397]
[108.40439606 -89.99769592]
[96.58876801 -77.13774109]
[97.51218414 -62.16619492]
[98.43560028 -47.19464493]
[99.35900879 -32.22309494]
[107.86513519 -19.99627686]
[100.99206543 -5.74596453]
[101.91548157 9.22558498]
[102.83889008 24.19713593]
[103.76230621 39.16868591]
[116.51559448 41.33281326]
[128.52491760 46.13968658]
[139.24928284 53.37277985]
[148.20561218 62.70626450]
[154.99044800 73.71970367]
[159.29815674 85.91696930]
[160.93470764 98.74863434]
[159.82633972 111.63666534]
[156.02302551 124.00050354]
[149.69606018 135.28320312]
[141.13047791 144.97653198]
[130.71209717 152.64381409]
[118.91024780 157.93968201]
[106.25656128 160.62556458]
[105.94858551 175.62240601]
[105.64060974 190.61924744]
[120.70632935 194.10824585]
[134.71873474 200.63720703]
[147.07209778 209.92131042]
[157.23297119 221.55674744]
[164.76315308 235.03816223]
[169.33863831 249.78071594]
[170.76356506 265.14538574]
[168.97854614 280.46673584]
[164.06320190 295.08166504]
[156.23254395 308.35806274]
[145.82765198 319.72235107]
[133.30075073 328.68402100]
[119.19557953 334.85696411]
[104.12377930 337.97604370]
[104.12377930 352.97604370]
[104.12377930 367.97604370]
[104.12377930 382.97604370]
[104.12377930 397.97604370]
[104.12377930 412.97604370]
[104.12377930 427.97604370]
[104.12377930 442.97604370]
[104.12377930 457.97604370]
[104.12377930 472.97604370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 129]
[26 128]
[27 127]
[37 113]
[38 112]
[39 111]
[40 110]
[42 108]
[43 107]
[44 106]
[45 105]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
