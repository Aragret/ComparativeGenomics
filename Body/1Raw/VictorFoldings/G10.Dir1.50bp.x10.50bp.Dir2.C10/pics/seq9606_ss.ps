%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCAACxxxxxxxxxxAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.62719727 264.34536743]
[78.62719727 249.34535217]
[78.62719727 234.34535217]
[78.62719727 219.34535217]
[78.62719727 204.34535217]
[78.62719727 189.34535217]
[78.62719727 174.34535217]
[78.62719727 159.34535217]
[78.62719727 144.34535217]
[78.62719727 129.34535217]
[76.27449799 119.19230652]
[77.41022491 110.06119537]
[81.29372406 102.97773743]
[86.91555786 98.64364624]
[93.11656189 97.37406158]
[83.24085999 86.08378601]
[73.36515045 74.79350281]
[63.48944473 63.50322342]
[58.42884064 61.78697586]
[54.91918182 58.59512329]
[53.26499176 54.78287506]
[53.37956619 51.20040512]
[44.21762848 39.32358170]
[35.05569458 27.44675827]
[25.89375877 15.56993389]
[16.73182297 3.69311047]
[3.23643923 -2.85476017]
[-11.76277065 -2.70076323]
[-26.76198006 -2.54676628]
[-41.76118851 -2.39276934]
[-56.76039886 -2.23877239]
[-71.75328064 -1.77684653]
[-86.73352814 -1.00718641]
[-96.01226044 11.58007431]
[-111.22319031 15.20795631]
[-125.18418884 8.16348457]
[-131.30329895 -6.22715807]
[-126.69124603 -21.16914940]
[-113.52572632 -29.60733604]
[-98.02307892 -27.55746841]
[-87.50318909 -15.98742771]
[-72.52294159 -16.75708771]
[-68.67993927 -19.68634605]
[-62.94119644 -20.19099236]
[-56.91439438 -17.23798180]
[-41.91518784 -17.39197922]
[-26.91597748 -17.54597664]
[-11.91676712 -17.69997215]
[3.08244228 -17.85396957]
[12.24437809 -29.73079300]
[8.58567142 -44.27774811]
[4.92696619 -58.82470322]
[-10.05840683 -57.60467911]
[-25.04019547 -58.86796188]
[-39.60968399 -62.58008194]
[-53.36940765 -68.63977814]
[-65.94399261 -76.88172150]
[-76.99038696 -87.08108521]
[-86.20725250 -98.95960999]
[-93.34313202 -112.19324493]
[-98.20335388 -126.42096710]
[-100.65534210 -141.25462341]
[-100.63218689 -156.28956604]
[-98.13452911 -171.11561584]
[-93.23050690 -185.32829285]
[-86.05390167 -198.53988647]
[-76.80050659 -210.38996887]
[-65.72274780 -220.55526733]
[-53.12283707 -228.75843811]
[-39.34451675 -234.77572632]
[-24.76366234 -238.44296265]
[-9.77805424 -239.66009521]
[5.20349026 -238.39392090]
[19.77226448 -234.67900085]
[33.53081894 -228.61665344]
[46.10381699 -220.37228394]
[57.14825058 -210.17079163]
[66.36282349 -198.29049683]
[73.49614716 -185.05548096]
[78.35363770 -170.82682800]
[80.80275726 -155.99269104]
[80.77671051 -140.95776367]
[78.27619934 -126.13219452]
[73.36943817 -111.92045593]
[66.19029236 -98.71024323]
[56.93460464 -86.86194611]
[45.85488892 -76.69879150]
[33.25339890 -68.49803925]
[19.47392082 -62.48340607]
[23.13262558 -47.93645477]
[26.79133224 -33.38949966]
[31.16054535 -26.63292885]
[32.86302567 -19.09524345]
[31.90138054 -11.74881172]
[28.60864639 -5.46882486]
[37.77058411 6.40799856]
[46.93251801 18.28482246]
[56.09445190 30.16164589]
[65.25638580 42.03847122]
[74.77972412 53.62751770]
[84.65543365 64.91780090]
[94.53113556 76.20807648]
[104.40684509 87.49835968]
[117.69418335 94.45871735]
[132.59863281 96.14910889]
[147.50308228 97.83950806]
[162.40753174 99.52990723]
[175.85679626 88.38970184]
[192.87075806 90.35366058]
[203.02062988 103.72838593]
[217.95663452 105.11241150]
[232.89265442 106.49643707]
[247.82865906 107.88046265]
[258.81469727 96.75206757]
[274.38842773 95.34039307]
[287.19641113 104.31197357]
[291.19113159 119.43071747]
[284.48638916 133.55799866]
[270.24795532 140.02337646]
[255.19877625 135.77406311]
[246.44464111 122.81647491]
[231.50862122 121.43244934]
[216.57261658 120.04842377]
[201.63659668 118.66439819]
[192.94241333 128.22282410]
[180.13519287 131.05192566]
[167.86408997 125.89431763]
[160.71713257 114.43435669]
[145.81268311 112.74395752]
[130.90823364 111.05355835]
[116.00379181 109.36315918]
[110.40963745 114.35871124]
[122.67910004 122.98774719]
[134.94856262 131.61679077]
[148.33285522 138.38885498]
[153.11825562 152.60504150]
[146.55358887 166.09226990]
[132.41296387 171.09655762]
[118.82601166 164.74085999]
[113.60411072 150.67729187]
[106.41272736 137.51354980]
[99.22134399 124.34980774]
[93.62719727 129.34535217]
[93.62719727 144.34535217]
[93.62719727 159.34535217]
[93.62719727 174.34535217]
[93.62719727 189.34535217]
[93.62719727 204.34535217]
[93.62719727 219.34535217]
[93.62719727 234.34535217]
[93.62719727 249.34535217]
[93.62719727 264.34536743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[15 103]
[16 102]
[17 101]
[18 100]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 42]
[33 41]
[50 91]
[51 90]
[52 89]
[104 131]
[105 130]
[106 129]
[107 128]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
