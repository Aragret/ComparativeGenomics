%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUxxxxxxxxxxUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.95370483 128.22868347]
[169.39181519 121.81971741]
[155.82991028 115.41073608]
[142.26802063 109.00176239]
[127.55249786 106.09429169]
[112.57225800 106.86395264]
[100.73497009 114.30507660]
[88.19740295 108.11628723]
[73.21716309 108.88594818]
[58.23692322 109.65560913]
[43.25668335 110.42527008]
[40.94998550 122.61244965]
[36.11940765 134.02870178]
[28.98661232 144.15817261]
[19.87721825 152.54385376]
[9.20594025 158.80819702]
[-2.54230261 162.67018127]
[-14.83441162 163.95780945]
[-27.11330605 162.61589050]
[-38.82316208 158.70829773]
[-49.43458557 152.41496277]
[-58.46852875 144.02362061]
[-65.51793671 133.91664124]
[-70.26605988 122.55358887]
[-72.50072479 110.45034027]
[-87.48096466 109.68067932]
[-102.46120453 108.91101837]
[-117.44144440 108.14135742]
[-132.42169189 107.37169647]
[-147.40193176 106.60203552]
[-162.38217163 105.83237457]
[-168.26780701 119.80145264]
[-178.57847595 130.91296387]
[-192.06912231 137.82516479]
[-207.11067200 139.70335388]
[-221.88679504 136.32072449]
[-234.61318970 128.08576965]
[-243.75309753 115.99288177]
[-248.20281982 101.50233459]
[-247.42503357 86.36394501]
[-241.51365662 72.40573883]
[-231.18252563 61.31324387]
[-217.67916870 54.42592239]
[-202.63418579 52.57546234]
[-187.86431885 55.98530960]
[-175.15312195 64.24370575]
[-166.03552246 76.35341644]
[-161.61251831 90.85213470]
[-146.63226318 91.62179565]
[-131.65202332 92.39145660]
[-116.67179108 93.16111755]
[-101.69154358 93.93077850]
[-86.71130371 94.70043945]
[-71.73106384 95.47010040]
[-65.91657257 78.65242767]
[-55.25501251 64.38487244]
[-40.74739456 54.02383041]
[-23.76096344 48.55812454]
[-5.90033150 48.51464462]
[11.14408588 53.90757751]
[25.75606346 64.23609924]
[36.54682159 78.53087616]
[42.48702240 95.44503021]
[57.46726227 94.67536926]
[72.44750214 93.90570831]
[87.42774200 93.13604736]
[99.26502991 85.69492340]
[111.80259705 91.88371277]
[126.78283691 91.11405182]
[113.55203247 84.04680634]
[102.35207367 74.06879425]
[93.80998993 61.73863220]
[88.40402985 47.74664688]
[86.43685150 32.87620163]
[88.01859283 17.95982933]
[93.06068420 3.83264828]
[101.28086090 -8.71441555]
[112.21887970 -18.97889709]
[125.26238251 -26.38612747]
[139.68110657 -30.52140427]
[154.66778564 -31.15320587]
[169.38340759 -28.24616432]
[183.00405884 -21.96302986]
[194.76718140 -12.65557289]
[204.01422119 -0.84488410]
[210.22744751 12.80779934]
[213.05902100 27.53811646]
[212.35040283 42.52136993]
[208.14126587 56.91870117]
[200.66726685 69.92405701]
[190.34684753 80.80932617]
[177.75781250 88.96506500]
[163.60496521 93.93468475]
[148.67698669 95.43986511]
[162.23889160 101.84883881]
[175.80078125 108.25782013]
[189.36268616 114.66679382]
[197.20750427 101.86421967]
[206.39056396 89.98488617]
[216.80419922 79.16806793]
[228.32630920 69.54059601]
[240.82180786 61.21534348]
[254.14418030 54.28991699]
[268.13723755 48.84551620]
[282.63693237 44.94597244]
[297.47323608 42.63701248]
[312.47219849 41.94569778]
[327.45800781 42.88013840]
[342.25491333 45.42937851]
[356.68945312 49.56352997]
[370.59240723 55.23411942]
[383.80072021 62.37466812]
[396.15957642 70.90145111]
[407.52404785 80.71449280]
[417.76092529 91.69875336]
[426.75015259 103.72543335]
[434.38632202 116.65353394]
[440.57995605 130.33148193]
[445.25842285 144.59890747]
[448.36682129 159.28852844]
[449.86877441 174.22811890]
[449.74661255 189.24252319]
[448.00183105 204.15570068]
[444.65481567 218.79280090]
[439.74487305 232.98222351]
[433.32952881 246.55758667]
[425.48400879 259.35974121]
[416.30032349 271.23858643]
[405.88610840 282.05484009]
[394.36346436 291.68170166]
[381.86752319 300.00628662]
[368.54476929 306.93096924]
[354.55142212 312.37463379]
[340.05154419 316.27337646]
[325.21508789 318.58154297]
[310.21609497 319.27206421]
[295.23034668 318.33682251]
[280.43356323 315.78677368]
[265.99923706 311.65185547]
[252.09661865 305.98049927]
[238.88867188 298.83926392]
[226.53027344 290.31179810]
[215.16633606 280.49813843]
[204.93005371 269.51333618]
[195.94148254 257.48617554]
[188.30598450 244.55766296]
[182.11309814 230.87939453]
[177.43540955 216.61170959]
[174.32778931 201.92192078]
[172.82664490 186.98225403]
[172.94960022 171.96784973]
[174.69520569 157.05476379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 97]
[2 96]
[3 95]
[4 94]
[5 69]
[6 68]
[8 66]
[9 65]
[10 64]
[11 63]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
