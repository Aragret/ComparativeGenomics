%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGxxxxxxxxxxACAAGACGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 294.24362183]
[92.50000000 279.24362183]
[92.50000000 264.24362183]
[92.50000000 249.24360657]
[92.50000000 234.24360657]
[92.50000000 219.24360657]
[92.50000000 204.24360657]
[92.50000000 189.24360657]
[92.50000000 174.24360657]
[92.50000000 159.24360657]
[75.84262848 154.61206055]
[61.21021271 145.40272522]
[49.82929611 132.38758850]
[36.30510330 138.87574768]
[26.30446815 154.30192566]
[8.89113426 152.35881042]
[-4.49515057 159.12692261]
[-17.88143539 165.89503479]
[-26.70584297 179.02670288]
[-41.55503082 177.86442566]
[-54.94131470 184.63253784]
[-68.32759857 191.40065002]
[-70.66979218 206.73994446]
[-81.60478210 217.74928284]
[-96.92784119 220.19537354]
[-110.74695587 213.13761902]
[-117.74837494 199.28988647]
[-115.23992157 183.97689819]
[-104.18614960 173.08683777]
[-88.83744812 170.80712891]
[-75.09571838 178.01437378]
[-61.70943069 171.24626160]
[-48.32314682 164.47814941]
[-40.45621490 151.83058167]
[-24.64954948 152.50875854]
[-11.26326561 145.74064636]
[2.12301946 138.97253418]
[6.21793175 127.54715729]
[17.36935806 121.81439209]
[29.81694031 125.35155487]
[43.34112930 118.86339569]
[40.31111145 101.81432343]
[42.30003357 84.61269379]
[49.14065933 68.70491028]
[60.25779724 55.42856979]
[74.71665955 45.90002060]
[91.30146790 40.92047119]
[108.61769104 40.90862656]
[125.20929718 45.86547852]
[133.19921875 33.17054749]
[141.18913269 20.47562027]
[141.18830872 15.98546505]
[142.51834106 12.13812447]
[144.80213928 9.28047562]
[147.58743286 7.59640026]
[150.40832520 7.09643316]
[159.42584229 -4.89039946]
[168.44337463 -16.87723160]
[177.46090698 -28.86406517]
[186.47843933 -40.85089874]
[190.78602600 -55.21908188]
[189.85040283 -70.18987274]
[188.91476440 -85.16066742]
[174.14987183 -88.30714417]
[160.78193665 -95.32147980]
[149.80296326 -105.68317413]
[142.02764893 -118.62331390]
[138.03298950 -133.18165588]
[138.11541748 -148.27786255]
[142.26879883 -162.79171753]
[150.18493652 -175.64619446]
[161.27639771 -185.88739014]
[174.72012329 -192.75534058]
[189.51850891 -195.74040222]
[204.57339478 -194.62107849]
[218.76762390 -189.48040771]
[231.04788208 -180.69987488]
[240.50289917 -168.93106079]
[246.43106079 -155.04725647]
[248.39242554 -140.07878113]
[246.24147034 -125.13635254]
[240.13781738 -111.32882690]
[230.53437805 -99.68079376]
[218.14381409 -91.05662537]
[203.88555908 -86.09629059]
[204.82118225 -71.12550354]
[205.75682068 -56.15470886]
[219.07197571 -49.24771118]
[231.84933472 -57.10513687]
[244.62667847 -64.96256256]
[250.34393311 -72.17124176]
[257.75259399 -72.84734344]
[270.69067383 -80.43725586]
[283.62872314 -88.02716064]
[296.56677246 -95.61707306]
[296.38003540 -110.97483063]
[303.91116333 -124.36054993]
[317.13433838 -132.17353821]
[332.49261475 -132.31214905]
[345.85467529 -124.73908997]
[353.62615967 -111.49147797]
[353.71664429 -96.13285065]
[346.10174561 -82.79460144]
[332.82983398 -75.06465912]
[317.47097778 -75.02233887]
[304.15667725 -82.67901611]
[291.21862793 -75.08910370]
[278.28057861 -67.49919891]
[265.34249878 -59.90929031]
[252.48411560 -52.18520355]
[239.70675659 -44.32777786]
[226.92939758 -36.47035217]
[239.12136841 -27.73216629]
[245.30470276 -14.06592178]
[243.81983948 0.86040336]
[235.06529236 13.04063034]
[221.39076233 19.20562363]
[206.46644592 17.70072174]
[194.29798889 8.92983246]
[188.15135193 -4.75296402]
[189.67628479 -19.67524910]
[198.46527100 -31.83336639]
[189.44773865 -19.84653473]
[180.43020630 -7.85970211]
[171.41268921 4.12713051]
[162.39515686 16.11396408]
[153.88406372 28.46553612]
[145.89414978 41.16046524]
[137.90423584 53.85539627]
[146.08918762 62.02840042]
[152.54496765 71.62602997]
[157.02935791 82.28819275]
[159.37411499 93.61486816]
[159.49127197 105.18110657]
[157.37643433 116.55295563]
[153.10893250 127.30377197]
[146.84890747 137.03019714]
[138.83117676 145.36732483]
[129.35659790 152.00236511]
[118.78060150 156.68637085]
[107.50000000 159.24360657]
[107.50000000 174.24360657]
[107.50000000 189.24360657]
[107.50000000 204.24360657]
[107.50000000 219.24360657]
[107.50000000 234.24360657]
[107.50000000 249.24360657]
[107.50000000 264.24362183]
[107.50000000 279.24362183]
[107.50000000 294.24362183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 41]
[14 40]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[22 31]
[49 129]
[50 128]
[51 127]
[56 126]
[57 125]
[58 124]
[59 123]
[60 122]
[61 87]
[62 86]
[63 85]
[88 112]
[89 111]
[90 110]
[92 109]
[93 108]
[94 107]
[95 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
