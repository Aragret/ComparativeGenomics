%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUxxxxxxxxxxCUUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.04084778 240.53199768]
[113.73684692 225.53507996]
[113.43283844 210.53816223]
[113.12883759 195.54124451]
[112.82482910 180.54432678]
[112.52082825 165.54740906]
[112.21681976 150.55049133]
[111.91281891 135.55357361]
[111.60881042 120.55664825]
[97.34296417 115.92139435]
[88.28205109 127.87546539]
[79.22113800 139.82954407]
[82.87210083 155.03495789]
[75.84882355 169.00662231]
[61.46748352 175.14755249]
[46.51851273 170.55819702]
[38.06035233 157.40548706]
[40.08669662 141.89974976]
[51.64075851 131.36231995]
[67.26706696 130.76863098]
[76.32798004 118.81455994]
[85.38889313 106.86048126]
[76.94507599 94.46282196]
[62.50310135 98.51614380]
[48.06112289 102.56945801]
[45.89855957 117.64404297]
[37.78607941 130.53231812]
[25.12921333 139.00129700]
[10.12084484 141.58369446]
[-4.63873816 137.83207703]
[-16.59234619 128.39643860]
[-23.66894722 114.91157532]
[-24.64247513 99.71380615]
[-19.34426308 85.43624878]
[-8.69225407 74.55255890]
[5.46802378 68.94841766]
[20.68321800 69.59476471]
[34.31720352 76.37963104]
[44.00780869 88.12747955]
[58.44978333 84.07416534]
[72.89176178 80.02085114]
[84.07277679 70.02160645]
[89.70752716 56.12018204]
[95.34228516 42.21876144]
[100.97704315 28.31733894]
[106.18662262 14.25105762]
[110.96620941 0.03291571]
[115.74579620 -14.18522549]
[120.52538300 -28.40336800]
[125.30496979 -42.62150955]
[130.08454895 -56.83964920]
[134.42973328 -71.19651031]
[138.33648682 -85.67881775]
[134.46047974 -101.01789093]
[145.24555969 -111.29073334]
[149.15231323 -125.77304077]
[145.27630615 -141.11210632]
[156.06138611 -151.38494873]
[152.18537903 -166.72402954]
[162.97045898 -176.99685669]
[166.87721252 -191.47917175]
[170.78396606 -205.96148682]
[174.69071960 -220.44378662]
[160.90583801 -226.42665100]
[148.13900757 -234.35293579]
[136.66236877 -244.05368042]
[126.72053528 -255.32212830]
[118.52542877 -267.91809082]
[112.25172424 -281.57305908]
[108.03314972 -295.99603271]
[105.95961761 -310.87951660]
[106.07533264 -325.90631104]
[108.37781525 -340.75610352]
[112.81800842 -355.11236572]
[119.30125427 -368.66912842]
[127.68936157 -381.13735962]
[137.80354309 -392.25137329]
[149.42822266 -401.77423096]
[162.31559753 -409.50299072]
[176.19097900 -415.27285767]
[190.75863647 -418.96087646]
[205.70802307 -420.48843384]
[220.72052002 -419.82296753]
[235.47613525 -416.97866821]
[249.66032410 -412.01614380]
[262.97076416 -405.04119873]
[275.12374878 -396.20251465]
[285.86026001 -385.68844604]
[294.95138550 -373.72311401]
[302.20339966 -360.56155396]
[307.46170044 -346.48434448]
[310.61422729 -331.79150391]
[311.59375000 -316.79623413]
[310.37945557 -301.81814575]
[306.99713135 -287.17648315]
[301.51895142 -273.18338013]
[294.06164551 -260.13705444]
[284.78421021 -248.31559753]
[273.88430786 -237.97100830]
[261.59436035 -229.32376099]
[248.17628479 -222.55819702]
[233.91609192 -217.81849670]
[219.11773682 -215.20568848]
[204.09666443 -214.77548218]
[189.17303467 -216.53703308]
[185.26628113 -202.05473328]
[181.35952759 -187.57241821]
[177.45277405 -173.09010315]
[181.60821533 -158.78691101]
[170.54370117 -147.47819519]
[174.69914246 -133.17500305]
[163.63462830 -121.86628723]
[159.72787476 -107.38397980]
[163.88331604 -93.08078003]
[152.81878662 -81.77206421]
[148.91204834 -67.28975677]
[150.38941956 -64.02711487]
[150.32402039 -59.87571335]
[148.31080627 -55.58536148]
[144.30268860 -52.06006241]
[139.52310181 -37.84192276]
[134.74351501 -23.62378120]
[129.96392822 -9.40563869]
[125.18434906 4.81250286]
[120.40476227 19.03064346]
[121.68113708 22.37703705]
[121.36359406 26.51679230]
[119.09339142 30.67687416]
[114.87846375 33.95209503]
[109.24370575 47.85351562]
[103.60894775 61.75494003]
[97.97419739 75.65635681]
[109.58385468 66.15815735]
[121.54610443 57.10803986]
[135.98678589 53.05011368]
[150.91213989 54.54463959]
[164.26152039 61.38527298]
[174.19181824 72.62756348]
[179.33201599 86.71934509]
[178.97244263 101.71503448]
[173.16273499 115.54425049]
[162.70500183 126.29766846]
[149.04310608 132.49061584]
[134.06242371 133.26792908]
[126.60573578 120.25264740]
[126.90973663 135.24957275]
[127.21374512 150.24649048]
[127.51774597 165.24340820]
[127.82174683 180.24032593]
[128.12574768 195.23724365]
[128.42976379 210.23416138]
[128.73376465 225.23107910]
[129.03776550 240.22799683]
[131.61845398 259.43710327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 22]
[11 21]
[12 20]
[23 41]
[24 40]
[25 39]
[42 132]
[43 131]
[44 130]
[45 129]
[46 125]
[47 124]
[48 123]
[49 122]
[50 121]
[51 120]
[52 116]
[53 115]
[55 113]
[56 112]
[58 110]
[60 108]
[61 107]
[62 106]
[63 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
