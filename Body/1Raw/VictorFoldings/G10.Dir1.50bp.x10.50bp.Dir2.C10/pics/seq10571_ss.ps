%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCxxxxxxxxxxUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.31291199 415.88610840]
[132.31291199 400.88610840]
[132.31291199 385.88610840]
[132.31291199 370.88610840]
[132.31291199 355.88610840]
[132.31291199 340.88610840]
[132.31291199 325.88610840]
[132.31291199 310.88610840]
[132.31291199 295.88610840]
[132.31291199 280.88610840]
[115.08220673 275.34698486]
[100.71385193 264.30383301]
[90.90317535 249.04031372]
[86.81427765 231.33921814]
[88.94186401 213.27415466]
[97.05150604 196.96672058]
[110.20531464 184.33724976]
[126.87040710 176.87876892]
[125.31282806 161.95985413]
[123.13599396 147.11865234]
[120.34366608 132.38084412]
[117.55134583 117.64303589]
[110.55171967 125.52962494]
[100.03239441 130.36227417]
[87.42189789 130.61732483]
[74.77887726 125.46132660]
[60.07091141 128.40679932]
[45.36294937 131.35229492]
[30.65498924 134.29777527]
[15.94702721 137.24325562]
[5.89055490 149.74313354]
[-10.15108395 149.53012085]
[-19.87211609 136.76763916]
[-15.81539917 121.24595642]
[-1.09289706 114.87198639]
[13.00154495 122.53529358]
[27.70950699 119.58980560]
[42.41746902 116.64432526]
[57.12543106 113.69884491]
[71.83338928 110.75336456]
[72.99893951 103.34448242]
[76.49559784 81.11784363]
[63.40244293 73.79873657]
[50.30929184 66.47963715]
[37.21613693 59.16053009]
[23.65180016 66.50983429]
[8.26913929 65.33625031]
[-4.02329397 56.01425171]
[-9.30302906 41.51845932]
[-5.88532257 26.47443008]
[5.13924837 15.68265724]
[20.25278282 12.58675480]
[34.63260651 18.17461586]
[43.69017410 30.66317368]
[44.53524017 46.06737518]
[57.62839508 53.38647842]
[70.72154999 60.70558548]
[83.81470490 68.02468872]
[98.46108246 66.93549347]
[111.13673401 71.75390625]
[119.77082062 80.70711517]
[123.36814117 91.44100189]
[132.13433838 79.26916504]
[140.90055847 67.09732819]
[149.66676331 54.92549133]
[158.43296814 42.75365448]
[167.19917297 30.58181763]
[175.96537781 18.40998077]
[184.73158264 6.23814440]
[173.53741455 -6.11965466]
[165.31307983 -20.61710167]
[160.45268250 -36.55395508]
[159.18791199 -53.16112900]
[161.57701111 -69.63781738]
[167.50212097 -85.19010162]
[176.67501831 -99.06921387]
[188.65121460 -110.60757446]
[202.85147095 -119.25091553]
[218.58981323 -124.58489227]
[235.10661316 -126.35494995]
[251.60536194 -124.47849274]
[267.29098511 -119.04868317]
[275.01507568 -131.90708923]
[282.73916626 -144.76548767]
[290.46325684 -157.62388611]
[298.18731689 -170.48229980]
[297.93048096 -186.87942505]
[312.13940430 -195.06710815]
[326.19720459 -186.62254333]
[325.64239502 -170.23278809]
[311.04571533 -162.75820923]
[303.32165527 -149.89981079]
[295.59756470 -137.04139709]
[287.87347412 -124.18299866]
[280.14938354 -111.32460022]
[290.18542480 -102.38424683]
[298.48196411 -91.80484772]
[304.77563477 -79.91998291]
[308.86630249 -67.10470581]
[310.62335205 -53.76370239]
[309.98983765 -40.31853485]
[306.98446655 -27.19428062]
[301.70083618 -14.80612469]
[294.30474854 -3.54621577]
[285.02886963 6.22874928]
[274.16537476 14.20882320]
[262.05691528 20.14063644]
[249.08560181 23.83543968]
[235.66114807 25.17511177]
[222.20774841 24.11593819]
[209.15080261 20.69002914]
[196.90342712 15.00435162]
[188.13722229 27.17618752]
[179.37101746 39.34802628]
[170.60479736 51.51986313]
[161.83859253 63.69169998]
[153.07238770 75.86353302]
[144.30618286 88.03536987]
[135.53997803 100.20720673]
[132.28915405 114.85070801]
[135.08146667 129.58851624]
[137.87379456 144.32632446]
[140.93174744 147.61424255]
[142.57730103 151.33758545]
[142.85046387 154.98548889]
[141.95726013 158.11537170]
[140.23173523 160.40226746]
[141.78932190 175.32118225]
[153.76628113 177.18441772]
[165.00421143 181.70143127]
[174.92378235 188.63484192]
[183.01463318 197.62283325]
[188.86164856 208.19799805]
[192.16625977 219.81166077]
[192.76167297 231.86236572]
[190.62129211 243.72698975]
[185.85987854 254.79296875]
[178.72740173 264.48995972]
[169.59591675 272.31918335]
[158.94017029 277.87911987]
[147.31291199 280.88610840]
[147.31291199 295.88610840]
[147.31291199 310.88610840]
[147.31291199 325.88610840]
[147.31291199 340.88610840]
[147.31291199 355.88610840]
[147.31291199 370.88610840]
[147.31291199 385.88610840]
[147.31291199 400.88610840]
[147.31291199 415.88610840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 128]
[19 127]
[20 122]
[21 121]
[22 120]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[42 58]
[43 57]
[44 56]
[45 55]
[62 119]
[63 118]
[64 117]
[65 116]
[66 115]
[67 114]
[68 113]
[69 112]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
