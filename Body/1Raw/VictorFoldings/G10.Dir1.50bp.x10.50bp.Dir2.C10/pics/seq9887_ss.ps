%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCxxxxxxxxxxCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[3.43915701 316.19635010]
[-3.10871363 329.69171143]
[-9.65658379 343.18710327]
[-16.20445442 356.68249512]
[-22.75232506 370.17788696]
[-29.30019569 383.67324829]
[-35.84806824 397.16864014]
[-42.39593506 410.66403198]
[-48.94380569 424.15942383]
[-50.41813660 441.04913330]
[-67.05593109 444.30795288]
[-74.79321289 429.22250366]
[-62.43918991 417.61154175]
[-55.89131927 404.11614990]
[-49.34344864 390.62078857]
[-42.79557800 377.12539673]
[-36.24771118 363.63000488]
[-29.69983864 350.13461304]
[-23.15196800 336.63925171]
[-16.60409737 323.14385986]
[-10.05622673 309.64846802]
[-21.50567627 303.22702026]
[-32.58165741 296.18093872]
[-43.25012589 288.53182983]
[-53.47829056 280.30328369]
[-63.23471451 271.52050781]
[-72.48941040 262.21054077]
[-81.21392822 252.40199280]
[-89.38145447 242.12501526]
[-96.96688080 231.41119385]
[-103.94690704 220.29345703]
[-110.30005646 208.80596924]
[-116.00682068 196.98405457]
[-121.04965210 184.86404419]
[-125.41304779 172.48318481]
[-129.08360291 159.87954712]
[-132.05001831 147.09185791]
[-134.30319214 134.15940857]
[-135.83621216 121.12197876]
[-136.64433289 108.01962280]
[-136.72509766 94.89261627]
[-136.07823181 81.78131104]
[-134.70574951 68.72600555]
[-132.61186218 55.76681900]
[-129.80300903 42.94359589]
[-126.28780365 30.29574203]
[-122.07707214 17.86213684]
[-117.18374634 5.68099785]
[-111.62287140 -6.21023703]
[-105.41153717 -17.77501678]
[-98.56884003 -28.97779465]
[-91.11579895 -39.78413773]
[-83.07534027 -50.16083145]
[-74.47216034 -60.07597733]
[-65.33271790 -69.49910736]
[-55.68509293 -78.40125275]
[-45.55894852 -86.75504303]
[-34.98539734 -94.53482056]
[-43.14206314 -107.12326050]
[-51.29872894 -119.71170044]
[-66.14101410 -126.68583679]
[-67.25257874 -143.04727173]
[-53.48993301 -151.96475220]
[-39.01091385 -144.26475525]
[-38.71029282 -127.86836243]
[-30.55362511 -115.27992249]
[-22.39695930 -102.69149017]
[-8.53947544 -110.43772888]
[5.80593777 -117.23796082]
[20.57479095 -123.06163025]
[35.70069504 -127.88254547]
[51.11564636 -131.67903137]
[66.75035095 -134.43403625]
[82.53453064 -136.13516235]
[98.39722443 -136.77474976]
[114.26712036 -136.34996033]
[130.07289124 -134.86267090]
[145.74345398 -132.31958008]
[161.20838928 -128.73213196]
[176.39817810 -124.11643219]
[191.24450684 -118.49323273]
[205.68066406 -111.88782501]
[219.64175415 -104.32989502]
[233.06500244 -95.85341644]
[245.89006042 -86.49649811]
[258.05929565 -76.30120850]
[269.51797485 -65.31336975]
[280.21459961 -53.58238220]
[290.10110474 -41.16098022]
[299.13302612 -28.10500145]
[307.26977539 -14.47313881]
[314.47473145 -0.32667440]
[320.71554565 14.27079964]
[334.86288452 9.28547764]
[349.01019287 4.30015516]
[363.15750122 -0.68516672]
[377.30484009 -5.67048883]
[376.91387939 -20.79339600]
[381.21722412 -35.29637146]
[389.79330444 -47.75856018]
[401.80191040 -56.95904541]
[416.06652832 -61.99645233]
[431.18969727 -62.37727356]
[445.68978882 -58.06419754]
[458.14620972 -49.47977829]
[467.33865356 -37.46502304]
[472.36651611 -23.19701958]
[472.73718262 -8.07360172]
[468.41439819 6.42359352]
[459.82162476 18.87427711]
[447.80072021 28.05866051]
[433.52935791 33.07695007]
[418.40570068 33.43750381]
[403.91140747 29.10499763]
[391.46646118 20.50389099]
[382.29016113 8.47682762]
[368.14282227 13.46214962]
[353.99551392 18.44747162]
[339.84820557 23.43279457]
[325.70089722 28.41811562]
[330.01992798 43.82444382]
[333.28860474 59.48728561]
[335.49203491 75.33512115]
[336.62014771 91.29558563]
[336.66775513 107.29579926]
[335.63467407 123.26269531]
[333.52563477 139.12336731]
[330.35021973 154.80538940]
[326.12295532 170.23715210]
[320.86315918 185.34819031]
[314.59484863 200.06950378]
[307.34661865 214.33387756]
[299.15158081 228.07615662]
[290.04714966 241.23361206]
[280.07492065 253.74613953]
[269.28042603 265.55661011]
[257.71292114 276.61111450]
[245.42526245 286.85916138]
[232.47354126 296.25396729]
[218.91691589 304.75259399]
[204.81726074 312.31625366]
[190.23899841 318.91043091]
[175.24867249 324.50500488]
[159.91473389 329.07440186]
[144.30722046 332.59777832]
[128.49737549 335.05905151]
[112.55739594 336.44696045]
[96.56008911 336.75518799]
[80.57848358 335.98233032]
[64.68556213 334.13189697]
[48.95389938 331.21234131]
[33.45532608 327.23703003]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[58 67]
[59 66]
[60 65]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
