%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGxxxxxxxxxxGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.88430786 279.08880615]
[90.57632446 264.09197998]
[90.26834869 249.09512329]
[89.96037292 234.09829712]
[89.65239716 219.10145569]
[89.34441376 204.10461426]
[89.03643799 189.10777283]
[88.72846222 174.11093140]
[88.42048645 159.11410522]
[74.17378998 154.42030334]
[65.01185608 166.29711914]
[55.84992218 178.17395020]
[59.37183762 193.40975952]
[52.23035431 207.32138062]
[37.79747009 213.34017944]
[22.88794327 208.62423706]
[14.54160118 195.40029907]
[16.69932938 179.91229248]
[28.34231567 169.47319031]
[43.97309875 169.01200867]
[53.13503265 157.13519287]
[62.29696655 145.25836182]
[49.73126221 129.56124878]
[43.27848053 110.73091125]
[43.56970215 91.02961731]
[50.43426895 72.77610779]
[62.93587112 58.07265472]
[79.49786377 48.56307220]
[98.10118103 45.24941635]
[99.63847351 30.32840157]
[101.17576599 15.40738487]
[94.89353180 0.88691223]
[103.89446259 -10.98037720]
[105.43175507 -25.90139389]
[106.96904755 -40.82241058]
[108.50634003 -55.74342728]
[102.22410583 -70.26390076]
[111.22503662 -82.13118744]
[112.76232910 -97.05220795]
[114.29962158 -111.97322083]
[115.83691406 -126.89424133]
[108.30295563 -137.41294861]
[109.92908478 -149.84384155]
[119.29586029 -157.55912781]
[121.13918304 -172.44543457]
[120.06211853 -187.40672302]
[116.10550690 -201.87548828]
[112.14889526 -216.34425354]
[105.75210571 -202.77661133]
[93.11371613 -194.69755554]
[78.11412048 -194.58763123]
[65.35867310 -202.48057556]
[58.76372147 -215.95301819]
[60.35412216 -230.86846924]
[69.64157104 -242.64739990]
[83.77451324 -247.67330933]
[98.41369629 -244.40307617]
[109.06350708 -233.84236145]
[107.83289337 -248.79180908]
[106.44886780 -263.72781372]
[104.91157532 -278.64883423]
[103.37428284 -293.56985474]
[101.83699036 -308.49087524]
[100.29969788 -323.41186523]
[98.76240540 -338.33288574]
[97.22511292 -353.25390625]
[82.57717133 -357.22909546]
[70.35669708 -366.23046875]
[62.21640778 -379.04061890]
[59.25721359 -393.92712402]
[61.87932205 -408.87664795]
[69.72811127 -421.86746216]
[81.74210358 -431.14260864]
[96.29649353 -435.44775391]
[111.42292786 -434.20059204]
[125.07568359 -427.56985474]
[135.40832520 -416.45227051]
[141.02346802 -402.35137939]
[141.16168213 -387.17425537]
[135.80430603 -372.97344971]
[125.67584991 -361.66949463]
[112.14613342 -354.79119873]
[113.68342590 -339.87017822]
[115.22071838 -324.94915771]
[116.75801086 -310.02816772]
[118.29530334 -295.10714722]
[119.83259583 -280.18612671]
[121.36988831 -265.26510620]
[125.20755005 -258.89450073]
[122.78232574 -250.02241516]
[124.01293945 -235.07298279]
[126.61766052 -220.30085754]
[130.57427979 -205.83209229]
[134.53088379 -191.36332703]
[138.66848755 -205.78138733]
[146.80299377 -218.38415527]
[158.23771667 -228.09223938]
[171.99331665 -234.07418823]
[186.89164734 -235.81765747]
[201.65672302 -233.17330933]
[215.02395630 -226.36766052]
[225.84849548 -215.98355103]
[233.20323181 -202.91038513]
[236.45826721 -188.26782227]
[235.33480835 -173.30995178]
[229.92909241 -159.31787109]
[220.70408630 -147.48997498]
[208.44989014 -138.83926392]
[194.21604919 -134.10665894]
[179.22163391 -133.69749451]
[164.75086975 -137.64680481]
[152.04313660 -145.61634827]
[142.18682861 -156.92356873]
[136.02549744 -170.60211182]
[134.18217468 -155.71580505]
[141.89794922 -139.98330688]
[130.75791931 -125.35694885]
[129.22064209 -110.43592834]
[127.68334198 -95.51491547]
[126.14604950 -80.59389496]
[132.53823853 -67.14067078]
[123.42735291 -54.20613480]
[121.89006042 -39.28511810]
[120.35276794 -24.36410141]
[118.81547546 -9.44308472]
[125.20766449 4.01013708]
[116.09677887 16.94467735]
[114.55948639 31.86569405]
[113.02219391 46.78670883]
[123.61475372 50.24138260]
[133.34376526 55.79266739]
[141.79676819 63.23293686]
[148.60986328 72.27396393]
[153.48335266 82.55804443]
[156.19483948 93.67213440]
[156.60932922 105.16439819]
[154.68569946 116.56263733]
[150.47938538 127.39362335]
[144.14108276 137.20278931]
[135.91151428 145.57328796]
[126.11224365 152.14369202]
[115.13323975 156.62353516]
[103.41732025 158.80612183]
[103.72529602 173.80296326]
[104.03327942 188.79980469]
[104.34125519 203.79663086]
[104.64923096 218.79347229]
[104.95720673 233.79031372]
[105.26519012 248.78715515]
[105.57316589 263.78399658]
[105.88114166 278.78082275]
[108.46691895 297.98925781]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 22]
[11 21]
[12 20]
[29 129]
[30 128]
[31 127]
[33 125]
[34 124]
[35 123]
[36 122]
[38 120]
[39 119]
[40 118]
[41 117]
[44 115]
[45 114]
[46 94]
[47 93]
[48 92]
[58 91]
[59 90]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
