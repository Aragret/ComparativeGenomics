%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACxxxxxxxxxxUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.82238770 371.85549927]
[133.82238770 356.85549927]
[133.82238770 341.85549927]
[133.82238770 326.85549927]
[133.82238770 311.85549927]
[133.82238770 296.85549927]
[133.82238770 281.85549927]
[133.82238770 266.85549927]
[133.82238770 251.85548401]
[133.82238770 236.85548401]
[131.49128723 222.03773499]
[126.88572693 207.76226807]
[122.28015900 193.48681641]
[117.67459106 179.21134949]
[113.06903076 164.93588257]
[108.46346283 150.66043091]
[103.85790253 136.38496399]
[92.58999634 135.83073425]
[82.02655029 131.87011719]
[73.17181396 124.87966919]
[66.86759186 115.52394104]
[63.71321487 104.69238281]
[64.00856018 93.41472626]
[67.72556305 82.76311493]
[56.22376251 73.13459015]
[44.72195816 63.50606537]
[33.89610672 73.91030121]
[22.00880432 83.08305359]
[9.19942379 90.91675568]
[-4.38185310 97.31958008]
[-18.57579231 102.21645355]
[-33.21597672 105.54995728]
[-48.13075638 107.28100586]
[-63.14526749 107.38931274]
[-78.08346558 105.87359619]
[-92.77021790 102.75164032]
[-107.03332520 98.06004333]
[-120.70555115 91.85380554]
[-133.62660217 84.20569611]
[-145.64500427 75.20539093]
[-156.61981201 64.95840454]
[-166.42237854 53.58488464]
[-174.93775940 41.21817780]
[-182.06613159 28.00327492]
[-187.72389221 14.09511662]
[-191.84474182 -0.34323198]
[-194.38034058 -15.14248848]
[-195.30096436 -30.12913895]
[-194.59582520 -45.12747192]
[-192.27317810 -59.96164322]
[-188.36027527 -74.45772552]
[-182.90298462 -88.44576263]
[-175.96527100 -101.76174927]
[-167.62850952 -114.24955750]
[-157.99041748 -125.76278687]
[-147.16400146 -136.16644287]
[-135.27621460 -145.33854675]
[-122.46640778 -153.17156982]
[-108.88478088 -159.57366943]
[-94.69058228 -164.46977234]
[-80.05021667 -167.80249023]
[-65.13534546 -169.53273010]
[-50.12082672 -169.64022827]
[-35.18270874 -168.12371826]
[-20.49612617 -165.00096130]
[-6.23327446 -160.30859375]
[7.43862152 -154.10162354]
[20.35926628 -146.45281982]
[32.37717056 -137.45187378]
[43.35143661 -127.20429993]
[53.15338898 -115.83024597]
[61.66810608 -103.46308136]
[68.79576111 -90.24779510]
[74.45278168 -76.33933258]
[78.57285309 -61.90076447]
[81.10765076 -47.10137177]
[82.02747345 -32.11467361]
[81.32152557 -17.11637688]
[78.99808502 -2.28233194]
[75.08439636 12.21353912]
[69.62634277 26.20128059]
[62.68792725 39.51689529]
[54.35048294 52.00426102]
[65.85228729 61.63278580]
[77.35408783 71.26131439]
[97.33800507 63.50804138]
[118.23554230 68.27912140]
[128.21827698 57.08335495]
[138.20100403 45.88758850]
[148.18371582 34.69182205]
[148.70553589 18.65725708]
[161.65281677 9.18374348]
[177.09352112 13.53854942]
[183.18286133 28.38104057]
[175.24960327 42.32532883]
[159.37948608 44.67454910]
[149.39675903 55.87031555]
[139.41403198 67.06607819]
[129.43130493 78.26184845]
[131.93762207 82.14678955]
[133.93403625 86.31677246]
[148.70008850 83.67790985]
[163.46614075 81.03903961]
[178.23219299 78.40017700]
[192.99826050 75.76131439]
[200.62829590 62.11153793]
[215.26542664 56.60805511]
[229.99845886 61.84944534]
[237.87088013 75.36088562]
[235.16557312 90.76268768]
[223.15992737 100.78258514]
[207.52262878 100.68949127]
[195.63711548 90.52736664]
[180.87106323 93.16623688]
[166.10501099 95.80509949]
[151.33895874 98.44396210]
[136.57289124 101.08282471]
[131.36500549 118.84106445]
[118.13336182 131.77940369]
[122.73892975 146.05487061]
[127.34449005 160.33032227]
[131.95005798 174.60578918]
[136.55561829 188.88124084]
[141.16117859 203.15670776]
[145.76675415 217.43217468]
[149.68330383 202.95249939]
[158.48431396 190.80581665]
[171.02366638 182.57388306]
[185.66842651 179.32875061]
[200.51147461 181.49296570]
[213.61988831 188.78474426]
[223.28659058 200.25447083]
[228.25274658 214.40852356]
[227.87165833 229.40368652]
[222.19291687 243.28720093]
[211.95606995 254.25109863]
[198.49420166 260.86758423]
[183.56037903 262.27505493]
[169.09936523 258.29019165]
[156.99435425 249.43193054]
[148.82238770 236.85548401]
[148.82238770 251.85548401]
[148.82238770 266.85549927]
[148.82238770 281.85549927]
[148.82238770 296.85549927]
[148.82238770 311.85549927]
[148.82238770 326.85549927]
[148.82238770 341.85549927]
[148.82238770 356.85549927]
[148.82238770 371.85549927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[17 119]
[24 85]
[25 84]
[26 83]
[87 99]
[88 98]
[89 97]
[90 96]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
