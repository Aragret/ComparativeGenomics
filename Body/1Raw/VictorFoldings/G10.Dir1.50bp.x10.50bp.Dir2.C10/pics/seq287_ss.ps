%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.17493629 271.44570923]
[-20.84154320 283.68865967]
[-29.50815201 295.93161011]
[-38.17475891 308.17456055]
[-46.84136581 320.41751099]
[-55.38182449 332.74880981]
[-63.79523468 345.16711426]
[-72.20864868 357.58541870]
[-80.62205505 370.00372314]
[-89.03546906 382.42205811]
[-83.63182831 396.96786499]
[-87.84240723 411.90274048]
[-100.04815674 421.48391724]
[-115.55571747 422.02725220]
[-128.40211487 413.32382202]
[-133.64764404 398.72027588]
[-129.27529907 383.83193970]
[-116.96632385 374.38372803]
[-101.45378113 374.00863647]
[-93.04036713 361.59033203]
[-84.62696075 349.17202759]
[-76.21354675 336.75369263]
[-67.80014038 324.33538818]
[-66.64501953 316.98843384]
[-59.08432007 311.75091553]
[-50.41771317 299.50793457]
[-41.75110626 287.26498413]
[-33.08449936 275.02203369]
[-24.41789055 262.77908325]
[-51.32468414 238.12197876]
[-73.42986298 209.08219910]
[-90.03202057 176.58116150]
[-100.60435486 141.65017700]
[-104.81140137 105.39759827]
[-119.81060791 105.24359894]
[-134.80981445 105.08959961]
[-148.82183838 113.60990143]
[-163.07475281 105.49901581]
[-162.90638733 89.10073090]
[-148.48994446 81.28419495]
[-134.65582275 90.09039307]
[-119.65660858 90.24439240]
[-104.65740204 90.39838409]
[-103.92188263 80.18309021]
[-102.67678833 70.01730347]
[-100.92524719 59.92644882]
[-98.67161560 49.93572617]
[-95.92154694 40.07010651]
[-92.68189240 30.35424423]
[-88.96076202 20.81241417]
[-84.76744843 11.46846008]
[-80.11242676 2.34573340]
[-75.00733948 -6.53297186]
[-69.46493530 -15.14546776]
[-63.49906540 -23.47023392]
[-57.12463760 -31.48646927]
[-50.35758209 -39.17414093]
[-43.21480560 -46.51403809]
[-35.71415710 -53.48781967]
[-27.87438202 -60.07806015]
[-19.71507072 -66.26829529]
[-11.25661087 -72.04304504]
[-2.52013755 -77.38789368]
[6.47251654 -82.28947449]
[15.69888020 -86.73554993]
[25.13590050 -90.71499634]
[34.75999069 -94.21788025]
[44.54710770 -97.23544312]
[54.47279358 -99.76014709]
[64.51224518 -101.78568268]
[74.64037323 -103.30699158]
[84.83186340 -104.32026672]
[95.06126404 -104.82297516]
[105.30300903 -104.81387329]
[115.53149414 -104.29296875]
[125.72117615 -103.26156616]
[135.84658813 -101.72225189]
[145.88241577 -99.67886353]
[155.80358887 -97.13650513]
[165.58532715 -94.10153961]
[175.20317078 -90.58154297]
[184.63310242 -86.58531952]
[193.85154724 -82.12284851]
[202.83546448 -77.20527649]
[211.56242371 -71.84490204]
[220.01058960 -66.05511475]
[228.15888977 -59.85037994]
[235.98692322 -53.24620438]
[243.47515869 -46.25909424]
[250.60487366 -38.90650558]
[261.99594116 -48.66577911]
[273.38702393 -58.42505264]
[270.48599243 -73.50748444]
[275.52999878 -88.01449585]
[287.16226196 -98.04378510]
[302.25369263 -100.89751434]
[316.74484253 -95.80805206]
[326.73760986 -84.14443207]
[329.54400635 -69.04411316]
[324.40914917 -54.56900787]
[312.71426392 -44.61283875]
[297.60522461 -41.85377121]
[283.14630127 -47.03398132]
[271.75521851 -37.27470398]
[260.36413574 -27.51543045]
[267.43795776 -18.07357788]
[273.95660400 -8.24021530]
[279.89843750 1.95205343]
[285.24374390 12.46943092]
[289.97482300 23.27704430]
[294.07598877 34.33905792]
[297.53359985 45.61878967]
[300.33627319 57.07883835]
[302.47463989 68.68120575]
[303.94161987 80.38742828]
[304.73239136 92.15867615]
[304.84432983 103.95592499]
[304.27700806 115.74005127]
[303.03234863 127.47199249]
[301.11447144 139.11283875]
[298.52972412 150.62400818]
[295.28671265 161.96730042]
[291.39614868 173.10511780]
[286.87094116 184.00054932]
[281.72613525 194.61743164]
[275.97872925 204.92059326]
[269.64782715 214.87585449]
[262.75439453 224.45021057]
[255.32128906 233.61190796]
[247.37318420 242.33056641]
[238.93640137 250.57728577]
[230.03894043 258.32473755]
[220.71028137 265.54718018]
[210.98138428 272.22070312]
[200.88449097 278.32321167]
[190.45307922 283.83438110]
[179.72174072 288.73602295]
[168.72605896 293.01184082]
[157.50250244 296.64767456]
[146.08827209 299.63143921]
[134.52120972 301.95327759]
[122.83969879 303.60546875]
[111.08244324 304.58255005]
[99.28845215 304.88128662]
[87.49681091 304.50064087]
[75.74662781 303.44192505]
[64.07687378 301.70861816]
[52.52622604 299.30651855]
[41.13299561 296.24353027]
[29.93495750 292.52981567]
[18.96924210 288.17773438]
[8.27220917 283.20169067]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[4 26]
[5 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[34 43]
[35 42]
[36 41]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
