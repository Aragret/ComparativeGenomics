%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUxxxxxxxxxxAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[22.59055519 252.58607483]
[15.22431660 265.65277100]
[7.85807705 278.71948242]
[0.49183738 291.78616333]
[-6.73986530 304.92779541]
[-13.83626842 318.14297485]
[-20.93267250 331.35815430]
[-28.02907562 344.57333374]
[-35.12547684 357.78851318]
[-42.22188187 371.00372314]
[-44.38837433 387.81866455]
[-61.14593887 390.39169312]
[-68.25735474 375.00128174]
[-55.43706512 363.90731812]
[-48.34066010 350.69210815]
[-41.24425888 337.47692871]
[-34.14785385 324.26174927]
[-27.05145073 311.04656982]
[-19.95504761 297.83139038]
[-19.55897522 290.40472412]
[-12.57485771 284.41992188]
[-5.20861816 271.35324097]
[2.15762138 258.28652954]
[9.52386093 245.21983337]
[-5.51286840 234.69137573]
[-19.33514595 222.61262512]
[-31.78388023 209.12260437]
[-42.71578217 194.37658691]
[-52.00502777 178.54428101]
[-59.54470062 161.80795288]
[-65.24801636 144.36019897]
[-69.04932404 126.40186310]
[-70.90488434 108.13964844]
[-70.79332733 89.78374481]
[-68.71595001 71.54542542]
[-64.69664764 53.63462448]
[-78.94333649 48.94082642]
[-93.19003296 44.24702454]
[-107.48416138 39.69973373]
[-121.82421875 35.29943466]
[-136.16427612 30.89913368]
[-148.48495483 40.33209610]
[-163.99794006 40.68795776]
[-176.73820496 31.82988358]
[-181.80683899 17.16398430]
[-177.25485229 2.32959771]
[-164.83258057 -6.96915340]
[-149.31663513 -7.15670824]
[-136.67321777 1.83905101]
[-131.76397705 16.55907249]
[-117.42391968 20.95937157]
[-103.08386230 25.35967255]
[-95.72127533 24.30871201]
[-88.49623108 30.00033188]
[-74.24953461 34.69413376]
[-60.00284576 39.38793182]
[-54.95759201 27.45430756]
[-49.02378845 15.93667126]
[-42.23545837 4.90106630]
[-34.63153076 -5.58922577]
[-26.25559998 -15.47405243]
[-17.15570068 -24.69673157]
[-7.38401222 -33.20438004]
[3.00343323 -40.94821548]
[13.94707298 -47.88382721]
[25.38415337 -53.97145462]
[37.24909210 -59.17618179]
[49.47385788 -63.46816635]
[61.98834610 -66.82279968]
[74.72079468 -69.22084808]
[87.59820557 -70.64855194]
[100.54673004 -71.09773254]
[113.49211121 -70.56581116]
[126.36013794 -69.05583954]
[139.07701111 -66.57646942]
[151.56979370 -63.14192963]
[163.76687622 -58.77190399]
[175.59831238 -53.49145889]
[186.99626160 -47.33086395]
[197.89535522 -40.32545471]
[208.23309326 -32.51539612]
[217.95021057 -23.94547081]
[226.99098206 -14.66482449]
[235.30357361 -4.72667122]
[242.84031677 5.81200123]
[249.55796814 16.89076233]
[255.41804504 28.44608688]
[260.38693237 40.41171265]
[264.43612671 52.71902466]
[279.01989746 49.20985794]
[293.60363770 45.70069122]
[308.18737793 42.19152451]
[300.37628174 24.17347336]
[309.10513306 0.40607062]
[320.69418335 -9.11726665]
[332.28323364 -18.64060402]
[340.68185425 -33.36811829]
[357.15875244 -29.37471390]
[357.88269043 -12.43622780]
[341.80657959 -7.05155611]
[330.21752930 2.47178149]
[318.62847900 11.99511909]
[320.90213013 19.14218330]
[333.09146118 10.40034485]
[345.17214966 19.29174805]
[340.44903564 33.52874756]
[325.44940186 33.43631363]
[327.72305298 40.58337784]
[342.68432617 41.66044998]
[357.64562988 42.73751831]
[372.60690308 43.81458664]
[381.15505981 31.05432129]
[394.94519043 24.29209137]
[410.26782227 25.34690857]
[423.00125122 33.93502808]
[429.72021484 47.74629211]
[428.61737061 63.06554031]
[419.98937988 75.77196503]
[406.15710449 82.44761658]
[390.84140015 81.29676056]
[378.16207886 72.62898254]
[371.52981567 58.77586746]
[356.56854248 57.69879913]
[341.60726929 56.62173080]
[326.64599609 55.54465866]
[311.69656372 56.77527237]
[297.11279297 60.28443909]
[282.52905273 63.79360580]
[267.94531250 67.30277252]
[270.19213867 82.41108704]
[271.08261108 97.65957642]
[270.60958862 112.92672729]
[268.77688599 128.09085083]
[265.59909058 143.03109741]
[261.10153198 157.62840271]
[255.32003784 171.76643372]
[248.30070496 185.33250427]
[240.09945679 198.21850586]
[230.78167725 210.32174683]
[220.42160034 221.54574585]
[209.10182190 231.80108643]
[196.91253662 241.00601196]
[183.95088196 249.08715820]
[170.32017517 255.98014832]
[156.12904358 261.63003540]
[141.49057007 265.99176025]
[126.52144623 269.03060913]
[111.34095001 270.72235107]
[96.07006836 271.05346680]
[80.83050537 270.02136230]
[65.74372101 267.63424683]
[50.92994690 263.91113281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[36 56]
[37 55]
[38 54]
[39 52]
[40 51]
[41 50]
[89 129]
[90 128]
[91 127]
[92 126]
[94 102]
[95 101]
[96 100]
[108 125]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
