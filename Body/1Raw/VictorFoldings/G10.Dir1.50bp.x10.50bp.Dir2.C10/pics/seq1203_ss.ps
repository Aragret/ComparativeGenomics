%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGxxxxxxxxxxUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.21659088 346.52194214]
[100.21659088 331.52194214]
[100.21659088 316.52194214]
[100.21659088 301.52194214]
[100.21659088 286.52194214]
[100.21659088 271.52194214]
[100.21659088 256.52194214]
[100.21659088 241.52195740]
[100.21659088 226.52195740]
[100.21659088 211.52195740]
[98.65900421 196.60304260]
[95.56068420 181.92651367]
[92.46236420 167.24998474]
[89.36404419 152.57347107]
[86.26572418 137.89694214]
[83.16739655 123.22041321]
[86.50376892 92.29084778]
[79.87527466 78.83488464]
[64.34589386 68.99526215]
[66.10776520 51.56265640]
[59.20076752 38.24749756]
[52.29376984 24.93234444]
[45.38677216 11.61718750]
[38.47977066 -1.69796777]
[31.57277298 -15.01312351]
[23.45123100 -27.62425232]
[14.18628216 -39.42089081]
[4.92133284 -51.21753311]
[-7.25050402 -59.98373795]
[-21.37530708 -65.03249359]
[-35.50011063 -70.08125305]
[-49.62491226 -75.13000488]
[-63.74971771 -80.17876434]
[-77.87451935 -85.22752380]
[-91.99932098 -90.27627563]
[-107.59854889 -87.63533783]
[-116.97898102 -99.20498657]
[-126.41251373 -87.36069489]
[-139.18209839 -79.22332764]
[-153.90255737 -75.67556763]
[-168.97714233 -77.10224915]
[-182.77069092 -83.34860992]
[-193.78695679 -93.73709106]
[-200.83097839 -107.14083862]
[-203.13870239 -122.10590363]
[-200.45976257 -137.00898743]
[-193.08477783 -150.23352051]
[-181.81373596 -160.34501648]
[-167.86921692 -166.24662781]
[-152.76382446 -167.29820251]
[-138.13607788 -163.38569641]
[-125.57268524 -154.93347168]
[-116.43643188 -142.85839844]
[-111.71835327 -128.47026062]
[-111.93022919 -113.32978821]
[-97.34129333 -116.33184814]
[-86.95056915 -104.40107727]
[-72.82575989 -99.35232544]
[-58.70095825 -94.30356598]
[-44.57615662 -89.25481415]
[-30.45135307 -84.20605469]
[-16.32655144 -79.15729523]
[-2.20174766 -74.10854340]
[-11.57175541 -85.82190704]
[-18.25971413 -99.24842072]
[-21.96456718 -113.78369141]
[-22.51954269 -128.77342224]
[-19.89966011 -143.54286194]
[-14.22285080 -157.42715454]
[-5.74465322 -169.80133057]
[5.15328932 -180.10835266]
[17.98041344 -187.88427734]
[32.15930939 -192.77905273]
[47.05172729 -194.57235718]
[61.98728943 -193.18345642]
[76.29367828 -188.67488098]
[89.32689667 -181.24957275]
[100.50026703 -171.24179077]
[109.31082153 -159.10202026]
[115.36196136 -145.37672424]
[118.38129425 -130.68374634]
[118.23290253 -115.68447876]
[114.92347717 -101.05410767]
[108.60198212 -87.45121765]
[99.55297852 -75.48812103]
[88.18379974 -65.70335388]
[75.00622559 -58.53734589]
[60.61344147 -54.31269073]
[45.65332794 -53.21955109]
[30.79930496 -55.30713272]
[16.71797180 -60.48247910]
[25.98292160 -48.68584061]
[35.24787140 -36.88920212]
[35.90047073 -51.87499619]
[44.42985535 -64.21394348]
[58.21847153 -70.11936951]
[73.03476715 -67.77898407]
[84.33181000 -57.91100693]
[88.64267731 -43.54380798]
[84.64442444 -29.08649445]
[73.56406403 -18.97582817]
[58.80201340 -16.31464386]
[44.88792801 -21.92012215]
[51.79492950 -8.60496616]
[58.70192719 4.71018934]
[65.60892487 18.02534485]
[72.51592255 31.34049988]
[79.42292023 44.65565491]
[90.89026642 48.63149643]
[96.73873138 59.72268295]
[93.33123779 72.20639038]
[99.95973969 85.66235352]
[111.75637817 94.92729950]
[126.39987946 98.17812347]
[141.04338074 101.42895508]
[154.23875427 92.73081207]
[169.70277405 95.99263000]
[178.26092529 109.27923584]
[174.83578491 124.70790863]
[161.45945740 133.12510681]
[146.06785583 129.53703308]
[137.79255676 116.07245636]
[123.14905548 112.82162476]
[108.50555420 109.57080078]
[97.84392548 120.12209320]
[100.94224548 134.79861450]
[104.04056549 149.47514343]
[107.13889313 164.15167236]
[110.23721313 178.82820129]
[113.33553314 193.50471497]
[120.06791687 180.10043335]
[132.52432251 171.74353027]
[147.48045349 170.59716797]
[161.06495667 176.95808411]
[169.76153564 189.17976379]
[171.31909180 204.09867859]
[165.33445740 217.85310364]
[153.35675049 226.88275146]
[138.48634338 228.85032654]
[124.57242584 223.24650574]
[115.21659088 211.52195740]
[115.21659088 226.52195740]
[115.21659088 241.52195740]
[115.21659088 256.52194214]
[115.21659088 271.52194214]
[115.21659088 286.52194214]
[115.21659088 301.52194214]
[115.21659088 316.52194214]
[115.21659088 331.52194214]
[115.21659088 346.52194214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[16 125]
[17 112]
[18 111]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[26 93]
[27 92]
[28 91]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[37 55]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
