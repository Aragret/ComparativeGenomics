%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGxxxxxxxxxxCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.35069275 126.27988434]
[65.44813538 131.91183472]
[51.54558182 137.54379272]
[37.64302444 143.17575073]
[23.74046898 148.80770874]
[9.89725113 154.58398438]
[-3.88513017 160.50395203]
[-17.66751099 166.42390442]
[-31.44989204 172.34387207]
[-45.23227310 178.26383972]
[-41.71519089 192.88362122]
[-40.71961975 207.88751221]
[-42.27420807 222.84382629]
[-46.33423233 237.32223511]
[-52.78286743 250.90615845]
[-61.43458176 263.20477295]
[-72.04044342 273.86422729]
[-84.29530334 282.57778931]
[-97.84655762 289.09478760]
[-112.30432129 293.22772217]
[-127.25260925 294.85766602]
[-142.26133728 293.93771362]
[-156.89865112 290.49435425]
[-170.74343872 284.62664795]
[-183.39732361 276.50338745]
[-194.49626160 266.35836792]
[-203.72090149 254.48342896]
[-210.80581665 241.22024536]
[-215.54718018 226.95043945]
[-217.80856323 212.08456421]
[-217.52490234 197.05035400]
[-214.70436096 182.28036499]
[-209.42808533 168.19955444]
[-201.84790039 155.21307373]
[-192.18188477 143.69456482]
[-180.70816040 133.97541809]
[-167.75685120 126.33528900]
[-153.70057678 120.99400330]
[-138.94378662 118.10523224]
[-123.91104889 117.75209808]
[-109.03488159 119.94474792]
[-94.74330902 124.62010956]
[-81.44753265 131.64366150]
[-69.53008270 140.81330872]
[-59.33386612 151.86523438]
[-51.15223694 164.48146057]
[-37.36985779 158.56149292]
[-23.58747482 152.64152527]
[-9.80509281 146.72157288]
[3.97728825 140.80160522]
[8.91381741 135.23596191]
[18.10851288 134.90515137]
[32.01107025 129.27319336]
[45.91362381 123.64124298]
[59.81618118 118.00928497]
[73.71873474 112.37732697]
[76.53471375 105.42604828]
[62.63224411 99.79387665]
[68.26463318 85.89149475]
[82.16667175 91.52349854]
[84.98265076 84.57221985]
[78.91963959 70.85216522]
[72.85662079 57.13211060]
[59.30418015 47.89829636]
[60.79433441 31.56699371]
[75.79415131 24.93844414]
[88.87309265 34.83153152]
[86.57667542 51.06909561]
[92.63968658 64.78915405]
[98.70270538 78.50920105]
[105.95050049 80.43778229]
[107.20745087 65.49053955]
[108.46440125 50.54329681]
[109.72135162 35.59605408]
[110.97830200 20.64881134]
[112.23525238 5.70156813]
[113.49219513 -9.24567509]
[109.43072510 -23.68535805]
[112.31658936 -38.40513229]
[121.52973175 -50.24227905]
[135.09059143 -56.65343857]
[150.08546448 -56.26110077]
[163.29251099 -49.14955902]
[171.87403870 -36.84682083]
[173.98620605 -21.99627304]
[169.17517090 -7.78873777]
[158.47390747 2.72358775]
[152.13594055 16.31881332]
[145.79797363 29.91403961]
[139.46000671 43.50926590]
[133.12203979 57.10449219]
[126.78406525 70.69971466]
[120.44609833 84.29494476]
[127.69389343 86.22352600]
[139.77388000 77.33117676]
[151.85386658 68.43881989]
[161.02523804 54.17970276]
[177.26599121 59.04532242]
[177.08641052 75.99832153]
[160.74621582 80.51881409]
[148.66622925 89.41116333]
[136.58624268 98.30351257]
[138.28773499 105.60795593]
[152.64099121 109.96504211]
[141.69071960 120.21685028]
[143.39219666 127.52129364]
[158.15826416 130.16015625]
[172.92431641 132.79902649]
[187.69036865 135.43789673]
[198.74035645 128.70353699]
[211.01808167 131.24842834]
[218.01678467 141.16433716]
[232.72474670 144.10983276]
[247.43270874 147.05531311]
[262.14068604 150.00079346]
[276.23510742 142.33747864]
[290.95761108 148.71145630]
[295.01434326 164.23313904]
[285.29330444 176.99562073]
[269.25164795 177.20863342]
[259.19519043 164.70875549]
[244.48722839 161.76327515]
[229.77926636 158.81779480]
[215.07130432 155.87229919]
[198.81018066 162.39732361]
[185.05149841 150.20394897]
[170.28544617 147.56507874]
[155.51939392 144.92620850]
[140.75334167 142.28735352]
[152.44662476 151.68240356]
[160.74079895 164.18066406]
[165.93603516 178.25225830]
[167.75346375 193.14173889]
[166.09550476 208.04983521]
[161.05114746 222.17620850]
[152.89122009 234.76254272]
[142.05375671 245.13313293]
[129.12054443 252.73127747]
[114.78585815 257.14910889]
[99.81925201 258.14941406]
[85.02416229 255.67851257]
[71.19483185 249.86906433]
[59.07366180 241.03292847]
[49.31135178 229.64445496]
[42.43196869 216.31501770]
[38.80481720 201.76016235]
[38.62461472 186.76124573]
[41.90103531 172.12344360]
[48.45819092 158.63256836]
[57.94407272 147.01284790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 50]
[7 49]
[8 48]
[9 47]
[10 46]
[61 70]
[62 69]
[63 68]
[94 102]
[95 101]
[96 100]
[106 129]
[107 128]
[108 127]
[109 126]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
