%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCACAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.21784973]
[92.50000000 233.21784973]
[92.50000000 218.21784973]
[92.50000000 203.21784973]
[92.50000000 188.21784973]
[92.50000000 173.21784973]
[92.50000000 158.21784973]
[92.50000000 143.21784973]
[92.50000000 128.21784973]
[92.50000000 113.21785736]
[86.79949188 108.34403229]
[75.39846802 98.59637451]
[69.69795990 93.72254944]
[54.88019943 96.05365753]
[54.92433929 111.08357239]
[52.67354202 125.94406891]
[48.18056870 140.28678894]
[41.55075073 153.77552795]
[32.93949127 166.09407043]
[22.54865074 176.95367432]
[10.62180996 186.09976196]
[-2.56145024 193.31793213]
[-16.69209671 198.43899536]
[-31.43888474 201.34289551]
[-46.45613098 201.96156311]
[-61.39180756 200.28050232]
[-75.89580536 196.33911133]
[-89.62812042 190.22978210]
[-102.26686096 182.09573364]
[-113.51573944 172.12763977]
[-123.11108398 160.55914307]
[-130.82795715 147.66146851]
[-136.48545837 133.73690796]
[-139.95097351 119.11191559]
[-141.14328003 104.12929535]
[-140.03440857 89.14027405]
[-136.65036011 74.49620819]
[-131.07044983 60.54037857]
[-123.42550659 47.59993362]
[-113.89471436 35.97821045]
[-102.70149231 25.94764137]
[-90.10823822 17.74335861]
[-76.41014099 11.55767918]
[-61.92831039 7.53560591]
[-47.00222397 5.77142239]
[-31.98176575 6.30648327]
[-17.21903992 9.12824535]
[-3.06010413 14.17056370]
[10.16313553 21.31523895]
[22.14070702 30.39478683]
[32.59183884 41.19637299]
[41.27154160 53.46679306]
[47.97635269 66.91841125]
[52.54909515 81.23589325]
[67.36685181 78.90479279]
[104.31650543 82.21006012]
[114.29923248 71.01428986]
[124.28195953 59.81852722]
[134.14767456 48.51952362]
[143.89532471 37.11850357]
[153.64299011 25.71748161]
[163.39064026 14.31645966]
[173.13829041 2.91543889]
[180.86236572 -9.94296360]
[186.34941101 -23.90335274]
[191.83644104 -37.86374283]
[189.68351746 -53.53778458]
[201.54023743 -62.55263901]
[207.02726746 -76.51303101]
[212.51429749 -90.47341919]
[200.07626343 -82.08917999]
[185.32342529 -79.37738800]
[170.71688843 -82.79043579]
[158.69334412 -91.75894928]
[151.25857544 -104.78678131]
[149.65289307 -119.70059204]
[154.14414978 -134.01242065]
[163.98309326 -145.33474731]
[177.52839661 -151.77874756]
[192.52037048 -152.26940918]
[206.45802307 -146.72488403]
[217.01625061 -136.07012939]
[222.43370056 -122.08258057]
[221.80696106 -107.09707642]
[230.82447815 -119.08390808]
[239.84201050 -131.07073975]
[234.38858032 -145.50207520]
[237.62538147 -160.58607483]
[248.51956177 -171.50946045]
[263.59481812 -174.78663635]
[278.04071045 -169.37185669]
[287.24761963 -156.99296570]
[288.27758789 -141.60003662]
[280.80203247 -128.10485840]
[267.20632935 -120.81372833]
[251.82884216 -122.05320740]
[242.81132507 -110.06637573]
[233.79379272 -98.07954407]
[226.47468567 -84.98638916]
[220.98765564 -71.02600098]
[215.50062561 -57.06560898]
[218.04600525 -42.39011002]
[205.79682922 -32.37671280]
[200.30979919 -18.41632271]
[194.82276917 -4.45593214]
[198.88352966 1.84963202]
[213.86585999 1.12170410]
[207.00508118 14.46076012]
[211.06584167 20.76632500]
[226.04556274 21.54616928]
[241.02526855 22.32601357]
[252.59722900 11.56194115]
[268.38796997 12.21668816]
[279.02908325 23.90180588]
[278.20742798 39.68472290]
[266.41046143 50.20170975]
[250.63710022 49.21323013]
[240.24542236 37.30572891]
[225.26571655 36.52588272]
[210.28599548 35.74604034]
[192.58874512 27.00422478]
[184.53930664 12.66309071]
[174.79165649 24.06411171]
[165.04400635 35.46513367]
[155.29635620 46.86615372]
[145.54870605 58.26717377]
[143.57977295 65.44136047]
[135.47772217 69.80125427]
[125.49499512 80.99701691]
[115.51226807 92.19278717]
[128.10688782 84.04565430]
[143.06762695 82.96123505]
[156.70550537 89.20690918]
[165.65766907 101.24263763]
[167.71672058 116.10063934]
[162.37492371 130.11724854]
[150.94946289 139.83624268]
[136.25762939 142.86112976]
[121.92211151 138.44601440]
[111.47778320 127.67958832]
[107.50000000 113.21785736]
[107.50000000 128.21784973]
[107.50000000 143.21784973]
[107.50000000 158.21784973]
[107.50000000 173.21784973]
[107.50000000 188.21784973]
[107.50000000 203.21784973]
[107.50000000 218.21784973]
[107.50000000 233.21784973]
[107.50000000 248.21784973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 55]
[14 54]
[56 130]
[57 129]
[58 128]
[59 126]
[60 125]
[61 124]
[62 123]
[63 122]
[64 105]
[65 104]
[66 103]
[68 101]
[69 100]
[70 99]
[84 98]
[85 97]
[86 96]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
