%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACxxxxxxxxxxAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.42465210 240.63069153]
[95.11260223 225.63392639]
[94.80054474 210.63717651]
[94.48848724 195.64042664]
[94.17642975 180.64367676]
[93.86437225 165.64691162]
[93.55231476 150.65016174]
[93.24026489 135.65341187]
[92.92820740 120.65665436]
[79.40401459 114.16848755]
[67.51163483 123.31022644]
[55.61925507 132.45196533]
[43.72687531 141.59368896]
[31.83449554 150.73542786]
[20.23315430 160.24378967]
[8.93415070 170.10951233]
[-2.36485434 179.97523499]
[-13.66385937 189.84095764]
[-18.45395470 205.52493286]
[-34.49048996 208.95443726]
[-45.27645111 196.60150146]
[-39.71616745 181.17376709]
[-23.52958298 178.54194641]
[-12.23057747 168.67622375]
[-0.93157256 158.81050110]
[10.36743259 148.94477844]
[10.95171833 145.40556335]
[13.31893253 141.98532104]
[17.38827324 139.53729248]
[22.69276237 138.84304810]
[34.58514023 129.70130920]
[46.47751999 120.55957794]
[58.36989975 111.41784668]
[70.26228333 102.27610779]
[74.27001953 87.82142639]
[68.78298950 73.86103058]
[63.29595947 59.90064240]
[48.63824081 48.80419159]
[51.84310150 31.57837486]
[46.06682968 17.73515701]
[40.29055786 3.89193916]
[29.62893105 -6.65935087]
[15.72637558 -12.29130745]
[1.82381999 -17.92326355]
[-13.45081902 -13.01766109]
[-26.72943115 -22.02088356]
[-27.82580185 -38.02642822]
[-15.89888859 -48.75621414]
[-0.09799892 -45.97926712]
[7.45577669 -31.82582092]
[21.35833359 -26.19386292]
[35.26088715 -20.56190681]
[39.70706177 -26.60190201]
[53.04558945 -44.72188187]
[43.53722763 -56.32322311]
[34.02886963 -67.92456818]
[24.52051163 -79.52590942]
[9.80385971 -87.94353485]
[13.81854820 -104.41529083]
[30.75795364 -105.11733246]
[36.12185287 -89.03426361]
[45.63021088 -77.43292236]
[55.13856888 -65.83158112]
[64.64692688 -54.23024368]
[71.85303497 -56.30918503]
[86.26525116 -60.46707153]
[93.47135925 -62.54601669]
[95.33897400 -77.42929840]
[97.20658875 -92.31257629]
[83.50530243 -98.72583771]
[72.45778656 -109.06061554]
[65.14638519 -122.30442810]
[62.28737259 -137.15977478]
[64.16085815 -152.17127991]
[70.58329773 -165.86825562]
[80.92548370 -176.90884399]
[94.17418671 -184.21138000]
[109.03144073 -187.06042480]
[124.04168701 -185.17687988]
[137.73437500 -178.74526978]
[148.76802063 -168.39569092]
[156.06167603 -155.14208984]
[158.90077209 -140.28292847]
[157.00717163 -125.27395630]
[150.56637573 -111.58558655]
[140.20941162 -100.55887604]
[126.95092773 -93.27410126]
[112.08986664 -90.44496155]
[110.22225189 -75.56168365]
[108.35464478 -60.67840195]
[54.13377762 -1.88433313]
[59.91004944 11.95888424]
[65.68631744 25.80210304]
[76.78348541 30.71740341]
[81.68975830 42.25635910]
[77.25634766 54.41361237]
[82.74337769 68.37400055]
[88.23040771 82.33438873]
[107.17778778 73.15222168]
[130.77392578 84.72994232]
[145.73416138 85.82125092]
[160.06068420 79.10847473]
[172.19131470 87.75122833]
[186.51783752 81.03845215]
[198.64845276 89.68120575]
[213.60870361 90.77252197]
[228.56895447 91.86383057]
[243.52920532 92.95513916]
[247.49288940 90.84548950]
[251.51417542 90.21270752]
[255.10964966 90.88676453]
[257.90460205 92.55475616]
[259.67089844 94.81031799]
[274.48864746 97.14142609]
[288.25210571 88.89844513]
[303.22702026 94.65446472]
[307.92590332 109.99395752]
[298.74420166 123.14978027]
[282.72531128 124.02990723]
[272.15756226 111.95918274]
[257.33978271 109.62808228]
[242.43789673 107.91539001]
[227.47764587 106.82408142]
[212.51739502 105.73276520]
[197.55714417 104.64145660]
[184.30068970 111.43229675]
[171.10000610 102.71147919]
[157.84353638 109.50231171]
[144.64285278 100.78150177]
[129.68260193 99.69019318]
[124.24319458 104.85379028]
[136.84884644 112.98383331]
[151.63473511 115.50919342]
[160.87825012 127.32264709]
[159.77330017 142.28189087]
[148.89440918 152.60902405]
[133.89794922 152.93455505]
[122.58116150 143.08923340]
[120.82805634 128.19227600]
[113.36437225 115.18099976]
[107.92495728 120.34459686]
[108.23701477 135.34135437]
[108.54907227 150.33810425]
[108.86112976 165.33485413]
[109.17318726 180.33161926]
[109.48523712 195.32836914]
[109.79729462 210.32511902]
[110.10935211 225.32186890]
[110.42140961 240.31863403]
[113.01240540 259.52636719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 26]
[16 25]
[17 24]
[18 23]
[35 98]
[36 97]
[37 96]
[39 93]
[40 92]
[41 91]
[42 52]
[43 51]
[44 50]
[54 64]
[55 63]
[56 62]
[57 61]
[67 90]
[68 89]
[69 88]
[100 130]
[101 129]
[103 127]
[105 125]
[106 124]
[107 123]
[108 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
