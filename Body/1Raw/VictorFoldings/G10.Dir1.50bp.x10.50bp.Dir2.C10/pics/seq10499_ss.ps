%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUxxxxxxxxxxCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.37973404 277.49502563]
[13.71737766 290.93426514]
[7.05501986 304.37350464]
[0.39266247 317.81274414]
[-6.26969481 331.25195312]
[-12.66181564 344.82180786]
[-18.78113937 358.51684570]
[-24.90046501 372.21188354]
[-22.67077065 388.45874023]
[-35.79024887 398.29800415]
[-50.76270294 391.60791016]
[-52.18575668 375.27059937]
[-38.59549332 366.09255981]
[-32.47616959 352.39752197]
[-26.35684586 338.70248413]
[-27.21831894 333.95312500]
[-25.06576347 328.61727905]
[-19.70892906 324.58959961]
[-13.04657078 311.15036011]
[-6.38421345 297.71115112]
[0.27814391 284.27191162]
[6.94050121 270.83267212]
[-4.95667267 263.79244995]
[-16.32382774 255.92510986]
[-27.10355949 247.27035522]
[-37.24143219 237.87190247]
[-46.68624878 227.77720642]
[-55.39031982 217.03726196]
[-63.30968475 205.70628357]
[-70.40435791 193.84150696]
[-76.63850403 181.50283813]
[-81.98064423 168.75257874]
[-86.40380096 155.65513611]
[-89.88564301 142.27664185]
[-92.40858459 128.68466187]
[-93.95987701 114.94781494]
[-94.53170013 101.13548279]
[-94.12116241 87.31742096]
[-92.73032379 73.56340790]
[-90.36622620 59.94289398]
[-87.04080200 46.52466202]
[-82.77083588 33.37647629]
[-77.57790375 20.56473351]
[-71.48821259 8.15412807]
[-84.42828369 0.56764919]
[-97.36834717 -7.01882982]
[-110.30841827 -14.60530853]
[-123.62069702 -6.94510221]
[-138.97953796 -6.98335648]
[-152.25349426 -14.70978165]
[-159.87193298 -28.04600716]
[-159.78553772 -43.40465546]
[-152.01754761 -56.65433121]
[-138.65751648 -64.23093414]
[-123.29920959 -64.09638977]
[-110.07394409 -56.28690720]
[-102.53926086 -42.90318298]
[-102.72193909 -27.54537582]
[-89.78186798 -19.95889664]
[-76.84180450 -12.37241745]
[-63.90173721 -4.78593874]
[-55.79314423 -16.50050926]
[-46.84893417 -27.59021378]
[-37.11708069 -37.99557114]
[-26.64978409 -47.66077423]
[-15.50318432 -56.53397751]
[-3.73706889 -64.56759644]
[8.58545399 -71.71852875]
[21.39829063 -77.94843292]
[34.63271713 -83.22388458]
[48.21775055 -87.51658630]
[62.08052444 -90.80352783]
[76.14668274 -93.06706238]
[90.34078217 -94.29506683]
[104.58668518 -94.48093414]
[118.80799866 -93.62368774]
[132.92842102 -91.72791290]
[146.87223816 -88.80377960]
[160.56463623 -84.86696625]
[173.93220520 -79.93860626]
[186.90321350 -74.04512024]
[199.40811157 -67.21811676]
[211.37982178 -59.49422073]
[222.75413513 -50.91485596]
[233.47004700 -41.52604294]
[243.47006226 -31.37813377]
[252.70056152 -20.52556038]
[261.11203003 -9.02653503]
[268.65936279 3.05726838]
[275.30206299 15.66103649]
[281.00451660 28.71716881]
[285.73611450 42.15563202]
[289.47149658 55.90435410]
[304.20129395 53.07005310]
[318.93106079 50.23574829]
[333.66085815 47.40144730]
[348.39065552 44.56714249]
[362.42813110 39.28046799]
[375.36819458 31.69398689]
[388.30828857 24.10750771]
[401.24835205 16.52102852]
[404.99386597 1.16698563]
[418.54248047 -6.96997404]
[433.85607910 -3.06233525]
[441.84933472 10.57156849]
[437.77999878 25.84298515]
[424.06234741 33.69165039]
[408.83480835 29.46109581]
[395.89474487 37.04757690]
[382.95468140 44.63405609]
[370.01461792 52.22053528]
[385.01150513 52.52648926]
[399.12649536 57.60261154]
[410.88333130 66.91799927]
[419.05242920 79.49839020]
[422.77935791 94.02800751]
[421.67434692 108.98725128]
[415.85296631 122.81156158]
[405.92407227 134.05508423]
[392.92605591 141.54188538]
[378.21841431 144.48893738]
[363.33935547 142.58802795]
[349.84506226 136.03794861]
[339.14682007 125.52375793]
[332.36358643 112.14512634]
[330.20480347 97.30128479]
[332.89624023 82.54471588]
[340.15637207 69.41878510]
[351.22494507 59.29693222]
[336.49517822 62.13123703]
[321.76538086 64.96553802]
[307.03558350 67.79984283]
[292.30578613 70.63414764]
[294.11437988 87.21400452]
[294.49615479 103.88784790]
[293.44833374 120.53311157]
[290.97863770 137.02745056]
[287.10519409 153.24961853]
[281.85644531 169.08039856]
[275.27102661 184.40342712]
[267.39730835 199.10604858]
[258.29318237 213.08023071]
[248.02555847 226.22323608]
[236.66990662 238.43846130]
[224.30969238 249.63613892]
[211.03576660 259.73394775]
[196.94570923 268.65765381]
[182.14305115 276.34167480]
[166.73663330 282.72955322]
[150.83969116 287.77432251]
[134.56904602 291.43890381]
[118.04432678 293.69635010]
[101.38696289 294.53005981]
[84.71941376 293.93395996]
[68.16417694 291.91235352]
[51.84293747 288.48016357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 15]
[7 14]
[8 13]
[44 61]
[45 60]
[46 59]
[47 58]
[93 133]
[94 132]
[95 131]
[96 130]
[97 129]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
