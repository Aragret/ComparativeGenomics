%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCAUAGAAGAxxxxxxxxxxCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[172.57940674 132.35418701]
[165.51573181 119.47421265]
[159.41358948 106.11156464]
[154.30574036 92.33792114]
[139.89352417 96.49580383]
[125.48130035 100.65369415]
[111.06908417 104.81158447]
[98.13102722 112.40148926]
[93.76477814 127.60827637]
[79.27598572 131.06140137]
[68.61435699 141.61270142]
[57.95273209 152.16398621]
[57.70302200 167.73881531]
[46.74031067 178.28744507]
[31.89362717 177.95341492]
[21.23200035 188.50469971]
[10.57037449 199.05598450]
[3.56542635 214.49513245]
[-13.20950890 212.03791809]
[-15.49208832 195.23832703]
[0.01908456 188.39436340]
[10.68071079 177.84307861]
[21.34233665 167.29177856]
[21.16275597 152.44242859]
[31.82485390 141.59004211]
[47.40143967 141.50236511]
[58.06306839 130.95106506]
[68.72469330 120.39978027]
[72.32835388 105.94769287]
[87.57974243 101.73986053]
[83.27215576 87.37168121]
[68.56419373 84.42619324]
[53.85623169 81.48071289]
[39.14826965 78.53523254]
[24.44030952 75.58975220]
[9.73234749 72.64426422]
[-5.00545835 69.85194397]
[-19.77151489 67.21308136]
[-34.53757095 64.57421112]
[-49.30362320 61.93534851]
[-65.95942688 65.10089874]
[-73.61204529 49.97232819]
[-61.19316483 38.43076706]
[-46.66476059 47.16929245]
[-31.89870453 49.80815887]
[-17.13265038 52.44702148]
[-2.36659431 55.08588791]
[4.81767464 53.15406799]
[12.67782974 57.93630600]
[27.38579178 60.88178635]
[42.09375381 63.82727051]
[56.80171585 66.77275085]
[71.50967407 69.71823120]
[86.21763611 72.66371918]
[106.91120148 90.39936829]
[121.32341766 86.24147797]
[135.73562622 82.08358765]
[150.14784241 77.92570496]
[147.02517700 62.90608978]
[145.05957031 47.69202423]
[144.26249695 32.37250519]
[144.63854980 17.03714943]
[146.18551636 1.77566206]
[148.89428711 -13.32268906]
[152.74897766 -28.16959190]
[157.72702026 -42.67821121]
[163.79922485 -56.76368713]
[170.93003845 -70.34364319]
[179.07772827 -83.33866882]
[188.19459534 -95.67276001]
[198.22726440 -107.27380371]
[209.11701965 -118.07395935]
[220.80014038 -128.01008606]
[233.20823669 -137.02407837]
[246.26873779 -145.06326294]
[259.90518188 -152.08062744]
[274.03781128 -158.03518677]
[288.58392334 -162.89213562]
[303.45843506 -166.62309265]
[318.57431030 -169.20628357]
[333.84313965 -170.62664795]
[349.17556763 -170.87590027]
[364.48193359 -169.95263672]
[379.67272949 -167.86230469]
[394.65902710 -164.61717224]
[409.35324097 -160.23623657]
[423.66937256 -154.74520874]
[437.52374268 -148.17620850]
[450.83529663 -140.56771851]
[463.52621460 -131.96427917]
[475.52224731 -122.41625214]
[486.75329590 -111.97952271]
[497.15365601 -100.71517181]
[506.66250610 -88.68912506]
[515.22430420 -75.97174072]
[522.78900146 -62.63744736]
[529.31231689 -48.76425934]
[543.32904053 -54.10577011]
[557.34576416 -59.44728470]
[567.48602295 -71.59163666]
[582.13427734 -68.89373016]
[596.15093994 -74.23524475]
[606.07684326 -87.28929138]
[622.30859375 -84.95209503]
[628.14837646 -69.62795258]
[617.58868408 -57.08103180]
[601.49249268 -60.21852875]
[587.47576904 -54.87701416]
[578.33807373 -43.11472321]
[562.68725586 -45.43057251]
[548.67053223 -40.08905792]
[534.65380859 -34.74754715]
[538.85534668 -20.68140984]
[542.01611328 -6.34525681]
[544.11920166 8.18402004]
[545.15319824 22.82849121]
[545.11267090 37.50960922]
[543.99768066 52.14862061]
[541.81427002 66.66699982]
[538.57403564 80.98686981]
[534.29431152 95.03141022]
[528.99810791 108.72527313]
[522.71368408 121.99499512]
[515.47485352 134.76937866]
[507.32034302 146.97990417]
[498.29385376 158.56101990]
[488.44378662 169.45060730]
[477.82293701 179.59024048]
[466.48831177 188.92547607]
[454.50061035 197.40623474]
[441.92416382 204.98699951]
[428.82638550 211.62705994]
[415.27752686 217.29078674]
[401.35028076 221.94775391]
[387.11929321 225.57295227]
[372.66088867 228.14691162]
[358.05267334 229.65577698]
[343.37292480 230.09143066]
[328.70046997 229.45149231]
[314.11392212 227.73934937]
[299.69158936 224.96418762]
[285.51083374 221.14082336]
[271.64770508 216.28974915]
[258.17657471 210.43693542]
[245.16975403 203.61376953]
[232.69699097 195.85681152]
[220.82522583 187.20762634]
[209.61814880 177.71258545]
[199.13589478 167.42259216]
[189.43472290 156.39283752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 55]
[8 30]
[10 28]
[11 27]
[12 26]
[15 23]
[16 22]
[17 21]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 47]
[38 46]
[39 45]
[40 44]
[97 112]
[98 111]
[99 110]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
