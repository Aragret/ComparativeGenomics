%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUxxxxxxxxxxUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCUCAUCAGUUGAUGAUACGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.53971863]
[92.50000000 232.53971863]
[92.50000000 217.53971863]
[92.50000000 202.53971863]
[92.50000000 187.53971863]
[92.50000000 172.53971863]
[92.50000000 157.53971863]
[92.50000000 142.53971863]
[92.50000000 127.53972626]
[92.50000000 112.53972626]
[87.74618530 98.31295013]
[78.72865295 86.32611084]
[69.71112823 74.33927917]
[60.69359589 62.35244751]
[51.67606735 50.36561584]
[42.16770554 38.76427460]
[32.18498230 27.56850815]
[22.20225525 16.37274361]
[12.21952820 5.17697716]
[2.23680162 -6.01878834]
[-7.74592495 -17.21455383]
[-7.46250963 -2.21723199]
[-15.20564365 10.62970829]
[-28.59905624 17.38370514]
[-43.53248215 15.97204208]
[-55.42304230 6.82794094]
[-60.62167740 -7.24239016]
[-57.53298569 -21.92094612]
[-47.10485840 -32.70306396]
[-32.53754425 -36.27985382]
[-18.30091095 -31.55318451]
[-26.02499580 -44.41158676]
[-33.74908066 -57.26998901]
[-41.47316742 -70.12838745]
[-49.19725037 -82.98679352]
[-61.53776169 -86.88110352]
[-67.69602203 -97.80331421]
[-64.82984161 -109.59706116]
[-72.28475189 -122.61336517]
[-87.27163696 -126.85964966]
[-94.64655304 -140.16624451]
[-90.50601196 -154.42778015]
[-97.96092224 -167.44409180]
[-105.41583252 -180.46040344]
[-119.48959351 -175.17596436]
[-134.22882080 -172.21766663]
[-149.25172424 -171.66217041]
[-164.16917419 -173.52384949]
[-178.59477234 -177.75447083]
[-192.15487671 -184.24446106]
[-204.49821472 -192.82571411]
[-215.30509949 -203.27595520]
[-224.29559326 -215.32449341]
[-231.23680115 -228.65924072]
[-235.94895935 -242.93481445]
[-238.30999756 -257.78140259]
[-238.25877380 -272.81448364]
[-235.79658508 -287.64465332]
[-230.98722839 -301.88778687]
[-223.95527649 -315.17489624]
[-214.88287354 -327.16189575]
[-204.00502014 -337.53820801]
[-191.60345459 -346.03512573]
[-177.99943542 -352.43255615]
[-163.54533386 -356.56475830]
[-148.61553955 -358.32470703]
[-133.59677124 -357.66680908]
[-118.87805939 -354.60812378]
[-104.84064484 -349.22787476]
[-91.84812927 -341.66543579]
[-80.23705292 -332.11663818]
[-70.30817413 -320.82888794]
[-62.31866837 -308.09451294]
[-56.47548676 -294.24340820]
[-52.92998505 -279.63430786]
[-51.77399445 -264.64566040]
[-53.03746033 -249.66567993]
[-56.68765640 -235.08239746]
[-62.63003540 -221.27354431]
[-70.71067047 -208.59681702]
[-80.72025299 -197.38055420]
[-92.39952087 -187.91531372]
[-84.94461060 -174.89900208]
[-77.48970032 -161.88269043]
[-63.09350586 -158.23780823]
[-55.34774399 -145.14361572]
[-59.26844025 -130.06828308]
[-51.81352997 -117.05197144]
[-36.20326614 -109.09460449]
[-36.33884811 -90.71087646]
[-28.61476326 -77.85247803]
[-20.89067841 -64.99407196]
[-13.16659355 -52.13566971]
[-5.44250870 -39.27726746]
[3.44984102 -27.19728088]
[13.43256760 -16.00151443]
[23.41529465 -4.80574894]
[33.39802170 6.39001656]
[43.38074493 17.58578300]
[53.36347198 28.78154755]
[56.21615219 29.04529953]
[59.13179398 30.49201965]
[61.64522934 33.14993668]
[63.29048157 36.87340164]
[63.66289902 41.34808731]
[72.68042755 53.33491898]
[81.69795990 65.32175446]
[90.71548462 77.30858612]
[99.73301697 89.29541779]
[97.56618500 74.45274353]
[98.67274475 59.49361801]
[107.18245697 47.14109421]
[120.76550293 40.77707291]
[135.70309448 42.14391327]
[147.90559387 50.86739349]
[154.03216553 64.55918884]
[152.40634155 79.46848297]
[137.54466248 81.50083160]
[151.56137085 86.84234619]
[166.73065186 81.62003326]
[180.19369507 90.34506226]
[181.62280273 106.32433319]
[169.92169189 117.29992676]
[154.06643677 114.85229492]
[146.21986389 100.85905457]
[132.20314026 95.51754761]
[126.02735901 99.77309418]
[135.76731873 111.18067932]
[145.50729370 122.58826447]
[155.24725342 133.99584961]
[169.24143982 139.39613342]
[176.15730286 152.70668030]
[172.53158569 167.26188660]
[160.17991638 175.77285767]
[145.28775024 173.97749329]
[135.31272888 162.77487183]
[135.24993896 147.77539062]
[128.05854797 134.61166382]
[120.86717224 121.44792175]
[113.67578888 108.28417969]
[107.50000000 112.53972626]
[107.50000000 127.53972626]
[107.50000000 142.53971863]
[107.50000000 157.53971863]
[107.50000000 172.53971863]
[107.50000000 187.53971863]
[107.50000000 202.53971863]
[107.50000000 217.53971863]
[107.50000000 232.53971863]
[107.50000000 247.53971863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[31 94]
[32 93]
[33 92]
[34 91]
[35 90]
[38 88]
[39 87]
[42 84]
[43 83]
[44 82]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
