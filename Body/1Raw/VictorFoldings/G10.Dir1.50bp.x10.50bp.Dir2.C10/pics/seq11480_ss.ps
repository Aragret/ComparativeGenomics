%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAxxxxxxxxxxCCAUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.63871765 441.50125122]
[73.63871765 426.50125122]
[73.63871765 411.50125122]
[73.63871765 396.50125122]
[73.63871765 381.50125122]
[73.63871765 366.50125122]
[73.63871765 351.50125122]
[73.63871765 336.50125122]
[73.63871765 321.50125122]
[73.63871765 306.50125122]
[60.27407074 303.69549561]
[47.72319794 298.30020142]
[36.48262787 290.52648926]
[26.99751282 280.67956543]
[19.64400291 269.14688110]
[14.71432304 256.38272095]
[12.40515995 242.89047241]
[12.80982113 229.20262146]
[15.91446304 215.85980225]
[21.59855270 203.38949585]
[29.63954735 192.28507996]
[39.72160721 182.98635864]
[51.44799805 175.86216736]
[64.35670471 171.19567871]
[77.93864441 169.17323303]
[78.87427521 154.20243835]
[79.80989838 139.23164368]
[80.74552917 124.26084900]
[71.60379791 112.36846924]
[56.89583206 109.42298889]
[42.18787003 106.47750854]
[27.47990990 103.53202057]
[13.13788033 113.49413300]
[-3.64796257 110.10008240]
[-12.63211441 95.91759491]
[-27.39817047 93.27873230]
[-42.16422653 90.63986969]
[-56.93028259 88.00100708]
[-68.81578827 98.16313171]
[-84.45309448 98.25621796]
[-96.45874023 88.23632050]
[-99.16403198 72.83451843]
[-91.29161072 59.32308197]
[-76.55859375 54.08169174]
[-61.92145920 59.58517075]
[-54.29141617 73.23494720]
[-39.52536011 75.87381744]
[-24.75930595 78.51268005]
[-9.99324989 81.15154266]
[-0.52231014 72.35961151]
[12.47979641 70.62192535]
[24.27264404 76.79903412]
[30.42539215 88.82406616]
[45.13335419 91.76954651]
[59.84131622 94.71502686]
[74.54927826 97.66050720]
[87.07635498 82.00478363]
[104.33889008 81.75669098]
[113.35642242 69.76985931]
[102.28675079 59.62994003]
[92.24742126 48.46896744]
[83.33216095 36.39115143]
[75.62420654 23.50926399]
[69.19554138 9.94358253]
[64.10617828 -4.17923260]
[60.40363693 -18.72731590]
[58.12249374 -33.56483078]
[57.28404236 -48.55324554]
[57.89611435 -63.55260849]
[59.95299149 -78.42287445]
[63.43547440 -93.02519226]
[68.31104279 -107.22323608]
[74.53417206 -120.88442993]
[82.04676056 -133.88121033]
[90.77867126 -146.09225464]
[100.64835358 -157.40351868]
[111.56367493 -167.70941162]
[123.42271423 -176.91368103]
[136.11473083 -184.93041992]
[149.52124023 -191.68475342]
[163.51705933 -197.11363220]
[177.97149658 -201.16635132]
[192.74961853 -203.80508423]
[207.71340942 -205.00518799]
[222.72319031 -204.75544739]
[237.63877869 -203.05821228]
[252.32092285 -199.92932129]
[266.63253784 -195.39797974]
[280.44000244 -189.50651550]
[293.61441040 -182.30992126]
[306.03271484 -173.87539673]
[317.57897949 -164.28170776]
[328.14541626 -153.61839294]
[337.63336182 -141.98506165]
[345.95419312 -129.49029541]
[353.03027344 -116.25077820]
[358.79547119 -102.39012909]
[363.19601440 -88.03775024]
[366.19079590 -73.32765961]
[367.75186157 -58.39719772]
[367.86459351 -43.38577271]
[366.52801514 -28.43354988]
[363.75451660 -13.68013287]
[359.57006836 0.73672527]
[354.01370239 14.68241501]
[347.13729858 28.02672577]
[339.00506592 40.64506531]
[329.69293213 52.41960907]
[319.28787231 63.24042511]
[307.88702393 73.00648499]
[295.59680176 81.62658691]
[282.53198242 89.02026367]
[268.81457520 95.11846161]
[254.57264709 99.86426544]
[239.93914795 103.21334076]
[225.05073547 105.13443756]
[210.04640198 105.60960388]
[195.06626892 104.63440704]
[180.25018311 102.21794891]
[165.73649597 98.38280487]
[151.66072083 93.16477203]
[138.15426636 86.61257935]
[125.34325409 78.78739166]
[116.32572174 90.77422333]
[118.12868500 112.73574829]
[95.71632385 125.19647980]
[94.78069305 140.16726685]
[93.84506226 155.13806152]
[92.90943146 170.10885620]
[108.64618683 174.84635925]
[122.81194305 183.16230774]
[134.60717773 194.58290100]
[143.36723328 208.45927429]
[148.59973145 224.00430298]
[150.01222229 240.33728027]
[147.52864075 256.53384399]
[141.29325867 271.67816162]
[131.66238403 284.91494751]
[119.18398285 295.49752808]
[104.56652832 302.83010864]
[88.63871765 306.50125122]
[88.63871765 321.50125122]
[88.63871765 336.50125122]
[88.63871765 351.50125122]
[88.63871765 366.50125122]
[88.63871765 381.50125122]
[88.63871765 396.50125122]
[88.63871765 411.50125122]
[88.63871765 426.50125122]
[88.63871765 441.50125122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 129]
[26 128]
[27 127]
[28 126]
[29 56]
[30 55]
[31 54]
[32 53]
[35 49]
[36 48]
[37 47]
[38 46]
[58 124]
[59 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
