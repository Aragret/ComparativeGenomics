%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUxxxxxxxxxxACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.51937103 277.59887695]
[100.51937103 262.59887695]
[100.51937103 247.59889221]
[100.51937103 232.59889221]
[100.51937103 217.59889221]
[100.51937103 202.59889221]
[100.51937103 187.59889221]
[100.51937103 172.59889221]
[100.51937103 157.59889221]
[100.51937103 142.59889221]
[88.72439575 139.87266541]
[78.49361420 134.04695129]
[70.59121704 125.77426910]
[65.54386902 115.87928772]
[63.60753632 105.27921295]
[64.75950623 94.89981079]
[68.71524811 85.59481812]
[74.96740723 78.07573700]
[66.20120239 65.90390015]
[57.43499374 53.73206711]
[48.66878891 41.56023026]
[39.90258026 29.38839149]
[31.13637352 17.21655464]
[22.87298393 17.52216339]
[15.24095058 14.79473019]
[9.28939342 9.53832340]
[-4.83540916 14.58708000]
[-15.03074551 27.43181229]
[-31.21035576 24.75743675]
[-36.73004150 9.31512165]
[-25.91162491 -3.00940299]
[-9.88416576 0.46227720]
[4.24063730 -4.58647919]
[5.92411137 -12.27855968]
[10.34379292 -18.79535294]
[4.28077936 -32.51540756]
[-1.78223360 -46.23546219]
[-7.84524679 -59.95551300]
[-30.76512337 -57.35112762]
[-53.08581924 -63.08105469]
[-71.87970734 -76.37685394]
[-84.68775940 -95.47884369]
[-89.84130859 -117.86898804]
[-86.67938995 -140.60279846]
[-75.63352203 -160.69656372]
[-86.07333374 -171.46737671]
[-96.51314545 -182.23818970]
[-106.95295715 -193.00900269]
[-122.52434540 -193.42070007]
[-132.95837402 -204.49255371]
[-132.46990967 -219.33496094]
[-142.90971375 -230.10577393]
[-153.34953308 -240.87658691]
[-168.93298340 -239.57652283]
[-181.67636108 -248.63963318]
[-185.56265259 -263.78662109]
[-178.75685120 -277.86550903]
[-164.47245789 -284.22869873]
[-149.45411682 -279.87167358]
[-140.79304504 -266.85168457]
[-142.57872009 -251.31639099]
[-132.13890076 -240.54557800]
[-121.69909668 -229.77478027]
[-106.84867859 -229.79988098]
[-96.10778809 -219.02546692]
[-96.18215179 -203.44880676]
[-85.74233246 -192.67799377]
[-75.30252075 -181.90719604]
[-64.86270905 -171.13638306]
[-57.71018600 -175.87562561]
[-49.97977448 -179.60424805]
[-41.81344986 -182.25303650]
[-33.36129761 -183.77259827]
[-24.77874565 -184.13429260]
[-16.22372246 -183.33078003]
[-7.85373545 -181.37619019]
[0.17701945 -178.30583191]
[7.72050285 -174.17555237]
[14.63755894 -169.06080627]
[20.80048370 -163.05516052]
[26.09538078 -156.26864624]
[30.42427063 -148.82577515]
[33.70689774 -140.86315918]
[35.88222122 -132.52708435]
[36.90954971 -123.97081757]
[36.76930237 -115.35173035]
[35.46338654 -106.82845306]
[33.01516342 -98.55796814]
[29.46903801 -90.69266510]
[24.88965797 -83.37757111]
[19.36072350 -76.74768829]
[12.98346996 -70.92545319]
[5.87480688 -66.01852417]
[11.93782043 -52.29847336]
[18.00083351 -38.57841873]
[24.06384659 -24.85836601]
[43.81001663 -14.52186108]
[43.30820847 8.45034790]
[52.07441711 20.62218475]
[60.84062576 32.79402161]
[69.60683441 44.96585846]
[78.37303925 57.13769531]
[87.13924408 69.30953217]
[111.75583649 65.56667328]
[134.35182190 80.51453400]
[141.66754150 108.87421417]
[156.37550354 111.81969452]
[171.08346558 114.76517487]
[178.27468872 101.46939850]
[189.06658936 90.88515472]
[202.49955750 83.95359039]
[217.37915039 81.29104614]
[232.38227844 83.13428497]
[246.17488098 89.31940460]
[257.53051758 99.29642487]
[265.43945312 112.17819977]
[269.19845581 126.81928253]
[268.47323608 141.91781616]
[263.32830811 156.13122559]
[254.22114563 168.19567871]
[241.96156311 177.03840637]
[227.63964844 181.87312317]
[212.52893066 182.26994324]
[197.97302246 178.19355774]
[185.26623535 170.00643921]
[175.53843689 158.43658447]
[169.65461731 144.51278687]
[168.13796997 129.47314453]
[153.43000793 126.52765656]
[138.72204590 123.58217621]
[132.92138672 128.33634949]
[144.41668701 137.97262573]
[159.08166504 141.12516785]
[167.69046021 153.40884399]
[165.64962769 168.26934814]
[154.04809570 177.77748108]
[139.07618713 176.85989380]
[128.72257996 166.00617981]
[128.51142883 151.00845337]
[121.32003784 137.84471130]
[115.51937103 142.59889221]
[115.51937103 157.59889221]
[115.51937103 172.59889221]
[115.51937103 187.59889221]
[115.51937103 202.59889221]
[115.51937103 217.59889221]
[115.51937103 232.59889221]
[115.51937103 247.59889221]
[115.51937103 262.59887695]
[115.51937103 277.59887695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 103]
[19 102]
[20 101]
[21 100]
[22 99]
[23 98]
[26 33]
[27 32]
[35 96]
[36 95]
[37 94]
[38 93]
[45 69]
[46 68]
[47 67]
[48 66]
[51 63]
[52 62]
[53 61]
[106 130]
[107 129]
[108 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
