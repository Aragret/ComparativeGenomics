%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.55122375 287.96353149]
[122.23916626 272.96679688]
[121.92710876 257.97003174]
[121.61505127 242.97328186]
[121.30299377 227.97653198]
[120.99093628 212.97976685]
[120.67888641 197.98301697]
[120.36682892 182.98626709]
[120.05477142 167.98951721]
[116.65179443 153.38061523]
[110.30466461 139.78967285]
[103.95753479 126.19871521]
[96.92106628 126.31643677]
[90.10180664 124.57764435]
[83.98082733 121.10499573]
[71.90083313 129.99734497]
[59.82084656 138.88969421]
[61.60131836 154.14503479]
[55.50084686 168.24041748]
[43.16043091 177.38426208]
[27.89958191 179.11689758]
[13.82339001 172.97227478]
[4.71828032 160.60325623]
[3.03348184 145.33705139]
[9.22219753 131.28019714]
[21.61969185 122.21389771]
[36.89110565 120.57695770]
[50.92849731 126.80970764]
[63.00848770 117.91735840]
[75.08847809 109.02500916]
[75.76495361 89.29032135]
[89.90176392 75.50386810]
[88.34418488 60.58495712]
[77.18411255 45.97562027]
[84.87490845 30.23231506]
[83.00729370 15.34903431]
[81.13967896 0.46575427]
[79.27206421 -14.41752529]
[77.40444946 -29.30080605]
[62.13796234 -36.43139267]
[53.37593842 -50.66067123]
[53.87237167 -67.22484589]
[63.31113434 -80.67623138]
[57.24812317 -94.39628601]
[51.18510818 -108.11634064]
[30.91492653 -109.58509827]
[16.62892151 -130.95631409]
[4.01779270 -139.07786560]
[-8.59333611 -147.19940186]
[-24.99050140 -147.45431519]
[-32.73083496 -161.91181946]
[-23.85174370 -175.69926453]
[-7.48727608 -174.63331604]
[-0.47179350 -159.81053162]
[12.13933468 -151.68899536]
[24.75046349 -143.56744385]
[31.29704094 -147.22700500]
[23.97793388 -160.32015991]
[16.65882874 -173.41331482]
[5.65195513 -183.60392761]
[11.94252110 -197.22116089]
[26.83716011 -195.44639587]
[29.75198364 -180.73242188]
[37.07109070 -167.63926697]
[44.39019394 -154.54611206]
[50.93677139 -158.20565796]
[50.62471390 -173.20240784]
[50.31266022 -188.19917297]
[50.00060272 -203.19592285]
[36.27486801 -209.96812439]
[27.27791214 -222.35009766]
[25.07717133 -237.49656677]
[30.17835999 -251.92697144]
[41.40925980 -262.32531738]
[56.18909836 -266.30212402]
[71.12156677 -262.94357300]
[82.77530670 -253.02142334]
[88.47235870 -238.81570435]
[86.90359497 -223.59080505]
[78.42949677 -210.84529114]
[64.99736023 -203.50798035]
[65.30941010 -188.51123047]
[65.62146759 -173.51446533]
[65.93352509 -158.51771545]
[77.17731476 -132.67404175]
[64.90515900 -114.17935181]
[70.96817780 -100.45929718]
[77.03118896 -86.73924255]
[87.76569366 -86.31597137]
[97.58227539 -81.95210266]
[109.08408356 -91.58062744]
[120.58588409 -101.20915222]
[132.08769226 -110.83767700]
[143.58949280 -120.46620178]
[148.70483398 -136.04713440]
[164.80924988 -139.14228821]
[175.33589172 -126.56763458]
[169.45585632 -111.25890350]
[153.21801758 -108.96440125]
[141.71621704 -99.33587646]
[130.21441650 -89.70735168]
[118.71260834 -80.07881927]
[107.21080780 -70.45029449]
[109.97016907 -55.39781570]
[104.53529358 -40.90788269]
[92.28773499 -31.16841888]
[94.15534210 -16.28513908]
[96.02295685 -1.40185893]
[97.89057159 13.48142147]
[99.75818634 28.36470032]
[109.13864136 36.06628418]
[110.78353882 48.49662018]
[103.26309204 59.02737427]
[104.82067871 73.94628906]
[117.89802551 80.46297455]
[125.53270721 92.92074585]
[125.40304565 107.53127289]
[117.54848480 119.85158539]
[123.89561462 133.44253540]
[130.24273682 147.03349304]
[131.88890076 132.12408447]
[137.59506226 118.25182343]
[146.91590881 106.49929810]
[159.12402344 97.78367615]
[173.26667786 92.78514862]
[188.24017334 91.89379120]
[202.87594604 95.17917633]
[216.03184509 102.38491058]
[226.68113708 112.94863892]
[233.99276733 126.04597473]
[237.39611816 140.65478516]
[236.62557983 155.63497925]
[231.74130249 169.81748962]
[223.12445068 182.09552002]
[211.44749451 191.51086426]
[197.62171936 197.32875061]
[182.72607422 199.09513855]
[167.92306519 196.67218018]
[154.36790466 190.24896240]
[143.11846924 180.32676697]
[135.05152893 167.67745972]
[135.36358643 182.67420959]
[135.67564392 197.67095947]
[135.98768616 212.66770935]
[136.29974365 227.66447449]
[136.61180115 242.66122437]
[136.92385864 257.65798950]
[137.23591614 272.65472412]
[137.54797363 287.65148926]
[140.13897705 306.85922241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 120]
[11 119]
[12 118]
[15 30]
[16 29]
[17 28]
[32 114]
[33 113]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[43 88]
[44 87]
[45 86]
[47 56]
[48 55]
[49 54]
[66 84]
[67 83]
[68 82]
[69 81]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
