%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.96603394 412.64837646]
[94.96603394 397.64837646]
[94.96603394 382.64837646]
[94.96603394 367.64837646]
[94.96603394 352.64837646]
[94.96603394 337.64837646]
[94.96603394 322.64837646]
[94.96603394 307.64837646]
[94.96603394 292.64837646]
[94.96603394 277.64837646]
[79.95173645 273.75289917]
[66.44042206 266.11135864]
[55.34916306 255.23580933]
[47.43244934 241.85803223]
[43.23089981 226.88032532]
[43.03432846 211.31459045]
[46.86176682 196.21400452]
[54.45979309 182.60176086]
[65.31929016 171.40170288]
[78.70957947 163.37568665]
[93.72755432 159.07170105]
[93.41549683 144.07495117]
[93.10343933 129.07820129]
[74.88040161 120.70172882]
[64.81227112 101.43061066]
[68.90637970 78.35996246]
[87.47055817 61.43558884]
[73.34575653 56.38683319]
[59.22095108 51.33807755]
[49.51439667 62.95737457]
[36.44270706 70.54044342]
[21.59324074 73.18875885]
[6.76161718 70.60166931]
[-6.26539707 63.11045074]
[-15.92514610 51.63596725]
[-21.06652451 37.57555008]
[-21.08712959 22.63282967]
[-35.21193314 17.58407402]
[-49.33673477 12.53531742]
[-63.46154022 7.48656130]
[-77.58634186 2.43780494]
[-91.71114349 -2.61095142]
[-105.83594513 -7.65970802]
[-120.89330292 -2.12294841]
[-134.53494263 -10.56600761]
[-136.29617310 -26.51209259]
[-124.82592010 -37.72873306]
[-108.92318726 -35.61148071]
[-100.78719330 -21.78451157]
[-86.66239166 -16.73575401]
[-72.53758240 -11.68699837]
[-58.41278458 -6.63824177]
[-44.28797913 -1.58948541]
[-30.16317749 3.45927095]
[-16.03837395 8.50802708]
[-6.55038834 -3.03595090]
[6.33883667 -10.65152550]
[21.08347321 -13.40292740]
[35.90747452 -10.93910599]
[49.01852036 -3.53839064]
[58.82469940 7.92280912]
[64.12779999 22.07374763]
[64.26970673 37.21327209]
[78.39450836 42.26202774]
[92.51931763 47.31078720]
[105.90560150 40.54267120]
[110.21318054 26.17448616]
[114.52076721 11.80630302]
[101.31007385 4.58333492]
[89.89006042 -5.22875071]
[80.75997162 -17.20101166]
[74.31891632 -30.81007385]
[70.84848785 -45.46100616]
[70.50038910 -60.51333237]
[73.28984070 -75.30902863]
[79.09489441 -89.20129395]
[87.66178894 -101.58281708]
[98.61600494 -111.91232300]
[111.47867584 -119.73826599]
[125.68750763 -124.71851349]
[140.62133789 -126.63536072]
[155.62733459 -125.40500641]
[170.04949951 -121.08123779]
[183.25733948 -113.85307312]
[194.67349243 -104.03649902]
[203.79887390 -92.06064606]
[210.23457336 -78.44905090]
[213.69924927 -63.79675674]
[214.04142761 -48.74429321]
[211.24615479 -33.94969559]
[205.43562317 -20.05971718]
[196.86386108 -7.68156719]
[185.90559387 2.64363337]
[173.03984070 10.46451092]
[158.82905579 15.43917179]
[143.89447021 17.35014343]
[128.88894653 16.11388779]
[124.58136749 30.48207092]
[120.27378082 44.85025406]
[124.65689087 50.93617249]
[133.52410889 38.83772659]
[147.77052307 43.53234863]
[147.70803833 58.53221893]
[133.42309570 63.10800934]
[137.80619812 69.19393158]
[152.79888916 69.66197205]
[166.83377075 62.35904312]
[179.31341553 70.48970032]
[194.30612183 70.95774078]
[209.29881287 71.42578888]
[224.29150391 71.89382935]
[239.28421021 72.36186981]
[255.30429077 66.81269836]
[265.07138062 80.67054749]
[254.45892334 93.89218903]
[238.81616211 87.35456848]
[223.82347107 86.88652802]
[208.83076477 86.41847992]
[193.83807373 85.95043945]
[178.84538269 85.48239899]
[165.88287354 92.81880188]
[152.33085632 84.65467072]
[137.33815002 84.18662262]
[137.87220764 100.89463043]
[131.74371338 115.24990082]
[120.93775940 124.92320251]
[108.10019684 128.76614380]
[108.41225433 143.76289368]
[108.72431183 158.75964355]
[122.88143158 162.04945374]
[135.82528687 168.63943481]
[146.79992676 178.13963318]
[155.16560364 189.99021912]
[160.43614197 203.49458313]
[162.30711365 217.86021423]
[160.67346191 232.24520874]
[155.63537598 245.80767822]
[147.49220276 257.75494385]
[136.72454834 267.38989258]
[123.96605682 274.15170288]
[109.96603394 277.64837646]
[109.96603394 292.64837646]
[109.96603394 307.64837646]
[109.96603394 322.64837646]
[109.96603394 337.64837646]
[109.96603394 352.64837646]
[109.96603394 367.64837646]
[109.96603394 382.64837646]
[109.96603394 397.64837646]
[109.96603394 412.64837646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 129]
[22 128]
[23 127]
[27 65]
[28 64]
[29 63]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[66 99]
[67 98]
[68 97]
[105 123]
[106 122]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
