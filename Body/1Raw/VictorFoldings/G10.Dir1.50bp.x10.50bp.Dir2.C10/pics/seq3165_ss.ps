%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUxxxxxxxxxxUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.18228912 293.34750366]
[78.18228912 278.34750366]
[78.18228912 263.34750366]
[78.18228912 248.34751892]
[78.18228912 233.34751892]
[78.18228912 218.34751892]
[78.18228912 203.34751892]
[78.18228912 188.34751892]
[78.18228912 173.34751892]
[78.18228912 158.34751892]
[64.86713409 151.44052124]
[52.60476303 160.07963562]
[45.77947617 174.35289001]
[30.91881180 175.35787964]
[18.65644455 183.99699402]
[6.39407587 192.63610840]
[-5.86829185 201.27522278]
[-3.81438351 216.44230652]
[-9.05512428 230.82260132]
[-20.38623047 241.11166382]
[-35.20389557 244.94511414]
[-50.10313416 241.44206238]
[-61.66020203 231.40748596]
[-67.21937561 217.14724731]
[-65.50319672 201.93826294]
[-56.90602493 189.27543640]
[-43.40343857 182.06858826]
[-28.09822273 181.97380066]
[-14.50740814 189.01286316]
[-2.24503994 180.37374878]
[10.01732826 171.73463440]
[22.27969551 163.09550476]
[28.22789955 149.44018555]
[43.96564865 147.81726074]
[56.22801590 139.17814636]
[48.90602875 128.33909607]
[44.19789505 116.21140289]
[42.30914307 103.41136169]
[43.30287552 90.58202362]
[47.09818268 78.36088562]
[53.47572327 67.34822083]
[62.09017181 58.07761002]
[72.48878479 50.99008560]
[84.13514709 46.41321182]
[96.43679810 44.54604721]
[108.77535248 45.45063782]
[120.53760529 49.05051422]
[127.99251556 36.03420639]
[135.44743347 23.01789665]
[142.90234375 10.00158596]
[150.35725403 -3.01472306]
[157.81216431 -16.03103256]
[158.25134277 -59.46633148]
[162.55892944 -73.83451843]
[166.86651611 -88.20269775]
[171.17410278 -102.57088470]
[175.48168945 -116.93907166]
[161.72003174 -122.95359039]
[148.78372192 -130.58306885]
[136.86138916 -139.71626282]
[126.12688446 -150.21998596]
[116.73677063 -161.94104004]
[108.82798004 -174.70851135]
[102.51583862 -188.33621216]
[97.89239502 -202.62539673]
[95.02507782 -217.36772156]
[93.95570374 -232.34815979]
[94.69985962 -247.34828186]
[97.24669647 -262.14932251]
[101.55907440 -276.53546143]
[107.57411194 -290.29687500]
[115.20407867 -303.23291016]
[124.33771515 -315.15490723]
[134.84182739 -325.88900757]
[146.56323242 -335.27868652]
[159.33100891 -343.18701172]
[172.95893860 -349.49862671]
[187.24830627 -354.12155151]
[201.99073792 -356.98831177]
[216.97122192 -358.05712891]
[231.97131348 -357.31240845]
[246.77226257 -354.76501465]
[261.15823364 -350.45211792]
[274.91943359 -344.43655396]
[287.85516357 -336.80609131]
[299.77682495 -327.67202759]
[310.51052856 -317.16751099]
[319.89978027 -305.44573975]
[327.80761719 -292.67767334]
[334.11874390 -279.04949951]
[338.74111938 -264.75997925]
[341.60733032 -250.01744080]
[342.67559814 -235.03691101]
[341.93029785 -220.03684998]
[339.38235474 -205.23599243]
[335.06890869 -190.85018921]
[329.05285645 -177.08921814]
[321.42190552 -164.15374756]
[312.28738403 -152.23243713]
[301.78247070 -141.49911499]
[290.06036377 -132.11032104]
[277.29199219 -124.20295715]
[263.66357422 -117.89234924]
[249.37387085 -113.27050781]
[234.63122559 -110.40484619]
[219.65066528 -109.33715057]
[204.65063477 -110.08298492]
[189.84986877 -112.63148499]
[185.54228210 -98.26329803]
[181.23469543 -83.89511871]
[176.92710876 -69.52693176]
[172.61953735 -55.15874863]
[176.41448975 -48.68972015]
[187.79934692 -29.28263664]
[202.44285583 -26.03181076]
[215.63822937 -34.72994995]
[231.10224915 -31.46813011]
[239.66038513 -18.18153191]
[236.23526001 -2.75285602]
[222.85891724 5.66433525]
[207.46731567 2.07627296]
[199.19201660 -11.38830948]
[184.54852295 -14.63913536]
[170.82846069 -8.57612228]
[163.37355042 4.44018698]
[155.91864014 17.45649719]
[148.46372986 30.47280693]
[141.00881958 43.48911667]
[133.55390930 56.50542450]
[142.36563110 64.53462982]
[149.28273010 74.32802582]
[153.95695496 85.44377899]
[156.14208984 97.37251282]
[155.70669556 109.56063843]
[152.64164734 121.43605042]
[147.06193542 132.43498230]
[139.20265198 142.02873230]
[129.40917969 149.74909973]
[118.12202454 155.21119690]
[105.85713959 158.13253784]
[93.18228912 158.34751892]
[93.18228912 173.34751892]
[93.18228912 188.34751892]
[93.18228912 203.34751892]
[93.18228912 218.34751892]
[93.18228912 233.34751892]
[93.18228912 248.34751892]
[93.18228912 263.34750366]
[93.18228912 278.34750366]
[93.18228912 293.34750366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 29]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
