%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAxxxxxxxxxxUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.31227112 257.25015259]
[128.31227112 242.25016785]
[128.31227112 227.25016785]
[128.31227112 212.25016785]
[128.31227112 197.25016785]
[128.31227112 182.25016785]
[128.31227112 167.25016785]
[128.31227112 152.25016785]
[128.31227112 137.25016785]
[128.31227112 122.25016785]
[121.18893433 119.90326691]
[99.81889343 112.86256409]
[90.90274048 124.92499542]
[89.59331512 141.27178955]
[74.66773987 148.06584167]
[61.48016357 138.31802368]
[63.59683990 122.05605316]
[78.84030914 116.00885010]
[87.75646210 103.94641876]
[90.51270294 89.20182037]
[86.55609131 74.73305511]
[82.59948730 60.26428223]
[78.64287567 45.79551697]
[74.68626404 31.32674789]
[70.72965240 16.85798073]
[53.95235062 8.16258430]
[48.88288498 -9.71147346]
[58.27034760 -25.37520790]
[53.72305679 -39.66933823]
[49.17576599 -53.96346664]
[37.61900711 -64.76864624]
[41.13389969 -79.24258423]
[36.58660889 -93.53671265]
[32.03932190 -107.83084106]
[27.49202919 -122.12497711]
[1.62411141 -128.41412354]
[-10.96874237 -156.52738953]
[-25.47736740 -160.33525085]
[-39.98599243 -164.14309692]
[-54.49461746 -167.95095825]
[-69.00324249 -171.75881958]
[-83.51187134 -175.56668091]
[-99.17889404 -170.72145081]
[-111.02297211 -182.06384277]
[-106.85993195 -197.92578125]
[-90.97235107 -201.98985291]
[-79.70401001 -190.07530212]
[-65.19538879 -186.26744080]
[-50.68675995 -182.45959473]
[-36.17813492 -178.65173340]
[-21.66950989 -174.84387207]
[-7.16088390 -171.03601074]
[-1.08421731 -175.43193054]
[-13.20132828 -184.27363586]
[-8.53674507 -198.52992249]
[6.46322346 -198.49903870]
[11.06911564 -184.22377014]
[17.14578247 -188.61968994]
[18.06919670 -203.59124756]
[18.99260902 -218.56278992]
[19.60843468 -233.55015564]
[19.91641235 -248.54698181]
[20.22439003 -263.54382324]
[20.53236771 -278.54064941]
[9.86869526 -289.89514160]
[10.39466381 -305.09967041]
[21.28512573 -315.19586182]
[21.59310341 -330.19271851]
[21.90108109 -345.18954468]
[22.20905876 -360.18640137]
[8.40896225 -366.62667847]
[-1.57365239 -378.12741089]
[-6.00923681 -392.69607544]
[-4.12929964 -407.80850220]
[3.74044919 -420.84640503]
[16.23652840 -429.55087280]
[31.19391441 -432.41381836]
[46.02115250 -428.93923950]
[58.14933395 -419.72906494]
[65.47717285 -406.37905884]
[66.73508453 -391.20217896]
[61.70512390 -376.82791138]
[51.25876236 -365.74670410]
[37.20589447 -359.87841797]
[36.89791870 -344.88156128]
[36.58994293 -329.88473511]
[36.28196335 -314.88790894]
[46.74874496 -304.35308838]
[46.65004730 -289.13977051]
[35.52920532 -278.23269653]
[35.22122955 -263.23583984]
[34.91324997 -248.23901367]
[34.60527420 -233.24217224]
[37.25102234 -229.19876099]
[37.34230042 -223.43858337]
[33.96416092 -217.63938904]
[33.04074478 -202.66783142]
[32.11733246 -187.69628906]
[47.70950699 -179.18641663]
[56.96746826 -165.13520813]
[58.44741058 -149.31297302]
[52.66578293 -135.51916504]
[41.78615952 -126.67226410]
[46.33345032 -112.37813568]
[50.88074112 -98.08400726]
[55.42803192 -83.78987122]
[66.65953827 -74.00710297]
[63.46989441 -58.51075745]
[68.01718903 -44.21662903]
[72.56447601 -29.92249870]
[83.66015625 -26.97343826]
[92.02119446 -18.93104935]
[95.46975708 -7.72840500]
[93.02952576 3.85912585]
[85.19841766 12.90137100]
[89.15502930 27.37013817]
[93.11164093 41.83890533]
[97.06825256 56.30767441]
[101.02486420 70.77644348]
[104.98147583 85.24520874]
[101.20825195 70.72753906]
[100.92980957 55.73012161]
[104.16153717 41.08239365]
[110.72470856 27.59444237]
[120.25634766 16.01221848]
[132.22930908 6.97627401]
[145.98141479 0.98634142]
[160.75213623 -1.62630785]
[175.72456360 -0.71718150]
[190.07064819 3.66344142]
[202.99697876 11.27329159]
[213.78868103 21.69150734]
[221.84890747 34.34190750]
[226.73190308 48.52487183]
[228.16760254 63.45600510]
[226.07659912 78.30954742]
[220.57455444 92.26402283]
[211.96574402 104.54769135]
[200.72628784 114.48119354]
[187.47776794 121.51516724]
[172.95289612 125.26058960]
[157.95497131 125.51033783]
[143.31227112 122.25016785]
[143.31227112 137.25016785]
[143.31227112 152.25016785]
[143.31227112 167.25016785]
[143.31227112 182.25016785]
[143.31227112 197.25016785]
[143.31227112 212.25016785]
[143.31227112 227.25016785]
[143.31227112 242.25016785]
[143.31227112 257.25015259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 19]
[13 18]
[20 120]
[21 119]
[22 118]
[23 117]
[24 116]
[25 115]
[28 110]
[29 109]
[30 108]
[32 106]
[33 105]
[34 104]
[35 103]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[58 98]
[59 97]
[60 96]
[61 93]
[62 92]
[63 91]
[64 90]
[67 87]
[68 86]
[69 85]
[70 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
