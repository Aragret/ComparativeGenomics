%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUxxxxxxxxxxUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[212.87687683 414.18496704]
[212.87687683 399.18496704]
[212.87687683 384.18496704]
[212.87687683 369.18496704]
[212.87687683 354.18496704]
[212.87687683 339.18496704]
[212.87687683 324.18496704]
[212.87687683 309.18496704]
[212.87687683 294.18496704]
[212.87687683 279.18496704]
[213.09729004 264.76504517]
[218.59721375 253.72537231]
[227.02017212 247.63833618]
[216.80670166 236.65266418]
[206.59321594 225.66700745]
[196.37974548 214.68133545]
[182.84201050 221.02883911]
[167.98503113 222.88369751]
[153.26225281 220.05177307]
[140.11788940 212.79804993]
[129.84527588 201.82188416]
[123.45965576 188.18962097]
[121.59777069 173.23094177]
[124.45445251 158.40927124]
[131.76229858 145.17852783]
[121.54881287 134.19285583]
[111.33533478 123.20719147]
[97.83331299 130.06076050]
[80.59754944 128.46649170]
[65.03427887 116.72782135]
[50.03509140 116.57178497]
[35.03590393 116.41574097]
[27.83871460 129.92349243]
[15.18203545 138.52970886]
[-0.02572096 140.25675964]
[-14.28992367 134.70779419]
[-24.33276367 123.15789795]
[-27.84646797 108.26117706]
[-24.02361679 93.44077301]
[-13.74266911 82.10231018]
[0.63388622 76.85128784]
[15.80242252 78.89434814]
[28.27732086 87.76200867]
[35.19194031 101.41655731]
[50.19112778 101.57259369]
[65.19031525 101.72863007]
[68.07845306 94.80702209]
[73.85472870 80.96380615]
[76.74286652 74.04219055]
[66.08123779 63.49090195]
[55.41960907 52.93961334]
[44.75798416 42.38832474]
[34.09635925 31.83703232]
[18.29557419 32.16985321]
[6.94537067 21.17219925]
[6.77962303 5.36877918]
[17.89666557 -5.86451578]
[33.70095444 -5.86317110]
[44.81608582 5.37201548]
[44.64764786 21.17540741]
[55.30927277 31.72669792]
[65.97090149 42.27798843]
[76.63253021 52.82927704]
[87.29415131 63.38056946]
[90.33613586 69.18550110]
[93.01577759 75.13467407]
[93.32783508 60.13792419]
[93.63989258 45.14117050]
[79.59304047 39.39222336]
[68.57418823 28.95434189]
[62.07355118 15.23916340]
[60.97027969 0.10155340]
[65.41358185 -14.41125011]
[74.80254364 -26.33651161]
[87.86738586 -34.06143570]
[102.84118652 -36.54129028]
[117.69886780 -33.44069290]
[130.43104553 -25.17897987]
[139.31581116 -12.87347412]
[143.15156555 1.81160223]
[141.41954041 16.89021492]
[134.35400391 30.32310486]
[122.91048431 40.29358292]
[108.63665009 45.45322418]
[108.32459259 60.44997787]
[108.01253510 75.44673157]
[124.13451385 90.80278015]
[122.32099915 112.99371338]
[132.53448486 123.97937775]
[142.74795532 134.96504211]
[156.47532654 128.63916016]
[171.46556091 126.86838531]
[186.24911499 129.81364441]
[199.38069153 137.17414856]
[209.58038330 148.21807861]
[215.85858154 161.85536194]
[217.61186218 176.74516296]
[214.68101501 191.42781067]
[207.36540222 204.46784973]
[217.57888794 215.45352173]
[227.79235840 226.43917847]
[238.00584412 237.42485046]
[251.46180725 244.05334473]
[266.39611816 245.45565796]
[281.33041382 246.85795593]
[296.26473999 248.26025391]
[301.12387085 246.02232361]
[305.87185669 245.92658997]
[309.69711304 247.56030273]
[312.07681274 250.24441528]
[326.89456177 252.57553101]
[341.71234131 254.90663147]
[356.53009033 257.23773193]
[371.34783936 259.56884766]
[386.16558838 261.89993286]
[402.75195312 258.38858032]
[410.71765137 273.35467529]
[398.54156494 285.15209961]
[383.83450317 276.71771240]
[369.01675415 274.38659668]
[354.19897461 272.05548096]
[339.38122559 269.72439575]
[324.56347656 267.39328003]
[309.74569702 265.06219482]
[294.86242676 263.19458008]
[279.92813110 261.79226685]
[264.99380493 260.38995361]
[250.05950928 258.98764038]
[244.51385498 264.03698730]
[256.94763184 272.42752075]
[269.38140869 280.81802368]
[283.58380127 285.64422607]
[291.44198608 298.42111206]
[289.34249878 313.27346802]
[278.25073242 323.37164307]
[263.26708984 324.07214355]
[251.28157043 315.05288696]
[247.80529785 300.46310425]
[240.61392212 287.29937744]
[233.42253113 274.13562012]
[227.87687683 279.18496704]
[227.87687683 294.18496704]
[227.87687683 309.18496704]
[227.87687683 324.18496704]
[227.87687683 339.18496704]
[227.87687683 354.18496704]
[227.87687683 369.18496704]
[227.87687683 384.18496704]
[227.87687683 399.18496704]
[227.87687683 414.18496704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 102]
[14 101]
[15 100]
[16 99]
[25 90]
[26 89]
[27 88]
[30 46]
[31 45]
[32 44]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[66 86]
[67 85]
[68 84]
[103 128]
[104 127]
[105 126]
[106 125]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
