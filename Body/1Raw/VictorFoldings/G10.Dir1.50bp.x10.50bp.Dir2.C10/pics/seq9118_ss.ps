%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUxxxxxxxxxxAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.47698975 268.38751221]
[95.16493988 253.39076233]
[94.85288239 238.39401245]
[94.54082489 223.39726257]
[94.22876740 208.40051270]
[93.91670990 193.40374756]
[93.60465240 178.40699768]
[93.29260254 163.41024780]
[92.98054504 148.41349792]
[79.32430267 142.20808411]
[67.82250214 151.83660889]
[56.32069397 161.46513367]
[44.81889343 171.09365845]
[33.31708908 180.72219849]
[30.65256500 186.88723755]
[25.95811653 190.23289490]
[21.13067245 190.49992371]
[9.23829269 199.64166260]
[-2.65408659 208.78340149]
[-14.54646587 217.92512512]
[-23.41919708 232.37196350]
[-39.75765991 227.84526062]
[-39.93080139 210.89219666]
[-23.68820000 206.03274536]
[-11.79582119 196.89102173]
[0.09655894 187.74928284]
[11.98893833 178.60754395]
[23.68856239 169.22038269]
[35.19036484 159.59185791]
[46.69216919 149.96333313]
[58.19397354 140.33480835]
[69.69577789 130.70628357]
[66.84206390 92.77530670]
[91.52621460 76.76719666]
[90.90223694 61.78017807]
[90.27825928 46.79316330]
[89.65428162 31.80614662]
[75.46122742 22.66234016]
[69.55105591 7.02419806]
[74.05844879 -8.90217495]
[87.02492523 -18.92094231]
[86.08929443 -33.89173508]
[85.15367126 -48.86252594]
[84.21804047 -63.83331680]
[83.28240967 -78.80410767]
[82.34678650 -93.77490234]
[81.41115570 -108.74568939]
[80.47552490 -123.71648407]
[65.48125458 -124.55805206]
[50.69177246 -127.16716766]
[36.31469345 -131.50720215]
[22.55185318 -137.51724243]
[9.59645844 -145.11291504]
[-2.36961532 -154.18757629]
[-13.17838383 -164.61383057]
[-22.67811012 -176.24531555]
[-30.73542976 -188.91876221]
[-37.23723221 -202.45622253]
[-42.09224701 -216.66766357]
[-45.23230743 -231.35359192]
[-46.61334229 -246.30783081]
[-46.21595383 -261.32043457]
[-44.04573059 -276.18066406]
[-40.13313293 -290.67990112]
[-34.53308868 -304.61459351]
[-27.32421494 -317.78915405]
[-18.60771179 -330.01858521]
[-8.50594711 -341.13119507]
[2.83926797 -350.97103882]
[15.26866341 -359.39996338]
[28.60774994 -366.29959106]
[42.66926956 -371.57312012]
[57.25581741 -375.14651489]
[72.16262054 -376.96954346]
[87.18041229 -377.01669312]
[102.09837341 -375.28726196]
[116.70706940 -371.80554199]
[130.80142212 -366.62039185]
[144.18356323 -359.80462646]
[156.66561890 -351.45391846]
[168.07238770 -341.68551636]
[178.24372864 -330.63650513]
[187.03683472 -318.46203613]
[194.32827759 -305.33300781]
[200.01568604 -291.43374634]
[204.01924133 -276.95935059]
[206.28271484 -262.11303711]
[206.77435303 -247.10322571]
[205.48722839 -232.14062500]
[202.43942261 -217.43527222]
[197.67373657 -203.19361877]
[191.25704956 -189.61561584]
[183.27944946 -176.89184570]
[173.85293579 -165.20094299]
[163.10983276 -154.70703125]
[151.20097351 -145.55741882]
[138.29351807 -137.88056946]
[124.56867981 -131.78424072]
[110.21913147 -127.35402679]
[95.44631958 -124.65211487]
[96.38195038 -109.68132019]
[97.31757355 -94.71052551]
[98.25320435 -79.73973846]
[99.18883514 -64.76894379]
[100.12445831 -49.79815292]
[101.06008911 -34.82736206]
[101.99571991 -19.85657120]
[113.90913391 -13.75194359]
[121.29592896 -2.45828366]
[122.12783051 11.11958218]
[116.07935333 23.42523003]
[104.64129639 31.18216896]
[105.26527405 46.16918564]
[105.88925171 61.15620041]
[106.51322937 76.14321899]
[130.73672485 85.61604309]
[139.23463440 117.94062042]
[152.89086914 124.14602661]
[165.33815002 115.14819336]
[180.61834717 113.59545135]
[194.62117004 119.90547180]
[203.57994080 132.38088989]
[205.08479309 147.66587830]
[198.73091125 161.64886475]
[186.22746277 170.56848145]
[170.93783569 172.02540588]
[156.97483826 165.62773132]
[148.09445190 153.09638977]
[146.68545532 137.80226135]
[133.02922058 131.59686279]
[126.76624298 135.72300720]
[135.77569580 147.71591187]
[144.78514099 159.70881653]
[157.50602722 167.65733337]
[157.68644714 182.65625000]
[145.16043091 190.90844727]
[131.45033264 184.82296753]
[129.16764832 169.99786377]
[121.70395660 156.98657227]
[114.24028015 143.97529602]
[107.97729492 148.10144043]
[108.28935242 163.09819031]
[108.60140991 178.09494019]
[108.91346741 193.09170532]
[109.22552490 208.08845520]
[109.53757477 223.08520508]
[109.84963226 238.08195496]
[110.16168976 253.07872009]
[110.47374725 268.07546997]
[113.06474304 287.28320312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[17 27]
[18 26]
[19 25]
[20 24]
[34 115]
[35 114]
[36 113]
[37 112]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[48 100]
[117 130]
[118 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
