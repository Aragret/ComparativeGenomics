%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUxxxxxxxxxxCAAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.04056549 303.04788208]
[95.62634277 283.83944702]
[95.93431854 268.84262085]
[96.24229431 253.84577942]
[96.55027771 238.84893799]
[96.85825348 223.85209656]
[97.16622925 208.85525513]
[97.47420502 193.85841370]
[97.78218842 178.86158752]
[98.09016418 163.86474609]
[98.39813995 148.86790466]
[90.06343842 145.70925903]
[82.80048370 141.21464539]
[76.80585480 135.66323853]
[72.21147156 129.35922241]
[60.05813599 138.15106201]
[47.90480423 146.94290161]
[50.14829254 162.08309937]
[45.08786011 176.52783203]
[33.88635635 186.95783997]
[19.11780548 190.97636414]
[4.17591190 187.65997314]
[-7.50578547 177.77075195]
[-13.24291992 163.58119202]
[-11.71713829 148.35192871]
[-3.27905512 135.58253479]
[10.13232040 128.20733643]
[25.43515205 127.92108154]
[39.11296082 134.78956604]
[51.26629257 125.99772644]
[63.41962814 117.20588684]
[55.84747314 90.93921661]
[66.97909546 62.82817459]
[53.16551208 56.98138428]
[39.35192871 51.13459778]
[8.28250122 83.34866333]
[-6.53998041 81.04778290]
[-21.36246300 78.74691010]
[-36.18494415 76.44603729]
[-49.93156433 84.71707153]
[-64.91817474 78.99160767]
[-69.64833832 63.66173553]
[-60.49347687 50.48721313]
[-44.47641373 49.57441330]
[-33.88407135 61.62355423]
[-19.06158829 63.92443085]
[-4.23910570 66.22530365]
[10.58337688 68.52617645]
[13.64796352 61.68086624]
[22.84172440 41.14492798]
[11.25267601 31.62158966]
[-0.33637255 22.09825325]
[-11.92542076 12.57491493]
[-28.00154114 7.19024324]
[-27.27761650 -9.74824142]
[-10.80069256 -13.74164867]
[-2.40208340 0.98586684]
[9.18696499 10.50920391]
[20.77601242 20.03254128]
[32.36506271 29.55587959]
[45.19871521 37.32101440]
[59.01229858 43.16780472]
[72.82588196 49.01459122]
[85.24419403 40.60118103]
[84.93621826 25.60434341]
[84.62824249 10.60750484]
[70.09108734 6.46472120]
[57.42179871 -1.78030634]
[47.74691010 -13.39443493]
[41.92671585 -27.34494400]
[40.47873306 -42.39136505]
[43.53172302 -57.19577789]
[50.81421280 -70.44178772]
[61.67864990 -80.95156097]
[75.15897369 -87.79058838]
[90.05652618 -90.35073853]
[105.04662323 -88.40436554]
[118.79635620 -82.12454224]
[130.08311462 -72.06966400]
[137.90327454 -59.13380814]
[141.56149292 -44.46721649]
[140.73246765 -29.37403488]
[135.48991394 -15.19633961]
[126.30000305 -3.19480085]
[113.97988892 5.56341314]
[99.62507629 10.29952717]
[99.93305206 25.29636574]
[100.24103546 40.29320145]
[114.11391449 45.99786758]
[124.88259125 35.55585861]
[135.65127563 25.11384773]
[146.41995239 14.67183876]
[145.11671448 -0.91134351]
[154.17723083 -13.65657711]
[169.32341003 -17.54595375]
[183.40368652 -10.74302578]
[189.76979065 3.54006934]
[185.41583252 18.55929184]
[172.39761353 27.22302437]
[156.86195374 25.44051743]
[146.09327698 35.88252640]
[135.32460022 46.32453537]
[124.55592346 56.76654434]
[134.54795837 71.05207825]
[138.10244751 86.49558258]
[152.92494202 84.19470978]
[167.74742126 81.89383698]
[182.56990051 79.59295654]
[197.39237976 77.29208374]
[212.11660767 68.88771057]
[224.26860046 80.70994568]
[216.27239990 95.65975952]
[199.69325256 92.11456299]
[184.87077332 94.41544342]
[170.04829407 96.71631622]
[155.22581482 99.01718903]
[140.40333557 101.31806183]
[143.57669067 109.77455139]
[144.86718750 119.43126678]
[158.55781555 125.56044006]
[172.24842834 131.68960571]
[185.93905640 137.81878662]
[199.62968445 143.94796753]
[216.55679321 144.90147400]
[220.32644653 161.43101501]
[205.48641968 169.62918091]
[193.50051880 157.63858032]
[179.80989075 151.50941467]
[166.11926270 145.38023376]
[152.42863464 139.25106812]
[138.73800659 133.12188721]
[132.40225220 137.13539124]
[141.47842407 149.07788086]
[150.55459595 161.02037048]
[164.07514954 167.51611328]
[168.09518433 181.96739197]
[159.87123108 194.51199341]
[145.01571655 196.58889771]
[133.66670227 186.78074646]
[133.56991577 171.77961731]
[126.65032959 158.47100830]
[119.73073578 145.16238403]
[113.39498138 149.17588806]
[113.08699799 164.17272949]
[112.77902222 179.16955566]
[112.47104645 194.16639709]
[112.16307068 209.16323853]
[111.85508728 224.16007996]
[111.54711151 239.15690613]
[111.23913574 254.15374756]
[110.93115997 269.15057373]
[110.62317657 284.14743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[15 31]
[16 30]
[17 29]
[33 63]
[34 62]
[35 61]
[36 48]
[37 47]
[38 46]
[39 45]
[50 60]
[51 59]
[52 58]
[53 57]
[64 88]
[65 87]
[66 86]
[89 103]
[90 102]
[91 101]
[92 100]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
[119 131]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
