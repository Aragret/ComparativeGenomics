%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCCUAGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAAxxxxxxxxxxACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 286.43313599]
[92.50000000 271.43313599]
[92.50000000 256.43313599]
[92.50000000 241.43313599]
[92.50000000 226.43313599]
[92.50000000 211.43313599]
[92.50000000 196.43313599]
[92.50000000 181.43313599]
[92.50000000 166.43313599]
[92.50000000 151.43313599]
[66.22302246 139.50613403]
[50.35729599 115.40194702]
[35.53953552 117.73304749]
[20.72177887 120.06415558]
[10.22602844 135.77525330]
[-8.09620667 138.84007263]
[-22.62791824 127.78443909]
[-37.33588028 130.72991943]
[-52.04384232 133.67539978]
[-38.17345047 139.38612366]
[-27.46913147 149.89408875]
[-21.50265694 163.65640259]
[-21.15011024 178.65226746]
[-26.46325684 192.67974854]
[-36.66194534 203.67915344]
[-50.24864578 210.03536987]
[-65.22837067 210.81507874]
[-79.40156555 205.90380859]
[-90.68711090 196.02270508]
[-97.42790985 182.62263489]
[-98.63416290 167.67121887]
[-94.12876129 153.36383057]
[-84.57324982 141.80130005]
[-71.37134552 134.68159485]
[-86.30564880 133.27929688]
[-101.23995972 131.87698364]
[-116.17426300 130.47468567]
[-131.10856628 129.07238770]
[-147.44358826 133.61149597]
[-156.32728577 119.17140198]
[-144.91078186 106.63746643]
[-129.70626831 114.13807678]
[-114.77196503 115.54038239]
[-99.83765411 116.94268036]
[-84.90334320 118.34498596]
[-69.96903992 119.74729156]
[-54.98932266 118.96744537]
[-40.28136444 116.02196503]
[-25.57340050 113.07647705]
[-21.41866684 102.37000275]
[-12.50057125 94.94468689]
[-0.98224670 92.75334167]
[10.26794529 96.46037292]
[18.39067459 105.24639893]
[33.20843124 102.91529083]
[48.02619171 100.58419037]
[49.34591293 88.34746552]
[53.50579834 76.76409912]
[60.27259827 66.48355865]
[69.26690674 58.08228302]
[79.98441315 52.03131866]
[91.82418060 48.66994858]
[104.12237549 48.18664169]
[116.18942261 50.60849380]
[127.34873199 55.79971695]
[136.97460938 63.46923828]
[149.05459595 54.57688904]
[161.13458252 45.68453979]
[173.21456909 36.79219055]
[165.64872742 23.82337761]
[159.50427246 10.12382507]
[154.85083008 -4.15124130]
[151.74110413 -18.84007263]
[150.21037292 -33.77623367]
[150.27593994 -48.79048538]
[151.93707275 -63.71270752]
[155.17497253 -78.37381744]
[159.95292664 -92.60769653]
[166.21679688 -106.25305939]
[173.89562988 -119.15529633]
[182.90240479 -131.16821289]
[193.13505554 -142.15570068]
[204.47766113 -151.99325562]
[216.80168152 -160.56941223]
[229.96749878 -167.78698730]
[243.82591248 -173.56422424]
[258.21990967 -177.83563232]
[272.98638916 -180.55284119]
[287.95803833 -181.68504333]
[302.96520996 -181.21942139]
[317.83786011 -179.16123962]
[332.40750122 -175.53382874]
[346.50900269 -170.37829590]
[359.98260498 -163.75303650]
[372.67565918 -155.73313904]
[384.44430542 -146.40946960]
[395.15521240 -135.88766479]
[404.68704224 -124.28694916]
[412.93176270 -111.73877716]
[419.79595947 -98.38531494]
[425.20187378 -84.37787628]
[429.08819580 -69.87517548]
[431.41098022 -55.04153442]
[432.14382935 -40.04503250]
[431.27847290 -25.05559349]
[428.82473755 -10.24305916]
[424.81039429 4.22473574]
[419.28091431 18.18385887]
[412.29898071 31.47614288]
[403.94372559 43.95097351]
[394.30975342 55.46700668]
[383.50628662 65.89375305]
[371.65570068 75.11306763]
[358.89230347 83.02049255]
[345.36065674 89.52642822]
[331.21414185 94.55715942]
[316.61303711 98.05568695]
[301.72277832 99.98236084]
[286.71206665 100.31535339]
[271.75100708 99.05090332]
[257.00912476 96.20331573]
[242.65342712 91.80487823]
[228.84660339 85.90541077]
[215.74508667 78.57176971]
[203.49732971 69.88705444]
[192.24209595 59.94965363]
[182.10691833 48.87218094]
[170.02693176 57.76453018]
[157.94694519 66.65687561]
[145.86695862 75.54922485]
[149.40995789 83.86696625]
[151.45803833 92.67280579]
[151.94927979 101.70032501]
[150.86877441 110.67640686]
[148.24925232 119.32947540]
[144.16993713 127.39772797]
[138.75425720 134.63705444]
[132.16606140 140.82844543]
[124.60469818 145.78457642]
[116.29891205 149.35548401]
[107.50000000 151.43313599]
[107.50000000 166.43313599]
[107.50000000 181.43313599]
[107.50000000 196.43313599]
[107.50000000 211.43313599]
[107.50000000 226.43313599]
[107.50000000 241.43313599]
[107.50000000 256.43313599]
[107.50000000 271.43313599]
[107.50000000 286.43313599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 56]
[13 55]
[14 54]
[17 49]
[18 48]
[19 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[66 130]
[67 129]
[68 128]
[69 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
