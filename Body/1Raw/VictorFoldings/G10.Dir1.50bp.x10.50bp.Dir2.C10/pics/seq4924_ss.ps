%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUxxxxxxxxxxGGAUUCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.22631836 236.30383301]
[94.92619324 221.30683899]
[94.62606049 206.30984497]
[94.32592773 191.31285095]
[94.02579498 176.31584167]
[93.72566223 161.31884766]
[93.42552948 146.32185364]
[93.12539673 131.32485962]
[92.82526398 116.32785797]
[78.41001892 112.18048096]
[70.18597412 124.72499847]
[61.96192169 137.26951599]
[61.57338715 153.66406250]
[47.05328369 161.28631592]
[33.33865356 152.29515076]
[34.53793335 135.93991089]
[49.41740036 129.04547119]
[57.64145279 116.50094604]
[65.86550140 103.95642853]
[55.74702454 92.88319397]
[42.51378632 99.94587708]
[29.28055000 107.00855255]
[16.04731178 114.07122803]
[12.99713707 129.40844727]
[0.76969695 139.15646362]
[-14.86158466 138.71255493]
[-26.51609421 128.28631592]
[-28.69092941 112.80070496]
[-20.35919952 99.56755066]
[-5.45489216 94.83515167]
[8.98463440 100.83798981]
[22.21787262 93.77531433]
[35.45111084 86.71263885]
[48.68434906 79.64995575]
[76.32080078 77.02203369]
[95.72388458 90.09654236]
[99.29119873 75.52690125]
[102.85851288 60.95726776]
[106.42582703 46.38763428]
[98.49153900 32.98297882]
[102.31684875 18.25811195]
[115.14503479 10.77658939]
[118.71234894 -3.79304600]
[122.27966309 -18.36268234]
[125.84697723 -32.93231583]
[129.41429138 -47.50195312]
[116.47880554 -99.81495667]
[113.49726868 -114.51564789]
[110.51573944 -129.21635437]
[107.53421021 -143.91703796]
[104.44933319 -147.15197754]
[102.75994110 -150.83686829]
[102.43331909 -154.46629333]
[103.27232361 -157.59963989]
[104.95191193 -159.91020203]
[103.15531921 -174.80221558]
[101.35873413 -189.69424438]
[86.33906555 -190.37214661]
[71.63586426 -193.51310730]
[57.65023041 -199.03143311]
[44.76371002 -206.77659607]
[33.32785797 -216.53727722]
[23.65464592 -228.04722595]
[16.00797272 -240.99243164]
[10.59644032 -255.01972961]
[7.56768227 -269.74645996]
[7.00432491 -284.77084351]
[8.92173672 -299.68304443]
[13.26760864 -314.07620239]
[19.92338181 -327.55770874]
[28.70748520 -339.75973511]
[39.38027573 -350.34939575]
[51.65060043 -359.03784180]
[65.18370819 -365.58801270]
[79.61041260 -369.82125854]
[94.53713226 -371.62200928]
[109.55666351 -370.94122314]
[124.25926208 -367.79742432]
[138.24383545 -362.27639771]
[151.12886047 -354.52877808]
[162.56283569 -344.76586914]
[172.23382568 -333.25405884]
[179.87800598 -320.30740356]
[185.28683472 -306.27905273]
[188.31275940 -291.55172729]
[188.87321472 -276.52722168]
[186.95294189 -261.61541748]
[182.60429382 -247.22308350]
[175.94592285 -233.74287415]
[167.15946960 -221.54254150]
[156.48463440 -210.95492554]
[144.21263123 -202.26884460]
[130.67826843 -195.72126770]
[116.25075531 -191.49082947]
[118.04734039 -176.59881592]
[119.84393311 -161.70678711]
[122.23490906 -146.89857483]
[125.21643829 -132.19787598]
[128.19796753 -117.49718475]
[131.17950439 -102.79648590]
[144.68472290 -96.26892090]
[158.05662537 -103.06540680]
[171.42852783 -109.86188507]
[184.80043030 -116.65837097]
[196.18080139 -129.22512817]
[211.40684509 -121.76834106]
[208.45645142 -105.07308197]
[191.59690857 -103.28646088]
[178.22500610 -96.48998260]
[164.85310364 -89.69349670]
[151.48120117 -82.89701843]
[155.19410706 -68.36380005]
[170.18734741 -68.81396484]
[185.18058777 -69.26412201]
[197.18170166 -79.91085052]
[212.96293640 -77.02426910]
[220.41827393 -62.81872559]
[213.82861328 -48.19149017]
[198.24899292 -44.36333084]
[185.63075256 -54.27087784]
[170.63751221 -53.82071686]
[155.64425659 -53.37055588]
[143.98391724 -43.93463898]
[140.41661072 -29.36500359]
[136.84930420 -14.79536819]
[133.28198242 -0.22573295]
[129.71467590 14.34390259]
[137.63534546 26.90569496]
[134.22512817 41.73219299]
[120.99546051 49.95494843]
[117.42814636 64.52458191]
[113.86083221 79.09421539]
[110.29351807 93.66385651]
[118.99714661 81.44718933]
[131.81037903 73.64839172]
[146.65994263 71.52935028]
[161.14309692 75.43292999]
[172.91639709 84.72752380]
[180.07484436 97.90921021]
[181.46015930 112.84510040]
[176.84817505 127.11849213]
[166.98516846 138.41986084]
[153.46701050 144.92057800]
[138.48101807 145.56880188]
[124.45202637 140.25962830]
[113.64999390 129.85211182]
[107.82225800 116.02772522]
[108.12239075 131.02471924]
[108.42252350 146.02172852]
[108.72265625 161.01872253]
[109.02278900 176.01571655]
[109.32292175 191.01271057]
[109.62305450 206.00970459]
[109.92318726 221.00671387]
[110.22332001 236.00370789]
[112.79904175 255.21348572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 19]
[11 18]
[12 17]
[20 34]
[21 33]
[22 32]
[23 31]
[36 133]
[37 132]
[38 131]
[39 130]
[42 127]
[43 126]
[44 125]
[45 124]
[46 123]
[47 100]
[48 99]
[49 98]
[50 97]
[55 96]
[56 95]
[57 94]
[101 111]
[102 110]
[103 109]
[104 108]
[112 122]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
