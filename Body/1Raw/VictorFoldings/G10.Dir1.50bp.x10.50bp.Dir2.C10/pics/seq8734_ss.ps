%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACxxxxxxxxxxAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.83494568]
[92.50000000 234.83494568]
[92.50000000 219.83494568]
[92.50000000 204.83494568]
[92.50000000 189.83494568]
[92.50000000 174.83494568]
[92.50000000 159.83494568]
[92.50000000 144.83494568]
[92.50000000 129.83494568]
[92.50000000 114.83493805]
[85.87870789 111.31237030]
[73.15631104 119.25848389]
[72.63612366 104.26723480]
[66.01483154 100.74466705]
[53.57538986 109.12680817]
[41.13594818 117.50895691]
[28.69650841 125.89109802]
[16.25706673 134.27323914]
[17.40139580 149.58944702]
[10.71985912 163.41885376]
[-1.99024439 172.04142761]
[-17.30995941 173.13774109]
[-31.11836052 166.41290283]
[-39.70105743 153.67582703]
[-40.74934387 138.35275269]
[-33.98124313 124.56549835]
[-21.21733284 116.02276611]
[-5.89104700 115.02251434]
[7.87492418 121.83380127]
[20.31436539 113.45166016]
[32.75380325 105.06951141]
[45.19324493 96.68737030]
[57.63268661 88.30522919]
[79.58872223 80.78101349]
[96.07881165 88.53263092]
[100.08655548 74.07794189]
[104.09429169 59.62324905]
[98.79433441 42.31176376]
[110.65788269 30.08081245]
[110.34582520 15.08405876]
[110.03377533 0.08730517]
[109.72171783 -14.90944862]
[94.75048828 -16.00338745]
[79.94747925 -18.49446487]
[65.44278717 -22.36078644]
[51.36388397 -27.56837463]
[37.83449936 -34.07146454]
[24.97352791 -41.81290436]
[12.89399719 -50.72466278]
[1.70206547 -60.72841644]
[-8.50391102 -71.73625946]
[-17.63423920 -83.65144348]
[-25.60868073 -96.36925507]
[-32.35715103 -109.77793121]
[-37.82035065 -123.75962830]
[-41.95025635 -138.19148254]
[-44.71058273 -152.94665527]
[-46.07706833 -167.89547729]
[-46.03770447 -182.90657043]
[-44.59283829 -197.84800720]
[-41.75516510 -212.58850098]
[-37.54962540 -226.99848938]
[-32.01317596 -240.95135498]
[-25.19447136 -254.32444763]
[-17.15344048 -267.00027466]
[-7.96074724 -278.86740112]
[2.30282068 -289.82156372]
[13.54706478 -299.76647949]
[25.67316818 -308.61477661]
[38.57456207 -316.28863525]
[52.13786697 -322.72070312]
[66.24388885 -327.85437012]
[80.76865387 -331.64456177]
[95.58452606 -334.05798340]
[110.56128693 -335.07339478]
[125.56732941 -334.68185425]
[140.47076416 -332.88687134]
[155.14062500 -329.70416260]
[169.44798279 -325.16171265]
[183.26712036 -319.29943848]
[196.47656250 -312.16888428]
[208.96025085 -303.83270264]
[220.60845947 -294.36410522]
[231.31881714 -283.84637451]
[240.99720764 -272.37191772]
[249.55857849 -260.04159546]
[256.92767334 -246.96369934]
[263.03973389 -233.25323486]
[267.84109497 -219.03065491]
[271.28948975 -204.42097473]
[273.35464478 -189.55256653]
[274.01840210 -174.55609131]
[273.27496338 -159.56336975]
[271.13079834 -144.70614624]
[267.60482788 -130.11499023]
[262.72796631 -115.91813660]
[256.54312134 -102.24034119]
[249.10462952 -89.20181274]
[240.47785950 -76.91712952]
[230.73861694 -65.49427032]
[219.97251892 -55.03360367]
[208.27415466 -45.62707138]
[195.74635315 -37.35733414]
[182.49919128 -30.29707146]
[168.64910889 -24.50832939]
[154.31781006 -20.04198265]
[139.63124084 -16.93727875]
[124.71846771 -15.22150517]
[125.03052521 -0.22475106]
[125.34258270 14.77200222]
[125.65464020 29.76875687]
[135.04179382 41.46837997]
[149.61450195 45.02314377]
[164.85517883 40.77667236]
[175.38627625 51.30972672]
[189.95896912 54.86448669]
[204.36000061 47.79412079]
[218.80461121 54.77500916]
[222.21214294 70.45201111]
[211.96862793 82.79906464]
[195.93200684 82.34458160]
[186.40422058 69.43718719]
[171.83151245 65.88243103]
[157.63317871 70.38315582]
[146.05973816 59.59584427]
[131.48704529 56.04108429]
[118.54898071 63.63099289]
[114.54124451 78.08567810]
[110.53350067 92.54036713]
[120.42861176 81.26708984]
[134.32717896 75.62531281]
[149.28015137 76.81214142]
[162.11473083 84.57575226]
[170.10762024 97.26881409]
[171.56283569 112.19805908]
[166.17160034 126.19572449]
[155.07786560 136.29171753]
[140.63554382 140.34382629]
[125.90909576 137.49223328]
[114.02323151 128.34204102]
[107.50000000 114.83493805]
[107.50000000 129.83494568]
[107.50000000 144.83494568]
[107.50000000 159.83494568]
[107.50000000 174.83494568]
[107.50000000 189.83494568]
[107.50000000 204.83494568]
[107.50000000 219.83494568]
[107.50000000 234.83494568]
[107.50000000 249.83494568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[35 129]
[36 128]
[37 127]
[39 111]
[40 110]
[41 109]
[42 108]
[112 126]
[113 125]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
