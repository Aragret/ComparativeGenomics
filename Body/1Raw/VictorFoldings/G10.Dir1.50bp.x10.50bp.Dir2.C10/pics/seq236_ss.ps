%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACAUCAUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUxxxxxxxxxxCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.19924927 112.85379028]
[77.81296539 119.62190247]
[64.42668152 126.39001465]
[51.04039764 133.15812683]
[37.65411377 139.92625427]
[24.33895683 146.83325195]
[11.09637165 153.87838745]
[-2.14621377 160.92352295]
[-15.38879967 167.96864319]
[-28.63138580 175.01377869]
[-24.20208549 189.39355469]
[-22.57448769 204.35174561]
[-23.80742645 219.34762573]
[-27.85633087 233.83909607]
[-34.57483673 247.30230713]
[-43.72007370 259.25057983]
[-54.96145248 269.25198364]
[-67.89259338 276.94497681]
[-82.04605103 282.05145264]
[-96.91018677 284.38681030]
[-111.94767761 283.86663818]
[-126.61491394 280.50976562]
[-140.38168335 274.43750000]
[-152.75035095 265.86938477]
[-163.27375793 255.11511230]
[-171.57153320 242.56347656]
[-177.34368896 228.66819763]
[-180.38156128 213.93159485]
[-180.57534790 198.88635254]
[-177.91804504 184.07638550]
[-172.50570679 170.03704834]
[-164.53398132 157.27584839]
[-154.29104614 146.25410461]
[-142.14718628 137.37025452]
[-128.54136658 130.94541931]
[-113.96546173 127.21186066]
[-98.94636536 126.30455780]
[-84.02700806 128.25630188]
[-69.74671936 132.99653625]
[-56.62172318 140.35391235]
[-45.12647247 150.06245422]
[-35.67652130 161.77119446]
[-22.43393517 154.72605896]
[-9.19134903 147.68092346]
[4.05123663 140.63578796]
[17.29382324 133.59066772]
[21.75062370 127.63393402]
[30.88599777 126.53996277]
[44.27228165 119.77185059]
[57.65856934 113.00373077]
[71.04485321 106.23561859]
[84.43113708 99.46750641]
[93.44866943 87.48066711]
[96.24098969 72.74286652]
[99.03331757 58.00505829]
[101.51843262 43.21235275]
[103.69527435 28.37114525]
[98.04259491 13.59421062]
[107.54499817 2.12452936]
[109.72183990 -12.71667576]
[111.89867401 -27.55788231]
[114.07550812 -42.39908600]
[116.25234985 -57.24029160]
[118.42918396 -72.08149719]
[104.27869415 -77.21456909]
[91.45132446 -85.09133911]
[80.47235107 -95.38925171]
[71.79135132 -107.68661499]
[65.76380920 -121.47986603]
[62.63655472 -136.20416260]
[62.53764343 -151.25657654]
[65.47112274 -166.02070618]
[71.31686401 -179.89198303]
[79.83550262 -192.30236816]
[90.67819214 -202.74368286]
[103.40093994 -210.78834534]
[117.48274994 -216.10693359]
[132.34698486 -218.48167419]
[147.38496399 -217.81530762]
[161.98089600 -214.13511658]
[175.53707886 -207.59181213]
[187.49839783 -198.45333862]
[197.37504578 -187.09390259]
[204.76257324 -173.97866821]
[209.35847473 -159.64469910]
[210.97454834 -144.67897034]
[209.54461670 -129.69430542]
[205.12722778 -115.30432129]
[197.90328979 -102.09827423]
[188.16859436 -90.61695862]
[176.32179260 -81.33051300]
[162.84797668 -74.61921692]
[148.29891968 -70.75789642]
[133.27038574 -69.90466309]
[131.09355164 -55.06345749]
[128.91671753 -40.22225189]
[126.73987579 -25.38104439]
[124.56304169 -10.53983879]
[122.38620758 4.30136633]
[128.19458008 18.01675987]
[118.53647614 30.54798317]
[116.35964203 45.38918686]
[118.48206329 49.73324585]
[117.85232544 55.46340561]
[113.77112579 60.79738235]
[110.97879791 75.53518677]
[108.18647003 90.27299500]
[111.15422058 91.32551575]
[113.99388885 93.22659302]
[128.97360229 94.00643921]
[143.95330811 94.78627777]
[158.93302917 95.56612396]
[173.28842163 87.63803101]
[187.19041443 96.33668518]
[186.33782959 112.71365356]
[171.60772705 119.92172241]
[158.15318298 110.54583740]
[143.17346191 109.76599884]
[128.19375610 108.98615265]
[113.21404266 108.20630646]
[125.98609924 116.07234192]
[140.76603699 118.63233185]
[154.79394531 123.94438171]
[167.56236267 131.81632996]
[178.60939026 141.96339417]
[187.53541565 154.01852417]
[194.01754761 167.54560852]
[197.82127380 182.05531311]
[198.80899048 197.02276611]
[196.94499207 211.90649414]
[192.29669189 226.16810608]
[185.03225708 239.29165649]
[175.41445923 250.80244446]
[163.79122925 260.28402710]
[150.58303833 267.39343262]
[136.26768494 271.87347412]
[121.36304474 273.56210327]
[106.40826416 272.39819336]
[91.94435120 268.42388916]
[78.49452972 261.78292847]
[66.54534149 252.71556091]
[56.52905655 241.54980469]
[48.80801010 228.68959045]
[43.66150665 214.60009766]
[41.27572632 199.79104614]
[41.73696899 184.79814148]
[45.02855301 170.16374207]
[51.03140259 156.41726685]
[59.52836990 144.05596924]
[70.21207428 133.52703857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[5 48]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[53 107]
[54 106]
[55 105]
[56 102]
[57 101]
[59 99]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
