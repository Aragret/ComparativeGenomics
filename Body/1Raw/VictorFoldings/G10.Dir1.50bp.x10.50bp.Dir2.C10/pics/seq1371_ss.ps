%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACxxxxxxxxxxGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 286.87039185]
[92.50000000 271.87039185]
[92.50000000 256.87039185]
[92.50000000 241.87040710]
[92.50000000 226.87040710]
[92.50000000 211.87040710]
[92.50000000 196.87040710]
[92.50000000 181.87040710]
[92.50000000 166.87040710]
[92.50000000 151.87040710]
[71.53065491 144.00323486]
[55.76024628 128.10040283]
[48.06869507 107.06600952]
[49.86059952 84.74124908]
[60.80872726 65.20297241]
[78.91378021 52.01916885]
[74.90604401 37.56447983]
[70.89830017 23.10979080]
[66.89056396 8.65510273]
[62.88282013 -5.79958630]
[58.87508011 -20.25427437]
[54.86734009 -34.70896149]
[40.17401123 -31.66400909]
[25.31156158 -29.59680557]
[10.34498501 -28.51639366]
[-4.66027451 -28.42749786]
[-19.63860130 -29.33050728]
[-34.52449799 -31.22147179]
[-49.25287628 -34.09212494]
[-63.75932693 -37.92991257]
[-77.98041534 -42.71805191]
[-91.85396576 -48.43560410]
[-105.31929779 -55.05757141]
[-118.31754303 -62.55499649]
[-130.79185486 -70.89509583]
[-142.68768311 -80.04139709]
[-153.95303345 -89.95390320]
[-164.53860474 -100.58927155]
[-174.39814758 -111.90100098]
[-183.48852539 -123.83962250]
[-191.77000427 -136.35293579]
[-199.20634460 -149.38621521]
[-205.76506042 -162.88247681]
[-211.41744995 -176.78269958]
[-216.13880920 -191.02610779]
[-219.90847778 -205.55039978]
[-222.70999146 -220.29208374]
[-224.53108215 -235.18669128]
[-225.36380005 -250.16909790]
[-225.20449829 -265.17376709]
[-224.05386353 -280.13510132]
[-221.91694641 -294.98770142]
[-218.80307007 -309.66656494]
[-214.72587585 -324.10757446]
[-209.70317078 -338.24752808]
[-203.75692749 -352.02459717]
[-196.91314697 -365.37857056]
[-189.20176697 -378.25100708]
[-180.65647888 -390.58566284]
[-171.31466675 -402.32861328]
[-161.21719360 -413.42843628]
[-150.40818787 -423.83666992]
[-138.93492126 -433.50775146]
[-126.84757996 -442.39944458]
[-114.19900513 -450.47280884]
[-101.04450989 -457.69256592]
[-87.44161224 -464.02713013]
[-73.44980621 -469.44885254]
[-59.13025665 -473.93395996]
[-44.54559708 -477.46289062]
[-29.75959015 -480.02020264]
[-14.83689976 -481.59469604]
[0.15722294 -482.17947388]
[15.15721226 -481.77200317]
[30.09747696 -480.37408447]
[44.91268539 -477.99179077]
[59.53805161 -474.63555908]
[73.90962982 -470.32006836]
[87.96456909 -465.06417847]
[101.64141083 -458.89086914]
[114.88035583 -451.82714844]
[127.62350464 -443.90390015]
[139.81513977 -435.15576172]
[151.40194702 -425.62100220]
[162.33325195 -415.34130859]
[172.56127930 -404.36163330]
[182.04127502 -392.72998047]
[190.73179626 -380.49722290]
[198.59484863 -367.71685791]
[205.59605408 -354.44473267]
[211.70477295 -340.73892212]
[216.89431763 -326.65936279]
[221.14198303 -312.26757812]
[224.42918396 -297.62655640]
[226.74157715 -282.80026245]
[228.06901550 -267.85357666]
[228.40573120 -252.85182190]
[227.75021362 -237.86062622]
[226.10536194 -222.94552612]
[223.47834778 -208.17175293]
[219.88067627 -193.60389709]
[215.32806396 -179.30566406]
[209.84042358 -165.33958435]
[203.44174194 -151.76672363]
[196.16001892 -138.64642334]
[188.02708435 -126.03607178]
[179.07849121 -113.99079895]
[169.35339355 -102.56328583]
[158.89430237 -91.80348969]
[147.74696350 -81.75847626]
[135.96009827 -72.47216034]
[123.58526611 -63.98515320]
[110.67658234 -56.33456421]
[97.29048157 -49.55384827]
[83.48551178 -43.67265701]
[69.32202911 -38.71670151]
[73.32976532 -24.26201439]
[77.33750916 -9.80732632]
[81.34525299 4.64736223]
[85.35298920 19.10205078]
[89.36073303 33.55673981]
[93.36846924 48.01142883]
[101.96985626 47.62721634]
[110.51808167 48.65646362]
[118.78243256 51.07138824]
[126.53988647 54.80681992]
[133.58106995 59.76194382]
[139.71594238 65.80303192]
[144.77894592 72.76703644]
[148.63345337 80.46601868]
[151.17539978 88.69219208]
[152.33622742 97.22354126]
[152.08456421 105.82982635]
[150.42723083 114.27877045]
[147.40895081 122.34236145]
[143.11116028 129.80296326]
[137.64988708 136.45922852]
[131.17250061 142.13151550]
[123.85380554 146.66674805]
[115.89134216 149.94250488]
[107.50000000 151.87040710]
[107.50000000 166.87040710]
[107.50000000 181.87040710]
[107.50000000 196.87040710]
[107.50000000 211.87040710]
[107.50000000 226.87040710]
[107.50000000 241.87040710]
[107.50000000 256.87039185]
[107.50000000 271.87039185]
[107.50000000 286.87039185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 122]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[22 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
