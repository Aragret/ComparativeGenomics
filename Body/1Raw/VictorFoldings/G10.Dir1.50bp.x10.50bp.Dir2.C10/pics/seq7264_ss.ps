%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGxxxxxxxxxxAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.01600647]
[92.50000000 235.01600647]
[92.50000000 220.01600647]
[92.50000000 205.01600647]
[92.50000000 190.01600647]
[92.50000000 175.01600647]
[92.50000000 160.01600647]
[92.50000000 145.01600647]
[92.50000000 130.01600647]
[92.50000000 115.01599884]
[86.03097534 111.22104645]
[78.83959198 124.38478851]
[75.23133087 138.94433594]
[60.29059601 140.27639771]
[54.16355515 126.58482361]
[65.11155701 116.33145142]
[73.09291840 103.63114166]
[66.62388611 99.83618164]
[53.53073502 107.15528870]
[40.43758011 114.47439575]
[32.16706848 127.96176910]
[17.28238487 127.41820526]
[4.18922997 134.73730469]
[-3.73716688 149.09364319]
[-20.13625717 149.13677979]
[-28.13806343 134.82234192]
[-19.51101303 120.87579346]
[-3.12987590 121.64415741]
[9.96327877 114.32505035]
[17.29727936 101.36119080]
[33.11847305 101.38124084]
[46.21162796 94.06213379]
[59.30478287 86.74302673]
[80.20029449 81.20422363]
[95.76648712 88.98491669]
[99.47264099 74.44998169]
[103.17880249 59.91504669]
[106.88496399 45.38011169]
[110.59112549 30.84517479]
[114.29728699 16.31023979]
[108.41339874 9.92385006]
[105.43667603 1.93950379]
[105.69398499 -6.41524887]
[92.75592804 -14.00515747]
[79.81787109 -21.59506607]
[66.87982178 -29.18497467]
[53.94176483 -36.77488327]
[41.00370789 -44.36479187]
[24.61013031 -43.93738556]
[16.27508736 -58.06038284]
[24.57295609 -72.20525360]
[40.96759796 -71.82096863]
[48.59361649 -57.30284500]
[61.53166962 -49.71293640]
[74.46972656 -42.12303162]
[87.40778351 -34.53312302]
[100.34584045 -26.94321251]
[113.28389740 -19.35330582]
[122.43649292 -23.73056984]
[132.57740784 -23.42630577]
[141.34361267 -35.59814072]
[150.10981750 -47.76997757]
[158.87602234 -59.94181442]
[147.74980164 -70.02581787]
[137.82260132 -81.29216766]
[129.21928406 -93.59919739]
[122.04803467 -106.79212189]
[116.39905548 -120.70503235]
[112.34336853 -135.16294861]
[109.93199158 -149.98405457]
[109.19525146 -164.98196411]
[110.14240265 -179.96806335]
[112.76154327 -194.75386047]
[117.01972961 -209.15344238]
[122.86341095 -222.98570251]
[130.21910095 -236.07669067]
[138.99429321 -248.26176453]
[149.07861328 -259.38769531]
[160.34527588 -269.31454468]
[172.65255737 -277.91751099]
[185.84570312 -285.08834839]
[199.75877380 -290.73690796]
[214.21681213 -294.79217529]
[229.03799438 -297.20309448]
[244.03591919 -297.93939209]
[259.02197266 -296.99179077]
[273.80770874 -294.37222290]
[288.20718384 -290.11358643]
[302.03924561 -284.26950073]
[315.13000488 -276.91342163]
[327.31481934 -268.13787842]
[338.44046021 -258.05319214]
[348.36697388 -246.78625488]
[356.96957397 -234.47871399]
[364.14001465 -221.28535461]
[369.78817749 -207.37211609]
[373.84298706 -192.91395569]
[376.25347900 -178.09269714]
[376.98931885 -163.09474182]
[376.04125977 -148.10870361]
[373.42123413 -133.32305908]
[369.16220093 -118.92373657]
[363.31768799 -105.09182739]
[355.96121216 -92.00128174]
[347.18530273 -79.81673431]
[337.10031128 -68.69140625]
[325.83306885 -58.76522064]
[313.52526855 -50.16300583]
[300.33169556 -42.99294662]
[286.41827393 -37.34521103]
[271.95999146 -33.29082489]
[257.13867188 -30.88077927]
[242.14070129 -30.14538002]
[227.15469360 -31.09387779]
[212.36911011 -33.71434402]
[197.96992493 -37.97382355]
[184.13818359 -43.81874466]
[171.04786682 -51.17560959]
[162.28164673 -39.00377274]
[153.51544189 -26.83193588]
[144.74923706 -14.66009808]
[146.84901428 6.89612579]
[128.83222961 20.01639938]
[125.12606812 34.55133820]
[121.41990662 49.08627319]
[117.71374512 63.62120819]
[114.00758362 78.15614319]
[110.30142212 92.69107819]
[119.60726929 80.92668152]
[132.98971558 74.15097809]
[147.98010254 73.61389160]
[161.81314087 79.41448975]
[171.93705750 90.48274231]
[176.48431396 104.77688599]
[174.61604309 119.66008759]
[166.67691040 132.38684082]
[154.13143921 140.60943604]
[139.29388428 142.81105042]
[124.90134430 138.58557129]
[113.60879517 128.71246338]
[107.50000000 115.01599884]
[107.50000000 130.01600647]
[107.50000000 145.01600647]
[107.50000000 160.01600647]
[107.50000000 175.01600647]
[107.50000000 190.01600647]
[107.50000000 205.01600647]
[107.50000000 220.01600647]
[107.50000000 235.01600647]
[107.50000000 250.01600647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 33]
[19 32]
[20 31]
[22 29]
[23 28]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[60 121]
[61 120]
[62 119]
[63 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
