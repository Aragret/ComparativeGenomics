%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAxxxxxxxxxxAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.16146851 263.98922729]
[79.16146851 248.98924255]
[79.16146851 233.98924255]
[79.16146851 218.98924255]
[79.16146851 203.98924255]
[79.16146851 188.98924255]
[79.16146851 173.98924255]
[79.16146851 158.98924255]
[79.16146851 143.98924255]
[79.16146851 128.98924255]
[77.13570404 117.36686707]
[79.60690308 107.48213196]
[85.28861237 100.79075623]
[92.48692322 98.12757111]
[81.71823883 87.68556213]
[70.94956207 77.24355316]
[57.80792999 70.01184845]
[43.22418213 66.50268555]
[25.72681999 72.14830017]
[13.45302486 59.64236069]
[-1.19969964 56.43336487]
[-15.85242462 53.22436905]
[-29.05850410 61.48495102]
[-43.87273788 58.02183533]
[-51.66655350 45.38095093]
[-66.31928253 42.17195511]
[-80.97200775 38.96295929]
[-95.62473297 35.75396347]
[-110.27745056 32.54496765]
[-124.93017578 29.33596992]
[-139.58290100 26.12697411]
[-154.23562622 22.91797829]
[-168.95115662 20.01050568]
[-183.72326660 17.40578270]
[-198.65734863 22.62916183]
[-209.84770203 12.79934025]
[-224.61981201 10.19461727]
[-239.39193726 7.58989525]
[-254.16404724 4.98517227]
[-268.93615723 2.38044977]
[-284.15286255 8.49468803]
[-296.88757324 -1.83776975]
[-294.03988647 -17.98777771]
[-278.53927612 -23.34159088]
[-266.33145142 -12.39166641]
[-251.55932617 -9.78694344]
[-236.78721619 -7.18222141]
[-222.01509094 -4.57749844]
[-207.24298096 -1.97277594]
[-193.36549377 -7.38246155]
[-181.11854553 2.63366652]
[-166.34643555 5.23838902]
[-161.94502258 3.24417567]
[-156.23902893 4.03754139]
[-151.02662659 8.26525307]
[-136.37390137 11.47424889]
[-121.72118378 14.68324566]
[-107.06845856 17.89224243]
[-92.41573334 21.10123825]
[-77.76300812 24.31023407]
[-63.11028290 27.51922989]
[-48.45755768 30.72822762]
[-36.09375763 22.50192833]
[-21.18809700 25.54757309]
[-12.64342785 38.57164383]
[2.00929666 41.78063965]
[16.66202164 44.98963547]
[27.05182648 38.71953583]
[39.31652832 41.31731033]
[46.73334885 51.91893387]
[61.31709671 55.42810059]
[50.67267990 44.85944748]
[42.59393692 32.22086334]
[37.47105789 18.12277412]
[35.55147552 3.24610758]
[36.92790222 -11.69060707]
[41.53386307 -25.96594048]
[49.14689255 -38.89040375]
[59.39928436 -49.83976364]
[71.79586029 -58.28517151]
[85.73787689 -63.81871796]
[100.55194855 -66.17314911]
[115.52256775 -65.23473358]
[129.92666626 -61.04880905]
[143.06854248 -53.81754303]
[154.31344604 -43.89020538]
[163.11827087 -31.74627304]
[169.05773926 -17.97228813]
[171.84498596 -3.23352170]
[171.34539795 11.75815582]
[167.58309937 26.27866173]
[160.73980713 39.62666702]
[151.14602661 51.15747833]
[139.26516724 60.31416321]
[125.67102051 66.65446472]
[111.02020264 69.87215424]
[96.02032471 69.81181335]
[81.39157104 66.47487640]
[92.16024780 76.91688538]
[102.92893219 87.35889435]
[116.68175507 93.34719086]
[131.66200256 94.11685181]
[146.64224243 94.88650513]
[161.62248230 95.65616608]
[176.60272217 96.42582703]
[181.40473938 82.11348724]
[189.89105225 69.62809753]
[201.43194580 59.89616013]
[215.17098999 53.63985825]
[230.08865356 51.32344437]
[245.07795715 53.11881256]
[259.02658081 58.89273071]
[270.89947510 68.21674347]
[279.81555176 80.39894104]
[285.11322021 94.53533173]
[286.39932251 109.57688904]
[283.57843018 124.40744019]
[276.85989380 137.92645264]
[266.74224854 149.13073730]
[253.97630310 157.18884277]
[239.50936890 161.50282288]
[224.41499329 161.75253296]
[209.81327820 157.91946411]
[196.78776550 150.28804016]
[186.30503845 139.42457581]
[179.14297485 126.13519287]
[175.83306885 111.40606689]
[160.85282898 110.63641357]
[145.87257385 109.86675262]
[130.89233398 109.09709167]
[115.91210175 108.32743073]
[110.47444153 113.49288177]
[123.25184631 121.35023499]
[138.20401001 122.54730988]
[149.30526733 132.63502502]
[151.92404175 147.40464783]
[144.96775818 160.69412231]
[131.33865356 166.95890808]
[116.72295380 163.58523560]
[107.21853638 151.98068237]
[106.79051208 136.98751831]
[99.59912872 123.82378387]
[94.16146851 128.98924255]
[94.16146851 143.98924255]
[94.16146851 158.98924255]
[94.16146851 173.98924255]
[94.16146851 188.98924255]
[94.16146851 203.98924255]
[94.16146851 218.98924255]
[94.16146851 233.98924255]
[94.16146851 248.98924255]
[94.16146851 263.98922729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 100]
[15 99]
[16 98]
[17 71]
[18 70]
[20 67]
[21 66]
[22 65]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 52]
[34 51]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[101 131]
[102 130]
[103 129]
[104 128]
[105 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
