%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAxxxxxxxxxxAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.17850494 299.95632935]
[102.17850494 284.95632935]
[102.17850494 269.95632935]
[102.17850494 254.95634460]
[102.17850494 239.95634460]
[102.17850494 224.95634460]
[102.17850494 209.95634460]
[102.17850494 194.95634460]
[102.17850494 179.95634460]
[102.17850494 164.95634460]
[95.48535919 161.57228088]
[88.71702576 174.95845032]
[75.33096313 168.18989563]
[82.09907532 154.80416870]
[75.40592957 151.42010498]
[63.32594299 160.31245422]
[51.24595642 169.20480347]
[53.02642441 184.46015930]
[46.92595291 198.55554199]
[34.58553696 207.69937134]
[19.32468987 209.43200684]
[5.24849749 203.28738403]
[-3.85661173 190.91838074]
[-5.54140997 175.65217590]
[0.64730513 161.59530640]
[13.04480076 152.52900696]
[28.31621170 150.89207458]
[42.35360718 157.12481689]
[54.43359375 148.23246765]
[66.51358032 139.34011841]
[55.14050293 110.79807281]
[62.47999191 84.43780518]
[81.70767975 70.04576874]
[76.80612183 55.86920929]
[71.90457153 41.69264984]
[67.85693359 38.19462967]
[65.80555725 33.91160965]
[65.71043396 29.75316811]
[67.16963196 26.47624397]
[63.16188812 12.02155495]
[59.15414810 -2.43313384]
[55.14640808 -16.88782310]
[49.52838516 -17.29019165]
[44.00509262 -19.22480011]
[38.99988174 -22.66305351]
[34.92555237 -27.45854187]
[32.15150833 -33.35120773]
[30.97251129 -39.98066711]
[25.19623947 -53.82388687]
[19.41996765 -67.66710663]
[4.68909073 -64.60152435]
[-10.35574818 -64.37944794]
[-25.17068863 -67.00890350]
[-39.22018051 -72.39484406]
[-51.99634171 -80.34255981]
[-63.03731918 -90.56475067]
[-71.94400024 -102.69189453]
[-78.39440155 -116.28559875]
[-82.15534973 -130.85446167]
[-83.09088135 -145.87182617]
[-81.16719818 -160.79483032]
[-76.45381927 -175.08399963]
[-69.12113953 -188.22280884]
[-59.43422699 -199.73629761]
[-47.74325943 -209.20823669]
[-34.47085953 -216.29624939]
[-20.09681702 -220.74409485]
[-5.14073992 -222.39099121]
[9.85671616 -221.17741394]
[24.35340309 -217.14720154]
[37.82527542 -210.44607544]
[49.78533173 -201.31625366]
[59.80122375 -190.08778381]
[67.51088715 -177.16658020]
[72.63562012 -163.01971436]
[74.99015808 -148.15861511]
[74.48940277 -133.12046814]
[71.15144348 -118.44891357]
[65.09694672 -104.67431641]
[56.54478455 -92.29460907]
[45.80410767 -81.75732422]
[33.26318359 -73.44337463]
[39.03945923 -59.60015869]
[44.81573105 -45.75693893]
[59.73464203 -44.19935989]
[68.24573517 -56.55093384]
[63.91093063 -71.57569885]
[70.29523468 -85.85066223]
[84.38417816 -92.63562775]
[99.52538300 -88.72693634]
[108.56964874 -75.97016144]
[107.24653625 -60.38865280]
[96.18078613 -49.33952713]
[80.59730530 -48.03984070]
[72.08621216 -35.68827057]
[69.60109711 -20.89556313]
[73.60883331 -6.44087410]
[77.61657715 8.01381397]
[81.62431335 22.46850204]
[86.08113098 36.79109955]
[90.98268127 50.96765900]
[95.88423157 65.14421844]
[117.47633362 64.86771393]
[137.42732239 78.06768036]
[147.46394348 102.33121490]
[141.79884338 130.36184692]
[156.66189575 132.38418579]
[171.52493286 134.40650940]
[186.38798523 136.42884827]
[201.25103760 138.45118713]
[216.13430786 140.31880188]
[231.03620911 142.03149414]
[245.93812561 143.74417114]
[260.84002686 145.45686340]
[277.26593018 141.25857544]
[285.84732056 155.88035583]
[274.17251587 168.17407227]
[259.12731934 160.35876465]
[244.22543335 158.64607239]
[229.32353210 156.93339539]
[214.42163086 155.22070312]
[207.37184143 157.59687805]
[199.22869873 153.31422424]
[184.36564636 151.29190063]
[169.50260925 149.26956177]
[154.63955688 147.24722290]
[139.77650452 145.22489929]
[134.12701416 150.15776062]
[146.20100403 159.05824280]
[158.27499390 167.95874023]
[172.93028259 171.15600586]
[182.87559509 182.38502502]
[184.27899170 197.31922913]
[176.59976196 210.20446777]
[162.79669189 216.07603455]
[148.18812561 212.67163086]
[138.40277100 201.30296326]
[137.21076965 186.35095215]
[130.01939392 173.18721008]
[122.82800293 160.02348328]
[117.17850494 164.95634460]
[117.17850494 179.95634460]
[117.17850494 194.95634460]
[117.17850494 209.95634460]
[117.17850494 224.95634460]
[117.17850494 239.95634460]
[117.17850494 254.95634460]
[117.17850494 269.95632935]
[117.17850494 284.95632935]
[117.17850494 299.95632935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 30]
[16 29]
[17 28]
[33 102]
[34 101]
[35 100]
[39 99]
[40 98]
[41 97]
[42 96]
[48 84]
[49 83]
[50 82]
[85 95]
[86 94]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 121]
[112 120]
[113 119]
[114 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
