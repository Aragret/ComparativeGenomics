%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUAAUAAAAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.33435822 403.95242310]
[108.33435822 388.95242310]
[108.33435822 373.95242310]
[108.33435822 358.95242310]
[108.33435822 343.95242310]
[108.33435822 328.95242310]
[108.33435822 313.95242310]
[108.33435822 298.95242310]
[108.33435822 283.95242310]
[108.33435822 268.95242310]
[93.35829163 264.70492554]
[80.16632080 256.41354370]
[69.82530975 244.73918152]
[63.17426300 230.61676025]
[60.75623703 215.18026733]
[62.77404404 199.67178345]
[69.07322693 185.34143066]
[79.15388489 173.34674072]
[92.21031189 164.65904236]
[107.19541168 159.98483276]
[106.88335419 144.98808289]
[106.57129669 129.99133301]
[100.67297363 125.35885620]
[86.75098419 130.94259644]
[88.87633514 116.09391022]
[82.97801971 111.46143341]
[68.33451843 114.71225739]
[63.79683304 129.38552856]
[52.51955032 139.81234741]
[37.53619385 143.18792725]
[22.87721252 138.60427856]
[12.48580074 127.29436493]
[9.15719509 112.30050659]
[13.78677368 97.65596008]
[25.12920380 87.30005646]
[40.13342667 84.01846313]
[54.76338577 88.69392395]
[65.08368683 100.06875610]
[79.72718811 96.81793213]
[80.66281891 81.84713745]
[66.53801727 76.79838562]
[52.41321564 71.74962616]
[38.28841019 66.70086670]
[23.23105812 72.23763275]
[9.58942032 63.79457092]
[7.82819271 47.84848404]
[19.29843903 36.63184738]
[35.20116806 38.74909973]
[43.33716583 52.57606888]
[57.46197128 57.62482452]
[71.58677673 62.67358017]
[85.71157837 67.72233582]
[99.93835449 62.96852112]
[108.19064331 50.44255829]
[116.44293213 37.91659927]
[124.69522095 25.39063644]
[132.94750977 12.86467361]
[121.25341797 3.45229340]
[110.50698853 -7.02907324]
[100.80554962 -18.48450279]
[92.23696899 -30.81025124]
[84.87882996 -43.89469147]
[78.79778290 -57.61932755]
[74.04889679 -71.85986328]
[70.67517853 -86.48732758]
[68.70717621 -101.36925507]
[68.16272736 -116.37086487]
[69.04675293 -131.35629272]
[71.35124207 -146.18984985]
[75.05533600 -160.73716736]
[80.12548065 -174.86650085]
[86.51576233 -188.44992065]
[94.16831207 -201.36437988]
[103.01381683 -213.49293518]
[112.97217560 -224.72573853]
[123.95320129 -234.96105957]
[135.85743713 -244.10621643]
[148.57708740 -252.07836914]
[161.99694824 -258.80532837]
[175.99548340 -264.22619629]
[190.44592285 -268.29183960]
[205.21740723 -270.96545410]
[220.17613220 -272.22283936]
[235.18666077 -272.05258179]
[250.11302185 -270.45623779]
[264.82006836 -267.44827271]
[279.17456055 -263.05590820]
[293.04656982 -257.31893921]
[306.31039429 -250.28933716]
[318.84594727 -242.03073120]
[330.53970337 -232.61791992]
[341.28573608 -222.13615417]
[350.98675537 -210.68037415]
[359.55490112 -198.35432434]
[366.91256714 -185.26960754]
[372.99310303 -171.54475403]
[377.74148560 -157.30404663]
[381.11465454 -142.67645264]
[383.08212280 -127.79445648]
[383.62600708 -112.79282379]
[382.74145508 -97.80741882]
[380.43640137 -82.97396088]
[376.73178101 -68.42678070]
[371.66113281 -54.29761887]
[365.27035522 -40.71444321]
[357.61734009 -27.80026054]
[348.77139282 -15.67203045]
[338.81262207 -4.43959045]
[327.83123779 5.79533529]
[315.92666626 14.94005585]
[303.20672607 22.91175270]
[289.78662109 29.63822937]
[275.78787231 35.05857086]
[261.33728027 39.12369156]
[246.56570435 41.79676819]
[231.60693359 43.05360031]
[216.59640503 42.88280106]
[201.67010498 41.28591919]
[186.96318054 38.27741623]
[172.60882568 33.88453674]
[158.73704529 28.14706421]
[145.47348022 21.11696243]
[137.22119141 33.64292526]
[128.96890259 46.16888809]
[120.71660614 58.69484711]
[112.46431732 71.22080994]
[133.82031250 96.26963043]
[121.56805420 129.67927551]
[121.88010406 144.67602539]
[122.19216156 159.67277527]
[136.22964478 163.25195312]
[148.84576416 170.34724426]
[159.17822266 180.46643066]
[166.52268982 192.91090393]
[170.38082886 206.82383728]
[170.49406433 221.24920654]
[166.86094666 235.19746399]
[159.73680115 247.71343994]
[149.61578369 257.94174194]
[137.19660950 265.18518066]
[123.33435822 268.95242310]
[123.33435822 283.95242310]
[123.33435822 298.95242310]
[123.33435822 313.95242310]
[123.33435822 328.95242310]
[123.33435822 343.95242310]
[123.33435822 358.95242310]
[123.33435822 373.95242310]
[123.33435822 388.95242310]
[123.33435822 403.95242310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 130]
[21 129]
[22 128]
[26 39]
[27 38]
[40 52]
[41 51]
[42 50]
[43 49]
[53 126]
[54 125]
[55 124]
[56 123]
[57 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
