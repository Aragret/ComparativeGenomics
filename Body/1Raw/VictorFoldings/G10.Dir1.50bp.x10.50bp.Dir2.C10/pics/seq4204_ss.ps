%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGxxxxxxxxxxCAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.38822937 122.86793518]
[78.39784241 130.36793518]
[65.40746307 137.86793518]
[52.41708374 145.36793518]
[39.42670059 152.86793518]
[26.43632126 160.36793518]
[14.84727287 169.89126587]
[4.97156620 181.18154907]
[1.70955563 196.66282654]
[-12.49358368 201.14837646]
[-22.36928940 212.43864441]
[-32.24499512 223.72892761]
[-42.12070084 235.01921082]
[-51.99640656 246.30949402]
[-50.69257736 262.05990601]
[-60.97146225 274.06491089]
[-76.73477936 275.20214844]
[-88.63043976 264.79690552]
[-89.60095215 249.02244568]
[-79.07052612 237.23747253]
[-63.28668976 236.43379211]
[-53.41098404 225.14350891]
[-43.53527451 213.85322571]
[-33.65956879 202.56294250]
[-23.78386307 191.27265930]
[-21.22822952 176.59895325]
[-6.31871414 171.30584717]
[3.55699229 160.01556396]
[-3.26689315 146.65687561]
[-10.09015846 133.29936218]
[-25.02617073 134.68339539]
[-39.96218491 136.06741333]
[-48.71632385 149.02500916]
[-63.76548767 153.27430725]
[-78.00392914 146.80894470]
[-84.70867920 132.68165588]
[-80.71396637 117.56291962]
[-67.90597534 108.59133911]
[-52.33224106 110.00301361]
[-41.34621048 121.13140869]
[-26.41019630 119.74738312]
[-11.47418404 118.36335754]
[5.57735538 124.02831268]
[16.08571815 134.94804382]
[18.93632126 147.37754822]
[31.92670250 139.87754822]
[44.91708374 132.37754822]
[57.90746307 124.87755585]
[70.89784241 117.37755585]
[83.88822937 109.87755585]
[86.79570007 95.16203308]
[77.63376617 83.28520966]
[68.47182465 71.40838623]
[59.30989075 59.53155899]
[50.14795685 47.65473557]
[34.93654251 49.77804565]
[20.70744896 43.99631119]
[11.28823185 31.86478615]
[9.21261120 16.64679146]
[15.03892040 2.43588996]
[27.19991112 -6.94525528]
[42.42433548 -8.97316456]
[56.61690521 -3.10233951]
[65.95988464 9.08799648]
[67.94006348 24.31870461]
[62.02478027 38.49280167]
[71.18671417 50.36962509]
[80.34864807 62.24644852]
[89.51058960 74.12326813]
[98.67252350 86.00009918]
[106.16896820 85.76913452]
[103.82266235 70.95377350]
[101.47636414 56.13841248]
[99.13005829 41.32305527]
[96.78376007 26.50769615]
[91.32722473 12.53535557]
[97.06620789 -1.32336307]
[110.80339050 -7.34746838]
[124.88549042 -2.18080068]
[131.46707153 11.29817772]
[126.88107300 25.58040810]
[125.45126343 40.51210785]
[124.02146149 55.44380569]
[122.59165955 70.37550354]
[121.16184998 85.30720520]
[128.65829468 85.07624054]
[137.07170105 72.65792847]
[145.48510742 60.23961639]
[153.89852905 47.82130051]
[157.77691650 31.31692314]
[174.70993042 30.47487259]
[180.20660400 46.51304626]
[166.31683350 56.23471069]
[157.90342712 68.65302277]
[149.49002075 81.07134247]
[141.07661438 93.48965454]
[155.46473694 89.24914551]
[170.20861816 86.48911285]
[185.15635681 85.23799133]
[200.15391541 85.50867462]
[215.04675293 87.29837036]
[229.68144226 90.58864594]
[243.90718079 95.34558868]
[257.57739258 101.52018738]
[270.55117798 109.04882050]
[282.69491577 117.85391235]
[293.88345337 127.84474182]
[304.00152588 138.91836548]
[312.94482422 150.96066284]
[320.62124634 163.84757996]
[326.95169067 177.44630432]
[331.87091064 191.61674500]
[335.32824707 206.21287537]
[337.28802490 221.08428955]
[337.73010254 236.07777405]
[336.64993286 251.03883362]
[334.05859375 265.81329346]
[329.98278809 280.24896240]
[324.46456909 294.19705200]
[317.56076050 307.51385498]
[309.34249878 320.06216431]
[299.89447021 331.71267700]
[289.31399536 342.34536743]
[277.71014404 351.85064697]
[265.20245361 360.13058472]
[251.91978455 367.09988403]
[237.99903870 372.68673706]
[223.58363342 376.83352661]
[208.82209778 379.49758911]
[193.86654663 380.65142822]
[178.87106323 380.28317261]
[163.99017334 378.39660645]
[149.37719727 375.01119995]
[135.18270874 370.16180420]
[121.55297852 363.89840698]
[108.62842560 356.28552246]
[96.54223633 347.40158081]
[85.41893768 337.33819580]
[75.37314606 326.19897461]
[66.50836945 314.09872437]
[58.91594696 301.16213989]
[52.67411804 287.52252197]
[47.84719086 273.32037354]
[44.48490524 258.70205688]
[42.62190628 243.81820679]
[42.27738571 228.82217407]
[43.45489502 213.86845398]
[46.14230347 199.11116028]
[50.31191635 184.70233154]
[55.92077637 170.79043579]
[62.91108322 157.51882935]
[71.21081543 145.02426147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 28]
[8 27]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[30 42]
[31 41]
[32 40]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
