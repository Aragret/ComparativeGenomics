%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCxxxxxxxxxxUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.39374542 241.06185913]
[93.08168793 226.06510925]
[92.76963043 211.06835938]
[92.45757294 196.07159424]
[92.14552307 181.07484436]
[91.83346558 166.07809448]
[91.52140808 151.08134460]
[91.20935059 136.08457947]
[90.89729309 121.08782959]
[76.99473572 115.45587158]
[66.33311462 126.00716400]
[61.96686172 141.21395874]
[47.47806549 144.66708374]
[36.81644058 155.21836853]
[26.15481377 165.76966858]
[27.61691093 181.33874512]
[18.68684387 194.17572021]
[3.58111739 198.21936035]
[-10.56780720 191.56037903]
[-17.07923889 177.34295654]
[-12.87868023 162.28010559]
[0.05049426 153.48406982]
[15.60352325 155.10803223]
[26.26515007 144.55674744]
[36.92677689 134.00546265]
[40.53043747 119.55336761]
[55.78182220 115.34553528]
[66.44345093 104.79425049]
[78.17696381 95.70817566]
[90.86886597 94.64643097]
[80.42905426 83.87561798]
[68.16333771 91.91936493]
[54.62687302 97.55784607]
[40.28596115 100.59848022]
[25.63431549 100.93815613]
[11.17605782 98.56671143]
[-2.59162855 93.56723785]
[-15.19559193 86.11318207]
[-26.20297241 76.46230316]
[-35.23607254 64.94778442]
[-41.98530960 51.96672821]
[-46.21983337 37.96644211]
[-47.79541779 23.42904854]
[-46.65937042 8.85486221]
[-42.85229874 -5.25481224]
[-36.50666046 -18.41493416]
[-27.84214783 -30.17339706]
[-38.05562592 -41.15906143]
[-48.26910782 -52.14472580]
[-58.48258591 -63.13039017]
[-68.69606781 -74.11605835]
[-79.02326965 -84.99488068]
[-89.46308136 -95.76569366]
[-99.90289307 -106.53649902]
[-110.34271240 -117.30730438]
[-125.70814514 -124.47248077]
[-123.07656097 -141.22094727]
[-106.25414276 -143.32864380]
[-99.57189941 -127.74712372]
[-89.13208771 -116.97631073]
[-78.69227600 -106.20550537]
[-68.25246429 -95.43469238]
[-61.29376221 -92.80369568]
[-57.71040344 -84.32953644]
[-47.49692154 -73.34387207]
[-37.28344345 -62.35820770]
[-27.06996155 -51.37254333]
[-16.85648155 -40.38687897]
[-3.82235074 -48.51231766]
[10.54549313 -53.95463181]
[25.70106506 -56.50509262]
[41.06806946 -56.06488419]
[56.06182480 -52.64896393]
[70.11148834 -46.38552856]
[82.68181610 -37.51123428]
[93.29354095 -26.36222458]
[101.54161835 -13.36142445]
[107.11075592 0.99751574]
[109.78737640 16.16896439]
[109.46789551 31.57603836]
[106.16265869 46.63253784]
[99.99565125 60.76526260]
[91.19985962 73.43580627]
[101.63967133 84.20661926]
[116.05188751 88.36450195]
[130.62458801 84.80973816]
[145.19729614 81.25498199]
[144.69900513 65.79991913]
[147.40866089 50.58182526]
[153.20668030 36.25905991]
[161.83988953 23.45078087]
[172.93263245 12.71014595]
[186.00308228 4.50043726]
[200.48419189 -0.82492739]
[215.74827576 -3.03760481]
[231.13423157 -2.04411817]
[245.97613525 2.11019659]
[259.63214111 9.24325466]
[271.51214600 19.04420090]
[281.10336304 31.08695602]
[287.99243164 44.84874344]
[302.48803711 40.99158478]
[307.11291504 26.27377701]
[318.97531128 16.41033745]
[334.28991699 14.54865456]
[348.16995239 21.28278351]
[356.18630981 34.46389008]
[355.78100586 49.88592911]
[347.08340454 62.62778473]
[332.86880493 68.62357330]
[317.67312622 65.96006775]
[306.34518433 55.48718262]
[291.84957886 59.34434128]
[292.74581909 73.88794708]
[290.77288818 88.32998657]
[286.00537109 102.10972595]
[278.62652588 114.69177246]
[268.92095947 125.58685303]
[257.26388550 134.37086487]
[244.10649109 140.70133972]
[229.95857239 144.33087158]
[215.36866760 145.11669922]
[200.90287781 143.02638245]
[187.12287903 138.13911438]
[174.56407166 130.64270020]
[163.71485901 120.82639313]
[154.99755859 109.06969452]
[148.75205994 95.82768250]
[134.17935181 99.38244629]
[119.60665131 102.93720245]
[134.09963989 106.80413818]
[149.09523010 107.16792297]
[161.68539429 115.32192993]
[168.15051270 128.85714722]
[166.58055115 143.77476501]
[157.43931580 155.66754150]
[143.42750549 161.02188110]
[128.68472290 158.25593567]
[117.56656647 148.18684387]
[113.35772705 133.78706360]
[105.89405060 120.77577209]
[106.20610809 135.77252197]
[106.51815796 150.76928711]
[106.83021545 165.76603699]
[107.14227295 180.76278687]
[107.45433044 195.75953674]
[107.76638794 210.75630188]
[108.07844543 225.75305176]
[108.39049530 240.74980164]
[110.98149872 259.95751953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 28]
[11 27]
[13 25]
[14 24]
[15 23]
[30 84]
[31 83]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 62]
[53 61]
[54 60]
[55 59]
[85 130]
[86 129]
[87 128]
[101 113]
[102 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
