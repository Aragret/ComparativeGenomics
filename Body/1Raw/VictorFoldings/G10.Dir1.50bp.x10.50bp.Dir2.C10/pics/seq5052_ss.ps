%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCxxxxxxxxxxGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.89024353 273.43453979]
[-48.49908066 264.44235229]
[-58.52289200 254.80230713]
[-67.92218781 244.55241394]
[-76.65994263 233.73304749]
[-84.70172882 222.38682556]
[-97.47908783 230.24424744]
[-110.25644684 238.10166931]
[-123.03380585 245.95909119]
[-135.81115723 253.81652832]
[-148.58851624 261.67395020]
[-161.36587524 269.53137207]
[-156.76362610 283.88696289]
[-155.73132324 298.92681885]
[-158.32899475 313.77661133]
[-164.40559387 327.57290649]
[-173.60786438 339.51367188]
[-185.40077209 348.90466309]
[-199.09870911 355.19989014]
[-213.90528870 358.03338623]
[-228.95967102 357.24038696]
[-243.38662720 352.86700439]
[-256.34738159 345.16751099]
[-267.08840942 334.58953857]
[-274.98526001 321.74807739]
[-279.57882690 307.38970947]
[-280.60198975 292.34921265]
[-277.99533081 277.50103760]
[-271.91036987 263.70840454]
[-262.70086670 251.77322388]
[-250.90225220 242.38937378]
[-237.20051575 236.10244751]
[-222.39221191 233.27793884]
[-207.33831787 234.08006287]
[-192.91401672 238.46218872]
[-179.95791626 246.16952515]
[-169.22329712 256.75402832]
[-156.44593811 248.89659119]
[-143.66857910 241.03916931]
[-130.89123535 233.18174744]
[-118.11386871 225.32431030]
[-105.33651733 217.46688843]
[-92.55915833 209.60946655]
[-99.42180634 196.56193542]
[-105.40161896 183.08692932]
[-110.47212982 169.24409485]
[-114.61089325 155.09472656]
[-117.79957581 140.70144653]
[-120.02407074 126.12799072]
[-121.27452850 111.43886566]
[-121.54541016 96.69910431]
[-120.83551788 81.97395325]
[-119.14799500 67.32860565]
[-116.49031067 52.82788849]
[-112.87423706 38.53600311]
[-108.31577301 24.51621437]
[-102.83510590 10.83059025]
[-96.45648956 -2.46028376]
[-89.20817566 -15.29757023]
[-81.12223816 -27.62443733]
[-72.23448181 -39.38631821]
[-62.58425140 -50.53113937]
[-52.21426773 -61.00956726]
[-41.17043304 -70.77520752]
[-29.50164604 -79.78483582]
[-17.25955772 -87.99856567]
[-4.49836636 -95.38002777]
[8.72543526 -101.89655304]
[22.35330582 -107.51928711]
[36.32491684 -112.22334290]
[50.57841492 -115.98789215]
[65.05069733 -118.79627228]
[79.67770386 -120.63605499]
[94.39466858 -121.49908447]
[109.13645935 -121.38154602]
[123.83779144 -120.28395844]
[138.43360901 -118.21118927]
[152.85926819 -115.17240143]
[167.05091858 -111.18105316]
[180.94575500 -106.25481415]
[194.48223877 -100.41549683]
[207.60044861 -93.68894196]
[215.32453918 -106.54734802]
[215.79815674 -122.36146545]
[228.98454285 -129.28738403]
[236.70863342 -142.14578247]
[236.45178223 -158.54292297]
[250.66072083 -166.73060608]
[264.71850586 -158.28604126]
[264.16369629 -141.89628601]
[249.56703186 -134.42170715]
[241.84295654 -121.56330109]
[241.92179871 -106.66889954]
[228.18293762 -98.82326508]
[220.45884705 -85.96485901]
[236.20654297 -74.75995636]
[250.91786194 -62.22534561]
[264.48089600 -48.45640182]
[276.79241943 -33.55788422]
[287.75875854 -17.64315414]
[297.29650879 -0.83330619]
[305.33303833 16.74375916]
[311.80728149 34.95430374]
[316.66989136 53.65976715]
[331.43594360 51.02090073]
[346.20202637 48.38203812]
[360.96807861 45.74317169]
[375.49645996 37.00464630]
[387.91534424 48.54620743]
[380.26272583 63.67477798]
[363.60693359 60.50922775]
[348.84088135 63.14809418]
[334.07482910 65.78695679]
[319.30877686 68.42581940]
[320.85757446 82.24639893]
[321.53631592 96.13691711]
[321.34228516 110.04264832]
[320.27627563 123.90882111]
[318.34243774 137.68080139]
[315.54843140 151.30433655]
[311.90527344 164.72575378]
[307.42727661 177.89218140]
[302.13211060 190.75173950]
[296.04061890 203.25378418]
[289.17681885 215.34902954]
[281.56771851 226.98986816]
[273.24334717 238.13041687]
[264.23645020 248.72677612]
[254.58251953 258.73721313]
[244.31961060 268.12231445]
[233.48814392 276.84506226]
[222.13078308 284.87112427]
[210.29228210 292.16888428]
[198.01928711 298.70953369]
[185.36012268 304.46737671]
[172.36466980 309.41970825]
[159.08413696 313.54702759]
[145.57084656 316.83303833]
[131.87800598 319.26480103]
[118.05959320 320.83276367]
[104.17002869 321.53076172]
[90.26403809 321.35598755]
[76.39640808 320.30917358]
[62.62175751 318.39443970]
[48.99436569 315.61932373]
[35.56791306 311.99475098]
[22.39529610 307.53500366]
[9.52841091 302.25765991]
[-2.98205400 296.18347168]
[-15.08681202 289.33645630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 43]
[7 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[82 95]
[83 94]
[85 92]
[86 91]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
