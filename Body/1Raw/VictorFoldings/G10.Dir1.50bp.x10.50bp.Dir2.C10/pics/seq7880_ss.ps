%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUxxxxxxxxxxCCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 439.10202026]
[92.50000000 424.10202026]
[92.50000000 409.10202026]
[92.50000000 394.10202026]
[92.50000000 379.10202026]
[92.50000000 364.10202026]
[92.50000000 349.10202026]
[92.50000000 334.10202026]
[92.50000000 319.10202026]
[92.50000000 304.10202026]
[77.95760345 300.55136108]
[64.67964935 293.61911011]
[53.43997574 283.70440674]
[44.89479446 271.38027954]
[39.54439163 257.36068726]
[37.70384216 242.45898438]
[39.48443985 227.54086304]
[44.78699112 213.47401428]
[53.30733109 201.07765198]
[64.55376434 191.07479858]
[77.87543488 184.05017090]
[92.50000000 180.41593933]
[92.50000000 165.41593933]
[92.50000000 150.41593933]
[92.50000000 135.41593933]
[92.50000000 120.41593170]
[81.75222015 114.78115082]
[75.04047394 103.59137726]
[75.12543488 89.62922668]
[60.14519119 88.85956573]
[45.16495132 88.08991241]
[30.18470955 87.32025146]
[15.20446777 86.55059052]
[0.22422658 85.78092957]
[-8.06014538 98.71401978]
[-21.70853233 105.75795746]
[-37.04958725 105.01796722]
[-49.95664597 96.69309235]
[-56.95776749 83.02269745]
[-56.16969299 67.68403625]
[-47.80440903 54.80313492]
[-34.11212921 47.84489441]
[-18.77601433 48.68104553]
[-5.92140055 57.08666611]
[0.99388665 70.80068970]
[15.97412777 71.57035065]
[30.95436859 72.34000397]
[45.93460846 73.10966492]
[60.91485214 73.87932587]
[75.89509583 74.64898682]
[88.72874451 66.88385010]
[94.99815369 53.25687408]
[81.96976471 45.80309296]
[69.65113831 37.22702026]
[58.13867950 27.59577560]
[47.52248764 16.98473930]
[37.88565063 5.47695780]
[29.30359650 -6.83750343]
[21.84348869 -19.86226463]
[15.56371498 -33.49538803]
[10.51342297 -47.63017654]
[6.73214006 -62.15599823]
[4.24945974 -76.95916748]
[3.08481312 -91.92383575]
[3.24731493 -106.93287659]
[4.73569345 -121.86881256]
[7.53829956 -136.61476135]
[11.63319969 -151.05531311]
[16.98834419 -165.07743835]
[23.56182098 -178.57139587]
[31.30218315 -191.43159485]
[40.14884949 -203.55735779]
[50.03258514 -214.85379028]
[60.87602997 -225.23248291]
[72.59432220 -234.61221313]
[85.09574890 -242.91955566]
[98.28246307 -250.08950806]
[112.05125427 -256.06594849]
[126.29438019 -260.80209351]
[140.90034485 -264.26089478]
[155.75485229 -266.41528320]
[170.74163818 -267.24835205]
[185.74339294 -266.75366211]
[200.64273071 -264.93499756]
[215.32302856 -261.80664062]
[229.66938782 -257.39309692]
[243.56953430 -251.72885132]
[256.91467285 -244.85826111]
[269.60034180 -236.83511353]
[281.52731323 -227.72218323]
[292.60217285 -217.59080505]
[302.73828125 -206.52026367]
[311.85632324 -194.59721375]
[319.88488770 -181.91494751]
[326.76116943 -168.57273865]
[332.43133545 -154.67501831]
[336.85104370 -140.33055115]
[339.98565674 -125.65158844]
[341.81066895 -110.75303650]
[342.31179810 -95.75148773]
[341.48510742 -80.76435089]
[339.33706665 -65.90892792]
[335.88452148 -51.30148315]
[331.15444946 -37.05633926]
[325.18389893 -23.28499031]
[318.01956177 -10.09521484]
[309.71755981 2.40975714]
[300.34283447 14.13205433]
[289.96878052 24.97993279]
[278.67657471 34.86849213]
[266.55459595 43.72034073]
[253.69770813 51.46619415]
[240.20655823 58.04543686]
[226.18672180 63.40657043]
[211.74792480 67.50763702]
[197.00317383 70.31654358]
[182.06787109 71.81130219]
[167.05889893 71.98021698]
[152.09373474 70.82196045]
[137.28950500 68.34561157]
[122.76206970 64.57053375]
[108.62512970 59.52627945]
[102.35572815 73.15325928]
[117.72695923 81.46158600]
[124.13724518 96.78870392]
[119.73166656 111.91473389]
[107.50000000 120.41593170]
[107.50000000 135.41593933]
[107.50000000 150.41593933]
[107.50000000 165.41593933]
[107.50000000 180.41593933]
[122.12456512 184.05017090]
[135.44624329 191.07479858]
[146.69267273 201.07765198]
[155.21301270 213.47401428]
[160.51556396 227.54086304]
[162.29615784 242.45898438]
[160.45561218 257.36068726]
[155.10520935 271.38027954]
[146.56002808 283.70440674]
[135.32034302 293.61911011]
[122.04239655 300.55136108]
[107.50000000 304.10202026]
[107.50000000 319.10202026]
[107.50000000 334.10202026]
[107.50000000 349.10202026]
[107.50000000 364.10202026]
[107.50000000 379.10202026]
[107.50000000 394.10202026]
[107.50000000 409.10202026]
[107.50000000 424.10202026]
[107.50000000 439.10202026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[51 123]
[52 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
