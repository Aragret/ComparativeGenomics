%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACxxxxxxxxxxAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[118.29284668 305.14514160]
[118.29284668 290.14514160]
[118.29284668 275.14514160]
[118.29284668 260.14514160]
[118.29284668 245.14515686]
[118.29284668 230.14515686]
[118.29284668 215.14515686]
[118.29284668 200.14515686]
[118.29284668 185.14515686]
[118.29284668 170.14515686]
[115.31131744 155.44445801]
[109.46723938 141.62973022]
[103.62316132 127.81499481]
[87.77605438 136.07563782]
[66.05049133 134.11749268]
[55.49708176 144.77700806]
[44.94367218 155.43653870]
[41.30416489 171.42672729]
[25.55872726 176.01074219]
[13.90491486 164.47294617]
[18.33117104 148.68243408]
[34.28414536 144.88313293]
[44.83755112 134.22360229]
[55.39096069 123.56407928]
[52.12717819 116.81147003]
[41.30006790 127.19287872]
[28.08101082 120.10369110]
[30.73833847 105.34094238]
[45.59961319 103.30625153]
[42.33583069 96.55364227]
[27.42658043 98.20114899]
[12.51733112 99.84865570]
[-2.39191794 101.49616241]
[-12.07533932 113.98643494]
[-27.76478195 115.88825989]
[-40.15197754 106.07332611]
[-41.88782120 90.36465454]
[-31.94246864 78.08192444]
[-16.21632195 76.51225281]
[-4.03942442 86.58691406]
[10.86982536 84.93940735]
[25.77907562 83.29190063]
[40.68832397 81.64439392]
[43.66985703 66.94369507]
[30.58058357 59.61765289]
[17.49131012 52.29160690]
[4.40203667 44.96556091]
[-9.16619301 52.30767822]
[-24.54822922 51.12593460]
[-36.83572006 41.79742432]
[-42.10776901 27.29883766]
[-38.68209076 12.25662136]
[-27.65180016 1.47069299]
[-12.53662586 -1.61719739]
[1.84023464 3.97828484]
[10.89117813 16.47164154]
[11.72808170 31.87628746]
[24.81735420 39.20233154]
[37.90662766 46.52837753]
[50.99589920 53.85442352]
[65.41114044 49.70704269]
[72.60586548 36.54512787]
[79.80058289 23.38321304]
[86.99530792 10.22129822]
[91.85832977 -3.96852303]
[94.24930573 -18.77673912]
[96.64027405 -33.58495331]
[99.03125000 -48.39316940]
[89.31396484 -36.96625900]
[76.58538818 -29.03005028]
[62.04783249 -25.33417130]
[47.07447052 -26.22772408]
[33.07963943 -31.62630653]
[21.38524818 -41.01998520]
[13.09591198 -53.52146149]
[8.99461651 -67.94988251]
[9.46875763 -82.94239044]
[14.47355080 -97.08282471]
[23.53625679 -109.03553772]
[35.80084229 -117.67150879]
[50.10882950 -122.17501068]
[65.10872650 -122.12065125]
[79.38369751 -117.51356506]
[91.58537292 -108.78893280]
[100.56121063 -96.77085114]
[105.46337891 -82.59450531]
[105.82888794 -67.59928894]
[113.28552246 -80.61460876]
[120.74216461 -93.62992859]
[120.14641571 -110.01824951]
[134.18307495 -118.49789429]
[148.41241455 -110.34573364]
[148.19651794 -93.94800568]
[133.75747681 -86.17329407]
[126.30084991 -73.15797424]
[118.84421539 -60.14265060]
[113.83946991 -46.00219345]
[111.44849396 -31.19397926]
[109.05751801 -16.38576317]
[106.66654205 -1.57754815]
[117.88112640 -3.77755737]
[127.12367249 1.08474886]
[141.10755920 -4.34210730]
[155.09146118 -9.76896286]
[169.07534790 -15.19581890]
[175.22038269 -29.75652313]
[189.89280701 -35.62981796]
[204.38772583 -29.33117867]
[210.10556030 -14.59748173]
[203.65403748 -0.16996416]
[188.86070251 5.39178276]
[174.50219727 -1.21192694]
[160.51831055 4.21492910]
[146.53442383 9.64178467]
[132.55052185 15.06864071]
[125.49092102 26.84080696]
[110.97245789 28.52706528]
[100.15721893 17.41601944]
[92.96250153 30.57793427]
[85.76777649 43.73984909]
[78.57305908 56.90176392]
[120.44485474 63.95769501]
[134.63945007 97.31200409]
[117.43788910 121.97091675]
[123.28196716 135.78564453]
[129.12605286 149.60037231]
[131.17083740 134.74040222]
[137.24914551 121.02711487]
[146.88592529 109.53223419]
[159.32806396 101.15409851]
[173.60319519 96.54747772]
[188.59565735 96.07238007]
[203.13380432 99.76594543]
[216.08143616 107.33950806]
[226.42668152 118.20117950]
[233.36103821 131.50210571]
[236.34257507 146.20280457]
[235.13827515 161.15438843]
[229.84226990 175.18835449]
[220.86843872 187.20793152]
[208.91810608 196.27378845]
[194.92521667 201.67738342]
[179.98332214 202.99644470]
[165.26017761 200.12785339]
[151.90638733 193.29582214]
[140.96560669 183.03428650]
[133.29284668 170.14515686]
[133.29284668 185.14515686]
[133.29284668 200.14515686]
[133.29284668 215.14515686]
[133.29284668 230.14515686]
[133.29284668 245.14515686]
[133.29284668 260.14514160]
[133.29284668 275.14514160]
[133.29284668 290.14514160]
[133.29284668 305.14514160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 126]
[12 125]
[13 124]
[15 24]
[16 23]
[17 22]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[61 121]
[62 120]
[63 119]
[64 118]
[65 100]
[66 99]
[67 98]
[68 97]
[87 96]
[88 95]
[89 94]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
