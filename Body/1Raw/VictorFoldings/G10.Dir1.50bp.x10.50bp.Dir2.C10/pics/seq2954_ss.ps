%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUxxxxxxxxxxCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[149.77882385 448.74157715]
[149.77882385 433.74157715]
[149.77882385 418.74157715]
[149.77882385 403.74157715]
[149.77882385 388.74157715]
[149.77882385 373.74157715]
[149.77882385 358.74157715]
[149.77882385 343.74157715]
[149.77882385 328.74157715]
[149.77882385 313.74157715]
[127.57621002 306.96813965]
[109.21264648 292.73223877]
[97.09574127 272.88003540]
[92.82133484 249.99537659]
[96.96330261 227.06347656]
[108.99656677 207.08149719]
[127.36361694 192.66685486]
[122.01175690 178.65408325]
[116.65989685 164.64132690]
[111.30803680 150.62855530]
[105.95617676 136.61578369]
[92.70040894 136.37179565]
[80.37699127 131.48220825]
[70.55992889 122.57153320]
[64.50311279 110.77789307]
[49.56546021 112.14411163]
[34.62780762 113.51033020]
[19.69015694 114.87654877]
[4.75250483 116.24275970]
[-10.18514729 117.60897827]
[-25.12279892 118.97519684]
[-39.87767410 129.94670105]
[-55.52034760 122.04766846]
[-70.42724609 123.71633911]
[-85.49543762 131.48718262]
[-97.13387299 119.15903473]
[-88.50936890 104.56266022]
[-72.09592438 108.80944824]
[-57.18902588 107.14076996]
[-49.36600876 97.86614227]
[-36.91894913 96.38436127]
[-26.48901749 104.03754425]
[-11.55136395 102.67132568]
[3.38628769 101.30510712]
[18.32394028 99.93889618]
[33.26159286 98.57267761]
[48.19924545 97.20645905]
[63.13689804 95.84024048]
[70.66454315 77.29266357]
[86.73320770 65.35632324]
[84.31164551 50.55308151]
[81.89009094 35.74983597]
[79.46853638 20.94659233]
[77.04697418 6.14334679]
[74.62541962 -8.65989876]
[59.59053421 -8.70526981]
[44.76819611 -11.22483444]
[30.56277275 -16.14985466]
[17.36179924 -23.34597397]
[5.52540541 -32.61687851]
[-4.62350273 -43.70964813]
[-12.80805492 -56.32166290]
[-18.80497169 -70.10886383]
[-22.45065117 -84.69512177]
[-23.64563751 -99.68251038]
[-22.35733223 -114.66216278]
[-18.62087822 -129.22543335]
[-12.53820896 -142.97502136]
[-4.27526665 -155.53581238]
[5.94253159 -166.56515503]
[17.83643723 -175.76216125]
[31.08197212 -182.87593079]
[45.31779480 -187.71238708]
[60.15553284 -190.13957214]
[75.19041443 -190.09130859]
[90.01226044 -187.56889343]
[104.21673584 -182.64112854]
[117.41632080 -175.44247437]
[129.25093079 -166.16928101]
[139.39770508 -155.07456970]
[147.57981873 -142.46096802]
[153.57408142 -128.67262268]
[157.21694946 -114.08565521]
[158.40905762 -99.09803772]
[157.11785889 -84.11862946]
[153.37860107 -69.55608368]
[147.29328918 -55.80767059]
[139.02792358 -43.24846649]
[128.80799866 -32.22108841]
[116.91232300 -23.02637672]
[103.66541290 -15.91516495]
[89.42866516 -11.08145523]
[91.85021973 3.72178960]
[94.27177429 18.52503395]
[96.69333649 33.32827759]
[99.11489105 48.13152313]
[101.53644562 62.93476868]
[112.77677155 65.17262268]
[122.79759979 70.73463440]
[130.64247131 79.08992767]
[144.48606873 73.31458282]
[158.32968140 67.53923798]
[161.78266907 52.41123962]
[173.49034119 42.22742462]
[188.95085144 40.90367889]
[202.21931458 48.94901276]
[208.19374084 63.26983261]
[204.57684326 78.35948181]
[192.75938416 88.41569519]
[177.28543091 89.57164764]
[164.10502625 81.38285065]
[150.26141357 87.15818787]
[136.41781616 92.93353271]
[136.30999756 107.60108948]
[130.52560425 121.08032227]
[119.96894073 131.26393127]
[125.32080078 145.27668762]
[130.67266846 159.28945923]
[136.02452087 173.30223083]
[141.37637329 187.31498718]
[149.69447327 185.79252625]
[158.13784790 185.36912537]
[166.56196594 186.05143738]
[174.82267761 187.82719421]
[182.77871704 190.66542053]
[190.29411316 194.51698303]
[197.24047852 199.31539917]
[203.49928284 204.97807312]
[208.96377563 211.40762329]
[213.54087830 218.49360657]
[217.15277100 226.11444092]
[219.73815918 234.13938904]
[221.25335693 242.43095398]
[221.67300415 250.84706116]
[220.99052429 259.24365234]
[219.21820068 267.47708130]
[216.38694763 275.40649414]
[212.54577637 282.89639282]
[207.76098633 289.81887817]
[202.11494446 296.05575562]
[195.70474243 301.50067139]
[188.64048767 306.06091309]
[181.04342651 309.65890503]
[173.04383850 312.23364258]
[164.77882385 313.74157715]
[164.77882385 328.74157715]
[164.77882385 343.74157715]
[164.77882385 358.74157715]
[164.77882385 373.74157715]
[164.77882385 388.74157715]
[164.77882385 403.74157715]
[164.77882385 418.74157715]
[164.77882385 433.74157715]
[164.77882385 448.74157715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[33 39]
[34 38]
[50 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
