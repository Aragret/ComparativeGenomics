%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGxxxxxxxxxxACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.98019409 408.52246094]
[68.98019409 393.52246094]
[68.98019409 378.52246094]
[68.98019409 363.52246094]
[68.98019409 348.52246094]
[68.98019409 333.52246094]
[68.98019409 318.52246094]
[68.98019409 303.52246094]
[68.98019409 288.52246094]
[68.98019409 273.52246094]
[54.51533508 269.68612671]
[41.52647400 262.23052979]
[30.90200424 251.65861511]
[23.37039757 238.68682861]
[19.45024872 224.19638062]
[19.41458321 209.17347717]
[23.27183533 194.64215088]
[30.76487350 181.59451294]
[41.38813400 170.92294312]
[54.42172241 163.35914612]
[68.98019409 159.42390442]
[68.98019409 144.42390442]
[56.99335861 135.40637207]
[42.58114243 139.56427002]
[28.16892624 143.72215271]
[23.23984909 148.28413391]
[17.59365654 149.44680786]
[13.07020473 147.73979187]
[-1.50249839 151.29455566]
[-11.03029060 164.20195007]
[-27.06690407 164.65643311]
[-37.31042480 152.30937195]
[-33.90289688 136.63238525]
[-19.45828438 129.65148926]
[-5.05726051 136.72186279]
[9.51544285 133.16709900]
[24.01103973 129.30993652]
[38.42325592 125.15204620]
[52.83547211 120.99416351]
[53.06949234 113.49781036]
[53.53753281 98.50511932]
[53.77155685 91.00876617]
[39.64675140 85.96001434]
[25.52194977 80.91125488]
[8.57187462 81.27362061]
[3.53142619 65.08627319]
[17.69083023 55.76169968]
[30.57070541 66.78645325]
[44.69550705 71.83521271]
[58.82031250 76.88396454]
[66.36408997 70.35119629]
[74.73848724 65.88285065]
[83.42981720 63.52206421]
[91.94595337 63.19212723]
[99.84290314 64.70796204]
[106.74739838 67.79316711]
[112.37451172 72.10155487]
[121.63946533 60.30491257]
[130.90441895 48.50827408]
[140.16935730 36.71163177]
[149.43431091 24.91499329]
[151.87322998 9.28290272]
[165.81933594 4.05267906]
[175.08428955 -7.74396086]
[184.34924316 -19.54059982]
[193.11544800 -31.71243668]
[201.36773682 -44.23839951]
[209.62002563 -56.76436234]
[217.87231445 -69.29032135]
[226.12460327 -81.81628418]
[217.10671997 -92.30118561]
[211.13389587 -104.76019287]
[208.61180115 -118.33174133]
[209.70768738 -132.07923889]
[214.33938599 -145.05572510]
[222.18141174 -156.36906433]
[232.68780518 -165.24334717]
[245.13014221 -171.07200623]
[258.64804077 -173.45938110]
[272.30868530 -172.24746704]
[285.17117310 -167.52645874]
[293.93737793 -179.69828796]
[302.70358276 -191.87013245]
[311.46978760 -204.04196167]
[320.10888672 -216.30433655]
[328.61999512 -228.65589905]
[337.13107300 -241.00747681]
[345.64218140 -253.35905457]
[349.65060425 -269.83233643]
[366.58975220 -270.54080200]
[371.95974731 -254.45977783]
[357.99374390 -244.84796143]
[349.48266602 -232.49638367]
[340.97155762 -220.14482117]
[332.46047974 -207.79324341]
[331.24713135 -200.45338440]
[323.64163208 -195.27575684]
[314.87542725 -183.10392761]
[306.10919189 -170.93208313]
[297.34298706 -158.76025391]
[307.17214966 -145.82308960]
[312.55319214 -130.47286987]
[312.95404053 -114.19317627]
[308.32440186 -98.56115723]
[299.10192871 -85.09471893]
[286.17083740 -75.10514069]
[270.77709961 -69.56939697]
[254.40846252 -69.03460693]
[238.65055847 -73.56399536]
[230.39826965 -61.03803253]
[222.14598083 -48.51207352]
[213.89369202 -35.98611069]
[205.64140320 -23.46014786]
[206.12007141 -20.63557434]
[205.47174072 -17.44595909]
[203.54951477 -14.33357716]
[200.37432861 -11.78618240]
[196.14587402 -10.27565098]
[186.88093567 1.52098858]
[177.61598206 13.31762886]
[175.83975220 28.10594368]
[161.23095703 34.17994308]
[151.96600342 45.97658157]
[142.70104980 57.77322388]
[133.43611145 69.56986237]
[124.17115784 81.36650085]
[135.36032104 107.20973969]
[120.40022278 136.31875610]
[83.98019409 144.42390442]
[83.98019409 159.42390442]
[98.53866577 163.35914612]
[111.57225037 170.92294312]
[122.19551086 181.59451294]
[129.68855286 194.64215088]
[133.54580688 209.17347717]
[133.51013184 224.19638062]
[129.58998108 238.68682861]
[122.05838013 251.65861511]
[111.43390656 262.23052979]
[98.44504547 269.68612671]
[83.98019409 273.52246094]
[83.98019409 288.52246094]
[83.98019409 303.52246094]
[83.98019409 318.52246094]
[83.98019409 333.52246094]
[83.98019409 348.52246094]
[83.98019409 363.52246094]
[83.98019409 378.52246094]
[83.98019409 393.52246094]
[83.98019409 408.52246094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[23 39]
[24 38]
[25 37]
[28 36]
[29 35]
[42 50]
[43 49]
[44 48]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[63 120]
[64 119]
[65 118]
[66 113]
[67 112]
[68 111]
[69 110]
[70 109]
[81 100]
[82 99]
[83 98]
[84 97]
[85 95]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
