%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[6.87788296 306.01165771]
[0.24938448 319.46762085]
[-6.37911415 332.92358398]
[-13.00761223 346.37954712]
[-19.63611221 359.83551025]
[-26.26461029 373.29147339]
[-32.89310837 386.74743652]
[-39.52160645 400.20343018]
[-46.15010452 413.65939331]
[-47.72546005 430.53997803]
[-64.38246155 433.69921875]
[-72.02933502 418.56771851]
[-59.60607147 407.03088379]
[-52.97757339 393.57492065]
[-46.34907532 380.11895752]
[-39.72057724 366.66299438]
[-33.09207535 353.20703125]
[-26.46357727 339.75106812]
[-19.83507919 326.29510498]
[-13.20658112 312.83911133]
[-6.57808256 299.38314819]
[-34.99710464 281.35134888]
[-60.42424011 259.30032349]
[-82.29595947 233.71879578]
[-100.12751770 205.17370605]
[-113.52373505 174.29769897]
[-127.84632874 178.75450134]
[-142.16893005 183.21131897]
[-152.88975525 195.62083435]
[-168.94412231 192.27572632]
[-173.81665039 176.61715698]
[-162.49491882 164.75332642]
[-146.62574768 168.88873291]
[-132.30314636 164.43191528]
[-117.98055267 159.97509766]
[-120.76121521 148.75466919]
[-122.96472168 137.40676880]
[-124.58529663 125.96108246]
[-125.61870575 114.44751740]
[-126.06225586 102.89617920]
[-125.91477966 91.33726501]
[-125.17667389 79.80100250]
[-123.84984589 68.31755066]
[-121.93778992 56.91693115]
[-119.44548798 45.62894821]
[-116.37945557 34.48311615]
[-112.74772644 23.50857162]
[-108.55977631 12.73400784]
[-103.82656097 2.18759561]
[-98.56045532 -8.10309315]
[-92.77522278 -18.11115265]
[-86.48600006 -27.81042099]
[-79.70922089 -37.17553711]
[-72.46260834 -46.18201828]
[-64.76509857 -54.80631256]
[-56.63682175 -63.02588272]
[-48.09903336 -70.81922913]
[-39.17404556 -78.16598511]
[-29.88520050 -85.04692841]
[-20.25677872 -91.44409180]
[-10.31395435 -97.34072876]
[-0.08272183 -102.72143555]
[10.41017056 -107.57214355]
[21.13728905 -111.88016510]
[32.07058716 -115.63424683]
[43.18148422 -118.82456207]
[54.44092941 -121.44277954]
[65.81948090 -123.48204803]
[77.28739929 -124.93703461]
[88.81469727 -125.80394745]
[100.37123871 -126.08050537]
[111.92681122 -125.76599121]
[123.45120239 -124.86122894]
[134.91427612 -123.36858368]
[146.28607178 -121.29196167]
[157.53686523 -118.63677979]
[168.63722229 -115.40998840]
[179.55813599 -111.62002563]
[190.27104187 -107.27680206]
[200.74794006 -102.39165497]
[210.96145630 -96.97737885]
[220.88485718 -91.04811859]
[230.49221802 -84.61936951]
[239.75842285 -77.70795441]
[248.65922546 -70.33193207]
[257.17138672 -62.51058578]
[265.27261353 -54.26436996]
[276.57162476 -64.13008881]
[287.87063599 -73.99581146]
[299.16961670 -83.86153412]
[301.70532227 -90.08068085]
[306.32916260 -93.52328491]
[311.14999390 -93.89068604]
[322.84960938 -103.27784729]
[326.02075195 -119.00436401]
[340.35861206 -126.20192719]
[354.86444092 -119.34916687]
[358.41061401 -103.70294952]
[348.27679443 -91.26570129]
[332.23678589 -91.57822418]
[320.53713989 -82.19106293]
[309.03533936 -72.56253052]
[297.73635864 -62.69681168]
[286.43734741 -52.83108521]
[275.13833618 -42.96536255]
[283.00115967 -32.75206757]
[290.26913452 -22.10727501]
[296.91867065 -11.06558895]
[302.92816162 0.33710352]
[308.27804565 12.06373882]
[312.95095825 24.07620049]
[316.93167114 36.33544159]
[320.20730591 48.80162048]
[322.76718140 61.43421173]
[324.60296631 74.19215393]
[325.70867920 87.03398895]
[326.08078003 99.91796112]
[325.71804810 112.80220032]
[324.62161255 125.64482880]
[322.79510498 138.40409851]
[320.24441528 151.03854370]
[316.97784424 163.50709534]
[313.00601196 175.76922607]
[308.34182739 187.78507996]
[303.00042725 199.51559448]
[296.99923706 210.92263794]
[290.35769653 221.96914673]
[283.09744263 232.61921692]
[275.24203491 242.83821106]
[266.81704712 252.59294128]
[257.84982300 261.85168457]
[248.36953735 270.58432007]
[238.40698242 278.76251221]
[227.99455261 286.35968018]
[217.16609192 293.35107422]
[205.95680237 299.71401978]
[194.40310669 305.42779541]
[182.54257202 310.47387695]
[170.41374207 314.83584595]
[158.05603027 318.49948120]
[145.50961304 321.45294189]
[132.81529236 323.68658447]
[120.01428986 325.19317627]
[107.14823914 325.96777344]
[94.25895691 326.00790405]
[81.38833618 325.31341553]
[68.57820129 323.88659668]
[55.87020874 321.73202515]
[43.30565262 318.85675049]
[30.92537308 315.27014160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[9 13]
[26 35]
[27 34]
[28 33]
[87 105]
[88 104]
[89 103]
[90 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
