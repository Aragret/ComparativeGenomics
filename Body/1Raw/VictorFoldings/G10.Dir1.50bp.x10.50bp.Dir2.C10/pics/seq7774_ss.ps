%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUxxxxxxxxxxCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.28218079 456.08923340]
[109.28218079 441.08923340]
[109.28218079 426.08923340]
[109.28218079 411.08923340]
[109.28218079 396.08923340]
[109.28218079 381.08923340]
[109.28218079 366.08923340]
[109.28218079 351.08923340]
[109.28218079 336.08923340]
[109.28218079 321.08923340]
[94.55236816 318.35556030]
[80.57199860 312.96029663]
[67.81771851 305.08581543]
[56.72467041 294.99902344]
[47.67164230 283.04238892]
[40.96811295 269.62222290]
[36.84370041 255.19493103]
[35.44027710 240.25144958]
[36.80710220 225.30056763]
[40.89907837 210.85159302]
[47.57825851 197.39703369]
[56.61848450 185.39575195]
[67.71304321 175.25733948]
[80.48507690 167.32820129]
[94.50038910 161.87957764]
[109.28218079 159.09843445]
[109.28218079 144.09843445]
[109.28218079 129.09843445]
[91.58602905 129.96194458]
[76.05333710 120.76952362]
[68.00366974 104.24517822]
[53.04342270 105.33649445]
[38.08317566 106.42780304]
[23.12292671 107.51911163]
[7.76566505 114.70178986]
[-3.38762331 101.93305969]
[5.79456329 87.68090820]
[22.03161621 92.55886841]
[36.99186325 91.46755219]
[51.95211411 90.37624359]
[66.91236115 89.28493500]
[74.50227356 76.34687805]
[68.15514374 62.75592804]
[55.30522537 53.52607346]
[56.93026733 38.72037888]
[50.58313751 25.12942886]
[44.23600769 11.53847790]
[37.88887787 -2.05247283]
[28.87134743 -14.03930569]
[17.57234383 -23.90502930]
[6.27333832 -33.77075195]
[-9.14811039 -31.17981529]
[-22.60076332 -39.15227509]
[-27.73269081 -53.92377853]
[-22.12075424 -68.51967621]
[-8.41473675 -76.04822540]
[6.91379929 -72.95468140]
[16.62718582 -60.69971848]
[16.13906097 -45.06975555]
[27.43806648 -35.20403290]
[38.73707199 -25.33831024]
[34.21637726 -39.64087296]
[33.82844925 -54.63585663]
[37.60355759 -69.15303802]
[45.24709702 -82.05948639]
[56.16255188 -92.34796143]
[69.49807739 -99.21555328]
[84.21294403 -102.12631226]
[99.15881348 -100.85306549]
[113.16928101 -95.49519348]
[125.15095520 -86.47081757]
[134.16879272 -74.48420715]
[139.51901245 -60.47082138]
[140.78410339 -45.52426147]
[137.86531067 -30.81097984]
[130.99043274 -17.47920990]
[120.69599915 -6.56937313]
[107.78537750 1.06711555]
[93.26614380 4.83429909]
[78.27136993 4.43818235]
[63.97127914 -0.09032028]
[51.47982788 -8.39960194]
[57.82695770 5.19134855]
[64.17408752 18.78229904]
[70.52121735 32.37324905]
[82.91714478 40.63098907]
[81.74609375 56.40879822]
[88.09322357 69.99974823]
[98.78486633 68.03531647]
[109.42300415 69.73413086]
[118.79948425 74.83732605]
[125.87147522 82.70318604]
[129.87738037 92.38722992]
[130.41851807 102.75531006]
[145.06201172 99.50448608]
[159.70552063 96.25366211]
[174.34901428 93.00283051]
[188.99252319 89.75200653]
[203.63601685 86.50118256]
[218.27952576 83.25035858]
[220.53582764 68.24124146]
[228.06507874 55.06266785]
[239.84899902 45.49692535]
[254.29394531 40.83771133]
[269.44631958 41.71513748]
[283.25689697 48.01054382]
[293.85794067 58.87252426]
[299.81570435 72.83209229]
[300.32446289 88.00131989]
[295.31542969 102.32870483]
[285.46600342 113.87657928]
[272.10827637 121.08319092]
[257.04873657 122.97390747]
[242.32406616 119.29301453]
[229.92568970 110.53833008]
[221.53034973 97.89385986]
[206.88684082 101.14468384]
[192.24334717 104.39550781]
[177.59983826 107.64633179]
[162.95634460 110.89716339]
[148.31283569 114.14798737]
[133.66934204 117.39881134]
[124.28218079 129.09843445]
[124.28218079 144.09843445]
[124.28218079 159.09843445]
[139.06398010 161.87957764]
[153.07928467 167.32820129]
[165.85131836 175.25733948]
[176.94587708 185.39575195]
[185.98609924 197.39703369]
[192.66528320 210.85159302]
[196.75726318 225.30056763]
[198.12408447 240.25144958]
[196.72065735 255.19493103]
[192.59625244 269.62222290]
[185.89271545 283.04238892]
[176.83969116 294.99902344]
[165.74664307 305.08581543]
[152.99237061 312.96029663]
[139.01199341 318.35556030]
[124.28218079 321.08923340]
[124.28218079 336.08923340]
[124.28218079 351.08923340]
[124.28218079 366.08923340]
[124.28218079 381.08923340]
[124.28218079 396.08923340]
[124.28218079 411.08923340]
[124.28218079 426.08923340]
[124.28218079 441.08923340]
[124.28218079 456.08923340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[31 41]
[32 40]
[33 39]
[34 38]
[42 88]
[43 87]
[45 85]
[46 84]
[47 83]
[48 82]
[49 61]
[50 60]
[51 59]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
