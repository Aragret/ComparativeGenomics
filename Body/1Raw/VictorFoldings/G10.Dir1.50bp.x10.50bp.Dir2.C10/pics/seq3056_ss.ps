%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCxxxxxxxxxxAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.35430145 252.12654114]
[89.35430145 237.12654114]
[89.35430145 222.12654114]
[89.35430145 207.12654114]
[89.35430145 192.12654114]
[89.35430145 177.12654114]
[89.35430145 162.12654114]
[89.35430145 147.12654114]
[89.35430145 132.12654114]
[89.35430145 117.12654114]
[86.81227112 119.15496063]
[84.06094360 120.97743988]
[70.53675842 127.46560669]
[57.01256561 133.95378113]
[47.91688156 146.89900208]
[33.09508514 145.42807007]
[19.57089615 151.91622925]
[6.04670668 158.40440369]
[1.01577902 170.32679749]
[-10.43432140 175.43699646]
[-21.90846062 171.48081970]
[-35.56470108 177.68621826]
[-49.22094345 183.89163208]
[-58.58396912 196.64483643]
[-73.37195587 194.86585999]
[-82.46428680 208.51362610]
[-98.81021118 207.19343567]
[-105.59443665 192.26339722]
[-95.83793640 179.08224487]
[-79.57736206 181.20962524]
[-71.19112396 168.90026855]
[-55.42634964 170.23538208]
[-41.77011108 164.02998352]
[-28.11386871 157.82456970]
[-18.73200035 143.02658081]
[-0.44145843 144.88020325]
[13.08273125 138.39204407]
[26.60692215 131.90388489]
[34.73526382 119.42272186]
[50.52440262 120.42958069]
[64.04859161 113.94142151]
[77.57278442 107.45325470]
[79.44039154 92.56997681]
[67.93859100 82.94144440]
[56.43678665 73.31291962]
[44.93498230 63.68439484]
[33.43318176 54.05587006]
[21.83183861 44.54750824]
[10.13221550 35.16034698]
[-4.46226168 40.16082764]
[-19.43790627 36.45494080]
[-30.01604652 25.22522545]
[-32.82123566 10.05504227]
[-26.95834541 -4.21485901]
[-14.29820728 -13.03100491]
[1.11937821 -13.58019447]
[14.37471390 -5.68718386]
[21.23807144 8.12939548]
[19.51937675 23.46072388]
[31.21900177 32.84788513]
[38.45112991 34.59200287]
[43.06170654 42.55406570]
[54.56351089 52.18259048]
[66.06531525 61.81111908]
[77.56711578 71.43964386]
[89.06892395 81.06816864]
[83.59130096 67.10408783]
[73.54884338 55.96186447]
[68.33476257 41.89724731]
[68.68722534 26.90139008]
[74.55632782 13.09727383]
[85.11116791 2.43916655]
[98.85749817 -3.56404591]
[113.84921265 -4.06248045]
[127.96392059 1.01442659]
[139.20338440 10.94793034]
[145.97640991 24.33172989]
[147.32414246 39.27106094]
[143.05575562 53.65094376]
[133.77555847 65.43559265]
[120.79609680 72.95707703]
[111.29555511 84.56482697]
[125.19811249 78.93286896]
[139.10066223 73.30091095]
[153.00321960 67.66895294]
[149.66448975 53.01122665]
[148.72039795 38.00773239]
[150.19538879 23.04709816]
[154.05126953 8.51684189]
[160.18815613 -5.20666838]
[168.44709778 -17.76796150]
[178.61416626 -28.84166908]
[190.42599487 -38.14095306]
[203.57664490 -45.42494583]
[217.72547913 -50.50497055]
[232.50601196 -53.24943924]
[247.53538513 -53.58726883]
[262.42431641 -51.50970840]
[276.78710938 -47.07056808]
[290.25177002 -40.38483429]
[302.46951294 -31.62568283]
[313.12390137 -21.01999855]
[321.93890381 -8.84249306]
[328.68624878 4.59140635]
[333.19113159 18.93372917]
[335.33685303 33.81297684]
[335.06787109 48.84373856]
[332.39111328 63.63668442]
[327.37594604 77.80863953]
[320.15228271 90.99251556]
[310.90719604 102.84681702]
[299.88015747 113.06449127]
[287.35681152 121.38087463]
[273.66156006 127.58055878]
[259.14910889 131.50294495]
[244.19540405 133.04644775]
[229.18774414 132.17108154]
[214.51487732 128.89952087]
[200.55686951 123.31649017]
[187.67526245 115.56662750]
[176.20372009 105.85066986]
[166.43939209 94.42027283]
[158.63517761 81.57151031]
[144.73262024 87.20346832]
[130.83006287 92.83542633]
[116.92751312 98.46738434]
[131.82826233 100.19011688]
[146.29721069 96.23419189]
[161.15414429 98.30098724]
[173.99397278 106.05590820]
[182.73815918 118.24357605]
[185.97116089 132.89102173]
[183.16963196 147.62707520]
[174.78707886 160.06623840]
[162.18049622 168.19482422]
[147.39065552 170.69696045]
[132.81178284 167.16758728]
[120.80393219 158.17805481]
[113.31098175 145.18360901]
[111.54568481 130.29028320]
[104.35430145 117.12654114]
[104.35430145 132.12654114]
[104.35430145 147.12654114]
[104.35430145 162.12654114]
[104.35430145 177.12654114]
[104.35430145 192.12654114]
[104.35430145 207.12654114]
[104.35430145 222.12654114]
[104.35430145 237.12654114]
[104.35430145 252.12654114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[18 36]
[21 34]
[22 33]
[23 32]
[25 30]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 60]
[49 59]
[82 126]
[83 125]
[84 124]
[85 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
