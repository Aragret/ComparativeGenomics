%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCxxxxxxxxxxGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.74529266 255.62683105]
[107.74529266 240.62683105]
[107.74529266 225.62683105]
[107.74529266 210.62683105]
[107.74529266 195.62683105]
[107.74529266 180.62683105]
[107.74529266 165.62683105]
[107.74529266 150.62683105]
[107.74529266 135.62683105]
[107.74529266 120.62683868]
[94.24990845 114.07896423]
[82.46777344 123.36235046]
[70.68563843 132.64573669]
[68.68338776 148.09335327]
[56.60238266 157.34017944]
[41.88778305 155.33615112]
[30.10564613 164.61953735]
[18.32350922 173.90292358]
[18.02282715 189.53761292]
[7.70380592 201.28715515]
[-7.76122808 203.60377502]
[-21.07015800 195.39364624]
[-25.93891525 180.53330994]
[-20.06862068 166.03939819]
[-6.23104763 158.75547791]
[9.04012394 162.12078857]
[20.82226181 152.83740234]
[32.60439682 143.55401611]
[34.09837723 128.77891541]
[45.91489410 119.19639587]
[61.40225220 120.86360168]
[73.18438721 111.58021545]
[84.96652222 102.29682922]
[70.36767578 105.74263000]
[56.71424103 99.53104401]
[49.71996689 86.26152039]
[52.31184387 71.48714447]
[63.40520859 61.39075089]
[78.35767365 60.19751358]
[90.91187286 68.40678406]
[95.81407928 82.58438110]
[97.35137177 67.66336823]
[98.88866425 52.74234772]
[100.42595673 37.82133102]
[101.65657043 22.87189674]
[102.57997894 7.90034723]
[103.50339508 -7.07120275]
[104.42681122 -22.04275322]
[105.35021973 -37.01430130]
[106.27363586 -51.98585129]
[89.80140686 -62.98778534]
[82.30097961 -81.18999481]
[86.19214630 -100.36458588]
[100.02183533 -114.03224945]
[96.06522369 -128.50100708]
[92.10861206 -142.96978760]
[88.15200043 -157.43855286]
[73.09135437 -156.91539001]
[58.31614304 -159.88014221]
[44.62316895 -166.17292786]
[32.75088120 -175.45439148]
[23.33953285 -187.22398376]
[16.89667130 -200.84698486]
[13.76974869 -215.58872986]
[14.12739754 -230.65422058]
[17.95032883 -245.23097229]
[25.03237724 -258.53289795]
[34.99161911 -269.84265137]
[47.29096222 -278.55029297]
[61.26711655 -284.18621826]
[76.16637421 -286.44650269]
[91.18522644 -285.20928955]
[105.51373291 -280.54122925]
[118.37917328 -272.69412231]
[129.08772278 -262.09112549]
[137.06190491 -249.30404663]
[141.87165833 -235.02247620]
[143.25759888 -220.01661682]
[141.14500427 -205.09570312]
[135.64779663 -191.06440735]
[127.06242371 -178.67941284]
[115.85189056 -168.60862732]
[102.62076569 -161.39515686]
[106.57737732 -146.92639160]
[110.53398895 -132.45762634]
[114.49060059 -117.98885345]
[120.81591797 -117.63595581]
[126.95972443 -116.09072113]
[132.69935608 -113.40917206]
[143.03025818 -124.28448486]
[153.36117554 -135.15979004]
[163.69207764 -146.03511047]
[164.71940613 -162.04524231]
[177.95906067 -171.10565186]
[193.25471497 -166.26596069]
[198.87284851 -151.23878479]
[190.50370789 -137.55166626]
[174.56738281 -135.70420837]
[164.23648071 -124.82889557]
[153.90557861 -113.95358276]
[143.57467651 -103.07826996]
[148.68217468 -90.88463593]
[148.65176392 -77.59841919]
[143.43687439 -65.30650330]
[133.80923462 -55.95953751]
[121.24518585 -51.06243896]
[120.32176971 -36.09088898]
[119.39836121 -21.11933899]
[118.47494507 -6.14778900]
[117.55152893 8.82376099]
[116.62812042 23.79531097]
[119.10563660 27.94393921]
[118.96035004 33.70299911]
[115.34696960 39.35862350]
[113.80967712 54.27964020]
[112.27238464 69.20066071]
[110.73509216 84.12167358]
[119.23770905 71.76426697]
[125.38775635 58.08300400]
[134.39434814 46.08794785]
[145.81703186 36.36569977]
[159.09721375 29.39170074]
[173.58546448 25.50700188]
[188.57324219 24.90157890]
[203.32760620 27.60503578]
[217.12702942 33.48516846]
[229.29667664 42.25441742]
[239.24140930 53.48394012]
[246.47491455 66.62458038]
[250.64343262 81.03372955]
[251.54312134 96.00672150]
[249.12998962 110.81134033]
[243.52203369 124.72359467]
[234.99351501 137.06314087]
[223.96148682 147.22651672]
[210.96546936 154.71673584]
[196.64097595 159.16748047]
[181.68853760 160.36108398]
[166.83938599 158.23921204]
[152.81965637 152.90560913]
[140.31498718 144.62109375]
[129.93667603 133.79057312]
[122.74529266 120.62683868]
[122.74529266 135.62683105]
[122.74529266 150.62683105]
[122.74529266 165.62683105]
[122.74529266 180.62683105]
[122.74529266 195.62683105]
[122.74529266 210.62683105]
[122.74529266 225.62683105]
[122.74529266 240.62683105]
[122.74529266 255.62683105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 33]
[12 32]
[13 31]
[16 28]
[17 27]
[18 26]
[41 117]
[42 116]
[43 115]
[44 114]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[54 86]
[55 85]
[56 84]
[57 83]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
