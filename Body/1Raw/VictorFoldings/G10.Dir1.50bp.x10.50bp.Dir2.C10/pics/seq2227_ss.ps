%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGxxxxxxxxxxCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.39910889]
[92.50000000 278.39910889]
[92.50000000 263.39910889]
[92.50000000 248.39910889]
[92.50000000 233.39910889]
[92.50000000 218.39910889]
[92.50000000 203.39910889]
[92.50000000 188.39910889]
[92.50000000 173.39910889]
[92.50000000 158.39910889]
[77.71592712 156.61601257]
[63.39225006 151.03720093]
[53.88388824 162.63853455]
[44.37553024 174.23988342]
[42.25006866 190.50070190]
[27.00333405 196.53967285]
[14.31985950 186.14440918]
[17.24731827 170.00866699]
[32.77418900 164.73152161]
[42.28254700 153.13018799]
[51.79090881 141.52883911]
[43.40876389 129.08940125]
[29.08616638 133.54621887]
[14.76356983 138.00303650]
[0.44097206 142.45983887]
[-2.86128926 157.45953369]
[-13.23281765 168.78768921]
[-27.88372231 173.39707947]
[-42.87298584 170.04782104]
[-54.16857147 159.64083862]
[-58.73202133 144.97555542]
[-55.33579254 129.99685669]
[-44.89345169 118.73395538]
[-30.21393776 114.21649170]
[-15.24596500 117.65965271]
[-4.01584339 128.13725281]
[10.30675411 123.68043518]
[24.62935066 119.22361755]
[38.95195007 114.76679993]
[39.18687057 101.92784119]
[42.00979996 89.80969238]
[27.68720245 85.35288239]
[13.36460590 80.89606476]
[-3.55572343 81.96321106]
[-9.26517868 65.99954987]
[4.49408197 56.09403992]
[17.82142067 66.57346344]
[32.14402008 71.03028107]
[46.46661758 75.48709869]
[57.70784378 59.03563690]
[73.79247284 47.27551651]
[92.87845612 41.55353546]
[112.78001404 42.52499008]
[131.21797180 50.07862473]
[140.72633362 38.47728348]
[150.23469543 26.87594032]
[159.74304199 15.27460003]
[167.99533081 2.74863791]
[174.90232849 -10.56651783]
[181.80932617 -23.88167381]
[188.71633911 -37.19683075]
[195.62333679 -50.51198578]
[202.53033447 -63.82714081]
[209.43733215 -77.14229584]
[197.14212036 -85.77429199]
[186.10719299 -95.96810913]
[176.52947998 -107.54181671]
[168.57991028 -120.28888702]
[162.40032959 -133.98181152]
[158.10105896 -148.37625122]
[155.75878906 -163.21528625]
[155.41532898 -178.23413086]
[157.07682800 -193.16473389]
[160.71360779 -207.74064636]
[166.26078796 -221.70173645]
[173.61935425 -234.79887390]
[182.65798950 -246.79830933]
[193.21539307 -257.48590088]
[205.10316467 -266.67092896]
[218.10913086 -274.18942261]
[232.00120544 -279.90728760]
[246.53144836 -283.72241211]
[261.44058228 -285.56677246]
[276.46249390 -285.40737915]
[291.32913208 -283.24716187]
[305.77517700 -279.12460327]
[319.54278564 -273.11331177]
[332.38632202 -265.32052612]
[344.07653809 -255.88537598]
[354.40481567 -244.97621155]
[363.18685913 -232.78770447]
[370.26589966 -219.53739929]
[375.51562500 -205.46176147]
[378.84234619 -190.81196594]
[380.18667603 -175.84947205]
[379.52465820 -160.84129333]
[376.86810303 -146.05529785]
[372.26440430 -131.75531006]
[365.79571533 -118.19657135]
[357.57748413 -105.62103271]
[347.75637817 -94.25312805]
[336.50765991 -84.29573059]
[324.03207397 -75.92652893]
[310.55227661 -69.29489899]
[296.30883789 -64.51918030]
[281.55590820 -61.68460464]
[266.55679321 -60.84175491]
[251.57919312 -62.00567627]
[236.89038086 -65.15559387]
[222.75248718 -70.23529816]
[215.84548950 -56.92014313]
[208.93849182 -43.60498810]
[202.03149414 -30.28983116]
[195.12449646 -16.97467422]
[188.21748352 -3.65951920]
[181.31048584 9.65563679]
[195.01432800 3.55604768]
[209.94575500 4.98862743]
[222.23983765 13.58255672]
[228.71427917 27.11332321]
[227.69319153 42.07852936]
[219.44087219 54.60447693]
[206.09342957 61.44886017]
[191.10578918 60.84003448]
[178.35746765 52.93559265]
[171.14831543 39.78157425]
[171.34439087 24.78295898]
[161.83602905 36.38430023]
[152.32766724 47.98564148]
[142.81930542 59.58698273]
[149.99337769 68.89745331]
[155.17514038 79.44740295]
[158.15812683 90.81639099]
[158.82342529 102.55136108]
[157.14456177 114.18465424]
[153.18841553 125.25267029]
[147.11265564 135.31434631]
[139.15940857 143.96868896]
[129.64561462 150.87084961]
[118.95040131 155.74574280]
[107.50000000 158.39910889]
[107.50000000 173.39910889]
[107.50000000 188.39910889]
[107.50000000 203.39910889]
[107.50000000 218.39910889]
[107.50000000 233.39910889]
[107.50000000 248.39910889]
[107.50000000 263.39910889]
[107.50000000 278.39910889]
[107.50000000 293.39910889]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 21]
[13 20]
[14 19]
[22 39]
[23 38]
[24 37]
[25 36]
[41 49]
[42 48]
[43 47]
[54 130]
[55 129]
[56 128]
[57 127]
[58 116]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
