%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUxxxxxxxxxxCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.11573792 376.60278320]
[94.11573792 361.60278320]
[94.11573792 346.60278320]
[94.11573792 331.60278320]
[94.11573792 316.60278320]
[94.11573792 301.60278320]
[94.11573792 286.60278320]
[94.11573792 271.60278320]
[94.11573792 256.60278320]
[94.11573792 241.60279846]
[79.07525635 238.00576782]
[65.31793976 230.92340088]
[53.63871765 220.76025391]
[44.71359253 208.09907532]
[39.06045151 193.66732788]
[37.00903320 178.29544067]
[38.68171692 162.86898804]
[43.98620605 148.27767944]
[52.62061691 135.36405945]
[64.09066772 124.87487793]
[77.73795319 117.41783905]
[92.77775574 113.42646027]
[82.11613464 102.87516785]
[67.11694336 102.71913147]
[52.11775589 102.56309509]
[37.11856461 102.40705872]
[22.11937714 102.25102234]
[7.12018919 102.09498596]
[-7.87899923 101.93894958]
[-22.87818718 101.78291321]
[-37.87737656 101.62687683]
[-44.17752457 115.49150848]
[-55.57655716 125.59011841]
[-70.09952545 130.17306519]
[-85.23023224 128.44631958]
[-98.34719086 120.70905304]
[-107.17781067 108.30179596]
[-110.19213104 93.37417603]
[-106.86791229 78.51250458]
[-97.78108215 66.29164124]
[-84.50599670 58.82892990]
[-69.34264374 57.41733551]
[-54.91816711 62.30142212]
[-43.73168945 72.63498688]
[-37.72134018 86.62768555]
[-22.72215080 86.78372192]
[-7.72296238 86.93975830]
[7.27622604 87.09579468]
[22.27541351 87.25183105]
[37.27460098 87.40786743]
[52.27379227 87.56390381]
[67.27297974 87.71994019]
[82.27217102 87.87597656]
[69.18395233 80.54804993]
[57.97054291 70.58514404]
[52.22145844 56.73060989]
[53.08659744 41.75558090]
[60.39292145 28.65528870]
[72.67905426 20.04999924]
[87.48757172 17.66090393]
[101.85654449 21.96585655]
[112.91194916 32.10380173]
[118.44254303 46.04699326]
[117.34210968 61.00657272]
[109.82901001 73.99227142]
[104.35139465 87.95635223]
[115.85319519 78.32782745]
[127.35499573 68.69930267]
[138.85679626 59.07077789]
[150.35861206 49.44224930]
[143.26237488 35.65311050]
[139.39910889 20.64123535]
[138.95783997 5.15346384]
[141.95738220 -10.04038620]
[148.24568176 -24.18579102]
[157.50737000 -36.58098984]
[169.27970886 -46.61179733]
[182.97560120 -53.78203201]
[197.91296387 -57.73807526]
[213.34861755 -58.28629303]
[228.51533508 -55.40251160]
[242.65991211 -49.23308182]
[255.08059692 -40.08744431]
[266.37960815 -49.95316696]
[268.04217529 -62.78631592]
[277.71066284 -70.77001190]
[289.82470703 -70.02333832]
[301.32650757 -79.65186310]
[312.82830811 -89.28038788]
[324.33010864 -98.90891266]
[335.83190918 -108.53744507]
[333.10336304 -123.65202332]
[338.31274414 -138.10047913]
[350.05877686 -147.99624634]
[365.18182373 -150.67741394]
[379.61389160 -145.42276001]
[389.47277832 -133.64576721]
[392.10653687 -118.51437378]
[386.80667114 -104.09886169]
[374.99884033 -94.27692413]
[359.85925293 -91.69061279]
[345.46044922 -97.03563690]
[333.95861816 -87.40711212]
[322.45681763 -77.77858734]
[310.95501709 -68.15006256]
[299.45321655 -58.52153397]
[294.36618042 -41.75483704]
[276.24533081 -38.65416336]
[264.94631958 -28.78844070]
[271.98831177 -16.07760239]
[276.22195435 -2.17047358]
[277.45803833 12.32024288]
[275.63952637 26.75557137]
[270.84411621 40.49845123]
[263.28094482 52.94184113]
[253.28141785 63.53554153]
[241.28479004 71.81051636]
[227.81880188 77.39966583]
[213.47645569 80.05410767]
[198.88993835 79.65425110]
[184.70274353 76.21519470]
[171.54125977 69.88616943]
[159.98713684 60.94405365]
[148.48532104 70.57257843]
[136.98352051 80.20110321]
[125.48171997 89.82963562]
[113.97991943 99.45816040]
[107.77451324 113.11440277]
[122.02903748 116.15428162]
[135.23698425 122.29943848]
[146.73181152 131.23603821]
[155.93421936 142.50947571]
[162.38142395 155.54745483]
[165.75036621 169.68910217]
[165.87396240 184.21846008]
[162.74931335 198.40068054]
[156.53773499 211.51922607]
[147.55641174 222.91207886]
[136.26222229 232.00515747]
[123.22844696 238.34120178]
[109.11573792 241.60279846]
[109.11573792 256.60278320]
[109.11573792 271.60278320]
[109.11573792 286.60278320]
[109.11573792 301.60278320]
[109.11573792 316.60278320]
[109.11573792 331.60278320]
[109.11573792 346.60278320]
[109.11573792 361.60278320]
[109.11573792 376.60278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[66 127]
[67 126]
[68 125]
[69 124]
[70 123]
[83 109]
[84 108]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
