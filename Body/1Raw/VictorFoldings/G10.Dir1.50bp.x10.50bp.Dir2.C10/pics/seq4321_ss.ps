%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUxxxxxxxxxxCUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.04985046 335.93002319]
[112.04985046 320.93002319]
[112.04985046 305.93002319]
[112.04985046 290.93002319]
[112.04985046 275.93002319]
[112.04985046 260.93002319]
[112.04985046 245.93000793]
[112.04985046 230.93000793]
[112.04985046 215.93000793]
[112.04985046 200.93000793]
[110.49227142 186.01110840]
[107.39395142 171.33457947]
[104.29562378 156.65805054]
[97.17839813 156.75054932]
[90.10545349 155.95252991]
[83.18777466 154.27647400]
[76.53391266 151.74871826]
[70.24828339 148.40890503]
[64.42952728 144.30946350]
[59.16894150 139.51470947]
[54.54908371 134.09986877]
[50.64245224 128.14994812]
[47.51034164 121.75828552]
[45.20190811 115.02518463]
[30.33886147 117.04752350]
[15.47581482 119.06985474]
[12.28339195 133.88822937]
[4.21268463 146.71942139]
[-7.76172876 156.01400757]
[-22.19388008 160.64961243]
[-37.34101486 160.06646729]
[-51.37404633 154.33499146]
[-62.59841919 144.14727783]
[-69.65872955 130.73356628]
[-71.70241547 115.71360016]
[-68.48268890 100.90113831]
[-60.38834763 88.08483887]
[-48.39682388 78.81233978]
[-33.95615768 74.20334625]
[-18.81011963 74.81439972]
[-4.78767443 80.57173157]
[6.41790152 90.78010559]
[13.45348072 104.20681000]
[28.31652641 102.18447876]
[43.17957306 100.16213989]
[44.91441727 86.06566620]
[50.09097672 72.83980560]
[58.38582230 61.31089020]
[69.28069305 52.19925308]
[82.09489441 46.07417679]
[96.02779388 43.31835556]
[96.96342468 28.34756470]
[97.89905548 13.37677383]
[98.83467865 -1.59401786]
[99.77030945 -16.56480980]
[90.97366333 -4.41495419]
[80.01372528 5.82612705]
[67.29592896 13.77959442]
[53.29072952 19.15123177]
[38.51621628 21.74232864]
[23.51893044 21.45703697]
[8.85365200 18.30591011]
[-4.93711758 12.40551472]
[-17.34322739 3.97411871]
[-27.90574837 -6.67638159]
[-36.23395157 -19.15200043]
[-42.01975250 -32.99123764]
[-45.04912949 -47.68214798]
[-45.21001053 -62.68128586]
[-42.49645233 -77.43379974]
[-37.00883102 -91.39395905]
[-28.95014954 -104.04534149]
[-18.61851120 -114.91996002]
[-6.39610815 -123.61552429]
[7.26492548 -129.81037903]
[21.85923767 -133.27534485]
[36.84695435 -133.88226318]
[51.67364502 -131.60867310]
[65.79084015 -126.53868866]
[78.67631531 -118.85984039]
[89.85340118 -108.85620880]
[98.90863800 -96.89783478]
[105.50705719 -83.42709351]
[109.40455627 -68.94229126]
[110.45697021 -53.97925568]
[108.62679291 -39.09793091]
[118.13514709 -50.69927216]
[127.64350891 -62.30061340]
[137.15187073 -73.90195465]
[137.00621033 -89.94434357]
[149.54820251 -99.94824219]
[165.15669250 -96.23951721]
[171.85818481 -81.66318512]
[164.51187134 -67.40095520]
[148.75320435 -64.39359283]
[139.24484253 -52.79225159]
[129.73649597 -41.19091034]
[120.22813416 -29.58957100]
[114.74110413 -15.62918091]
[113.80547333 -0.65838939]
[112.86984253 14.31240177]
[111.93421936 29.28319359]
[110.99858856 44.25398636]
[139.96875000 59.61329269]
[155.62858582 88.42211151]
[170.58883667 87.33080292]
[185.54908752 86.23949432]
[200.50933838 85.14817810]
[210.65104675 73.02706909]
[226.40040588 71.71066284]
[238.41362000 81.97994995]
[239.56344604 97.74235535]
[229.16770935 109.64632416]
[213.39402771 110.62943268]
[201.60064697 100.10842896]
[186.64039612 101.19973755]
[171.68014526 102.29105377]
[156.71989441 103.38236237]
[155.93649292 109.98481750]
[154.38719177 116.45056152]
[152.09321594 122.69105530]
[149.08598328 128.62086487]
[145.40664673 134.15879822]
[141.10560608 139.22901917]
[136.24174500 143.76211548]
[130.88165283 147.69602966]
[125.09873199 150.97686768]
[118.97215271 153.55972290]
[122.07047272 168.23625183]
[125.16879272 182.91278076]
[131.90118408 169.50848389]
[144.35758972 161.15158081]
[159.31372070 160.00521851]
[172.89822388 166.36613464]
[181.59478760 178.58782959]
[183.15234375 193.50674438]
[177.16772461 207.26116943]
[165.19000244 216.29081726]
[150.31961060 218.25837708]
[136.40568542 212.65457153]
[127.04985046 200.93000793]
[127.04985046 215.93000793]
[127.04985046 230.93000793]
[127.04985046 245.93000793]
[127.04985046 260.93002319]
[127.04985046 275.93002319]
[127.04985046 290.93002319]
[127.04985046 305.93002319]
[127.04985046 320.93002319]
[127.04985046 335.93002319]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 130]
[12 129]
[13 128]
[24 45]
[25 44]
[26 43]
[51 103]
[52 102]
[53 101]
[54 100]
[55 99]
[86 98]
[87 97]
[88 96]
[89 95]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
