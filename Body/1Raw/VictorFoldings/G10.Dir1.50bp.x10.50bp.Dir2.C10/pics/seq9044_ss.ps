%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAxxxxxxxxxxGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.57123566 416.11807251]
[93.57123566 401.11807251]
[93.57123566 386.11807251]
[93.57123566 371.11807251]
[93.57123566 356.11807251]
[93.57123566 341.11807251]
[93.57123566 326.11807251]
[93.57123566 311.11807251]
[93.57123566 296.11807251]
[93.57123566 281.11807251]
[76.10009766 273.82867432]
[63.47427368 259.65820312]
[58.21392441 241.37196350]
[61.39632416 222.56298828]
[72.43555450 206.94590759]
[89.18984222 197.62339783]
[87.63226318 182.70448303]
[86.07468414 167.78556824]
[84.51710510 152.86665344]
[82.95951843 137.94775391]
[70.60794830 129.43666077]
[56.11235046 133.29382324]
[48.56579590 138.55702209]
[41.27501678 137.07708740]
[26.70231628 140.63185120]
[19.04789734 145.73692322]
[11.78948689 144.10562134]
[-2.85401464 147.35644531]
[-17.49751663 150.60726929]
[-32.14101791 153.85810852]
[-43.85628510 165.33348083]
[-59.57701874 160.66543579]
[-63.13106918 144.65603638]
[-50.86233902 133.77439880]
[-35.39184189 139.21459961]
[-20.74834251 135.96377563]
[-6.10484028 132.71295166]
[8.53866100 129.46212769]
[23.14755440 126.05914307]
[37.72025681 122.50437927]
[52.25519180 118.79821777]
[66.75078583 114.94106293]
[66.04621124 107.11337280]
[67.07154083 99.69386292]
[69.61755371 93.04273987]
[56.23126602 86.27462006]
[40.60171127 89.89354706]
[28.11744690 79.81769562]
[28.35533142 63.77640533]
[41.13288116 54.07518005]
[56.64825058 58.15596771]
[62.99937820 72.88833618]
[76.38566589 79.65644836]
[85.77846527 72.26473999]
[97.26259613 68.95159912]
[109.14926910 70.20423889]
[116.87335968 57.34583282]
[124.59744263 44.48743057]
[124.68148804 39.13836288]
[126.64887238 34.81612015]
[129.77644348 32.07386780]
[133.22581482 31.08929634]
[141.73690796 18.73772430]
[150.24800110 6.38615227]
[158.75907898 -5.96542025]
[167.27017212 -18.31699371]
[156.09194946 -28.35071373]
[146.28862000 -39.73153305]
[138.02116394 -52.27257156]
[131.42535400 -65.76788330]
[126.60948181 -79.99588013]
[123.65264130 -94.72290802]
[122.60338593 -109.70714569]
[123.47893524 -124.70253754]
[126.26492310 -139.46284485]
[130.91558838 -153.74568176]
[137.35458374 -167.31652832]
[145.47615051 -179.95252991]
[155.14694214 -191.44618225]
[166.20814514 -201.60876465]
[178.47813416 -210.27339172]
[191.75541687 -217.29777527]
[205.82197571 -222.56658936]
[220.44682312 -225.99328613]
[235.38978577 -227.52162170]
[250.40551758 -227.12649536]
[265.24743652 -224.81437683]
[279.67181396 -220.62324524]
[293.44180298 -214.62193298]
[306.33129883 -206.90898132]
[318.12860107 -197.61102295]
[328.64001465 -186.88076782]
[337.69293213 -174.89440918]
[345.13870239 -161.84875488]
[350.85504150 -147.95805359]
[354.74810791 -133.45039368]
[356.75393677 -118.56398773]
[356.83963013 -103.54330444]
[355.00375366 -88.63498688]
[351.27648926 -74.08384705]
[345.71899414 -60.12882614]
[338.42254639 -46.99907684]
[329.50695801 -34.91020966]
[319.11865234 -24.06072426]
[307.42819214 -14.62878418]
[294.62756348 -6.76926994]
[280.92694092 -0.61124176]
[266.55130005 3.74417996]
[251.73674011 6.22547531]
[236.72648621 6.79189920]
[221.76704407 5.43415070]
[207.10406494 2.17452478]
[192.97830200 -2.93345213]
[179.62174988 -9.80590248]
[171.11065674 2.54566979]
[162.59956360 14.89724255]
[154.08847046 27.24881554]
[145.57739258 39.60038757]
[137.45584106 52.21151733]
[129.73176575 65.06991577]
[122.00767517 77.92832184]
[130.75096130 90.36367798]
[132.74732971 105.94217682]
[127.07082367 121.12622833]
[114.59234619 132.24737549]
[97.87843323 136.39016724]
[99.43601227 151.30908203]
[100.99359894 166.22799683]
[102.55117798 181.14691162]
[104.10875702 196.06581116]
[115.20314789 198.39657593]
[125.29555511 203.52561951]
[133.69496155 211.09265137]
[139.82864380 220.57078552]
[143.28123474 231.30314636]
[143.82279968 242.54853821]
[141.42419434 253.53248596]
[136.25848389 263.50064087]
[128.68843079 271.77062988]
[119.24113464 277.77865601]
[108.57123566 281.11807251]
[108.57123566 296.11807251]
[108.57123566 311.11807251]
[108.57123566 326.11807251]
[108.57123566 341.11807251]
[108.57123566 356.11807251]
[108.57123566 371.11807251]
[108.57123566 386.11807251]
[108.57123566 401.11807251]
[108.57123566 416.11807251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 42]
[22 41]
[24 40]
[25 39]
[27 38]
[28 37]
[29 36]
[30 35]
[45 53]
[46 52]
[56 121]
[57 120]
[58 119]
[62 118]
[63 117]
[64 116]
[65 115]
[66 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
