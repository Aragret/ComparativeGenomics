%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUACCAUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAxxxxxxxxxxAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCAUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.66580963 397.16421509]
[87.66580963 382.16421509]
[87.66580963 367.16421509]
[87.66580963 352.16421509]
[87.66580963 337.16421509]
[87.66580963 322.16421509]
[87.66580963 307.16421509]
[87.66580963 292.16421509]
[87.66580963 277.16421509]
[87.66580963 262.16421509]
[73.66578674 258.66754150]
[60.90729523 251.90576172]
[50.13964844 242.27079773]
[41.99645996 230.32353210]
[36.95838547 216.76106262]
[35.32473373 202.37606812]
[37.19570160 188.01043701]
[42.46623611 174.50607300]
[50.83191681 162.65548706]
[61.80655289 153.15528870]
[74.75041199 146.56530762]
[88.90753174 143.27549744]
[89.21958923 128.27874756]
[89.53164673 113.28199768]
[81.14950562 100.84255219]
[67.13278961 95.50104523]
[53.11607742 90.15953064]
[43.61854172 100.81774902]
[31.07462311 107.57033539]
[17.00723267 109.62072754]
[3.11631060 106.74184418]
[-8.92659283 99.30101013]
[-17.67946815 88.21324921]
[-22.10249519 74.82880402]
[-21.68155098 60.76869202]
[-35.58410645 55.13673782]
[-49.48666382 49.50477982]
[-63.38921738 43.87282181]
[-77.79832458 49.79021454]
[-91.81726074 43.88056183]
[-97.36978912 30.10721779]
[-111.27234650 24.47526169]
[-125.17490387 18.84330368]
[-138.90313721 26.33127594]
[-154.22244263 23.19239616]
[-163.89953613 10.90875149]
[-163.36517334 -4.71969891]
[-152.87167358 -16.31367874]
[-137.37373352 -18.39886475]
[-124.18901825 -9.99069500]
[-119.54294586 4.94074821]
[-105.64038849 10.57270432]
[-91.73783112 16.20466232]
[-78.16474152 10.17914867]
[-63.98534393 15.69270611]
[-57.75726318 29.97026634]
[-43.85470581 35.60222244]
[-29.95215034 41.23418045]
[-16.04959488 46.86613846]
[-5.13268423 35.42035675]
[9.37055111 29.01264000]
[25.26047897 28.64701080]
[40.11478806 34.40866470]
[51.65776825 45.44649124]
[58.10892105 60.09866714]
[58.45759201 76.14281464]
[72.47430420 81.48432922]
[86.49102020 86.82584381]
[73.27297211 79.73477173]
[64.24864960 67.75305176]
[61.08276367 53.09095001]
[64.35932922 38.45318604]
[73.47391510 26.53998375]
[86.74514771 19.54897308]
[101.72489929 18.76978493]
[115.64984894 24.34615326]
[125.95125580 35.24940872]
[130.72882080 49.46822739]
[129.10124207 64.37966156]
[121.36874390 77.23300934]
[108.96058655 85.65607452]
[122.34687042 78.88796234]
[135.73315430 72.11984253]
[149.11944580 65.35173035]
[162.50572205 58.58361435]
[165.42610168 54.10131454]
[169.39344788 51.49122620]
[173.50109863 50.83631897]
[176.94482422 51.84038925]
[190.72721863 45.92042542]
[204.50959778 40.00046158]
[218.29197693 34.08049774]
[232.07435608 28.16053581]
[238.23156738 11.81960392]
[253.97947693 5.09000158]
[269.42459106 11.67074108]
[283.08084106 5.46533394]
[296.73709106 -0.74007308]
[310.39331055 -6.94548035]
[324.04956055 -13.15088749]
[331.00802612 -27.60630798]
[346.67974854 -31.03814697]
[359.04266357 -20.81378937]
[358.61303711 -4.77649021]
[345.72045898 4.77130938]
[330.25497437 0.50535393]
[316.59872437 6.71076107]
[302.94247437 12.91616821]
[289.28625488 19.12157440]
[275.63000488 25.32698250]
[272.81985474 37.94046402]
[263.09939575 46.74881363]
[249.88380432 48.35367966]
[237.99432373 41.94291687]
[224.21194458 47.86288071]
[210.42955017 53.78284454]
[196.64717102 59.70280838]
[182.86479187 65.62277222]
[169.27384949 71.96990204]
[155.88755798 78.73801422]
[142.50126648 85.50612640]
[129.11499023 92.27424622]
[115.72870636 99.04235840]
[115.15984344 103.09200287]
[113.58580780 106.78548431]
[111.15061188 109.88331604]
[108.05253601 112.19570923]
[104.52840424 113.59404755]
[104.21634674 128.59080505]
[103.90428925 143.58755493]
[118.92226410 147.89154053]
[132.31254578 155.91755676]
[143.17205811 167.11761475]
[150.77008057 180.72985840]
[154.59751892 195.83044434]
[154.40093994 211.39617920]
[150.19938660 226.37388611]
[142.28268433 239.75166321]
[131.19142151 250.62721252]
[117.68010712 258.26876831]
[102.66580963 262.16421509]
[102.66580963 277.16421509]
[102.66580963 292.16421509]
[102.66580963 307.16421509]
[102.66580963 322.16421509]
[102.66580963 337.16421509]
[102.66580963 352.16421509]
[102.66580963 367.16421509]
[102.66580963 382.16421509]
[102.66580963 397.16421509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 130]
[23 129]
[24 128]
[25 68]
[26 67]
[27 66]
[35 59]
[36 58]
[37 57]
[38 56]
[41 53]
[42 52]
[43 51]
[81 123]
[82 122]
[83 121]
[84 120]
[85 119]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
