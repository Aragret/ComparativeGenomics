%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAxxxxxxxxxxCUCUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-3.58892703 305.14047241]
[-10.78364849 318.30239868]
[-17.97836876 331.46429443]
[-25.17308998 344.62622070]
[-32.36781311 357.78814697]
[-39.56253433 370.95004272]
[-46.75725555 384.11196899]
[-53.95197678 397.27386475]
[-61.14669800 410.43579102]
[-68.34141541 423.59771729]
[-67.41788483 439.97082520]
[-81.28205872 448.72964478]
[-95.67166901 440.86380005]
[-95.78392029 424.46505737]
[-81.50333405 416.40298462]
[-74.30860901 403.24105835]
[-67.11389160 390.07916260]
[-59.91917038 376.91723633]
[-52.72444916 363.75534058]
[-45.52972794 350.59341431]
[-38.33500671 337.43148804]
[-31.14028358 324.26959229]
[-23.94556236 311.10766602]
[-16.75084114 297.94577026]
[-45.91516113 277.54449463]
[-71.57958984 252.88468933]
[-93.12854004 224.55781555]
[-110.04515076 193.24331665]
[-121.92366028 159.69232178]
[-136.52825928 163.11367798]
[-151.13285828 166.53504944]
[-162.71350098 178.14627075]
[-178.48760986 173.66186523]
[-182.22810364 157.69499207]
[-170.08709717 146.67102051]
[-154.55421448 151.93045044]
[-139.94961548 148.50907898]
[-125.34502411 145.08772278]
[-127.18114471 134.67002869]
[-128.53591919 124.17889404]
[-129.40646362 113.63652039]
[-129.79096985 103.06526184]
[-129.68858337 92.48750305]
[-129.09954834 81.92565918]
[-128.02510071 71.40211487]
[-126.46750641 60.93915939]
[-124.43009186 50.55896759]
[-121.91716003 40.28353119]
[-118.93403625 30.13462067]
[-115.48703766 20.13373756]
[-111.58346558 10.30207348]
[-107.23160553 0.66045898]
[-102.44066620 -8.77067757]
[-97.22079468 -17.97135353]
[-91.58306122 -26.92207336]
[-85.53940582 -35.60387421]
[-79.10263062 -43.99836349]
[-72.28638458 -52.08774948]
[-65.10509491 -59.85490036]
[-57.57399368 -67.28334808]
[-49.70902252 -74.35736847]
[-41.52685165 -81.06195831]
[-33.04481888 -87.38291931]
[-24.28089333 -93.30686188]
[-15.25364494 -98.82122803]
[-5.98220015 -103.91433716]
[3.51379752 -108.57539368]
[13.21422768 -112.79453278]
[23.09853745 -116.56280518]
[33.14578247 -119.87222290]
[43.33467865 -122.71578979]
[53.64363480 -125.08747101]
[64.05081177 -126.98223877]
[74.53415680 -128.39608765]
[85.07145691 -129.32601929]
[95.64038086 -129.77005005]
[106.21855164 -129.72724915]
[116.78354645 -129.19772339]
[127.31297302 -128.18257141]
[137.78453064 -126.68394470]
[148.17604065 -124.70503235]
[158.46546936 -122.25002289]
[168.63102722 -119.32411194]
[178.65116882 -115.93350220]
[188.50465393 -112.08538055]
[198.17063904 -107.78789520]
[207.62861633 -103.05015564]
[216.85853577 -97.88219452]
[225.84088135 -92.29496765]
[234.55657959 -86.30031586]
[242.98719788 -79.91093445]
[251.11485291 -73.14035797]
[258.92233276 -66.00293732]
[266.39309692 -58.51379395]
[273.51129150 -50.68879700]
[280.26187134 -42.54452515]
[286.63052368 -34.09823227]
[292.60372925 -25.36781311]
[298.16885376 -16.37177086]
[303.31411743 -7.12916183]
[308.02859497 2.34042954]
[312.30230713 12.01693916]
[316.12619019 21.87986565]
[319.49215698 31.90830994]
[322.39306641 42.08102798]
[324.82278442 52.37646103]
[326.77615356 62.77279663]
[341.64944458 60.82730484]
[356.52273560 58.88181305]
[362.33798218 44.66637802]
[374.49166870 35.27576065]
[389.71450806 33.23599625]
[403.91162109 39.09576416]
[413.26409912 51.27881622]
[415.25616455 66.50798035]
[409.35189819 80.68667603]
[397.13958740 90.00091553]
[381.90426636 91.94521332]
[367.74414062 85.99655914]
[358.46823120 73.75511169]
[343.59494019 75.70060730]
[328.72161865 77.64609528]
[329.64465332 91.24722290]
[329.75961304 104.87915802]
[329.06604004 118.49391174]
[327.56643677 132.04359436]
[325.26608276 145.48052979]
[322.17300415 158.75741577]
[318.29815674 171.82752991]
[313.65515137 184.64491272]
[308.26031494 197.16442871]
[302.13262939 209.34204102]
[295.29367065 221.13490295]
[287.76751709 232.50149536]
[279.58059692 243.40184021]
[270.76181030 253.79756165]
[261.34210205 263.65209961]
[251.35466003 272.93075562]
[240.83460999 281.60092163]
[229.81900024 289.63204956]
[218.34655762 296.99588013]
[206.45768738 303.66650391]
[194.19419861 309.62045288]
[181.59925842 314.83679199]
[168.71717834 319.29711914]
[155.59329224 322.98580933]
[142.27377319 325.88983154]
[128.80551147 327.99896240]
[115.23587799 329.30578613]
[101.61264038 329.80575562]
[87.98371887 329.49703979]
[74.39708710 328.38076782]
[60.90054703 326.46084595]
[47.54159164 323.74404907]
[34.36722946 320.23992920]
[21.42382050 315.96078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[29 38]
[30 37]
[31 36]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
