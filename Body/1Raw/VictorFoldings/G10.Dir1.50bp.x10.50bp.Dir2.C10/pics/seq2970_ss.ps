%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACxxxxxxxxxxCUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.78379822 274.41156006]
[92.78379822 259.41156006]
[92.78379822 244.41156006]
[92.78379822 229.41156006]
[92.78379822 214.41156006]
[92.78379822 199.41156006]
[92.78379822 184.41156006]
[92.78379822 169.41156006]
[92.78379822 154.41156006]
[92.78379822 139.41156006]
[90.29998779 133.18296814]
[89.00736237 126.91856384]
[79.94644928 138.87263489]
[80.70124054 154.89793396]
[68.54821777 165.37092590]
[52.81014252 162.25764465]
[45.55991745 147.94631958]
[52.35929871 133.41539001]
[67.99237823 129.81172180]
[77.05329132 117.85765839]
[71.30481720 95.30596161]
[83.93950653 75.76143646]
[79.15991974 61.54329300]
[74.38033295 47.32515335]
[62.64905930 36.70970535]
[65.92765045 22.18042374]
[61.14806747 7.96228123]
[44.32775879 11.45321465]
[29.78765869 4.13504744]
[23.33423042 -9.82264614]
[26.76041985 -23.88862991]
[16.76117325 -35.06964493]
[6.76192713 -46.25065994]
[-7.00453806 -41.92782211]
[-23.12451172 -49.96274948]
[-36.01236725 -57.63758850]
[-48.90022659 -65.31242371]
[-61.78808212 -72.98726654]
[-74.67594147 -80.66210175]
[-87.56379700 -88.33694458]
[-100.45165253 -96.01177979]
[-113.33950806 -103.68662262]
[-126.22736359 -111.36145782]
[-137.76562500 -101.55598450]
[-151.86344910 -96.03057861]
[-166.99160767 -95.38460541]
[-181.50912476 -99.68812561]
[-193.84124756 -108.47434235]
[-202.65026855 -120.79017639]
[-206.98066711 -135.29969788]
[-206.36270142 -150.42904663]
[-200.86340332 -164.53706360]
[-191.07929993 -176.09346008]
[-178.07170105 -183.84465027]
[-163.25157166 -186.94985962]
[-148.22647095 -185.07225037]
[-134.62623596 -178.41551208]
[-123.92610931 -167.70169067]
[-117.28675842 -154.09294128]
[-115.42836761 -139.06547546]
[-118.55252838 -124.24932098]
[-105.66466522 -116.57447815]
[-92.77680969 -108.89964294]
[-79.88895416 -101.22480011]
[-67.00109863 -93.54996490]
[-54.11324310 -85.87512207]
[-41.22538757 -78.20028687]
[-28.33753014 -70.52544403]
[-15.44967270 -62.85060501]
[-2.40891767 -70.26267242]
[-2.40891767 -85.26267242]
[-16.18278694 -91.83863068]
[-25.73271370 -103.74500275]
[-29.16255188 -118.61775970]
[-25.79130745 -133.50390625]
[-16.28834152 -145.44779968]
[-2.54047656 -152.07795715]
[12.72264099 -152.07795715]
[26.47050667 -145.44779968]
[35.97347260 -133.50390625]
[39.34471893 -118.61775970]
[35.91487885 -103.74500275]
[26.36495018 -91.83863068]
[12.59108257 -85.26267242]
[12.59108257 -70.26267242]
[17.94294167 -56.24990463]
[27.94218826 -45.06888962]
[37.94143295 -33.88787460]
[55.62465668 -35.94621658]
[70.91735077 -23.17467690]
[82.96263123 -32.11398315]
[95.00791931 -41.05328751]
[101.47864532 -55.49074554]
[116.30995178 -56.86241531]
[128.35523987 -65.80171967]
[140.40051270 -74.74102020]
[140.10861206 -90.25535583]
[149.01913452 -102.95898438]
[163.70581055 -107.96710968]
[178.52130127 -103.35399628]
[187.76876831 -90.89349365]
[187.89234924 -75.37691498]
[178.84454346 -62.77069473]
[164.10440063 -57.92218399]
[149.33982849 -62.69573975]
[137.29454041 -53.75643539]
[125.24925995 -44.81713104]
[119.64009094 -31.01906967]
[103.94721985 -29.00800323]
[91.90193939 -20.06869888]
[79.85665894 -11.12939453]
[75.36621094 3.18269444]
[80.14579773 17.40083504]
[91.53520203 26.99930573]
[88.59848022 42.54556656]
[93.37806702 56.76370621]
[98.15765381 70.98184967]
[112.50266266 70.73469543]
[126.44418335 77.73106384]
[136.31297302 91.39238739]
[138.97100830 109.30620575]
[152.69471741 115.36093140]
[166.03839111 107.44094086]
[181.48573303 108.91026306]
[193.09695435 119.20391083]
[196.40728760 134.36376953]
[190.14384460 148.56056213]
[176.71505737 156.33534241]
[161.28454590 154.69853210]
[149.78567505 144.27952576]
[146.63999939 129.08464050]
[132.91629028 123.02992249]
[126.63316345 127.12533569]
[135.77406311 139.01835632]
[144.91496277 150.91137695]
[154.05586243 162.80439758]
[166.04304504 171.82147217]
[165.53877258 186.81298828]
[152.97277832 195.00418091]
[139.05294800 189.41505432]
[135.64106750 174.80737305]
[128.44969177 161.64363098]
[121.25830078 148.47988892]
[114.06691742 135.31614685]
[107.78379822 139.41156006]
[107.78379822 154.41156006]
[107.78379822 169.41156006]
[107.78379822 184.41156006]
[107.78379822 199.41156006]
[107.78379822 214.41156006]
[107.78379822 229.41156006]
[107.78379822 244.41156006]
[107.78379822 259.41156006]
[107.78379822 274.41156006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 20]
[13 19]
[22 117]
[23 116]
[24 115]
[26 113]
[27 112]
[31 88]
[32 87]
[33 86]
[35 69]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[70 85]
[71 84]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
