%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCACUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGxxxxxxxxxxCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.68628693 284.79202271]
[100.68628693 269.79202271]
[100.68628693 254.79200745]
[100.68628693 239.79200745]
[100.68628693 224.79200745]
[100.68628693 209.79200745]
[100.68628693 194.79200745]
[100.68628693 179.79200745]
[100.68628693 164.79200745]
[100.68628693 149.79200745]
[70.89656067 132.62857056]
[62.54148865 103.76979828]
[74.70993042 81.09812164]
[65.17201996 69.52107239]
[55.63410187 57.94401550]
[31.87770844 56.98976135]
[17.75326729 38.40616989]
[2.77251959 37.64643097]
[-12.20822811 36.88669205]
[-27.18897629 36.12695694]
[-42.16972351 35.36721802]
[-53.84035873 45.68390656]
[-69.02214813 44.70001602]
[-78.78560638 33.51027298]
[-93.76635742 32.75053406]
[-100.30686951 43.48226929]
[-110.74224854 50.35517120]
[-123.04128265 52.10546112]
[-134.84135437 48.45934296]
[-143.90231323 40.17369461]
[-148.53167725 28.87992477]
[-163.46932983 27.51370811]
[-178.40698242 26.14749146]
[-193.34463501 24.78127480]
[-208.28228760 23.41505814]
[-222.72981262 29.86326218]
[-234.69946289 20.99890900]
[-249.63711548 19.63269043]
[-262.83761597 28.75004005]
[-278.15399170 23.97628403]
[-283.83679199 8.97344112]
[-275.52667236 -4.74959183]
[-259.59844971 -6.66567802]
[-248.27090454 4.69503927]
[-233.33325195 6.06125593]
[-219.95414734 -0.48466972]
[-206.91606140 8.47740555]
[-191.97840881 9.84362221]
[-177.04075623 11.20983887]
[-162.10310364 12.57605648]
[-147.16545105 13.94227314]
[-136.20855713 0.15174642]
[-119.02723694 -4.38387537]
[-102.40103149 2.31872249]
[-93.00661469 17.76978683]
[-78.02587128 18.52952385]
[-67.18045044 8.38494205]
[-51.97702026 8.94201756]
[-41.40998459 20.38647079]
[-26.42923737 21.14620972]
[-11.44849014 21.90594673]
[3.53225708 22.66568375]
[18.51300430 23.42542076]
[23.98863792 14.10768604]
[32.66728973 7.66689825]
[43.17169189 5.12518501]
[46.78413010 -9.43332767]
[50.39656830 -23.99184036]
[52.81812286 -38.79508591]
[54.03289413 -53.74581528]
[55.24766159 -68.69654846]
[56.46242905 -83.64727783]
[42.91989517 -90.55149078]
[33.05415726 -102.11590576]
[28.36966515 -116.57702637]
[29.58077621 -131.72962952]
[36.50279999 -145.26307678]
[48.08018112 -155.11360168]
[62.54745102 -159.77905273]
[77.69845581 -158.54801941]
[91.22277832 -151.60820007]
[101.05805969 -140.01786804]
[105.70448303 -125.54447174]
[104.45351410 -110.39510345]
[97.49591064 -96.87992096]
[85.89265442 -87.05989075]
[71.41316223 -82.43251038]
[70.19839478 -67.48178101]
[68.98361969 -52.53104782]
[67.76885223 -37.58031845]
[78.86000061 -47.67915726]
[93.75084686 -49.48541260]
[106.93479156 -42.33113480]
[113.53641510 -28.86196518]
[111.11445618 -14.05878735]
[100.56454468 -3.39579439]
[85.78803253 -0.81614953]
[72.24924469 -7.27380133]
[64.95507812 -20.37940216]
[61.34264374 -5.82088995]
[57.73020554 8.73762226]
[64.80045319 14.30409050]
[69.70628357 21.92780685]
[71.87490845 30.79959679]
[71.02685547 39.96063995]
[67.21115875 48.40610123]
[76.74906921 59.98315430]
[86.28698730 71.56021118]
[100.10741425 63.87105560]
[117.88806915 63.45845413]
[135.64816284 72.14422607]
[148.69192505 89.56871033]
[163.68499756 89.11274719]
[177.33900452 80.02979279]
[191.90989685 87.55447388]
[192.40840149 103.94604492]
[178.32168579 112.34226227]
[164.14096069 104.10581207]
[149.14788818 104.56178284]
[146.42681885 119.31290436]
[160.27041626 125.08824921]
[174.11402893 130.86360168]
[187.95762634 136.63893127]
[203.28215027 131.89146423]
[216.46701050 141.03144836]
[217.39788818 157.04747009]
[205.36071777 167.65341187]
[189.58937073 164.71330261]
[182.18228149 150.48254395]
[168.33868408 144.70719910]
[154.49507141 138.93185425]
[140.65147400 133.15650940]
[134.41017151 137.31538391]
[143.79023743 149.02070618]
[153.17028809 160.72602844]
[162.55035400 172.43133545]
[174.42576599 181.59510803]
[173.90510559 196.58607483]
[161.42253113 204.90383911]
[147.38677979 199.61256409]
[143.50173950 185.12434387]
[136.31034851 171.96061707]
[129.11897278 158.79687500]
[121.92758179 145.63313293]
[115.68628693 149.79200745]
[115.68628693 164.79200745]
[115.68628693 179.79200745]
[115.68628693 194.79200745]
[115.68628693 209.79200745]
[115.68628693 224.79200745]
[115.68628693 239.79200745]
[115.68628693 254.79200745]
[115.68628693 269.79202271]
[115.68628693 284.79202271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[13 108]
[14 107]
[15 106]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[24 56]
[25 55]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 45]
[38 44]
[66 101]
[67 100]
[68 99]
[69 90]
[70 89]
[71 88]
[72 87]
[112 119]
[113 118]
[120 132]
[121 131]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
