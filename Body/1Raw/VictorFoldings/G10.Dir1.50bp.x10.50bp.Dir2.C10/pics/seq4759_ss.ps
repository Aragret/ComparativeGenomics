%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCxxxxxxxxxxAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.98440552 255.80894470]
[126.98440552 240.80894470]
[126.98440552 225.80894470]
[126.98440552 210.80894470]
[126.98440552 195.80894470]
[126.98440552 180.80894470]
[126.98440552 165.80894470]
[126.98440552 150.80894470]
[126.98440552 135.80894470]
[126.98440552 120.80894470]
[105.35691833 131.14602661]
[84.20064545 124.47409821]
[74.19704437 106.69813538]
[59.20434570 106.23009491]
[44.21165085 105.76205444]
[29.21895409 105.29401398]
[14.22625828 104.82596588]
[-0.65702176 106.69358063]
[-15.06923771 110.85147095]
[-29.48145485 115.00935364]
[-43.89366913 119.16724396]
[-58.30588531 123.32513428]
[-59.03881454 138.44934082]
[-64.64517212 152.51516724]
[-74.51681519 163.99685669]
[-87.58295441 171.64897156]
[-102.42626190 174.64146423]
[-117.43664551 172.64971924]
[-130.98590088 165.88980103]
[-141.60429382 155.09497070]
[-148.14002991 141.43617249]
[-149.88417053 126.39500427]
[-146.64749146 111.60302734]
[-138.78111267 98.66475677]
[-127.13832092 88.98364258]
[-112.98202515 83.60981750]
[-97.84779358 83.12620544]
[-83.37728882 87.58525085]
[-71.14014435 96.50327301]
[-62.46377182 108.91291809]
[-48.05155563 104.75502777]
[-33.63933945 100.59713745]
[-19.22712517 96.43925476]
[-4.81490898 92.28136444]
[-19.16531372 87.91490936]
[-31.03147697 78.73917389]
[-38.86812592 65.94906616]
[-41.65473557 51.21017838]
[-39.02841568 36.44188309]
[-31.33117867 23.56739235]
[-19.56540108 14.26328182]
[-5.26328182 9.74118328]
[9.71268368 10.58998680]
[23.41224670 16.69915771]
[34.05138016 27.27312660]
[40.24460220 40.93489838]
[41.18539810 55.90536499]
[36.75125122 70.23500061]
[27.51960182 82.05771637]
[14.69430065 89.83327484]
[29.68699646 90.30131531]
[44.67969131 90.76935577]
[59.67238998 91.23739624]
[74.66508484 91.70544434]
[84.97335815 75.04402161]
[105.36031342 68.85455322]
[126.32550049 78.36350250]
[126.94947815 63.37648392]
[127.57345581 48.38946915]
[113.76907349 42.02491760]
[103.45477295 30.85873795]
[98.20339966 16.59369278]
[98.81575775 1.40509582]
[105.19845581 -12.39090061]
[116.37819672 -22.69050789]
[130.65013123 -27.92310905]
[145.83792114 -27.29077339]
[159.62550354 -20.88992691]
[169.91040039 -9.69664955]
[175.12422180 4.58216286]
[174.47190857 19.76909637]
[168.05293274 33.54825211]
[156.84613037 43.81840897]
[142.56047058 49.01344681]
[141.93649292 64.00046539]
[141.31251526 78.98748016]
[152.81431580 88.61600494]
[167.45782471 85.36518097]
[182.10131836 82.11435699]
[196.74482727 78.86352539]
[211.38832092 75.61270142]
[215.32562256 71.99092865]
[219.81486511 70.44200897]
[223.95697021 70.82231140]
[227.04585266 72.64611816]
[241.86361694 70.31501770]
[256.68136597 67.98390961]
[271.49911499 65.65280914]
[286.31689453 63.32170486]
[296.32067871 49.00872040]
[313.24307251 46.37871552]
[326.58337402 56.57156372]
[341.34942627 53.93270111]
[356.11547852 51.29383850]
[370.88153076 48.65497208]
[385.64758301 46.01610947]
[395.96194458 33.72814941]
[411.99566650 34.27483368]
[421.44909668 47.23679352]
[417.07034302 62.67071915]
[402.21841431 68.73703003]
[388.28646851 60.78216553]
[373.52038574 63.42102814]
[358.75433350 66.05989075]
[343.98828125 68.69875336]
[329.22222900 71.33762360]
[323.38272095 82.86570740]
[311.78729248 88.99925995]
[298.58489990 87.28908539]
[288.64797974 78.13946533]
[273.83023071 80.47056580]
[259.01248169 82.80167389]
[244.19471741 85.13277435]
[229.37695312 87.46387482]
[214.63914490 90.25620270]
[199.99565125 93.50702667]
[185.35214233 96.75785828]
[170.70864868 100.00868225]
[156.06513977 103.25950623]
[170.47454834 107.42710876]
[185.46513367 106.89573669]
[198.82664490 113.71264648]
[207.19485474 126.16146088]
[208.46281433 141.10777283]
[202.31126404 154.78836060]
[190.28906250 163.75868225]
[175.42320251 165.76016235]
[161.45663452 160.28884888]
[151.90592957 148.72235107]
[149.17578125 133.97268677]
[141.98440552 120.80894470]
[141.98440552 135.80894470]
[141.98440552 150.80894470]
[141.98440552 165.80894470]
[141.98440552 180.80894470]
[141.98440552 195.80894470]
[141.98440552 210.80894470]
[141.98440552 225.80894470]
[141.98440552 240.80894470]
[141.98440552 255.80894470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[67 86]
[68 85]
[69 84]
[87 129]
[88 128]
[89 127]
[90 126]
[91 125]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
