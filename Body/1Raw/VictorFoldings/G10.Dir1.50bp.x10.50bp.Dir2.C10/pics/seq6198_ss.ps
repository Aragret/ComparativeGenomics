%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCxxxxxxxxxxAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.09632874 310.72967529]
[90.98580170 299.98022461]
[97.68579102 284.40634155]
[98.30976868 269.41931152]
[98.93374634 254.43229675]
[99.55772400 239.44528198]
[100.18170166 224.45826721]
[100.80567932 209.47125244]
[101.42965698 194.48423767]
[102.05363464 179.49722290]
[102.67761230 164.51020813]
[103.30158997 149.52319336]
[84.99277496 143.20429993]
[71.93643188 131.03245544]
[60.04405212 140.17417908]
[48.15167236 149.31591797]
[36.25929260 158.45765686]
[37.65866852 173.82141113]
[30.50935936 187.49221802]
[17.09268761 195.10775757]
[1.68986368 194.23794556]
[-10.78412628 185.16033936]
[-16.34887886 170.77154541]
[-13.22870159 155.66300964]
[-2.41923070 144.65579224]
[12.63027000 141.26225281]
[27.11755943 146.56527710]
[39.00994110 137.42353821]
[50.90232086 128.28179932]
[62.79470062 119.14006805]
[58.61606598 106.16008759]
[58.83310699 92.52580261]
[63.42276764 79.68540955]
[71.89754486 69.00276184]
[83.35728455 61.61254501]
[79.95430756 47.00365448]
[76.39954376 32.43095016]
[72.69338226 17.89601326]
[68.98722076 3.36107779]
[50.05802536 -11.21639729]
[54.46956635 -34.02805710]
[47.28705597 -47.19664001]
[40.10454559 -60.36522293]
[32.92203903 -73.53380585]
[22.48222542 -84.30461121]
[9.54416943 -91.89452362]
[-3.39388633 -99.48442841]
[-18.62254524 -95.25791168]
[-32.33811569 -103.11021423]
[-36.40339279 -118.38270569]
[-28.40652084 -132.01449585]
[-13.09189892 -135.91807556]
[0.45457593 -127.77751923]
[4.19602203 -112.42248535]
[17.13407898 -104.83258057]
[30.07213402 -97.24266815]
[23.00828934 -110.47528839]
[19.00484276 -124.93115997]
[18.25506783 -139.91241455]
[20.79516220 -154.69578552]
[26.50249863 -168.56756592]
[35.10153961 -180.85806274]
[46.17714691 -190.97393799]
[59.19461823 -198.42681885]
[73.52551270 -202.85688782]
[88.47795868 -204.05029297]
[103.33010864 -201.94940186]
[117.36492920 -196.65565491]
[129.90486145 -188.42460632]
[140.34451294 -177.65364075]
[148.17987061 -164.86273193]
[153.03268433 -150.66941833]
[154.66865540 -135.75889587]
[153.00881958 -120.85102081]
[148.13330078 -106.66548920]
[140.27748108 -93.88714600]
[129.82060242 -83.13289642]
[117.26752472 -74.92192841]
[103.22425079 -69.65064240]
[88.36875916 -67.57352448]
[73.41823578 -68.79085541]
[59.09445190 -73.24385834]
[46.09062195 -80.71631622]
[53.27312851 -67.54772949]
[60.45563889 -54.37915039]
[67.63814545 -41.21056747]
[72.90373993 -41.35483170]
[78.05043793 -40.23287201]
[87.55879974 -51.83421326]
[87.41315460 -67.87660217]
[99.95513916 -77.88050842]
[115.56362915 -74.17177582]
[122.26512146 -59.59543991]
[114.91880035 -45.33321381]
[99.16014099 -42.32585526]
[89.65177917 -30.72451210]
[92.73804474 -22.99419212]
[92.72538757 -14.55206203]
[89.52753448 -6.61112738]
[83.52215576 -0.34508333]
[87.22831726 14.18985271]
[90.93447876 28.72478867]
[95.66532898 34.46628189]
[94.56319427 43.60067368]
[97.96617889 58.20956802]
[114.83662415 59.21632767]
[130.52723694 66.99642181]
[142.34268188 80.74333191]
[148.05384827 98.59214783]
[146.30574036 117.86686707]
[160.80133057 121.72402954]
[175.29693604 125.58118439]
[189.79252625 129.43835449]
[204.28813171 133.29550171]
[213.45246887 132.47892761]
[219.04354858 137.38662720]
[233.45576477 141.54450989]
[247.86798096 145.70240784]
[264.76245117 144.28347778]
[270.80276489 160.12490845]
[257.25256348 170.31451416]
[243.71008301 160.11462402]
[229.29786682 155.95672607]
[214.88565063 151.79884338]
[200.43096924 147.79110718]
[185.93536377 143.93394470]
[171.43977356 140.07678223]
[156.94418335 136.21961975]
[142.44857788 132.36247253]
[136.40858459 136.80863953]
[147.28044128 147.14317322]
[158.15231323 157.47770691]
[171.34332275 164.61894226]
[175.34811401 179.07444763]
[167.71244812 191.98554993]
[153.11564636 195.44001770]
[140.50297546 187.32086182]
[137.60372925 172.60397339]
[130.96617126 159.15248108]
[124.32859802 145.70098877]
[118.28860474 150.14717102]
[117.66462708 165.13418579]
[117.04064941 180.12120056]
[116.41667175 195.10821533]
[115.79269409 210.09523010]
[115.16871643 225.08224487]
[114.54473877 240.06925964]
[113.92076111 255.05627441]
[113.29678345 270.04330444]
[112.67280579 285.03030396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[14 30]
[15 29]
[16 28]
[17 27]
[35 105]
[36 104]
[37 102]
[38 101]
[39 100]
[41 86]
[42 85]
[43 84]
[44 83]
[45 56]
[46 55]
[47 54]
[88 96]
[89 95]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
