%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUUAAAxxxxxxxxxxCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.79789734 309.10073853]
[134.79789734 294.10073853]
[134.79789734 279.10073853]
[134.79789734 264.10073853]
[134.79789734 249.10075378]
[134.79789734 234.10075378]
[134.79789734 219.10075378]
[134.79789734 204.10075378]
[134.79789734 189.10075378]
[134.79789734 174.10075378]
[130.34109497 159.77815247]
[121.82999420 147.42657471]
[113.31890869 135.07501221]
[104.80781555 122.72343445]
[92.99447632 120.21102142]
[84.98040771 112.52228546]
[82.48729706 102.69710541]
[85.30541229 93.97077179]
[73.22542572 85.07842255]
[61.14543915 76.18607330]
[49.06544876 67.29372406]
[36.98546219 58.40137100]
[24.90547371 49.50902176]
[10.83395386 44.31360626]
[-4.12629461 43.22229385]
[-19.08654404 42.13098526]
[-34.05733490 41.19535828]
[-49.03704834 40.41551208]
[-64.01676178 39.63566589]
[-79.00946045 39.16762543]
[-94.00865173 39.01158905]
[-109.00783539 38.85555267]
[-124.00702667 38.69951630]
[-132.39613342 51.64657593]
[-146.46261597 57.98201752]
[-161.71789551 55.68421936]
[-173.29408264 45.48640060]
[-177.49723816 30.64265060]
[-172.98617554 15.88955402]
[-161.20034790 5.93477154]
[-145.90055847 3.95483708]
[-131.96893311 10.58154106]
[-123.85099030 23.70032692]
[-108.85179901 23.85636330]
[-93.85260773 24.01239967]
[-78.85342407 24.16843605]
[-74.83517456 21.47971535]
[-69.07243347 21.33115196]
[-63.23691940 24.65595245]
[-48.25720215 25.43579674]
[-33.27748871 26.21564293]
[-26.38965034 23.40435791]
[-17.99523354 27.17073631]
[-3.03498411 28.26204681]
[11.92526436 29.35335732]
[-0.23371370 20.56932449]
[-10.26586819 9.41782761]
[-17.71960640 -3.59915280]
[-22.25940323 -17.89566422]
[-23.68090248 -32.82815552]
[-21.92011261 -47.72445297]
[-17.05629730 -61.91400146]
[-9.30840015 -74.75807190]
[0.97481465 -85.67848969]
[13.33045101 -94.18367767]
[27.20232773 -99.89077759]
[41.96600723 -102.54290009]
[56.95691299 -102.02064514]
[71.50023651 -98.34753418]
[84.94131470 -91.68889618]
[96.67510986 -82.34448242]
[106.17342377 -70.73491669]
[113.00869751 -57.38280106]
[116.87325287 -42.88917542]
[117.59311676 -27.90645790]
[115.13589478 -13.10909271]
[109.61219025 0.83682752]
[101.27064514 13.30353260]
[90.48676300 23.72984123]
[77.74597168 31.64641762]
[63.62178802 36.69689941]
[48.75000381 38.65394592]
[33.79782486 37.42903519]
[45.87781143 46.32138443]
[57.95779800 55.21373367]
[70.03778839 64.10607910]
[82.11777496 72.99842834]
[94.19776154 81.89078522]
[109.16855621 80.95515442]
[120.04737854 70.62794495]
[130.92620850 60.30074310]
[129.78831482 44.70461655]
[138.98350525 32.05619812]
[154.17008972 28.32768631]
[168.17742920 35.27957153]
[174.39167786 49.62938690]
[169.87866211 64.60158539]
[156.76928711 73.12675476]
[141.25341797 71.17956543]
[130.37458801 81.50677490]
[119.49575806 91.83397675]
[132.43676758 84.24909973]
[147.12319946 87.30007172]
[155.97244263 99.41167450]
[154.41558838 114.33066559]
[143.25646973 124.35433197]
[128.25654602 124.30742645]
[117.15939331 114.21234894]
[125.67047882 126.56391907]
[134.18156433 138.91549683]
[142.69265747 151.26705933]
[142.04273987 136.28114319]
[144.36593628 121.46215057]
[149.57066345 107.39407349]
[157.45181274 94.63134003]
[167.69880676 83.67693329]
[179.90780640 74.96255493]
[193.59765625 68.83163452]
[208.22883606 65.52580261]
[223.22474670 65.17533112]
[237.99438477 67.79402924]
[251.95570374 73.27870941]
[264.55847168 81.41320801]
[275.30603027 91.87695312]
[283.77481079 104.25756836]
[289.63110352 118.06713104]
[292.64404297 132.76142883]
[292.69491577 147.76133728]
[289.78173828 162.47573853]
[284.01931763 176.32472229]
[275.63470459 188.76251221]
[264.95840454 199.29893494]
[252.41110229 207.51875305]
[238.48731995 213.09802246]
[223.73579407 215.81687927]
[208.73785400 215.56816101]
[194.08457947 212.36166382]
[180.35345459 206.32377625]
[168.08560181 197.69244385]
[157.76452637 186.80780029]
[149.79789734 174.10075378]
[149.79789734 189.10075378]
[149.79789734 204.10075378]
[149.79789734 219.10075378]
[149.79789734 234.10075378]
[149.79789734 249.10075378]
[149.79789734 264.10073853]
[149.79789734 279.10073853]
[149.79789734 294.10073853]
[149.79789734 309.10073853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[12 110]
[13 109]
[14 108]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 55]
[25 54]
[26 53]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
