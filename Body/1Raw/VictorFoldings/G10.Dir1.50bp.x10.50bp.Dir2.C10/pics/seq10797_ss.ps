%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUxxxxxxxxxxUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.82175446 296.81158447]
[86.82175446 281.81158447]
[86.82175446 266.81158447]
[86.82175446 251.81158447]
[86.82175446 236.81158447]
[86.82175446 221.81158447]
[86.82175446 206.81158447]
[86.82175446 191.81158447]
[86.82175446 176.81158447]
[86.82175446 161.81158447]
[72.54629517 157.20602417]
[63.78009033 169.37786865]
[64.92610168 185.37992859]
[53.03253174 196.14666748]
[37.22310257 193.41874695]
[29.62545967 179.28878784]
[36.06786346 164.59611511]
[51.60825348 160.61166382]
[60.37446213 148.43981934]
[50.39173508 137.24404907]
[37.29858017 144.56315613]
[24.20542526 151.88226318]
[11.11227036 159.20137024]
[3.18587399 173.55770874]
[-13.21321678 173.60083008]
[-21.21502304 159.28639221]
[-12.58797264 145.33985901]
[3.79316497 146.10821533]
[16.88632011 138.78910828]
[29.97947311 131.47000122]
[43.07262802 124.15090179]
[44.05885315 107.53538513]
[49.39950562 93.20776367]
[34.98728943 89.04988098]
[20.57507324 84.89199066]
[6.16285610 80.73410034]
[-8.24936008 76.57621765]
[-12.56333447 77.82164764]
[-16.62859344 77.61017609]
[-20.00731468 76.20799255]
[-22.39746094 73.99864960]
[-23.65976334 71.42689514]
[-37.67647552 66.08538818]
[-51.99445724 72.77649689]
[-66.82141113 67.30503082]
[-73.36077118 52.91710663]
[-67.73284912 38.14883041]
[-53.27659607 31.76195145]
[-38.56864548 37.54569626]
[-32.33496475 52.06867218]
[-18.31825066 57.41018295]
[-4.09147215 62.16399765]
[10.32074356 66.32188416]
[24.73295975 70.47977448]
[39.14517593 74.63766479]
[53.55739212 78.79554749]
[67.46758270 60.65299988]
[87.90093231 50.40002823]
[110.76030731 50.09247971]
[131.46209717 59.79202652]
[142.34092712 49.46482086]
[151.48265076 37.57244110]
[158.66516113 24.40386009]
[165.84767151 11.23527718]
[173.03018188 -1.93330550]
[180.21269226 -15.10188770]
[168.17843628 -24.09952545]
[157.54722595 -34.71829224]
[148.53550720 -46.74200439]
[141.32673645 -59.92587662]
[136.06768799 -74.00149536]
[132.86541748 -88.68231201]
[131.78512573 -103.66942596]
[132.84880066 -118.65773773]
[136.03479004 -133.34208679]
[141.27822876 -147.42353821]
[148.47238159 -160.61538696]
[157.47076416 -172.64909363]
[168.09017944 -183.27963257]
[180.11445618 -192.29061890]
[193.29876709 -199.49856567]
[207.37471008 -204.75674438]
[222.05572510 -207.95809937]
[237.04290771 -209.03747559]
[252.03115845 -207.97286987]
[266.71530151 -204.78596497]
[280.79641724 -199.54165649]
[293.98785400 -192.34669495]
[306.02099609 -183.34756470]
[316.65087891 -172.72749329]
[325.66110229 -160.70266724]
[332.86822510 -147.51789856]
[338.12554932 -133.44161987]
[341.32598877 -118.76041412]
[342.40444946 -103.77316284]
[341.33889771 -88.78498840]
[338.15109253 -74.10102844]
[332.90591431 -60.02023697]
[325.71014404 -46.82926941]
[316.71026611 -34.79668808]
[306.08953857 -24.16745186]
[294.06414795 -15.15796471]
[280.87893677 -7.95164537]
[266.80233765 -2.69520617]
[252.12094116 0.50433862]
[237.13362122 1.58185041]
[222.14550781 0.51539248]
[207.46174622 -2.67332339]
[193.38127136 -7.91937923]
[186.19876099 5.24920321]
[179.01625061 18.41778564]
[171.83374023 31.58636856]
[164.65124512 44.75495148]
[177.84915161 37.62648773]
[192.71792603 35.64670563]
[207.32127380 39.07342148]
[219.75746155 47.46038818]
[228.40699768 59.71541595]
[232.14347839 74.24258423]
[230.48033142 89.15010071]
[223.63414001 102.49662018]
[212.49644470 112.54409790]
[198.51765442 117.98410034]
[183.51817322 118.10819244]
[169.45129395 112.90022278]
[158.14888000 103.03840637]
[151.08280945 89.80698395]
[149.17323303 74.92903137]
[152.66812134 60.34364700]
[141.78930664 70.67085266]
[147.59254456 78.96289825]
[151.73208618 88.40731812]
[153.97898865 98.66669464]
[154.17346191 109.35826111]
[152.23374939 120.06817627]
[148.16206360 130.36755371]
[142.04731750 139.82957458]
[134.06420898 148.04708862]
[124.46883392 154.64991760]
[113.59072876 159.32112122]
[101.82175446 161.81158447]
[101.82175446 176.81158447]
[101.82175446 191.81158447]
[101.82175446 206.81158447]
[101.82175446 221.81158447]
[101.82175446 236.81158447]
[101.82175446 251.81158447]
[101.82175446 266.81158447]
[101.82175446 281.81158447]
[101.82175446 296.81158447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 19]
[12 18]
[20 31]
[21 30]
[22 29]
[23 28]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[42 51]
[43 50]
[60 130]
[61 129]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
