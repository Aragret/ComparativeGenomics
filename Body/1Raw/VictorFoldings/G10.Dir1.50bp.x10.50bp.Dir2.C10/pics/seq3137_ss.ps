%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCxxxxxxxxxxACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.00588989 251.09918213]
[83.69383240 236.10241699]
[83.38177490 221.10566711]
[83.06972504 206.10891724]
[82.75766754 191.11216736]
[82.44561005 176.11540222]
[82.13355255 161.11865234]
[81.82149506 146.12190247]
[81.50943756 131.12515259]
[72.99835205 118.77357483]
[59.09579468 113.14161682]
[45.19323730 107.50965881]
[31.29068184 101.87770844]
[16.83599472 97.86996460]
[2.01823616 95.53886414]
[-12.79952240 93.20775604]
[-19.19594574 95.25550079]
[-24.80373192 93.91982269]
[-28.17995644 90.45909882]
[-42.88791656 87.51361084]
[-57.59587860 84.56813049]
[-72.59263611 84.25607300]
[-87.41039276 86.58718109]
[-99.84046936 96.37511444]
[-113.61553955 90.70972443]
[-128.43330383 93.04083252]
[-143.25105286 95.37193298]
[-158.06881714 97.70304108]
[-162.92864990 112.21649933]
[-173.98458862 122.80067444]
[-188.69606018 127.02340698]
[-203.68246460 123.91432953]
[-215.50003052 114.18789673]
[-221.43318176 100.07917023]
[-220.11853027 84.83023071]
[-211.85815430 71.94516754]
[-198.55023193 64.38488007]
[-183.25283813 63.88666534]
[-169.48120117 70.56501007]
[-160.39991760 82.88528442]
[-145.58216858 80.55417633]
[-130.76440430 78.22307587]
[-115.94664764 75.89196777]
[-104.57643127 66.27076721]
[-89.74149323 71.76942444]
[-74.92373657 69.43831635]
[-72.39936066 62.37591553]
[-86.52416229 57.32715988]
[-101.51779938 56.89028549]
[-105.73557281 42.49548340]
[-93.34864807 34.03592300]
[-81.47540283 43.20235443]
[-67.35060120 48.25111389]
[-64.82622528 41.18870926]
[-74.80895233 29.99294472]
[-84.79167938 18.79718018]
[-99.84574890 10.99902821]
[-96.51973724 -5.62547064]
[-79.62419891 -7.03155851]
[-73.59590912 8.81445312]
[-63.61318588 20.01021957]
[-53.63045883 31.20598412]
[-47.21924973 53.24151611]
[-54.65039825 69.86016846]
[-39.94243622 72.80564880]
[-25.23447418 75.75113678]
[-10.46841812 78.38999939]
[4.34933996 80.72109985]
[19.16709900 83.05220795]
[8.72592449 72.28271484]
[4.36245394 57.93140793]
[7.04184580 43.17265320]
[16.17144394 31.27095222]
[29.73186493 24.85885620]
[44.72366714 25.35465813]
[57.83080673 32.64869308]
[66.15409851 45.12758636]
[67.85251617 60.03112411]
[62.55037308 74.06277466]
[51.42046356 84.11887360]
[36.92263794 87.97515106]
[50.82519531 93.60710907]
[64.72775269 99.23905945]
[78.63031006 104.87101746]
[73.07592010 87.88427734]
[82.16629791 67.43182373]
[106.50759125 55.73791122]
[118.39997101 46.59617996]
[130.29235840 37.45444489]
[142.18473816 28.31270981]
[154.07711792 19.17097664]
[159.01490784 11.40759754]
[166.31332397 9.96583748]
[178.39332581 1.07348788]
[190.47331238 -7.81886196]
[202.55329895 -16.71121216]
[211.72465515 -30.97033310]
[227.96540833 -26.10471153]
[227.78582764 -9.15171623]
[211.44564819 -4.63122320]
[199.36566162 4.26112652]
[187.28567505 13.15347576]
[175.20567322 22.04582596]
[163.21884155 31.06335640]
[151.32646179 40.20508957]
[139.43408203 49.34682465]
[127.54170990 58.48855972]
[115.64933014 67.63029480]
[117.35081482 74.93473816]
[120.75379181 89.54363251]
[122.45528412 96.84807587]
[137.16323853 99.79355621]
[151.87120056 102.73904419]
[166.57916260 105.68452454]
[181.28712463 108.63000488]
[195.38157654 100.96670532]
[210.10408020 107.34067535]
[214.16079712 122.86235046]
[204.43975830 135.62484741]
[188.39811707 135.83784485]
[178.34164429 123.33796692]
[163.63368225 120.39248657]
[148.92572021 117.44700623]
[134.21775818 114.50151825]
[119.50980377 111.55603790]
[113.75890350 116.37030029]
[125.25421143 126.00657654]
[136.74952698 135.64285278]
[148.24482727 145.27912903]
[162.64239502 149.48748779]
[171.94778442 161.25225830]
[172.72714233 176.23199463]
[164.69285583 188.89889526]
[150.80973816 194.57862854]
[136.20094299 191.17524719]
[126.25738525 179.94467163]
[124.64813995 165.03266907]
[117.18446350 152.02139282]
[109.72077942 139.01011658]
[102.25709534 125.99882507]
[96.50619507 130.81309509]
[96.81825256 145.80984497]
[97.13031006 160.80659485]
[97.44235992 175.80335999]
[97.75441742 190.80010986]
[98.06647491 205.79685974]
[98.37853241 220.79360962]
[98.69058990 235.79037476]
[99.00264740 250.78712463]
[101.59364319 269.99484253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 84]
[11 83]
[12 82]
[13 81]
[14 69]
[15 68]
[16 67]
[19 66]
[20 65]
[21 64]
[22 46]
[23 45]
[25 43]
[26 42]
[27 41]
[28 40]
[54 62]
[55 61]
[56 60]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[93 103]
[94 102]
[95 101]
[96 100]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
