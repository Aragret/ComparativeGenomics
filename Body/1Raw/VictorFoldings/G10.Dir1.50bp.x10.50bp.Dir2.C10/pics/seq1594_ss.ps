%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAxxxxxxxxxxUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[182.78233337 157.25823975]
[169.84428406 149.66833496]
[156.90621948 142.07843018]
[143.96817017 134.48851013]
[129.07539368 134.72230530]
[121.08726501 121.06578827]
[108.14920807 113.47588348]
[93.54031372 110.07290649]
[78.58006287 111.16421509]
[63.61981583 112.25552368]
[48.65956879 113.34683990]
[33.69932175 114.43814850]
[18.73907089 115.52945709]
[3.82015920 117.08703613]
[-11.04288769 119.10937500]
[-25.90593529 121.13170624]
[-30.98672295 135.97659302]
[-44.12324524 146.21853638]
[-61.68589020 147.69837952]
[-78.06015778 138.89038086]
[-92.28693390 143.64419556]
[-106.51371002 148.39801025]
[-120.74049377 153.15182495]
[-134.96726990 157.90563965]
[-145.60395813 169.61766052]
[-160.12727356 166.31274414]
[-174.35404968 171.06655884]
[-182.77593994 184.72128296]
[-198.71928406 186.50723267]
[-209.95370483 175.05439758]
[-207.86111450 159.14840698]
[-194.04678345 150.99098206]
[-179.10786438 156.83978271]
[-164.88108826 152.08596802]
[-155.26199341 140.71397400]
[-139.72108459 143.67886353]
[-125.49430847 138.92504883]
[-111.26752472 134.17123413]
[-97.04074860 129.41741943]
[-82.81397247 124.66360474]
[-82.81397247 109.66360474]
[-97.04074860 104.90979004]
[-111.26752472 100.15597534]
[-127.21929169 103.96033478]
[-138.29176331 91.86354828]
[-133.09452820 76.30973816]
[-116.97406006 73.29934692]
[-106.51371002 85.92919922]
[-92.28693390 90.68301392]
[-78.06015778 95.43682861]
[-58.45650482 86.40961456]
[-39.00353622 91.36559296]
[-27.92826843 106.26866150]
[-13.06522179 104.24633026]
[1.79782486 102.22399139]
[4.23285389 99.58995819]
[8.09127808 98.03617859]
[12.83622837 98.23067474]
[17.64776039 100.56920624]
[32.60800934 99.47789764]
[47.56826019 98.38658905]
[62.52850723 97.29528046]
[77.48875427 96.20396423]
[92.44900513 95.11265564]
[90.21270752 90.97650909]
[89.25228119 86.02522278]
[89.76370239 80.58603668]
[90.07575989 65.58928680]
[90.38781738 50.59253311]
[90.69987488 35.59577942]
[77.26773071 28.25846481]
[68.79363251 15.51294518]
[67.22486877 0.28804559]
[72.92192841 -13.91766262]
[84.57566071 -23.83981133]
[99.50813293 -27.19836426]
[114.28797150 -23.22154999]
[125.51886749 -12.82321167]
[130.62005615 1.60718858]
[128.41931152 16.75365067]
[119.42236328 29.13562965]
[105.69662476 35.90783691]
[105.38456726 50.90459061]
[105.07251740 65.90134430]
[104.76045990 80.89809418]
[108.40163422 66.34674835]
[119.58988953 56.35560226]
[134.45886230 54.37732697]
[147.87025452 61.09555817]
[155.18945312 74.18865967]
[153.88714600 89.13201904]
[144.41337585 100.76161957]
[130.04200745 105.05859375]
[115.73911285 100.53782654]
[128.67716980 108.12773895]
[144.49536133 108.43682861]
[151.55807495 121.55046082]
[164.49612427 129.14036560]
[177.43418884 136.73027039]
[190.37223816 144.32019043]
[199.44909668 132.35577393]
[209.87733459 121.54891205]
[221.51055908 112.05131531]
[234.18547058 103.99631500]
[247.72412109 97.49698639]
[261.93646240 92.64457703]
[276.62295532 89.50719452]
[291.57742310 88.12889862]
[306.58996582 88.52902985]
[321.44979858 90.70198059]
[335.94833374 94.61722565]
[349.88201904 100.21981812]
[363.05523682 107.43110657]
[375.28305054 116.14984131]
[386.39385986 126.25363922]
[396.23162842 137.60066223]
[404.65823364 150.03160095]
[411.55545044 163.37194824]
[416.82641602 177.43443298]
[420.39709473 192.02162170]
[422.21743774 206.92877197]
[422.26184082 221.94656372]
[420.52966309 236.86421204]
[417.04525757 251.47225952]
[411.85754395 265.56567383]
[405.03933716 278.94656372]
[396.68634033 291.42709351]
[386.91583252 302.83209229]
[375.86499023 313.00140381]
[363.68890381 321.79226685]
[350.55856323 329.08129883]
[336.65823364 334.76617432]
[322.18313599 338.76708984]
[307.33639526 341.02786255]
[292.32647705 341.51672363]
[277.36410522 340.22686768]
[262.65933228 337.17639160]
[248.41854858 332.40808105]
[234.84170532 325.98892212]
[222.11940002 318.00897217]
[210.43022156 308.58032227]
[199.93827820 297.83532715]
[190.79084778 285.92477417]
[183.11636353 273.01593018]
[177.02253723 259.28997803]
[172.59495544 244.93960571]
[169.89573669 230.16630554]
[168.96279907 215.17744446]
[169.80921936 200.18344116]
[172.42312622 185.39480591]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 100]
[2 99]
[3 98]
[4 97]
[6 95]
[7 94]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 55]
[15 54]
[16 53]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[26 34]
[27 33]
[41 50]
[42 49]
[43 48]
[67 85]
[68 84]
[69 83]
[70 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
