%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGxxxxxxxxxxAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUGCCUCUUCCUACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.58650208 86.54798889]
[151.72889709 79.46060944]
[138.63574219 86.77971649]
[125.54257965 94.09882355]
[112.44942474 101.41792297]
[101.78780365 111.96921539]
[101.64327240 127.78976440]
[88.60382080 134.98851013]
[81.14891052 148.00482178]
[73.69400024 161.02113342]
[74.29191589 177.40937805]
[60.25638580 185.89088440]
[46.02595901 177.74060059]
[46.23968124 161.34284973]
[60.67768860 153.56622314]
[68.13259888 140.54991150]
[75.58750916 127.53359985]
[75.19881439 112.64406586]
[88.77149200 104.51430511]
[84.45193481 98.38312531]
[75.81282043 86.12075043]
[71.49325562 79.98957062]
[56.72720337 82.62843323]
[51.35105896 86.65393066]
[45.61465836 87.22402191]
[41.29291534 85.05652618]
[26.42986870 87.07886505]
[11.56682205 89.10119629]
[3.42367864 93.38384247]
[-3.62610292 91.00766754]
[-18.52800560 92.72035980]
[-33.42990875 94.43304443]
[-44.49062729 106.05371857]
[-60.45904160 104.50798798]
[-69.08554840 90.98161316]
[-63.75263214 75.85086060]
[-48.55125046 70.72276306]
[-35.14259720 79.53114319]
[-20.24069595 77.81845093]
[-5.33879280 76.10576630]
[9.54448700 74.23815155]
[24.40753365 72.21582031]
[39.27058029 70.19348145]
[54.08834076 67.86238098]
[68.85439301 65.22351074]
[105.13031769 88.32476807]
[118.22347260 81.00566864]
[131.31663513 73.68656158]
[144.40979004 66.36745453]
[135.77729797 43.16176605]
[131.69039917 18.74623680]
[132.29510498 -5.99748659]
[137.56802368 -30.17621231]
[147.31729126 -52.91743088]
[161.18954468 -73.40081024]
[178.68270874 -90.88778687]
[199.16421509 -104.74818420]
[221.89378357 -114.48294067]
[246.05032349 -119.74205780]
[245.11470032 -134.71284485]
[244.17906189 -149.68363953]
[243.24343872 -164.65443420]
[228.42849731 -167.47727966]
[214.78137207 -173.89651489]
[203.15991211 -183.50860596]
[194.29464722 -195.70935059]
[188.74288940 -209.73178101]
[186.85359192 -224.69445801]
[188.74552917 -239.65678406]
[194.29977417 -253.67823792]
[203.16719055 -265.87741089]
[214.79035950 -275.48745728]
[228.43862915 -281.90426636]
[243.25405884 -284.72448730]
[258.30535889 -283.77084351]
[272.64636230 -279.10327148]
[285.37561035 -271.01519775]
[295.69290161 -260.01498413]
[302.94970703 -246.79418945]
[306.68984985 -232.18385315]
[306.67822266 -217.10238647]
[302.91555786 -202.49783325]
[295.63836670 -189.28823853]
[285.30410767 -178.30397034]
[272.56240845 -170.23551941]
[258.21423340 -165.59005737]
[259.14987183 -150.61926270]
[260.08547974 -135.64848328]
[261.02111816 -120.67768860]
[275.73416138 -119.91326141]
[290.26644897 -117.49037933]
[304.43164062 -113.44008636]
[318.04812622 -107.81433105]
[330.94131470 -100.68524933]
[342.94583130 -92.14424896]
[353.90783691 -82.30083466]
[363.68670654 -71.28124237]
[372.15707397 -59.22675323]
[379.21032715 -46.29193878]
[393.11288452 -51.92389679]
[407.01544189 -57.55585098]
[420.91796875 -63.18780899]
[433.32809448 -74.73880005]
[447.86312866 -66.01131439]
[443.50042725 -49.62829971]
[426.54992676 -49.28525162]
[412.64736938 -43.65329742]
[398.74484253 -38.02133942]
[384.84228516 -32.38938141]
[387.33486938 -24.18113708]
[389.28125000 -15.82616425]
[390.67288208 -7.36077452]
[391.50369263 1.17824101]
[391.77005005 9.75376797]
[391.47070312 18.32852936]
[390.60693359 26.86525154]
[389.18246460 35.32682037]
[387.20343018 43.67644501]
[384.67840576 51.87782288]
[381.61834717 59.89529419]
[378.03643799 67.69398499]
[373.94830322 75.23997498]
[369.37161255 82.50045013]
[364.32623291 89.44382477]
[358.83410645 96.03989410]
[352.91903687 102.25994873]
[346.60668945 108.07692719]
[339.92449951 113.46551514]
[332.90151978 118.40224457]
[325.56817627 122.86563110]
[317.95639038 126.83623505]
[310.09921265 130.29675293]
[302.03076172 133.23211670]
[293.78610229 135.62950134]
[285.40109253 137.47846985]
[276.91213989 138.77091980]
[268.35614014 139.50122070]
[259.77029419 139.66613770]
[251.19190979 139.26490784]
[242.65830994 138.29922485]
[234.20655823 136.77326965]
[225.87341309 134.69361877]
[217.69511414 132.06927490]
[209.70722961 128.91160583]
[201.94448853 125.23428345]
[194.44064331 121.05327606]
[187.22836304 116.38670349]
[180.33898926 111.25482941]
[173.80252075 105.67991638]
[167.64738464 99.68617249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[5 46]
[6 19]
[8 17]
[9 16]
[10 15]
[22 45]
[23 44]
[26 43]
[27 42]
[28 41]
[30 40]
[31 39]
[32 38]
[59 89]
[60 88]
[61 87]
[62 86]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
