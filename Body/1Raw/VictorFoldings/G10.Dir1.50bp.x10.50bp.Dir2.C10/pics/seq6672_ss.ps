%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCxxxxxxxxxxGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.05213928]
[92.50000000 233.05213928]
[92.50000000 218.05213928]
[92.50000000 203.05213928]
[92.50000000 188.05213928]
[92.50000000 173.05213928]
[92.50000000 158.05213928]
[92.50000000 143.05213928]
[92.50000000 128.05213928]
[92.50000000 113.05213928]
[85.54872131 110.23616028]
[64.69488525 101.78823090]
[54.25507736 112.55903625]
[43.81526184 123.32984924]
[46.61407089 138.59242249]
[39.87689209 152.57061768]
[26.19431114 159.88954163]
[10.82755566 157.73490906]
[-0.31454086 146.93521118]
[-2.94761515 131.64317322]
[3.94080329 117.73887634]
[17.70197678 110.56882477]
[33.04445267 112.89002991]
[43.48426819 102.11922455]
[53.92407990 91.34841919]
[73.64672089 87.35823822]
[91.21327972 92.46356964]
[89.34566498 77.58028412]
[87.47805023 62.69700623]
[78.64662170 74.82160187]
[64.42541504 79.59206390]
[50.06888580 75.24579620]
[40.88148117 63.38866043]
[40.25777054 48.40163422]
[48.42819977 35.82212448]
[62.37395477 30.29800606]
[76.94235992 33.87033463]
[86.75033569 45.21840286]
[87.37431335 30.23138428]
[87.99829102 15.24436951]
[88.62226868 0.25735298]
[89.24624634 -14.72966290]
[89.87022400 -29.71667862]
[90.49420166 -44.70369720]
[75.24735260 -52.91274643]
[67.14703369 -69.97502136]
[70.98246002 -90.07322693]
[87.07801056 -105.12396240]
[84.28568268 -119.86177063]
[81.49336243 -134.59957886]
[66.47890472 -133.97982788]
[51.53423309 -135.55290222]
[36.97788239 -139.28526306]
[23.12012672 -145.09736633]
[10.25634193 -152.86529541]
[-1.33927679 -162.42352295]
[-11.41956902 -173.56826782]
[-19.76967430 -186.06201172]
[-26.21160698 -199.63844299]
[-30.60805893 -214.00816345]
[-32.86531830 -228.86491394]
[-32.93527222 -243.89198303]
[-30.81642723 -258.76910400]
[-26.55395126 -273.17913818]
[-20.23869514 -286.81494141]
[-12.00527096 -299.38589478]
[-2.02917385 -310.62399292]
[9.47695446 -320.28976440]
[22.26786041 -328.17712402]
[36.07090378 -334.11798096]
[50.59187698 -337.98571777]
[65.52125549 -339.69784546]
[80.54082489 -339.21792603]
[95.33044434 -336.55615234]
[109.57486725 -331.76925659]
[122.97047424 -324.95928955]
[135.23173523 -316.27142334]
[146.09732056 -305.89080811]
[155.33558655 -294.03872681]
[162.74966431 -280.96777344]
[168.18148804 -266.95660400]
[171.51530457 -252.30383301]
[172.68003845 -237.32179260]
[171.65086365 -222.32984924]
[168.44972229 -207.64752197]
[163.14483643 -193.58779907]
[155.84928894 -180.45033264]
[146.71859741 -168.51516724]
[135.94735718 -158.03669739]
[123.76517487 -149.23826599]
[110.43170929 -142.30743408]
[96.23116302 -137.39190674]
[99.02349091 -122.65409851]
[101.81581116 -107.91629028]
[108.47338867 -104.46279144]
[115.38061523 -117.77783203]
[128.69554138 -110.87039185]
[121.78855133 -97.55579376]
[128.44612122 -94.10229492]
[142.10237122 -100.30770111]
[155.75860596 -106.51310730]
[167.67747498 -118.57034302]
[182.56298828 -110.45504761]
[178.88554382 -93.90473175]
[161.96401978 -92.85686493]
[148.30776978 -86.65145874]
[134.65153503 -80.44605255]
[126.72137451 -54.12277985]
[105.48121643 -44.07971954]
[104.85723877 -29.09270096]
[104.23326111 -14.10568619]
[103.60928345 0.88133037]
[102.98530579 15.86834621]
[102.36132812 30.85536194]
[101.73735046 45.84238052]
[102.36132812 60.82939529]
[104.22894287 75.71267700]
[106.09655762 90.59595490]
[109.93477631 76.09532928]
[117.32492828 63.04214859]
[127.78382874 52.28987503]
[140.62762451 44.54153442]
[155.01655579 40.30374527]
[170.00979614 39.85358810]
[184.62704468 43.22049713]
[197.91256714 50.18433380]
[208.99769592 60.28977203]
[217.15765381 72.87608337]
[221.85890198 87.12031555]
[222.79405212 102.09114075]
[219.90197754 116.80969238]
[213.37174988 130.31362915]
[203.63037109 141.72000122]
[191.31474304 150.28302002]
[177.23011780 155.44279480]
[162.29739380 156.86198425]
[147.49295044 154.44776917]
[133.78475952 148.35800171]
[122.06909180 138.99087524]
[113.11197662 126.95882416]
[107.50000000 113.05213928]
[107.50000000 128.05213928]
[107.50000000 143.05213928]
[107.50000000 158.05213928]
[107.50000000 173.05213928]
[107.50000000 188.05213928]
[107.50000000 203.05213928]
[107.50000000 218.05213928]
[107.50000000 233.05213928]
[107.50000000 248.05213928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 25]
[13 24]
[14 23]
[27 118]
[28 117]
[29 116]
[38 115]
[39 114]
[40 113]
[41 112]
[42 111]
[43 110]
[44 109]
[48 94]
[49 93]
[50 92]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
