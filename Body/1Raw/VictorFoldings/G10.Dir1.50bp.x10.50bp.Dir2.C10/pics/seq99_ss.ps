%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCAUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.57921600 257.09573364]
[89.57921600 242.09573364]
[89.57921600 227.09573364]
[89.57921600 212.09573364]
[89.57921600 197.09573364]
[89.57921600 182.09573364]
[89.57921600 167.09573364]
[89.57921600 152.09573364]
[89.57921600 137.09573364]
[89.57921600 122.09574127]
[85.06316376 116.24343872]
[82.94378662 109.86671448]
[83.08229065 103.81184387]
[85.07019806 98.78480530]
[88.30251312 95.27290344]
[92.07140350 93.49775696]
[83.05387115 81.51092529]
[74.03633881 69.52409363]
[65.01881409 57.53725815]
[56.00128174 45.55042648]
[46.37275696 34.04862213]
[36.15927505 23.06295776]
[25.94579697 12.07729340]
[13.50635624 3.69514966]
[-0.51035643 -1.64636278]
[-14.52706909 -6.98787546]
[-28.54378319 -12.32938766]
[-43.03937912 -16.18654823]
[-57.85713577 -18.51765060]
[-72.67489624 -20.84875488]
[-87.49265289 -23.17985916]
[-93.93659973 -9.51778698]
[-103.96960449 1.77448809]
[-116.77833557 9.78155327]
[-131.32444763 13.85431004]
[-146.42875671 13.66260052]
[-160.86680603 9.22196388]
[-173.46818542 0.89238292]
[-183.21134949 -10.65089989]
[-189.30647278 -24.47212219]
[-191.25944519 -39.45085907]
[-188.91194153 -54.37285614]
[-182.45426941 -68.02845001]
[-172.40992737 -79.31063843]
[-159.59315491 -87.30483246]
[-145.04295349 -91.36296844]
[-129.93885803 -91.15608978]
[-115.50527191 -86.70095062]
[-102.91226196 -78.35871124]
[-93.18070221 -66.80564880]
[-87.09947205 -52.97830963]
[-85.16155243 -37.99761581]
[-70.34378815 -35.66651154]
[-55.52603149 -33.33541107]
[-40.70827484 -31.00430489]
[-50.83647537 -42.06864548]
[-54.20982742 -56.68440628]
[-49.95515060 -71.06834412]
[-39.17375183 -81.49722290]
[-24.65637016 -85.27156067]
[-10.16078091 -81.41437531]
[0.56087619 -70.92408752]
[4.73333263 -56.51608276]
[1.27656090 -41.91982651]
[-8.91466427 -30.91351318]
[-23.20227051 -26.34610176]
[-9.18555641 -21.00458908]
[4.83115625 -15.66307545]
[18.84786987 -10.32156372]
[9.62630081 -22.15214539]
[3.71319413 -35.93746948]
[1.49663162 -50.77279282]
[3.12208796 -65.68446350]
[8.48288345 -79.69381714]
[17.22718430 -91.88140106]
[28.78109360 -101.44733429]
[42.38632202 -107.76380920]
[57.14994049 -110.41625214]
[72.10301208 -109.23059845]
[86.26413727 -104.28465271]
[98.70392609 -95.90302277]
[108.60593414 -84.63580322]
[115.32029724 -71.22247314]
[118.40632629 -56.54336166]
[117.66149902 -41.56186676]
[113.13468933 -27.26123428]
[105.12300110 -14.58003330]
[94.15225220 -4.35053825]
[80.94245148 2.75588059]
[66.36057281 6.27282238]
[51.36364365 5.96946764]
[36.93146133 1.86381304]
[47.14494324 12.84947777]
[57.35842133 23.83514214]
[60.86826706 9.25155640]
[74.36690521 2.71040344]
[87.98793030 8.99273777]
[91.77546692 23.50668144]
[82.96114349 35.64371490]
[67.98811340 36.53289413]
[77.00564575 48.51972961]
[86.02317810 60.50656128]
[95.04070282 72.49339294]
[104.05823517 84.48022461]
[117.84061432 90.40019226]
[132.74252319 88.68750000]
[147.64442444 86.97480774]
[162.54632568 85.26212311]
[175.38984680 75.06526947]
[190.54087830 81.34049988]
[192.41331482 97.63240051]
[179.08097839 107.18125916]
[164.25901794 100.16402435]
[149.35711670 101.87670898]
[134.45521545 103.58940125]
[119.55330658 105.30209351]
[133.45205688 110.94342041]
[147.35081482 116.58474731]
[161.24957275 122.22606659]
[175.14833069 127.86739349]
[190.13616943 127.26347351]
[204.66191101 131.00553894]
[217.49238586 138.77590942]
[227.53839111 149.91494751]
[233.94705200 163.47698975]
[236.17433167 178.31069946]
[234.03114319 193.15679932]
[227.69943237 206.75494385]
[217.71672058 217.95072937]
[204.93048096 225.79368591]
[190.42617798 229.61799622]
[175.43516541 229.09901428]
[161.23007202 224.28079224]
[149.01683044 215.57237244]
[139.83226013 203.71304321]
[134.45610046 189.70957947]
[133.34474182 174.75068665]
[126.15336609 161.58695984]
[118.96198273 148.42321777]
[111.77059937 135.25947571]
[104.57921600 122.09574127]
[104.57921600 137.09573364]
[104.57921600 152.09573364]
[104.57921600 167.09573364]
[104.57921600 182.09573364]
[104.57921600 197.09573364]
[104.57921600 212.09573364]
[104.57921600 227.09573364]
[104.57921600 242.09573364]
[104.57921600 257.09573364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 94]
[22 93]
[23 92]
[24 69]
[25 68]
[26 67]
[27 66]
[28 55]
[29 54]
[30 53]
[31 52]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
