%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAxxxxxxxxxxUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.01171875 277.08773804]
[124.38774109 262.10070801]
[123.76376343 247.11369324]
[123.13978577 232.12667847]
[122.51580811 217.13966370]
[121.89183044 202.15264893]
[121.26785278 187.16563416]
[120.64387512 172.17861938]
[117.24089813 157.56973267]
[111.17787933 143.84967041]
[105.11486816 130.12962341]
[99.05185699 116.40956879]
[97.79490662 131.35681152]
[100.68434906 146.07588196]
[94.56352997 159.77024841]
[81.66953278 167.43476868]
[66.71496582 166.26814270]
[55.16555405 156.69677734]
[51.24247360 142.21888733]
[56.37956238 128.12596130]
[68.69748688 119.56938171]
[78.19802094 107.96163177]
[64.29546356 113.59358978]
[50.39291000 119.22554779]
[36.49035263 124.85749817]
[30.56015587 139.50701904]
[15.97571087 145.59548950]
[1.38971198 139.51074219]
[-4.54422617 124.86273956]
[1.69439673 110.34188843]
[16.40431595 104.56314850]
[30.85839844 110.95494843]
[44.76095200 105.32299042]
[58.66350937 99.69103241]
[72.56606293 94.05907440]
[78.88214111 90.96232605]
[85.20498657 89.97573090]
[90.97992706 90.95799255]
[95.71179199 93.63773346]
[97.57940674 78.75445557]
[99.44702148 63.87117386]
[101.31463623 48.98789597]
[99.26995850 40.01732254]
[103.37904358 33.81562424]
[97.72636414 19.03868866]
[107.22876740 7.56900740]
[109.40560913 -7.27219772]
[111.58244324 -22.11340332]
[113.75927734 -36.95460892]
[115.93611908 -51.79581451]
[101.39624786 -55.54071808]
[87.33681488 -60.80992126]
[73.91712952 -67.54372406]
[61.28924179 -75.66582489]
[49.59623337 -85.08419037]
[38.97060013 -95.69211578]
[29.53273773 -107.36939240]
[21.38958168 -119.98371124]
[14.63340092 -133.39215088]
[9.34074974 -147.44276428]
[5.57159662 -161.97636414]
[3.36864972 -176.82827759]
[2.75686979 -191.83020020]
[3.74318886 -206.81216431]
[6.31643105 -221.60441589]
[10.44743919 -236.03933716]
[16.08940697 -249.95336914]
[23.17840576 -263.18884277]
[31.63411140 -275.59582520]
[41.36071396 -287.03372192]
[52.24800491 -297.37292480]
[64.17262268 -306.49627686]
[76.99945068 -314.30041504]
[90.58315277 -320.69689941]
[104.76981354 -325.61328125]
[119.39869690 -328.99383545]
[134.30403137 -330.80023193]
[149.31692505 -331.01205444]
[164.26728821 -329.62686157]
[178.98571777 -326.66036987]
[193.30543518 -322.14617920]
[207.06417847 -316.13546753]
[220.10607910 -308.69631958]
[232.28334045 -299.91299438]
[243.45797729 -289.88507080]
[253.50340271 -278.72613525]
[262.30575562 -266.56265259]
[269.76535034 -253.53242493]
[275.79760742 -239.78309631]
[280.33419800 -225.47047424]
[283.32373047 -210.75671387]
[284.73233032 -195.80853271]
[284.54403687 -180.79531860]
[282.76095581 -165.88717651]
[279.40335083 -151.25302124]
[274.50918579 -137.05868530]
[268.13397217 -123.46498108]
[260.34994507 -110.62594604]
[251.24526978 -98.68704987]
[240.92314148 -87.78358459]
[229.50048828 -78.03907776]
[217.10676575 -69.56395721]
[203.88240051 -62.45423889]
[189.97721863 -56.79048538]
[175.54878235 -52.63687515]
[160.76058960 -50.04047394]
[145.78019714 -49.03069305]
[130.77732849 -49.61897659]
[128.60047913 -34.77777100]
[126.42365265 -19.93656731]
[124.24681091 -5.09536076]
[122.06997681 9.74584484]
[127.87834930 23.46123695]
[118.22024536 35.99246216]
[116.19791412 50.85550690]
[114.33029938 65.73878479]
[112.46268463 80.62207031]
[110.59506989 95.50534821]
[112.77191162 110.34654999]
[118.83492279 124.06660461]
[124.89793396 137.78666687]
[130.96095276 151.50671387]
[133.01904297 136.64857483]
[139.48922729 123.11577606]
[149.76119995 112.18479156]
[162.86607361 104.88668823]
[177.56773376 101.90985870]
[192.47941589 103.53509521]
[206.19461060 109.60909271]
[217.41963196 119.55892181]
[225.09565735 132.44607544]
[228.49865723 147.05496216]
[227.30766296 162.00759888]
[221.63497925 175.89360046]
[212.01571655 187.40313721]
[199.35719299 195.45060730]
[184.85342407 199.27691650]
[169.87246704 198.52114868]
[155.82742310 193.25459290]
[144.04306030 183.97401428]
[135.63088989 171.55464172]
[136.25486755 186.54165649]
[136.87884521 201.52867126]
[137.50282288 216.51568604]
[138.12680054 231.50270081]
[138.75077820 246.48973083]
[139.37475586 261.47674561]
[139.99873352 276.46374512]
[146.69871521 292.03765869]
[133.58819580 302.78710938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 122]
[10 121]
[11 120]
[12 119]
[22 35]
[23 34]
[24 33]
[25 32]
[39 118]
[40 117]
[41 116]
[42 115]
[44 114]
[46 112]
[47 111]
[48 110]
[49 109]
[50 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
