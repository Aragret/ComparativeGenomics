%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAxxxxxxxxxxUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[77.51457214 434.05596924]
[77.51457214 419.05596924]
[77.51457214 404.05596924]
[77.51457214 389.05596924]
[77.51457214 374.05596924]
[77.51457214 359.05596924]
[77.51457214 344.05596924]
[77.51457214 329.05596924]
[77.51457214 314.05596924]
[77.51457214 299.05596924]
[63.16776276 296.34545898]
[49.56415176 291.03128052]
[37.17198944 283.29479980]
[26.41813469 273.40063477]
[17.67334175 261.68783569]
[11.23948193 248.55822754]
[7.33912563 234.46249390]
[6.10783863 219.88488770]
[7.58947182 205.32643127]
[11.73460388 191.28781128]
[18.40218544 178.25212097]
[27.36433983 166.66822815]
[38.31415176 156.93533325]
[50.87617111 149.38919067]
[64.61930084 144.29052734]
[79.07157135 141.81610107]
[79.36792755 126.81903076]
[69.80200195 115.26510620]
[55.01305008 112.75772858]
[40.22410202 110.25035858]
[29.24162292 117.08013916]
[16.94769859 114.65216064]
[9.85654831 104.81095123]
[-4.87997675 102.01187897]
[-19.61650276 99.21280670]
[-34.61809540 104.23902130]
[-45.67799377 94.26265717]
[-60.41452026 91.46358490]
[-75.15104675 88.66450500]
[-85.11675262 100.35126495]
[-99.59604645 105.47431183]
[-114.69406891 102.65557861]
[-126.34952545 92.65328979]
[-131.42716980 78.15800476]
[-128.56112671 63.06889343]
[-118.52234650 51.44484329]
[-104.01122284 46.41266632]
[-88.93116760 49.32599258]
[-77.33863831 59.40115356]
[-72.35196686 73.92797852]
[-57.61544418 76.72705841]
[-42.87891769 79.52613068]
[-28.93138313 74.29970551]
[-16.81742859 84.47628021]
[-2.08090305 87.27535248]
[12.65562248 90.07443237]
[28.85762787 83.39112854]
[42.73147583 95.46140289]
[57.52042770 97.96878052]
[72.30937958 100.47615814]
[74.61704254 91.76827240]
[79.47453308 84.57724762]
[86.16335297 79.58322144]
[93.80918884 77.17118073]
[101.49287415 77.40625000]
[108.35980988 80.04790497]
[118.59339905 69.08097076]
[128.82698059 58.11403275]
[139.06057739 47.14709473]
[139.40353394 34.21871185]
[148.19750977 25.29113388]
[160.31692505 24.78769684]
[170.76519775 14.02508736]
[162.51582336 1.93601334]
[156.79743958 -11.53069878]
[153.83003235 -25.85204315]
[153.72674561 -40.47224045]
[156.48965454 -54.82429886]
[162.00967407 -68.35201263]
[170.07093811 -80.53150940]
[180.35919189 -90.89154816]
[192.47409058 -99.03173065]
[205.94470215 -104.63800812]
[220.24790955 -107.49476624]
[234.82862854 -107.49313354]
[249.12141418 -104.63511658]
[262.57238770 -99.03347778]
[274.66067505 -90.90724945]
[285.31951904 -101.46132660]
[289.68179321 -116.66925812]
[304.16967773 -120.12618256]
[314.82855225 -130.68026733]
[325.48742676 -141.23434448]
[329.89959717 -159.08673096]
[346.99856567 -162.93334961]
[357.44683838 -173.69595337]
[358.64776611 -189.69398499]
[371.98495483 -198.61024475]
[387.22720337 -193.60493469]
[392.68200684 -178.51770020]
[384.16488647 -164.92216492]
[368.20944214 -163.24768066]
[357.76116943 -152.48507690]
[357.61709595 -140.35606384]
[348.95404053 -131.30139160]
[336.04150391 -130.57546997]
[325.38262939 -120.02139282]
[314.72378540 -109.46731567]
[311.12390137 -95.01428223]
[295.87359619 -90.80246735]
[285.21475220 -80.24838257]
[293.60467529 -67.34043121]
[299.14288330 -52.97003937]
[301.58731079 -37.75891113]
[300.82968140 -22.36561584]
[296.90057373 -7.45711994]
[289.96786499 6.32014322]
[280.32986450 18.36828804]
[268.40222168 28.16392517]
[254.70016479 35.28089905]
[239.81622314 39.40882874]
[224.39453125 40.36664200]
[209.10302734 38.11051178]
[194.60449219 32.73587036]
[181.52780151 24.47335243]
[171.07952881 35.23596191]
[167.74131775 52.44142151]
[150.02751160 57.38068390]
[139.79391479 68.34761810]
[129.56033325 79.31455231]
[119.32674408 90.28149414]
[119.56123352 115.02185059]
[94.36499786 127.11538696]
[94.06864166 142.11245728]
[109.14626312 145.38891602]
[123.29636383 151.52906799]
[135.98094177 160.29748535]
[146.71809387 171.35888672]
[155.10031128 184.29086304]
[160.81001282 198.60011292]
[163.63146973 213.74116516]
[163.45903015 229.13725281]
[160.30107117 244.20225525]
[154.27958679 258.36294556]
[145.62547302 271.08096313]
[134.66969299 281.87307739]
[121.83062744 290.32971191]
[107.59807587 296.13040161]
[92.51457214 299.05596924]
[92.51457214 314.05596924]
[92.51457214 329.05596924]
[92.51457214 344.05596924]
[92.51457214 359.05596924]
[92.51457214 374.05596924]
[92.51457214 389.05596924]
[92.51457214 404.05596924]
[92.51457214 419.05596924]
[92.51457214 434.05596924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[26 134]
[27 133]
[28 60]
[29 59]
[30 58]
[33 56]
[34 55]
[35 54]
[37 52]
[38 51]
[39 50]
[66 131]
[67 130]
[68 129]
[69 128]
[72 126]
[73 125]
[88 111]
[89 110]
[91 108]
[92 107]
[93 106]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
