%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACxxxxxxxxxxACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-65.68959045 196.64317322]
[-78.93217468 203.68830872]
[-92.17475891 210.73344421]
[-100.72406769 224.04583740]
[-115.59422302 223.19273376]
[-128.83680725 230.23786926]
[-142.07939148 237.28300476]
[-155.32197571 244.32814026]
[-168.56457520 251.37327576]
[-181.80715942 258.41842651]
[-195.04974365 265.46356201]
[-203.59904480 278.77593994]
[-218.46920776 277.92285156]
[-231.71179199 284.96798706]
[-244.95437622 292.01312256]
[-258.19696045 299.05825806]
[-271.43954468 306.10339355]
[-284.68212891 313.14852905]
[-282.84622192 328.21484375]
[-286.58065796 342.92599487]
[-295.38040161 355.29244995]
[-308.05535889 363.64172363]
[-322.89129639 366.84463501]
[-337.88183594 364.46804810]
[-350.99960327 356.83334351]
[-360.47055054 344.97308350]
[-365.01376343 330.49124146]
[-364.01486206 315.34640503]
[-357.60891724 301.58673096]
[-346.66226196 291.07318115]
[-332.65536499 285.22753906]
[-317.48254395 284.84045410]
[-303.19577026 289.96423340]
[-291.72726440 299.90594482]
[-278.48468018 292.86080933]
[-265.24209595 285.81567383]
[-251.99951172 278.77053833]
[-238.75692749 271.72540283]
[-225.51434326 264.68026733]
[-217.91223145 251.87178040]
[-202.09487915 252.22096252]
[-188.85229492 245.17582703]
[-175.60969543 238.13069153]
[-162.36711121 231.08555603]
[-149.12452698 224.04042053]
[-135.88194275 216.99528503]
[-122.63935852 209.95014954]
[-115.03724670 197.14167786]
[-99.21989441 197.49085999]
[-85.97731018 190.44572449]
[-72.73472595 183.40058899]
[-78.37575531 170.53392029]
[-83.05989838 157.28889465]
[-86.76203918 143.73654175]
[-89.46231079 129.94955444]
[-91.14623260 116.00192261]
[-91.80476379 101.96844482]
[-91.43438721 87.92440796]
[-90.03707123 73.94514465]
[-87.62032318 60.10565567]
[-84.19709778 46.48017502]
[-79.78577423 33.14179611]
[-74.41000366 20.16207123]
[-68.09862518 7.61062813]
[-60.88549805 -4.44520044]
[-52.80931854 -15.94074249]
[-43.91340637 -26.81433105]
[-34.24548721 -37.00763702]
[-23.85741997 -46.46598053]
[-12.80493069 -55.13861847]
[-1.14731050 -62.97903442]
[11.05290413 -69.94515991]
[23.73026657 -75.99963379]
[36.81677246 -81.10997772]
[50.24221802 -85.24877167]
[63.93458176 -88.39381409]
[77.82041931 -90.52823639]
[91.82523346 -91.64059448]
[105.87390137 -91.72490692]
[119.89105988 -90.78073883]
[133.80151367 -88.81314087]
[147.53063965 -85.83267212]
[161.00479126 -81.85532379]
[174.15170288 -76.90242767]
[186.90081787 -71.00055695]
[199.18377686 -64.18137360]
[207.43606567 -76.70733643]
[207.86152649 -93.10095978]
[222.39877319 -100.69048309]
[236.09310913 -91.66844940]
[234.85699463 -75.31595612]
[219.96202087 -68.45504761]
[211.70973206 -55.92908096]
[222.46675110 -47.63075256]
[232.60939026 -38.59181976]
[242.08679199 -28.85762405]
[250.85139465 -18.47700119]
[258.85925293 -7.50202751]
[266.07015991 4.01224184]
[272.44793701 16.00804329]
[277.96063232 28.42519951]
[292.08544922 23.37644386]
[306.21026611 18.32768822]
[319.09011841 7.30293608]
[333.24954224 16.62750626]
[328.20907593 32.81485367]
[311.25900269 32.45249176]
[297.13421631 37.50124741]
[283.00939941 42.55000305]
[287.70135498 60.48864365]
[290.63934326 78.79649353]
[291.79589844 97.30248260]
[291.16024780 115.83367157]
[288.73831177 134.21690369]
[303.38180542 137.46772766]
[318.02529907 140.71856689]
[333.49578857 135.27835083]
[345.76452637 146.16000366]
[342.21047974 162.16940308]
[326.48974609 166.83744812]
[314.77447510 155.36206055]
[300.13098145 152.11123657]
[285.48748779 148.86041260]
[280.91058350 163.75190735]
[275.14031982 178.22285461]
[268.21472168 192.17781067]
[260.17950439 205.52471924]
[251.08767700 218.17553711]
[240.99919128 230.04679871]
[229.98060608 241.06022644]
[218.10459900 251.14312744]
[205.44952393 260.22903442]
[192.09884644 268.25796509]
[178.14064026 275.17700195]
[163.66697693 280.94049072]
[148.77333069 285.51040649]
[133.55795288 288.85656738]
[118.12121582 290.95697021]
[102.56494141 291.79772949]
[86.99174500 291.37326050]
[71.50436401 289.68643188]
[56.20494461 286.74832153]
[41.19442368 282.57833862]
[26.57181358 277.20397949]
[12.43357277 270.66067505]
[-1.12703669 262.99160767]
[-14.02056217 254.24737549]
[-26.16195107 244.48565674]
[-37.47111130 233.77084351]
[-47.87344742 222.17359924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[86 93]
[87 92]
[101 109]
[102 108]
[103 107]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
