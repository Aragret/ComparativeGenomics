%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUAxxxxxxxxxxCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.76000977 294.26745605]
[84.76000977 279.26745605]
[84.76000977 264.26745605]
[84.76000977 249.26745605]
[84.76000977 234.26745605]
[84.76000977 219.26745605]
[84.76000977 204.26745605]
[84.76000977 189.26745605]
[84.76000977 174.26745605]
[84.76000977 159.26745605]
[78.17572021 155.67620850]
[70.99320984 168.84478760]
[63.81070328 182.01336670]
[56.62797546 195.18183899]
[43.45962906 187.99888611]
[50.64212036 174.83085632]
[57.82462692 161.66227722]
[65.00714111 148.49369812]
[58.42284775 144.90243530]
[45.81171799 153.02398682]
[33.20058823 161.14552307]
[28.41358566 176.45774841]
[13.40583229 182.12756348]
[-0.31000611 173.80558777]
[-2.21231222 157.87571716]
[9.15820026 146.55799866]
[25.07904816 148.53439331]
[37.69017410 140.41285706]
[50.30130386 132.29130554]
[48.39734650 120.98667908]
[48.85573578 110.17272949]
[33.87602234 110.95257568]
[18.89630699 111.73242188]
[3.91659284 112.51226807]
[-9.53795719 121.88814545]
[-24.26805687 114.68008423]
[-25.12064362 98.30311584]
[-11.21864796 89.60446167]
[3.13674760 97.53255463]
[18.11646271 96.75270844]
[33.09617615 95.97286224]
[48.07588959 95.19301605]
[55.28135300 73.17719269]
[71.31166077 56.45462799]
[93.00337219 48.32537079]
[116.07580566 50.39366531]
[122.70430756 36.93769836]
[129.33280945 23.48173332]
[135.96130371 10.02576733]
[142.58979797 -3.43019795]
[129.01583862 2.95316172]
[114.05782318 1.83152211]
[101.58762360 -6.50478411]
[94.83309174 -19.89793015]
[95.54262543 -34.88113785]
[103.53256989 -47.57605362]
[116.73474121 -54.69663620]
[131.73179626 -54.39974213]
[144.64181519 -46.76222229]
[152.12304688 -33.76102829]
[152.23904419 -18.76157761]
[161.50399780 -30.55821800]
[170.76893616 -42.35485840]
[156.73138428 -37.06838226]
[141.82798767 -35.36866379]
[126.96056366 -37.35853958]
[113.02870941 -42.91761398]
[100.87541199 -51.70951462]
[91.23606873 -63.20224762]
[84.69392395 -76.70040894]
[81.64485168 -91.38724518]
[82.27333832 -106.37407684]
[86.54135895 -120.75406647]
[94.19065857 -133.65708923]
[104.75838470 -144.30242920]
[117.60510254 -152.04592896]
[131.95347595 -156.41903687]
[146.93530273 -157.15716553]
[161.64405823 -154.21563721]
[175.18972778 -147.77243042]
[186.75268555 -138.21742249]
[195.63327026 -126.12878418]
[201.29412842 -112.23797607]
[203.39273071 -97.38550568]
[201.80209351 -82.47007751]
[196.61846924 -68.39421082]
[188.15681458 -56.01110077]
[201.81306458 -62.21650696]
[215.46929932 -68.42191315]
[229.12553406 -74.62731934]
[242.78178406 -80.83272552]
[256.43801880 -87.03813171]
[270.09426880 -93.24354553]
[257.37478638 -101.19430542]
[255.44880676 -116.07014465]
[265.72409058 -126.99803162]
[280.69021606 -125.99055481]
[289.40817261 -113.78410339]
[285.50625610 -99.30110931]
[299.73303223 -104.05492401]
[313.95980835 -108.80873871]
[318.50326538 -123.64573669]
[330.92019653 -132.95161438]
[346.43603516 -133.14808655]
[359.08462524 -124.15958405]
[364.00228882 -109.44238281]
[359.29815674 -94.65554810]
[346.78100586 -85.48491669]
[331.26394653 -85.45677948]
[318.71362305 -94.58196259]
[304.48684692 -89.82814789]
[290.26007080 -85.07433319]
[276.29968262 -79.58730316]
[262.64343262 -73.38189697]
[248.98718262 -67.17648315]
[235.33094788 -60.97108078]
[221.67471313 -54.76567078]
[208.01846313 -48.56026459]
[194.36222839 -42.35485840]
[182.56558228 -33.08990860]
[173.30062866 -21.29326820]
[164.03569031 -9.49662876]
[156.04576111 3.19830060]
[149.41726685 16.65426636]
[142.78877258 30.11023140]
[136.16027832 43.56619644]
[129.53176880 57.02216339]
[137.17036438 62.70528030]
[143.71556091 69.74587250]
[148.92628479 77.93356323]
[152.60200500 87.01523590]
[154.59016418 96.70282745]
[154.79235840 106.68244934]
[153.16857910 116.62458038]
[149.73970032 126.19490051]
[144.58776855 135.06556702]
[137.85441589 142.92640686]
[129.73706055 149.49574280]
[120.48320770 154.53039551]
[110.38297272 157.83460999]
[99.76000977 159.26745605]
[99.76000977 174.26745605]
[99.76000977 189.26745605]
[99.76000977 204.26745605]
[99.76000977 219.26745605]
[99.76000977 234.26745605]
[99.76000977 249.26745605]
[99.76000977 264.26745605]
[99.76000977 279.26745605]
[99.76000977 294.26745605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[19 29]
[20 28]
[21 27]
[31 42]
[32 41]
[33 40]
[34 39]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[61 122]
[62 121]
[63 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
