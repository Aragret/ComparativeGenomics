%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUxxxxxxxxxxGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.75850677 227.92121887]
[104.13453674 212.93420410]
[103.51055908 197.94718933]
[102.88658142 182.96017456]
[102.26260376 167.97314453]
[101.63862610 152.98612976]
[101.01464844 137.99911499]
[100.39067078 123.01210022]
[87.29751587 115.69300079]
[74.20436096 123.01210022]
[61.11120605 130.33120728]
[48.01805115 137.65031433]
[34.92489624 144.96942139]
[32.55004120 155.66734314]
[24.81255531 163.11280823]
[14.46484280 164.99534607]
[5.00587749 160.92596436]
[-8.38040733 167.69407654]
[-21.76669121 174.46218872]
[-20.58644867 189.61723328]
[-25.30038261 204.06878662]
[-35.18965530 215.61308289]
[-48.74622726 222.48970032]
[-63.90281296 223.65000916]
[-78.34814453 218.91706848]
[-89.87942505 209.01261902]
[-96.73819733 195.44700623]
[-97.87857056 180.28890991]
[-93.12663269 165.84980774]
[-83.20701599 154.33157349]
[-69.63240051 147.49064636]
[-54.47281647 146.37022400]
[-40.03998184 151.14115906]
[-28.53480721 161.07591248]
[-15.14852238 154.30778503]
[-1.76223707 147.53967285]
[7.52887106 130.62504578]
[27.60579109 131.87626648]
[40.69894409 124.55715942]
[53.79209900 117.23805237]
[66.88525391 109.91894531]
[79.97840881 102.59984589]
[80.60184479 95.12580109]
[68.27968597 86.57218933]
[81.84872437 80.17771149]
[82.47216034 72.70366669]
[70.77253723 63.31650543]
[59.07291031 53.92934418]
[47.37328720 44.54218292]
[35.67366409 35.15502167]
[20.37334251 38.38522339]
[6.60069132 30.97927475]
[0.85873318 16.43403816]
[5.85864592 1.61732781]
[19.23962402 -6.47485685]
[34.68357849 -4.02163458]
[44.89834595 7.81865835]
[45.06082535 23.45539856]
[56.76044846 32.84255981]
[68.46007538 42.22972107]
[80.15969849 51.61688232]
[91.85932159 61.00404358]
[106.85607147 60.69198990]
[118.15507507 50.82626724]
[129.45408630 40.96054459]
[114.63053894 43.25454712]
[99.64199829 42.66827011]
[85.04293060 39.22340012]
[71.37337494 33.04737091]
[59.13901138 24.36864281]
[48.79240799 13.50826550]
[40.71630859 0.86798674]
[35.20946884 -13.08460140]
[32.47559738 -27.83336258]
[32.61582565 -42.83270645]
[35.62496567 -57.52777481]
[41.39170456 -71.37496948]
[49.70271683 -83.86204529]
[60.25056076 -94.52707672]
[72.64505005 -102.97555542]
[86.42768097 -108.89493561]
[101.08860779 -112.06625366]
[116.08548737 -112.37220001]
[130.86355591 -109.80144501]
[144.87612915 -104.44910431]
[157.60487366 -96.51315308]
[168.57890320 -86.28717804]
[177.39227295 -74.14944458]
[183.71896362 -60.54896927]
[187.32492065 -45.98884964]
[188.07676697 -31.00770378]
[185.94668579 -16.15971565]
[181.01347351 -1.99414599]
[173.45960999 10.96499157]
[163.56454468 22.23830795]
[151.69989014 31.40527725]
[166.63418579 30.00297356]
[181.56849670 28.60066986]
[196.50280762 27.19836617]
[202.97183228 13.33838749]
[215.42750549 4.63478327]
[230.46737671 3.34293056]
[244.04368591 9.71000385]
[252.55285645 21.93536949]
[267.48718262 20.53306580]
[282.42147827 19.13076210]
[297.35577393 17.72845840]
[312.29010010 16.32615662]
[323.59017944 4.93810320]
[339.52297974 6.81570005]
[347.86621094 20.51861382]
[342.21966553 35.53514481]
[326.91488647 40.34589005]
[313.69238281 31.26046371]
[298.75808716 32.66276550]
[283.82379150 34.06507111]
[268.88946533 35.46737289]
[253.95516968 36.86967850]
[247.87054443 50.46537399]
[235.71679688 59.24845123]
[220.69934082 60.77892685]
[206.84115601 54.54614639]
[197.90510559 42.13267517]
[182.97080994 43.53497696]
[168.03649902 44.93728256]
[153.10218811 46.33958435]
[139.31980896 52.25954819]
[128.02079773 62.12527084]
[116.72179413 71.99099731]
[129.02043152 63.40359116]
[143.69625854 60.30194855]
[158.41780090 63.17881393]
[170.84631348 71.57714844]
[179.00733948 84.16275787]
[181.60440063 98.93622589]
[178.22488403 113.55056763]
[169.40570068 125.68407440]
[156.54789734 133.40916443]
[141.69413757 135.49858093]
[127.20415497 131.62039185]
[115.37768555 122.38812256]
[116.00166321 137.37513733]
[116.62564087 152.36215210]
[117.24961853 167.34916687]
[117.87359619 182.33619690]
[118.49757385 197.32321167]
[119.12155151 212.31022644]
[119.74552917 227.29724121]
[126.44551849 242.87113953]
[113.33499146 253.62057495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[17 36]
[18 35]
[19 34]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[63 129]
[64 128]
[65 127]
[96 126]
[97 125]
[98 124]
[99 123]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
