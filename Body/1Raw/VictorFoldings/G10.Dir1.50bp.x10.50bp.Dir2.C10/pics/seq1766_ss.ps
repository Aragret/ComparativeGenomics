%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUxxxxxxxxxxGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.29504395]
[92.50000000 234.29504395]
[92.50000000 219.29504395]
[92.50000000 204.29504395]
[92.50000000 189.29504395]
[92.50000000 174.29504395]
[92.50000000 159.29504395]
[92.50000000 144.29504395]
[92.50000000 129.29504395]
[92.50000000 114.29504395]
[78.84375763 108.08963776]
[67.54475403 117.95536041]
[56.24575043 127.82108307]
[61.13386917 142.21464539]
[60.13673782 157.38284302]
[53.40641022 171.01263428]
[41.96920776 181.02557373]
[27.56922531 185.89476013]
[12.40235519 184.87767029]
[-1.21856725 178.12940979]
[-11.21644878 166.67904663]
[-16.06668472 152.27267456]
[-15.02965069 137.10716248]
[-8.26348495 123.49512482]
[3.20001960 113.51231384]
[17.61276245 108.68103027]
[32.77690506 109.73801422]
[46.38002777 116.52207947]
[57.67903137 106.65635681]
[68.97803497 96.79063416]
[82.36599731 87.49557495]
[94.86564636 89.10126495]
[97.65797424 74.36345673]
[85.03415680 63.73246765]
[79.50782776 48.28076172]
[82.49211884 32.23943710]
[93.08329010 19.95085907]
[108.33152008 14.69319153]
[110.81663513 -0.09951583]
[113.30175781 -14.89222336]
[115.16936493 -29.77550316]
[116.41624451 -44.72359085]
[117.66311646 -59.67167664]
[118.90998840 -74.61976624]
[119.53396606 -89.60678101]
[119.53396606 -104.60678101]
[119.53396606 -119.60678101]
[119.53396606 -134.60678101]
[119.06592560 -149.59947205]
[118.13030243 -164.57026672]
[117.19467163 -179.54106140]
[115.79236603 -194.47537231]
[113.92475128 -209.35864258]
[112.05714417 -224.24192810]
[110.18952942 -239.12521362]
[108.32191467 -254.00848389]
[104.58136749 -259.58663940]
[104.31027222 -265.34490967]
[106.69952393 -269.54812622]
[105.45265198 -284.49621582]
[96.69555664 -291.08398438]
[93.11803436 -301.20846558]
[95.68492889 -311.40798950]
[103.30287170 -318.33609009]
[102.67889404 -333.32312012]
[102.05491638 -348.31015015]
[101.43093872 -363.29714966]
[87.14527893 -368.49218750]
[75.93848419 -378.76235962]
[69.51950073 -392.54150391]
[68.86718750 -407.72842407]
[74.08101654 -422.00723267]
[84.36590576 -433.20053101]
[98.15349579 -439.60137939]
[113.34127045 -440.23370361]
[127.61321259 -435.00109863]
[138.79295349 -424.70150757]
[145.17565918 -410.90548706]
[145.78800964 -395.71691895]
[140.53663635 -381.45187378]
[130.22233582 -370.28567505]
[116.41795349 -363.92114258]
[117.04193115 -348.93411255]
[117.66590881 -333.94708252]
[118.28988647 -318.96008301]
[129.84556580 -303.50381470]
[120.40074158 -285.74310303]
[121.64761353 -270.79501343]
[123.20519257 -255.87609863]
[125.07280731 -240.99281311]
[126.94042206 -226.10954285]
[128.80802917 -211.22625732]
[130.67564392 -196.34298706]
[133.28421021 -193.88067627]
[134.79776001 -190.00630188]
[134.55392456 -185.26362610]
[132.16546631 -180.47668457]
[133.10108948 -165.50588989]
[134.03671265 -150.53511047]
[136.48661804 -147.91488647]
[137.75555420 -143.95364380]
[137.21636963 -139.23542786]
[134.53396606 -134.60678101]
[134.53396606 -119.60678101]
[134.53396606 -104.60678101]
[134.53396606 -89.60678101]
[136.48764038 -87.51142120]
[137.70100403 -84.49120331]
[137.80812073 -80.83464813]
[136.55809021 -76.96057129]
[133.85807800 -73.37288666]
[132.61120605 -58.42480087]
[131.36433411 -43.47671509]
[130.11746216 -28.52862930]
[131.89018250 -26.27812195]
[132.84829712 -23.16749954]
[132.65109253 -19.51469231]
[131.08334351 -15.75793266]
[128.09446716 -12.40710449]
[125.60934448 2.38560271]
[123.12422180 17.17831039]
[134.23130798 25.18405533]
[140.82498169 37.25893402]
[141.56246948 51.06341934]
[136.24205017 63.89455795]
[125.85379028 73.21523285]
[112.39578247 77.15577698]
[109.60345459 91.89358521]
[118.53769684 79.84454346]
[131.70220947 72.65457153]
[146.66853333 71.65000153]
[160.67582703 77.01615143]
[171.14018250 87.76311493]
[176.13122559 101.90841675]
[174.72827148 116.84265900]
[167.19010925 129.81094360]
[154.90731812 138.42098999]
[140.14569092 141.08450317]
[125.62831116 137.31018066]
[114.03318787 127.79422760]
[107.50000000 114.29504395]
[107.50000000 129.29504395]
[107.50000000 144.29504395]
[107.50000000 159.29504395]
[107.50000000 174.29504395]
[107.50000000 189.29504395]
[107.50000000 204.29504395]
[107.50000000 219.29504395]
[107.50000000 234.29504395]
[107.50000000 249.29504395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 30]
[12 29]
[13 28]
[32 128]
[33 127]
[38 121]
[39 120]
[40 119]
[41 114]
[42 113]
[43 112]
[44 111]
[45 106]
[46 105]
[47 104]
[48 103]
[49 99]
[50 98]
[51 97]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[59 88]
[60 87]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
