%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUxxxxxxxxxxCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.80677032 317.41510010]
[107.80677032 302.41510010]
[107.80677032 287.41510010]
[107.80677032 272.41510010]
[107.80677032 257.41510010]
[107.80677032 242.41510010]
[107.80677032 227.41510010]
[107.80677032 212.41510010]
[107.80677032 197.41510010]
[107.80677032 182.41510010]
[105.62992859 167.57388306]
[101.32234955 153.20570374]
[97.01476288 138.83752441]
[82.56007385 134.82977295]
[71.46875763 144.92843628]
[60.37744141 155.02708435]
[49.28612518 165.12573242]
[47.10212326 181.01942444]
[33.24111557 189.09730530]
[18.33608246 183.16268921]
[13.82089043 167.76812744]
[23.15920830 154.72299194]
[39.18747711 154.03440857]
[50.27879333 143.93576050]
[61.37010956 133.83711243]
[72.46142578 123.73846436]
[68.61737061 111.12311554]
[69.78046417 99.08761597]
[55.36824799 94.92973328]
[40.95603180 90.77184296]
[36.64205933 92.01728058]
[32.57680130 91.80580902]
[29.19807816 90.40361786]
[26.80793190 88.19428253]
[25.54562950 85.62252808]
[11.52891636 80.28101349]
[-6.54424191 83.64862823]
[-17.12372208 69.68171692]
[-31.24852562 64.63296509]
[-45.37332916 59.58420563]
[-59.49813080 54.53544998]
[-73.62293243 49.48669434]
[-87.02779388 57.53925705]
[-102.46442413 55.04035568]
[-112.64411926 43.16989517]
[-112.76033783 27.53274536]
[-102.75820923 15.51228619]
[-87.36042786 12.78421497]
[-73.83735657 20.63664246]
[-68.57418060 35.36189270]
[-54.44937515 40.41064835]
[-40.32457352 45.45940399]
[-26.19976997 50.50815964]
[-12.07496643 55.55691528]
[-0.96939486 50.66063309]
[10.86586380 54.80135727]
[16.87042809 66.26430511]
[30.88714218 71.60581207]
[45.11392212 76.35962677]
[59.52613831 80.51751709]
[73.93835449 84.67540741]
[90.41843414 71.32516479]
[111.61376953 72.08632660]
[120.63130188 60.09949875]
[129.64883423 48.11266327]
[138.66636658 36.12583160]
[147.68389893 24.13899994]
[136.93272400 13.64896679]
[127.61131287 1.87019360]
[119.87270355 -11.00390053]
[113.84398651 -24.76191139]
[109.62414551 -39.17792130]
[107.28248596 -54.01520157]
[106.85746002 -69.03012085]
[108.35604095 -83.97610474]
[111.75361633 -98.60774231]
[116.99440765 -112.68476105]
[123.99234772 -125.97600555]
[132.63252258 -138.26321411]
[142.77307129 -149.34463501]
[154.24743652 -159.03829956]
[166.86724854 -167.18499756]
[180.42524719 -173.65100098]
[194.69879150 -178.33009338]
[209.45352173 -181.14546204]
[224.44714355 -182.05087280]
[239.43344116 -181.03144836]
[254.16632080 -178.10392761]
[268.40386963 -173.31640625]
[281.91229248 -166.74746704]
[294.46978760 -158.50500488]
[305.87008667 -148.72436523]
[315.92605591 -137.56613159]
[324.47250366 -125.21355438]
[331.36917114 -111.86946869]
[336.50271606 -97.75299072]
[339.78890991 -83.09593964]
[341.17376709 -68.13898468]
[340.63455200 -53.12773514]
[338.18011475 -38.30869293]
[333.85073853 -23.92519569]
[327.71755981 -10.21343899]
[319.88125610 2.60142183]
[310.47048950 14.30895329]
[299.63986206 24.71690941]
[287.56716919 33.65437698]
[274.45065308 40.97460175]
[260.50573730 46.55737305]
[245.96138000 50.31102371]
[231.05641174 52.17390442]
[216.03559875 52.11543655]
[201.14558411 50.13657379]
[186.63088989 46.26980972]
[172.72984314 40.57864380]
[159.67073059 33.15652847]
[150.65319824 45.14336395]
[141.63566589 57.13019562]
[132.61813354 69.11702728]
[123.60060883 81.10385895]
[130.14782715 91.01518250]
[132.53305054 103.12810516]
[130.05491638 115.69883728]
[122.73883820 126.78179169]
[111.38294220 134.52993774]
[115.69052887 148.89811707]
[119.99811554 163.26629639]
[124.38711548 148.92277527]
[133.84835815 137.28298950]
[146.99261475 130.05604553]
[161.88983154 128.30313110]
[176.35260010 132.28161621]
[188.25727844 141.40733337]
[195.85583496 154.34031677]
[198.03254700 169.18153381]
[194.46778870 183.75180054]
[185.68499756 195.91168213]
[172.97380066 203.87568665]
[158.20062256 206.47441101]
[143.53469849 203.32629395]
[131.12948608 194.89358521]
[122.80677032 182.41510010]
[122.80677032 197.41510010]
[122.80677032 212.41510010]
[122.80677032 227.41510010]
[122.80677032 242.41510010]
[122.80677032 257.41510010]
[122.80677032 272.41510010]
[122.80677032 287.41510010]
[122.80677032 302.41510010]
[122.80677032 317.41510010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[13 124]
[14 26]
[15 25]
[16 24]
[17 23]
[28 61]
[29 60]
[30 59]
[35 58]
[36 57]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[63 119]
[64 118]
[65 117]
[66 116]
[67 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
