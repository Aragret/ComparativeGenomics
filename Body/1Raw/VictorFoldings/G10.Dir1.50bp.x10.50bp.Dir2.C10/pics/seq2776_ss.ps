%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCUGUCUCUUACUUUUAACCAGUGxxxxxxxxxxAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[144.85972595 429.76693726]
[144.85972595 414.76693726]
[144.85972595 399.76693726]
[144.85972595 384.76693726]
[144.85972595 369.76693726]
[144.85972595 354.76693726]
[144.85972595 339.76693726]
[144.85972595 324.76693726]
[144.85972595 309.76693726]
[144.85972595 294.76693726]
[142.32070923 279.98336792]
[137.31596375 265.84292603]
[124.99621582 261.95828247]
[117.05876923 251.52095032]
[116.59281158 238.22154236]
[123.99391937 226.92813110]
[119.27310944 212.69036865]
[114.55229950 198.45260620]
[109.83149719 184.21484375]
[105.11068726 169.97708130]
[98.86604309 183.61541748]
[85.87420654 191.11289978]
[70.94128418 189.69592285]
[59.59146500 179.88870239]
[56.02342987 165.31924438]
[61.55711746 151.37728882]
[74.14542389 143.22041321]
[89.13152313 143.86614990]
[100.97292328 153.07760620]
[98.58194733 138.26939392]
[96.19097137 123.46117401]
[93.79999542 108.65296173]
[90.23268127 94.08332825]
[85.51187134 79.84555817]
[82.06175232 77.00339508]
[79.94316864 73.54737091]
[79.18418884 69.98320007]
[79.64186859 66.77191925]
[81.03262329 64.27681732]
[77.46530914 49.70718384]
[73.89799500 35.13755035]
[70.33068085 20.56791496]
[59.53340530 9.00377369]
[64.02190399 -5.19843149]
[60.45458984 -19.76806641]
[49.82609177 -27.13977814]
[47.17712021 -39.38978958]
[53.39931107 -49.80419159]
[50.12423325 -64.44229126]
[46.26611328 -78.93762970]
[41.83112717 -93.26699829]
[37.39614487 -107.59637451]
[32.96116257 -121.92574310]
[28.52617836 -136.25512695]
[13.59463978 -134.44157410]
[-1.42075086 -135.32351685]
[-16.03731155 -138.87258911]
[-29.78518105 -144.97470093]
[-42.22241974 -153.43371582]
[-52.94922638 -163.97769165]
[-61.62077332 -176.26768494]
[-67.95831299 -189.90863037]
[-71.75811005 -204.46203613]
[-72.89802551 -219.46003723]
[-71.34140778 -234.42054749]
[-67.13830566 -248.86262512]
[-60.42382812 -262.32202148]
[-51.41381073 -274.36608887]
[-40.39789581 -284.60763550]
[-27.73019600 -292.71746826]
[-13.81792641 -298.43484497]
[0.89169103 -301.57601929]
[15.92580223 -302.04000854]
[30.80112457 -299.81185913]
[45.03947449 -294.96322632]
[58.18315125 -287.64999390]
[69.80963898 -278.10720825]
[79.54519653 -266.64166260]
[87.07685852 -253.62193298]
[92.16252136 -239.46650696]
[94.63870239 -224.63046265]
[94.42579651 -209.59069824]
[91.53064728 -194.83068848]
[86.04633331 -180.82490540]
[78.14913940 -168.02357483]
[68.09292603 -156.83819580]
[56.20097351 -147.62835693]
[42.85554886 -140.69010925]
[47.29053497 -126.36073303]
[51.72551727 -112.03135681]
[56.16049957 -97.70198822]
[60.59548569 -83.37261200]
[63.07155991 -81.94825745]
[65.11583710 -79.42978668]
[66.29826355 -75.98287201]
[66.25911713 -71.92935181]
[64.76232910 -67.71736908]
[68.03740692 -53.07926941]
[80.59847260 -40.85839462]
[75.02422333 -23.33538055]
[78.59153748 -8.76574421]
[89.13365936 1.75627816]
[84.90032196 17.00060081]
[88.46762848 31.57023811]
[92.03494263 46.13987350]
[95.60225677 60.70950699]
[99.74964142 75.12474823]
[104.47045135 89.36251831]
[110.71508789 75.72416687]
[123.70692444 68.22669983]
[138.63984680 69.64366150]
[149.98966980 79.45088959]
[153.55769348 94.02034760]
[148.02401733 107.96231079]
[135.43569946 116.11917114]
[120.44960785 115.47344208]
[108.60821533 106.26198578]
[110.99918365 121.07019806]
[113.39015961 135.87841797]
[115.78113556 150.68663025]
[119.34844971 165.25627136]
[124.06925964 179.49403381]
[128.79006958 193.73179626]
[133.51087952 207.96955872]
[138.23168945 222.20732117]
[153.98953247 229.74212646]
[159.34402466 246.01333618]
[151.45642090 260.83816528]
[156.46116638 274.97863770]
[159.59532166 260.30972290]
[167.24708557 247.40814209]
[178.61616516 237.62326050]
[192.51350403 231.97843933]
[207.48561096 231.06407166]
[221.96658325 234.97578430]
[234.44189453 243.30444336]
[243.60676575 255.17900085]
[248.50268555 269.35751343]
[248.61759949 284.35705566]
[243.93946838 298.60891724]
[234.95758057 310.62246704]
[222.61132812 319.14126587]
[208.19198608 323.27438354]
[193.20762634 322.58947754]
[179.22544861 317.15823364]
[167.70779419 307.54867554]
[159.85972595 294.76693726]
[159.85972595 309.76693726]
[159.85972595 324.76693726]
[159.85972595 339.76693726]
[159.85972595 354.76693726]
[159.85972595 369.76693726]
[159.85972595 384.76693726]
[159.85972595 399.76693726]
[159.85972595 414.76693726]
[159.85972595 429.76693726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[11 129]
[12 128]
[16 125]
[17 124]
[18 123]
[19 122]
[20 121]
[29 120]
[30 119]
[31 118]
[32 117]
[33 108]
[34 107]
[39 106]
[40 105]
[41 104]
[42 103]
[44 101]
[45 100]
[48 98]
[49 97]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
