%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCxxxxxxxxxxACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[48.60128784 97.03456116]
[49.46779251 90.14517212]
[35.32047653 85.15985107]
[21.17316055 80.17453003]
[7.02584362 75.18920898]
[-7.12147284 70.20388794]
[-21.86606979 67.44764709]
[-36.85895538 66.98571777]
[-51.85184097 66.52379608]
[-66.84472656 66.06186676]
[-80.87662506 73.37052155]
[-93.35958862 65.24494934]
[-108.35247803 64.78302765]
[-95.77678680 72.95934296]
[-85.29083252 83.68523407]
[-77.40106964 96.44264221]
[-72.48856354 110.61540985]
[-70.79058075 125.51899719]
[-72.38914490 140.43357849]
[-77.20703888 154.63877869]
[-85.01156616 167.44851685]
[-95.42576599 178.24409485]
[-107.94665527 186.50407410]
[-121.96947479 191.82952881]
[-136.81694031 193.96324158]
[-151.77194214 192.80213928]
[-166.11215210 188.40231323]
[-179.14494324 180.97627258]
[-190.24087524 170.88269043]
[-198.86399841 158.60906982]
[-204.59783936 144.74821472]
[-207.16543579 129.96960449]
[-206.44279480 114.98702240]
[-202.46482849 100.52411652]
[-195.42364502 87.27943420]
[-185.65933228 75.89266968]
[-173.64350891 66.91381073]
[-159.95651245 60.77651596]
[-145.25944519 57.77721405]
[-130.25761414 58.06135559]
[-142.92912292 50.03435898]
[-155.60064697 42.00736237]
[-168.27215576 33.98036575]
[-180.94366455 25.95336914]
[-193.61518860 17.92637062]
[-206.28669739 9.89937401]
[-218.95822144 1.87237704]
[-231.62973022 -6.15462017]
[-246.47560120 -1.24194515]
[-260.98681641 -7.06935835]
[-268.31161499 -20.88533401]
[-264.99148560 -36.16638947]
[-252.59405518 -45.69727707]
[-236.97302246 -44.97780609]
[-225.50418091 -34.34768677]
[-223.60273743 -18.82613564]
[-210.93122864 -10.79913902]
[-198.25970459 -2.77214193]
[-185.58819580 5.25485516]
[-172.91667175 13.28185272]
[-160.24516296 21.30884933]
[-147.57363892 29.33584595]
[-134.90213013 37.36284256]
[-122.23061371 45.38983917]
[-107.89054871 49.79014206]
[-92.89766693 50.25206757]
[-79.93815613 42.91037369]
[-66.38279724 51.06898117]
[-51.38991547 51.53090668]
[-36.39702988 51.99283218]
[-21.40414429 52.45475769]
[-33.74718475 43.93130112]
[-42.26014709 31.58101845]
[-45.83391571 17.01296616]
[-44.00288010 2.12514138]
[-37.00560379 -11.14279366]
[-25.75372124 -21.06222534]
[-11.71318531 -26.34080124]
[3.28673172 -26.29080200]
[17.29176521 -20.91874123]
[28.47726822 -10.92451763]
[35.38594055 2.38977027]
[37.11768341 17.28947067]
[33.44687271 31.83337593]
[24.85176849 44.12663269]
[12.45217800 52.56761169]
[-2.13615108 56.05657196]
[12.01116562 61.04189301]
[26.15848160 66.02721405]
[40.30579758 71.01253510]
[54.45311356 75.99785614]
[71.18585205 57.33425140]
[94.74880981 48.78431320]
[119.55654144 52.37476349]
[139.72850037 67.25450134]
[150.48304749 89.89636993]
[165.46328735 89.12670898]
[180.44352722 88.35704803]
[195.42376709 87.58739471]
[210.38505554 86.51032257]
[225.32106018 85.12629700]
[240.25708008 83.74227142]
[248.23596191 70.56488037]
[262.28002930 64.68121338]
[276.92248535 68.15429688]
[286.59634399 79.44830322]
[301.53234863 78.06427765]
[316.46838379 76.68025208]
[331.40438843 75.29622650]
[346.34039307 73.91220093]
[359.40542603 64.00073242]
[374.41452026 70.60818481]
[375.92764282 86.93737030]
[362.38821411 96.19023132]
[347.72442627 88.84821320]
[332.78842163 90.23223877]
[317.85238647 91.61626434]
[302.91638184 93.00028992]
[287.98037720 94.38431549]
[280.54650879 107.26358795]
[266.79153442 113.36808777]
[251.90547180 110.16518402]
[241.64109802 98.67828369]
[226.70509338 100.06230927]
[211.76907349 101.44633484]
[208.04957581 104.53089905]
[202.33638000 105.27072144]
[196.19343567 102.56763458]
[181.21319580 103.33729553]
[166.23295593 104.10695648]
[151.25271606 104.87660980]
[150.13035583 111.72896576]
[148.09614563 118.36797333]
[145.18707275 124.67286682]
[141.45603943 130.52896118]
[136.97094727 135.82974243]
[131.81333923 140.47879028]
[126.07706451 144.39152527]
[119.86644745 147.49679565]
[113.29446411 149.73809814]
[106.48065186 151.07467651]
[99.54896545 151.48220825]
[92.62547302 150.95329285]
[85.83612823 149.49754333]
[79.30442810 147.14143372]
[73.14916992 143.92782593]
[67.48232269 139.91519165]
[62.40697098 135.17649841]
[58.01543045 129.79794312]
[54.38758469 123.87737274]
[51.58942032 117.52247620]
[49.67183685 110.84884644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 71]
[8 70]
[9 69]
[10 68]
[12 66]
[13 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[96 131]
[97 130]
[98 129]
[99 128]
[100 125]
[101 124]
[102 123]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
