%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUCCGAGCxxxxxxxxxxACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.15098572 281.81649780]
[131.52700806 266.82949829]
[130.90303040 251.84248352]
[130.27905273 236.85545349]
[129.65507507 221.86843872]
[129.03109741 206.88142395]
[128.40711975 191.89440918]
[127.78314209 176.90739441]
[123.92598724 162.41180420]
[117.01898193 149.09664917]
[110.11198425 135.78149414]
[103.20498657 122.46633148]
[84.85301208 120.04235077]
[72.69907379 103.70134735]
[59.76101685 111.29125977]
[46.82295990 118.88116455]
[33.88490677 126.47107697]
[28.01893425 133.55924988]
[20.59779358 134.08108521]
[11.57884312 150.10102844]
[-5.92178679 149.24784851]
[-18.85984230 156.83775330]
[-31.79789925 164.42765808]
[-42.40032578 177.65736389]
[-58.04804611 171.13162231]
[-56.10905838 154.28892517]
[-39.38780594 151.48960876]
[-26.44975090 143.89970398]
[-13.51169491 136.30978394]
[-10.13741684 124.65125275]
[0.63471234 118.23406982]
[13.27868748 120.98793030]
[26.29499626 113.53302002]
[39.23305130 105.94310760]
[52.17110825 98.35320282]
[65.10916138 90.76329041]
[71.87728119 77.37700653]
[70.31970215 62.45809555]
[68.76211548 47.53918457]
[67.20453644 32.62027359]
[49.56080627 27.91668320]
[35.63665009 15.02846241]
[29.10881233 -3.54472351]
[32.11429596 -23.72279930]
[44.61390686 -40.73994827]
[34.17409515 -51.51075745]
[23.73428154 -62.28156281]
[13.29446888 -73.05237579]
[2.85465622 -83.82318115]
[-7.58515644 -94.59398651]
[-18.02496910 -105.36479950]
[-32.68857574 -100.97877502]
[-47.70861816 -103.92104340]
[-59.63359833 -113.51549530]
[-65.72324371 -127.55738831]
[-64.57819366 -142.82000732]
[-56.46158218 -155.79611206]
[-43.23853683 -163.50387573]
[-27.94762421 -164.17213440]
[-14.10258102 -157.64730835]
[-4.88489676 -145.42875671]
[-2.41272759 -130.32421875]
[-7.25416040 -115.80461121]
[3.18565226 -105.03380585]
[13.62546444 -94.26299286]
[24.06527710 -83.49218750]
[34.50508881 -72.72137451]
[44.94490051 -61.95056915]
[55.38471603 -51.17975998]
[62.88430786 -51.25777817]
[58.88631058 -65.71516418]
[54.88831711 -80.17255402]
[50.89031982 -94.62993622]
[41.64737320 -106.44382477]
[39.11517334 -121.22854614]
[43.89987946 -135.44496155]
[54.85612869 -145.68998718]
[69.36125183 -149.51118469]
[83.94303131 -145.99385071]
[95.11091614 -135.97994995]
[100.19157410 -121.86658478]
[97.96878815 -107.03218842]
[88.97258759 -95.02610779]
[85.27622223 -80.48867798]
[81.57986450 -65.95124817]
[77.88349915 -51.41381454]
[85.38309479 -51.49183273]
[95.59657288 -62.47749710]
[91.00737000 -77.13474274]
[94.37728119 -92.11937714]
[104.79981995 -103.40061188]
[119.47137451 -107.94384766]
[134.44537354 -104.52698517]
[145.69387817 -94.06913757]
[150.19110107 -79.38340759]
[146.72732544 -64.42019653]
[136.23426819 -53.20452118]
[121.53451538 -48.75334930]
[106.58223724 -52.26401901]
[96.36875916 -41.27835464]
[106.95243073 -28.81579399]
[112.10756683 -13.78392696]
[111.43764496 1.63393021]
[105.36801147 15.32221127]
[95.04232025 25.52337456]
[82.12345123 31.06269073]
[83.68103027 45.98160553]
[85.23860931 60.90051651]
[86.79618835 75.81942749]
[97.42347717 73.26702881]
[107.92241669 75.06532288]
[116.62795258 80.70778656]
[122.24694824 89.09634399]
[124.04893494 98.74858856]
[121.95576477 108.05764008]
[116.52014160 115.55933380]
[123.42713928 128.87449646]
[130.33413696 142.18965149]
[137.24113464 155.50480652]
[138.24134827 140.53817749]
[143.17021179 126.37110138]
[151.67561340 114.01560211]
[163.14993286 104.35435486]
[176.77349854 98.07752991]
[191.57305908 95.63352203]
[206.49136353 97.19693756]
[220.46267700 102.65608215]
[232.48893738 111.62097168]
[241.71098328 123.45117188]
[247.47004700 137.30155945]
[249.35470581 152.18269348]
[247.23031616 167.03149414]
[241.24862671 180.78720093]
[231.83699036 192.46713257]
[219.66770935 201.23690796]
[205.61016846 206.47003174]
[190.66859436 207.79264832]
[175.91038513 205.11029053]
[162.38981628 198.61457825]
[151.07278442 188.76953125]
[142.77015686 176.28341675]
[143.39413452 191.27043152]
[144.01811218 206.25744629]
[144.64208984 221.24446106]
[145.26606750 236.23147583]
[145.89004517 251.21850586]
[146.51402283 266.20550537]
[147.13800049 281.19253540]
[153.83799744 296.76644897]
[140.72746277 307.51586914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 119]
[10 118]
[11 117]
[12 116]
[14 36]
[15 35]
[16 34]
[17 33]
[19 32]
[21 29]
[22 28]
[23 27]
[37 109]
[38 108]
[39 107]
[40 106]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[87 100]
[88 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
