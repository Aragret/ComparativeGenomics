%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGxxxxxxxxxxCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.30699158 416.46520996]
[131.30699158 401.46520996]
[131.30699158 386.46520996]
[131.30699158 371.46520996]
[131.30699158 356.46520996]
[131.30699158 341.46520996]
[131.30699158 326.46520996]
[131.30699158 311.46520996]
[131.30699158 296.46520996]
[131.30699158 281.46520996]
[128.97589111 266.64746094]
[124.37033081 252.37199402]
[119.76476288 238.09652710]
[115.15920258 223.82107544]
[110.55363464 209.54560852]
[103.36598206 222.71138000]
[89.46187592 228.33950806]
[75.13999939 223.88035583]
[66.88831329 211.35400391]
[68.44490814 196.43498230]
[79.10462952 185.88177490]
[94.03852081 184.47508240]
[106.48162842 192.85246277]
[103.99650574 178.05975342]
[101.51139069 163.26704407]
[98.80266571 160.91539001]
[97.12924194 157.10733032]
[97.17559052 152.35862732]
[99.36285400 147.47645569]
[97.80526733 132.55755615]
[96.24768829 117.63863373]
[85.05192566 107.65591431]
[70.05273438 107.81195068]
[55.05354691 107.96798706]
[40.05435944 108.12402344]
[26.22143173 116.93209839]
[11.80392647 109.11752319]
[11.63333511 92.71926117]
[25.88514709 84.60643768]
[39.89832306 93.12483215]
[54.89751053 92.96879578]
[69.89669800 92.81275940]
[84.89588928 92.65672302]
[96.09165192 82.67399597]
[97.95926666 67.79071808]
[99.82688141 52.90743637]
[101.69448853 38.02415466]
[103.56210327 23.14087677]
[105.42971802 8.25759602]
[107.29733276 -6.62568378]
[109.16494751 -21.50896454]
[94.56860352 -25.03414536]
[80.45874786 -30.17146301]
[67.01283264 -36.85631180]
[54.39993286 -45.00461578]
[42.77868652 -54.51390839]
[32.29523849 -65.26459503]
[23.08142853 -77.12148285]
[15.25313091 -89.93544769]
[8.90879345 -103.54534912]
[4.12820339 -117.78002930]
[0.97148216 -132.46046448]
[-0.52167130 -147.40202332]
[-0.33247906 -162.41682434]
[1.53667963 -177.31602478]
[5.06229830 -191.91226196]
[10.20003796 -206.02197266]
[16.88528633 -219.46768188]
[25.03396988 -232.08033752]
[34.54360962 -243.70129395]
[45.29461288 -254.18443298]
[57.15177155 -263.39788818]
[69.96597290 -271.22579956]
[83.57606506 -277.56973267]
[97.81088257 -282.34988403]
[112.49140930 -285.50616455]
[127.43302155 -286.99887085]
[142.44781494 -286.80923462]
[157.34696960 -284.93963623]
[171.94309998 -281.41357422]
[186.05264282 -276.27542114]
[199.49816895 -269.58978271]
[212.11056519 -261.44070435]
[223.73124695 -251.93072510]
[234.21405029 -241.17939758]
[243.42715454 -229.32197571]
[251.25468445 -216.50753784]
[257.59820557 -202.89724731]
[262.37796021 -188.66229248]
[265.53378296 -173.98167419]
[267.02606201 -159.04000854]
[266.83596802 -144.02522278]
[264.96591187 -129.12612915]
[261.43942261 -114.53011322]
[256.30084229 -100.42071533]
[249.61477661 -86.97539520]
[241.46534729 -74.36322784]
[231.95501709 -62.74283600]
[221.20338440 -52.26035309]
[209.34567261 -43.04760742]
[196.53100586 -35.22045898]
[182.92053223 -28.87734032]
[168.68542480 -24.09802818]
[154.00471497 -20.94262505]
[139.06300354 -19.45081139]
[124.04822540 -19.64134979]
[122.18061066 -4.75807047]
[120.31299591 10.12520981]
[118.44538116 25.00848961]
[116.57777405 39.89176941]
[114.71015930 54.77504730]
[112.84254456 69.65833282]
[110.97492981 84.54161072]
[119.26774597 100.10047150]
[111.16660309 116.08105469]
[112.72418213 130.99996948]
[114.28176117 145.91888428]
[116.30410004 160.78192139]
[118.78921509 175.57463074]
[121.27433777 190.36734009]
[124.82909393 204.94004822]
[129.43466187 219.21549988]
[134.04022217 233.49096680]
[138.64578247 247.76643372]
[143.25135803 262.04190063]
[147.16790771 247.56222534]
[155.96891785 235.41552734]
[168.50827026 227.18360901]
[183.15304565 223.93846130]
[197.99609375 226.10269165]
[211.10449219 233.39445496]
[220.77119446 244.86419678]
[225.73735046 259.01824951]
[225.35626221 274.01339722]
[219.67752075 287.89691162]
[209.44067383 298.86080933]
[195.97880554 305.47729492]
[181.04498291 306.88476562]
[166.58396912 302.89990234]
[154.47895813 294.04165649]
[146.30699158 281.46520996]
[146.30699158 296.46520996]
[146.30699158 311.46520996]
[146.30699158 326.46520996]
[146.30699158 341.46520996]
[146.30699158 356.46520996]
[146.30699158 371.46520996]
[146.30699158 386.46520996]
[146.30699158 401.46520996]
[146.30699158 416.46520996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[14 122]
[15 121]
[23 120]
[24 119]
[25 118]
[29 117]
[30 116]
[31 115]
[32 43]
[33 42]
[34 41]
[35 40]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 107]
[51 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
