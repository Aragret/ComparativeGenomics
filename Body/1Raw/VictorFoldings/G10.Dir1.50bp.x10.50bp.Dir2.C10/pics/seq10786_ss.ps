%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUxxxxxxxxxxACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 256.02615356]
[92.50000000 241.02615356]
[92.50000000 226.02615356]
[92.50000000 211.02615356]
[92.50000000 196.02615356]
[92.50000000 181.02615356]
[92.50000000 166.02615356]
[92.50000000 151.02615356]
[92.50000000 136.02615356]
[92.50000000 121.02615356]
[86.31127167 116.78945160]
[82.07740784 131.17953491]
[67.08329010 131.59963989]
[62.05033112 117.46920013]
[73.93381500 108.31604767]
[67.74508667 104.07934570]
[53.76119614 109.50620270]
[39.77730560 114.93305969]
[25.79341125 120.35991669]
[11.80951977 125.78677368]
[-1.82360220 132.04280090]
[-15.05683994 139.10548401]
[-28.29007721 146.16816711]
[-41.52331543 153.23083496]
[-47.54688263 168.10014343]
[-62.96815109 172.52326965]
[-75.95724487 163.10716248]
[-76.55004120 147.07505798]
[-64.29180145 136.72541809]
[-48.58599472 139.99760437]
[-35.35275650 132.93492126]
[-22.11951828 125.87224579]
[-8.88628006 118.80957031]
[-22.74734879 113.07627106]
[-28.66500473 99.29289246]
[-23.27534485 85.29462433]
[-9.64213085 79.03878784]
[4.48482227 84.08152771]
[11.07503128 97.55628204]
[6.38266420 111.80287933]
[20.36655617 106.37602234]
[34.35044861 100.94916534]
[48.33433914 95.52230835]
[62.31823349 90.09545135]
[63.66709137 75.15622711]
[47.85809326 74.53488159]
[41.05566406 61.28436279]
[28.26998329 53.44048691]
[15.48430443 45.59661102]
[0.71065074 50.72234726]
[-13.88289165 45.10429382]
[-21.40569878 31.39512253]
[-18.30573273 16.06788445]
[-6.04669952 6.35963345]
[9.58305740 6.85430861]
[21.20364571 17.31833839]
[23.32818031 32.81092834]
[36.11386108 40.65480423]
[48.89953995 48.49868011]
[63.79402161 48.55897903]
[71.51097107 62.37054443]
[97.55030823 70.67286682]
[105.39882660 89.66398621]
[115.95223999 79.00445557]
[126.50564575 68.34492493]
[137.05905151 57.68539810]
[137.14982605 42.10882950]
[148.00433350 31.44888878]
[162.85365295 31.63142204]
[173.40705872 20.97189331]
[163.96284485 9.29841900]
[155.86015320 -3.34316206]
[149.19734192 -16.79939270]
[144.05529785 -30.90692902]
[140.49644470 -45.49451447]
[138.56396484 -60.38507462]
[138.28132629 -75.39784241]
[139.65196228 -90.35058594]
[142.65922546 -105.06179047]
[147.26663208 -119.35287476]
[153.41822815 -133.05035400]
[161.03935242 -145.98796082]
[170.03749084 -158.00863647]
[180.30342102 -168.96647644]
[191.71250916 -178.72843933]
[204.12625122 -187.17604065]
[217.39398193 -194.20672607]
[231.35462952 -199.73515320]
[245.83872986 -203.69421387]
[260.67044067 -206.03584290]
[275.66973877 -206.73162842]
[290.65457153 -205.77310181]
[305.44296265 -203.17192078]
[319.85546875 -198.95965576]
[333.71707153 -193.18742371]
[346.85955811 -185.92530823]
[359.12338257 -177.26147461]
[370.35964966 -167.30107117]
[380.43194580 -156.16502380]
[389.21807861 -143.98851013]
[396.61129761 -130.91932678]
[402.52191162 -117.11615753]
[406.87817383 -102.74652863]
[409.62719727 -87.98488617]
[410.73559570 -73.01041412]
[410.18991089 -58.00490189]
[407.99679565 -43.15049744]
[404.18283081 -28.62751579]
[398.79434204 -14.61225605]
[391.89675903 -1.27484965]
[383.57379150 11.22279930]
[373.92645264 22.72897911]
[363.07186890 33.10401917]
[351.14181519 42.22197342]
[338.28112793 49.97215652]
[324.64587402 56.26049042]
[310.40161133 61.01064301]
[295.72122192 64.16494751]
[280.78292847 65.68511963]
[265.76809692 65.55269623]
[250.85894775 63.76929092]
[236.23648071 60.35655212]
[222.07820129 55.35590744]
[208.55598450 48.82806015]
[195.83396912 40.85225296]
[184.06658936 31.52530289]
[173.51318359 42.18482971]
[173.84426880 57.03158188]
[163.29347229 67.99219513]
[147.71858215 68.23880768]
[137.16517639 78.89833832]
[126.61176300 89.55786896]
[116.05835724 100.21739197]
[127.80049133 90.88346863]
[142.27052307 86.93144989]
[157.12709045 89.00080109]
[169.96633911 96.75669861]
[178.71078491 108.94417572]
[181.94552612 123.59123230]
[179.14717102 138.32789612]
[170.76850891 150.76968384]
[158.16525269 158.90344238]
[143.37669373 161.41307068]
[128.79568481 157.89250183]
[116.78153992 148.91139221]
[109.27821350 135.92294312]
[107.50000000 121.02615356]
[107.50000000 136.02615356]
[107.50000000 151.02615356]
[107.50000000 166.02615356]
[107.50000000 181.02615356]
[107.50000000 196.02615356]
[107.50000000 211.02615356]
[107.50000000 226.02615356]
[107.50000000 241.02615356]
[107.50000000 256.02615356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[16 44]
[17 43]
[18 42]
[19 41]
[20 40]
[21 33]
[22 32]
[23 31]
[24 30]
[45 61]
[47 59]
[48 58]
[49 57]
[63 133]
[64 132]
[65 131]
[66 130]
[69 127]
[70 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
