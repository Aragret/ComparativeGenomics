%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUxxxxxxxxxxCCUCGGACUCCUGCCUCACUCAUUUACACCAACCACCCAACUAUCUAUAAACCUAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.09965515 252.42286682]
[88.69065094 233.21514893]
[89.00270844 218.21838379]
[89.31476593 203.22163391]
[89.62682343 188.22488403]
[89.93887329 173.22813416]
[90.25093079 158.23138428]
[90.56298828 143.23461914]
[90.87504578 128.23786926]
[91.18710327 113.24111938]
[92.03270721 110.11123657]
[93.31069946 107.21693420]
[78.37638855 108.61923218]
[63.44208145 110.02153778]
[48.50777435 111.42384338]
[33.57346725 112.82614899]
[31.78732109 126.31874847]
[27.20304489 139.12672424]
[20.02873230 150.67698669]
[10.58829784 160.45335388]
[-0.69313991 168.01957703]
[-13.30840588 173.03889465]
[-26.69106674 175.28892517]
[-40.24086761 174.67158508]
[-53.35065079 171.21734619]
[-65.43356323 165.08370972]
[-75.94933319 156.54806519]
[-84.42841339 145.99514771]
[-90.49296570 133.89968872]
[-93.87368011 120.80501556]
[-108.86637115 121.27305603]
[-123.85906982 121.74110413]
[-138.85176086 122.20914459]
[-153.84446716 122.67718506]
[-168.83715820 123.14522552]
[-184.47991943 129.68284607]
[-195.09239197 116.46121216]
[-185.32528687 102.60336304]
[-169.30520630 108.15253448]
[-154.31250000 107.68448639]
[-139.31980896 107.21644592]
[-124.32711029 106.74840546]
[-109.33441925 106.28036499]
[-94.34172058 105.81231689]
[-90.85269928 89.71112823]
[-83.35751343 75.02838898]
[-72.34991455 62.74291611]
[-58.55801010 53.67523193]
[-42.89609146 48.43274689]
[-26.40403748 47.36908340]
[-10.17825508 50.56023026]
[4.70119667 57.79913330]
[17.24250603 68.60913086]
[26.60822105 82.27531433]
[32.17116165 97.89183807]
[47.10547256 96.48953247]
[62.03977966 95.08723450]
[76.97408295 93.68492889]
[91.90839386 92.28262329]
[106.18385315 87.67706299]
[99.60311127 74.18941498]
[94.07415009 60.23759079]
[89.62942505 45.90346909]
[86.29501343 31.27115822]
[84.09048462 16.42653656]
[83.02877045 1.45671678]
[83.11611176 -13.55045223]
[84.35198975 -28.50690079]
[86.72915649 -43.32485580]
[90.23365784 -57.91736221]
[94.84492493 -72.19878387]
[100.53590393 -86.08530426]
[107.27319336 -99.49543762]
[115.01725006 -112.35048676]
[123.72264099 -124.57501221]
[133.33827209 -136.09727478]
[143.80770874 -146.84963989]
[155.06951904 -156.76904297]
[167.05761719 -165.79724121]
[179.70162964 -173.88125610]
[192.92738342 -180.97366333]
[206.65725708 -187.03283691]
[220.81066895 -192.02320862]
[235.30455017 -195.91549683]
[250.05386353 -198.68685913]
[264.97204590 -200.32104492]
[279.97155762 -200.80844116]
[294.96435547 -200.14619446]
[309.86248779 -198.33821106]
[324.57849121 -195.39508057]
[339.02600098 -191.33407593]
[353.12026978 -186.17903137]
[366.77856445 -179.96020508]
[379.92074585 -172.71409607]
[392.46963501 -164.48321533]
[404.35168457 -155.31585693]
[415.49707031 -145.26585388]
[425.84045410 -134.39215088]
[435.32107544 -122.75856781]
[443.88336182 -110.43338013]
[451.47702026 -97.48892212]
[458.05752563 -84.00115204]
[463.58621216 -70.04922485]
[468.03067017 -55.71501923]
[471.36480713 -41.08264542]
[473.56906128 -26.23798180]
[474.63049316 -11.26814175]
[474.54284668 3.73902535]
[473.30670166 18.69544983]
[470.92922974 33.51336288]
[467.42446899 48.10580063]
[462.81292725 62.38713455]
[457.12167358 76.27355194]
[450.38415527 89.68355560]
[442.63983154 102.53845978]
[433.93423462 114.76281738]
[424.31835938 126.28488922]
[413.84872437 137.03706360]
[402.58673096 146.95625305]
[390.59848022 155.98422241]
[377.95428467 164.06800842]
[364.72839355 171.16015625]
[350.99841309 177.21907043]
[336.84490967 182.20916748]
[322.35095215 186.10118103]
[307.60159302 188.87226868]
[292.68338013 190.50616455]
[277.68386841 190.99328613]
[262.69107056 190.33074951]
[247.79298401 188.52247620]
[233.07704163 185.57907104]
[218.62959290 181.51779175]
[204.53541565 176.36248779]
[190.87724304 170.14340210]
[177.73521423 162.89703369]
[165.18644714 154.66592407]
[153.30461121 145.49835205]
[142.15939331 135.44812012]
[131.81622314 124.57421875]
[122.33580780 112.94046021]
[113.77376556 100.61511230]
[106.18385315 113.55316925]
[105.87179565 128.54992676]
[105.55974579 143.54667664]
[105.24768829 158.54342651]
[104.93563080 173.54019165]
[104.62357330 188.53694153]
[104.31151581 203.53369141]
[103.99945831 218.53044128]
[103.68740845 233.52720642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[60 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
