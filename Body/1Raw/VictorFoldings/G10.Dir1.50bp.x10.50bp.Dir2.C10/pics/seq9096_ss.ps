%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAAxxxxxxxxxxCAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.70554352 436.41299438]
[116.70554352 421.41299438]
[116.70554352 406.41299438]
[116.70554352 391.41299438]
[116.70554352 376.41299438]
[116.70554352 361.41299438]
[116.70554352 346.41299438]
[116.70554352 331.41299438]
[116.70554352 316.41299438]
[116.70554352 301.41299438]
[101.66506958 297.81597900]
[87.90774536 290.73361206]
[76.22853088 280.57046509]
[67.30340576 267.90927124]
[61.65025711 253.47753906]
[59.59884262 238.10565186]
[61.27152634 222.67919922]
[66.57601166 208.08789062]
[75.21042633 195.17427063]
[86.68047333 184.68508911]
[100.32776642 177.22804260]
[115.36756897 173.23666382]
[115.05551147 158.23991394]
[114.74345398 143.24316406]
[114.43139648 128.24639893]
[108.53308105 123.61392975]
[90.83811951 109.71650696]
[76.19461823 112.96733093]
[61.55111694 116.21815491]
[53.27581787 129.68273926]
[37.88421631 133.27079773]
[24.50787926 124.85361481]
[21.08274651 109.42493439]
[29.64089012 96.13833618]
[45.10491562 92.87651825]
[58.30028915 101.57465363]
[72.94379425 98.32382965]
[87.58729553 95.07300568]
[98.35810089 84.63319397]
[102.06426239 70.09825897]
[90.87770081 61.40505219]
[83.88114929 49.13592529]
[82.10674286 35.16772079]
[85.79065704 21.62269402]
[94.34228516 10.54604721]
[106.43866730 3.59713292]
[120.22904205 1.80091083]
[124.23677826 -12.65377808]
[128.24452209 -27.10846519]
[132.25225830 -41.56315613]
[117.79174805 -60.31631851]
[120.66213989 -83.59009552]
[138.88348389 -97.98167419]
[138.25950623 -112.96868896]
[137.63552856 -127.95570374]
[137.01155090 -142.94271851]
[136.38757324 -157.92973328]
[128.08290100 -171.39610291]
[135.28407288 -184.43421936]
[134.66009521 -199.42123413]
[119.81436157 -201.93083191]
[105.81497192 -207.47254944]
[93.27390289 -215.80413818]
[82.73941040 -226.56137085]
[74.67200470 -239.27398682]
[69.42436218 -253.38626099]
[67.22589111 -268.28125000]
[68.17269897 -283.30780029]
[72.22338867 -297.80902100]
[79.20088959 -311.15100098]
[88.80017090 -322.75045776]
[100.60159302 -332.10031128]
[114.08924866 -338.79187012]
[128.67352295 -342.53256226]
[143.71682739 -343.15890503]
[158.56156921 -340.64346313]
[172.55877686 -335.09622192]
[185.09657288 -326.75970459]
[195.62683105 -315.99832153]
[203.68923950 -303.28253174]
[208.93132019 -289.16821289]
[211.12393188 -274.27236938]
[210.17121887 -259.24618530]
[206.11482239 -244.74655151]
[199.13206482 -231.40733337]
[189.52822876 -219.81164551]
[177.72312927 -210.46641541]
[164.23284912 -203.78016663]
[149.64710999 -200.04521179]
[150.27108765 -185.05819702]
[158.53112793 -172.66380310]
[151.37458801 -158.55371094]
[151.99856567 -143.56669617]
[152.62254333 -128.57968140]
[153.24652100 -113.59266663]
[153.87049866 -98.60564423]
[162.98600769 -95.07957458]
[170.51165771 -88.84336853]
[183.89794922 -95.61148071]
[197.28422546 -102.37960052]
[208.69122314 -114.92220306]
[223.90142822 -107.43314362]
[220.91563416 -90.74417877]
[204.05233765 -88.99330902]
[190.66606140 -82.22519684]
[177.27976990 -75.45708466]
[178.11781311 -68.59920502]
[177.38584900 -61.70320892]
[175.11000061 -55.12521744]
[171.39637756 -49.20755386]
[166.42622375 -44.26094437]
[160.44709778 -40.54819489]
[153.76055908 -38.27027130]
[146.70695496 -37.55541611]
[142.69920349 -23.10072517]
[138.69146729 -8.64603710]
[134.68373108 5.80865097]
[146.88740540 16.07854462]
[153.42860413 30.68909454]
[152.95716858 46.74821472]
[145.51658630 61.05289841]
[132.54536438 70.72807312]
[116.59919739 73.80442047]
[112.89303589 88.33935547]
[129.42814636 127.93434906]
[129.74020386 142.93110657]
[130.05226135 157.92785645]
[130.36431885 172.92460632]
[144.61885071 175.96449280]
[157.82679749 182.10964966]
[169.32160950 191.04624939]
[178.52401733 202.31967163]
[184.97122192 215.35765076]
[188.34017944 229.49931335]
[188.46377563 244.02867126]
[185.33912659 258.21087646]
[179.12754822 271.32943726]
[170.14622498 282.72229004]
[158.85203552 291.81536865]
[145.81825256 298.15142822]
[131.70555115 301.41299438]
[131.70555115 316.41299438]
[131.70555115 331.41299438]
[131.70555115 346.41299438]
[131.70555115 361.41299438]
[131.70555115 376.41299438]
[131.70555115 391.41299438]
[131.70555115 406.41299438]
[131.70555115 421.41299438]
[131.70555115 436.41299438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
[25 125]
[27 38]
[28 37]
[29 36]
[39 124]
[40 123]
[47 117]
[48 116]
[49 115]
[50 114]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[59 90]
[60 89]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
