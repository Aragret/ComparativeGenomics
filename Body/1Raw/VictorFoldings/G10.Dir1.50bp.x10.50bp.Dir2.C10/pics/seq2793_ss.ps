%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGxxxxxxxxxxUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.16324615 270.84005737]
[91.16324615 255.84005737]
[91.16324615 240.84005737]
[91.16324615 225.84005737]
[91.16324615 210.84005737]
[91.16324615 195.84005737]
[91.16324615 180.84005737]
[91.16324615 165.84005737]
[91.16324615 150.84005737]
[91.16324615 135.84005737]
[89.83116150 129.08799744]
[89.67729950 122.45609283]
[79.57186127 133.54122925]
[69.46642303 144.62635803]
[71.72650909 160.09976196]
[63.46778107 173.37858582]
[48.58976364 178.19300842]
[34.11739731 172.26977539]
[26.88409424 158.40567017]
[30.30519867 143.14689636]
[42.76536942 133.69818115]
[58.38129425 134.52091980]
[68.48672485 123.43579102]
[78.59216309 112.35065460]
[76.16023254 93.48081207]
[87.85594940 78.47428894]
[84.79755402 63.78939056]
[81.73915863 49.10449219]
[78.68076324 34.41959763]
[75.47176361 19.76687050]
[72.11251068 5.14786339]
[48.14224625 1.80672729]
[27.98620796 -11.48727512]
[15.53602314 -32.10900116]
[13.17036629 -56.02425003]
[-1.33825946 -59.83211136]
[-15.84688473 -63.63996887]
[-30.35551071 -67.44783020]
[-44.86413574 -71.25568390]
[-59.37276077 -75.06354523]
[-73.88138580 -78.87140656]
[-87.39941406 -70.68370056]
[-102.72754669 -74.53388977]
[-110.77187347 -88.13772583]
[-106.75983429 -103.42429352]
[-93.07170868 -111.32434082]
[-77.82841492 -107.15091705]
[-70.07352448 -93.38002777]
[-55.56490326 -89.57217407]
[-41.05627823 -85.76431274]
[-26.54765129 -81.95645142]
[-12.03902626 -78.14859772]
[2.46959925 -74.34073639]
[16.97822571 -70.53287506]
[21.83973312 -79.64942169]
[28.33601761 -87.68334961]
[36.23310852 -94.34530640]
[45.24658585 -99.39534760]
[55.05181503 -102.65160370]
[65.29564667 -103.99678802]
[66.83293915 -118.91780090]
[68.37023163 -133.83882141]
[57.09253693 -147.17301941]
[58.88172150 -164.20623779]
[72.15153503 -174.49287415]
[73.38214874 -189.44230652]
[74.61276245 -204.39175415]
[75.38242340 -219.37199402]
[75.69039917 -234.36882019]
[61.64198685 -240.11395264]
[50.62029648 -250.54884338]
[44.11592484 -264.26223755]
[43.00853729 -279.39956665]
[47.44789505 -293.91357422]
[56.83361435 -305.84136963]
[69.89634705 -313.56985474]
[84.86947632 -316.05377197]
[99.72800446 -312.95721436]
[112.46243286 -304.69897461]
[121.35054016 -292.39590454]
[125.19028473 -277.71185303]
[123.46236420 -262.63278198]
[116.40047455 -249.19796753]
[104.95967865 -239.22436523]
[90.68724060 -234.06085205]
[90.37925720 -219.06401062]
[92.60085297 -216.25122070]
[93.53665161 -212.20228577]
[92.61158752 -207.54934692]
[89.56219482 -203.16113281]
[88.33158112 -188.21170044]
[87.10097504 -173.26226807]
[96.74815369 -164.66667175]
[99.70858765 -151.88917542]
[94.67723846 -139.56576538]
[83.29125214 -132.30152893]
[81.75395966 -117.38050842]
[80.21666718 -102.45949554]
[90.24278259 -98.97171783]
[99.40849304 -93.60131836]
[107.36402893 -86.54974365]
[113.80515289 -78.08267975]
[118.48476410 -68.52001953]
[121.22237396 -58.22375488]
[121.91107941 -47.58432007]
[120.52172852 -37.00575638]
[117.10414886 -26.89037132]
[111.78535461 -17.62344360]
[104.76482391 -9.55854893]
[96.30703735 -3.00406814]
[86.73151398 1.78860474]
[90.09077454 16.40761185]
[94.68222809 22.25831985]
[93.36566162 31.36120033]
[96.42405701 46.04609680]
[99.48245239 60.73099518]
[102.54084778 75.41589355]
[124.25125122 80.98965454]
[136.56181335 105.08252716]
[150.49252319 110.64446259]
[164.42324829 116.20639801]
[179.67300415 111.22400665]
[192.99674988 120.16030884]
[194.17362976 136.16014099]
[182.30085754 146.94979858]
[166.48619080 144.25238037]
[158.86131287 130.13711548]
[144.93058777 124.57518005]
[130.99987793 119.01323700]
[124.79071808 123.21994781]
[134.34953308 134.77973938]
[143.90835571 146.33953857]
[153.46717834 157.89935303]
[166.67871094 165.00254822]
[170.48196411 179.51237488]
[162.45343018 192.18292236]
[147.70904541 194.94027710]
[135.64418030 186.02740479]
[133.94654846 171.12457275]
[126.75517273 157.96083069]
[119.56378937 144.79708862]
[112.37240601 131.63336182]
[106.16324615 135.84005737]
[106.16324615 150.84005737]
[106.16324615 165.84005737]
[106.16324615 180.84005737]
[106.16324615 195.84005737]
[106.16324615 210.84005737]
[106.16324615 225.84005737]
[106.16324615 240.84005737]
[106.16324615 255.84005737]
[106.16324615 270.84005737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 24]
[13 23]
[14 22]
[26 117]
[27 116]
[28 115]
[29 114]
[30 112]
[31 111]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[60 98]
[61 97]
[62 96]
[65 92]
[66 91]
[67 90]
[68 86]
[69 85]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
