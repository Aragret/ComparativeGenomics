%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGxxxxxxxxxxCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.40765381 284.11901855]
[90.40765381 269.11901855]
[90.40765381 254.11903381]
[90.40765381 239.11903381]
[90.40765381 224.11903381]
[90.40765381 209.11903381]
[90.40765381 194.11903381]
[90.40765381 179.11903381]
[90.40765381 164.11903381]
[90.40765381 149.11903381]
[76.28285217 144.07026672]
[66.77449036 155.67161560]
[70.83231354 170.64871216]
[65.28039551 185.13856506]
[52.25354767 193.56951904]
[36.76087189 192.69970703]
[24.75961113 182.86357117]
[20.86450005 167.84332275]
[26.57328415 153.41456604]
[39.69082260 145.12541199]
[55.17315292 146.16325378]
[64.68151093 134.56190491]
[60.32529449 126.57902527]
[57.65199280 118.20153046]
[56.65372467 109.76676941]
[41.67400742 110.54661560]
[33.20305252 114.13754272]
[26.37519073 111.18357086]
[11.38249397 111.65161133]
[-3.61020231 112.11965942]
[-9.32815075 126.23435974]
[-20.29722977 136.79841614]
[-34.61698151 141.98152161]
[-49.80641937 140.88569641]
[-63.23388290 133.70077515]
[-72.57298279 121.67159271]
[-76.20566559 106.88228607]
[-73.50254059 91.89519501]
[-64.93195343 79.30690765]
[-51.97879410 71.29843903]
[-36.88728714 69.25729370]
[-22.27212143 73.53711700]
[-10.66546726 83.39639282]
[-4.07824469 97.12696075]
[10.91445160 96.65892029]
[25.90714836 96.19087219]
[40.89416504 95.56689453]
[55.87387848 94.78705597]
[58.15953064 85.04457855]
[62.56741714 76.06067657]
[51.47610092 65.96202850]
[40.38478470 55.86338043]
[29.29346848 45.76473236]
[13.16513634 42.79674911]
[7.92701149 27.25666809]
[18.96762848 15.13079357]
[34.92934418 18.89318466]
[39.39212036 34.67341614]
[50.48343277 44.77206421]
[61.57474899 54.87071609]
[72.66606140 64.96936798]
[100.92436981 55.57664108]
[128.76750183 66.13673401]
[140.26930237 56.50820923]
[151.77110291 46.87968445]
[163.27290344 37.25115967]
[174.77470398 27.62263107]
[166.39283752 15.16622829]
[159.35896301 1.90190685]
[153.75013733 -12.02500153]
[149.62780762 -26.46190453]
[147.03717041 -41.25062561]
[146.00657654 -56.22912979]
[146.54734802 -71.23330688]
[148.65353394 -86.09875488]
[152.30206299 -100.66261292]
[157.45297241 -114.76530457]
[164.04981995 -128.25230408]
[172.02032471 -140.97586060]
[181.27716064 -152.79655457]
[191.71890259 -163.58486938]
[203.23114014 -173.22261047]
[215.68774414 -181.60417175]
[228.95223999 -188.63772583]
[242.87928772 -194.24621582]
[257.31628418 -198.36819458]
[272.10507202 -200.95848083]
[287.08358765 -201.98870850]
[302.08776855 -201.44757080]
[316.95315552 -199.34103394]
[331.51693726 -195.69213867]
[345.61950684 -190.54089355]
[359.10635376 -183.94371033]
[371.82971191 -175.97290039]
[383.65017700 -166.71577454]
[394.43823242 -156.27377319]
[404.07568359 -144.76130676]
[412.45693970 -132.30448914]
[419.49017334 -119.03982544]
[425.09832764 -105.11264801]
[429.21997070 -90.67554474]
[431.80987549 -75.88669586]
[432.83975220 -60.90814209]
[432.29824829 -45.90399170]
[430.19134521 -31.03864098]
[426.54211426 -16.47496223]
[421.39050293 -2.37252378]
[414.79299927 11.11416149]
[406.82186890 23.83732605]
[397.56448364 35.65756607]
[387.12222290 46.44537735]
[375.60949707 56.08255768]
[363.15249634 64.46351624]
[349.88766479 71.49642944]
[335.96032715 77.10424805]
[321.52313232 81.22550964]
[306.73422241 83.81507874]
[291.75564575 84.84457397]
[276.75149536 84.30271912]
[261.88619995 82.19544983]
[247.32261658 78.54585266]
[233.22030640 73.39392090]
[219.73377991 66.79608917]
[207.01080322 58.82465744]
[195.19079590 49.56696320]
[184.40324402 39.12443542]
[172.90142822 48.75296021]
[161.39962769 58.38148880]
[149.89782715 68.01001740]
[138.39602661 77.63854218]
[142.21679688 84.75231171]
[144.71702576 92.51621246]
[145.78680420 100.68465424]
[145.36193848 108.99365997]
[143.42703247 117.16932678]
[140.01693726 124.93692017]
[135.21653748 132.03004456]
[129.15879822 138.19979858]
[122.02130127 143.22344971]
[114.02098083 146.91235352]
[105.40765381 149.11903381]
[105.40765381 164.11903381]
[105.40765381 179.11903381]
[105.40765381 194.11903381]
[105.40765381 209.11903381]
[105.40765381 224.11903381]
[105.40765381 239.11903381]
[105.40765381 254.11903381]
[105.40765381 269.11901855]
[105.40765381 284.11901855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 22]
[12 21]
[25 48]
[26 47]
[28 46]
[29 45]
[30 44]
[50 61]
[51 60]
[52 59]
[53 58]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
