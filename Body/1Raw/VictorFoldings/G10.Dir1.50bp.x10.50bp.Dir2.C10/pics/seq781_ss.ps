%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUxxxxxxxxxxCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-0.71589273 229.34027100]
[-10.46354485 240.74130249]
[-20.21119690 252.14231873]
[-29.95884895 263.54333496]
[-39.70650101 274.94436646]
[-49.45415497 286.34536743]
[-58.34650421 298.42535400]
[-66.33641815 311.12030029]
[-74.32633209 323.81521606]
[-82.31625366 336.51016235]
[-78.56696320 351.86328125]
[-86.84341431 365.32714844]
[-102.23531342 368.91390991]
[-115.61093903 360.49557495]
[-119.03475952 345.06661987]
[-110.47548676 331.78073120]
[-95.01118469 328.52023315]
[-87.02126312 315.82531738]
[-79.03134918 303.13037109]
[-71.04143524 290.43545532]
[-85.75054169 293.37518311]
[-98.99118042 286.32638550]
[-104.76520538 272.48223877]
[-100.45693207 258.11425781]
[-88.01805115 249.73129272]
[-73.08348846 251.13090515]
[-62.41875458 261.67904663]
[-60.85517502 276.59771729]
[-51.10752106 265.19671631]
[-41.35987091 253.79568481]
[-31.61221695 242.39466858]
[-21.86456490 230.99363708]
[-12.11691380 219.59262085]
[-30.28911972 199.48539734]
[-44.90003204 176.65884399]
[-55.55027390 151.73692322]
[-61.94874191 125.40084076]
[-63.92053604 98.37046051]
[-61.41176224 71.38461304]
[-54.49099731 45.18093491]
[-43.34740448 20.47566795]
[-28.28558731 -2.05589747]
[-39.58459091 -11.92162037]
[-50.88359451 -21.78734398]
[-62.18260193 -31.65306664]
[-73.68440247 -41.28159332]
[-85.38402557 -50.66875458]
[-97.08364868 -60.05591583]
[-108.78327179 -69.44307709]
[-123.37775421 -64.44259644]
[-138.35339355 -68.14848328]
[-148.93153381 -79.37820435]
[-151.73672485 -94.54838562]
[-145.87384033 -108.81828308]
[-133.21369934 -117.63442993]
[-117.79611206 -118.18362427]
[-104.54077911 -110.29061127]
[-97.67742157 -96.47402954]
[-99.39611053 -81.14270020]
[-87.69648743 -71.75553894]
[-75.99686432 -62.36837769]
[-64.29724121 -52.98121643]
[-59.47639847 -52.61381912]
[-54.85256958 -49.17121887]
[-52.31687927 -42.95207214]
[-41.01787186 -33.08634949]
[-29.71886826 -23.22062492]
[-18.41986275 -13.35490227]
[-9.24280548 -22.22359657]
[0.59636182 -30.35150337]
[11.03800488 -37.68936539]
[22.01883698 -44.19270706]
[33.47230530 -49.82210922]
[45.32899094 -54.54345322]
[57.51703262 -58.32812500]
[69.96256256 -61.15318680]
[82.59014130 -63.00151825]
[95.32324219 -63.86191177]
[108.08468628 -63.72915268]
[120.79713440 -62.60404968]
[133.38352966 -60.49341965]
[145.76759338 -57.41005707]
[157.87425232 -53.37264633]
[169.63015747 -48.40565872]
[180.96403503 -42.53919983]
[191.80718994 -35.80882263]
[202.09391785 -28.25532532]
[211.76187134 -19.92448425]
[220.75244141 -10.86679268]
[232.25424194 -20.49531937]
[243.75604248 -30.12384605]
[241.02749634 -45.23842621]
[246.23687744 -59.68688202]
[257.98291016 -69.58264923]
[273.10598755 -72.26381683]
[287.53802490 -67.00916290]
[297.39694214 -55.23216248]
[300.03067017 -40.10077667]
[294.73080444 -25.68526268]
[282.92297363 -15.86332607]
[267.78341675 -13.27701759]
[253.38458252 -18.62204170]
[241.88276672 -8.99351501]
[230.38096619 0.63501078]
[236.11155701 8.64223099]
[241.35105896 16.97906685]
[246.08058167 25.61543846]
[250.28303528 34.52018738]
[253.94328308 43.66118240]
[257.04812622 53.00544739]
[259.58630371 62.51926804]
[261.54873657 72.16831207]
[262.92831421 81.91777802]
[263.72003174 91.73248291]
[263.92105103 101.57701874]
[263.53067017 111.41585541]
[262.55026245 121.21351624]
[260.98336792 130.93463135]
[258.83566284 140.54414368]
[256.11489868 150.00735474]
[252.83087158 159.29016113]
[248.99543762 168.35903931]
[244.62242126 177.18128967]
[239.72763062 185.72506714]
[234.32868958 193.95956421]
[228.44511414 201.85504150]
[222.09811401 209.38304138]
[215.31057739 216.51638794]
[208.10700989 223.22935486]
[200.51339722 229.49771118]
[192.55712891 235.29884338]
[184.26692200 240.61181641]
[175.67269897 245.41748047]
[166.80543518 249.69847107]
[157.69714355 253.43936157]
[148.38067627 256.62664795]
[138.88966370 259.24884033]
[129.25833130 261.29644775]
[119.52144623 262.76211548]
[109.71412659 263.64056396]
[99.87174988 263.92858887]
[90.02984619 263.62515259]
[80.22390747 262.73138428]
[70.48931885 261.25048828]
[60.86120987 259.18780518]
[51.37430954 256.55075073]
[42.06284714 253.34889221]
[32.96041870 249.59376526]
[24.09986877 245.29888916]
[15.51316357 240.47979736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 29]
[6 28]
[7 20]
[8 19]
[9 18]
[10 17]
[42 68]
[43 67]
[44 66]
[45 65]
[46 62]
[47 61]
[48 60]
[49 59]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
