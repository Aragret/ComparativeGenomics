%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUxxxxxxxxxxAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCAAAUCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.11688995 461.80584717]
[85.11688995 446.80584717]
[85.11688995 431.80584717]
[85.11688995 416.80584717]
[85.11688995 401.80584717]
[85.11688995 386.80584717]
[85.11688995 371.80584717]
[85.11688995 356.80584717]
[85.11688995 341.80584717]
[85.11688995 326.80584717]
[70.38708496 324.07217407]
[56.40670776 318.67691040]
[43.65242767 310.80242920]
[32.55938339 300.71563721]
[23.50635338 288.75900269]
[16.80282593 275.33883667]
[12.67841434 260.91152954]
[11.27499199 245.96804810]
[12.64181423 231.01716614]
[16.73378944 216.56819153]
[23.41297150 203.11363220]
[32.45319748 191.11235046]
[43.54775620 180.97395325]
[56.31978989 173.04479980]
[70.33509827 167.59619141]
[85.11688995 164.81503296]
[81.95614624 158.09220886]
[85.26609039 149.52307129]
[85.55876923 134.52592468]
[85.85144806 119.52878571]
[80.15672302 99.93377686]
[90.94866180 87.32958221]
[88.61660004 72.51197815]
[86.28453827 57.69436646]
[83.95247650 42.87675858]
[81.62041473 28.05915260]
[67.96180725 20.93533897]
[61.19601059 7.29432106]
[63.72990036 -7.53953886]
[74.38514709 -17.91275787]
[72.05308533 -32.73036575]
[69.72102356 -47.54797363]
[66.09851074 -62.10398102]
[61.21345139 -76.28623199]
[56.32838821 -90.46848297]
[51.44332886 -104.65072632]
[42.43819809 -116.64688110]
[30.18364906 -125.29708099]
[17.92910004 -133.94728088]
[5.07560444 -132.53199768]
[-4.96255541 -140.03053284]
[-7.10860348 -151.96734619]
[-19.19203758 -160.85501099]
[-31.27547264 -169.74267578]
[-47.62530518 -171.01353455]
[-54.45455551 -185.92303467]
[-44.73788071 -199.13357544]
[-28.47095871 -197.05526733]
[-22.38780785 -181.82611084]
[-10.30437279 -172.93844604]
[1.77906239 -164.05078125]
[19.27972031 -163.08190918]
[26.57930565 -146.20182800]
[38.83385468 -137.55163574]
[51.08840179 -128.90142822]
[57.90787506 -132.02308655]
[47.75547409 -143.06521606]
[55.11992264 -156.13291931]
[69.82378387 -153.16703796]
[71.54682159 -138.26641846]
[78.36629486 -141.38807678]
[79.82745361 -156.31674194]
[65.75232697 -161.77507019]
[53.67247391 -170.82934570]
[44.48430634 -182.80766296]
[38.86964035 -196.82116699]
[37.24512482 -211.82994080]
[39.73131180 -226.72026062]
[46.14370346 -240.38714600]
[56.00646210 -251.81642151]
[68.58770752 -260.15997314]
[82.95381927 -264.79867554]
[98.03874207 -265.38824463]
[112.72307587 -261.88497925]
[125.91714478 -254.54882812]
[136.64186096 -243.92417908]
[144.10137939 -230.79946899]
[147.74215698 -216.14862061]
[147.29400635 -201.05882263]
[142.79020691 -186.64985657]
[134.56497192 -173.99095154]
[123.22864532 -164.02148438]
[109.62246704 -157.48124695]
[94.75611877 -154.85559082]
[93.29496002 -139.92692566]
[88.32612610 -122.66809845]
[77.63505554 -112.14934540]
[65.62557983 -109.53578949]
[70.51063538 -95.35353851]
[75.39569855 -81.17128754]
[80.28076172 -66.98904419]
[85.69135284 -80.97923279]
[97.72414398 -89.93534088]
[112.67862701 -91.10305023]
[125.95575714 -84.12323761]
[133.47235107 -71.14245605]
[132.91679382 -56.15274429]
[124.45992279 -43.76398468]
[110.70254517 -37.78615189]
[95.87553406 -40.05764771]
[84.53863525 -49.88003540]
[86.87069702 -35.06242752]
[89.20275879 -20.24481964]
[102.52915192 -13.64593792]
[109.49692535 -0.30749223]
[107.24818420 14.75227356]
[96.43801880 25.72709084]
[98.77008057 40.54470062]
[101.10214233 55.36230469]
[103.43420410 70.17991638]
[105.76626587 84.99752045]
[116.00456238 95.96006012]
[130.62847900 99.29787445]
[145.25239563 102.63568878]
[160.75495911 97.28754425]
[172.95878601 108.24192810]
[169.30963135 124.22991180]
[153.56143188 128.80442810]
[141.91458130 117.25960541]
[127.29066467 113.92179108]
[112.66674805 110.58397675]
[100.84858704 119.82146454]
[100.55591583 134.81860352]
[100.26323700 149.81575012]
[100.11688995 164.81503296]
[114.89868927 167.59619141]
[128.91400146 173.04479980]
[141.68603516 180.97395325]
[152.78059387 191.11235046]
[161.82081604 203.11363220]
[168.50000000 216.56819153]
[172.59196472 231.01716614]
[173.95878601 245.96804810]
[172.55537415 260.91152954]
[168.43095398 275.33883667]
[161.72743225 288.75900269]
[152.67440796 300.71563721]
[141.58135986 310.80242920]
[128.82707214 318.67691040]
[114.84670258 324.07217407]
[100.11688995 326.80584717]
[100.11688995 341.80584717]
[100.11688995 356.80584717]
[100.11688995 371.80584717]
[100.11688995 386.80584717]
[100.11688995 401.80584717]
[100.11688995 416.80584717]
[100.11688995 431.80584717]
[100.11688995 446.80584717]
[100.11688995 461.80584717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[5 156]
[6 155]
[7 154]
[8 153]
[9 152]
[10 151]
[26 135]
[28 134]
[29 133]
[30 132]
[32 121]
[33 120]
[34 119]
[35 118]
[36 117]
[40 113]
[41 112]
[42 111]
[43 101]
[44 100]
[45 99]
[46 98]
[47 65]
[48 64]
[49 63]
[52 61]
[53 60]
[54 59]
[71 95]
[72 94]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
