%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAxxxxxxxxxxACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[61.10142136 214.31617737]
[55.39675903 228.18905640]
[49.69209671 242.06193542]
[43.98743439 255.93481445]
[45.89498520 271.64062500]
[33.89875793 280.46896362]
[28.19409370 294.34182739]
[30.91142082 310.51428223]
[18.09380531 320.74368286]
[2.92691040 314.50692749]
[1.01313829 298.21981812]
[14.32121277 288.63717651]
[20.02587700 274.76428223]
[17.71028709 260.05078125]
[30.11455154 250.23016357]
[35.81921387 236.35726929]
[41.52388000 222.48439026]
[47.22854233 208.61151123]
[12.15224552 182.84962463]
[-11.51315594 146.32606506]
[-20.69366837 103.78502655]
[-35.68655396 103.32309723]
[-50.67943954 102.86117554]
[-64.71133423 110.16983032]
[-77.19430542 102.04425812]
[-91.22620392 109.35291290]
[-103.70916748 101.22734833]
[-118.70204926 100.76541901]
[-133.69493103 100.30349731]
[-148.68782043 99.84156799]
[-154.02326965 114.01237488]
[-163.67280579 125.68135834]
[-176.58970642 133.58276367]
[-191.37286377 136.85949707]
[-206.41871643 135.15612793]
[-220.09516907 128.65742493]
[-230.91873169 118.06830597]
[-237.71533203 104.53742218]
[-239.74772644 89.53248596]
[-236.79547119 74.68112183]
[-229.17878723 61.59430695]
[-217.72387695 51.69158554]
[-203.67329407 46.04714203]
[-188.55113220 45.27323532]
[-173.99772644 49.45381927]
[-161.59173584 58.13541412]
[-152.67886353 70.37629700]
[-148.22589111 84.84868622]
[-133.23301697 85.31060791]
[-118.24012756 85.77253723]
[-103.24723816 86.23445892]
[-90.28773499 78.89276886]
[-76.73237610 87.05137634]
[-63.77286911 79.70967865]
[-50.21751404 87.86828613]
[-35.22462845 88.33021545]
[-20.23174286 88.79213715]
[-19.26704788 81.11457062]
[-17.81260300 73.51455688]
[-15.87437916 66.02330017]
[-13.46033669 58.67155838]
[-10.58038712 51.48952866]
[-7.24635839 44.50669861]
[-3.47193956 37.75173950]
[0.72736984 31.25239754]
[5.33432627 25.03535271]
[10.33001137 19.12614059]
[15.69391155 13.54902267]
[21.40400124 8.32690144]
[27.43683243 3.48122072]
[33.76763153 -0.96812141]
[40.37040329 -5.00285435]
[47.21803665 -8.60641003]
[54.28240967 -11.76399136]
[61.53451157 -14.46263313]
[68.94456482 -16.69125175]
[76.48214722 -18.44069672]
[84.11630249 -19.70378494]
[91.81567383 -20.47532845]
[99.54866028 -20.75216103]
[107.28350067 -20.53314400]
[114.98842621 -19.81917763]
[122.63180542 -18.61319160]
[130.18225098 -16.92014122]
[137.60876465 -14.74697876]
[144.88084412 -12.10262489]
[151.96861267 -8.99794102]
[158.84298706 -5.44567394]
[165.47573853 -1.46041191]
[171.83963013 2.94148064]
[177.90850830 7.74192810]
[183.65748596 12.92121792]
[189.06292725 18.45808411]
[194.10264587 24.32978630]
[198.75593567 30.51221848]
[203.00372314 36.97998810]
[206.82852173 43.70653915]
[210.21466064 50.66425323]
[213.14822388 57.82455444]
[215.61715698 65.15804291]
[217.61132812 72.63460541]
[219.12254333 80.22353363]
[220.14460754 87.89367676]
[220.67330933 95.61353302]
[220.70648193 103.35139465]
[220.24400330 111.07550049]
[235.06648254 113.37637329]
[249.88897705 115.67725372]
[258.91232300 113.89534760]
[264.99090576 118.18054199]
[279.76300049 120.78526306]
[294.53512573 123.38999176]
[303.01602173 110.74109650]
[315.91189575 102.64073944]
[330.98852539 100.49235535]
[345.63375854 104.66816711]
[357.31021118 114.44468689]
[363.99487305 128.12808228]
[364.52960205 143.34759521]
[358.82174683 157.46638489]
[347.86019897 168.03828430]
[333.54415894 173.23161316]
[318.35394287 172.14663696]
[304.92135620 164.97131348]
[295.57366943 152.94880676]
[291.93041992 138.16210938]
[277.15829468 135.55738831]
[262.38616943 132.95266724]
[247.58810425 130.49972534]
[232.76560974 128.19885254]
[217.94313049 125.89797974]
[215.73471069 134.44947815]
[212.90713501 142.81666565]
[209.47555542 150.95480347]
[205.45829773 158.82035828]
[200.87689209 166.37123108]
[195.75582886 173.56704712]
[190.12248230 180.36930847]
[184.00703430 186.74160767]
[177.44216919 192.64987183]
[170.46299744 198.06250000]
[163.10688782 202.95051575]
[155.41317749 207.28778076]
[147.42301941 211.05108643]
[139.17916870 214.22032166]
[130.72572327 216.77850342]
[122.10790253 218.71195984]
[113.37180328 220.01034546]
[104.56417847 220.66671753]
[95.73213959 220.67756653]
[86.92292786 220.04281616]
[78.18367004 218.76588440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[6 13]
[7 12]
[21 57]
[22 56]
[23 55]
[25 53]
[27 51]
[28 50]
[29 49]
[30 48]
[106 131]
[107 130]
[108 129]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
