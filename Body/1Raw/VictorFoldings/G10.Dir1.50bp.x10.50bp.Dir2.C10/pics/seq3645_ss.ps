%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCxxxxxxxxxxUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.31820679 271.25283813]
[95.31820679 256.25283813]
[95.31820679 241.25283813]
[95.31820679 226.25283813]
[95.31820679 211.25283813]
[95.31820679 196.25283813]
[95.31820679 181.25283813]
[95.31820679 166.25283813]
[95.31820679 151.25283813]
[95.31820679 136.25283813]
[92.20975494 129.81140137]
[90.63615417 123.25671387]
[81.12779236 134.85806274]
[71.61943817 146.45939636]
[69.49397278 162.72021484]
[54.24723816 168.75918579]
[41.56376648 158.36392212]
[44.49122238 142.22817993]
[60.01809692 136.95103455]
[69.52645111 125.34970093]
[79.03481293 113.74835968]
[75.23357391 96.10379028]
[84.26874542 80.47862244]
[78.78171539 66.51823425]
[73.29468536 52.55784607]
[67.80765533 38.59745407]
[62.80484390 34.11644745]
[61.11941528 28.60367966]
[62.39606857 23.94045448]
[57.49451828 9.76389599]
[52.59296799 -4.41266155]
[42.96444321 -15.91446495]
[29.87128830 -23.23357010]
[16.77813339 -30.55267715]
[3.68497896 -37.87178040]
[-9.40817547 -45.19088745]
[-22.50132942 -52.50999451]
[-32.68421555 -41.40118790]
[-45.15483093 -32.94065857]
[-59.24064255 -27.58467102]
[-74.18202209 -25.62206268]
[-89.17320251 -27.15867805]
[-103.40573120 -32.11164856]
[-116.11206055 -40.21386719]
[-126.60695648 -51.02838898]
[-134.32443237 -63.97200394]
[-138.84831238 -78.34667969]
[-139.93463135 -93.37720490]
[-137.52478027 -108.25299835]
[-131.74873352 -122.17183685]
[-122.91799164 -134.38308716]
[-111.50878143 -144.22822571]
[-98.13638306 -151.17630005]
[-83.52195740 -154.85261536]
[-68.45364380 -155.05889893]
[-53.74404907 -151.78405762]
[-40.18645096 -145.20468140]
[-28.51199150 -135.67558289]
[-19.35025978 -123.71065521]
[-13.19533539 -109.95516205]
[-10.37914658 -95.15090942]
[-11.05356598 -80.09628296]
[-15.18222427 -65.60314941]
[-2.08906984 -58.28404236]
[11.00408459 -50.96493530]
[24.09723854 -43.64583206]
[37.19039536 -36.32672501]
[50.28354645 -29.00761986]
[42.30218887 -41.70793152]
[34.32083130 -54.40824509]
[22.90077209 -64.13358307]
[16.78781700 -77.83145905]
[17.17593575 -92.82643890]
[23.98932076 -106.18973541]
[35.89719772 -115.31127167]
[50.57375717 -118.40944672]
[65.15240479 -114.87914276]
[76.78567505 -105.40987396]
[83.20139313 -91.85116577]
[83.14645386 -76.85126495]
[76.63200378 -63.34044266]
[74.46517181 -48.49777222]
[72.29833984 -33.65510178]
[81.31586456 -45.64193344]
[90.33339691 -57.62876892]
[99.35092926 -69.61560059]
[108.36845398 -81.60243225]
[104.66241455 -96.79450989]
[111.63500977 -110.79154205]
[125.99400330 -116.98455811]
[140.95950317 -112.44940186]
[149.46527100 -99.32743835]
[147.49514771 -83.81446075]
[135.97933960 -73.23521423]
[120.35528564 -72.58489990]
[111.33776093 -60.59807205]
[102.32022858 -48.61123657]
[93.30269623 -36.62440491]
[84.28517151 -24.63757324]
[81.79150391 -19.66356659]
[78.56064606 -15.57677460]
[74.82208252 -12.47065544]
[70.81345367 -10.38658810]
[66.76952362 -9.31421280]
[71.67107391 4.86234570]
[76.57263184 19.03890419]
[81.76804352 33.11042404]
[87.25507355 47.07081223]
[92.74210358 61.03120422]
[98.22914124 74.99159241]
[121.77162933 78.19623566]
[136.46636963 102.52816010]
[151.17433167 105.47364807]
[165.88229370 108.41912842]
[177.97663879 98.50646210]
[193.61248779 98.73870850]
[205.40708923 109.00620270]
[207.79138184 124.46095276]
[199.63958740 137.80569458]
[184.80070496 142.73944092]
[170.28123474 136.93264771]
[162.93681335 123.12709045]
[148.22885132 120.18161011]
[133.52088928 117.23612213]
[127.72021484 121.99030304]
[139.21553040 131.62658691]
[150.71084595 141.26286316]
[162.20614624 150.89913940]
[176.85633850 154.11968994]
[187.56166077 164.62664795]
[191.05561829 179.21403503]
[186.27210999 193.43086243]
[174.67073059 202.93916321]
[159.79135132 204.83769226]
[146.17411804 198.54716492]
[137.97399902 185.98698425]
[137.69302368 170.98988342]
[130.50164795 157.82614136]
[123.31025696 144.66239929]
[116.11887360 131.49865723]
[110.31820679 136.25283813]
[110.31820679 151.25283813]
[110.31820679 166.25283813]
[110.31820679 181.25283813]
[110.31820679 196.25283813]
[110.31820679 211.25283813]
[110.31820679 226.25283813]
[110.31820679 241.25283813]
[110.31820679 256.25283813]
[110.31820679 271.25283813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 21]
[13 20]
[14 19]
[23 110]
[24 109]
[25 108]
[26 107]
[29 106]
[30 105]
[31 104]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
