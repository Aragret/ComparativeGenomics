%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUxxxxxxxxxxCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[283.11331177 77.11106110]
[268.20886230 78.80145264]
[253.30441284 80.49185181]
[238.39996338 82.18225098]
[223.49551392 83.87265015]
[208.67303467 86.17352295]
[193.95750427 89.08099365]
[179.24198914 91.98846436]
[164.52645874 94.89594269]
[149.81094360 97.80341339]
[135.09541321 100.71088409]
[134.59342957 111.89395142]
[130.48028564 122.79194641]
[122.90278625 132.22892761]
[112.39186859 139.09954834]
[99.83045959 142.49432373]
[86.38075256 141.81085205]
[73.37687683 136.83810425]
[61.40661621 145.87762451]
[49.43635941 154.91714478]
[43.54597092 170.22189331]
[27.30658722 172.50541687]
[17.42389297 159.41860962]
[24.06435585 144.42407227]
[40.39683914 142.94688416]
[52.36709595 133.90736389]
[64.33735657 124.86785126]
[62.43342590 117.61353302]
[47.96457672 113.65722656]
[58.62556839 103.10491180]
[56.72163773 95.85060120]
[41.85503769 93.85453796]
[26.98844147 91.85848236]
[12.12184143 89.86242676]
[-2.74475670 87.86637115]
[-17.61135483 85.87031555]
[-26.92884064 98.08014679]
[-41.10911179 103.98061371]
[-56.33774185 101.98452759]
[-68.51831055 92.62881470]
[-74.37429810 78.43012238]
[-72.33049011 63.20782089]
[-62.93664169 51.05664062]
[-48.71965790 45.24518204]
[-33.50384140 47.33670044]
[-21.38216400 56.76858902]
[-15.61529827 71.00371552]
[-0.74869990 72.99977112]
[14.11789894 74.99582672]
[28.98449707 76.99188232]
[43.85109711 78.98794556]
[58.71769333 80.98400116]
[77.07700348 63.78009796]
[100.42845154 59.72523117]
[120.82878113 68.58844757]
[132.18794250 85.99536133]
[146.90347290 83.08789062]
[161.61898804 80.18041992]
[176.33451843 77.27294159]
[191.05003357 74.36547089]
[205.76556396 71.45800018]
[209.02485657 68.37958527]
[212.72938538 66.70626068]
[216.37004089 66.40229797]
[219.50418091 67.26622009]
[221.80511475 68.96820068]
[236.70956421 67.27780151]
[251.61401367 65.58740234]
[266.51846313 63.89700699]
[281.42291260 62.20661163]
[281.05252075 46.73496246]
[282.07516479 31.29315376]
[284.48248291 16.00635147]
[288.25485229 0.99846178]
[293.36166382 -13.60888004]
[299.76138306 -27.69729233]
[307.40213013 -41.15260315]
[316.22183228 -53.86578369]
[326.14895630 -65.73382568]
[337.10299683 -76.66057587]
[348.99508667 -86.55751801]
[361.72872925 -95.34449005]
[375.20074463 -102.95032501]
[389.30178833 -109.31344604]
[403.91760254 -114.38233948]
[418.92965698 -118.11598969]
[434.21624756 -120.48421478]
[449.65341187 -121.46789551]
[465.11605835 -121.05914307]
[480.47882080 -119.26134491]
[495.61718750 -116.08915710]
[510.40844727 -111.56836700]
[524.73272705 -105.73570251]
[538.47393799 -98.63852692]
[551.52075195 -90.33441925]
[563.76745605 -80.89078522]
[575.11480713 -70.38422394]
[585.47082520 -58.89997101]
[594.75170898 -46.53116608]
[602.88226318 -33.37812424]
[609.79663086 -19.54751015]
[615.43890381 -5.15146828]
[619.76330566 9.69327354]
[634.47882080 6.78580141]
[649.19433594 3.87832904]
[661.23309326 -6.38713980]
[675.21868896 -1.26352489]
[685.30743408 -13.73737717]
[701.34844971 -13.48292732]
[711.03649902 -0.69536656]
[706.93969727 14.81578159]
[692.20074463 21.15169334]
[678.12615967 13.45199776]
[667.14001465 23.50950432]
[652.10180664 18.59385109]
[637.38629150 21.50132370]
[622.67077637 24.40879631]
[624.25823975 38.87491226]
[624.61523438 53.42386246]
[623.73907471 67.95117188]
[621.63610840 82.35251617]
[618.32128906 96.52445984]
[613.81835938 110.36522675]
[608.15960693 123.77539062]
[601.38562012 136.65863037]
[593.54498291 148.92240906]
[584.69390869 160.47862244]
[574.89599609 171.24423218]
[564.22149658 181.14187622]
[552.74700928 190.10046387]
[540.55499268 198.05558777]
[527.73284912 204.95007324]
[514.37268066 210.73435974]
[500.57037354 215.36683655]
[486.42504883 218.81419373]
[472.03829956 221.05158997]
[457.51336670 222.06292725]
[442.95462036 221.84085083]
[428.46655273 220.38690186]
[414.15325928 217.71147156]
[400.11749268 213.83369446]
[386.46011353 208.78135681]
[373.27917480 202.59068298]
[360.66937256 195.30607605]
[348.72131348 186.97979736]
[337.52081299 177.67158508]
[327.14834595 167.44821167]
[317.67846680 156.38308716]
[309.17919922 144.55560303]
[301.71163940 132.05065918]
[295.32946777 118.95804596]
[290.07858276 105.37173462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[18 27]
[19 26]
[20 25]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[103 117]
[104 116]
[105 115]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
