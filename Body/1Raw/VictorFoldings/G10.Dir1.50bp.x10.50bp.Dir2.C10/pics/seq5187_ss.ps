%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUAxxxxxxxxxxUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.58034515 261.92510986]
[123.58034515 246.92510986]
[123.58034515 231.92510986]
[123.58034515 216.92510986]
[123.58034515 201.92510986]
[123.58034515 186.92510986]
[123.58034515 171.92510986]
[123.58034515 156.92510986]
[123.58034515 141.92510986]
[123.58034515 126.92510986]
[116.57395935 124.24917603]
[95.55481720 116.22138977]
[85.55556488 127.40240479]
[89.76861572 142.24336243]
[85.26737213 156.99945068]
[73.48816681 166.96206665]
[58.18970108 168.95219421]
[44.25366211 162.33476257]
[36.12698746 149.22137451]
[36.40287399 133.79647827]
[44.99327850 120.98209381]
[59.15703964 114.86724854]
[74.37455750 117.40316010]
[84.37380219 106.22214508]
[81.13925171 99.45548248]
[74.67015076 85.92216492]
[71.43560791 79.15550232]
[56.45485687 79.91523743]
[41.47410965 80.67498016]
[32.23115540 89.72608948]
[19.69963455 90.01924133]
[10.64376450 81.94400024]
[-4.34930372 82.39997101]
[-19.34237099 82.85593414]
[-28.88251305 95.24624634]
[-44.16604233 98.55497742]
[-57.97654724 91.21985626]
[-63.79312515 76.70429993]
[-58.86936951 61.86211014]
[-45.53012848 53.70131302]
[-30.07377815 56.07519150]
[-19.79833984 67.86286926]
[-4.80527115 67.40689850]
[10.18779755 66.95093536]
[24.55635071 56.91935349]
[40.71437073 65.69422913]
[55.69511795 64.93449402]
[70.67586517 64.17475891]
[83.48528290 56.36970520]
[91.02912140 43.40473557]
[98.57296753 30.43976212]
[104.34830475 16.59615707]
[108.25505829 2.11384749]
[112.16181183 -12.36846161]
[116.06856537 -26.85077095]
[119.97531891 -41.33308029]
[105.99600983 -46.81416321]
[92.70453644 -53.79984665]
[80.26222229 -62.20532608]
[68.82012177 -71.92856598]
[58.51712036 -82.85154724]
[49.47829437 -94.84165955]
[41.81336594 -107.75335693]
[35.61537552 -121.42991638]
[30.95956802 -135.70530701]
[27.90245628 -150.40621948]
[26.48115158 -165.35423279]
[26.71290588 -180.36788940]
[28.59490967 -195.26490784]
[32.10431290 -209.86447144]
[37.19851685 -223.98934937]
[43.81568527 -237.46807861]
[51.87548828 -250.13705444]
[61.28008270 -261.84246826]
[71.91531372 -272.44223022]
[83.65207672 -281.80767822]
[96.34790039 -289.82513428]
[109.84866333 -296.39721680]
[123.99047852 -301.44421387]
[138.60168457 -304.90484619]
[153.50491333 -306.73706055]
[168.51924133 -306.91867065]
[183.46243286 -305.44744873]
[198.15306091 -302.34124756]
[212.41281128 -297.63778687]
[226.06858826 -291.39416504]
[238.95462036 -283.68612671]
[250.91447449 -274.60729980]
[261.80297852 -264.26788330]
[271.48794556 -252.79336548]
[279.85180664 -240.32304382]
[286.79306030 -227.00830078]
[292.22741699 -213.01077271]
[296.08892822 -198.50036621]
[298.33068848 -183.65322876]
[298.92550659 -168.64958191]
[297.86618042 -153.67155457]
[295.16555786 -138.90098572]
[290.85638428 -124.51716614]
[284.99099731 -110.69470215]
[277.64062500 -97.60138702]
[268.89443970 -85.39615631]
[258.85867310 -74.22717285]
[247.65509033 -64.23001862]
[235.41972351 -55.52605057]
[222.30108643 -48.22092438]
[208.45845032 -42.40332413]
[194.05982971 -38.14386368]
[179.28002930 -35.49425125]
[164.29843140 -34.48665237]
[149.29693604 -35.13329315]
[134.45762634 -37.42632675]
[130.55087280 -22.94401932]
[126.64411926 -8.46170998]
[122.73736572 6.02059984]
[118.83061981 20.50290871]
[122.59842682 19.70812035]
[126.38399506 18.99568558]
[130.18595886 18.36589432]
[144.45179749 23.00115013]
[158.71765137 27.63640404]
[173.60736084 21.66347504]
[187.48910522 29.70566368]
[189.71398926 45.59369278]
[178.57527161 57.13962555]
[162.61763000 55.48640823]
[154.08239746 41.90225220]
[139.81654358 37.26699829]
[125.55069733 32.63174438]
[111.53793335 37.98360062]
[103.99409485 50.94857407]
[96.45025635 63.91354370]
[104.45241547 51.22632980]
[116.14894867 41.83531952]
[130.26553345 36.76363754]
[145.26420593 36.56384277]
[159.51087952 41.25770187]
[171.45341492 50.33382034]
[179.79067993 62.80337906]
[183.61436462 77.30784607]
[182.50787354 92.26697540]
[176.59176636 106.05101013]
[166.51058960 117.15820312]
[153.36265564 124.37844849]
[138.58035278 126.92510986]
[138.58035278 141.92510986]
[138.58035278 156.92510986]
[138.58035278 171.92510986]
[138.58035278 186.92510986]
[138.58035278 201.92510986]
[138.58035278 216.92510986]
[138.58035278 231.92510986]
[138.58035278 246.92510986]
[138.58035278 261.92510986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 24]
[13 23]
[27 48]
[28 47]
[29 46]
[32 44]
[33 43]
[34 42]
[49 132]
[50 131]
[51 130]
[52 116]
[53 115]
[54 114]
[55 113]
[56 112]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
