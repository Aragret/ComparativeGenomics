%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCxxxxxxxxxxGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.05967712 548.47698975]
[103.05967712 533.47698975]
[103.05967712 518.47698975]
[103.05967712 503.47698975]
[103.05967712 488.47698975]
[103.05967712 473.47698975]
[103.05967712 458.47698975]
[103.05967712 443.47698975]
[103.05967712 428.47698975]
[103.05967712 413.47698975]
[87.52524567 409.16317749]
[73.80802155 400.66528320]
[63.00928497 388.65646362]
[55.99856186 374.09201050]
[53.34361267 358.13348389]
[55.26447678 342.05606079]
[61.61524200 327.14663696]
[71.89509583 314.60076904]
[85.28782654 305.42687988]
[100.72660828 300.36520386]
[100.11078644 285.37783813]
[85.34192657 282.89257812]
[71.40715027 277.38870239]
[58.91645050 269.10443115]
[48.41715240 258.39993286]
[40.36992264 245.74139404]
[35.12855911 231.68078613]
[32.92444992 216.83187866]
[33.85633850 201.84338379]
[37.88592148 187.37059021]
[44.83940506 174.04676819]
[54.41500854 162.45544434]
[66.19604492 153.10482788]
[79.66906738 146.40554810]
[94.24625397 142.65260315]
[93.63042450 127.66526031]
[93.01460266 112.67790222]
[85.11811829 99.92464447]
[71.97648621 92.69294739]
[58.83485794 85.46124268]
[49.74624634 84.04952240]
[45.49986267 77.94374847]
[32.50948334 70.44374847]
[19.51910210 62.94375229]
[7.22350216 71.92919159]
[-7.66516066 75.13037872]
[-22.56733513 71.99269104]
[-34.90113068 63.05975342]
[-42.52964020 49.87924576]
[-44.13117981 34.73477554]
[-39.42827225 20.25021362]
[-29.23572731 8.93509674]
[-15.31946182 2.74983597]
[-0.09055450 2.76606679]
[13.81249523 8.98097706]
[23.98089981 20.31779480]
[28.65291977 34.81234741]
[27.01910210 49.95336914]
[40.00948334 57.45336914]
[52.99986267 64.95336914]
[66.06655884 72.31961060]
[79.20819092 79.55131531]
[92.34982300 86.78301239]
[94.82682037 87.44477081]
[96.97877502 88.50321960]
[98.74796295 89.88215637]
[106.38093567 76.96945953]
[96.08068085 68.06879425]
[87.42360687 57.56721497]
[80.65477753 45.76373291]
[75.96553802 32.99419022]
[73.48804474 19.62170219]
[73.29160309 6.02633619]
[75.38069916 -7.40569210]
[79.69490814 -20.29299355]
[86.11062622 -32.26983261]
[94.44463348 -42.99650574]
[104.45934296 -52.16897964]
[115.86951447 -59.52750397]
[128.35043335 -64.86396790]
[141.54711914 -68.02779388]
[155.08445740 -68.93016815]
[168.57781982 -67.54656219]
[181.64401245 -63.91736221]
[193.91217041 -58.14672470]
[202.57878113 -70.38967896]
[211.24539185 -82.63262939]
[219.91200256 -94.87558746]
[228.57859802 -107.11853790]
[229.55212402 -123.48876190]
[244.33506775 -130.58784485]
[257.72000122 -121.11283875]
[255.93765259 -104.81083679]
[240.82156372 -98.45193481]
[232.15495300 -86.20897675]
[223.48834229 -73.96602631]
[214.82173157 -61.72307205]
[206.15512085 -49.48011780]
[217.51199341 -37.53856277]
[226.19973755 -23.52890396]
[231.85197449 -8.03800583]
[234.22953796 8.28471851]
[233.23059082 24.75452995]
[228.89498901 40.68009567]
[221.40266418 55.39249802]
[211.06620789 68.27333832]
[198.31779480 78.78072357]
[183.69114685 86.47207642]
[167.79914856 91.02275848]
[151.30818176 92.23979187]
[134.91018677 90.07001495]
[119.29363251 84.60242462]
[111.66065979 97.51512146]
[108.00195312 112.06208038]
[108.61778259 127.04943085]
[109.23360443 142.03678894]
[124.06954193 144.58114624]
[138.04676819 150.15251160]
[150.55522156 158.50506592]
[161.04949951 169.27172852]
[169.07264709 181.98016357]
[174.27600098 196.07357788]
[176.43441772 210.93510437]
[175.45596313 225.91477966]
[171.38580322 240.35798645]
[164.40422058 253.63407898]
[154.81852722 265.16384888]
[143.04957581 274.44491577]
[129.61332703 281.07348633]
[115.09813690 284.76202393]
[115.71396637 299.74935913]
[129.33950806 302.71594238]
[141.84005737 308.87344360]
[152.48130798 317.85482788]
[160.63945007 329.12734985]
[165.83773804 342.02410889]
[167.77439880 355.78350830]
[166.34007263 369.59432983]
[161.62402344 382.64343262]
[153.90856934 394.16366577]
[143.65225220 403.47906494]
[131.46247864 410.04434204]
[118.05967712 413.47698975]
[118.05967712 428.47698975]
[118.05967712 443.47698975]
[118.05967712 458.47698975]
[118.05967712 473.47698975]
[118.05967712 488.47698975]
[118.05967712 503.47698975]
[118.05967712 518.47698975]
[118.05967712 533.47698975]
[118.05967712 548.47698975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[20 131]
[21 130]
[35 116]
[36 115]
[37 114]
[38 63]
[39 62]
[40 61]
[42 60]
[43 59]
[44 58]
[66 113]
[67 112]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
