%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAxxxxxxxxxxAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[27.61167145 304.67703247]
[22.12463951 318.63742065]
[16.63760948 332.59780884]
[18.79052544 348.27185059]
[6.93381405 357.28671265]
[1.44678271 371.24710083]
[-4.04024887 385.20748901]
[-4.20695305 402.16061401]
[-20.54369354 406.69351196]
[-29.42191124 392.25006104]
[-18.00063896 379.72045898]
[-12.51360703 365.76007080]
[-7.02657557 351.79968262]
[-9.57196140 337.12417603]
[2.67721915 327.11077881]
[8.16425037 313.15039062]
[13.65128231 299.19000244]
[1.61222291 293.52673340]
[-10.05733204 287.13668823]
[-21.31355667 280.04382324]
[-32.11417770 272.27478027]
[-42.41862869 263.85873413]
[-52.18821716 254.82733154]
[-61.38624954 245.21443176]
[-69.97817993 235.05618286]
[-77.93173981 224.39071655]
[-85.21706390 213.25808716]
[-91.80678558 201.70010376]
[-97.67616272 189.76017761]
[-102.80314636 177.48315430]
[-107.16847992 164.91513062]
[-110.75578308 152.10331726]
[-113.55156708 139.09582520]
[-115.54534149 125.94149780]
[-116.72961426 112.68975067]
[-117.09993744 99.39034271]
[-116.65492249 86.09322357]
[-115.39624023 72.84833527]
[-113.32862091 59.70541763]
[-110.45982361 46.71382904]
[-106.80062866 33.92235947]
[-102.36477661 21.37905312]
[-97.16891479 9.13101482]
[-91.23257446 -2.77575660]
[-84.57804108 -14.29654503]
[-77.23030853 -25.38808250]
[-69.21697235 -36.00871277]
[-60.56812668 -46.11854935]
[-51.31625366 -55.67962646]
[-41.49609756 -64.65603638]
[-31.14453888 -73.01406097]
[-20.30045509 -80.72231293]
[-9.00457191 -87.75185394]
[2.70068789 -94.07627106]
[14.77136421 -99.67181396]
[27.16212463 -104.51747894]
[39.82643509 -108.59505463]
[52.71672821 -111.88922882]
[65.78459930 -114.38764191]
[78.98097229 -116.08090210]
[78.04534912 -131.05169678]
[77.10971832 -146.02247620]
[76.17408752 -160.99327087]
[75.23846436 -175.96406555]
[74.30283356 -190.93486023]
[59.69692230 -194.92811584]
[47.18041229 -203.44960022]
[38.11099625 -215.57495117]
[33.47246170 -229.98893738]
[33.76795959 -245.12800598]
[38.96543884 -259.35000610]
[48.50111008 -271.11221313]
[61.34062195 -279.13876343]
[76.09123993 -282.55902100]
[91.15291595 -281.00195312]
[104.89189148 -274.63644409]
[115.81784821 -264.15301514]
[122.74562836 -250.68882751]
[124.92375183 -235.70436096]
[122.11595917 -220.82501221]
[114.62681580 -207.66477966]
[103.26869202 -197.65121460]
[89.27362823 -191.87048340]
[90.20925140 -176.89968872]
[91.14488220 -161.92890930]
[92.08051300 -146.95811462]
[93.01613617 -131.98731995]
[93.95176697 -117.01652527]
[111.01207733 -116.82132721]
[128.00436401 -115.28704071]
[144.82371521 -112.42313385]
[161.36622620 -108.24730682]
[177.52973938 -102.78533936]
[193.21441650 -96.07097626]
[208.32341003 -88.14566803]
[222.76339722 -79.05837250]
[236.44520569 -68.86521149]
[249.28431702 -57.62914276]
[261.20144653 -45.41955185]
[272.12301636 -32.31185150]
[281.98153687 -18.38698769]
[290.71612549 -3.73096848]
[298.27285767 11.56569481]
[304.60507202 27.40852928]
[309.67361450 43.69968796]
[313.44723511 60.33855820]
[315.90261841 77.22238159]
[317.02456665 94.24687195]
[316.80615234 111.30690002]
[315.24874878 128.29708862]
[312.36199951 145.11251831]
[308.16366577 161.64933777]
[322.39044189 166.40315247]
[336.61721802 171.15696716]
[350.84399414 175.91078186]
[361.84094238 165.26530457]
[376.52868652 160.96087646]
[391.53216553 163.98658752]
[403.40362549 173.64717102]
[409.41510010 187.72270203]
[408.18524170 202.97872925]
[399.99661255 215.90950012]
[386.73092651 223.54365540]
[371.43655396 224.12689209]
[357.62799072 217.52520752]
[348.47836304 205.25559998]
[346.09017944 190.13755798]
[331.86340332 185.38374329]
[317.63662720 180.62992859]
[303.40985107 175.87611389]
[297.54867554 190.04043579]
[290.70260620 203.75584412]
[282.90576172 216.95397949]
[274.19708252 229.56903076]
[264.61990356 241.53813171]
[254.22203064 252.80157471]
[243.05526733 263.30322266]
[231.17530823 272.99072266]
[218.64135742 281.81579590]
[205.51593018 289.73440552]
[191.86445618 296.70709229]
[177.75498962 302.69906616]
[163.25785828 307.68051147]
[148.44537354 311.62655640]
[133.39135742 314.51754761]
[118.17086029 316.33901978]
[102.85977936 317.08197021]
[87.53443146 316.74261475]
[72.27124023 315.32272339]
[57.14628983 312.82931519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[5 13]
[6 12]
[7 11]
[60 88]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[112 130]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
