%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAxxxxxxxxxxUCAACGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.70207977 300.16638184]
[99.70207977 285.16638184]
[99.70207977 270.16638184]
[99.70207977 255.16639709]
[99.70207977 240.16639709]
[99.70207977 225.16639709]
[99.70207977 210.16639709]
[99.70207977 195.16639709]
[99.70207977 180.16639709]
[99.70207977 165.16639709]
[97.85874939 150.28009033]
[94.20005035 135.73312378]
[80.21296692 130.31449890]
[67.70893097 138.59997559]
[55.20489120 146.88545227]
[42.70085526 155.17092896]
[30.19682121 163.45640564]
[32.75963593 178.46812439]
[28.98877335 193.22280884]
[19.53755951 205.16409302]
[6.04347515 212.22309875]
[-9.15554905 213.17680359]
[-23.42618942 207.85997009]
[-34.29597473 197.19378662]
[-39.88164139 183.02621460]
[-39.21544647 167.81187439]
[-32.41281128 154.18675232]
[-20.65232849 144.51147461]
[-5.97157764 140.46234131]
[9.08591461 142.74090576]
[21.91134644 150.95236206]
[34.41538239 142.66688538]
[46.91941833 134.38142395]
[59.42345428 126.09593964]
[71.92749023 117.81047058]
[72.51229858 87.98915863]
[95.17089844 73.69079590]
[96.70819092 58.76977921]
[98.24548340 43.84876251]
[99.78277588 28.92774582]
[75.78234100 9.44095421]
[86.98864746 -13.90049171]
[84.23239899 -28.64508820]
[81.47615814 -43.38968277]
[78.71991730 -58.13428116]
[75.96367645 -72.87887573]
[63.66124725 -86.54199982]
[70.06031036 -102.85446930]
[67.00191498 -117.53936768]
[60.17833710 -130.89746094]
[50.07290268 -141.98260498]
[41.92587662 -146.25129700]
[39.87665939 -153.40061951]
[30.00095367 -164.69090271]
[20.12524605 -175.98118591]
[10.24954033 -187.27146912]
[-5.59749937 -189.77163696]
[-13.39765644 -203.79080200]
[-7.16731787 -218.57466125]
[8.31413460 -222.78230286]
[21.17065430 -213.18597412]
[21.53982162 -197.14717102]
[31.41552734 -185.85688782]
[41.29123306 -174.56660461]
[51.16693878 -163.27633667]
[61.15803528 -152.08802795]
[71.26347351 -141.00289917]
[68.37898254 -155.72294617]
[68.77959442 -170.71759033]
[72.44596100 -185.26261902]
[79.20099640 -198.65551758]
[88.71843719 -210.24940491]
[100.53860474 -219.48431396]
[114.09059143 -225.91421509]
[128.71984863 -229.22854614]
[143.71980286 -229.26722717]
[158.36596680 -226.02839661]
[171.95092773 -219.66847229]
[183.81857300 -210.49464417]
[193.39567566 -198.94999695]
[200.21969604 -185.59213257]
[203.96102905 -171.06620789]
[204.43898010 -156.07382202]
[201.63044739 -141.33909607]
[195.67109680 -127.57369995]
[186.84875488 -115.44248962]
[175.58952332 -105.53139496]
[162.43722534 -98.31911469]
[148.02709961 -94.15398407]
[133.05514526 -93.23719025]
[118.24449158 -95.61299896]
[104.31047821 -101.16667175]
[91.92610168 -109.62996674]
[81.68681335 -120.59776306]
[84.74520874 -105.91286469]
[94.71337128 -98.99204254]
[97.35385895 -86.73645782]
[90.70826721 -75.63511658]
[93.46451569 -60.89052200]
[96.22075653 -46.14592743]
[98.97699738 -31.40133095]
[101.73323822 -16.65673447]
[114.73648834 -13.58567142]
[124.58850098 -1.25859523]
[138.92855835 -5.65889549]
[149.69824219 -18.02602577]
[165.73928833 -14.61763287]
[170.55003357 1.06001890]
[159.18159485 12.87910652]
[143.32885742 8.68116570]
[128.98880005 13.08146572]
[143.96717834 13.88648033]
[154.53906250 24.52768898]
[155.24615479 39.51101303]
[145.72338867 51.10052872]
[130.88739014 53.31254578]
[118.39801025 45.00498962]
[114.70379639 30.46503830]
[113.16650391 45.38605499]
[111.62921143 60.30707169]
[110.09191895 75.22808838]
[117.71141815 78.88350677]
[124.01184845 84.88520050]
[128.27239990 92.75835419]
[129.94268799 101.80815887]
[128.70904541 111.18064880]
[124.53945923 119.94323730]
[117.70100403 127.17744446]
[108.74700165 132.07441711]
[112.40570831 146.62138367]
[117.87356567 132.65347290]
[128.77912903 122.35449982]
[143.03677368 117.69406891]
[157.91983032 119.56346130]
[170.58201599 127.60516357]
[178.60177612 140.28125000]
[180.44540405 155.16752625]
[175.76029968 169.41708374]
[165.44245911 180.30479431]
[151.46510315 185.74845886]
[136.50129700 184.70703125]
[123.41277313 177.37965393]
[114.70207977 165.16639709]
[114.70207977 180.16639709]
[114.70207977 195.16639709]
[114.70207977 210.16639709]
[114.70207977 225.16639709]
[114.70207977 240.16639709]
[114.70207977 255.16639709]
[114.70207977 270.16638184]
[114.70207977 285.16638184]
[114.70207977 300.16638184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 130]
[12 129]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[37 121]
[38 120]
[39 119]
[40 118]
[42 102]
[43 101]
[44 100]
[45 99]
[46 98]
[48 95]
[49 94]
[50 67]
[51 66]
[53 65]
[54 64]
[55 63]
[56 62]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
