%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[168.14569092 92.27716827]
[153.73347473 96.43505096]
[139.32125854 100.59294128]
[124.90904999 104.75082397]
[110.49683380 108.90871429]
[98.89549255 118.41707611]
[91.98849487 131.73222351]
[85.08149719 145.04737854]
[78.17449951 158.36253357]
[79.45362091 174.71173096]
[65.78305817 183.76974487]
[51.22591019 176.21849060]
[50.75732422 159.82603455]
[64.85933685 151.45553589]
[71.76634216 138.14038086]
[78.67333984 124.82523346]
[85.58033752 111.51007843]
[81.98908234 104.92578125]
[69.54399109 113.29953766]
[57.09890747 121.67329407]
[45.18946075 130.79278564]
[32.00055695 123.64766693]
[33.13464737 108.69059753]
[47.24979782 103.61570740]
[61.02818298 97.68645477]
[74.80657196 91.75720215]
[71.21531677 85.17291260]
[56.28100967 83.77060699]
[41.34670258 82.36830139]
[29.24383736 92.17433929]
[14.11830235 90.53945923]
[4.84432840 78.94079590]
[-10.08997917 77.53849792]
[-25.02428627 76.13619232]
[-33.31939697 88.99891663]
[-46.64766693 96.52326965]
[-61.94635391 96.98020172]
[-75.69992828 90.26472473]
[-84.74793243 77.91999054]
[-87.01118469 62.78274536]
[-81.96961975 48.33140945]
[-70.78173828 37.88679123]
[-56.01844788 33.84899139]
[-41.07223892 37.14586639]
[-29.37763977 47.01981735]
[-23.62198257 61.20188141]
[-8.68767548 62.60418701]
[6.24663210 64.00649261]
[17.51764870 54.33696365]
[32.68313599 55.54635239]
[42.74900818 67.43399811]
[57.68331528 68.83629608]
[72.61762238 70.23860168]
[89.06630707 69.46873474]
[101.36717224 75.62008667]
[107.22362518 85.26938629]
[106.33894348 94.49649811]
[120.75115967 90.33860779]
[135.16337585 86.18072510]
[149.57559204 82.02283478]
[163.98780823 77.86495209]
[161.56996155 65.29227448]
[160.20758057 52.56229782]
[159.91004944 39.76345062]
[160.67939758 26.98465729]
[162.51020813 14.31468964]
[165.38969421 1.84156168]
[169.29779053 -10.34808826]
[174.20730591 -22.16959572]
[180.08406067 -33.54085541]
[186.88716125 -44.38290024]
[194.56932068 -54.62043762]
[203.07710266 -64.18238831]
[212.35134888 -73.00235748]
[222.32760620 -81.01911926]
[232.93650818 -88.17702484]
[244.10433960 -94.42640686]
[255.75346375 -99.72389221]
[267.80294800 -104.03274536]
[280.16903687 -107.32308197]
[292.76580811 -109.57210541]
[305.50573730 -110.76425171]
[318.30035400 -110.89130402]
[331.06069946 -109.95243835]
[343.69818115 -107.95423889]
[356.12500000 -104.91065216]
[368.25485229 -100.84288025]
[380.00344849 -95.77924347]
[391.28921509 -89.75497437]
[402.03381348 -82.81198120]
[412.16256714 -74.99855042]
[421.60519409 -66.36901093]
[430.29611206 -56.98336411]
[438.17501831 -46.90685272]
[445.18719482 -36.20952225]
[451.28396606 -24.96571732]
[456.42309570 -13.25358582]
[460.56884766 -1.15451729]
[463.69256592 11.24741268]
[465.77255249 23.86602974]
[466.79443359 36.61365891]
[466.75119019 49.40173721]
[481.68548584 50.80404282]
[496.61978149 52.20634460]
[511.55410767 53.60865021]
[526.48840332 55.01095200]
[532.47100830 41.11622238]
[542.45605469 29.75161934]
[555.46527100 22.03052902]
[570.22418213 18.70938301]
[585.28686523 20.11355591]
[599.17755127 26.10548210]
[610.53546143 36.09813309]
[618.24786377 49.11252594]
[621.55908203 63.87364960]
[620.14483643 78.93535614]
[614.14361572 92.82205963]
[604.14337158 104.17327118]
[591.12377930 111.87692261]
[576.36041260 115.17828369]
[561.29968262 113.75392151]
[547.41699219 107.74339294]
[536.07250977 97.73552704]
[528.37756348 84.71080780]
[525.08612061 69.94525909]
[510.15179443 68.54295349]
[495.21749878 67.14065552]
[480.28317261 65.73834991]
[465.34887695 64.33604431]
[461.81130981 81.77767944]
[456.27752686 98.69320679]
[448.82177734 114.85497284]
[439.54421997 130.04544067]
[428.56945801 144.06013489]
[416.04501343 156.71032715]
[402.13922119 167.82569885]
[387.03906250 177.25651550]
[370.94757080 184.87570190]
[354.08117676 190.58056641]
[336.66671753 194.29414368]
[318.93844604 195.96624756]
[301.13491821 195.57420349]
[283.49563599 193.12303162]
[266.25796509 188.64552307]
[249.65386963 182.20170593]
[233.90684509 173.87808228]
[219.22886658 163.78645325]
[205.81752014 152.06240845]
[193.85340881 138.86354065]
[183.49763489 124.36730194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[6 17]
[7 16]
[8 15]
[9 14]
[27 53]
[28 52]
[29 51]
[32 48]
[33 47]
[34 46]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
