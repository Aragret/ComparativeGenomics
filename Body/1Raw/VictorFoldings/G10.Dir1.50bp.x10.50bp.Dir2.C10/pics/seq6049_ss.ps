%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUxxxxxxxxxxUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.24616241 325.05264282]
[108.24616241 310.05264282]
[108.24616241 295.05264282]
[108.24616241 280.05264282]
[108.24616241 265.05264282]
[108.24616241 250.05264282]
[108.24616241 235.05264282]
[108.24616241 220.05264282]
[108.24616241 205.05264282]
[108.24616241 190.05264282]
[105.60729980 175.28659058]
[100.41188049 161.21507263]
[95.21646881 147.14355469]
[80.72087097 143.28639221]
[69.21906281 152.91491699]
[57.71726227 162.54344177]
[46.21545792 172.17196655]
[46.37831497 187.80870056]
[36.41208267 199.85894775]
[21.02250671 202.63291931]
[7.47607708 194.82086182]
[2.16900325 180.11137390]
[7.60712337 165.44982910]
[21.22272301 157.75897217]
[36.58693314 160.67016602]
[48.08873749 151.04164124]
[59.59053802 141.41311646]
[71.09234619 131.78459167]
[63.45097733 121.24734497]
[59.41765976 109.09224701]
[59.24980545 96.49604797]
[62.83685303 84.63890076]
[69.72227478 74.59378815]
[79.15747070 67.22951508]
[90.18148041 63.13595200]
[89.24584961 48.16516113]
[88.31021881 33.19437027]
[87.37459564 18.22357750]
[86.43896484 3.25278544]
[85.50333405 -11.71800613]
[61.04698944 -24.23573303]
[67.40029144 -46.95147324]
[63.39255142 -61.40616226]
[59.38481140 -75.86084747]
[52.06570816 -88.95400238]
[41.85222626 -99.93966675]
[31.63874817 -110.92533112]
[21.31154251 -121.80416107]
[10.87172985 -132.57496643]
[0.43191782 -143.34577942]
[-13.85436440 -138.07112122]
[-29.05050468 -139.06970215]
[-42.52368164 -146.16853333]
[-51.93958664 -158.13769531]
[-55.66685486 -172.90344238]
[-53.05971527 -187.90753174]
[-44.56987000 -200.55041504]
[-31.66823959 -208.64163208]
[-16.59010506 -210.77932739]
[-1.94784701 -206.59313965]
[9.72167587 -196.80834961]
[16.39664841 -183.12022400]
[16.92059135 -167.90032959]
[11.20272636 -153.78558350]
[21.64253807 -143.01478577]
[32.08235168 -132.24397278]
[39.04104996 -129.61297607]
[42.62441254 -121.13881683]
[52.83789062 -110.15315247]
[63.05137253 -99.16748810]
[60.01065826 -113.85605621]
[60.64767838 -128.84252930]
[64.92388153 -143.22007751]
[72.58052063 -156.11875916]
[83.15431213 -166.75807190]
[96.00543976 -174.49424744]
[110.35630035 -178.85919189]
[125.33854675 -179.58879089]
[140.04562378 -176.63888550]
[153.58761597 -170.18797302]
[165.14512634 -160.62638855]
[174.01882935 -148.53269958]
[179.67178345 -134.63865662]
[181.76193237 -119.78499603]
[180.16281128 -104.87048340]
[174.97116089 -90.79756927]
[166.50115967 -78.41779327]
[155.26527405 -68.48023224]
[141.94340515 -61.58620071]
[127.34162140 -58.15284729]
[112.34346008 -58.38791656]
[97.85644531 -62.27718735]
[84.75716400 -69.58531952]
[73.83950043 -79.86859131]
[77.84724426 -65.41390228]
[81.85498047 -50.95921326]
[92.82672882 -48.66498566]
[101.57586670 -39.11587906]
[115.10005951 -45.60404587]
[128.62425232 -52.09220886]
[137.43069458 -65.92617798]
[153.80053711 -64.94632721]
[160.89390564 -50.16064835]
[151.41372681 -36.77937698]
[135.11241150 -38.56801987]
[121.58822632 -32.07985687]
[108.06403351 -25.59169006]
[100.47412872 -12.65363407]
[101.40975189 2.31715703]
[102.34538269 17.28794861]
[103.28101349 32.25873947]
[104.21664429 47.22953033]
[105.15226746 62.20032501]
[118.03169250 65.69981384]
[129.10673523 73.51509094]
[136.95843506 84.81914520]
[140.52220154 98.32891846]
[139.23022461 112.45037079]
[133.09658813 125.46652985]
[122.73248291 135.74621582]
[109.28798676 141.94813538]
[114.48339844 156.01965332]
[119.67881775 170.09117126]
[122.74211884 155.40730286]
[130.32849121 142.46717834]
[141.64562988 132.62225342]
[155.51156616 126.90073395]
[170.47816467 125.90017700]
[184.98229980 129.72506714]
[197.50920105 137.97595215]
[206.75053406 149.79109192]
[211.74114990 163.93653870]
[211.95985413 178.93495178]
[207.38377380 193.21987915]
[198.49084473 205.29945374]
[186.20983887 213.91204834]
[171.82337952 218.15820312]
[156.83398438 217.59443665]
[142.80712891 212.27963257]
[131.20776367 202.76885986]
[123.24616241 190.05264282]
[123.24616241 205.05264282]
[123.24616241 220.05264282]
[123.24616241 235.05264282]
[123.24616241 250.05264282]
[123.24616241 265.05264282]
[123.24616241 280.05264282]
[123.24616241 295.05264282]
[123.24616241 310.05264282]
[123.24616241 325.05264282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[14 28]
[15 27]
[16 26]
[17 25]
[35 113]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[42 96]
[43 95]
[44 94]
[45 70]
[46 69]
[47 68]
[48 66]
[49 65]
[50 64]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
