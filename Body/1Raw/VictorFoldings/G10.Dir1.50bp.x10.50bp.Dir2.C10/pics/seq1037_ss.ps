%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCxxxxxxxxxxUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 470.74746704]
[92.50000000 455.74746704]
[92.50000000 440.74746704]
[92.50000000 425.74746704]
[92.50000000 410.74746704]
[92.50000000 395.74746704]
[92.50000000 380.74746704]
[92.50000000 365.74746704]
[92.50000000 350.74746704]
[92.50000000 335.74746704]
[77.84561920 332.65798950]
[64.14855957 326.58660889]
[52.00850296 317.79653931]
[41.95753098 306.67004395]
[34.43677902 293.69177246]
[29.77709579 279.42782593]
[28.18446350 264.50094604]
[29.73092079 249.56335449]
[34.35128784 235.26818848]
[41.84592056 222.24108887]
[51.88933182 211.05265808]
[64.04432678 202.19360352]
[77.78102875 196.05310059]
[92.50000000 192.90179443]
[92.50000000 177.90179443]
[92.50000000 162.90179443]
[92.50000000 147.90179443]
[92.50000000 132.90179443]
[80.13622284 128.72978210]
[69.89548492 119.94179535]
[63.48253250 107.56404114]
[62.12325668 93.24199677]
[47.16197586 94.31906891]
[32.20069504 95.39613342]
[18.93492699 105.03726959]
[4.06463480 98.12304688]
[2.88709974 81.76622772]
[16.61366844 72.79331207]
[31.12362480 80.43485260]
[46.08490753 79.35778809]
[61.04618835 78.28071594]
[70.45004272 66.59450531]
[68.30146790 51.74918365]
[55.38318634 48.67137909]
[44.31700516 41.38820648]
[36.41902924 30.79202843]
[32.61960983 18.16762543]
[33.35380173 5.03642845]
[38.51166534 -7.02682543]
[47.45406723 -16.58294487]
[59.09181213 -22.49997711]
[57.55451965 -37.42099380]
[56.01722717 -52.34201050]
[54.47993469 -67.26302338]
[52.94264221 -82.18404388]
[37.93498993 -83.05955505]
[23.26215363 -86.33126831]
[9.30419731 -91.91442108]
[-3.57733464 -99.66441345]
[-15.04877949 -109.38048553]
[-24.81299973 -120.81098175]
[-32.61708069 -133.65980530]
[-38.25887299 -147.59417725]
[-41.59224319 -162.25311279]
[-42.53084946 -177.25695801]
[-41.05038071 -192.21705627]
[-37.18918228 -206.74589539]
[-31.04727173 -220.46716309]
[-22.78373528 -233.02543640]
[-12.61261940 -244.09541321]
[-0.79738206 -253.39038086]
[12.35593414 -260.66955566]
[26.50662804 -265.74441528]
[41.28816223 -268.48345947]
[56.31765747 -268.81579590]
[71.20581055 -266.73278809]
[85.56699371 -262.28839111]
[99.02920532 -255.59771729]
[111.24375153 -246.83410645]
[121.89424133 -236.22451782]
[130.70480347 -224.04379272]
[137.44721985 -210.60742188]
[141.94685364 -196.26345825]
[144.08714294 -181.38342285]
[143.81265259 -166.35275269]
[141.13049316 -151.56079102]
[136.11013794 -137.39067078]
[128.88162231 -124.20944214]
[119.63220215 -112.35852814]
[108.60144043 -102.14488220]
[96.07506561 -93.83308411]
[82.37753296 -87.63841248]
[67.86365509 -83.72133636]
[69.40094757 -68.80031586]
[70.93824005 -53.87930298]
[72.47553253 -38.95828629]
[74.01282501 -24.03726959]
[90.02194977 -18.80184364]
[102.19316864 -7.07913017]
[108.06385040 8.82560444]
[106.41721344 25.75443077]
[97.53417206 40.32375336]
[83.14678955 49.60060501]
[85.29536438 64.44593048]
[93.84261322 62.61997604]
[102.44638062 62.78770065]
[110.65483093 64.87915802]
[118.05071259 68.72494507]
[124.27255249 74.06822205]
[129.03225708 80.58100128]
[132.12823486 87.88385773]
[133.45346069 95.56778717]
[148.38946533 96.95181274]
[163.32548523 98.33583832]
[178.26148987 99.71986389]
[194.59094238 95.16076660]
[203.49230957 109.58997345]
[192.09115601 122.13787842]
[176.87747192 114.65587616]
[161.94145203 113.27185059]
[147.00544739 111.88782501]
[132.06942749 110.50379944]
[126.66085815 120.68759918]
[118.13939667 128.45594788]
[107.50000000 132.90179443]
[107.50000000 147.90179443]
[107.50000000 162.90179443]
[107.50000000 177.90179443]
[107.50000000 192.90179443]
[122.21897125 196.05310059]
[135.95567322 202.19360352]
[148.11067200 211.05265808]
[158.15408325 222.24108887]
[165.64871216 235.26818848]
[170.26907349 249.56335449]
[171.81553650 264.50094604]
[170.22290039 279.42782593]
[165.56321716 293.69177246]
[158.04246521 306.67004395]
[147.99150085 317.79653931]
[135.85144043 326.58660889]
[122.15438080 332.65798950]
[107.50000000 335.74746704]
[107.50000000 350.74746704]
[107.50000000 365.74746704]
[107.50000000 380.74746704]
[107.50000000 395.74746704]
[107.50000000 410.74746704]
[107.50000000 425.74746704]
[107.50000000 440.74746704]
[107.50000000 455.74746704]
[107.50000000 470.74746704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[32 41]
[33 40]
[34 39]
[42 104]
[43 103]
[51 97]
[52 96]
[53 95]
[54 94]
[55 93]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
