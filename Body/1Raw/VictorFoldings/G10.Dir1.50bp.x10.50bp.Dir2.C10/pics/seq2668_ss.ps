%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCxxxxxxxxxxCGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.15664673]
[92.50000000 235.15664673]
[92.50000000 220.15664673]
[92.50000000 205.15664673]
[92.50000000 190.15664673]
[92.50000000 175.15664673]
[92.50000000 160.15664673]
[92.50000000 145.15664673]
[92.50000000 130.15664673]
[92.50000000 115.15664673]
[85.59300232 101.84148407]
[73.33063507 93.20236969]
[61.06826401 84.56325531]
[48.80589676 75.92414093]
[54.00368500 89.99478149]
[53.14204025 104.97001648]
[46.36469650 118.35163116]
[34.80227661 127.90727997]
[20.38364220 132.04286194]
[5.51415157 130.06846619]
[-7.32563353 122.31346893]
[-15.99374771 110.07158661]
[-19.04415703 95.38502502]
[-15.96798134 80.70384216]
[-7.27839804 68.47718811]
[5.57497549 60.74473572]
[20.44790840 58.79643631]
[34.85800552 62.95664978]
[25.34964943 51.35530853]
[15.84129047 39.75396729]
[6.33293152 28.15262604]
[-16.27825356 36.10483551]
[-40.40158844 32.97752762]
[-60.82766342 19.12267303]
[-73.00062561 -2.75702667]
[-74.03256989 -28.13047981]
[-88.44478607 -32.28836823]
[-102.85700226 -36.44625473]
[-112.99329376 -25.03493118]
[-127.08027649 -19.15958023]
[-142.32095337 -19.98675728]
[-155.68930054 -27.35222626]
[-164.53100586 -39.79356766]
[-167.09054565 -54.84054565]
[-162.85972595 -69.50556946]
[-152.67857361 -80.87688446]
[-138.56857300 -86.69671631]
[-123.33126068 -85.80953217]
[-109.99202728 -78.39147186]
[-101.19937897 -65.91541290]
[-98.69911194 -50.85847092]
[-84.28689575 -46.70058441]
[-69.87467957 -42.54269409]
[-61.10847473 -54.71453094]
[-69.61956024 -67.06610107]
[-78.13065338 -79.41767883]
[-86.64174652 -91.76924896]
[-95.15283203 -104.12081909]
[-110.60697174 -108.42771149]
[-116.74231720 -123.25124359]
[-108.85236359 -137.22007751]
[-92.98960114 -139.61851501]
[-81.32259369 -128.60667419]
[-82.80126190 -112.63191223]
[-74.29016876 -100.28034210]
[-65.77908325 -87.92876434]
[-57.26799011 -75.57719421]
[-48.75690079 -63.22562408]
[-41.28312683 -66.79149628]
[-33.38887787 -69.18950653]
[-25.25471687 -70.37432098]
[-17.06528664 -70.32824707]
[-9.00510693 -69.06143188]
[-1.25442743 -66.61142731]
[6.01480913 -63.04212570]
[12.64277840 -58.44216156]
[18.48528671 -52.92268753]
[23.41690063 -46.61472702]
[27.33364296 -39.66606903]
[30.15516281 -32.23780441]
[31.82637978 -24.50059509]
[32.31852722 -16.63076401]
[31.62959671 -8.80626678]
[29.78419304 -1.20266974]
[26.83276176 6.01078367]
[22.85025978 12.67494488]
[17.93427277 18.64426804]
[27.44263077 30.24560928]
[36.95098877 41.84695053]
[46.45934677 53.44829178]
[57.44501495 63.66176987]
[69.70738220 72.30088806]
[81.96974945 80.94000244]
[94.23211670 89.57911682]
[103.75010681 81.14205933]
[120.76139832 83.46109009]
[135.66329956 81.74840546]
[150.56520081 80.03571320]
[154.79708862 65.46289825]
[164.26039124 53.65235901]
[177.48876953 46.38436127]
[192.45141602 44.73913574]
[206.86486816 48.93644333]
[218.54142761 58.30677414]
[225.72128296 71.39795685]
[240.62318420 69.68526459]
[255.52508545 67.97257233]
[270.42700195 66.25988770]
[283.27050781 56.06303024]
[298.42153931 62.33826447]
[300.29397583 78.63016510]
[286.96163940 88.17902374]
[272.13967896 81.16178894]
[257.23779297 82.87447357]
[242.33587646 84.58716583]
[227.43397522 86.29985809]
[223.41125488 100.67855835]
[214.16494751 112.45357513]
[201.07952881 119.81134796]
[186.13377380 121.60353088]
[171.60145569 117.52609253]
[159.70550537 108.17039490]
[152.27789307 94.93761444]
[137.37599182 96.65030670]
[122.47409058 98.36299133]
[136.37284851 104.00431824]
[150.27160645 109.64564514]
[165.27157593 109.61875153]
[178.98905945 115.68759155]
[189.05836487 126.80554962]
[193.74299622 141.05525208]
[192.23504639 155.97926331]
[184.79457092 169.00382996]
[172.70472717 177.88278198]
[158.05050659 181.08488464]
[143.35910034 178.05792236]
[131.16413879 169.32389832]
[123.56874084 156.38906860]
[121.88276672 141.48411560]
[114.69138336 128.32038879]
[107.50000000 115.15664673]
[107.50000000 130.15664673]
[107.50000000 145.15664673]
[107.50000000 160.15664673]
[107.50000000 175.15664673]
[107.50000000 190.15664673]
[107.50000000 205.15664673]
[107.50000000 220.15664673]
[107.50000000 235.15664673]
[107.50000000 250.15664673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 94]
[12 93]
[13 92]
[14 91]
[28 90]
[29 89]
[30 88]
[31 87]
[36 53]
[37 52]
[38 51]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[96 125]
[97 124]
[98 123]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
