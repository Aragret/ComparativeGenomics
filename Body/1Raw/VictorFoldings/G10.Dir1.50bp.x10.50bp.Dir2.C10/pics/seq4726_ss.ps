%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAxxxxxxxxxxGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.43260193 327.84448242]
[127.01837921 308.63604736]
[127.32635498 293.63919067]
[127.63433075 278.64236450]
[127.94230652 263.64553833]
[128.25028992 248.64868164]
[128.55825806 233.65185547]
[128.86624146 218.65501404]
[129.17422485 203.65817261]
[129.48219299 188.66133118]
[132.56085205 175.37069702]
[140.62634277 167.77673340]
[131.22248840 156.09051514]
[121.81863403 144.40431213]
[112.41477203 132.71810913]
[103.01091766 121.03189087]
[88.08990479 119.49459839]
[76.50085449 129.01794434]
[64.91180420 138.54127502]
[59.65472031 154.07495117]
[43.52277756 157.02325439]
[33.11113739 144.35322571]
[39.13040161 129.09869385]
[55.38846588 126.95222473]
[66.97751617 117.42889404]
[78.56656647 107.90555573]
[78.87454224 92.90871429]
[67.68624878 82.91761780]
[56.49794769 72.92652130]
[45.30965042 62.93542480]
[32.63813782 54.90842819]
[18.82455444 49.06163788]
[5.01097059 43.21485138]
[-8.80261230 37.36806488]
[-22.61619568 31.52127457]
[-36.71158600 26.39097214]
[-51.05164719 21.99067307]
[-65.39170837 17.59037209]
[-79.73176575 13.19007206]
[-94.07183075 8.78977108]
[-105.26054382 19.31156921]
[-120.21482086 22.81373024]
[-134.91203308 18.35419464]
[-145.39871216 7.13255358]
[-148.85398865 -7.83262825]
[-144.34840393 -22.51579285]
[-133.09394836 -32.96723938]
[-118.11800385 -36.37558746]
[-103.44903564 -31.82400131]
[-93.03291321 -20.53683853]
[-89.67153168 -5.55028963]
[-75.33146667 -1.14998937]
[-60.99140549 3.25031090]
[-46.65134430 7.65061140]
[-32.31128311 12.05091190]
[-36.58672714 -2.32686901]
[-28.18494225 -14.75305080]
[-13.24934483 -16.14155769]
[-2.70090747 -5.47710943]
[-4.25268936 9.44240665]
[-16.76940727 17.70769310]
[-2.95582390 23.55447960]
[10.85775852 29.40126801]
[24.67134094 35.24805832]
[38.48492432 41.09484482]
[29.93533897 28.76988602]
[26.02511787 14.28851318]
[27.20912933 -0.66468483]
[33.34963989 -14.35023022]
[43.73233414 -25.17610931]
[57.14941406 -31.88296890]
[72.04009247 -33.69061279]
[86.67217255 -30.38876152]
[99.34352875 -22.36151314]
[108.58013153 -10.54266262]
[113.30749512 3.69292784]
[112.97570038 18.68925858]
[107.62334442 32.70183182]
[97.87305450 44.10059738]
[84.85906219 51.55955505]
[70.09526062 54.21102142]
[55.30075073 51.74712753]
[66.48904419 61.73822403]
[77.67734528 71.72932434]
[88.86563873 81.72042084]
[81.33329773 68.74876404]
[85.82991028 54.43861008]
[99.42793274 48.10665131]
[113.27431488 53.87533569]
[118.35430145 67.98893738]
[111.36089325 81.25845337]
[122.12957764 70.81644440]
[132.89825439 60.37443542]
[134.58201599 44.41998291]
[148.18247986 35.91076660]
[163.26655579 41.37432861]
[168.26300049 56.61949158]
[159.33900452 69.95146942]
[143.34025574 71.14311218]
[132.57157898 81.58512115]
[121.80290222 92.02713013]
[121.72232819 99.76966095]
[119.14463043 106.54398346]
[114.69712830 111.62803650]
[124.10098267 123.31424713]
[133.50483704 135.00045776]
[142.90869141 146.68666077]
[152.31256104 158.37287903]
[163.99876404 167.77673340]
[173.56262207 156.14321899]
[185.46983337 146.93417358]
[199.12129211 140.60893250]
[213.83096313 137.48178101]
[228.86045837 137.70642090]
[243.45606995 141.26835632]
[256.88653564 147.98585510]
[268.47973633 157.51910400]
[277.65625000 169.38752747]
[283.95846558 182.99391174]
[287.07315063 197.65452576]
[286.84732056 212.63342285]
[283.29544067 227.17941284]
[296.72290039 233.86549377]
[310.15036011 240.55157471]
[327.02404785 242.19921875]
[330.11187744 258.86959839]
[314.94778442 266.45159912]
[303.46426392 253.97901917]
[290.03683472 247.29293823]
[276.60937500 240.60687256]
[267.14187622 252.20724487]
[255.32458496 261.41427612]
[241.74813843 267.76367188]
[227.09207153 270.93408203]
[212.09077454 270.76339722]
[197.49661255 267.25689697]
[184.04228210 260.58734131]
[172.40396118 251.08633423]
[163.16740417 239.22792053]
[156.79837036 225.60481262]
[153.61918640 210.89891052]
[153.79244995 195.84706116]
[157.31268311 181.20417786]
[144.47903442 188.96931458]
[144.17105103 203.96615601]
[143.86308289 218.96298218]
[143.55509949 233.95982361]
[143.24713135 248.95666504]
[142.93914795 263.95349121]
[142.63116455 278.95034790]
[142.32319641 293.94717407]
[142.01521301 308.94403076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 26]
[18 25]
[19 24]
[27 85]
[28 84]
[29 83]
[30 82]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 55]
[37 54]
[38 53]
[39 52]
[40 51]
[91 101]
[92 100]
[93 99]
[109 143]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
