%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGUAGxxxxxxxxxxCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.29882812 326.16558838]
[144.98677063 311.16885376]
[144.67471313 296.17208862]
[144.36265564 281.17532349]
[144.05059814 266.17858887]
[143.73854065 251.18182373]
[143.42649841 236.18507385]
[143.11444092 221.18832397]
[142.80238342 206.19157410]
[139.09622192 191.65663147]
[132.18922424 178.34147644]
[125.28221893 165.02632141]
[118.37522125 151.71116638]
[111.46822357 138.39601135]
[98.69966125 141.93188477]
[84.87753296 141.14065552]
[71.48838043 135.73048401]
[59.59599686 144.87222290]
[47.70361710 154.01394653]
[44.20600891 169.67109680]
[29.72149849 176.56881714]
[15.36136436 169.41577148]
[12.14147186 153.69915771]
[22.53184700 141.47543335]
[38.56188202 142.12156677]
[50.45426178 132.97984314]
[62.34664154 123.83810425]
[56.57036972 109.99488831]
[41.70732498 112.01721954]
[26.84427643 114.03955078]
[19.61824417 127.77141571]
[5.68601990 134.60316467]
[-9.59517384 131.90783691]
[-20.34940529 120.72186279]
[-22.44145203 105.34645844]
[-15.06688213 91.69379425]
[-1.06136549 85.01358795]
[14.18968964 87.87452698]
[24.82194138 99.17650604]
[39.68498993 97.15417480]
[54.54803467 95.13183594]
[63.83756256 76.93480682]
[79.33008575 65.67029572]
[74.13467407 51.59877777]
[68.93925476 37.52725983]
[60.17304993 25.35542107]
[48.47342682 15.96825981]
[36.77380371 6.58109760]
[25.07417870 -2.80606413]
[10.47970104 2.19441438]
[-4.49594402 -1.51147139]
[-15.07408428 -12.74118710]
[-17.87927246 -27.91136932]
[-12.01638317 -42.18127060]
[0.64375579 -50.99741745]
[16.06134033 -51.54660797]
[29.31667709 -43.65359497]
[36.18003464 -29.83701706]
[34.46134186 -14.50568771]
[46.16096497 -5.11852598]
[57.86058807 4.26863575]
[69.56021118 13.65579796]
[76.32230377 10.41171551]
[89.84649658 3.92355013]
[96.60858917 0.67946750]
[96.60858917 -14.32053280]
[88.87129211 -28.12070465]
[96.60858917 -40.84797668]
[96.60858917 -55.84797668]
[96.60858917 -70.84797668]
[83.26746368 -78.45783234]
[75.53249359 -91.72680664]
[75.48435211 -107.08562469]
[83.13598633 -120.40283966]
[96.42914581 -128.09617615]
[111.78804016 -128.09617615]
[125.08119965 -120.40283966]
[132.73283386 -107.08562469]
[132.68469238 -91.72680664]
[124.94972229 -78.45783234]
[111.60858917 -70.84797668]
[111.60858917 -55.84797668]
[111.60858917 -40.84797668]
[119.34589386 -28.12070465]
[111.60858917 -14.32053280]
[111.60858917 0.67946750]
[106.62081146 18.79606819]
[95.51576996 29.77668571]
[83.01077271 32.33184433]
[88.20619202 46.40336227]
[93.40160370 60.47488022]
[108.01840210 60.73832703]
[121.56799316 66.22729492]
[132.24699402 76.21123505]
[145.77117920 69.72306824]
[159.29536438 63.23490143]
[172.81956482 56.74673843]
[186.34375000 50.25857162]
[199.86793518 43.77040863]
[204.87281799 28.77952194]
[219.04910278 21.79319572]
[233.98623657 26.95629311]
[240.82229614 41.20563889]
[235.50155640 56.08735275]
[221.18072510 62.77237320]
[206.35610962 57.29459763]
[192.83190918 63.78276443]
[179.30772400 70.27092743]
[165.78353882 76.75909424]
[152.25933838 83.24726105]
[138.73515320 89.73542023]
[139.74099731 105.14070892]
[134.84834290 119.78298950]
[124.78337860 131.48901367]
[131.69038391 144.80416870]
[138.59738159 158.11932373]
[145.50437927 171.43447876]
[152.41137695 184.74963379]
[160.95535278 176.71708679]
[174.43455505 173.37445068]
[190.39898682 176.92207336]
[203.64157104 183.96720886]
[216.88415527 191.01234436]
[233.70738220 193.11366272]
[236.34532166 209.86111450]
[220.98260498 217.03213501]
[209.83901978 204.25492859]
[196.59643555 197.20979309]
[183.35385132 190.16465759]
[176.96516418 194.09336853]
[185.20901489 206.62489319]
[193.45286560 219.15641785]
[201.69670105 231.68794250]
[212.31138611 242.28645325]
[206.22772217 255.99736023]
[191.24690247 255.23887634]
[186.57885742 240.98464966]
[179.11517334 227.97335815]
[171.65148926 214.96208191]
[164.18780518 201.95080566]
[157.79913330 205.87951660]
[158.11119080 220.87626648]
[158.42324829 235.87301636]
[158.73530579 250.86978149]
[159.04736328 265.86651611]
[159.35942078 280.86328125]
[159.67146301 295.86004639]
[159.98352051 310.85678101]
[160.29557800 325.85354614]
[162.88658142 345.06127930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 118]
[11 117]
[12 116]
[13 115]
[14 114]
[17 27]
[18 26]
[19 25]
[28 41]
[29 40]
[30 39]
[43 91]
[44 90]
[45 89]
[46 62]
[47 61]
[48 60]
[49 59]
[65 86]
[66 85]
[68 83]
[69 82]
[70 81]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
