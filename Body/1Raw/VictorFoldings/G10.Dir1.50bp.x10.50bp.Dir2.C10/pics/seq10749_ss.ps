%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACxxxxxxxxxxACUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAAACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.15246582 396.46643066]
[128.15246582 381.46643066]
[128.15246582 366.46643066]
[128.15246582 351.46643066]
[128.15246582 336.46643066]
[128.15246582 321.46643066]
[128.15246582 306.46643066]
[128.15246582 291.46643066]
[128.15246582 276.46643066]
[128.15246582 261.46643066]
[126.43977356 246.56451416]
[123.03679657 231.95562744]
[119.63381958 217.34674072]
[116.23084259 202.73783875]
[112.82786560 188.12895203]
[99.05705261 182.51622009]
[91.13814545 169.71954346]
[92.28624725 154.53614807]
[102.27005768 142.80458069]
[98.86708069 128.19569397]
[95.46410370 113.58679962]
[86.04953766 103.24960327]
[89.92700195 89.81618500]
[86.52402496 75.20729065]
[83.12104797 60.59839630]
[79.71807098 45.98950577]
[64.15838623 45.83786774]
[49.09175491 41.98396301]
[35.38568497 34.65397644]
[23.82831573 24.27411079]
[15.08310699 11.44581509]
[9.65075397 -3.08907509]
[7.84051991 -18.49122810]
[9.75263500 -33.87229156]
[15.27275276 -48.34611511]
[24.07878113 -61.07982635]
[35.65967560 -71.34174347]
[49.34508514 -78.54340363]
[45.63892746 -93.07834625]
[41.93276596 -107.61328125]
[36.74834442 -115.21417999]
[38.30404663 -122.48916626]
[34.90106964 -137.09805298]
[31.49809074 -151.70695496]
[28.09511185 -166.31584167]
[24.69213486 -180.92472839]
[9.74732304 -179.41445923]
[-5.26792002 -179.82772827]
[-20.10703278 -182.15777588]
[-34.52634048 -186.36631775]
[-48.28906631 -192.38426208]
[-61.16921616 -200.11279297]
[-72.95528412 -209.42498779]
[-83.45372772 -220.16792297]
[-92.49216461 -232.16522217]
[-99.92216492 -245.21984863]
[-105.62172699 -259.11746216]
[-109.49726105 -273.62982178]
[-111.48511505 -288.51861572]
[-111.55265808 -303.53939819]
[-109.69877625 -318.44549561]
[-105.95391846 -332.99212646]
[-100.37957001 -346.94042969]
[-93.06726837 -360.06134033]
[-84.13709259 -372.13943481]
[-73.73567963 -382.97634888]
[-62.03383636 -392.39416504]
[-49.22370911 -400.23822021]
[-35.51565933 -406.37966919]
[-21.13478279 -410.71774292]
[-6.31722593 -413.18112183]
[8.69369316 -413.72943115]
[23.65148163 -412.35360718]
[38.31052017 -409.07626343]
[52.43009186 -403.95123291]
[65.77834320 -397.06265259]
[78.13607788 -388.52365112]
[89.30037689 -378.47442627]
[99.08791351 -367.08001709]
[107.33796692 -354.52752686]
[113.91505432 -341.02307129]
[118.71118164 -326.78842163]
[121.64759064 -312.05731201]
[122.67607117 -297.07162476]
[121.77971649 -282.07745361]
[118.97326660 -267.32104492]
[114.30278778 -253.04464722]
[107.84498596 -239.48275757]
[99.70589447 -226.85803223]
[90.01917267 -215.37780762]
[78.94388580 -205.23057556]
[66.66188812 -196.58297729]
[53.37487793 -189.57701111]
[39.30102539 -184.32771301]
[42.70400620 -169.71882629]
[46.10698318 -155.10992432]
[49.50996017 -140.50103760]
[52.91293716 -125.89214325]
[56.46770096 -111.31944275]
[60.17386246 -96.78450775]
[63.88002396 -82.24956512]
[78.36104584 -82.57603455]
[92.55620575 -79.65678406]
[105.74693298 -73.63617706]
[117.26471710 -64.81562042]
[126.52500153 -53.63854599]
[133.05688477 -40.66806793]
[136.52699280 -26.55864716]
[136.75657654 -12.02304840]
[133.73065186 2.20365548]
[127.59896851 15.40126419]
[118.66857147 26.90090179]
[107.38845062 36.11892319]
[94.32696533 42.58652496]
[97.72994232 57.19541931]
[101.13291931 71.80431366]
[104.53589630 86.41320038]
[113.95046234 96.75039673]
[110.07299805 110.18381500]
[113.47597504 124.79270935]
[116.87895203 139.40159607]
[131.01925659 145.51373291]
[138.75871277 158.62686157]
[137.30978394 173.60566711]
[127.43675232 184.72596741]
[130.83973694 199.33486938]
[134.24270630 213.94375610]
[137.64569092 228.55264282]
[141.04866028 243.16154480]
[147.10993958 229.44071960]
[158.77294922 220.00810242]
[173.45793152 216.95008850]
[187.91668701 220.94306946]
[198.95111084 231.10386658]
[204.12046814 245.18498230]
[202.28134155 260.07180786]
[193.84053040 272.47152710]
[180.66506958 279.64141846]
[165.66925049 279.99557495]
[152.17001343 273.45565796]
[143.15246582 261.46643066]
[143.15246582 276.46643066]
[143.15246582 291.46643066]
[143.15246582 306.46643066]
[143.15246582 321.46643066]
[143.15246582 336.46643066]
[143.15246582 351.46643066]
[143.15246582 366.46643066]
[143.15246582 381.46643066]
[143.15246582 396.46643066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[19 121]
[20 120]
[21 119]
[23 117]
[24 116]
[25 115]
[26 114]
[38 101]
[39 100]
[40 99]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
