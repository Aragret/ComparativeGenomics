%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCxxxxxxxxxxCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACAAAAAACAAUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.10971069 298.25421143]
[92.10971069 283.25421143]
[92.10971069 268.25421143]
[92.10971069 253.25421143]
[92.10971069 238.25421143]
[92.10971069 223.25421143]
[92.10971069 208.25421143]
[92.10971069 193.25421143]
[92.10971069 178.25421143]
[92.10971069 163.25421143]
[86.06971741 158.80804443]
[84.40879822 173.71580505]
[70.66787720 179.73136902]
[58.58772659 170.83924866]
[60.24836731 155.93145752]
[73.98973083 149.91569519]
[67.94972992 145.46951294]
[53.62713623 149.92633057]
[42.74909592 161.41453552]
[28.29767609 157.80819702]
[13.97507858 162.26501465]
[-0.34751880 166.72181702]
[-14.67011642 171.17863464]
[-21.37799263 182.24472046]
[-33.44848251 185.63916016]
[-44.22702408 180.05969238]
[-58.63924026 184.21759033]
[-73.05145264 188.37547302]
[-87.46366882 192.53335571]
[-101.00614166 202.73326111]
[-114.55635071 192.54365540]
[-108.51602936 176.70222473]
[-91.62155914 178.12113953]
[-77.20934296 173.96325684]
[-62.79712677 169.80537415]
[-48.38491058 165.64747620]
[-36.95484161 152.36766052]
[-19.12693214 156.85604858]
[-4.80433464 152.39923096]
[9.51826286 147.94241333]
[23.84086037 143.48559570]
[33.69445038 132.31617737]
[49.17031860 135.60372925]
[63.49291611 131.14691162]
[62.64881516 86.68077850]
[94.41144562 69.18128204]
[95.34706879 54.21048737]
[96.28269958 39.23969650]
[97.21833038 24.26890373]
[87.17980194 15.23089123]
[84.24287415 2.24619293]
[89.26554108 -9.87185764]
[100.19721985 -16.76352692]
[101.44409180 -31.71161461]
[81.47724915 -36.35039902]
[69.30687714 -61.89026642]
[66.82176208 -76.68297577]
[64.33663940 -91.47567749]
[61.85152054 -106.26838684]
[59.36640167 -121.06109619]
[44.34545135 -122.48708344]
[30.20573807 -127.75309753]
[17.91133118 -136.50009155]
[8.30048561 -148.13169861]
[2.02848291 -161.85482788]
[-0.47704059 -176.73382568]
[0.95474571 -191.75422668]
[6.22622013 -205.89190674]
[14.97796535 -218.18293762]
[26.61327171 -227.78929138]
[40.33882523 -234.05599976]
[55.21879578 -236.55577087]
[70.23863983 -235.11819458]
[84.37428284 -229.84124756]
[96.66193390 -221.08476257]
[106.26379395 -209.44575500]
[112.52519989 -195.71777344]
[115.01923370 -180.83683777]
[113.57584381 -165.81755066]
[108.29345703 -151.68394470]
[99.53221893 -139.39968872]
[87.88950348 -129.80232239]
[74.15911102 -123.54621124]
[76.64422607 -108.75350952]
[79.12934875 -93.96080017]
[81.61446381 -79.16809082]
[84.09958649 -64.37538147]
[91.21297455 -61.99847794]
[105.43975067 -57.24466324]
[112.55314636 -54.86775589]
[123.43196869 -65.19496155]
[134.31079102 -75.52216339]
[136.16368103 -91.45786285]
[149.85363770 -99.82234192]
[164.87890625 -94.19910431]
[169.71337891 -78.90180206]
[160.64846802 -65.66522217]
[144.63800049 -64.64334106]
[133.75917053 -54.31613541]
[122.88034821 -43.98892975]
[116.39218140 -30.46473885]
[115.14530945 -15.51665211]
[126.54066467 -3.18766856]
[125.50419617 13.90647697]
[112.18911743 25.20453262]
[111.25349426 40.17532349]
[110.31786346 55.14611435]
[109.38223267 70.11690521]
[125.45367432 75.27111816]
[138.16128540 89.21906281]
[142.76275635 109.57547760]
[136.20719910 131.49502563]
[150.43397522 136.24884033]
[163.04753113 127.40550232]
[178.27174377 127.68186951]
[190.27206421 136.76242065]
[194.57283020 150.99763489]
[208.79960632 155.75144958]
[223.02639771 160.50526428]
[239.96525574 159.79035950]
[245.34136963 175.86933899]
[231.37901306 185.48646545]
[218.27258301 174.73204041]
[204.04579163 169.97822571]
[189.81901550 165.22441101]
[177.82441711 174.01460266]
[162.77575684 174.05685425]
[150.44358826 165.12539673]
[145.68016052 150.47561646]
[131.45338440 145.72180176]
[125.36746216 150.10490417]
[135.57353210 161.09744263]
[145.77961731 172.08999634]
[158.07847595 180.67706299]
[158.18818665 195.67666626]
[146.01622009 204.44270325]
[131.82472229 199.58456421]
[127.57839203 185.19859314]
[120.38700867 172.03485107]
[113.19562531 158.87110901]
[107.10971069 163.25421143]
[107.10971069 178.25421143]
[107.10971069 193.25421143]
[107.10971069 208.25421143]
[107.10971069 223.25421143]
[107.10971069 238.25421143]
[107.10971069 253.25421143]
[107.10971069 268.25421143]
[107.10971069 283.25421143]
[107.10971069 298.25421143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 44]
[18 43]
[20 41]
[21 40]
[22 39]
[23 38]
[26 36]
[27 35]
[28 34]
[29 33]
[46 108]
[47 107]
[48 106]
[49 105]
[53 102]
[54 101]
[56 87]
[57 86]
[58 85]
[59 84]
[60 83]
[90 100]
[91 99]
[92 98]
[112 130]
[113 129]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
