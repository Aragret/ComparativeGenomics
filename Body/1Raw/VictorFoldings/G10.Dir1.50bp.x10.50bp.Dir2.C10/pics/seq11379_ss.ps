%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGAxxxxxxxxxxGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[21.16615868 229.73139954]
[12.75274849 242.14970398]
[11.41792965 257.91448975]
[-2.12633586 264.11145020]
[-3.46115470 279.87625122]
[-17.00542068 286.07318115]
[-25.41883087 298.49151611]
[-33.83224106 310.90982056]
[-42.24565125 323.32812500]
[-50.65906143 335.74645996]
[-51.99388123 351.51126099]
[-65.53814697 357.70819092]
[-66.17535400 374.09494019]
[-80.80941772 381.49606323]
[-94.38606262 372.29788208]
[-92.93881226 355.96270752]
[-77.95645905 349.29476929]
[-77.22342682 334.41821289]
[-63.07737350 327.33303833]
[-54.66396332 314.91473389]
[-46.25055313 302.49639893]
[-37.83714294 290.07809448]
[-29.42373466 277.65979004]
[-28.69069862 262.78323364]
[-14.54465008 255.69804382]
[-13.81161499 240.82148743]
[0.33443451 233.73629761]
[8.74784470 221.31797791]
[-19.50111198 193.61886597]
[-39.63341141 159.56105042]
[-50.28164291 121.45777893]
[-65.21765900 122.84180450]
[-80.15367126 124.22583008]
[-95.08968353 125.60985565]
[-110.30335999 133.09184265]
[-121.70452881 120.54395294]
[-112.80316162 106.11474609]
[-96.47370911 110.67383575]
[-81.53769684 109.28981018]
[-66.60168457 107.90579224]
[-51.66566849 106.52176666]
[-51.46670151 89.85867310]
[-49.44252396 73.31778717]
[-45.61752701 57.09843063]
[-40.03779984 41.39604568]
[-32.77058411 26.39985657]
[-23.90344620 12.29056644]
[-13.54324150 -0.76180279]
[-1.81481302 -12.59996700]
[11.14051056 -23.08127213]
[25.16661263 -32.07941818]
[40.09447479 -39.48597336]
[55.74421692 -45.21168900]
[52.08551025 -59.75864029]
[48.42680359 -74.30559540]
[44.76810074 -88.85254669]
[41.10939407 -103.39950562]
[37.45068741 -117.94645691]
[22.37564087 -117.86659241]
[7.71969700 -121.39741516]
[-5.66506529 -128.33366394]
[-17.00047302 -138.27207947]
[-25.62750053 -150.63484192]
[-31.04458618 -164.70318604]
[-32.93678284 -179.65922546]
[-31.19408798 -194.63342285]
[-25.91781235 -208.75518799]
[-17.41471481 -221.20352173]
[-6.17915440 -231.25466919]
[7.13564873 -238.32427979]
[21.75558853 -242.00134277]
[36.83068085 -242.07206726]
[51.48448181 -238.53236389]
[64.86503601 -231.58799744]
[76.19441986 -221.64271545]
[84.81394958 -209.27473450]
[90.22250366 -195.20309448]
[92.10563660 -180.24591064]
[90.35385895 -165.27278137]
[85.06902313 -151.15420532]
[76.55838013 -138.71104431]
[65.31672668 -128.66670227]
[51.99764252 -121.60516357]
[55.65634918 -107.05821228]
[59.31505203 -92.51125336]
[62.97375870 -77.96430206]
[66.63246155 -63.41734695]
[70.29116821 -48.87039566]
[79.09972382 -50.36019135]
[87.98065948 -51.32925797]
[96.90321350 -51.77423477]
[105.83650208 -51.69358444]
[114.74957275 -51.08758545]
[123.61156464 -49.95833588]
[132.39178467 -48.30974579]
[141.05981445 -46.14752960]
[149.58566284 -43.47916794]
[157.93977356 -40.31390381]
[166.09321594 -36.66270447]
[174.01777649 -32.53820801]
[181.68600464 -27.95470428]
[189.07131958 -22.92806244]
[196.14816284 -17.47569466]
[202.89202881 -11.61648178]
[209.27955627 -5.37071514]
[215.28862000 1.23997390]
[220.89842224 8.19269085]
[226.08950806 15.46335793]
[230.84393311 23.02679443]
[235.14520264 30.85680580]
[238.97845459 38.92627716]
[242.33036804 47.20726013]
[245.18937683 55.67107391]
[247.54556274 64.28841400]
[249.39074707 73.02942657]
[250.71856689 81.86384583]
[251.52442932 90.76107788]
[251.80551147 99.69029999]
[251.56085205 108.62059784]
[250.79132080 117.52104187]
[249.49955750 126.36080170]
[247.69003296 135.10926819]
[245.36903381 143.73616028]
[242.54458618 152.21156311]
[239.22648621 160.50614929]
[235.42620850 168.59120178]
[231.15690613 176.43869019]
[226.43339539 184.02146912]
[221.27200317 191.31324768]
[215.69062805 198.28880310]
[209.70857239 204.92395020]
[203.34658813 211.19573975]
[196.62669373 217.08241272]
[189.57214355 222.56361389]
[182.20739746 227.62034607]
[174.55795288 232.23509216]
[166.65028381 236.39189148]
[158.51179504 240.07632446]
[150.17066956 243.27565002]
[141.65579224 245.97877502]
[132.99664307 248.17634583]
[124.22322845 249.86074829]
[115.36591339 251.02615356]
[106.45539093 251.66850281]
[97.52251434 251.78561401]
[88.59821320 251.37704468]
[79.71339417 250.44421387]
[70.89884186 248.99037170]
[62.18506622 247.02053833]
[53.60225296 244.54154968]
[45.18013000 241.56196594]
[36.94785690 238.09213257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 25]
[6 23]
[7 22]
[8 21]
[9 20]
[10 19]
[12 17]
[31 41]
[32 40]
[33 39]
[34 38]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[58 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
