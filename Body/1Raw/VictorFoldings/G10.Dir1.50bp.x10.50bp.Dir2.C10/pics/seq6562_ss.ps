%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUxxxxxxxxxxAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[69.39653015 443.30996704]
[69.39653015 428.30996704]
[69.39653015 413.30996704]
[69.39653015 398.30996704]
[69.39653015 383.30996704]
[69.39653015 368.30996704]
[69.39653015 353.30996704]
[69.39653015 338.30996704]
[69.39653015 323.30996704]
[69.39653015 308.30996704]
[56.04917908 305.93173218]
[43.28773499 301.34454346]
[31.47508240 294.67773438]
[20.94731903 286.11968994]
[12.00419331 275.91268921]
[4.90057659 264.34594727]
[-0.16080758 251.74743652]
[-3.03516412 238.47467041]
[-3.63977003 224.90440369]
[-1.95635402 211.42211914]
[1.96835268 198.41090393]
[8.02391338 186.24070740]
[16.03929138 175.25770569]
[25.78768539 165.77455139]
[36.99294281 158.06141663]
[49.33737564 152.33828735]
[62.47079086 148.76876831]
[76.02040100 147.45529175]
[77.25100708 132.50585938]
[66.80899811 121.73718262]
[51.82875824 122.50684357]
[36.84851837 123.27649689]
[21.86827850 124.04615784]
[6.88803673 124.81581879]
[-8.09220409 125.58547974]
[-23.60023117 132.43656921]
[-34.47662735 119.43117523]
[-24.99037361 105.37957764]
[-8.86186409 110.60523987]
[6.11837673 109.83557892]
[21.09861755 109.06591797]
[36.07885742 108.29625702]
[51.05910110 107.52659607]
[66.03934479 106.75694275]
[67.04112244 93.90357971]
[72.57884216 82.72394562]
[81.57704926 74.69463348]
[92.53057098 70.74565887]
[103.75061798 71.15834808]
[109.45528412 57.28546906]
[115.15995026 43.41259003]
[120.86460876 29.53970718]
[113.22176361 22.11423492]
[108.19719696 12.75758934]
[106.24183655 2.35496831]
[107.51739502 -8.11681938]
[111.88321686 -17.68107414]
[118.91143799 -25.45229721]
[127.92883301 -30.71817017]
[125.47590637 -45.51625061]
[123.02297974 -60.31432724]
[120.57005310 -75.11241150]
[105.57392120 -76.92701721]
[91.69702148 -82.89428711]
[80.06428528 -92.53047943]
[71.61873627 -105.05442810]
[67.04500580 -119.45087433]
[66.71386719 -134.55276489]
[70.65216827 -149.13584900]
[78.54065704 -162.01795959]
[89.73983002 -172.15476990]
[103.34183502 -178.72456360]
[118.24401093 -181.19474792]
[133.23831177 -179.36508179]
[147.10920715 -173.38386536]
[158.73225403 -163.73599243]
[167.16522217 -151.20356750]
[171.72448730 -136.80253601]
[172.04045105 -121.70032501]
[168.08749390 -107.12120056]
[160.18608093 -94.24702454]
[148.97673035 -84.12145996]
[135.36813354 -77.56533813]
[137.82106018 -62.76725769]
[140.27398682 -47.96917725]
[142.72691345 -33.17110062]
[151.72198486 -31.41908264]
[159.92536926 -27.33428764]
[166.74424744 -21.21188927]
[180.03158569 -28.17224503]
[193.31892395 -35.13260269]
[206.60627747 -42.09295654]
[219.89361572 -49.05331421]
[205.43778992 -53.05696487]
[195.97265625 -64.69359589]
[194.99690247 -79.66182709]
[202.87121582 -92.42877960]
[216.68493652 -98.27526093]
[231.33192444 -95.04017639]
[241.39805603 -83.91933441]
[243.16246033 -69.02346802]
[235.97375488 -55.85945129]
[250.22044373 -60.55325317]
[264.46713257 -65.24705505]
[272.94650269 -78.86614990]
[288.89724731 -80.58488464]
[300.08328247 -69.08478546]
[297.92364502 -53.18775558]
[284.07504272 -45.08862686]
[269.16094971 -51.00036240]
[254.91424561 -46.30656052]
[240.66755676 -41.61275864]
[226.85397339 -35.76597214]
[213.56661987 -28.80561638]
[200.27928162 -21.84525871]
[186.99194336 -14.88490295]
[173.70460510 -7.92454720]
[172.31262207 14.48606110]
[157.21177673 31.34353638]
[134.73748779 35.24436951]
[129.03282166 49.11725235]
[123.32816315 62.99013138]
[117.62349701 76.86301422]
[128.08052063 88.90525818]
[130.86425781 105.21197510]
[124.56006622 121.14675140]
[110.42805481 131.85450745]
[92.20044708 133.73646545]
[90.96983337 148.68591309]
[106.87503815 153.24610901]
[121.51267242 160.94947815]
[134.26939392 171.47087097]
[144.61112976 184.36711121]
[152.10548401 199.09565735]
[156.43980408 215.03744507]
[157.43417358 231.52288818]
[155.04895020 247.85997009]
[149.38627625 263.36337280]
[140.68579102 277.38314819]
[129.31437683 289.33200073]
[115.75080872 298.70989990]
[100.56549072 305.12500000]
[84.39653015 308.30996704]
[84.39653015 323.30996704]
[84.39653015 338.30996704]
[84.39653015 353.30996704]
[84.39653015 368.30996704]
[84.39653015 383.30996704]
[84.39653015 398.30996704]
[84.39653015 413.30996704]
[84.39653015 428.30996704]
[84.39653015 443.30996704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[28 129]
[29 128]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 123]
[50 122]
[51 121]
[52 120]
[59 86]
[60 85]
[61 84]
[62 83]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
