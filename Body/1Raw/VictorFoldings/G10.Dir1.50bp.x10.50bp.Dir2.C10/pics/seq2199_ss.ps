%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAGAAUCUUAGUUCAACUUUAAxxxxxxxxxxUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.29148865 648.68530273]
[141.29148865 633.68530273]
[141.29148865 618.68530273]
[141.29148865 603.68530273]
[141.29148865 588.68530273]
[141.29148865 573.68530273]
[141.29148865 558.68530273]
[141.29148865 543.68530273]
[141.29148865 528.68530273]
[141.29148865 513.68530273]
[126.68724823 510.38107300]
[113.17801666 503.90658569]
[101.44271851 494.58361816]
[92.07191467 482.87722778]
[85.53807831 469.37249756]
[82.17178345 454.74536133]
[82.14501190 439.72866821]
[85.46231079 425.07553101]
[91.96044159 411.52154541]
[101.31641388 399.74786377]
[113.06352234 390.34701538]
[126.61462402 383.79290771]
[141.29148865 380.41720581]
[141.29148865 365.41720581]
[127.59758759 353.33935547]
[127.00488281 334.77203369]
[140.34909058 321.39550781]
[139.72511292 306.40847778]
[139.10113525 291.42147827]
[138.47715759 276.43444824]
[137.85317993 261.44741821]
[129.59313965 249.05303955]
[136.74967957 234.94294739]
[133.80419922 220.23498535]
[128.50273132 215.01577759]
[128.65040588 205.81631470]
[123.74884796 191.63977051]
[118.84729767 177.46321106]
[113.94574738 163.28665161]
[109.04419708 149.11009216]
[104.14264679 134.93353271]
[99.24109650 120.75697327]
[88.12492371 117.04143524]
[80.78999329 107.89959717]
[79.57187653 96.24237823]
[66.79451752 88.38495636]
[54.01716232 80.52752686]
[41.23980713 72.67010498]
[28.46244812 64.81267548]
[11.80305386 61.66610718]
[10.21487617 44.78670883]
[25.99496841 38.58791733]
[36.31987381 52.03532028]
[49.09723282 59.89274597]
[61.87458801 67.75016785]
[74.65194702 75.60759735]
[87.42930603 83.46501923]
[89.67701721 81.97602081]
[92.09866333 80.79071045]
[91.78660583 65.79396057]
[83.01352692 56.28149796]
[83.09795380 43.74308395]
[91.44651031 34.93349075]
[91.44651031 19.93349266]
[91.44651031 4.93349218]
[91.44651031 -10.06650734]
[91.44651031 -25.06650734]
[91.44651031 -40.06650925]
[91.44651031 -55.06650925]
[91.44651031 -70.06650543]
[78.10538483 -77.67636108]
[70.37041473 -90.94534302]
[70.32227325 -106.30416107]
[77.97390747 -119.62136841]
[91.26706696 -127.31470490]
[106.62595367 -127.31470490]
[119.91912079 -119.62136841]
[127.57075500 -106.30416107]
[127.52260590 -90.94534302]
[119.78763580 -77.67636108]
[106.44651031 -70.06650543]
[106.44651031 -55.06650925]
[106.44651031 -40.06650925]
[106.44651031 -25.06650734]
[106.44651031 -10.06650734]
[106.44651031 4.93349218]
[106.44651031 19.93349266]
[106.44651031 34.93349075]
[116.03762054 49.59673309]
[106.78336334 65.48190308]
[107.09542084 80.47865295]
[120.44689178 96.34590149]
[113.41765594 115.85542297]
[118.31920624 130.03198242]
[123.22075653 144.20854187]
[128.12231445 158.38510132]
[133.02386475 172.56166077]
[137.92541504 186.73822021]
[142.82696533 200.91476440]
[147.87571716 215.03958130]
[151.18655396 200.40951538]
[159.47465515 187.90722656]
[171.66072083 179.16081238]
[186.15782166 175.30928040]
[201.07804871 176.85418701]
[214.47842407 183.59436035]
[224.61389160 194.65203857]
[230.16453552 208.58726501]
[230.40754700 223.58529663]
[225.31126404 237.69300842]
[215.53935242 249.07325745]
[202.36436462 256.24401855]
[187.50202942 258.27148438]
[172.88775635 254.89161682]
[160.42474365 246.54458618]
[151.73669434 234.31896973]
[160.04136658 247.78533936]
[152.84019470 260.82345581]
[153.46417236 275.81048584]
[154.08815002 290.79748535]
[154.71212769 305.78451538]
[155.33610535 320.77151489]
[165.54609680 327.01083374]
[171.39010620 337.31405640]
[171.50321960 349.03845215]
[165.97367859 359.24096680]
[156.29148865 365.41720581]
[156.29148865 380.41720581]
[170.96836853 383.79290771]
[184.51947021 390.34701538]
[196.26657104 399.74786377]
[205.62254333 411.52154541]
[212.12068176 425.07553101]
[215.43797302 439.72866821]
[215.41120911 454.74536133]
[212.04490662 469.37249756]
[205.51107788 482.87722778]
[196.14025879 494.58361816]
[184.40496826 503.90658569]
[170.89573669 510.38107300]
[156.29148865 513.68530273]
[156.29148865 528.68530273]
[156.29148865 543.68530273]
[156.29148865 558.68530273]
[156.29148865 573.68530273]
[156.29148865 588.68530273]
[156.29148865 603.68530273]
[156.29148865 618.68530273]
[156.29148865 633.68530273]
[156.29148865 648.68530273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[27 122]
[28 121]
[29 120]
[30 119]
[31 118]
[33 116]
[34 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[45 57]
[46 56]
[47 55]
[48 54]
[49 53]
[59 91]
[60 90]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
