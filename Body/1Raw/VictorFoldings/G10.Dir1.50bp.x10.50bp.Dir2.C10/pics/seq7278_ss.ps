%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACxxxxxxxxxxCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.83296204 298.63772583]
[80.83296204 283.63772583]
[80.83296204 268.63772583]
[80.83296204 253.63771057]
[80.83296204 238.63771057]
[80.83296204 223.63771057]
[80.83296204 208.63771057]
[80.83296204 193.63771057]
[80.83296204 178.63771057]
[80.83296204 163.63771057]
[74.10497284 160.32347107]
[67.47647858 173.77943420]
[60.84777069 187.23529053]
[47.39200974 180.60638428]
[54.02051163 167.15092468]
[60.64900970 153.69496155]
[53.92102814 150.38072205]
[42.02864838 159.52244568]
[30.13626862 168.66418457]
[26.63865852 184.32133484]
[12.15415001 191.21905518]
[-2.20598435 184.06600952]
[-5.42587662 168.34939575]
[4.96449804 156.12565613]
[20.99453354 156.77180481]
[32.88691330 147.63006592]
[44.77929306 138.48834229]
[39.00302124 124.64511871]
[24.13997459 126.66744995]
[9.27692699 128.68978882]
[-5.58611965 130.71212769]
[-20.44916725 132.73445129]
[-33.07778168 143.19630432]
[-48.35607529 137.23762512]
[-50.56704330 120.98819733]
[-37.43623734 111.16404724]
[-22.47150040 117.87140656]
[-7.60845423 115.84907532]
[7.25459290 113.82674408]
[22.11763954 111.80440521]
[36.98068619 109.78207397]
[43.46249771 79.11790466]
[63.03217697 56.91976547]
[89.34580994 47.81248474]
[115.01002502 52.55722427]
[121.63851929 39.10125732]
[128.26702881 25.64529419]
[134.89552307 12.18932819]
[134.84075928 5.47333908]
[137.78231812 0.51566154]
[142.08990479 -1.67983770]
[149.27241516 -14.84842014]
[156.45492554 -28.01700211]
[153.56968689 -40.63164520]
[159.87445068 -51.46994781]
[171.49726868 -54.96532059]
[158.31817627 -47.80211639]
[143.92448425 -43.58051300]
[128.96414185 -42.49055099]
[114.11056519 -44.58128738]
[100.03237915 -49.75861359]
[87.36331177 -57.78947067]
[76.67364502 -68.31235504]
[68.44458008 -80.85359192]
[63.04654312 -94.84863281]
[60.72251892 -109.66749573]
[61.57712173 -124.64313507]
[65.57188416 -139.10140991]
[72.52698517 -152.39151001]
[82.12934113 -163.91516113]
[93.94671631 -173.15365601]
[107.44714355 -179.69111633]
[122.02291870 -183.23327637]
[137.01791382 -183.62066650]
[151.75714111 -180.83586121]
[165.57711792 -175.00421143]
[177.85575867 -166.38821411]
[188.04032898 -155.37574768]
[195.67237854 -142.46250916]
[200.40837097 -128.22978210]
[202.03509521 -113.31825256]
[200.47933960 -98.39915466]
[195.81112671 -84.14405060]
[188.23924255 -71.19281006]
[201.48182678 -78.23794556]
[214.72442627 -85.28308105]
[227.96701050 -92.32821655]
[237.31727600 -108.15705872]
[254.79637146 -106.93998718]
[267.88952637 -114.25909424]
[272.16699219 -126.47208405]
[283.27606201 -132.28652954]
[294.97460938 -129.05375671]
[308.21719360 -136.09889221]
[321.45977783 -143.14402771]
[334.70236206 -150.18916321]
[347.94494629 -157.23429871]
[361.18753052 -164.27941895]
[365.56448364 -179.46553040]
[379.43786621 -187.03552246]
[394.57687378 -182.49826050]
[401.99975586 -168.54560852]
[397.30267334 -153.45544434]
[383.27233887 -146.18049622]
[368.23266602 -151.03683472]
[354.99008179 -143.99169922]
[341.74749756 -136.94656372]
[328.50491333 -129.90144348]
[315.26232910 -122.85630035]
[302.01974487 -115.81116486]
[293.57919312 -100.45679474]
[275.20861816 -101.16593933]
[262.11547852 -93.84683228]
[258.49938965 -82.26100922]
[247.59608459 -76.06932068]
[235.01214600 -79.08562469]
[221.76956177 -72.04048920]
[208.52696228 -64.99535370]
[195.28437805 -57.95022202]
[184.51358032 -47.51041031]
[185.54875183 -30.01960182]
[169.62350464 -20.83449364]
[162.44099426 -7.66591120]
[155.25848389 5.50267124]
[148.35148621 18.81782722]
[141.72299194 32.27379227]
[135.09448242 45.72975922]
[128.46598816 59.18572235]
[136.78163147 64.90483856]
[143.92864990 72.33055115]
[149.55519104 81.21977234]
[153.36087036 91.25674438]
[155.11172485 102.06407928]
[154.65287781 113.21694183]
[151.91798401 124.25970459]
[146.93531799 134.72454834]
[139.82986450 144.15124512]
[130.82121277 152.10720825]
[120.21737671 158.20692444]
[108.40449524 162.13017273]
[95.83296204 163.63771057]
[95.83296204 178.63771057]
[95.83296204 193.63771057]
[95.83296204 208.63771057]
[95.83296204 223.63771057]
[95.83296204 238.63771057]
[95.83296204 253.63771057]
[95.83296204 268.63772583]
[95.83296204 283.63772583]
[95.83296204 298.63772583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 27]
[18 26]
[19 25]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[45 128]
[46 127]
[47 126]
[48 125]
[51 124]
[52 123]
[53 122]
[56 120]
[84 119]
[85 118]
[86 117]
[87 116]
[89 113]
[90 112]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
