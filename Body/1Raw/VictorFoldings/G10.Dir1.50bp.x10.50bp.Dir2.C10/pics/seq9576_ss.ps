%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGxxxxxxxxxxAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 293.53323364]
[92.50000000 278.53323364]
[92.50000000 263.53323364]
[92.50000000 248.53323364]
[92.50000000 233.53323364]
[92.50000000 218.53323364]
[92.50000000 203.53323364]
[92.50000000 188.53323364]
[92.50000000 173.53323364]
[92.50000000 158.53323364]
[65.80382538 148.09378052]
[47.17621613 126.30661011]
[41.01235962 98.31240845]
[26.19460106 95.98130798]
[11.37684345 93.65019989]
[-3.44091439 91.31909943]
[-18.25867271 88.98799133]
[-33.07643127 86.65689087]
[-47.89418793 84.32578278]
[-62.71194839 81.99468231]
[-77.54688263 87.49333191]
[-88.91709900 77.87213135]
[-103.73485565 75.54103088]
[-108.72412872 77.47151184]
[-113.46881866 77.27091217]
[-117.18473816 75.40177155]
[-119.39237976 72.57444763]
[-134.03588867 69.32362366]
[-148.67938232 66.07279968]
[-163.32289124 62.82197189]
[-169.88671875 76.38710022]
[-179.40242004 88.07247925]
[-191.35684204 97.24792480]
[-205.10527039 103.41861725]
[-219.90628052 106.25177765]
[-234.96166992 105.59461975]
[-249.45953369 101.48258209]
[-262.61801147 94.13742065]
[-273.72744751 83.95525360]
[-282.18878174 71.48518372]
[-287.54568481 57.39972305]
[-289.50927734 42.45846558]
[-287.97363281 27.46718597]
[-283.02157593 13.23433876]
[-274.92019653 0.52748597]
[-264.10635376 -9.96810818]
[-251.16322327 -17.68642998]
[-236.78884888 -22.21124077]
[-221.75839233 -23.29852104]
[-206.88243103 -20.88963699]
[-192.96322632 -15.11449528]
[-180.75140381 -6.28454304]
[-170.90553284 5.12403154]
[-163.95658875 18.49597931]
[-160.27932739 33.11016464]
[-160.07206726 48.17847061]
[-145.42855835 51.42929459]
[-130.78506470 54.68012238]
[-116.14155579 57.93094635]
[-101.40374756 60.72327042]
[-86.58599091 63.05437469]
[-72.81092072 57.38898468]
[-60.38084412 67.17692566]
[-45.56308365 69.50802612]
[-30.74532700 71.83913422]
[-15.92756844 74.17023468]
[-1.10981059 76.50134277]
[13.70794773 78.83244324]
[28.52570534 81.16354370]
[43.34346390 83.49465179]
[47.67574692 72.71333313]
[54.03653717 62.98987198]
[62.17924118 54.70121765]
[71.78817749 48.16870880]
[82.49083710 43.64559555]
[93.87229156 41.30723190]
[105.49130249 41.24427414]
[116.89743042 43.45915985]
[127.64847565 47.86602402]
[137.32763672 54.29401779]
[145.55969238 62.49394608]
[152.02548218 72.14791107]
[166.04219055 66.80639648]
[180.05891418 61.46488571]
[194.07562256 56.12337112]
[179.33387756 53.35187912]
[165.55325317 47.42782211]
[153.39904785 38.63719940]
[143.45800781 27.40440178]
[136.21008301 14.27171230]
[132.00517273 -0.12685403]
[131.04626465 -15.09617329]
[133.37968445 -29.91356659]
[138.89277649 -43.86368942]
[147.31935120 -56.27307129]
[158.25262451 -66.54261017]
[171.16476440 -74.17653656]
[185.43240356 -78.80628967]
[200.36672974 -80.20835876]
[215.24676514 -78.31506348]
[229.35412598 -73.21780396]
[242.00778198 -65.16266632]
[252.59680176 -54.53852081]
[260.61001587 -41.85828018]
[265.66055298 -27.73410988]
[267.50454712 -12.84788799]
[266.05303955 2.08171773]
[261.37609863 16.33394623]
[253.69946289 29.22073746]
[243.39378357 40.11995316]
[230.95657349 48.50540924]
[216.99031067 53.97172546]
[231.75636292 56.61058807]
[246.52241516 59.24945450]
[259.34454346 50.00993729]
[274.93087769 52.62565231]
[284.03430176 65.54474640]
[281.25393677 81.10254669]
[268.23931885 90.06888580]
[252.71179199 87.12419891]
[243.88354492 74.01551056]
[229.11749268 71.37664795]
[214.35144043 68.73777771]
[199.41712952 70.14008331]
[185.40042114 75.48159790]
[171.38371277 80.82311249]
[157.36698914 86.16461945]
[158.61071777 93.13169861]
[159.01144409 100.19756317]
[158.56341553 107.26058197]
[157.27307129 114.21917725]
[155.15896606 120.97325134]
[152.25152588 127.42567444]
[148.59254456 133.48364258]
[144.23466492 139.05999756]
[139.24055481 144.07456970]
[133.68206787 148.45521545]
[127.63911438 152.13894653]
[121.19863892 155.07275391]
[114.45325470 157.21444702]
[107.50000000 158.53323364]
[107.50000000 173.53323364]
[107.50000000 188.53323364]
[107.50000000 203.53323364]
[107.50000000 218.53323364]
[107.50000000 233.53323364]
[107.50000000 248.53323364]
[107.50000000 263.53323364]
[107.50000000 278.53323364]
[107.50000000 293.53323364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[22 61]
[23 60]
[27 59]
[28 58]
[29 57]
[30 56]
[82 127]
[83 126]
[84 125]
[85 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
