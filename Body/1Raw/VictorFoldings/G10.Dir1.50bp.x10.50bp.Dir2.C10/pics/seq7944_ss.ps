%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCxxxxxxxxxxCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[146.33522034 272.62268066]
[155.80662537 260.91342163]
[167.57402039 251.51435852]
[160.94552612 238.05839539]
[154.31703186 224.60241699]
[141.75198364 216.60435486]
[142.59455872 200.80560303]
[135.96604919 187.34963989]
[129.33755493 173.89366150]
[122.70905304 160.43769836]
[110.14402008 152.43963623]
[110.98657990 136.64086914]
[104.35808563 123.18491364]
[97.72958374 109.72894287]
[94.77491760 112.01623535]
[90.96359253 113.46466827]
[77.30735016 119.67007446]
[63.65111160 125.87548828]
[49.99486923 132.08088684]
[40.63184357 144.83410645]
[25.84385681 143.05513000]
[12.18761539 149.26054382]
[-1.46862555 155.46594238]
[-15.12486649 161.67135620]
[-20.44053459 176.55487061]
[-34.75908279 183.24476624]
[-49.58557510 177.77203369]
[-56.12371063 163.38356018]
[-50.49453354 148.61576843]
[-36.03773499 142.23011780]
[-21.33027458 148.01510620]
[-7.67403269 141.80970764]
[5.98220873 135.60429382]
[19.63845062 129.39889526]
[28.02468872 117.08953094]
[43.78946304 118.42465210]
[57.44570160 112.21924591]
[71.10194397 106.01383972]
[84.75818634 99.80842590]
[93.26927185 87.45685577]
[94.20490265 72.48606873]
[95.14053345 57.51527405]
[84.26546478 52.15189743]
[75.88033295 43.44094086]
[70.96357727 32.43289185]
[70.07733917 20.44417763]
[73.30329132 8.89977264]
[80.23575592 -0.83618540]
[90.03251648 -7.62158298]
[101.51712036 -10.67029095]
[103.38473511 -25.55357170]
[105.25234985 -40.43685150]
[107.11996460 -55.32012939]
[99.82022858 -66.00505829]
[101.72336578 -78.39849091]
[111.26200867 -85.90325165]
[113.43885040 -100.74446106]
[115.61568451 -115.58566284]
[106.45213318 -128.18197632]
[108.87117004 -143.20205688]
[120.93630219 -151.86047363]
[123.11313629 -166.70169067]
[125.28997803 -181.54289246]
[127.46681213 -196.38409424]
[129.02439880 -211.30300903]
[129.96002197 -226.27380371]
[130.89564514 -241.24459839]
[116.75173187 -246.57759094]
[104.80913544 -255.84396362]
[96.12978363 -268.21975708]
[91.48545837 -282.60455322]
[91.28910828 -297.71920776]
[95.55820465 -312.21975708]
[103.91313934 -324.81683350]
[115.61100006 -334.39031982]
[129.61161804 -340.08892822]
[144.67005920 -341.40594482]
[159.44735718 -338.22427368]
[172.62950134 -330.82684326]
[183.04437256 -319.87136841]
[189.76585388 -306.33206177]
[192.19630432 -291.41281128]
[190.11959839 -276.44021606]
[183.72039795 -262.74563599]
[173.56770325 -251.54676819]
[160.56430054 -243.83944702]
[145.86643982 -240.30895996]
[144.93081665 -225.33816528]
[143.99517822 -210.36738586]
[145.81434631 -208.15423584]
[146.83697510 -205.06422424]
[146.71578979 -201.40811157]
[145.22654724 -197.61953735]
[142.30801392 -194.20726013]
[140.13117981 -179.36605835]
[137.95434570 -164.52484131]
[135.77751160 -149.68363953]
[144.84797668 -137.92515564]
[142.85177612 -122.84304810]
[130.45689392 -113.40882874]
[128.28005981 -98.56761932]
[126.10321808 -83.72641754]
[133.46482849 -67.82652283]
[122.00324249 -53.45251846]
[120.13562775 -38.56923676]
[118.26801300 -23.68595695]
[116.40040588 -8.80267811]
[131.29492188 1.39296770]
[139.04287720 17.78874397]
[137.44853210 35.93755341]
[126.86296082 50.86906052]
[110.11132050 58.45090103]
[109.17569733 73.42169189]
[108.24006653 88.39248657]
[111.18554688 103.10044861]
[117.81404877 116.55641174]
[124.44254303 130.01237488]
[137.48170471 138.97291565]
[136.16502380 153.80920410]
[142.79351807 167.26516724]
[149.42201233 180.72113037]
[156.05052185 194.17709351]
[169.08967590 203.13763428]
[167.77299500 217.97392273]
[174.40148926 231.42988586]
[181.02998352 244.88584900]
[195.65344238 241.28462219]
[210.70916748 240.91163635]
[225.49299622 243.78436279]
[239.31344604 249.76843262]
[251.52413940 258.58395386]
[261.55392456 269.81860352]
[268.93371582 282.94689941]
[273.31832886 297.35485840]
[274.50271606 312.36856079]
[272.43142700 327.28579712]
[267.20141602 341.40887451]
[259.05722046 354.07717896]
[248.37982178 364.69827271]
[235.66857910 372.77529907]
[221.51805115 377.93054199]
[206.59007263 379.92285156]
[191.58283997 378.65908813]
[177.19827271 374.19830322]
[164.10919189 366.74914551]
[152.92774963 356.66006470]
[144.17697144 344.40292358]
[138.26609802 330.55099487]
[135.47163391 315.75216675]
[135.92425537 300.69863892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[7 122]
[8 121]
[9 120]
[10 119]
[12 117]
[13 116]
[14 115]
[16 39]
[17 38]
[18 37]
[19 36]
[21 34]
[22 33]
[23 32]
[24 31]
[40 114]
[41 113]
[42 112]
[50 107]
[51 106]
[52 105]
[53 104]
[56 102]
[57 101]
[58 100]
[61 97]
[62 96]
[63 95]
[64 94]
[65 89]
[66 88]
[67 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
