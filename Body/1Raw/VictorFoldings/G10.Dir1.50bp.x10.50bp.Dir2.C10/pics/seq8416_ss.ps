%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUxxxxxxxxxxUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.01088715 283.02801514]
[99.01088715 268.02801514]
[99.01088715 253.02799988]
[99.01088715 238.02799988]
[99.01088715 223.02799988]
[99.01088715 208.02799988]
[99.01088715 193.02799988]
[99.01088715 178.02799988]
[99.01088715 163.02799988]
[99.01088715 148.02799988]
[67.36689758 121.14443970]
[72.62007904 88.41275024]
[60.72769547 79.27101135]
[48.83531570 70.12928009]
[36.94293594 60.98754501]
[25.05055618 51.84581375]
[13.15817738 42.70407867]
[1.26579726 33.56234360]
[-10.62658215 24.42061043]
[-20.80413246 35.45345688]
[-31.92969513 45.52957153]
[-43.91369247 54.56782532]
[-56.65963745 62.49544525]
[-70.06490326 69.24860382]
[-84.02155304 74.77291870]
[-98.41722107 79.02391815]
[-113.13599396 81.96737671]
[-128.05937195 83.57959747]
[-143.06718445 83.84758759]
[-158.03858948 82.76919556]
[-172.85307312 80.35310364]
[-187.39132690 76.61877441]
[-201.53631592 71.59626007]
[-215.17413330 65.32600403]
[-228.19499207 57.85849762]
[-240.49403381 49.25386047]
[-251.97224426 39.58137512]
[-262.53720093 28.91892052]
[-272.10385132 17.35234833]
[-280.59515381 4.97478294]
[-287.94271851 -8.11411381]
[-294.08743286 -21.80895615]
[-298.97979736 -35.99948120]
[-302.58044434 -50.57142639]
[-304.86035156 -65.40747070]
[-305.80117798 -80.38816833]
[-305.39532471 -95.39288330]
[-303.64611816 -110.30081177]
[-300.56756592 -124.99192810]
[-296.18450928 -139.34794617]
[-290.53222656 -153.25326538]
[-283.65621948 -166.59593201]
[-275.61184692 -179.26850891]
[-266.46389771 -191.16897583]
[-256.28601074 -202.20152283]
[-245.16014099 -212.27729797]
[-233.17587280 -221.31518555]
[-220.42968750 -229.24241638]
[-207.02421570 -235.99516296]
[-193.06738281 -241.51905823]
[-178.67160034 -245.76960754]
[-163.95272827 -248.71261597]
[-149.02931213 -250.32438660]
[-134.02148438 -250.59191895]
[-119.05010223 -249.51306152]
[-104.23570251 -247.09652710]
[-89.69755554 -243.36174011]
[-75.55272675 -238.33880615]
[-61.91509628 -232.06813049]
[-48.89447021 -224.60021973]
[-36.59569168 -215.99520874]
[-25.11777687 -206.32237244]
[-14.55314445 -195.65960693]
[-4.98685741 -184.09274292]
[3.50406265 -171.71492004]
[10.85124969 -158.62579346]
[16.99554825 -144.93075562]
[21.88748550 -130.74008179]
[25.48767281 -116.16802979]
[27.76712608 -101.33191681]
[28.70749092 -86.35119629]
[28.30119514 -71.34648895]
[26.55151176 -56.43861008]
[23.47252655 -41.74758911]
[19.08903122 -27.39171410]
[13.43631935 -13.48656750]
[6.55990410 -0.14411028]
[-1.48484826 12.52822971]
[10.40753174 21.66996384]
[22.29991150 30.81169891]
[34.19229126 39.95343399]
[46.08467102 49.09516525]
[57.97705078 58.23690033]
[69.86943054 67.37863159]
[81.76181030 76.52037048]
[91.50344849 67.70671082]
[105.38563538 63.33968353]
[121.24665070 65.26799774]
[136.15184021 74.26406860]
[146.92683411 89.72678375]
[161.74459839 87.39567566]
[176.56236267 85.06457520]
[191.38011169 82.73346710]
[206.19787598 80.40236664]
[214.25015259 75.95124054]
[221.34785461 78.18024445]
[236.21089172 76.15790558]
[251.07394409 74.13557434]
[265.95327759 66.00896454]
[277.88128662 78.05714417]
[269.60598755 92.85428619]
[253.09628296 88.99861908]
[238.23323059 91.02095032]
[223.37017822 93.04328918]
[208.52897644 95.22012329]
[193.71121216 97.55123138]
[178.89346313 99.88233185]
[164.07569885 102.21343994]
[149.25794983 104.54454041]
[146.77282715 119.33724976]
[160.01541138 126.38238525]
[173.25799561 133.42752075]
[186.50057983 140.47265625]
[203.32380676 142.57395935]
[205.96174622 159.32142639]
[190.59902954 166.49243164]
[179.45544434 153.71524048]
[166.21286011 146.67010498]
[152.97027588 139.62496948]
[139.72769165 132.57983398]
[133.29849243 136.44187927]
[141.54232788 148.97340393]
[149.78617859 161.50491333]
[162.42489624 169.58345032]
[162.21636963 184.58200073]
[149.35795593 192.30604553]
[136.01875305 185.44560242]
[134.82286072 170.49343872]
[127.63146973 157.32969666]
[120.44008636 144.16595459]
[114.01088715 148.02799988]
[114.01088715 163.02799988]
[114.01088715 178.02799988]
[114.01088715 193.02799988]
[114.01088715 208.02799988]
[114.01088715 223.02799988]
[114.01088715 238.02799988]
[114.01088715 253.02799988]
[114.01088715 268.02801514]
[114.01088715 283.02801514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 95]
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[18 89]
[19 88]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[106 114]
[107 113]
[108 112]
[120 130]
[121 129]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
