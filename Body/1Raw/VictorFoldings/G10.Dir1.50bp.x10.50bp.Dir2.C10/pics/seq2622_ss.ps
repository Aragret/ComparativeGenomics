%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAxxxxxxxxxxACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.05892181 331.74948120]
[112.05892181 316.74948120]
[112.05892181 301.74948120]
[112.05892181 286.74948120]
[112.05892181 271.74948120]
[112.05892181 256.74948120]
[112.05892181 241.74948120]
[112.05892181 226.74948120]
[112.05892181 211.74948120]
[112.05892181 196.74948120]
[106.90768433 188.37020874]
[109.92716980 177.70576477]
[106.61053467 163.07704163]
[103.29389191 148.44830322]
[99.97725677 133.81956482]
[96.66061401 119.19082642]
[80.71520996 110.34654236]
[77.75789642 90.23613739]
[62.76482773 90.69210052]
[47.77175903 91.14807129]
[32.77869034 91.60404205]
[28.50339890 106.10160065]
[19.96794319 118.55104065]
[8.01860428 127.74024963]
[-6.16671038 132.77929688]
[-21.19457626 133.18652344]
[-35.59292603 128.93464661]
[-47.95524979 120.45213318]
[-57.07798386 108.58007050]
[-62.07769012 94.48880005]
[-77.07076263 94.94477081]
[-92.06382751 95.40073395]
[-107.05689240 95.85670471]
[-114.91085815 109.13520813]
[-128.70718384 116.03919983]
[-144.04350281 114.36563873]
[-156.02606201 104.64854431]
[-160.83125305 89.98861694]
[-156.92578125 75.06377411]
[-145.55586243 64.63648987]
[-130.34957886 62.03406906]
[-116.15921783 68.08692932]
[-107.51286316 80.86363220]
[-92.51979828 80.40766907]
[-77.52672577 79.95169830]
[-62.53365707 79.49573517]
[-58.39948273 65.12668610]
[-50.01504517 52.72219467]
[-38.19102859 43.50412750]
[-24.07766342 38.38515472]
[-9.05282402 37.87842941]
[5.41248512 42.04615021]
[17.89814758 50.49224854]
[27.17435265 62.39999771]
[32.32272339 76.61096954]
[47.31579208 76.15500641]
[62.30886078 75.69903564]
[77.30192566 75.24307251]
[90.34268188 67.83100128]
[98.40573883 55.18239975]
[106.46879578 42.53379822]
[114.53185272 29.88519669]
[101.13096619 36.62436676]
[86.49000549 39.88658905]
[71.49566650 39.47428513]
[57.05609512 35.41242599]
[44.04580307 27.94702148]
[33.25275421 17.53020287]
[25.33062363 4.79286289]
[20.75921059 -9.49357033]
[19.81538010 -24.46384621]
[22.55629349 -39.21129990]
[28.81595230 -52.84275818]
[38.21524048 -64.53264618]
[50.18489456 -73.57295990]
[63.99998474 -79.41619110]
[78.82380676 -81.70843506]
[93.75855255 -80.31087494]
[107.89972687 -75.30814362]
[120.39086151 -67.00324249]
[130.47544861 -55.89913559]
[137.54272461 -42.66834641]
[141.16464233 -28.11219215]
[141.12185669 -13.11225319]
[137.41696167 1.42300618]
[130.27221680 14.61624622]
[143.16007996 6.94140720]
[146.76690674 1.28718483]
[151.92567444 -1.26872456]
[156.72941589 -0.77109772]
[169.91772461 -7.91734409]
[174.51583862 -22.80005455]
[187.99244690 -29.85949135]
[202.15249634 -25.38417053]
[215.34078979 -32.53041458]
[228.52909851 -39.67666245]
[241.71739197 -46.82291031]
[245.55038452 -52.32631683]
[250.80850220 -54.67106628]
[255.58813477 -53.97917175]
[269.05520630 -60.58508301]
[282.52227783 -67.19099426]
[289.05090332 -81.84556580]
[304.61444092 -85.73863220]
[317.27386475 -75.88375854]
[317.31796265 -59.84076309]
[304.71289062 -49.91646194]
[289.12820435 -53.72393036]
[275.66113281 -47.11801529]
[262.19406128 -40.51210403]
[248.86363220 -33.63461304]
[235.67533875 -26.48836708]
[222.48704529 -19.34211922]
[209.29875183 -12.19587326]
[205.31578064 2.11047339]
[192.04277039 9.54565525]
[177.06396484 5.27095270]
[163.87567139 12.41719913]
[150.83491516 19.82926369]
[137.94705200 27.50410271]
[127.18045044 37.94824982]
[119.11739349 50.59685516]
[111.05434418 63.24545670]
[102.99128723 75.89405823]
[115.28352356 82.69491577]
[121.21885681 94.64145660]
[119.40954590 107.14276123]
[111.28935242 115.87419128]
[114.60599518 130.50292969]
[117.92263031 145.13166809]
[121.23927307 159.76039124]
[124.55590820 174.38912964]
[130.84892273 160.77304077]
[142.27317810 151.05262756]
[156.72122192 147.02099609]
[171.52783203 149.42189026]
[183.96163940 157.81237793]
[191.72897339 170.64471436]
[193.39700317 185.55168152]
[188.65800476 199.78340149]
[178.38621521 210.71455383]
[164.47645569 216.32867432]
[149.49464417 215.59013367]
[136.20448303 208.63514709]
[127.05892181 196.74948120]
[127.05892181 211.74948120]
[127.05892181 226.74948120]
[127.05892181 241.74948120]
[127.05892181 256.74948120]
[127.05892181 271.74948120]
[127.05892181 286.74948120]
[127.05892181 301.74948120]
[127.05892181 316.74948120]
[127.05892181 331.74948120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[12 132]
[13 131]
[14 130]
[15 129]
[16 128]
[18 58]
[19 57]
[20 56]
[21 55]
[30 46]
[31 45]
[32 44]
[33 43]
[59 124]
[60 123]
[61 122]
[62 121]
[86 120]
[87 119]
[90 118]
[91 117]
[94 114]
[95 113]
[96 112]
[97 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
