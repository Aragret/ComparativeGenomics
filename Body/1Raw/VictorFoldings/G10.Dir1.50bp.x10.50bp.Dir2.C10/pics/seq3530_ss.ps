%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAxxxxxxxxxxCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[249.22166443 88.36759186]
[234.31976318 90.08028412]
[219.41784668 91.79296875]
[204.51594543 93.50566101]
[189.63267517 95.37327576]
[174.76962280 97.39560699]
[159.90657043 99.41794586]
[145.04353333 101.44027710]
[130.18048096 103.46260834]
[115.31743622 105.48494720]
[102.36112213 116.09762573]
[86.90287781 109.65265656]
[72.08511353 111.98376465]
[57.26735687 114.31486511]
[54.87203979 130.53488159]
[47.61355209 145.21592712]
[36.20543289 156.94052124]
[21.76124763 164.58058167]
[5.68590927 167.40588379]
[-10.46098614 165.15390015]
[-25.11645699 158.05416870]
[-36.86542892 146.80487061]
[-44.57737732 132.50424194]
[-59.28533554 135.44972229]
[-73.99330139 138.39520264]
[-76.56135559 153.35412598]
[-84.36313629 166.37321472]
[-96.34352875 175.69174194]
[-110.88226318 180.04943848]
[-126.01310730 178.85697937]
[-139.68974304 172.27561951]
[-150.06250000 161.19544983]
[-155.72856140 147.11495972]
[-155.92164612 131.93843079]
[-150.61561584 117.71834564]
[-140.52809143 106.37787628]
[-127.02332306 99.45071411]
[-111.92771149 97.87371063]
[-97.28282166 101.86013031]
[-85.06925201 110.87084961]
[-76.93878174 123.68724060]
[-62.23081970 120.74176025]
[-47.52285767 117.79627991]
[-46.49982452 104.13302612]
[-41.95183563 91.19479370]
[-34.18606186 79.87551117]
[-23.73223495 70.95909882]
[-11.30652618 65.06514740]
[2.23752284 62.60589600]
[15.96762848 63.75740433]
[28.93693352 68.44694519]
[40.24930954 76.35757446]
[49.12127686 86.94953918]
[54.93625259 99.49710846]
[69.75401306 97.16600800]
[84.57176971 94.83489990]
[92.01478577 85.82450104]
[103.57805634 84.12844849]
[113.29510498 90.62190247]
[128.15815735 88.59956360]
[143.02119446 86.57723236]
[157.88424683 84.55489349]
[172.74728394 82.53256226]
[187.61033630 80.51023102]
[195.75347900 76.22757721]
[202.80326843 78.60375977]
[217.70516968 76.89106750]
[232.60707092 75.17838287]
[247.50897217 73.46569061]
[246.91415405 58.47040939]
[247.44160461 43.47261047]
[249.08836365 28.55616379]
[251.84524536 13.80449104]
[255.69680786 -0.69990915]
[260.62152100 -14.87592220]
[266.59185791 -28.64426994]
[273.57440186 -41.92795181]
[281.53015137 -54.65267944]
[290.41455078 -66.74729156]
[300.17794800 -78.14414215]
[310.76571655 -88.77951050]
[322.11868286 -98.59390259]
[334.17333984 -107.53244019]
[346.86227417 -115.54513550]
[360.11453247 -122.58717346]
[373.85595703 -128.61917114]
[388.00976562 -133.60739136]
[402.49673462 -137.52395630]
[417.23590088 -140.34693909]
[432.14480591 -142.06057739]
[447.14010620 -142.65525818]
[462.13790894 -142.12768555]
[477.05432129 -140.48077393]
[491.80596924 -137.72377014]
[506.31033325 -133.87207031]
[520.48632812 -128.94723511]
[534.25457764 -122.97678375]
[547.53820801 -115.99411011]
[560.26287842 -108.03827667]
[572.35742188 -99.15377045]
[583.75421143 -89.39027405]
[594.38946533 -78.80239105]
[604.20373535 -67.44934082]
[613.14221191 -55.39460373]
[621.15478516 -42.70560074]
[628.19665527 -29.45329666]
[634.22857666 -15.71180248]
[639.21667480 -1.55796742]
[643.13311768 12.92905331]
[645.95593262 27.66824150]
[647.66943359 42.57717133]
[648.26397705 57.57246017]
[647.73626709 72.57025146]
[646.08923340 87.48667145]
[643.33209229 102.23828888]
[639.48028564 116.74262238]
[634.55529785 130.91854858]
[628.58477783 144.68679810]
[621.60198975 157.97035217]
[613.64599609 170.69494629]
[604.76141357 182.78939819]
[594.99780273 194.18608093]
[584.40985107 204.82125854]
[573.05670166 214.63545227]
[561.00189209 223.57377625]
[548.31280518 231.58624268]
[535.06042480 238.62805176]
[521.31890869 244.65980530]
[507.16500854 249.64778137]
[492.67794800 253.56408691]
[477.93875122 256.38681030]
[463.02981567 258.10018921]
[448.03451538 258.69461060]
[433.03671265 258.16674805]
[418.12033081 256.51959229]
[403.36871338 253.76232910]
[388.86441040 249.91036987]
[374.68853760 244.98527527]
[360.92034912 239.01458740]
[347.63684082 232.03167725]
[334.91232300 224.07562256]
[322.81796265 215.19090271]
[311.42135620 205.42720032]
[300.78628540 194.83914185]
[290.97219849 183.48590088]
[282.03396606 171.43101501]
[274.02160645 158.74186707]
[266.97991943 145.48944092]
[260.94827271 131.74784851]
[255.96043396 117.59391785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 64]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[12 56]
[13 55]
[14 54]
[23 43]
[24 42]
[25 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
