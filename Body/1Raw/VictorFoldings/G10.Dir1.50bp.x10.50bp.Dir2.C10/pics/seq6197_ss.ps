%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACxxxxxxxxxxAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 248.88116455]
[92.50000000 233.88116455]
[92.50000000 218.88116455]
[92.50000000 203.88116455]
[92.50000000 188.88116455]
[92.50000000 173.88116455]
[92.50000000 158.88116455]
[92.50000000 143.88116455]
[92.50000000 128.88116455]
[92.50000000 113.88116455]
[86.01183319 100.35697174]
[74.31221008 90.96981049]
[62.61258698 81.58264923]
[50.91296387 72.19548798]
[39.21334076 62.80832672]
[27.51371765 53.42116547]
[15.81409264 44.03400421]
[5.47499800 54.91378784]
[-5.73823977 64.89025116]
[-17.74696541 73.89341736]
[-30.46694756 81.86013794]
[-43.80895996 88.73452759]
[-57.67941666 94.46836853]
[-71.98102570 99.02143860]
[-86.61347961 102.36180878]
[-101.47412109 104.46603394]
[-116.45872498 105.31936646]
[-131.46218872 104.91581726]
[-146.37924194 103.25821686]
[-161.10530090 100.35819244]
[-175.53701782 96.23609161]
[-189.57319641 90.92081451]
[-203.11538696 84.44965363]
[-216.06857300 76.86799622]
[-228.34190369 68.22902679]
[-239.84930420 58.59334564]
[-250.51004028 48.02853775]
[-260.24932861 36.60870361]
[-268.99890137 24.41395378]
[-276.69732666 11.52982330]
[-283.29061890 -1.95331252]
[-288.73254395 -15.94087791]
[-292.98492432 -30.33475876]
[-296.01794434 -45.03398895]
[-297.81030273 -59.93546677]
[-298.34942627 -74.93466187]
[-297.63159180 -89.92636871]
[-295.66174316 -104.80541992]
[-292.45379639 -119.46746063]
[-288.03015137 -133.80964661]
[-282.42193604 -147.73136902]
[-275.66842651 -161.13496399]
[-267.81698608 -173.92643738]
[-258.92272949 -186.01605225]
[-249.04801941 -197.31900024]
[-238.26214600 -207.75601196]
[-226.64073181 -217.25387573]
[-214.26530457 -225.74595642]
[-201.22268677 -233.17269897]
[-187.60435486 -239.48200989]
[-173.50581360 -244.62963867]
[-159.02598572 -248.57946777]
[-144.26643372 -251.30378723]
[-129.33067322 -252.78349304]
[-114.32347107 -253.00820923]
[-99.35009766 -251.97636414]
[-84.51558685 -249.69517517]
[-69.92398834 -246.18066406]
[-55.67765427 -241.45747375]
[-41.87651062 -235.55874634]
[-28.61737251 -228.52584839]
[-15.99323750 -220.40809631]
[-4.09265947 -211.26245117]
[7.00088787 -201.15306091]
[17.20958900 -190.15083313]
[26.46183586 -178.33294678]
[34.69272995 -165.78230286]
[41.84453964 -152.58691406]
[47.86709595 -138.83935547]
[52.71815109 -124.63605499]
[56.36368561 -110.07663727]
[58.77812195 -95.26322937]
[59.94452667 -80.29973602]
[59.85472107 -65.29112244]
[58.50932693 -50.34266281]
[55.91778946 -35.55921173]
[52.09828568 -21.04446220]
[47.07760239 -6.90023088]
[40.89096069 6.77427149]
[33.58175659 19.88312531]
[25.20125580 32.33438110]
[36.90087891 41.72154236]
[48.60050201 51.10870361]
[60.30012512 60.49586487]
[71.99974823 69.88302612]
[83.69937134 79.27018738]
[95.39899445 88.65734863]
[86.15202332 76.84661102]
[85.90397644 61.84866333]
[94.75532532 49.73860168]
[109.12072754 45.42174911]
[123.18131256 50.64669800]
[131.24166870 63.29702377]
[130.03749084 78.24703979]
[145.01721191 79.02688599]
[159.99691772 79.80673218]
[165.89205933 65.84165955]
[176.21028137 54.73715591]
[189.70562744 47.83413696]
[204.74844360 45.96617889]
[219.52226257 49.35884476]
[232.24305725 57.60245895]
[241.37474060 69.70156097]
[245.81460571 84.19512177]
[245.02653503 99.33297729]
[239.10566711 113.28716278]
[228.76699829 124.37263489]
[215.25895691 131.25076294]
[200.21272278 133.09100342]
[185.44517517 129.67111206]
[172.73959351 121.40407562]
[163.63023376 109.28816223]
[159.21707153 94.78644562]
[144.23736572 94.00659943]
[129.25764465 93.22675323]
[123.81823730 98.39035797]
[136.59030151 106.25639343]
[149.36235046 114.12242889]
[162.13441467 121.98846436]
[176.24200439 127.08513641]
[185.23057556 139.09368896]
[186.14477539 154.06581116]
[178.68400574 167.07876587]
[165.30131531 173.85398865]
[150.39683533 172.16383362]
[138.87106323 162.56402588]
[134.51356506 148.20877075]
[127.32218170 135.04504395]
[120.13079834 121.88130188]
[112.93941498 108.71755981]
[107.50000000 113.88116455]
[107.50000000 128.88116455]
[107.50000000 143.88116455]
[107.50000000 158.88116455]
[107.50000000 173.88116455]
[107.50000000 188.88116455]
[107.50000000 203.88116455]
[107.50000000 218.88116455]
[107.50000000 233.88116455]
[107.50000000 248.88116455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[104 125]
[105 124]
[106 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
