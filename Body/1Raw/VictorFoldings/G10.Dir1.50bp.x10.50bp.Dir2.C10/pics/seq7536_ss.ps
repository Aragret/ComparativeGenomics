%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUxxxxxxxxxxAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.41809082 444.19665527]
[97.41809082 429.19665527]
[97.41809082 414.19665527]
[97.41809082 399.19665527]
[97.41809082 384.19665527]
[97.41809082 369.19665527]
[97.41809082 354.19665527]
[97.41809082 339.19665527]
[97.41809082 324.19665527]
[97.41809082 309.19665527]
[82.37761688 305.59960938]
[68.62029266 298.51724243]
[56.94107437 288.35409546]
[48.01594925 275.69293213]
[42.36280441 261.26119995]
[40.31138992 245.88929749]
[41.98407364 230.46284485]
[47.28856277 215.87153625]
[55.92297363 202.95791626]
[67.39302063 192.46873474]
[81.04031372 185.01168823]
[96.08011627 181.02030945]
[95.76805878 166.02355957]
[95.45600128 151.02680969]
[63.00077438 85.98315430]
[49.21839142 80.06319427]
[35.43601227 74.14323425]
[27.51468658 86.91469574]
[17.77827072 98.36283112]
[6.44428015 108.23188782]
[-6.23408127 116.30139160]
[-19.97357368 122.39105225]
[-34.46725082 126.36483765]
[-49.39131927 128.13397217]
[-64.41236877 127.65892029]
[-79.19483185 124.95030212]
[-93.40844727 120.06863403]
[-106.73568726 113.12296295]
[-118.87882233 104.26847076]
[-129.56655884 93.70296478]
[-138.56013489 81.66247559]
[-145.65861511 68.41600037]
[-150.70344543 54.25947189]
[-153.58190918 39.50914383]
[-154.22969055 24.49455070]
[-152.63232422 9.55112171]
[-148.82551575 -4.98730278]
[-142.89427185 -18.79592705]
[-134.97113037 -31.56626129]
[-125.23308563 -43.01301193]
[-113.89768982 -52.88045502]
[-101.21817780 -60.94815063]
[-87.47782135 -67.03585815]
[-72.98357391 -71.00757599]
[-58.05925369 -72.77458191]
[-43.03826904 -72.29739380]
[-28.25619698 -69.58666992]
[-14.04327488 -64.70297241]
[-0.71702194 -57.75541306]
[11.42484665 -48.89918900]
[22.11107635 -38.33215714]
[31.10293579 -26.29039192]
[38.19953918 -13.04290676]
[43.24235153 1.11434293]
[46.11870956 15.86507893]
[46.76435471 30.87976456]
[45.16486740 45.82296753]
[41.35597610 60.36084747]
[55.13835526 66.28081512]
[68.92073822 72.20077515]
[59.66374207 60.39789200]
[46.72375488 52.81127548]
[39.14615250 39.86600876]
[38.86642838 24.86861801]
[45.95603943 11.64978886]
[58.60412216 3.58592057]
[73.58006287 2.73671603]
[87.05865479 9.31908131]
[95.59715271 21.65172577]
[97.01461029 36.58460236]
[90.94780731 50.30499649]
[90.33393097 65.29242706]
[98.05801392 52.43402481]
[105.78209686 39.57562256]
[113.50617981 26.71722221]
[121.23027039 13.85881901]
[120.97341919 -2.53831673]
[135.18235779 -10.72599506]
[149.24014282 -2.28143477]
[148.68533325 14.10832500]
[134.08866882 21.58290482]
[126.36458588 34.44130707]
[118.64050293 47.29970932]
[110.91641235 60.15811157]
[103.19232941 73.01651001]
[113.63214111 83.78732300]
[126.72529602 76.46821594]
[139.81845093 69.14910889]
[145.55123901 54.16529465]
[160.88342285 49.44262695]
[174.05346680 58.60392761]
[174.95843506 74.62143707]
[162.90412903 85.20788574]
[147.13755798 82.24226379]
[134.04440308 89.56137085]
[120.95124817 96.88047791]
[122.03966522 104.30107880]
[135.48190308 97.64476776]
[145.96617126 108.37230682]
[139.00332642 121.65834045]
[124.21650696 119.14228821]
[125.30492401 126.56288910]
[139.94842529 129.81372070]
[154.59191895 133.06454468]
[169.23542786 136.31536865]
[183.87892151 139.56619263]
[199.34942627 134.12599182]
[211.61814880 145.00762939]
[208.06410217 161.01702881]
[192.34336853 165.68507385]
[180.62809753 154.20968628]
[165.98460388 150.95886230]
[151.34109497 147.70803833]
[136.69760132 144.45721436]
[122.05410004 141.20639038]
[110.45275879 150.71475220]
[110.76480865 165.71150208]
[111.07686615 180.70825195]
[125.33139801 183.74813843]
[138.53935242 189.89329529]
[150.03416443 198.82989502]
[159.23657227 210.10331726]
[165.68377686 223.14129639]
[169.05271912 237.28295898]
[169.17631531 251.81231689]
[166.05168152 265.99453735]
[159.84010315 279.11306763]
[150.85877991 290.50595093]
[139.56457520 299.59902954]
[126.53079987 305.93505859]
[112.41809082 309.19665527]
[112.41809082 324.19665527]
[112.41809082 339.19665527]
[112.41809082 354.19665527]
[112.41809082 369.19665527]
[112.41809082 384.19665527]
[112.41809082 399.19665527]
[112.41809082 414.19665527]
[112.41809082 429.19665527]
[112.41809082 444.19665527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 128]
[23 127]
[24 126]
[25 70]
[26 69]
[27 68]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[96 106]
[97 105]
[98 104]
[112 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
