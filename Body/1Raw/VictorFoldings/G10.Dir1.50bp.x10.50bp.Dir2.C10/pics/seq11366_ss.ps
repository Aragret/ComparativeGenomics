%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACxxxxxxxxxxAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[96.93869019 271.98989868]
[96.93869019 256.98989868]
[96.93869019 241.98988342]
[96.93869019 226.98988342]
[96.93869019 211.98988342]
[96.93869019 196.98988342]
[96.93869019 181.98988342]
[96.93869019 166.98988342]
[96.93869019 151.98988342]
[96.93869019 136.98988342]
[76.82617188 124.11344910]
[70.45124054 103.63219452]
[77.89686584 86.12245178]
[68.02115631 74.83217621]
[58.14545441 63.54189301]
[48.26974869 52.25161362]
[38.39404297 40.96133423]
[26.39987755 49.98060226]
[13.77236843 58.08943939]
[0.58048177 65.24355316]
[-13.10373211 71.40386963]
[-27.20553398 76.53675079]
[-41.64790344 80.61415100]
[-56.35195923 83.61380005]
[-71.23739624 85.51932526]
[-86.22290802 86.32031250]
[-101.22665405 86.01239014]
[-116.16668701 84.59723663]
[-130.96141052 82.08258057]
[-145.53001404 78.48216248]
[-159.79292297 73.81563568]
[-173.67225647 68.10849762]
[-187.09219360 61.39191818]
[-199.97944641 53.70257950]
[-212.26362610 45.08247757]
[-223.87763977 35.57868958]
[-234.75805664 25.24312973]
[-244.84544373 14.13224316]
[-254.08471680 2.30671597]
[-262.42541504 -10.16886520]
[-269.82196045 -23.22636032]
[-276.23397827 -36.79445648]
[-281.62643433 -50.79904556]
[-285.96990967 -65.16364288]
[-289.24063110 -79.80978394]
[-291.42077637 -94.65748596]
[-292.49841309 -109.62564850]
[-292.46768188 -124.63252258]
[-291.32870483 -139.59614563]
[-289.08776855 -154.43478394]
[-285.75704956 -169.06739807]
[-281.35476685 -183.41407776]
[-275.90493774 -197.39645386]
[-269.43737793 -210.93817139]
[-261.98739624 -223.96524048]
[-253.59565735 -236.40653992]
[-244.30801392 -248.19412231]
[-234.17517090 -259.26358032]
[-223.25250244 -269.55447388]
[-211.59965515 -279.01058960]
[-199.28025818 -287.58029175]
[-186.36160278 -295.21676636]
[-172.91426086 -301.87829590]
[-159.01165771 -307.52850342]
[-144.72973633 -312.13656616]
[-130.14651489 -315.67724609]
[-115.34160614 -318.13125610]
[-100.39590454 -319.48519897]
[-85.39102173 -319.73162842]
[-70.40891266 -318.86926270]
[-55.53141022 -316.90274048]
[-40.83976746 -313.84286499]
[-26.41422653 -309.70632935]
[-12.33357525 -304.51571655]
[1.32528210 -298.29937744]
[14.48774433 -291.09127808]
[27.08192253 -282.93075562]
[39.03902817 -273.86242676]
[50.29375839 -263.93579102]
[60.78464508 -253.20504761]
[70.45438385 -241.72883606]
[79.25016022 -229.56983948]
[87.12394714 -216.79443359]
[94.03272247 -203.47242737]
[99.93876648 -189.67655945]
[104.80982208 -175.48219299]
[108.61927032 -160.96684265]
[111.34632111 -146.20979309]
[112.97606659 -131.29165649]
[113.49961853 -116.29388428]
[112.91410828 -101.29840088]
[111.22274017 -86.38711548]
[108.43474579 -71.64145660]
[104.56536102 -57.14197540]
[99.63570404 -42.96785355]
[93.67271423 -29.19650650]
[86.70895386 -15.90315247]
[78.78246307 -3.16039491]
[69.93652344 8.96216965]
[60.21944809 20.39833069]
[49.68432236 31.08562660]
[59.56002808 42.37590790]
[69.43573761 53.66618729]
[79.31143951 64.95646667]
[89.18714905 76.24674988]
[107.72891998 71.24959564]
[127.25069427 80.61225891]
[137.02171326 102.64885712]
[151.84419250 104.94973755]
[166.66667175 107.25061035]
[181.48915100 109.55148315]
[196.31164551 111.85235596]
[204.92257690 99.25019836]
[218.15292358 91.63962555]
[233.37577820 90.53173065]
[247.56863403 96.14649200]
[257.91348267 107.36908722]
[262.35638428 121.97126007]
[260.01513672 137.05374146]
[251.35464478 149.62190247]
[238.09443665 157.18031311]
[222.86732483 158.22825623]
[208.69670105 152.55764771]
[198.39610291 141.29440308]
[194.01077271 126.67484283]
[179.18827820 124.37396240]
[164.36579895 122.07308960]
[149.54331970 119.77221680]
[134.72084045 117.47134399]
[129.02529907 122.35097504]
[140.93016052 131.47645569]
[152.83500671 140.60194397]
[167.49108887 143.79556274]
[177.40843201 155.04928589]
[178.73377991 169.99061584]
[170.95217896 182.81430054]
[157.08708191 188.53784180]
[142.52558899 184.93743896]
[132.92538452 173.41197205]
[132.01699829 158.43772888]
[124.82560730 145.27398682]
[117.63422394 132.11026001]
[111.93869019 136.98988342]
[111.93869019 151.98988342]
[111.93869019 166.98988342]
[111.93869019 181.98988342]
[111.93869019 196.98988342]
[111.93869019 211.98988342]
[111.93869019 226.98988342]
[111.93869019 241.98988342]
[111.93869019 256.98989868]
[111.93869019 271.98989868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 105]
[14 104]
[15 103]
[16 102]
[17 101]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
