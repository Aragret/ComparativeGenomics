%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAxxxxxxxxxxUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUAACCUGACUAGAAAAGCUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.32156372 248.30744934]
[92.32156372 233.30744934]
[92.32156372 218.30744934]
[92.32156372 203.30744934]
[92.32156372 188.30744934]
[92.32156372 173.30744934]
[92.32156372 158.30744934]
[92.32156372 143.30744934]
[92.32156372 128.30744934]
[92.32156372 113.30744934]
[93.18463135 111.79547119]
[94.04949188 110.28451538]
[80.62203979 116.97058868]
[67.19458771 123.65666962]
[53.76713943 130.34274292]
[44.86254501 143.42015076]
[30.02074623 142.16703796]
[16.59329605 148.85311890]
[3.16584730 155.53918457]
[-0.85791981 160.91058350]
[-6.19806957 163.07176208]
[-10.95295048 162.21134949]
[-24.64357567 168.34051514]
[-38.33420181 174.46969604]
[-52.02482605 180.59886169]
[-59.06378555 195.01525879]
[-74.75437164 198.35968018]
[-87.06011200 188.06655884]
[-86.54109192 172.03190613]
[-73.59545898 162.55612183]
[-58.15399933 166.90823364]
[-44.46337509 160.77906799]
[-30.77275085 154.64988708]
[-17.08212471 148.52072144]
[-3.52022815 142.11174011]
[9.90722084 135.42567444]
[23.33467102 128.73959351]
[31.27884483 116.14041138]
[47.08106613 116.91529083]
[60.50851440 110.22921753]
[73.93596649 103.54314423]
[87.36341095 96.85706329]
[97.46884918 85.77193451]
[102.88747406 71.78485107]
[108.30609894 57.79776764]
[113.72472382 43.81068420]
[109.23215485 31.67723846]
[114.07963562 20.11552429]
[125.14977264 15.14418411]
[130.85443115 1.27130389]
[136.55909729 -12.60157681]
[142.26376343 -26.47445679]
[135.66923523 -38.26096725]
[137.06668091 -51.49835205]
[145.71981812 -61.35492325]
[158.28561401 -64.36372375]
[156.70092773 -80.10536194]
[168.87590027 -88.68554688]
[174.86419678 -102.43837738]
[180.85249329 -116.19120789]
[186.84078979 -129.94403076]
[173.89349365 -137.55487061]
[161.95799255 -146.67086792]
[151.20837402 -157.15910339]
[141.80137634 -168.86660767]
[133.87419128 -181.62268066]
[127.54241943 -195.24125671]
[122.89839172 -209.52378845]
[120.00983429 -224.26194763]
[118.91886902 -239.24084473]
[119.64140320 -254.24201965]
[122.16690826 -269.04672241]
[126.45854950 -283.43905640]
[132.45375061 -297.20913696]
[140.06506348 -310.15612793]
[149.18151855 -322.09127808]
[159.67015076 -332.84051514]
[171.37800598 -342.24707031]
[184.13436890 -350.17379761]
[197.75318909 -356.50503540]
[212.03588867 -361.14852905]
[226.77415466 -364.03656006]
[241.75309753 -365.12695312]
[256.75424194 -364.40386963]
[271.55883789 -361.87780762]
[285.95101929 -357.58563232]
[299.72085571 -351.58990479]
[312.66760254 -343.97811890]
[324.60241699 -334.86120605]
[335.35125732 -324.37219238]
[344.75735474 -312.66397095]
[352.68359375 -299.90731812]
[359.01434326 -286.28823853]
[363.65731812 -272.00537109]
[366.54476929 -257.26699829]
[367.63461304 -242.28802490]
[366.91094971 -227.28691101]
[364.38433838 -212.48239136]
[360.09161377 -198.09037781]
[354.09539795 -184.32075500]
[346.48312378 -171.37431335]
[337.36578369 -159.43984985]
[326.87634277 -148.69139099]
[315.16775513 -139.28572083]
[302.41082764 -131.35995483]
[288.79153442 -125.02971649]
[274.50848389 -120.38728333]
[259.76998901 -117.50038147]
[244.79096985 -116.41109467]
[229.78988647 -117.13531494]
[214.98545837 -119.66248322]
[200.59361267 -123.95574188]
[194.60531616 -110.20291138]
[188.61701965 -96.45008087]
[182.62872314 -82.69725037]
[184.64172363 -67.93930054]
[172.03843689 -58.37542343]
[178.86276245 -43.03489685]
[172.38075256 -27.18197823]
[156.13664246 -20.76979446]
[150.43197632 -6.89691353]
[144.72732544 6.97596741]
[139.02265930 20.84884834]
[142.31535339 38.05938721]
[127.71180725 49.22930908]
[122.29318237 63.21639252]
[116.87455750 77.20347595]
[111.45593262 91.19055939]
[120.68450165 79.36543274]
[133.64489746 71.81374359]
[148.48300171 69.61583710]
[163.07604980 73.08615112]
[175.33633423 81.72821808]
[183.50988770 94.30569458]
[186.42741394 109.01922607]
[183.67149353 123.76388550]
[175.63641357 136.43028259]
[163.47167969 145.20634460]
[148.91758728 148.83654785]
[134.05627441 146.80157471]
[121.01380157 139.39253235]
[111.65605164 127.66936493]
[107.32156372 113.30744934]
[107.32156372 128.30744934]
[107.32156372 143.30744934]
[107.32156372 158.30744934]
[107.32156372 173.30744934]
[107.32156372 188.30744934]
[107.32156372 203.30744934]
[107.32156372 218.30744934]
[107.32156372 233.30744934]
[107.32156372 248.30744934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[12 42]
[13 41]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[22 34]
[23 33]
[24 32]
[25 31]
[43 128]
[44 127]
[45 126]
[46 125]
[49 123]
[50 122]
[51 121]
[52 120]
[56 117]
[58 115]
[59 114]
[60 113]
[61 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
