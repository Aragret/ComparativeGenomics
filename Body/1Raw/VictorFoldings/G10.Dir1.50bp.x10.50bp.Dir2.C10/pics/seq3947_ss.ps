%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCxxxxxxxxxxCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[120.81253815 261.95651245]
[120.81253815 246.95651245]
[120.81253815 231.95651245]
[120.81253815 216.95651245]
[120.81253815 201.95651245]
[120.81253815 186.95651245]
[120.81253815 171.95651245]
[120.81253815 156.95651245]
[120.81253815 141.95651245]
[120.81253815 126.95650482]
[114.19124603 123.43393707]
[107.14589691 136.67640686]
[93.90354156 129.63082886]
[100.94866180 116.38880157]
[94.32736969 112.86623383]
[81.88793182 121.24838257]
[69.44848633 129.63052368]
[57.00904846 138.01266479]
[58.15337753 153.32887268]
[51.47183990 167.15827942]
[38.76173782 175.78085327]
[23.44202232 176.87716675]
[9.63362217 170.15232849]
[1.05092633 157.41525269]
[0.00263761 142.09217834]
[6.77074003 128.30491638]
[19.53464890 119.76219177]
[34.86093521 118.76194000]
[48.62690735 125.57322693]
[61.06634521 117.19108582]
[73.50579071 108.80893707]
[85.94522858 100.42679596]
[94.32736969 87.98735809]
[97.42568970 73.31082916]
[100.52401733 58.63430405]
[103.62233734 43.95777893]
[89.18544006 33.67791367]
[80.49238586 18.30257416]
[79.13589478 0.75241292]
[85.32061005 -15.66351700]
[97.83409119 -27.87166023]
[92.34706116 -41.83205032]
[86.86003113 -55.79244232]
[81.22807312 -69.69499969]
[75.45179749 -83.53821564]
[69.67552948 -97.38143158]
[55.08421707 -93.77670288]
[40.11363983 -92.44168091]
[25.11472893 -93.40766144]
[10.43908119 -96.65200806]
[-3.56928754 -102.09866333]
[-16.58199883 -109.61994934]
[-28.29401779 -119.03955841]
[-38.43079758 -130.13668823]
[-46.75471878 -142.65118408]
[-53.07065201 -156.28970337]
[-57.23054886 -170.73255920]
[-59.13689041 -185.64115906]
[-58.74499130 -200.66603088]
[-56.06404114 -215.45497131]
[-51.15687943 -229.66131592]
[-44.13854218 -242.95204163]
[-35.17354584 -255.01559448]
[-24.47204208 -265.56918335]
[-12.28489399 -274.36541748]
[1.10221696 -281.19812012]
[15.37547779 -285.90710449]
[30.20030212 -288.38195801]
[45.22917557 -288.56472778]
[60.10979843 -286.45108032]
[74.49334717 -282.09060669]
[88.04265594 -275.58547974]
[100.44010925 -267.08819580]
[111.39508057 -256.79794312]
[120.65077972 -244.95597839]
[127.99024200 -231.83985901]
[133.24142456 -217.75703430]
[136.28120422 -203.03765869]
[137.03836060 -188.02676392]
[135.49511719 -173.07621765]
[131.68766785 -158.53648376]
[125.70526123 -144.74839783]
[117.68812561 -132.03518677]
[107.82420349 -120.69483948]
[96.34471130 -110.99320221]
[83.51874542 -103.15770721]
[89.29501343 -89.31448364]
[95.07128906 -75.47126770]
[100.58527374 -70.47711182]
[100.82041931 -61.27947235]
[106.30744934 -47.31908035]
[111.79447937 -33.35869217]
[118.44154358 -34.05063248]
[125.11141968 -33.63226318]
[131.61991882 -32.11513901]
[137.78732300 -29.54115868]
[143.44332886 -25.98139381]
[148.43173218 -21.53414726]
[152.61480713 -16.32222176]
[155.87702942 -10.48954201]
[158.12831116 -4.19717026]
[173.08856201 -5.28848076]
[188.04881287 -6.37979126]
[203.00906372 -7.47110176]
[217.96931458 -8.56241226]
[223.52574158 -22.77820778]
[234.70576477 -33.16906357]
[249.28958130 -37.67186356]
[264.38156128 -35.39258194]
[276.98516846 -26.78376579]
[284.59796143 -13.55470371]
[285.70840454 1.66796505]
[280.09603882 15.86176872]
[268.87518311 26.20851707]
[254.27375793 30.65385437]
[239.19087219 28.31515694]
[226.62126160 19.65677452]
[219.06062317 6.39783621]
[204.10037231 7.48914671]
[189.14012146 8.58045769]
[174.17987061 9.67176819]
[159.21963501 10.76307869]
[152.46664429 29.26259613]
[137.67433167 42.43376160]
[118.29885864 47.05610275]
[115.20053864 61.73262787]
[112.10221863 76.40915680]
[109.00389862 91.08567810]
[118.75923157 79.69123077]
[129.63868713 69.36469269]
[143.62567139 63.94578552]
[158.62263489 64.24713135]
[172.38063049 70.22354126]
[182.83648682 80.97877502]
[188.42221069 94.89997101]
[188.30017090 109.89947510]
[182.48864746 123.72793579]
[171.85917664 134.31161499]
[158.00573730 140.06335449]
[143.00392151 140.12023926]
[135.81254578 126.95650482]
[135.81254578 141.95651245]
[135.81254578 156.95651245]
[135.81254578 171.95651245]
[135.81254578 186.95651245]
[135.81254578 201.95651245]
[135.81254578 216.95651245]
[135.81254578 231.95651245]
[135.81254578 246.95651245]
[135.81254578 261.95651245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 32]
[16 31]
[17 30]
[18 29]
[33 128]
[34 127]
[35 126]
[36 125]
[41 92]
[42 91]
[43 90]
[44 88]
[45 87]
[46 86]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
