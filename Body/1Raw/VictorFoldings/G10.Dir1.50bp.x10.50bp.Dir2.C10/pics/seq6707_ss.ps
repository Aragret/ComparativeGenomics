%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCxxxxxxxxxxAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[68.15528870 262.99398804]
[68.15528870 247.99397278]
[68.15528870 232.99397278]
[68.15528870 217.99397278]
[68.15528870 202.99397278]
[68.15528870 187.99397278]
[68.15528870 172.99397278]
[68.15528870 157.99397278]
[68.15528870 142.99397278]
[68.15528870 127.99398041]
[88.26264954 94.32573700]
[80.89134979 81.26189423]
[73.52004242 68.19805908]
[66.14874268 55.13421631]
[58.77744293 42.07037735]
[51.40614319 29.00653839]
[36.79170227 25.62745857]
[24.43400764 34.12965775]
[26.82363701 49.20455170]
[22.42764282 63.82091141]
[12.11885357 75.07665253]
[-2.05591273 80.73693085]
[-17.28224564 79.67790222]
[-30.53694534 72.10983276]
[-39.18828201 59.53536606]
[-41.51852798 44.45117950]
[-37.06501007 29.85224342]
[-26.71197510 18.63718796]
[-12.51502895 13.03277302]
[2.70701480 14.15175533]
[15.93180943 21.77196312]
[28.28950500 13.26976395]
[24.30084229 4.83059311]
[23.10548210 -4.11426210]
[24.63208580 -12.69409657]
[28.55291939 -20.12850380]
[34.33132935 -25.79833794]
[41.28738785 -29.29668999]
[39.21936035 -44.15344620]
[37.15133286 -59.01020432]
[35.08330154 -73.86696625]
[33.01527405 -88.72372437]
[30.50789833 -103.51267242]
[27.56337929 -118.22082520]
[17.26762581 -130.23365784]
[22.35600471 -144.23214722]
[19.41148567 -158.94029236]
[16.46696472 -173.64845276]
[1.49935174 -172.42900085]
[-13.50862503 -172.95545959]
[-28.35399818 -175.22071838]
[-42.83600235 -179.19413757]
[-56.75878525 -184.82197571]
[-69.93405914 -192.02813721]
[-82.18363953 -200.71516418]
[-93.34186554 -210.76554871]
[-103.25783539 -222.04341125]
[-111.79744720 -234.39620972]
[-118.84520721 -247.65689087]
[-124.30581665 -261.64611816]
[-128.10540771 -276.17468262]
[-130.19261169 -291.04614258]
[-130.53919983 -306.05935669]
[-129.14047241 -321.01126099]
[-126.01536560 -335.69970703]
[-121.20612335 -349.92599487]
[-114.77779388 -363.49777222]
[-106.81730652 -376.23147583]
[-97.43232727 -387.95492554]
[-86.74977875 -398.50952148]
[-74.91411591 -407.75256348]
[-62.08541489 -415.55902100]
[-48.43716812 -421.82333374]
[-34.15394592 -426.46081543]
[-19.42892075 -429.40872192]
[-4.46122551 -430.62716675]
[10.54671574 -430.09970093]
[25.39193916 -427.83346558]
[39.87368011 -423.85906982]
[53.79608536 -418.23031616]
[66.97087860 -411.02325439]
[79.21987915 -402.33541870]
[90.37743378 -392.28427124]
[100.29264832 -381.00576782]
[108.83143616 -368.65240479]
[115.87831879 -355.39126587]
[121.33798981 -341.40167236]
[125.13661957 -326.87283325]
[127.22282410 -312.00125122]
[127.56841278 -296.98800659]
[126.16868591 -282.03619385]
[123.04259491 -267.34796143]
[118.23239899 -253.12197876]
[111.80316925 -239.55062866]
[103.84183502 -226.81745911]
[94.45606995 -215.09465027]
[83.77281189 -204.54077148]
[71.93653870 -195.29852295]
[59.10731506 -187.49290466]
[45.45864868 -181.22949219]
[31.17511940 -176.59297180]
[34.11964035 -161.88481140]
[37.06415939 -147.17666626]
[47.14929962 -136.21586609]
[42.27153397 -121.16534424]
[45.21605301 -106.45719147]
[47.98508453 -104.19399261]
[49.77090836 -100.45376587]
[49.88080215 -95.72505188]
[47.87203217 -90.79174805]
[49.94005966 -75.93498993]
[52.00809097 -61.07823563]
[54.07611847 -46.22147751]
[56.14414597 -31.36471748]
[74.97532654 -20.89293480]
[79.67077637 1.86865890]
[64.46997833 21.63523674]
[71.84128571 34.69907761]
[79.21258545 47.76291656]
[86.58388519 60.82675552]
[93.95518494 73.89059448]
[101.32648468 86.95443726]
[112.78533936 96.63404083]
[126.89755249 101.71789551]
[141.00975037 106.80175018]
[155.12196350 111.88561249]
[172.07289124 111.56539154]
[177.07307434 127.76522064]
[162.89053345 137.05455017]
[150.03810120 125.99781799]
[135.92590332 120.91396332]
[121.81369019 115.83010101]
[107.70148468 110.74624634]
[101.56493378 115.05818176]
[111.51222992 126.28543854]
[121.45952606 137.51269531]
[131.40682983 148.73994446]
[141.35412598 159.96720886]
[153.88629150 168.21006775]
[157.01438904 182.88027954]
[148.93457031 195.51818848]
[134.30612183 198.83609009]
[121.56459808 190.92068481]
[118.05737305 176.33700562]
[110.86598969 163.17326355]
[103.67460632 150.00952148]
[96.48322296 136.84577942]
[89.29183960 123.68204498]
[83.15528870 127.99398041]
[83.15528870 142.99397278]
[83.15528870 157.99397278]
[83.15528870 172.99397278]
[83.15528870 187.99397278]
[83.15528870 202.99397278]
[83.15528870 217.99397278]
[83.15528870 232.99397278]
[83.15528870 247.99397278]
[83.15528870 262.99398804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 32]
[18 31]
[38 114]
[39 113]
[40 112]
[41 111]
[42 110]
[43 106]
[44 105]
[46 103]
[47 102]
[48 101]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
