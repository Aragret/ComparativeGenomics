%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGxxxxxxxxxxAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.52489471 264.69717407]
[85.21284485 249.70040894]
[84.90078735 234.70365906]
[84.58872986 219.70690918]
[84.27667236 204.71014404]
[83.96461487 189.71339417]
[83.65255737 174.71664429]
[83.34050751 159.71989441]
[83.02845001 144.72312927]
[70.01213837 137.26821899]
[56.91898346 144.58732605]
[43.82582855 151.90643311]
[30.73267555 159.22554016]
[17.63952065 166.54464722]
[4.54636621 173.86375427]
[19.24867630 176.83732605]
[30.11218262 187.18063354]
[33.80301666 201.71946716]
[29.18850708 215.99205017]
[17.68478775 225.61828613]
[2.82220292 227.64401245]
[-10.83810806 221.44757080]
[-19.10397148 208.93055725]
[-19.43869781 193.93429565]
[-11.73897839 181.06039429]
[-25.96575737 185.81420898]
[-40.19253540 190.56802368]
[-54.41931534 195.32183838]
[-67.52575684 206.07624817]
[-81.48811340 196.45913696]
[-76.11199951 180.38014221]
[-59.17313004 181.09506226]
[-44.94635010 176.34124756]
[-30.71957207 171.58743286]
[-16.49279213 166.83361816]
[-2.77273941 160.77059937]
[10.32041550 153.45149231]
[23.41357040 146.13238525]
[36.50672531 138.81327820]
[49.59988022 131.49417114]
[62.69303131 124.17507172]
[56.68593216 103.65306854]
[60.98422623 83.19580078]
[74.12670135 67.56096649]
[92.65078735 60.16579819]
[111.99501801 62.34500122]
[119.17752838 49.17641830]
[126.36003113 36.00783539]
[109.86052704 21.20419502]
[111.02184296 0.65906239]
[126.50601196 -10.33382607]
[128.06359863 -25.25273895]
[129.62117004 -40.17164993]
[131.17875671 -55.09056091]
[123.27698517 -71.69001770]
[134.05377197 -85.50524902]
[135.30065918 -100.45333099]
[131.89767456 -115.06222534]
[124.17359161 -127.92063141]
[116.44950104 -140.77903748]
[101.85283661 -148.25361633]
[101.29802704 -164.64337158]
[115.35581970 -173.08793640]
[129.56475830 -164.90025330]
[129.30790710 -148.50311279]
[137.03199768 -135.64471436]
[144.75607300 -122.78630829]
[145.10566711 -137.78224182]
[148.31965637 -152.43386841]
[154.27912903 -166.19921875]
[162.76364136 -178.56906128]
[173.45933533 -189.08581543]
[185.97055054 -197.36044312]
[199.83447266 -203.08685303]
[214.53823853 -206.05320740]
[229.53791809 -206.14978027]
[244.27865601 -203.37298584]
[258.21514893 -197.82556152]
[270.83187866 -189.71269226]
[281.66210938 -179.33451843]
[290.30517578 -167.07495117]
[296.44137573 -153.38748169]
[299.84375000 -138.77844238]
[300.38638306 -123.78826141]
[298.04925537 -108.97145844]
[292.91876221 -94.87612915]
[285.18475342 -82.02370453]
[275.13330078 -70.88961029]
[263.13619995 -61.88573074]
[249.63728333 -55.34513855]
[235.13591003 -51.50977707]
[220.16848755 -50.52153397]
[205.28872681 -52.41696167]
[191.04705811 -57.12594604]
[177.97027588 -64.47428894]
[166.54216003 -74.19016266]
[157.18545532 -85.91415405]
[150.24873352 -99.20645905]
[149.00186157 -84.25836945]
[156.58923340 -74.78529358]
[155.63110352 -62.28326035]
[146.09767151 -53.53298187]
[144.54008484 -38.61407089]
[142.98251343 -23.69515800]
[141.42492676 -8.77624512]
[148.92909241 -4.62874460]
[154.54600525 2.54145360]
[157.06416321 11.85017395]
[155.69166565 21.93612480]
[170.45773315 24.57498932]
[178.62530518 11.75472832]
[191.08013916 3.04004550]
[205.92294312 -0.24013425]
[220.89030457 2.41439271]
[233.69981384 10.59883022]
[242.39810181 23.06511116]
[245.65875244 37.91222000]
[242.98454285 52.87607574]
[234.78324890 65.67480469]
[222.30554199 74.35668945]
[207.45416260 77.59780884]
[192.49383545 74.90390778]
[179.70590210 66.68579865]
[171.04043579 54.19667816]
[167.81886292 39.34104538]
[153.05281067 36.70217896]
[139.52861023 43.19034576]
[132.34611511 56.35892868]
[125.16359711 69.52751160]
[131.23513794 75.12384796]
[136.06626892 81.92521667]
[139.41903687 89.65747070]
[141.11593628 97.99977875]
[141.04898071 106.59794617]
[139.18586731 115.07944489]
[135.57283020 123.06954193]
[130.33416748 130.20783997]
[123.66825104 136.16453552]
[115.84010315 140.65554810]
[107.17098236 143.45596313]
[98.02519989 144.41108704]
[98.33725739 159.40783691]
[98.64931488 174.40458679]
[98.96137238 189.40133667]
[99.27342987 204.39810181]
[99.58547974 219.39485168]
[99.89753723 234.39160156]
[100.20959473 249.38835144]
[100.52165222 264.38510132]
[103.11264801 283.59283447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[25 35]
[26 34]
[27 33]
[28 32]
[46 129]
[47 128]
[48 127]
[51 105]
[52 104]
[53 103]
[54 102]
[56 99]
[57 98]
[58 67]
[59 66]
[60 65]
[109 126]
[110 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
