%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGxxxxxxxxxxUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 425.07458496]
[92.50000000 410.07458496]
[92.50000000 395.07458496]
[92.50000000 380.07458496]
[92.50000000 365.07458496]
[92.50000000 350.07458496]
[92.50000000 335.07458496]
[92.50000000 320.07458496]
[92.50000000 305.07458496]
[92.50000000 290.07458496]
[77.95760345 286.52392578]
[64.67964935 279.59167480]
[53.43997574 269.67697144]
[44.89479446 257.35284424]
[39.54439163 243.33325195]
[37.70384216 228.43154907]
[39.48443985 213.51344299]
[44.78699112 199.44657898]
[53.30733109 187.05021667]
[64.55376434 177.04736328]
[77.87543488 170.02273560]
[92.50000000 166.38850403]
[92.50000000 151.38850403]
[92.50000000 136.38850403]
[92.50000000 121.38850403]
[74.60700989 104.37221527]
[81.88669586 77.52185822]
[68.36250305 71.03369141]
[54.83831406 64.54552460]
[41.31412506 58.05736160]
[27.59407043 51.99435043]
[13.69151402 46.36239243]
[-0.21104158 40.73043442]
[-14.11359787 35.09848022]
[-23.30829239 34.76766968]
[-28.24482155 29.20203209]
[-42.02720261 23.28206825]
[-55.80958557 17.36210632]
[-69.11457825 25.12633514]
[-84.26314545 23.58540726]
[-95.46710968 13.53875923]
[-98.56968689 -1.00469303]
[-112.35206604 -6.92465639]
[-125.61749268 1.12570059]
[-141.07849121 -0.19219060]
[-152.79002380 -10.37157345]
[-156.24873352 -25.49826813]
[-150.12471008 -39.75575256]
[-136.77273560 -47.66173172]
[-121.32693481 -46.17619324]
[-109.72652435 -35.87036133]
[-106.43210602 -20.70703697]
[-92.64972687 -14.78707409]
[-79.96595001 -22.54979515]
[-64.96585846 -21.34098053]
[-53.41880417 -11.41530991]
[-49.88962173 3.57972455]
[-36.10723877 9.49968719]
[-22.32485771 15.41965103]
[-8.48164082 21.19592285]
[5.42091513 26.82787895]
[19.32347107 32.45983505]
[33.22602844 38.09179306]
[36.64813232 37.01629639]
[40.76851273 37.58560944]
[44.78929901 40.11259842]
[47.80228806 44.53317261]
[61.32648087 51.02133942]
[74.85066986 57.50950241]
[88.37486267 63.99766922]
[75.20082855 56.82515335]
[65.91881561 45.04193878]
[62.03069305 30.55461693]
[64.16558838 15.70732021]
[71.97806549 2.90243030]
[84.20401764 -5.78814697]
[98.86521149 -8.95822430]
[113.58937836 -6.09486532]
[125.99406433 2.33862257]
[134.07212830 14.97765064]
[136.51646423 29.77714920]
[132.93159485 44.34247589]
[123.89755249 56.31686783]
[110.87364197 63.76361465]
[124.25992584 56.99549866]
[137.64620972 50.22738266]
[151.03250122 43.45927048]
[164.41877747 36.69115448]
[177.80506897 29.92303848]
[184.10174561 23.21455765]
[191.54098511 23.15663528]
[205.06517029 16.66847038]
[208.07815552 12.24789524]
[212.09893799 9.72090816]
[216.21932983 9.15159512]
[219.64143372 10.22709084]
[233.54399109 4.59513426]
[247.44654846 -1.03682232]
[248.88706970 -16.27438927]
[257.25357056 -29.09080505]
[270.62344360 -36.54095078]
[285.92443848 -36.91283417]
[299.64047241 -30.12100410]
[308.61972046 -17.72616959]
[310.79876709 -2.57657528]
[305.67697144 11.84651470]
[294.43118286 22.22877884]
[279.64569092 26.18444824]
[264.71804810 22.80454063]
[253.07850647 12.86573410]
[239.17594910 18.49769020]
[225.27339172 24.12964630]
[211.55332947 30.19265938]
[198.02914429 36.68082428]
[184.57318115 43.30932236]
[171.18688965 50.07743835]
[157.80061340 56.84555435]
[144.41432190 63.61366653]
[131.02804565 70.38178253]
[117.64175415 77.14989471]
[123.64876556 85.32083893]
[126.27835846 94.73593140]
[125.43710327 104.10782623]
[121.48921967 112.24455261]
[115.17782593 118.20114899]
[107.50000000 121.38850403]
[107.50000000 136.38850403]
[107.50000000 151.38850403]
[107.50000000 166.38850403]
[122.12456512 170.02273560]
[135.44624329 177.04736328]
[146.69267273 187.05021667]
[155.21301270 199.44657898]
[160.51556396 213.51344299]
[162.29615784 228.43154907]
[160.45561218 243.33325195]
[155.10520935 257.35284424]
[146.56002808 269.67697144]
[135.32034302 279.59167480]
[122.04239655 286.52392578]
[107.50000000 290.07458496]
[107.50000000 305.07458496]
[107.50000000 320.07458496]
[107.50000000 335.07458496]
[107.50000000 350.07458496]
[107.50000000 365.07458496]
[107.50000000 380.07458496]
[107.50000000 395.07458496]
[107.50000000 410.07458496]
[107.50000000 425.07458496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[22 129]
[23 128]
[24 127]
[25 126]
[27 70]
[28 69]
[29 68]
[30 67]
[31 63]
[32 62]
[33 61]
[34 60]
[36 59]
[37 58]
[38 57]
[42 53]
[43 52]
[84 120]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[91 114]
[92 113]
[96 112]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
