%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACxxxxxxxxxxAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.34314728 291.32629395]
[109.91403961 272.11587524]
[110.21039581 257.11877441]
[110.50675201 242.12171936]
[110.80310822 227.12464905]
[111.09946442 212.12757874]
[111.39582062 197.13050842]
[111.69217682 182.13342285]
[111.98854065 167.13635254]
[112.28489685 152.13928223]
[112.58125305 137.14221191]
[95.70716095 136.04159546]
[82.16581726 128.21345520]
[71.50695038 138.76753235]
[60.84808731 149.32160950]
[50.18922043 159.87570190]
[51.65539169 175.44439697]
[42.72868729 188.28370667]
[27.62401772 192.33129883]
[13.47335148 185.67602539]
[6.95819902 171.46029663]
[11.15481567 156.39636230]
[24.08168793 147.59692383]
[39.63514328 149.21682739]
[50.29400635 138.66275024]
[60.95286942 128.10867310]
[71.61173248 117.55458832]
[67.80287933 108.79788208]
[66.62940979 99.32104492]
[52.08458328 95.65388489]
[37.53976059 91.98673248]
[22.99493408 88.31957245]
[8.45010853 84.65241241]
[-6.09471703 80.98525238]
[-20.63954163 77.31809235]
[-28.13228607 90.42386627]
[-38.88388443 101.02130890]
[-52.09649658 108.32401276]
[-66.78965759 111.79006195]
[-81.87304688 111.16226959]
[-96.22736359 106.48720551]
[-108.78742218 98.11180878]
[-118.62119293 86.65756989]
[-124.99893951 72.97447968]
[-127.44739532 58.07791519]
[-125.78485870 43.07329559]
[-120.13471222 29.07406998]
[-110.91622162 17.11906624]
[-98.81347656 8.09543037]
[-84.72456360 2.67277312]
[-69.69498444 1.25349331]
[-54.84003448 3.94291043]
[-41.26204300 10.54145145]
[-29.96859169 20.55946159]
[-21.79772758 33.25353622]
[-17.35578537 47.68169403]
[-16.97238350 62.77326965]
[-2.42755818 66.44042969]
[12.11726761 70.10758972]
[26.66209221 73.77474213]
[41.20691681 77.44190216]
[55.75174332 81.10906219]
[70.29656982 84.77622223]
[72.93782806 80.46295166]
[76.20048523 76.59828186]
[80.00961304 73.27095795]
[84.27775574 70.55737305]
[88.90689850 68.51984406]
[93.79076385 67.20513916]
[94.38336182 52.21685410]
[94.97596741 37.22856140]
[95.56856537 22.24027443]
[96.16116333 7.25198412]
[82.34349060 0.91634732]
[72.00582886 -10.22821331]
[66.72460175 -24.48223305]
[67.30516052 -39.67207718]
[73.65896606 -53.48140717]
[84.81711578 -63.80439758]
[99.07807159 -69.06687164]
[114.26713562 -68.46633148]
[128.06809998 -62.09436417]
[138.37640381 -50.92264557]
[143.62010193 -36.65477753]
[142.99958801 -21.46651268]
[136.60946655 -7.67394876]
[125.42420197 2.61964989]
[111.14945221 7.84458303]
[110.55685425 22.83287239]
[109.96425629 37.82116318]
[109.37165833 52.80945206]
[108.77905273 67.79774475]
[130.30326843 80.02159119]
[138.83753967 105.42934418]
[153.51588440 102.33966064]
[168.19422913 99.24998474]
[182.87257385 96.16030884]
[197.55091858 93.07062531]
[212.22927856 89.98094940]
[226.90762329 86.89126587]
[241.58596802 83.80158997]
[256.26431274 80.71190643]
[259.12539673 66.84271240]
[267.04083252 55.15256500]
[278.78381348 47.39415741]
[292.55682373 44.71540833]
[306.26663208 47.48967743]
[317.84252930 55.26414108]
[325.54901123 66.83332062]
[340.28555298 64.03424835]
[355.02206421 61.23517227]
[369.75860596 58.43610001]
[381.82113647 47.32632446]
[397.39093018 52.47550201]
[400.45108032 68.58660126]
[387.85360718 79.08589935]
[372.55767822 73.17262268]
[357.82113647 75.97169495]
[343.08462524 78.77077484]
[328.34808350 81.56984711]
[324.53247070 97.06208801]
[314.31536865 109.39237976]
[299.69625854 116.06847382]
[283.57073975 115.71243286]
[269.15710449 108.34472656]
[259.35400391 95.39025879]
[244.67564392 98.47993469]
[229.99729919 101.56961823]
[215.31895447 104.65929413]
[200.64060974 107.74897003]
[185.96224976 110.83865356]
[171.28390503 113.92832947]
[156.60556030 117.01801300]
[141.92721558 120.10768890]
[156.28994751 124.43341827]
[171.01000977 121.54904938]
[185.66204834 124.76117706]
[197.82542419 133.53912354]
[205.49064636 146.43270874]
[207.39135742 161.31179810]
[203.21354675 175.71824646]
[193.64743042 187.27200317]
[180.27339172 194.06428528]
[165.30093384 194.97296143]
[151.20364380 189.84790039]
[140.31048584 179.53581238]
[134.42111206 165.74032593]
[134.50822449 150.74182129]
[127.57832336 137.43856812]
[127.28196716 152.43563843]
[126.98561096 167.43270874]
[126.68925476 182.42977905]
[126.39289856 197.42686462]
[126.09653473 212.42393494]
[125.80017853 227.42100525]
[125.50382233 242.41807556]
[125.20746613 257.41516113]
[124.91110992 272.41223145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
[13 27]
[14 26]
[15 25]
[16 24]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
