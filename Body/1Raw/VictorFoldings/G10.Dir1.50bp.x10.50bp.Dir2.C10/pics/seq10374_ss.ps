%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCxxxxxxxxxxACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[13.42946053 335.19311523]
[2.33814502 345.29177856]
[-8.75317001 355.39041138]
[-19.84448624 365.48907471]
[-30.93580055 375.58770752]
[-42.02711487 385.68637085]
[-47.17654037 403.33468628]
[-64.41442108 406.47402954]
[-75.29324341 416.80123901]
[-86.17206573 427.12844849]
[-97.05089569 437.45565796]
[-107.82170105 447.89547729]
[-118.03518677 458.88113403]
[-127.78283691 470.28216553]
[-137.53048706 481.68316650]
[-143.22781372 497.65118408]
[-160.14895630 496.59686279]
[-163.82009888 480.04516602]
[-148.93150330 471.93551636]
[-139.18385315 460.53451538]
[-129.43620300 449.13348389]
[-129.55946350 446.27130127]
[-128.51904297 443.18722534]
[-126.22426605 440.33837891]
[-122.75661469 438.20614624]
[-118.37299347 437.23385620]
[-115.81452179 430.24813843]
[-107.37809753 426.57684326]
[-96.49927521 416.24963379]
[-85.62045288 405.92242432]
[-74.74162292 395.59521484]
[-74.10024261 383.47515869]
[-65.06481934 374.78146362]
[-52.12576675 374.59506226]
[-41.03445053 364.49639893]
[-29.94313622 354.39776611]
[-18.85181999 344.29910278]
[-7.76050472 334.20043945]
[3.33081079 324.10180664]
[-6.03321981 310.05465698]
[-13.02996731 294.68728638]
[-17.47820663 278.39535522]
[-19.26234245 261.59851074]
[-18.33541870 244.72953796]
[-14.72034550 228.22331238]
[-8.50933933 212.50543213]
[0.13843103 197.98139954]
[11.00092220 185.02603149]
[23.79891777 173.97387695]
[38.20320511 165.11053467]
[53.84304810 158.66526794]
[70.31571960 154.80513000]
[87.19688416 153.63053894]
[88.44376373 138.68244934]
[89.69063568 123.73435974]
[90.93750763 108.78627014]
[87.23134613 94.25133514]
[78.97905731 81.72537231]
[70.72676849 69.19940948]
[55.83180618 62.33850479]
[54.59568787 45.98600769]
[68.29003143 36.96397400]
[82.82726288 44.55349731]
[83.25273132 60.94712448]
[91.50502014 73.47308350]
[99.75730896 85.99904633]
[114.12549591 81.69145966]
[114.12549591 66.69145966]
[114.12549591 51.69146347]
[100.35162354 45.11549759]
[90.80169678 33.20912933]
[87.37186432 18.33637047]
[90.74310303 3.45021987]
[100.24607086 -8.49366570]
[113.99393463 -15.12381935]
[129.25704956 -15.12381935]
[143.00491333 -8.49366570]
[152.50788879 3.45021987]
[155.87913513 18.33637047]
[152.44929504 33.20912933]
[142.89936829 45.11549759]
[129.12548828 51.69146347]
[129.12548828 66.69145966]
[129.12548828 81.69145966]
[143.30204773 86.59301758]
[152.56700134 74.79637146]
[161.70874023 62.90399551]
[170.72627258 50.91716003]
[169.91340637 34.89471436]
[182.02839661 24.37774467]
[197.77764893 27.43397141]
[205.07968140 41.71892166]
[198.33302307 56.27439880]
[182.71310425 59.93469238]
[173.69557190 71.92152405]
[172.17796326 79.20455170]
[164.36364746 84.06132507]
[155.09869385 95.85796356]
[105.88559723 110.03314972]
[104.63872528 124.98123169]
[103.39184570 139.92932129]
[102.14497375 154.87741089]
[122.05152893 160.04017639]
[140.57073975 168.96745300]
[156.99864197 181.31709290]
[170.71131897 196.61689758]
[181.18859863 214.28269958]
[188.03378296 233.64064026]
[190.98864746 253.95289612]
[189.94319153 274.44577026]
[204.58670044 277.69659424]
[219.23019409 280.94741821]
[233.87370300 284.19824219]
[244.19400024 272.82342529]
[258.82397461 268.14794922]
[273.82818604 271.42956543]
[285.17062378 281.78546143]
[289.80020142 296.42999268]
[286.47158813 311.42385864]
[276.08016968 322.73376465]
[261.42120361 327.31744385]
[246.43783569 323.94183350]
[235.16055298 313.51504517]
[230.62287903 298.84176636]
[215.97937012 295.59094238]
[201.33587646 292.34011841]
[186.69236755 289.08929443]
[183.90490723 297.20928955]
[180.46429443 305.07479858]
[176.39347839 312.63345337]
[171.71960449 319.83477783]
[166.47381592 326.63082886]
[160.69110107 332.97625732]
[154.40998840 338.82876587]
[147.67237854 344.14938354]
[140.52316284 348.90258789]
[133.00999451 353.05673218]
[125.18299103 356.58410645]
[117.09430695 359.46118164]
[108.79787445 361.66879272]
[100.34899139 363.19223022]
[91.80399323 364.02133179]
[83.21984100 364.15054321]
[74.65376282 363.57904053]
[66.16284943 362.31060791]
[57.80372620 360.35372925]
[49.63210297 357.72143555]
[41.70246506 354.43127441]
[34.06766891 350.50518799]
[26.77861214 345.96929932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[8 31]
[9 30]
[10 29]
[11 28]
[12 26]
[13 21]
[14 20]
[15 19]
[53 102]
[54 101]
[55 100]
[56 99]
[57 66]
[58 65]
[59 64]
[67 84]
[68 83]
[69 82]
[85 98]
[86 97]
[87 95]
[88 94]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
