%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACAGACCAAGAGCCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAxxxxxxxxxxGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.29170227 531.71368408]
[124.29170227 516.71368408]
[124.29170227 501.71368408]
[124.29170227 486.71368408]
[124.29170227 471.71368408]
[124.29170227 456.71368408]
[124.29170227 441.71368408]
[124.29170227 426.71368408]
[124.29170227 411.71368408]
[124.29170227 396.71368408]
[106.25589752 389.32025146]
[93.14398956 374.83383179]
[87.55255890 356.06292725]
[90.61481476 336.67047119]
[101.77119446 320.45877075]
[118.87113953 310.62414551]
[117.00352478 295.74084473]
[115.13591003 280.85757446]
[113.26829529 265.97430420]
[98.39698029 264.26190186]
[84.35923004 259.03680420]
[71.97255707 250.59866333]
[61.95941925 239.43440247]
[54.90510559 226.19004822]
[51.22350311 211.63346863]
[51.13282776 196.60974121]
[54.64268875 181.99214172]
[61.55328751 168.63137817]
[71.46678162 157.30610657]
[83.81017303 148.67749023]
[97.86844635 143.25065613]
[96.00083160 128.36738586]
[82.38080597 122.58905792]
[73.46009827 110.78588104]
[71.61800385 96.10593414]
[77.34583282 82.46459961]
[89.11588287 73.50023651]
[87.24827576 58.61695480]
[85.38066101 43.73367310]
[83.51304626 28.85039330]
[81.64543152 13.96711349]
[79.77781677 -0.91616666]
[77.91020966 -15.79944611]
[76.04259491 -30.68272591]
[74.02025604 -45.54577255]
[64.75070190 -33.75275040]
[50.10630417 -30.50597382]
[36.72111893 -37.27626038]
[30.65876389 -50.99660492]
[34.66555023 -65.45155334]
[46.92635727 -74.09288025]
[61.88692856 -73.00598145]
[72.77015686 -62.68285751]
[72.77015686 -77.68286133]
[72.77015686 -92.68286133]
[72.77015686 -107.68286133]
[72.77015686 -122.68286133]
[65.03285217 -136.48303223]
[72.77015686 -149.21029663]
[72.77015686 -164.21029663]
[72.77015686 -179.21029663]
[72.77015686 -194.21029663]
[58.08156967 -197.55592346]
[44.50595093 -204.08665466]
[32.72425461 -213.47489929]
[23.32743835 -225.24977112]
[16.78684425 -238.82064819]
[13.43054771 -253.50679016]
[13.42689800 -268.57156372]
[16.77607727 -283.25933838]
[23.31009293 -296.83337402]
[32.70120239 -308.61279297]
[44.47835159 -318.00677490]
[58.05080032 -324.54406738]
[72.73776245 -327.89682007]
[87.80254364 -327.89682007]
[102.48950958 -324.54406738]
[116.06195831 -318.00677490]
[127.83910370 -308.61279297]
[137.23020935 -296.83337402]
[143.76423645 -283.25933838]
[147.11341858 -268.57156372]
[147.10975647 -253.50679016]
[143.75346375 -238.82064819]
[137.21287537 -225.24977112]
[127.81605530 -213.47489929]
[116.03435516 -204.08665466]
[102.45874023 -197.55592346]
[87.77015686 -194.21029663]
[87.77015686 -179.21029663]
[87.77015686 -164.21029663]
[87.77015686 -149.21029663]
[95.50745392 -136.48303223]
[87.77015686 -122.68286133]
[87.77015686 -107.68286133]
[87.77015686 -92.68286133]
[87.77015686 -77.68286133]
[87.77015686 -62.68285751]
[88.86146545 -47.72261047]
[92.97055054 -41.52091217]
[90.92587280 -32.55033875]
[92.79348755 -17.66705894]
[94.66110229 -2.78377986]
[96.52871704 12.09949970]
[98.39632416 26.98278046]
[100.26393890 41.86605835]
[102.13155365 56.74934006]
[103.99916840 71.63262177]
[117.61919403 77.41094208]
[126.53990173 89.21411896]
[128.38200378 103.89406586]
[122.65416718 117.53540039]
[110.88411713 126.49976349]
[112.75172424 141.38304138]
[127.71498108 143.16813660]
[141.80761719 148.47944641]
[154.21195984 157.00419617]
[164.20944214 168.24325562]
[171.22216797 181.54045105]
[174.84632874 196.12078857]
[174.87547302 211.13569641]
[171.31225586 225.71237183]
[164.36801147 239.00451660]
[154.45024109 250.24150085]
[142.13873291 258.77301025]
[128.15158081 264.10668945]
[130.01919556 278.98995972]
[131.88679504 293.87322998]
[133.75440979 308.75653076]
[144.44915771 310.60058594]
[154.37042236 314.96725464]
[162.93359375 321.59240723]
[169.63572693 330.07907104]
[174.08509827 339.92117310]
[176.02404785 350.53375244]
[175.34396362 361.28765869]
[172.09127808 371.54687500]
[166.46440125 380.70620728]
[158.80160522 388.22686768]
[149.56069946 393.66824341]
[139.29170227 396.71368408]
[139.29170227 411.71368408]
[139.29170227 426.71368408]
[139.29170227 441.71368408]
[139.29170227 456.71368408]
[139.29170227 471.71368408]
[139.29170227 486.71368408]
[139.29170227 501.71368408]
[139.29170227 516.71368408]
[139.29170227 531.71368408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 129]
[17 128]
[18 127]
[19 126]
[31 114]
[32 113]
[37 108]
[38 107]
[39 106]
[40 105]
[41 104]
[42 103]
[43 102]
[44 101]
[45 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[59 92]
[60 91]
[61 90]
[62 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
