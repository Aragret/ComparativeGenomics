%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAxxxxxxxxxxCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.44578552 292.59335327]
[123.82180786 277.60632324]
[123.19783020 262.61932373]
[122.57385254 247.63229370]
[121.94987488 232.64527893]
[121.32589722 217.65826416]
[120.70191956 202.67124939]
[120.07794189 187.68423462]
[117.28562164 172.94642639]
[112.38407135 158.76986694]
[107.48252106 144.59330750]
[102.58097076 130.41674805]
[97.67942047 116.24018860]
[89.42713165 103.71423340]
[78.33581543 93.61557770]
[67.24449921 83.51692963]
[56.15318298 73.41828156]
[45.18902206 83.66687012]
[33.43574142 92.99996948]
[20.96956825 101.35704803]
[7.87134695 108.68391418]
[-5.77397156 114.93303680]
[-19.87789154 120.06390381]
[-34.34894180 124.04322815]
[-49.09326935 126.84520721]
[-64.01525116 128.45166016]
[-79.01811981 128.85218811]
[-94.00456238 128.04415894]
[-108.87738800 126.03285217]
[-123.54013824 122.83128357]
[-137.89772034 118.46023560]
[-151.85702515 112.94804382]
[-165.32749939 106.33045959]
[-178.22180176 98.65040588]
[-190.45631409 89.95768738]
[-201.95166016 80.30867767]
[-212.63330078 69.76596832]
[-222.43196106 58.39791870]
[-231.28410339 46.27826691]
[-239.13229370 33.48560715]
[-245.92565918 20.10290909]
[-251.62011719 6.21696520]
[-256.17874146 -8.08216667]
[-259.57199097 -22.70174980]
[-261.77783203 -37.54697037]
[-262.78198242 -52.52154922]
[-262.57788086 -67.52837372]
[-261.16693115 -82.47010803]
[-258.55819702 -97.24985504]
[-254.76866150 -111.77175903]
[-249.82287598 -125.94163513]
[-243.75291443 -139.66758728]
[-236.59814453 -152.86061096]
[-228.40496826 -165.43511963]
[-219.22653198 -177.30957031]
[-209.12236023 -188.40695190]
[-198.15797424 -198.65530396]
[-186.40449524 -207.98814392]
[-173.93812561 -216.34494019]
[-160.83975220 -223.67152405]
[-147.19429016 -229.92034912]
[-133.09025574 -235.05090332]
[-118.61911774 -239.02990723]
[-103.87473297 -241.83155823]
[-88.95271301 -243.43768311]
[-73.94983673 -243.83787537]
[-58.96341324 -243.02952576]
[-44.09063339 -241.01788330]
[-29.42795181 -237.81599426]
[-15.07046318 -233.44462585]
[-1.11128473 -227.93212891]
[12.35905266 -221.31425476]
[25.25318718 -213.63391113]
[37.48749542 -204.94091797]
[48.98263168 -195.29167175]
[59.66404343 -184.74871826]
[69.46245575 -173.38046265]
[78.31432343 -161.26060486]
[86.16223907 -148.46777344]
[92.95529938 -135.08493042]
[98.64945984 -121.19886017]
[103.20777893 -106.89962769]
[106.60070038 -92.27996826]
[108.80621338 -77.43470001]
[109.81002045 -62.46009445]
[109.60560608 -47.45327759]
[108.19430542 -32.51157379]
[105.58525848 -17.73188400]
[101.79540253 -3.21006441]
[96.84929657 10.95970631]
[90.77902985 24.68552971]
[83.62397766 37.87838745]
[75.43052673 50.45271683]
[66.25183105 62.32696533]
[77.34314728 72.42561340]
[88.43446350 82.52426147]
[99.52577972 92.62291718]
[101.32699585 89.17765808]
[104.37268066 86.26476288]
[108.50592804 84.22106934]
[113.48944092 83.33974457]
[119.01695251 83.85243225]
[133.97720337 82.76112366]
[148.93745422 81.66980743]
[163.89770508 80.57849884]
[178.85795593 79.48719025]
[187.25236511 75.72080994]
[194.14021301 78.53209686]
[209.11991882 77.75225067]
[224.09963989 76.97240448]
[239.60299683 70.11077118]
[250.48823547 83.10876465]
[241.01153564 97.16680908]
[224.87948608 91.95211792]
[209.89976501 92.73196411]
[194.92004395 93.51181030]
[179.94926453 94.44743347]
[164.98901367 95.53874969]
[150.02876282 96.63005829]
[135.06851196 97.72136688]
[120.10826111 98.81267548]
[111.85597229 111.33863831]
[116.75752258 125.51519775]
[121.65908051 139.69175720]
[126.56063080 153.86831665]
[131.46217346 168.04487610]
[135.25071716 153.53118896]
[144.21957397 141.50788879]
[157.05180359 133.74043274]
[171.86322021 131.36932373]
[186.47897339 134.74273682]
[198.75294495 143.36535645]
[206.88291931 155.97103882]
[209.67512512 170.70887756]
[206.71955872 185.41481018]
[198.45021057 197.92951965]
[186.08129883 206.41539001]
[171.42901611 209.62641907]
[156.64483643 207.09111023]
[143.89956665 199.18173218]
[135.06495667 187.06025696]
[135.68893433 202.04727173]
[136.31291199 217.03428650]
[136.93688965 232.02130127]
[137.56086731 247.00831604]
[138.18484497 261.99533081]
[138.80882263 276.98236084]
[139.43280029 291.96936035]
[146.13279724 307.54327393]
[133.02226257 318.29269409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[14 97]
[15 96]
[16 95]
[17 94]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
