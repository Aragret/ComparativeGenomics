%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCxxxxxxxxxxGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[66.35536957 378.93902588]
[68.94637299 359.73129272]
[69.25842285 344.73452759]
[69.57048035 329.73779297]
[69.88253784 314.74102783]
[70.19459534 299.74429321]
[70.50665283 284.74752808]
[70.81871033 269.75076294]
[71.13076019 254.75401306]
[71.44281769 239.75726318]
[71.75487518 224.76051331]
[67.94057465 223.43028259]
[64.33555603 221.60757446]
[61.00306320 219.32438660]
[49.11068344 228.46612549]
[37.21830368 237.60786438]
[25.32592392 246.74958801]
[13.43354321 255.89132690]
[12.94579601 271.52130127]
[2.48691630 283.14651489]
[-13.00473118 285.27792358]
[-26.21446609 276.90911865]
[-30.90505219 261.99160767]
[-24.86174202 247.56895447]
[-10.93799973 240.45114136]
[4.29180956 243.99894714]
[16.18418884 234.85720825]
[28.07656860 225.71548462]
[39.96894836 216.57374573]
[51.86132812 207.43200684]
[53.73405838 178.78041077]
[78.82920074 163.97456360]
[81.92752075 149.29803467]
[85.02584076 134.62152100]
[67.46422577 119.08660126]
[62.47317886 96.17736053]
[48.15058136 91.72054291]
[33.82798386 87.26373291]
[19.50538826 82.80691528]
[5.18279076 78.35009766]
[-6.57099628 88.34269714]
[-21.86433983 90.37178040]
[-35.81719208 83.78987122]
[-43.97724533 70.69723511]
[-43.74065781 55.27168655]
[-35.18292236 42.43545914]
[-21.03478241 36.28454971]
[-5.81085968 38.78168488]
[5.63095045 49.13004303]
[9.63960648 64.02750397]
[23.96220398 68.48431396]
[38.28480148 72.94113159]
[52.60739899 77.39794922]
[66.92999268 81.85476685]
[73.78069305 72.88132477]
[82.97998810 66.33705139]
[93.70386505 62.80815506]
[104.99172211 62.61072922]
[109.89327240 48.43417358]
[107.09020233 32.86325836]
[118.56164551 23.36298180]
[123.46319580 9.18642330]
[128.36474609 -4.99013472]
[133.26629639 -19.16669273]
[138.16784668 -33.34325027]
[143.06939697 -47.51980972]
[139.13949585 -65.47908783]
[152.76948547 -76.48922729]
[157.37506104 -90.76468658]
[144.36822510 -98.35653687]
[133.29780579 -108.56732178]
[124.68160248 -120.91944885]
[118.92259979 -134.83518982]
[116.29016113 -149.66369629]
[116.90740204 -164.71138000]
[120.74546814 -179.27445984]
[127.62483215 -192.67179871]
[137.22373962 -204.27674866]
[149.09323120 -213.54655457]
[162.67814636 -220.04763794]
[177.34310913 -223.47593689]
[192.40219116 -223.67108154]
[207.15106201 -220.62397766]
[220.89988708 -214.47712708]
[233.00561523 -205.51803589]
[242.90203857 -194.16572571]
[250.12626648 -180.95117188]
[254.34043884 -166.49243164]
[255.34742737 -151.46578979]
[253.10014343 -136.57405090]
[247.70370483 -122.51374054]
[239.41049194 -109.94248199]
[228.60839844 -99.44824219]
[215.80267334 -91.52187347]
[201.59223938 -86.53409576]
[186.64176941 -84.71820068]
[171.65051270 -86.15911865]
[167.04495239 -71.88365936]
[172.28536987 -60.93627167]
[168.51596069 -48.97757721]
[157.24595642 -42.61825943]
[152.34440613 -28.44169998]
[147.44285583 -14.26514149]
[142.54130554 -0.08858379]
[137.63975525 14.08797455]
[132.73820496 28.26453209]
[135.89186096 42.82144547]
[124.06983185 53.33572388]
[119.16828156 67.51228333]
[128.86019897 75.71082306]
[135.28350830 86.66027069]
[137.71075439 99.12052155]
[152.47680664 101.75938416]
[167.24287415 104.39824677]
[182.00892639 107.03711700]
[197.23973083 100.95806885]
[209.95050049 111.31993866]
[207.06549072 127.46331787]
[191.55255127 132.78128052]
[179.37005615 121.80316925]
[164.60400391 119.16430664]
[149.83795166 116.52544403]
[135.07189941 113.88657379]
[129.39176941 123.64315796]
[121.07886505 131.28189087]
[110.87780762 136.11853027]
[99.70236969 137.71983337]
[96.60404968 152.39636230]
[93.50572205 167.07289124]
[98.94277954 170.50900269]
[103.55345917 174.97113037]
[107.14830017 180.26707458]
[109.58135986 186.17060852]
[110.75620270 192.43106079]
[110.62963867 198.78399658]
[109.21332550 204.96241760]
[106.57299042 210.70793152]
[102.82541656 215.78157043]
[98.13327789 219.97375488]
[92.69811249 223.11293030]
[86.75163269 225.07257080]
[86.43957520 240.06932068]
[86.12751770 255.06607056]
[85.81546021 270.06283569]
[85.50340271 285.05957031]
[85.19134521 300.05633545]
[84.87929535 315.05310059]
[84.56723785 330.04983521]
[84.25518036 345.04660034]
[83.94312286 360.04336548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[32 129]
[33 128]
[34 127]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[58 109]
[59 108]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[68 98]
[69 97]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
