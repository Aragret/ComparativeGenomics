%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACxxxxxxxxxxUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.15325165 302.68618774]
[124.15325165 287.68618774]
[124.15325165 272.68618774]
[124.15325165 257.68618774]
[124.15325165 242.68617249]
[124.15325165 227.68617249]
[124.15325165 212.68617249]
[124.15325165 197.68617249]
[124.15325165 182.68617249]
[124.15325165 167.68617249]
[120.44709015 153.15122986]
[113.26458740 139.98265076]
[95.71100616 141.90663147]
[78.91110229 136.46670532]
[65.81697845 124.61875153]
[58.72957230 108.44474792]
[58.89429474 90.78681183]
[66.28219604 74.74784088]
[56.06871796 63.76217270]
[45.85523987 52.77650833]
[35.64175797 41.79084396]
[22.54860497 34.47173691]
[7.84064341 31.52625465]
[-6.86731815 28.58077240]
[-21.57527924 25.63529015]
[-36.28324127 22.68980789]
[-50.99120331 19.74432564]
[-64.87844086 36.38926315]
[-92.31716156 34.72107315]
[-107.13491821 37.05217743]
[-121.95267487 39.38328171]
[-136.77043152 41.71438599]
[-151.47747803 50.14877701]
[-163.65357971 38.35135269]
[-155.68788147 23.38525963]
[-139.10153198 26.89662933]
[-124.28377533 24.56552505]
[-109.46601868 22.23442078]
[-94.64826202 19.90331650]
[-93.55984497 12.48271465]
[-91.38300323 -2.35849118]
[-90.29458618 -9.77909374]
[-103.81877899 -16.26725960]
[-117.34296417 -22.75542450]
[-130.93179321 -15.26385689]
[-146.32458496 -17.22376251]
[-157.60252380 -27.88151550]
[-160.42900085 -43.13899612]
[-153.71717834 -57.12938690]
[-140.04789734 -64.47309875]
[-124.67726135 -62.34632874]
[-113.51560211 -51.56685638]
[-110.85480499 -36.27961349]
[-97.33061218 -29.79144859]
[-83.80641937 -23.30328369]
[-63.47706604 -21.48566055]
[-50.48143387 -9.60282612]
[-48.04571915 5.03636360]
[-33.33775711 7.98184586]
[-18.62979698 10.92732811]
[-3.92183566 13.87281132]
[10.78612614 16.81829262]
[25.49408722 19.76377678]
[14.64114761 9.40937138]
[5.97121334 -2.83122683]
[-0.19499421 -16.50521278]
[-3.62937427 -31.10675430]
[-4.20488119 -46.09571075]
[-1.90022588 -60.91760635]
[3.19933748 -75.02414703]
[10.90516472 -87.89349365]
[20.93219948 -99.04959869]
[32.90952301 -108.07975769]
[46.39406204 -114.64992523]
[60.88700104 -118.51706696]
[75.85221100 -119.53811646]
[90.73609161 -117.67531586]
[104.98806000 -112.99756622]
[118.08090973 -105.67790985]
[129.53028870 -95.98711395]
[138.91268921 -84.28366089]
[145.88101196 -71.00049591]
[150.17749023 -56.62898636]
[151.64318848 -41.70076752]
[150.22387695 -26.76806641]
[145.97207642 -12.38327599]
[139.04507446 0.92147857]
[129.69908142 12.65402508]
[118.27986908 22.38035011]
[105.20983124 29.74065781]
[90.97246552 34.46267319]
[76.09444427 36.37171555]
[61.12613297 35.39716721]
[46.62742233 31.57736397]
[56.84090424 42.56302643]
[67.05438232 53.54869080]
[77.26786041 64.53435516]
[88.24077606 59.54901123]
[100.17624664 57.87482071]
[112.09729004 59.64882278]
[123.02809906 64.72581482]
[132.07392883 72.69020081]
[138.49430847 82.89006042]
[153.06701660 79.33529663]
[167.63970947 75.78053284]
[179.11372375 64.06391144]
[194.92816162 68.40390015]
[198.81449890 84.33589172]
[186.77479553 95.47042084]
[171.19447327 90.35323334]
[156.62176514 93.90799713]
[142.04907227 97.46276093]
[140.73864746 110.72029114]
[135.35382080 122.90564728]
[126.43316650 132.80014038]
[133.61567688 145.96873474]
[134.31376648 130.98498535]
[138.51199341 116.58446503]
[145.97543335 103.57303619]
[156.28640747 92.67883301]
[168.86791992 84.51148987]
[183.01589966 79.52806091]
[197.93862915 78.00742340]
[212.80099487 80.03466797]
[226.77133179 85.49634552]
[239.06781006 94.08683014]
[249.00234985 105.32538605]
[256.01898193 118.58309937]
[259.72503662 133.11805725]
[259.91317749 148.11688232]
[256.57281494 162.74021912]
[249.89093018 176.16973877]
[240.24140930 187.65394592]
[228.16426086 196.55014038]
[214.33531189 202.36050415]
[199.52845764 204.75988770]
[184.57229614 203.61401367]
[170.30375671 198.98699951]
[157.52136230 191.13778687]
[146.94038391 180.50563049]
[139.15325928 167.68617249]
[139.15325928 182.68617249]
[139.15325928 197.68617249]
[139.15325928 212.68617249]
[139.15325928 227.68617249]
[139.15325928 242.68617249]
[139.15325928 257.68618774]
[139.15325928 272.68618774]
[139.15325928 287.68618774]
[139.15325928 302.68618774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 116]
[12 115]
[18 97]
[19 96]
[20 95]
[21 94]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[29 39]
[30 38]
[31 37]
[32 36]
[42 55]
[43 54]
[44 53]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
