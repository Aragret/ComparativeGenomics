%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCCxxxxxxxxxxAGUAUUUCCUCACGCAAGCAACCGCAUCCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.28627014 87.47462463]
[114.09797668 97.46572876]
[109.54079437 110.68403625]
[95.89312744 113.72257233]
[84.70482635 123.71366882]
[73.51653290 133.70475769]
[62.85562134 144.25677490]
[52.75018692 155.34191895]
[42.64475250 166.42704773]
[32.53931808 177.51217651]
[22.43388367 188.59732056]
[12.32844830 199.68244934]
[2.22301388 210.76757812]
[-7.88242102 221.85272217]
[-17.98785591 232.93785095]
[-18.68625069 248.96569824]
[-31.73709106 258.29602051]
[-47.12888718 253.77142334]
[-53.05437469 238.86276245]
[-44.96802139 225.00669861]
[-29.07298851 222.83241272]
[-18.96755409 211.74728394]
[-8.86211967 200.66215515]
[1.24331462 189.57701111]
[11.34874916 178.49188232]
[21.45418358 167.40675354]
[31.55961800 156.32160950]
[41.66505432 145.23648071]
[51.77048874 134.15135193]
[36.94440842 131.87376404]
[29.29936028 118.96821594]
[34.42543030 104.87128448]
[48.57442093 99.89070892]
[61.40052795 107.66830444]
[63.52543259 122.51647186]
[74.71372986 112.52537537]
[85.90202332 102.53427124]
[90.45920563 89.31596375]
[104.10687256 86.27742767]
[115.29517365 76.28633118]
[106.21398926 64.86890411]
[97.78730774 52.96035385]
[90.04162598 40.59815598]
[83.00130463 27.82120705]
[76.68848419 14.66970921]
[71.12301636 1.18504596]
[66.32240295 -12.59035397]
[62.30173492 -26.61314774]
[59.07364655 -40.83921432]
[56.64828110 -55.22379684]
[55.03326797 -69.72163391]
[54.23366547 -84.28710938]
[54.25198364 -98.87441254]
[55.08815384 -113.43762970]
[56.73953247 -127.93095398]
[59.20091248 -142.30879211]
[62.46453857 -156.52590942]
[66.52012634 -170.53756714]
[71.35491943 -184.29969788]
[76.95368195 -197.76901245]
[83.29879761 -210.90313721]
[90.37028503 -223.66073608]
[98.14589691 -236.00170898]
[106.60115051 -247.88720703]
[115.70944214 -259.27987671]
[125.44210815 -270.14382935]
[135.76850891 -280.44494629]
[146.65615845 -290.15081787]
[158.07078552 -299.23086548]
[169.97648621 -307.65661621]
[182.33578491 -315.40148926]
[195.10980225 -322.44119263]
[208.25831604 -328.75354004]
[221.73999023 -334.31872559]
[235.51239014 -339.11920166]
[249.53216553 -343.13992310]
[263.75524902 -346.36822510]
[278.13684082 -348.79394531]
[292.63171387 -350.40951538]
[307.19427490 -351.20983887]
[321.77868652 -351.19238281]
[336.33908081 -350.35723877]
[350.82965088 -348.70706177]
[365.20480347 -346.24700928]
[379.41931152 -342.98489380]
[393.42843628 -338.93093872]
[407.18814087 -334.09793091]
[420.65512085 -328.50106812]
[433.78704834 -322.15798950]
[446.54254150 -315.08865356]
[458.88153076 -307.31530762]
[470.76519775 -298.86242676]
[482.15615845 -289.75662231]
[493.01855469 -280.02651978]
[503.31826782 -269.70275879]
[513.02282715 -258.81784058]
[522.10180664 -247.40600586]
[530.52655029 -235.50315857]
[538.27069092 -223.14677429]
[551.41229248 -230.37846375]
[559.43420410 -244.68167114]
[575.83319092 -244.61553955]
[583.73944092 -230.24809265]
[575.01965332 -216.35934448]
[558.64398193 -217.23683167]
[545.50238037 -210.00514221]
[552.15911865 -196.03199768]
[557.97265625 -181.68736267]
[562.92230225 -167.02207947]
[566.99053955 -152.08811951]
[570.16290283 -136.93840027]
[572.42816162 -121.62660980]
[573.77819824 -106.20703125]
[574.20831299 -90.73430634]
[573.71691895 -75.26326752]
[572.30578613 -59.84875107]
[569.97979736 -44.54539871]
[566.74725342 -29.40744209]
[562.61962891 -14.48854351]
[557.61145020 0.15841940]
[551.74053955 14.48152828]
[545.02758789 28.43001175]
[537.49645996 41.95442581]
[529.17382812 55.00683212]
[520.08911133 67.54095459]
[510.27456665 79.51236725]
[499.76492310 90.87862396]
[488.59744263 101.59943390]
[476.81167603 111.63678741]
[464.44940186 120.95510101]
[451.55441284 129.52131653]
[438.17239380 137.30508423]
[424.35079956 144.27879333]
[410.13858032 150.41770935]
[395.58612061 155.70007324]
[380.74496460 160.10713196]
[365.66775513 163.62324524]
[350.40786743 166.23596191]
[335.01943970 167.93597412]
[319.55697632 168.71726990]
[304.07525635 168.57705688]
[288.62921143 167.51579285]
[273.27355957 165.53726196]
[258.06274414 162.64842224]
[243.05062866 158.85952759]
[228.29046631 154.18395996]
[213.83456421 148.63830566]
[199.73416138 142.24220276]
[186.03924561 135.01828003]
[172.79835510 126.99215698]
[160.05844116 118.19224548]
[147.86463928 108.64972687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[4 37]
[5 36]
[6 35]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
