%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGxxxxxxxxxxUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-14.32718468 201.34580994]
[-26.02680779 210.73297119]
[-37.72643280 220.12013245]
[-49.42605591 229.50729370]
[-61.12567902 238.89445496]
[-72.42468262 248.76017761]
[-83.30350494 259.08737183]
[-94.18233490 269.41458130]
[-105.06115723 279.74179077]
[-115.93998718 290.06900024]
[-109.40840149 303.71426392]
[-107.41512299 318.71032715]
[-110.15544128 333.58804321]
[-117.36088562 346.88980103]
[-128.32553101 357.31243896]
[-141.97518921 363.83489990]
[-156.97257996 365.81811523]
[-171.84843445 363.06784058]
[-185.14537048 355.85348511]
[-195.56066895 344.88183594]
[-202.07395935 331.22781372]
[-204.04713440 316.22909546]
[-201.28688049 301.35510254]
[-194.06362915 288.06298828]
[-183.08502197 277.65505981]
[-169.42663574 271.15090942]
[-154.42658997 269.18777466]
[-139.55444336 271.95800781]
[-126.26718903 279.19015503]
[-115.38836670 268.86297607]
[-104.50953674 258.53576660]
[-93.63071442 248.20855713]
[-82.75189209 237.88134766]
[-82.57727814 235.02183533]
[-81.22223663 232.06246948]
[-78.64404297 229.46731567]
[-74.97372437 227.70668030]
[-70.51284027 227.19482422]
[-58.81321716 217.80766296]
[-47.11359406 208.42050171]
[-35.41397095 199.03334045]
[-23.71434593 189.64617920]
[-31.81675148 177.24002075]
[-38.67922974 164.10731506]
[-44.23723602 150.37158203]
[-48.43848419 136.16204834]
[-51.24345779 121.61234283]
[-52.62577438 106.85934448]
[-52.57242584 92.04183197]
[-51.08391571 77.29917145]
[-48.17424774 62.77004623]
[-43.87078857 48.59111786]
[-38.21402359 34.89576721]
[-31.25715637 21.81281471]
[-23.06562996 9.46532249]
[-13.71649647 -2.03056240]
[-3.29769731 -12.56670475]
[8.09276390 -22.04399681]
[20.34774208 -30.37329102]
[13.16523361 -43.54187393]
[5.98272467 -56.71045685]
[-8.29037666 -64.78576660]
[-8.16291618 -81.18441772]
[6.23398542 -89.03688812]
[20.09003067 -80.26522064]
[19.15130806 -63.89296722]
[26.33381653 -50.72438431]
[33.51632690 -37.55580139]
[47.46459961 -43.46326447]
[61.92930222 -47.96046448]
[76.76824951 -51.00318909]
[91.83556366 -52.56152725]
[106.98313904 -52.62015915]
[122.06206512 -51.17851257]
[136.92411804 -48.25075531]
[151.42320251 -43.86566925]
[165.41679382 -38.06636047]
[178.76733398 -30.90983772]
[191.34356689 -22.46644974]
[203.02186584 -12.81919670]
[213.68746948 -2.06291223]
[223.23548889 9.69666672]
[231.57208252 22.34394264]
[238.61531067 35.75458908]
[252.51786804 30.12263298]
[266.42041016 24.49067497]
[280.32296753 18.85871887]
[294.22552490 13.22676182]
[308.12808228 7.59480524]
[322.03063965 1.96284866]
[335.93319702 -3.66910791]
[349.83575439 -9.30106449]
[350.20501709 -23.46350098]
[355.93804932 -36.37147522]
[366.13516235 -46.08113861]
[379.22732544 -51.14417267]
[393.21731567 -50.82376099]
[405.98452759 -45.20163345]
[415.60635376 -35.16063690]
[429.62304688 -40.50214767]
[443.63977051 -45.84366226]
[457.65646362 -51.18517303]
[467.58239746 -64.23922729]
[483.81414795 -61.90202713]
[489.65386963 -46.57788467]
[479.09420776 -34.03096390]
[462.99798584 -37.16846085]
[448.98126221 -31.82694817]
[434.96456909 -26.48543549]
[420.94784546 -21.14392281]
[419.91180420 -5.22767925]
[412.02322388 8.70163918]
[398.81082153 17.84220314]
[382.87982178 20.33020782]
[367.39843750 15.61972809]
[355.46771240 4.60149145]
[341.56515503 10.23344803]
[327.66259766 15.86540508]
[313.76004028 21.49736214]
[299.85748291 27.12931824]
[285.95492554 32.76127625]
[272.05236816 38.39323044]
[258.14981079 44.02518845]
[244.24726868 49.65714645]
[248.49125671 64.05526733]
[251.30186462 78.80036163]
[252.65194702 93.75009155]
[252.52847290 108.76015472]
[250.93266296 123.68566132]
[247.87988281 138.38252258]
[243.39961243 152.70887756]
[237.53512573 166.52644348]
[230.34300232 179.70182800]
[221.89266968 192.10783386]
[212.26571655 203.62474060]
[201.55505371 214.14134216]
[189.86408997 223.55615234]
[177.30566406 231.77827454]
[164.00100708 238.72833252]
[150.07853699 244.33924866]
[135.67266846 248.55685425]
[120.92245483 251.34043884]
[105.97027588 252.66313171]
[90.96045685 252.51217651]
[76.03790283 250.88902283]
[61.34665680 247.80932617]
[47.02853012 243.30282593]
[33.22173691 237.41302490]
[20.05955315 230.19677734]
[7.66903543 221.72373962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 39]
[5 38]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[59 68]
[60 67]
[61 66]
[84 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[92 116]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
