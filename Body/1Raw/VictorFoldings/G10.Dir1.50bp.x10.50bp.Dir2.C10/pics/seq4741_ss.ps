%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCxxxxxxxxxxGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[93.81355286 445.22647095]
[93.81355286 430.22647095]
[93.81355286 415.22647095]
[93.81355286 400.22647095]
[93.81355286 385.22647095]
[93.81355286 370.22647095]
[93.81355286 355.22647095]
[93.81355286 340.22647095]
[93.81355286 325.22647095]
[93.81355286 310.22647095]
[79.27116394 306.67581177]
[65.99320984 299.74356079]
[54.75352859 289.82885742]
[46.20834732 277.50473022]
[40.85794830 263.48513794]
[39.01739502 248.58343506]
[40.79799271 233.66531372]
[46.10054398 219.59846497]
[54.62088394 207.20208740]
[65.86731720 197.19924927]
[79.18898773 190.17462158]
[93.81355286 186.54039001]
[93.81355286 171.54039001]
[93.65956116 156.54116821]
[93.35157776 141.54434204]
[93.04360199 126.54750061]
[78.50405121 117.06122589]
[72.56640625 100.74767303]
[77.60668945 84.13492584]
[68.20282745 72.44871521]
[58.79897308 60.76250458]
[46.16769028 68.87932587]
[32.74518967 75.60751343]
[18.68355560 80.87084198]
[4.14212132 84.60966492]
[-10.71434879 86.78161621]
[-25.71751976 87.36209869]
[-40.69739532 86.34452057]
[-55.48423767 83.74042511]
[-69.91050720 79.57930756]
[-83.81273651 73.90832520]
[-97.03340912 66.79172516]
[-109.42272186 58.31015015]
[-120.84028625 48.55970764]
[-131.15675354 37.65086746]
[-140.25520325 25.70724106]
[-148.03256226 12.86415672]
[-154.40069580 -0.73286116]
[-159.28746033 -14.92974949]
[-162.63748169 -29.56564713]
[-164.41279602 -44.47471619]
[-164.59327698 -59.48802948]
[-163.17691040 -74.43547058]
[-160.17971802 -89.14767456]
[-155.63566589 -103.45793915]
[-149.59625244 -117.20412445]
[-142.12989807 -130.23046875]
[-133.32119751 -142.38937378]
[-123.26998138 -153.54307556]
[-112.09011841 -163.56518555]
[-99.90828705 -172.34214783]
[-86.86252594 -179.77453613]
[-73.10064697 -185.77809143]
[-58.77858734 -190.28482056]
[-44.05862045 -193.24365234]
[-29.10753632 -194.62106323]
[-14.09474754 -194.40144348]
[0.80964440 -192.58726501]
[15.43675900 -189.19911194]
[29.62086105 -184.27536011]
[43.20123291 -177.87179565]
[56.02400208 -170.06098938]
[67.94387054 -160.93142700]
[78.82578278 -150.58656311]
[88.54643250 -139.14361572]
[96.99568176 -126.73224640]
[104.07778931 -113.49306488]
[109.71251678 -99.57610321]
[113.83601379 -85.13903809]
[116.40155792 -70.34545135]
[117.38008118 -55.36297989]
[116.76049805 -40.36137009]
[114.54981995 -25.51061249]
[110.77310944 -10.97897434]
[105.47314453 3.06889009]
[98.70999146 16.47380829]
[90.56027222 29.08389091]
[81.11633301 40.75625610]
[70.48518372 51.35864639]
[79.88903809 63.04485703]
[89.29289246 74.73106384]
[107.78094482 73.68236542]
[122.72640228 84.61585236]
[136.97308350 79.92205048]
[151.21978760 75.22825623]
[165.46647644 70.53445435]
[179.71316528 65.84065247]
[186.93821716 60.14903259]
[194.30079651 61.19999313]
[208.64085388 56.79969406]
[222.98092651 52.39939117]
[237.32098389 47.99909210]
[251.66104126 43.59879303]
[266.00109863 39.19849014]
[273.18408203 25.12084007]
[288.24319458 20.32511711]
[302.24411011 27.65653992]
[306.88034058 42.76550293]
[299.40130615 56.68812943]
[284.24417114 61.16437149]
[270.40139771 53.53855133]
[256.06134033 57.93885422]
[241.72128296 62.33915329]
[227.38122559 66.73945618]
[213.04115295 71.13975525]
[198.70109558 75.54005432]
[184.40696716 80.08734131]
[170.16027832 84.78114319]
[155.91358948 89.47494507]
[141.66688538 94.16874695]
[127.42019653 98.86254883]
[126.77315521 106.02986145]
[124.28512573 112.78255463]
[120.12719727 118.65628815]
[114.58528137 123.24716949]
[108.04044342 126.23951721]
[108.34841919 141.23635864]
[108.65639496 156.23320007]
[111.97811890 164.81002808]
[108.81355286 171.54039001]
[108.81355286 186.54039001]
[123.43811798 190.17462158]
[136.75979614 197.19924927]
[148.00622559 207.20208740]
[156.52656555 219.59846497]
[161.82911682 233.66531372]
[163.60971069 248.58343506]
[161.76916504 263.48513794]
[156.41876221 277.50473022]
[147.87358093 289.82885742]
[136.63389587 299.74356079]
[123.35594940 306.67581177]
[108.81355286 310.22647095]
[108.81355286 325.22647095]
[108.81355286 340.22647095]
[108.81355286 355.22647095]
[108.81355286 370.22647095]
[108.81355286 385.22647095]
[108.81355286 400.22647095]
[108.81355286 415.22647095]
[108.81355286 430.22647095]
[108.81355286 445.22647095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[22 131]
[23 130]
[24 128]
[25 127]
[26 126]
[29 91]
[30 90]
[31 89]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
