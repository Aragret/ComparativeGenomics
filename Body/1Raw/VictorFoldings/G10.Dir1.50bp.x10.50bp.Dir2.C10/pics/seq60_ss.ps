%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGxxxxxxxxxxCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.18751526 571.39019775]
[101.77851868 552.18243408]
[102.09056854 537.18566895]
[102.40262604 522.18896484]
[102.71468353 507.19219971]
[103.02674103 492.19543457]
[103.33879852 477.19866943]
[103.65085602 462.20193481]
[103.96290588 447.20516968]
[104.27496338 432.20843506]
[104.58702087 417.21166992]
[89.91726685 414.17214966]
[76.05216217 408.48721313]
[63.46446228 400.34909058]
[52.58366013 390.03372192]
[43.78133392 377.89132690]
[37.35844803 364.33462524]
[33.53506851 349.82464600]
[32.44283295 334.85519409]
[34.12039185 319.93597412]
[38.51207352 305.57525635]
[45.46971512 292.26257324]
[54.75765610 280.45193481]
[66.06072998 270.54653931]
[78.99495697 262.88482666]
[93.12058258 257.72894287]
[107.95703888 255.25592041]
[108.26909637 240.25917053]
[100.79824066 227.37368774]
[108.82096100 213.73747253]
[109.13301849 198.74072266]
[101.66217041 185.85523987]
[109.68489075 172.21900940]
[109.99694824 157.22225952]
[100.13513947 126.42174530]
[94.07212830 112.70169067]
[82.77312469 102.83596802]
[68.36090851 98.67807770]
[53.94869232 94.52019501]
[39.53647614 90.36230469]
[27.37660980 100.00166321]
[11.87182045 100.61904144]
[-1.01598155 91.97704315]
[-6.33117437 77.39868927]
[-2.02995753 62.48965836]
[10.23376274 52.98277664]
[25.74433708 52.53363419]
[38.53763199 61.31493759]
[43.69436264 75.95008850]
[58.10657883 80.10797882]
[72.51879883 84.26586151]
[86.93101501 88.42375183]
[94.92127991 75.72825623]
[102.91084290 63.03389359]
[92.92811584 51.83812714]
[82.94538879 40.64236069]
[67.89131927 32.84421158]
[71.21733093 16.21971130]
[88.11286926 14.81362343]
[94.14115906 30.65963554]
[104.12388611 41.85540009]
[114.10661316 53.05116653]
[128.38206482 48.44560242]
[129.93965149 33.52669144]
[131.49723816 18.60777855]
[133.05480957 3.68886590]
[118.91228485 -1.54942954]
[106.51725006 -10.14093494]
[96.64887238 -21.54557991]
[89.92749023 -35.04645920]
[86.77560425 -49.79489899]
[87.39134979 -64.86380005]
[91.73602295 -79.30590820]
[99.53651428 -92.21339417]
[110.30247498 -102.77487946]
[123.35715485 -110.32644653]
[137.87991333 -114.39341736]
[152.95783997 -114.72013092]
[167.64314270 -111.28604889]
[181.01266479 -104.30703735]
[192.22599792 -94.22180176]
[200.57827759 -81.66432190]
[205.54444885 -67.42395782]
[206.81233215 -52.39587402]
[204.30226135 -37.52474976]
[198.17198181 -23.74539757]
[188.80686951 -11.92399883]
[176.79562378 -2.80365443]
[162.89326477 3.04232168]
[147.97372437 5.24644661]
[146.41615295 20.16535950]
[144.85856628 35.08427048]
[143.30097961 50.00318527]
[138.07955933 97.11167908]
[107.79218292 106.63867950]
[113.85519409 120.35873413]
[110.65902710 105.70320129]
[117.10269928 92.15776062]
[130.48963928 85.39094543]
[145.21763611 88.23457336]
[155.12326050 99.49861908]
[156.06115723 114.46926117]
[147.63885498 126.88154602]
[133.37965393 131.54109192]
[148.28157043 129.82841492]
[163.18347168 128.11572266]
[178.08537292 126.40303040]
[192.98727417 124.69033813]
[205.83079529 114.49348450]
[220.98182678 120.76872253]
[222.85426331 137.06062317]
[209.52191162 146.60948181]
[194.69996643 139.59223938]
[179.79804993 141.30493164]
[164.89614868 143.01762390]
[149.99424744 144.73031616]
[135.09234619 146.44299316]
[124.99369812 157.53431702]
[124.68164825 172.53106689]
[132.13017273 186.48921204]
[124.12977600 199.05276489]
[123.81771851 214.04953003]
[131.26625061 228.00767517]
[123.26584625 240.57122803]
[122.95378876 255.56797791]
[137.67453003 258.65603638]
[151.57345581 264.39505005]
[164.17776489 272.58819580]
[175.05900574 282.95520020]
[183.84761047 295.14196777]
[190.24543762 308.73257446]
[194.03593445 323.26354980]
[195.09143066 338.23962402]
[193.37742615 353.15066528]
[188.95376587 367.48904419]
[181.97250366 380.76684570]
[172.67268372 392.53256226]
[161.37219238 402.38638306]
[148.45686340 409.99383545]
[134.36726379 415.09707642]
[119.58377838 417.52371216]
[119.27172089 432.52047729]
[118.95966339 447.51724243]
[118.64760590 462.51397705]
[118.33554840 477.51074219]
[118.02349091 492.50750732]
[117.71144104 507.50424194]
[117.39938354 522.50097656]
[117.08732605 537.49774170]
[116.77526855 552.49450684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[27 125]
[28 124]
[30 122]
[31 121]
[33 119]
[34 118]
[35 96]
[36 95]
[37 52]
[38 51]
[39 50]
[40 49]
[54 62]
[55 61]
[56 60]
[63 93]
[64 92]
[65 91]
[66 90]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
