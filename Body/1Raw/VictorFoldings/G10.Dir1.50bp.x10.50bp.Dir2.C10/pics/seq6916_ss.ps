%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGxxxxxxxxxxUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.69119263 124.20316315]
[84.94354248 135.60418701]
[81.85646057 151.12129211]
[67.70485687 155.76684570]
[57.95720291 167.16786194]
[48.20954895 178.56889343]
[38.46189880 189.96990967]
[35.54988861 208.12203979]
[18.83702087 213.38320923]
[9.32866192 224.98455811]
[-0.17969666 236.58589172]
[5.31482077 250.92834473]
[2.88614106 266.09399414]
[-6.81243324 278.00338745]
[-21.17203522 283.45291138]
[-36.33000183 280.97671509]
[-48.20891953 271.24084473]
[-53.61341476 256.86422729]
[-51.08971024 241.71411133]
[-41.31666565 229.86576843]
[-26.92318344 224.50636292]
[-11.78103828 227.07754517]
[-2.27267933 215.47619629]
[7.23567915 203.87486267]
[6.36302996 191.76924133]
[14.24571609 182.01823425]
[27.06087685 180.22225952]
[36.80852890 168.82122803]
[46.55617905 157.42021179]
[56.30383301 146.01919556]
[58.69369125 131.31756592]
[73.54251862 125.85652924]
[83.29016876 114.45550537]
[79.73541260 99.88280487]
[65.83285522 94.25084686]
[51.93029785 88.61888885]
[38.02774048 82.98693848]
[24.01102829 77.64542389]
[9.88622475 72.59666443]
[-4.23857832 67.54791260]
[-15.45459557 77.96230316]
[-30.22872734 81.96025085]
[-45.16598892 78.62306213]
[-56.83390045 68.71759033]
[-62.55126953 54.52004623]
[-61.00428391 39.29291534]
[-52.54842758 26.53528976]
[-39.12679291 19.17877197]
[-23.82357788 18.91383553]
[-10.15534687 25.80136490]
[-1.26295996 38.25865173]
[0.81017816 53.42310715]
[14.93498135 58.47186279]
[29.05978394 63.52061844]
[33.73603821 62.29254150]
[39.23097610 64.03522491]
[43.65969849 69.08438110]
[57.56225204 74.71633911]
[71.46481323 80.34828949]
[85.36736298 85.98024750]
[75.86682892 74.37250519]
[66.36629486 62.76475525]
[56.86575317 51.15700912]
[43.45092773 44.44564056]
[31.73925018 35.07352448]
[22.25021553 23.45637131]
[15.40473080 10.10948658]
[11.50643921 -4.37510204]
[10.72825813 -19.35490227]
[13.10470581 -34.16545486]
[18.53036880 -48.14981079]
[26.76458168 -60.68766403]
[37.44210052 -71.22286987]
[50.08930206 -79.28812408]
[64.14519501 -84.52567291]
[78.98629761 -86.70319366]
[93.95430756 -85.72410583]
[108.38529205 -81.63182068]
[121.63912964 -74.60787964]
[133.12792969 -64.96383667]
[142.34207153 -53.12746811]
[148.87283325 -39.62380219]
[152.43057251 -25.05182266]
[152.85743713 -10.05789852]
[150.13450623 4.69288683]
[144.38256836 18.54623222]
[135.85675049 30.88764191]
[124.92999268 41.17367172]
[119.16305542 55.02077866]
[113.39611816 68.86788940]
[107.62917328 82.71499634]
[119.32879639 73.32783508]
[131.02842712 63.94067001]
[142.72804260 54.55350876]
[145.89916992 38.82698441]
[160.23704529 31.62942696]
[174.74288940 38.48218155]
[178.28904724 54.12840652]
[168.15521240 66.56565094]
[152.11520386 66.25313568]
[140.41558838 75.64029694]
[128.71595764 85.02745819]
[117.01633453 94.41461945]
[119.24474335 101.57592010]
[131.48912048 92.91132355]
[143.51335144 101.87893677]
[138.70030212 116.08579254]
[123.70156097 115.89851379]
[125.92996979 123.05981445]
[140.89021301 124.15112305]
[155.85046387 125.24243164]
[170.81071472 126.33374786]
[183.84133911 116.97520447]
[199.24288940 121.46651459]
[205.20060730 136.36231995]
[197.14424133 150.23583984]
[181.25395203 152.44450378]
[169.71940613 141.29399109]
[154.75915527 140.20268250]
[139.79890442 139.11137390]
[124.83865356 138.02006531]
[137.44430542 146.15010071]
[150.04995728 154.28013611]
[162.65560913 162.41018677]
[175.26126099 170.54022217]
[186.82566833 180.09346008]
[196.13519287 191.85496521]
[202.77767944 205.30403137]
[206.45907593 219.84526062]
[207.01640320 234.83489990]
[204.42497253 249.60935974]
[198.79953003 263.51455688]
[190.38909912 275.93487549]
[179.56602478 286.32049561]
[166.80944824 294.21160889]
[152.68412781 299.25891113]
[137.81538391 301.23892212]
[122.86146545 300.06396484]
[108.48440552 295.78610229]
[95.32068634 288.59469604]
[83.95306396 278.80810547]
[74.88480377 266.85961914]
[68.51735687 253.27816772]
[65.13262177 238.66503906]
[64.88043213 223.66716003]
[67.77195740 208.94848633]
[73.67919159 195.16064453]
[82.33747864 182.91760254]
[85.42590332 168.23899841]
[88.51433563 153.56037903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[4 30]
[5 29]
[6 28]
[7 27]
[9 24]
[10 23]
[11 22]
[34 60]
[35 59]
[36 58]
[37 57]
[38 54]
[39 53]
[40 52]
[91 103]
[92 102]
[93 101]
[94 100]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
