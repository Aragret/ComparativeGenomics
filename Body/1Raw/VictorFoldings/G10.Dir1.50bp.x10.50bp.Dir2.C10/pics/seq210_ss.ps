%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCAxxxxxxxxxxCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.93872070 270.18981934]
[106.93872070 255.18981934]
[106.93872070 240.18981934]
[106.93872070 225.18981934]
[106.93872070 210.18981934]
[106.93872070 195.18981934]
[106.93872070 180.18981934]
[106.93872070 165.18981934]
[106.93872070 150.18981934]
[106.93872070 135.18981934]
[95.84437561 134.61231995]
[85.77448273 130.72059631]
[77.66168976 124.08287811]
[72.19178009 115.51060486]
[69.74717712 105.96319580]
[70.38448334 96.44234467]
[73.84680939 87.88740540]
[62.34500504 78.25887299]
[50.84320068 68.63034821]
[39.34139633 59.00182343]
[27.83959198 49.37329865]
[0.90706509 54.88833237]
[-14.08563137 55.35637665]
[-29.07832718 55.82441711]
[-44.07102203 56.29245758]
[-59.06372070 56.76050186]
[-74.05641174 57.22854233]
[-89.04911041 57.69658661]
[-93.49617004 72.17078400]
[-102.40405273 84.41530609]
[-114.80650330 93.10195923]
[-129.35820007 97.28847504]
[-144.48066711 96.52074432]
[-158.53355408 90.88202667]
[-169.99250793 80.98398590]
[-177.61453247 67.90027618]
[-180.57284546 53.05012131]
[-178.54656982 38.04435730]
[-171.75549316 24.51069832]
[-160.93624878 13.91717339]
[-147.26243591 7.41288805]
[-132.21730042 5.70337915]
[-117.43280792 8.97408104]
[-104.51267242 16.87021255]
[-94.85838318 28.53526115]
[-89.51715088 42.70388794]
[-74.52445984 42.23584747]
[-59.53176117 41.76780319]
[-44.53906631 41.29976273]
[-29.54636955 40.83172226]
[-14.55367279 40.36367798]
[0.43902296 39.89563751]
[-12.94269657 33.11849976]
[-27.93566132 33.57786560]
[-41.47030640 27.11153793]
[-50.53340912 15.15912437]
[-53.10724258 0.38159502]
[-48.61879730 -13.93112087]
[-38.06733322 -24.59257698]
[-23.80193329 -29.22920799]
[-8.99850750 -26.80875587]
[3.04724908 -17.87009048]
[9.65358353 -4.40322971]
[9.34998703 10.59270000]
[16.26595879 23.90319633]
[16.57801437 8.90644360]
[16.89006996 -6.09031010]
[17.20212746 -21.08706474]
[3.15527511 -26.83600998]
[-7.86357546 -37.27389145]
[-14.36421585 -50.98907089]
[-15.46748734 -66.12667847]
[-11.02418232 -80.63948059]
[-1.63522077 -92.56474304]
[11.42961693 -100.28966522]
[26.40341949 -102.76952362]
[41.26110458 -99.66893005]
[53.99328613 -91.40721130]
[62.87804794 -79.10170746]
[66.71379852 -64.41663361]
[64.98178101 -49.33802032]
[57.91623306 -35.90512848]
[46.47272110 -25.93465042]
[32.19887924 -20.77500725]
[31.88682365 -5.77825403]
[31.57476807 9.21850014]
[31.26271248 24.21525383]
[37.46812057 37.87149429]
[48.96992111 47.50001907]
[60.47172546 57.12854767]
[71.97352600 66.75707245]
[83.47533417 76.38559723]
[104.66535187 69.18068695]
[126.48480225 79.45560455]
[135.68438721 103.61853790]
[150.61869812 102.21623993]
[165.55300903 100.81393433]
[180.48730469 99.41162872]
[171.06414795 87.74098206]
[174.10488892 73.05242157]
[187.38699341 66.08209229]
[201.20233154 71.92474365]
[205.45300293 86.30986786]
[197.03266907 98.72277069]
[212.03186035 98.87880707]
[227.03103638 99.03484344]
[242.03022766 99.19087982]
[257.02941895 99.34691620]
[264.77764893 86.08567047]
[278.12637329 78.48915100]
[293.48486328 78.60078430]
[306.72174072 86.39053345]
[314.27639771 99.76300049]
[314.11660767 115.12106323]
[306.28540039 128.33348083]
[292.88934326 135.84616089]
[277.53182983 135.63825989]
[264.34405518 127.76567078]
[256.87338257 114.34610748]
[241.87419128 114.19007111]
[226.87500000 114.03403473]
[211.87582397 113.87799835]
[196.87663269 113.72196198]
[181.88961792 114.34593964]
[166.95530701 115.74824524]
[152.02099609 117.15054321]
[137.08668518 118.55284882]
[150.86508179 124.48210144]
[164.64346313 130.41134644]
[179.49342346 132.52767944]
[191.67268372 141.28356934]
[198.40893555 154.68591309]
[198.16880798 169.68399048]
[191.00695801 182.86381531]
[178.55361938 191.22531128]
[163.64352417 192.86515808]
[149.67062378 187.41009521]
[139.81550598 176.10182190]
[136.32148743 161.51730347]
[129.13009644 148.35356140]
[121.93872070 135.18981934]
[121.93872070 150.18981934]
[121.93872070 165.18981934]
[121.93872070 180.18981934]
[121.93872070 195.18981934]
[121.93872070 210.18981934]
[121.93872070 225.18981934]
[121.93872070 240.18981934]
[121.93872070 255.18981934]
[121.93872070 270.18981934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[65 87]
[66 86]
[67 85]
[68 84]
[95 127]
[96 126]
[97 125]
[98 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
