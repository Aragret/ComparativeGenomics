%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAAxxxxxxxxxxACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.28282928 424.41998291]
[86.28282928 409.41998291]
[86.28282928 394.41998291]
[86.28282928 379.41998291]
[86.28282928 364.41998291]
[86.28282928 349.41998291]
[86.28282928 334.41998291]
[86.28282928 319.41998291]
[86.28282928 304.41998291]
[86.28282928 289.41998291]
[72.70514679 286.20797729]
[60.18673706 280.02902222]
[49.36703873 271.19473267]
[40.79958725 260.15258789]
[34.92373276 247.46304321]
[32.04207230 233.77119446]
[32.30489731 219.77398682]
[35.70235062 206.18469238]
[42.06473923 193.69660950]
[51.07102203 182.94766235]
[62.26499557 174.48780823]
[75.07840729 168.75096130]
[88.85980988 166.03265381]
[89.48378754 151.04563904]
[88.30371094 165.99914551]
[78.92535400 177.70582581]
[64.58961487 182.12017822]
[50.25052261 177.71672058]
[40.86327744 166.01715088]
[39.67185593 151.06454468]
[47.08797836 138.02609253]
[60.54883194 131.40753174]
[75.40304565 133.49620056]
[60.63698578 130.85734558]
[47.76088333 139.62339783]
[32.82359314 136.73686218]
[24.54585457 124.40744019]
[9.77979851 121.76857758]
[-2.10570645 131.93069458]
[-17.74301338 132.02378845]
[-29.74866295 122.00389099]
[-32.45395279 106.60208893]
[-24.58153343 93.09065247]
[-9.84851551 87.84925842]
[4.78861952 93.35273743]
[12.41866302 107.00251770]
[27.18471909 109.64138031]
[39.22050858 100.94222260]
[54.23297882 103.40805817]
[63.27585220 116.09128571]
[78.04190826 118.73014832]
[74.68633270 95.10168457]
[89.46932983 79.88462830]
[87.29248810 65.04341888]
[85.11565399 50.20221710]
[82.93881226 35.36101151]
[78.03726196 21.18445396]
[70.58235168 8.16814423]
[63.12744522 -4.84816551]
[55.67253494 -17.86447525]
[40.62989426 -23.44108391]
[35.74798584 -38.72331238]
[44.77179337 -51.98794556]
[60.77902222 -53.05949020]
[71.49029541 -41.11594772]
[68.68884277 -25.31938553]
[76.14375305 -12.30307579]
[83.59866333 0.71323359]
[91.05357361 13.72954273]
[91.55768585 -1.26198351]
[96.58766937 -15.39348412]
[105.66905975 -27.33200455]
[117.94526672 -35.95145035]
[132.25833130 -40.43878555]
[147.25817871 -40.37074661]
[161.52993774 -35.75375366]
[173.72744751 -27.02330017]
[182.70016479 -15.00288773]
[187.60174561 -0.82633865]
[187.96984863 14.16914463]
[183.76974487 28.56911278]
[175.39761353 41.01529312]
[163.64315796 50.33370209]
[149.61509705 55.64537430]
[134.63665771 56.44929504]
[120.12066650 52.66963196]
[107.43633270 44.66289902]
[97.78002167 33.18417358]
[99.95685577 48.02537918]
[102.13369751 62.86658478]
[104.31053162 77.70779419]
[125.53964233 96.46421814]
[112.97159576 125.78205109]
[127.87349701 124.06935883]
[142.77539062 122.35667419]
[157.67729187 120.64398193]
[172.57920837 118.93128967]
[176.08088684 116.12065887]
[179.91407776 114.75035095]
[183.57218933 114.74330902]
[186.62879944 115.86185455]
[188.78410339 117.74918365]
[198.20478821 108.87762451]
[210.74339294 108.83161926]
[219.63935852 117.08808136]
[234.63854980 116.93204498]
[249.63772583 116.77600861]
[264.63449097 116.46395111]
[279.62719727 115.99591064]
[294.61987305 115.52787018]
[308.26657104 106.43392181]
[322.84353638 113.94686890]
[323.35522461 130.33802795]
[309.27526855 138.74559021]
[295.08792114 130.52056885]
[280.09521484 130.98860168]
[265.10253906 131.45664978]
[258.47222900 134.83074951]
[249.79376221 131.77519226]
[234.79458618 131.93122864]
[219.79539490 132.08726501]
[205.23271179 141.83039856]
[189.25213623 132.74188232]
[174.29188538 133.83319092]
[159.38998413 135.54588318]
[144.48808289 137.25857544]
[129.58618164 138.97126770]
[114.68428040 140.68395996]
[104.47080231 151.66961670]
[103.84682465 166.65663147]
[119.27069092 171.34033203]
[132.96488953 179.82312012]
[144.01336670 191.53106689]
[151.67866516 205.67475891]
[155.45126343 221.30245972]
[155.08331299 237.36416626]
[150.60501099 252.78221130]
[142.32211304 266.52346802]
[130.79516602 277.66864014]
[116.80149841 285.47381592]
[101.28282928 289.41998291]
[101.28282928 304.41998291]
[101.28282928 319.41998291]
[101.28282928 334.41998291]
[101.28282928 349.41998291]
[101.28282928 364.41998291]
[101.28282928 379.41998291]
[101.28282928 394.41998291]
[101.28282928 409.41998291]
[101.28282928 424.41998291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 130]
[24 129]
[33 51]
[34 50]
[37 47]
[38 46]
[53 91]
[54 90]
[55 89]
[56 88]
[57 69]
[58 68]
[59 67]
[60 66]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[102 123]
[105 121]
[106 120]
[107 119]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
