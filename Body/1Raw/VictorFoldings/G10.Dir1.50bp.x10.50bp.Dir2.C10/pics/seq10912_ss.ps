%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCxxxxxxxxxxCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[178.52369690 86.11453247]
[171.74565125 77.51425934]
[165.43338013 68.56643677]
[152.65602112 76.42385864]
[139.87866211 84.28128815]
[127.10130310 92.13871002]
[114.32394409 99.99613953]
[107.50328827 112.20147705]
[93.53347778 112.78121948]
[80.75612640 120.63864136]
[73.05382538 134.45838928]
[58.15941620 134.53446960]
[45.38205719 142.39189148]
[32.60470200 150.24932861]
[26.88745880 157.45799255]
[19.47878075 158.13410950]
[6.54072475 165.72401428]
[-6.39733124 173.31391907]
[-4.65854931 188.44325256]
[-9.22993851 202.96986389]
[-19.31947708 214.37692261]
[-33.17909241 220.68809509]
[-48.40752029 220.80993652]
[-62.36634445 214.72134399]
[-72.63711548 203.47717285]
[-77.44036102 189.02557373]
[-75.94388580 173.87036133]
[-68.40696716 160.63728333]
[-56.13542175 151.61901855]
[-41.25536346 148.37805176]
[-26.34485817 151.47592163]
[-13.98723984 160.37586975]
[-1.04918373 152.78596497]
[11.88887215 145.19604492]
[24.74727440 137.47196960]
[37.52463150 129.61454773]
[50.30199051 121.75711823]
[57.09036636 108.49938965]
[72.89869690 107.86128998]
[85.67605591 100.00386047]
[92.49671173 87.79852295]
[106.46652222 87.21878052]
[119.24387360 79.36135864]
[132.02124023 71.50392914]
[144.79858398 63.64650345]
[157.57594299 55.78907776]
[145.67054749 31.00755692]
[137.16618347 4.86472988]
[132.21343994 -22.17507744]
[130.89982605 -49.63166809]
[133.24822998 -77.01750946]
[139.21650696 -103.84637451]
[148.69825745 -129.64198303]
[161.52473450 -153.94648743]
[177.46778870 -176.32852173]
[196.24395752 -196.39093018]
[217.51957703 -213.77778625]
[209.26728821 -226.30374146]
[201.01499939 -238.82971191]
[186.12002563 -245.69061279]
[184.88391113 -262.04312134]
[198.57824707 -271.06515503]
[213.11549377 -263.47561646]
[213.54095459 -247.08200073]
[221.79324341 -234.55603027]
[230.04553223 -222.03007507]
[239.54344177 -227.46528625]
[249.31639099 -232.38899231]
[259.33688354 -236.78730774]
[269.57666016 -240.64784241]
[280.00692749 -243.95971680]
[290.59829712 -246.71357727]
[301.32092285 -248.90168762]
[312.14462280 -250.51785278]
[323.03887939 -251.55752563]
[333.97305298 -252.01776123]
[344.91635132 -251.89726257]
[355.83789062 -251.19635010]
[366.70693970 -249.91699219]
[377.49291992 -248.06278992]
[388.16540527 -245.63894653]
[398.69433594 -242.65228271]
[409.05007935 -239.11122131]
[419.20346069 -235.02569580]
[429.12585449 -230.40724182]
[438.78930664 -225.26882935]
[448.16662598 -219.62492371]
[457.23138428 -213.49143982]
[465.95806885 -206.88563538]
[474.32202148 -199.82609558]
[482.29974365 -192.33270264]
[489.86874390 -184.42657471]
[497.00769043 -176.12995911]
[503.69650269 -167.46621704]
[509.91625977 -158.45973206]
[515.64947510 -149.13591003]
[520.88006592 -139.52096558]
[525.59313965 -129.64198303]
[529.77557373 -119.52680969]
[533.41546631 -109.20391083]
[536.50256348 -98.70236206]
[539.02825928 -88.05173492]
[540.98535156 -77.28203583]
[542.36828613 -66.42359924]
[543.17321777 -55.50699615]
[543.39788818 -44.56298065]
[543.04162598 -33.62237930]
[542.10540771 -22.71600342]
[540.59185791 -11.87457466]
[538.50531006 -1.12862980]
[535.85156250 9.49156189]
[532.63806152 19.95608711]
[528.87390137 30.23546600]
[524.56964111 40.30074310]
[519.73748779 50.12356949]
[514.39086914 59.67626953]
[508.54498291 68.93193054]
[502.21624756 77.86448669]
[495.42248535 86.44876862]
[488.18276978 94.66059113]
[480.51757812 102.47681427]
[472.44842529 109.87542725]
[463.99804688 116.83558655]
[455.19024658 123.33766937]
[446.04983521 129.36335754]
[436.60253906 134.89567566]
[426.87496948 139.91903687]
[416.89453125 144.41928101]
[406.68930054 148.38371277]
[396.28805542 151.80117798]
[385.72006226 154.66204834]
[375.01507568 156.95822144]
[364.20330811 158.68325806]
[353.31512451 159.83226013]
[342.38125610 160.40200806]
[331.43249512 160.39088440]
[320.49963379 159.79888916]
[309.61349487 158.62771606]
[298.80474854 156.88063049]
[288.10382080 154.56254578]
[277.54089355 151.67999268]
[267.14566040 148.24107361]
[256.94744873 144.25547791]
[246.97497559 139.73440552]
[237.25631714 134.69059753]
[227.81887817 129.13824463]
[218.68922424 123.09298706]
[209.89308167 116.57183838]
[201.45523071 109.59315491]
[193.39944458 102.17658997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 46]
[4 45]
[5 44]
[6 43]
[7 42]
[9 40]
[10 39]
[12 37]
[13 36]
[14 35]
[16 34]
[17 33]
[18 32]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
