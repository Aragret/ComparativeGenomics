%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAxxxxxxxxxxUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[20.95658875 298.75286865]
[9.43751335 293.77563477]
[2.61393785 307.13372803]
[-4.20963764 320.49185181]
[-11.03321266 333.84994507]
[-10.42060566 349.65927124]
[-23.10068130 357.47369385]
[-29.92425537 370.83178711]
[-36.74782944 384.18988037]
[-35.36646652 400.53076172]
[-48.98010254 409.67410278]
[-63.58419800 402.21405029]
[-64.15531158 385.82485962]
[-50.10593033 377.36630249]
[-43.28235626 364.00820923]
[-36.45877838 350.65011597]
[-37.55945587 335.79623413]
[-24.39131165 327.02636719]
[-17.56773758 313.66827393]
[-10.74416161 300.31018066]
[-3.92058611 286.95205688]
[-22.74351120 275.17019653]
[-40.24346542 261.50027466]
[-56.23182678 246.08963013]
[-70.53627014 229.10440063]
[-83.00260925 210.72763062]
[-93.49649048 191.15740967]
[-101.90479279 170.60464478]
[-108.13690186 149.29089355]
[-112.12564087 127.44586945]
[-113.82801819 105.30502319]
[-128.82722473 105.15102386]
[-143.82643127 104.99703217]
[-158.82563782 104.84303284]
[-167.96627808 117.38211060]
[-182.74180603 122.12165833]
[-197.47073364 117.23923492]
[-206.48950195 104.61222076]
[-206.33020020 89.09596252]
[-197.05407715 76.65677643]
[-182.22799683 72.07778931]
[-167.55290222 77.11971283]
[-158.67164612 89.84381866]
[-143.67243958 89.99781799]
[-128.67323303 90.15181732]
[-113.67401886 90.30581665]
[-111.65618134 69.14186096]
[-107.54731750 48.28276062]
[-101.38803101 27.93459320]
[-93.23917389 8.29838467]
[-83.18123627 -10.43187332]
[-71.31359100 -28.07114029]
[-57.75348663 -44.44514847]
[-42.63488007 -59.39213943]
[-26.10714149 -72.76444244]
[-34.52054977 -85.18275452]
[-42.93395996 -97.60107422]
[-51.34737015 -110.01938629]
[-66.92011261 -111.44193268]
[-77.89837646 -122.57799530]
[-79.09855652 -138.16944885]
[-69.95397186 -150.85450745]
[-54.78240585 -154.64364624]
[-40.74741364 -147.74777222]
[-34.47589111 -133.42289734]
[-38.92905807 -118.43279266]
[-30.51564598 -106.01448059]
[-22.10223579 -93.59616852]
[-13.68882656 -81.17784882]
[-4.27897215 -86.75240326]
[5.40353346 -91.83866119]
[15.33337402 -96.42333221]
[25.48458672 -100.49443054]
[35.83063126 -104.04130554]
[46.34445190 -107.05469513]
[56.99856567 -109.52670288]
[67.76511383 -111.45088196]
[78.61593628 -112.82218933]
[89.52267456 -113.63704681]
[100.45681000 -113.89332581]
[111.38974762 -113.59034729]
[122.29290771 -112.72891235]
[133.13778687 -111.31126404]
[143.89601135 -109.34111786]
[154.53945923 -106.82362366]
[165.04032898 -103.76535797]
[175.37112427 -100.17431641]
[185.50485229 -96.05989838]
[195.41502380 -91.43285370]
[205.07571411 -86.30528259]
[214.46166992 -80.69058990]
[223.54835510 -74.60346222]
[232.31199646 -68.05980682]
[240.72970581 -61.07673645]
[248.77944946 -53.67250824]
[256.44018555 -45.86648560]
[263.69189453 -37.67907333]
[270.51559448 -29.13168335]
[276.89349365 -20.24666023]
[282.80883789 -11.04723549]
[288.24624634 -1.55746377]
[293.19143677 8.19784355]
[297.63150024 18.19318008]
[301.55484009 28.40241241]
[304.95117188 38.79884338]
[307.81164551 49.35529709]
[310.12875366 60.04416656]
[311.89645386 70.83750153]
[313.11013794 81.70709229]
[313.76660156 92.62451172]
[313.86416626 103.56121063]
[313.40252686 114.48860168]
[312.38293457 125.37811279]
[327.20541382 127.67898560]
[342.02789307 129.97985840]
[356.85040283 132.28073120]
[371.93835449 125.85535431]
[384.88250732 135.92416382]
[382.36700439 152.12924194]
[366.97958374 157.80018616]
[354.54953003 147.10321045]
[339.72702026 144.80233765]
[324.90454102 142.50146484]
[310.08206177 140.20059204]
[307.36312866 152.45086670]
[303.93051147 164.52062988]
[299.79602051 176.36831665]
[294.97384644 187.95317078]
[289.48065186 199.23530579]
[283.33529663 210.17590332]
[276.55895996 220.73728943]
[269.17495728 230.88314819]
[261.20867920 240.57852173]
[252.68757629 249.79006958]
[243.64096069 258.48608398]
[234.09996033 266.63662720]
[224.09742737 274.21365356]
[213.66778564 281.19107056]
[202.84692383 287.54486084]
[191.67208862 293.25317383]
[180.18173218 298.29638672]
[168.41542053 302.65707397]
[156.41363525 306.32028198]
[144.21769714 309.27340698]
[131.86956787 311.50625610]
[119.41175079 313.01113892]
[106.88712311 313.78289795]
[94.33879089 313.81887817]
[81.80994415 313.11895752]
[69.34370422 311.68551636]
[56.98297882 309.52349854]
[44.77030182 306.64038086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[7 16]
[8 15]
[9 14]
[31 46]
[32 45]
[33 44]
[34 43]
[55 69]
[56 68]
[57 67]
[58 66]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
