%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACxxxxxxxxxxGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 250.64538574]
[92.50000000 235.64538574]
[92.50000000 220.64538574]
[92.50000000 205.64538574]
[92.50000000 190.64538574]
[92.50000000 175.64538574]
[92.50000000 160.64538574]
[92.50000000 145.64538574]
[92.50000000 130.64538574]
[92.50000000 115.64538574]
[86.23702240 111.51924133]
[77.98451996 124.04506683]
[65.45883179 115.79235840]
[73.71105957 103.26695251]
[67.44807434 99.14080811]
[53.66569519 105.06076813]
[39.88331223 110.98073578]
[26.10093117 116.90069580]
[12.44469070 123.10610199]
[-1.07949924 129.59426880]
[-14.60368919 136.08242798]
[-28.12787819 142.57060242]
[-29.93214226 157.89208984]
[-39.75104523 169.79136658]
[-54.45141602 174.47140503]
[-69.34241486 170.43881226]
[-79.67237854 158.98039246]
[-82.14505768 143.75248718]
[-75.97142029 129.61424255]
[-63.12146378 121.07714081]
[-47.69555283 120.86533356]
[-34.61604309 129.04640198]
[-21.09185410 122.55824280]
[-7.56766415 116.07007599]
[5.95652580 109.58190918]
[8.37300587 105.39429474]
[13.47690868 102.71446991]
[20.18096924 103.11831665]
[33.96334839 97.19834900]
[47.74573135 91.27838898]
[61.52811432 85.35842896]
[82.87371826 79.56440735]
[97.72809601 88.05164337]
[103.21512604 74.09125519]
[108.70215607 60.13086319]
[111.64764404 45.42290497]
[111.95970154 30.42614937]
[112.27175140 15.42939568]
[112.58380890 0.43264219]
[112.89586639 -14.56411171]
[103.09494019 -21.42812538]
[97.90497589 -32.07581329]
[98.52339172 -43.78441620]
[104.67855072 -53.62218475]
[114.72712708 -59.18245697]
[115.66275024 -74.15324402]
[108.80130768 -88.40916443]
[117.31740570 -100.62903595]
[118.25303650 -115.59983063]
[119.18866730 -130.57061768]
[119.65670776 -145.56330872]
[119.65670776 -160.56330872]
[119.65670776 -175.56330872]
[105.01749420 -179.16287231]
[91.66542053 -186.16184998]
[80.37676239 -196.15332031]
[71.80783844 -208.55642700]
[66.45681763 -222.65003967]
[64.63481140 -237.61479187]
[66.44774628 -252.58064270]
[71.79021454 -266.67749023]
[80.35162354 -279.08578491]
[91.63422394 -289.08410645]
[104.98204803 -296.09118652]
[119.61907959 -299.69961548]
[134.69433594 -299.69961548]
[149.33137512 -296.09118652]
[162.67919922 -289.08410645]
[173.96179199 -279.08578491]
[182.52319336 -266.67749023]
[187.86567688 -252.58064270]
[189.67860413 -237.61479187]
[187.85659790 -222.65003967]
[182.50558472 -208.55642700]
[173.93664551 -196.15332031]
[162.64799500 -186.16184998]
[149.29592896 -179.16287231]
[134.65670776 -175.56330872]
[134.65670776 -160.56330872]
[134.65670776 -145.56330872]
[136.93840027 -142.79539490]
[137.95779419 -138.76271057]
[137.12533569 -134.08731079]
[134.15945435 -129.63499451]
[133.22383118 -114.66419983]
[132.28819275 -99.69340515]
[139.21656799 -86.50830078]
[130.63354492 -73.21762085]
[129.69792175 -58.24682617]
[142.61180115 -45.33833694]
[142.04521179 -26.77018166]
[127.89262390 -14.25205517]
[127.58056641 0.74469841]
[127.26850891 15.74145222]
[126.95645142 30.73820496]
[126.64439392 45.73495865]
[136.85787964 56.72062302]
[151.83758545 57.50046921]
[166.81730652 58.28031540]
[175.11047363 45.35286331]
[188.76364136 38.31820297]
[204.10418701 39.06862640]
[217.00558472 47.40227127]
[223.99740601 61.07742691]
[223.19891357 76.41555023]
[214.82485962 89.29075623]
[201.12785339 96.23968506]
[185.79231262 95.39310455]
[172.94342041 86.97875214]
[166.03746033 73.26002502]
[151.05773926 72.48018646]
[136.07803345 71.70034027]
[128.37588501 69.71588135]
[122.66255188 65.61789703]
[117.17552185 79.57828522]
[111.68848419 93.53867340]
[120.94596863 81.73617554]
[133.92481995 74.21623230]
[148.76824951 72.05464935]
[163.35275269 75.56066895]
[175.59185791 84.23271942]
[183.73460388 96.83016205]
[186.61610413 111.55079651]
[183.82411194 126.28866577]
[175.75805664 138.93534851]
[163.57186890 147.68161011]
[149.00894165 151.27618408]
[134.15264893 149.20483398]
[121.12834930 141.76390076]
[111.79931641 130.01786804]
[107.50000000 115.64538574]
[107.50000000 130.64538574]
[107.50000000 145.64538574]
[107.50000000 160.64538574]
[107.50000000 175.64538574]
[107.50000000 190.64538574]
[107.50000000 205.64538574]
[107.50000000 220.64538574]
[107.50000000 235.64538574]
[107.50000000 250.64538574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 41]
[16 40]
[17 39]
[18 38]
[19 35]
[20 34]
[21 33]
[22 32]
[43 126]
[44 125]
[45 124]
[46 106]
[47 105]
[48 104]
[49 103]
[50 102]
[55 99]
[56 98]
[58 96]
[59 95]
[60 94]
[61 90]
[62 89]
[63 88]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
