%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACxxxxxxxxxxCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.13430786 270.53051758]
[87.51033020 255.54350281]
[86.88635254 240.55648804]
[86.26237488 225.56947327]
[85.63839722 210.58244324]
[85.01442719 195.59542847]
[84.39044952 180.60841370]
[83.76647186 165.62139893]
[69.69494629 160.42597961]
[59.48146820 171.41165161]
[49.26799011 182.39730835]
[39.05450821 193.38298035]
[35.32461548 208.75823975]
[20.99200821 212.81108093]
[10.77852821 223.79675293]
[0.56504875 234.78240967]
[-5.79159117 250.49958801]
[-22.65422249 248.74230957]
[-25.63366318 232.05221558]
[-10.42061615 224.56893921]
[-0.20713609 213.58326721]
[10.00634384 202.59761047]
[13.00570011 188.00811768]
[28.06884575 183.16949463]
[38.28232574 172.18383789]
[48.49580383 161.19816589]
[58.70928574 150.21250916]
[51.85205841 142.32820129]
[46.43803787 133.56072998]
[42.57056046 124.16596985]
[40.30875015 114.40974426]
[25.40684700 116.12243652]
[14.34612751 127.74310303]
[-1.62228787 126.19738007]
[-10.24879646 112.67099762]
[-4.91587830 97.54025269]
[10.28550625 92.41214752]
[23.69415855 101.22052765]
[38.59606171 99.50784302]
[41.53021622 81.23912048]
[49.77307510 64.67377472]
[62.57623291 51.31583786]
[78.77723694 42.37812424]
[96.90514374 38.67212677]
[115.31404114 40.53432846]
[120.80107117 26.57393837]
[126.28810883 12.61354828]
[131.77513123 -1.34684134]
[137.26217651 -15.30723095]
[142.01599121 -29.53400993]
[146.02372742 -43.98869705]
[150.03146362 -58.44338608]
[154.03919983 -72.89807892]
[158.04695129 -87.35276794]
[162.05468750 -101.80744934]
[166.06242371 -116.26213837]
[157.08775330 -125.71800995]
[153.63090515 -138.18171692]
[156.40853882 -150.70909119]
[164.67617798 -160.38761902]
[176.42468262 -165.01354980]
[178.60153198 -179.85475159]
[168.99243164 -168.33671570]
[156.46089172 -160.09289551]
[142.07968140 -155.82901001]
[127.07990265 -155.91007996]
[112.74561310 -160.32914734]
[100.30391693 -168.70793152]
[90.81987762 -180.32916260]
[85.10538483 -194.19799805]
[83.64962769 -209.12719727]
[86.57723236 -223.83872986]
[93.63757324 -237.07321167]
[104.22625732 -247.69770813]
[117.43682098 -254.80268860]
[132.13838196 -257.77993774]
[147.07240295 -256.37460327]
[160.96046448 -250.70698547]
[172.61364746 -241.26223755]
[181.03439331 -228.84890747]
[185.50184631 -214.52961731]
[185.63308716 -199.52680969]
[193.35717773 -212.38520813]
[201.08125305 -225.24362183]
[208.80534363 -238.10202026]
[216.52941895 -250.96041870]
[216.27258301 -267.35754395]
[230.48152161 -275.54522705]
[244.53930664 -267.10067749]
[243.98449707 -250.71090698]
[229.38783264 -243.23632812]
[221.66374207 -230.37792969]
[213.93965149 -217.51953125]
[206.21557617 -204.66113281]
[198.49148560 -191.80271912]
[193.44273376 -177.67791748]
[191.26589966 -162.83671570]
[195.64167786 -160.23474121]
[199.42628479 -156.82966614]
[212.95046997 -163.31784058]
[221.75691223 -177.15180969]
[238.12677002 -176.17195129]
[245.22012329 -161.38627625]
[235.73995972 -148.00500488]
[219.43864441 -149.79364014]
[205.91444397 -143.30548096]
[200.46888733 -122.16053009]
[180.51712036 -112.25440216]
[176.50936890 -97.79971313]
[172.50163269 -83.34502411]
[168.49389648 -68.89033508]
[164.48616028 -54.43564606]
[160.47840881 -39.98095703]
[156.47067261 -25.52626991]
[170.73187256 -30.17579651]
[183.37475586 -22.10377312]
[185.15838623 -7.21019697]
[174.77909851 3.61893463]
[159.82328796 2.46840191]
[151.22256470 -9.82019997]
[145.73553467 4.14019012]
[140.24848938 18.10058022]
[134.76145935 32.06097031]
[129.27442932 46.02135849]
[137.46832275 51.08284760]
[144.79663086 57.38319778]
[151.07287598 64.77574158]
[156.13522339 73.08585358]
[159.85066223 82.11511230]
[162.11849976 91.64600372]
[162.87303162 101.44715881]
[162.08544922 111.27899933]
[159.76473999 120.89955139]
[155.95774841 130.07044983]
[150.74829102 138.56278992]
[144.25529480 146.16288757]
[136.63012695 152.67762756]
[128.05310059 157.93934631]
[118.72911835 161.81018066]
[108.88289642 164.18565369]
[98.75348663 164.99742126]
[99.37746429 179.98443604]
[100.00144196 194.97145081]
[100.62541962 209.95846558]
[101.24939728 224.94549561]
[101.87337494 239.93251038]
[102.49735260 254.91952515]
[103.12132263 269.90652466]
[109.82131958 285.48043823]
[96.71079254 296.22988892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 27]
[10 26]
[11 25]
[12 24]
[14 22]
[15 21]
[16 20]
[31 39]
[32 38]
[45 124]
[46 123]
[47 122]
[48 121]
[49 120]
[50 114]
[51 113]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[61 97]
[62 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
