%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAxxxxxxxxxxAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[145.20593262 390.21749878]
[144.89794922 375.22067261]
[144.58998108 360.22381592]
[144.28199768 345.22698975]
[143.97401428 330.23013306]
[143.66604614 315.23330688]
[143.35806274 300.23648071]
[143.05009460 285.23962402]
[142.74211121 270.24279785]
[140.44123840 255.42030334]
[136.18838501 241.03582764]
[131.93554688 226.65135193]
[127.68269348 212.26686096]
[123.28239441 197.92680359]
[118.73510742 183.63267517]
[114.18781281 169.33854675]
[109.64052582 155.04441833]
[99.80834961 155.88192749]
[89.98213959 154.97698975]
[80.46830750 152.35780334]
[71.56349182 148.10604858]
[63.54535675 142.35429382]
[56.66391754 135.28189087]
[51.13374710 127.10934448]
[47.12727737 118.09150696]
[32.41175461 120.99897766]
[17.69623184 123.90644836]
[5.65751553 134.17192078]
[-8.32811451 129.04830933]
[-23.04363632 131.95578003]
[-37.75915909 134.86325073]
[-49.73959732 146.06152344]
[-65.34685516 141.02708435]
[-68.52552795 124.93894958]
[-56.00566483 114.34720612]
[-40.66662979 120.14772797]
[-25.95110893 117.24025726]
[-11.23558617 114.33278656]
[-0.24942182 104.27527618]
[14.78876019 109.19092560]
[29.50428391 106.28345490]
[44.21980667 103.37598419]
[44.31060791 95.36115265]
[45.54710388 87.44175720]
[47.90385818 79.78071594]
[51.33238220 72.53565216]
[55.76214600 65.85560608]
[61.10200882 59.87801361]
[67.24211884 54.72584915]
[74.05615997 50.50510788]
[81.40393829 47.30261993]
[89.13429260 45.18427277]
[97.08818817 44.19364929]
[105.10198975 44.35112762]
[113.01082611 45.65346527]
[118.42945099 31.66638184]
[123.84807587 17.67929840]
[129.26669312 3.69221520]
[134.68531799 -10.29486847]
[140.10394287 -24.28195190]
[133.96682739 -38.59884644]
[139.66133118 -52.70655060]
[153.34812927 -58.46912384]
[158.76675415 -72.45620728]
[164.18537903 -86.44329071]
[169.31568909 -100.53868103]
[174.15550232 -114.73643494]
[162.38616943 -105.43682098]
[148.08193970 -100.92139435]
[133.10644531 -101.77844238]
[119.41076660 -107.89630890]
[108.77923584 -118.47792816]
[102.59700012 -132.14466858]
[101.66949463 -147.11596680]
[106.11756897 -161.44128418]
[115.36170959 -173.25424194]
[128.19752502 -181.01579285]
[142.95272827 -183.71472168]
[157.70491028 -180.99938965]
[170.53210449 -173.22358704]
[179.76310730 -161.40036011]
[184.19525146 -147.07011414]
[183.25117493 -132.10011292]
[192.16732788 -144.16253662]
[201.08348083 -156.22497559]
[209.99963379 -168.28739929]
[218.91578674 -180.34983826]
[227.83192444 -192.41226196]
[229.81285095 -208.10897827]
[243.60011292 -213.74462891]
[248.15281677 -230.07586670]
[265.10614014 -230.22201538]
[269.93972778 -213.97171021]
[255.66253662 -204.82847595]
[254.31936646 -189.99456787]
[239.89436340 -183.49610901]
[230.97821045 -171.43368530]
[222.06205750 -159.37124634]
[213.14590454 -147.30882263]
[204.22975159 -135.24638367]
[195.31361389 -123.18395996]
[188.35325623 -109.89661407]
[183.51344299 -95.69886780]
[184.80891418 -91.04365540]
[183.14967346 -85.52687836]
[178.17247009 -81.02466583]
[172.75384521 -67.03758240]
[167.33522034 -53.05049896]
[173.56765747 -39.57117081]
[168.27165222 -25.30908966]
[154.09103394 -18.86332703]
[148.67240906 -4.87624311]
[143.25378418 9.11083984]
[137.83515930 23.09792328]
[132.41653442 37.08500671]
[126.99790955 51.07209015]
[145.23236084 67.18444824]
[154.89054871 89.51879883]
[154.14120483 113.84043121]
[143.12641907 135.53785706]
[123.93465424 150.49713135]
[128.48194885 164.79125977]
[133.02923584 179.08538818]
[137.57652283 193.37951660]
[143.19366455 200.66261292]
[142.06718445 208.01402283]
[146.32002258 222.39849854]
[150.57287598 236.78297424]
[154.82571411 251.16746521]
[159.44903564 236.89773560]
[169.39332581 225.66781616]
[182.99884033 219.35198975]
[197.99481201 219.00437927]
[211.87837219 224.68299866]
[222.33232117 235.44007874]
[227.61187744 249.48025513]
[226.83587646 264.46017456]
[220.13380432 277.87963867]
[208.62429810 287.49896240]
[194.22828674 291.71258545]
[179.34849548 289.81732178]
[166.46841431 282.12942505]
[157.73895264 269.93481445]
[158.04692078 284.93164062]
[158.35490417 299.92849731]
[158.66288757 314.92532349]
[158.97085571 329.92218018]
[159.27883911 344.91900635]
[159.58682251 359.91583252]
[159.89479065 374.91268921]
[160.20277405 389.90951538]
[162.78854370 409.11795044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 129]
[11 128]
[12 127]
[13 126]
[14 124]
[15 123]
[16 122]
[17 121]
[25 42]
[26 41]
[27 40]
[29 38]
[30 37]
[31 36]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[63 108]
[64 107]
[65 106]
[66 103]
[67 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
