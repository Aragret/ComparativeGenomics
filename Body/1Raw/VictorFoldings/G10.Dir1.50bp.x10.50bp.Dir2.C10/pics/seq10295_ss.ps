%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAACCCCCUGAAGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[112.01869965 213.80746460]
[109.44158173 199.03050232]
[108.38285828 184.06791687]
[108.85240173 169.08926392]
[109.15435028 154.09230042]
[109.45629883 139.09533691]
[102.00138855 152.11164856]
[94.54647827 165.12796021]
[87.09156799 178.14427185]
[79.63665771 191.16058350]
[80.23457336 207.54882812]
[66.19904327 216.03033447]
[51.96861649 207.88005066]
[52.18233490 191.48229980]
[66.62034607 183.70567322]
[74.07525635 170.68936157]
[81.53016663 157.67304993]
[88.98507690 144.65673828]
[96.43998718 131.64042664]
[93.40847778 124.78040314]
[87.34546661 111.06034851]
[84.31395721 104.20032501]
[69.67045593 100.94949341]
[55.02695847 97.69866943]
[40.38345718 94.44784546]
[36.15556717 95.95993805]
[32.08503342 96.00244904]
[28.62542915 94.81374359]
[26.10212898 92.75778961]
[24.68186951 90.26978302]
[10.35927296 85.81296539]
[-3.96332479 81.35614777]
[-18.41801262 77.34841156]
[-32.99071503 73.79364777]
[-47.56341934 70.23888397]
[-42.47116470 84.34806824]
[-50.14476395 97.23666382]
[-64.97543335 99.48415375]
[-76.12316132 89.44779968]
[-75.43984985 74.46337128]
[-63.42559814 65.48339844]
[-77.55039978 60.43464661]
[-91.67520142 55.38588715]
[-106.73255920 60.92264938]
[-120.37419128 52.47958755]
[-122.13542175 36.53350449]
[-110.66517639 25.31686401]
[-94.76244354 27.43411636]
[-86.62644958 41.26108551]
[-72.50164032 46.30984116]
[-58.37684250 51.35859680]
[-44.00865555 55.66618347]
[-29.43595505 59.22094345]
[-14.86325169 62.77570724]
[-11.63345337 61.21497345]
[-7.47406960 61.18029785]
[-3.12912655 63.09702682]
[0.49349087 67.03355408]
[14.81608772 71.49037170]
[29.13868523 75.94718170]
[43.63428116 79.80434418]
[58.27778244 83.05516815]
[72.92128754 86.30599213]
[87.56478882 89.55682373]
[76.27243042 79.68348694]
[64.98007965 69.81015015]
[50.84276962 64.79652405]
[38.73250961 55.94544220]
[29.66307068 43.99783707]
[24.39366150 29.95385933]
[23.36539268 14.98914528]
[26.66434288 0.35641056]
[34.01435089 -12.71942139]
[44.80014038 -23.14375496]
[58.11882019 -30.04395866]
[72.85546112 -32.84240723]
[87.77645111 -31.30483818]
[101.63272858 -25.55996323]
[113.26436615 -16.08869553]
[121.69767761 -3.68388319]
[126.22668457 10.61605072]
[126.47225952 25.61404037]
[122.41385651 40.05458450]
[114.39440155 52.72512436]
[111.61201477 67.46481323]
[108.82962036 82.20449066]
[118.33798218 70.60314941]
[127.84634399 59.00181198]
[137.35470581 47.40047073]
[137.20904541 31.35807800]
[149.75103760 21.35417747]
[165.35952759 25.06290436]
[172.06101990 39.63924026]
[164.71470642 53.90147018]
[148.95603943 56.90882874]
[139.44767761 68.51016998]
[129.93931580 80.11151123]
[120.43096161 91.71285248]
[134.33731079 86.09027100]
[148.24366760 80.46768188]
[159.05853271 70.07353210]
[170.87580872 60.83489990]
[183.57255554 52.84786987]
[197.01673889 46.19551468]
[211.06854248 40.94701004]
[225.58181763 37.15694427]
[240.40565491 34.86473465]
[255.38584900 34.09421921]
[270.36660767 34.85340881]
[285.19216919 37.13441467]
[299.70831299 40.91350555]
[313.76409912 46.15138626]
[327.21328735 52.79357910]
[339.91607666 60.77100754]
[351.74032593 70.00070190]
[362.56304932 80.38668060]
[372.27172852 91.82091522]
[380.76535034 104.18450928]
[387.95559692 117.34886169]
[393.76770020 131.17707825]
[398.14120483 145.52532959]
[401.03063965 160.24440002]
[402.40591431 175.18122864]
[402.25277710 190.18045044]
[400.57281494 205.08607483]
[397.38345337 219.74308777]
[392.71789551 233.99905396]
[386.62466431 247.70570374]
[379.16711426 260.72052002]
[370.42282104 272.90811157]
[360.48272705 284.14172363]
[349.45019531 294.30456543]
[337.43997192 303.29092407]
[324.57696533 311.00732422]
[310.99493408 317.37350464]
[296.83514404 322.32333374]
[282.24487305 325.80523682]
[267.37582397 327.78305054]
[252.38267517 328.23623657]
[237.42132568 327.16000366]
[222.64739990 324.56561279]
[208.21452332 320.48001099]
[194.27281189 314.94567871]
[180.96725464 308.02020264]
[168.43623352 299.77560425]
[156.81007385 290.29763794]
[146.20967102 279.68481445]
[136.74528503 268.04757690]
[128.51533508 255.50692749]
[121.60543823 242.19328308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[22 64]
[23 63]
[24 62]
[25 61]
[30 60]
[31 59]
[32 58]
[33 54]
[34 53]
[35 52]
[41 51]
[42 50]
[43 49]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
