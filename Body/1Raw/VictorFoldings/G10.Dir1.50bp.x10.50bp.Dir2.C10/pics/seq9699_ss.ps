%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAxxxxxxxxxxCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[108.22718811 268.44708252]
[108.22718811 253.44709778]
[108.22718811 238.44709778]
[108.22718811 223.44709778]
[108.22718811 208.44709778]
[108.22718811 193.44709778]
[108.22718811 178.44709778]
[108.22718811 163.44709778]
[108.22718811 148.44709778]
[108.22718811 133.44709778]
[104.71802521 118.86334229]
[110.42335510 132.73594666]
[109.30497742 147.69419861]
[101.60019684 160.56417847]
[88.94384766 168.61506653]
[74.02141571 170.13859558]
[59.99922562 164.81149292]
[49.85256195 153.76408386]
[45.73439407 139.34046936]
[48.51854324 124.60112000]
[57.61425018 112.67350006]
[71.09153748 106.08847046]
[86.09055328 106.24323273]
[71.15454102 104.85920715]
[56.21852493 103.47518158]
[44.12767029 113.29602051]
[29.00014687 111.67965698]
[19.71198463 100.09235382]
[4.77597189 98.70832825]
[-10.16004086 97.32430267]
[-15.72208309 111.36853027]
[-25.01662827 123.27600861]
[-37.29020691 132.08145142]
[-51.54785919 137.07106018]
[-66.63377380 137.84031677]
[-81.32501221 134.32687378]
[-94.43061829 126.81556702]
[-104.88817596 115.91528320]
[-111.84993744 102.50966644]
[-114.75154877 87.68545532]
[-113.35778809 72.64437103]
[-107.78163910 58.60573959]
[-98.47513580 46.70759964]
[-86.19271851 37.91448593]
[-71.93006134 32.93921661]
[-56.84337997 32.18511200]
[-42.15567780 35.71330261]
[-29.05762863 43.23778152]
[-18.61102676 54.14856339]
[-11.66273308 67.56116486]
[-8.77601528 82.38829041]
[6.15999746 83.77231598]
[21.09601021 85.15634155]
[32.35518646 75.47302246]
[47.52214050 76.66385651]
[57.60255051 88.53916931]
[72.53856659 89.92319489]
[87.47457886 91.30722046]
[100.68975830 84.21081543]
[107.78616333 70.99562836]
[114.88256836 57.78044891]
[121.97897339 44.56526566]
[129.07537842 31.35008240]
[136.17178345 18.13489914]
[143.26817322 4.91971731]
[130.37991333 12.59385777]
[115.96448517 16.74060631]
[100.96849823 17.08766174]
[86.37667084 13.61223698]
[73.14717865 6.54254723]
[62.14873886 -3.65717554]
[54.10356903 -16.31716156]
[49.53995895 -30.60609055]
[48.75757980 -45.58567047]
[51.80780411 -60.27227020]
[58.49034119 -73.70147705]
[68.36637878 -84.99147034]
[80.78739929 -93.40088654]
[94.93777466 -98.37751007]
[109.88832092 -99.59455109]
[124.65730286 -96.97209930]
[138.27490234 -90.68235779]
[149.84692383 -81.13833618]
[158.61347961 -68.96675110]
[163.99893188 -54.96685791]
[165.64961243 -40.05796051]
[163.45713806 -25.21905708]
[157.56723022 -11.42749310]
[169.72056580 -20.21933556]
[181.87388611 -29.01117706]
[194.02722168 -37.80302048]
[206.18055725 -46.59486389]
[207.85485840 -50.75375748]
[210.52091980 -53.82225418]
[213.70127869 -55.62004852]
[216.90962219 -56.14514923]
[219.71130371 -55.56065750]
[232.54495239 -63.32579422]
[236.07725525 -78.73028564]
[249.51179504 -87.05428314]
[264.87808228 -83.35931396]
[273.05957031 -69.83752441]
[269.20233154 -54.51116562]
[255.59481812 -46.47308731]
[240.31008911 -50.49214172]
[227.47644043 -42.72700500]
[214.97239685 -34.44152832]
[202.81906128 -25.64968681]
[190.66574097 -16.85784531]
[178.51240540 -8.06600189]
[166.35906982 0.72584021]
[156.48336792 12.01611996]
[149.38696289 25.23130417]
[142.29055786 38.44648743]
[135.19415283 51.66167068]
[128.09774780 64.87685394]
[121.00134277 78.09203339]
[113.90494537 91.30722046]
[118.07612610 112.03977203]
[119.10697937 97.07523346]
[123.76057434 82.81536102]
[131.75518799 70.12339020]
[142.60687256 59.76765823]
[155.65867615 52.37506485]
[170.12049866 48.39313507]
[185.11685181 48.06291962]
[199.73992920 51.40441132]
[213.10449219 58.21532822]
[224.40148926 68.08335114]
[232.94703674 80.41111755]
[238.22380066 94.45232391]
[239.91236877 109.35697937]
[237.91050720 124.22280121]
[232.33941650 138.14985657]
[223.53631592 150.29504395]
[212.03416443 159.92314148]
[198.52922058 166.45129395]
[183.83906555 169.48429871]
[168.85296631 168.83856201]
[154.47814941 164.55316162]
[141.58480835 156.88754272]
[130.95347595 146.30572510]
[123.22718811 133.44709778]
[123.22718811 148.44709778]
[123.22718811 163.44709778]
[123.22718811 178.44709778]
[123.22718811 193.44709778]
[123.22718811 208.44709778]
[123.22718811 223.44709778]
[123.22718811 238.44709778]
[123.22718811 253.44709778]
[123.22718811 268.44708252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[23 58]
[24 57]
[25 56]
[28 53]
[29 52]
[30 51]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
