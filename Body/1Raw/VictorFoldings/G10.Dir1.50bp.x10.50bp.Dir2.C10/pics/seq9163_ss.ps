%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAAxxxxxxxxxxGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.17855835 276.79428101]
[91.17855835 261.79428101]
[91.17855835 246.79429626]
[91.17855835 231.79429626]
[91.17855835 216.79429626]
[91.17855835 201.79429626]
[91.17855835 186.79429626]
[91.17855835 171.79429626]
[91.17855835 156.79429626]
[91.17855835 141.79429626]
[85.48547363 136.41642761]
[81.32926941 130.41638184]
[78.73971558 124.15276337]
[66.47734833 132.79187012]
[54.21498108 141.43099976]
[41.95261383 150.07011414]
[38.78484344 155.99234009]
[33.82853317 158.93618774]
[28.99559975 158.80101013]
[16.38446999 166.92256165]
[3.77334261 175.04409790]
[-1.01366174 190.35632324]
[-16.02141571 196.02613831]
[-29.73725319 187.70416260]
[-31.63955879 171.77429199]
[-20.26904678 160.45655823]
[-4.34819937 162.43296814]
[8.26292896 154.31143188]
[20.87405586 146.18988037]
[33.31349564 137.80773926]
[45.57586670 129.16862488]
[57.83823395 120.52951050]
[70.10060120 111.89039612]
[71.59294128 84.88727570]
[93.15258789 68.56008148]
[93.46464539 53.56332779]
[93.62068176 38.56414032]
[93.62068176 23.56414032]
[93.62068176 8.56414032]
[93.62068176 -6.43585920]
[81.96035767 -1.72100103]
[67.46427155 -2.23270106]
[52.28868103 -9.04223156]
[38.91704178 -22.39145851]
[25.82388687 -29.71056366]
[12.73073292 -37.02967072]
[-1.82298172 -31.30923271]
[-16.63228035 -36.33105850]
[-24.70466232 -49.72399139]
[-22.22859764 -65.16429901]
[-10.37320805 -75.36154175]
[5.26375437 -75.50089264]
[17.29899406 -65.51655579]
[20.04983902 -50.12282562]
[33.14299393 -42.80371857]
[46.23614883 -35.48461151]
[52.74430084 -39.21206665]
[41.63212585 -49.28775787]
[47.78099823 -62.96954727]
[62.69323730 -61.34934616]
[65.76061249 -46.66697693]
[72.26876831 -50.39443207]
[72.58082581 -65.39118958]
[72.89287567 -80.38793945]
[73.20493317 -95.38469696]
[58.75268555 -99.74761200]
[46.01408386 -107.84888458]
[35.93442154 -119.08734131]
[29.26167297 -132.62902832]
[26.49100113 -147.46903992]
[27.82801056 -162.50614929]
[33.17348480 -176.62452698]
[42.13075256 -188.77647400]
[54.03512955 -198.06025696]
[68.00322723 -203.78692627]
[82.99851990 -205.53155518]
[97.90826416 -203.16465759]
[111.62605286 -196.86187744]
[123.13392639 -187.09094238]
[131.57794189 -174.57690430]
[136.33148193 -160.24838257]
[137.04182434 -145.16867065]
[133.65621948 -130.45675659]
[126.42593384 -117.20437622]
[115.88749695 -106.39494324]
[102.82292175 -98.83058929]
[88.20169067 -95.07263947]
[87.88963318 -80.07588196]
[87.57757568 -65.07913208]
[87.26551819 -50.08237839]
[93.39670563 -45.76281738]
[100.86038971 -58.77410126]
[103.26392365 -73.58028412]
[117.09118652 -79.39464569]
[129.35350037 -70.75546265]
[128.53224182 -55.77796173]
[115.39904022 -48.53129196]
[105.65907288 -37.12370300]
[111.79026031 -32.80414581]
[125.80696869 -38.14565659]
[139.82368469 -43.48717117]
[153.84039307 -48.82868195]
[163.76631165 -61.88273621]
[179.99804688 -59.54553604]
[185.83779907 -44.22139359]
[175.27812195 -31.67447281]
[159.18191528 -34.81196976]
[145.16519165 -29.47045708]
[131.14848328 -24.12894440]
[117.13176727 -18.78743172]
[108.62068176 -6.43585920]
[108.62068176 8.56414032]
[108.62068176 23.56414032]
[108.62068176 38.56414032]
[111.78625488 45.29650879]
[108.46139526 53.87538528]
[108.14933777 68.87213898]
[117.22461700 70.76335144]
[125.81863403 75.35958099]
[133.11518860 82.51889038]
[138.34632874 91.85225677]
[140.86691284 102.74136353]
[140.22229004 114.37872314]
[152.99964905 122.23615265]
[169.39857483 122.14988708]
[177.43800354 136.44322205]
[168.84765625 150.41241455]
[152.46455383 149.68713379]
[145.14222717 135.01350403]
[132.36486816 127.15608215]
[125.81829071 130.81562805]
[133.26443481 143.83695984]
[140.71055603 156.85829163]
[153.47937012 164.72959900]
[153.15895081 179.72618103]
[140.06556702 187.04487610]
[127.12374115 179.46141052]
[127.10790253 164.46221924]
[119.91651917 151.29847717]
[112.72513580 138.13473511]
[106.17855835 141.79429626]
[106.17855835 156.79429626]
[106.17855835 171.79429626]
[106.17855835 186.79429626]
[106.17855835 201.79429626]
[106.17855835 216.79429626]
[106.17855835 231.79429626]
[106.17855835 246.79429626]
[106.17855835 261.79428101]
[106.17855835 276.79428101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 33]
[14 32]
[15 31]
[16 30]
[19 29]
[20 28]
[21 27]
[35 117]
[36 116]
[37 114]
[38 113]
[39 112]
[40 111]
[44 56]
[45 55]
[46 54]
[62 90]
[63 89]
[64 88]
[65 87]
[99 110]
[100 109]
[101 108]
[102 107]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
