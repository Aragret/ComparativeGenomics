%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGAACxxxxxxxxxxAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.13942146 253.22225952]
[10.50645161 266.13494873]
[2.87348151 279.04766846]
[2.51168942 294.86471558]
[-10.62539768 301.88372803]
[-18.25836754 314.79641724]
[-25.89133835 327.70910645]
[-33.52430725 340.62179565]
[-41.15727615 353.53451538]
[-35.78975296 368.22204590]
[-41.16753006 382.90582275]
[-54.75138474 390.65261841]
[-70.12743378 387.80465698]
[-80.03558350 375.70660400]
[-79.79750824 360.07083130]
[-69.52561188 348.28005981]
[-54.06997681 345.90155029]
[-46.43700409 332.98883057]
[-38.80403519 320.07614136]
[-31.17106628 307.16345215]
[-23.53809547 294.25073242]
[-23.72226524 279.35726929]
[-10.03921700 271.41467285]
[-2.40624666 258.50198364]
[5.22672367 245.58929443]
[-12.48877907 232.38009644]
[-28.38406944 217.02882385]
[-42.20194244 199.78387451]
[-53.71881104 180.92430115]
[-62.74831009 160.75526428]
[-69.14434052 139.60313416]
[-72.80339813 117.81018066]
[-73.66627502 95.72902679]
[-71.71900940 73.71698761]
[-86.43453217 70.80951691]
[-101.15005493 67.90203857]
[-115.86557770 64.99456787]
[-125.42063904 76.95113373]
[-139.44236755 83.08706665]
[-154.70867920 81.99237823]
[-167.71148682 73.91860962]
[-175.46282959 60.72106552]
[-176.18151855 45.43244171]
[-169.70240784 31.56594849]
[-157.51432800 22.30800819]
[-142.41802979 19.78602409]
[-127.88253021 24.57953453]
[-117.24797821 35.58702087]
[-112.95810699 50.27904510]
[-98.24258423 53.18651962]
[-83.52706146 56.09399033]
[-68.81153870 59.00146484]
[-66.07605743 49.03964233]
[-62.75327682 39.25803375]
[-58.85494232 29.69123077]
[-54.39484024 20.37306404]
[-49.38874435 11.33648682]
[-43.85435867 2.61345387]
[-37.81125259 -5.76518583]
[-31.28079796 -13.76980305]
[-24.28608704 -21.37208939]
[-16.85185814 -28.54516411]
[-9.00440025 -35.26365662]
[-0.77146465 -41.50380707]
[7.81783438 -47.24355316]
[16.73312187 -52.46259308]
[25.94286919 -57.14247513]
[35.41450882 -61.26664352]
[45.11454773 -64.82051849]
[55.00867844 -67.79152679]
[65.06191254 -70.16916656]
[75.23870087 -71.94503021]
[85.50305939 -73.11283875]
[95.81867981 -73.66845703]
[106.14908600 -73.60992432]
[116.45774841 -72.93743896]
[126.70820618 -71.65339661]
[136.86422729 -69.76232147]
[146.88986206 -67.27090454]
[156.74969482 -64.18796539]
[166.40884399 -60.52439880]
[175.83312988 -56.29315948]
[184.98925781 -51.50921249]
[192.88574219 -64.26247406]
[200.78222656 -77.01573181]
[208.67871094 -89.76898193]
[203.61387634 -104.56362915]
[209.29200745 -119.13390350]
[223.03204346 -126.60016632]
[238.34638977 -123.43708801]
[248.00404358 -111.13816071]
[247.44499207 -95.51057434]
[236.93316650 -83.93318939]
[221.43196106 -81.87250519]
[213.53547668 -69.11924744]
[205.63899231 -56.36598969]
[197.74250793 -43.61273193]
[212.43460083 -32.42611694]
[225.85623169 -19.74315453]
[237.85575867 -5.70716095]
[248.29759216 9.52326870]
[257.06375122 25.77603722]
[264.05514526 42.86749649]
[269.19284058 60.60452271]
[272.41870117 78.78669739]
[273.69635010 97.20857239]
[273.01132202 115.66198730]
[287.87792969 117.65804291]
[302.74450684 119.65409851]
[317.61111450 121.65015411]
[334.43774414 114.24102783]
[347.92858887 125.42322540]
[362.83303833 127.11362457]
[377.73748779 128.80401611]
[389.94332886 118.76444244]
[405.66488647 120.37934875]
[415.57485962 132.69064331]
[413.79382324 148.39425659]
[401.37844849 158.17350769]
[385.69454956 156.22654724]
[376.04708862 143.70846558]
[361.14263916 142.01806641]
[346.23822021 140.32766724]
[336.54571533 147.62956238]
[324.07934570 146.30242920]
[315.61505127 136.51675415]
[300.74847412 134.52069092]
[285.88186646 132.52464294]
[271.01525879 130.52857971]
[268.23001099 143.32298279]
[264.48895264 155.87124634]
[259.81338501 168.10209656]
[254.22985840 179.94601440]
[247.77009583 191.33573914]
[240.47077942 202.20654297]
[232.37339783 212.49667358]
[223.52394104 222.14765930]
[213.97271729 231.10467529]
[203.77395630 239.31684875]
[192.98561096 246.73748779]
[181.66897583 253.32447815]
[169.88835144 259.04034424]
[157.71066284 263.85266113]
[145.20510864 267.73406982]
[132.44271851 270.66250610]
[119.49600220 272.62133789]
[106.43852997 273.59942627]
[93.34446716 273.59124756]
[80.28823090 272.59683228]
[67.34397125 270.62179565]
[54.58525467 267.67742920]
[42.08455276 263.78039551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[34 52]
[35 51]
[36 50]
[37 49]
[83 97]
[84 96]
[85 95]
[86 94]
[107 129]
[108 128]
[109 127]
[110 126]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
