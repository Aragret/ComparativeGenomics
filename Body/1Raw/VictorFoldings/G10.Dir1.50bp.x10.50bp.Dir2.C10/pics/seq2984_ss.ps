%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUGGAUCAGxxxxxxxxxxCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.61094666]
[92.50000000 234.61094666]
[92.50000000 219.61094666]
[92.50000000 204.61094666]
[92.50000000 189.61094666]
[92.50000000 174.61094666]
[92.50000000 159.61094666]
[92.50000000 144.61094666]
[92.50000000 129.61094666]
[92.50000000 114.61094666]
[80.60762024 105.46921539]
[66.11202240 109.32637787]
[53.41453552 122.62124634]
[36.66730118 117.47051239]
[22.25508308 121.62840271]
[7.84286737 125.78628540]
[-6.56934881 129.94416809]
[-20.98156548 134.10206604]
[-35.39377975 138.25994873]
[-49.80599594 142.41783142]
[-64.21821594 146.57572937]
[-78.63043213 150.73361206]
[-79.36335754 165.85781860]
[-84.96971893 179.92364502]
[-94.84136200 191.40533447]
[-107.90749359 199.05744934]
[-122.75080109 202.04994202]
[-137.76118469 200.05819702]
[-151.31044006 193.29829407]
[-161.92883301 182.50346375]
[-168.46456909 168.84465027]
[-170.20870972 153.80348206]
[-166.97204590 139.01150513]
[-159.10566711 126.07323456]
[-147.46286011 116.39212036]
[-133.30656433 111.01830292]
[-118.17234039 110.53468323]
[-103.70182800 114.99372864]
[-91.46469116 123.91175079]
[-82.78831482 136.32139587]
[-68.37609863 132.16351318]
[-53.96388626 128.00561523]
[-39.55167007 123.84773254]
[-25.13945198 119.68984985]
[-10.72723579 115.53195953]
[3.68497992 111.37406921]
[18.09719658 107.21618652]
[32.50941086 103.05829620]
[38.65963745 92.59493256]
[50.68332291 89.03826141]
[62.25486374 94.83078003]
[76.75045776 90.97361755]
[64.25052643 82.68196106]
[58.25610733 68.93179321]
[60.68854141 54.13033295]
[70.76818085 43.02173996]
[85.26429749 39.16653442]
[99.53059387 43.80039597]
[108.99444580 55.43807602]
[110.62248993 70.34946442]
[103.89210510 83.75601959]
[113.63975525 72.35499573]
[123.38740540 60.95397568]
[133.01593018 49.45217133]
[142.52429199 37.85083008]
[152.03265381 26.24949074]
[161.54101562 14.64814949]
[151.18191528 3.77299786]
[142.23780823 -8.29276371]
[134.84428406 -21.36622238]
[129.11340332 -35.24918747]
[125.13207245 -49.73119354]
[122.96062469 -64.59270477]
[122.63198853 -79.60841370]
[124.15114594 -94.55069733]
[127.49506378 -109.19302368]
[132.61305237 -123.31343079]
[139.42752075 -136.69784546]
[147.83517456 -149.14337158]
[157.70854187 -160.46133423]
[168.89794922 -170.48014832]
[181.23376465 -179.04795837]
[194.52899170 -186.03483582]
[208.58206177 -191.33489990]
[223.17996216 -194.86778259]
[238.10134888 -196.57994080]
[253.12005615 -196.44540405]
[268.00839233 -194.46621704]
[282.54064941 -190.67239380]
[296.49652100 -185.12142944]
[309.66445923 -177.89747620]
[321.84478760 -169.11006165]
[332.85293579 -158.89239502]
[342.52194214 -147.39938354]
[350.70529175 -134.80523682]
[357.27890015 -121.30088806]
[362.14309692 -107.09106445]
[365.22418213 -92.39117432]
[366.47540283 -77.42407990]
[365.87783813 -62.41666412]
[363.44049072 -47.59643936]
[359.20034790 -33.18807983]
[353.22171021 -19.41000748]
[345.59515381 -6.47109890]
[336.43634033 5.43249798]
[325.88409424 16.12032700]
[314.09838867 25.43036270]
[301.25787354 33.22146988]
[287.55725098 39.37553406]
[273.20419312 43.79925919]
[258.41629028 46.42559052]
[243.41773987 47.21471024]
[228.43588257 46.15465164]
[213.69786072 43.26148605]
[199.42710876 38.57907867]
[185.83993530 32.17840576]
[173.14234924 24.15650749]
[163.63398743 35.75785065]
[154.12562561 47.35919189]
[144.61727905 58.96053314]
[142.79801941 66.17412567]
[134.78842163 70.70162964]
[125.04077911 82.10264587]
[115.29312134 93.50366974]
[125.83788300 82.83558655]
[139.33312988 76.28742981]
[154.23864746 74.60654449]
[168.85328674 77.98477173]
[181.50906372 86.03656006]
[190.76159668 97.84294891]
[195.55487061 112.05648041]
[195.34184265 127.05496216]
[190.14683533 141.12663269]
[180.56272888 152.66548157]
[167.68338013 160.35458374]
[152.97869873 163.31639099]
[138.12692261 161.21286011]
[124.82308960 154.28407288]
[114.58556366 143.32081604]
[108.58275604 129.57431030]
[107.50000000 114.61094666]
[107.50000000 129.61094666]
[107.50000000 144.61094666]
[107.50000000 159.61094666]
[107.50000000 174.61094666]
[107.50000000 189.61094666]
[107.50000000 204.61094666]
[107.50000000 219.61094666]
[107.50000000 234.61094666]
[107.50000000 249.61094666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 52]
[12 51]
[14 48]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[61 124]
[62 123]
[63 122]
[64 120]
[65 119]
[66 118]
[67 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
