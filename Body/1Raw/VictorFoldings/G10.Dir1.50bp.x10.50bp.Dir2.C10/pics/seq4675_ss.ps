%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCxxxxxxxxxxAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[119.08578491 311.69537354]
[119.08578491 296.69537354]
[119.08578491 281.69537354]
[119.08578491 266.69537354]
[119.08578491 251.69537354]
[119.08578491 236.69537354]
[119.08578491 221.69537354]
[119.08578491 206.69537354]
[119.08578491 191.69537354]
[119.08578491 176.69537354]
[116.29346466 161.95756531]
[110.80643463 147.99717712]
[105.31939697 134.03678894]
[91.81901550 133.46446228]
[79.57727051 127.74365997]
[70.47753906 117.75452423]
[65.91981506 105.03386688]
[50.95956802 103.94255829]
[35.99932098 102.85124969]
[21.03907204 101.75994110]
[15.00232887 114.69665527]
[4.92592859 124.76708221]
[-7.96011305 130.77087402]
[-22.09267044 132.00233459]
[-35.76511765 128.33331299]
[-47.33340836 120.22615814]
[-55.41377640 108.67565155]
[-59.04823685 95.08688354]
[-73.98254395 93.68457794]
[-88.91685486 92.28227234]
[-103.85115814 90.87997437]
[-115.95402527 100.68601227]
[-131.07955933 99.05113220]
[-140.35353088 87.45246887]
[-155.28784180 86.05016327]
[-170.22215271 84.64785767]
[-181.22178650 95.76279449]
[-196.79724121 97.15541840]
[-209.59425354 88.16815948]
[-213.57044983 73.04454803]
[-206.84841919 58.92547226]
[-192.60206604 52.47753906]
[-177.55812073 56.74526215]
[-168.81983948 69.71355438]
[-153.88554382 71.11585236]
[-138.95123291 72.51815796]
[-127.68021393 62.84863281]
[-112.51472473 64.05802155]
[-102.44885254 75.94566345]
[-87.51454926 77.34796906]
[-72.58023834 78.75027466]
[-57.64593124 80.15257263]
[-50.47576523 66.05387115]
[-38.42354202 55.75112534]
[-23.30791283 50.83774948]
[-7.42469215 52.09096909]
[6.80184126 59.34904861]
[17.18896484 71.53146362]
[22.13038254 86.79969025]
[37.09062958 87.89099884]
[52.05088043 88.98230743]
[67.01113129 90.07362366]
[79.00451660 72.68721008]
[98.89030457 65.56793213]
[101.68262482 50.83012772]
[103.70496368 35.96707916]
[104.95183563 21.01899338]
[106.19870758 6.07090664]
[107.44558716 -8.87718010]
[108.69245911 -23.82526779]
[95.16478729 -30.75855064]
[85.32390594 -42.34412384]
[80.67047882 -56.81527328]
[81.91413116 -71.96524811]
[88.86520386 -85.48379517]
[100.46371460 -95.30942535]
[114.94097137 -99.94380188]
[130.08929443 -98.68022919]
[143.59867859 -91.71138000]
[153.40904236 -80.09995270]
[158.02438354 -65.61661530]
[156.74087524 -50.46996307]
[149.75427246 -36.96975327]
[138.12994385 -27.17466927]
[123.64054871 -22.57839203]
[122.39366913 -7.63030577]
[121.14679718 7.31778145]
[119.89992523 22.26586914]
[118.65304565 37.21395493]
[131.79943848 29.99090576]
[145.72396851 35.56829834]
[150.24894714 49.86951065]
[142.06697083 62.44150925]
[127.15840149 64.09518433]
[116.42043304 53.62245178]
[113.62811279 68.36026001]
[123.71810913 75.01500702]
[130.88842773 84.74538422]
[145.46113586 81.19062042]
[153.11555481 76.08554840]
[160.37396240 77.71684265]
[175.01747131 74.46601868]
[189.66096497 71.21519470]
[204.30447388 67.96436310]
[211.36009216 54.00900269]
[225.75563049 47.90140533]
[240.69392395 52.52538681]
[249.12158203 65.69764709]
[247.05932617 81.19865417]
[235.48088074 91.70929718]
[219.85324097 92.26677704]
[207.55529785 82.60786438]
[192.91178894 85.85869598]
[178.26829529 89.10951996]
[163.62478638 92.36034393]
[149.01589966 95.76332092]
[134.44319153 99.31808472]
[132.78236389 110.58846283]
[127.53668213 120.70095825]
[119.27979279 128.54975891]
[124.76682281 142.51014709]
[130.25386047 156.47053528]
[132.92823792 141.71086121]
[139.95576477 128.45893860]
[150.67356873 117.96470642]
[164.07069397 111.21806335]
[178.88343811 108.85538483]
[193.71463013 111.09951019]
[207.16528320 117.73878479]
[217.96667480 128.14694214]
[225.09997559 141.34225464]
[227.89231873 156.08004761]
[226.08033752 170.97019958]
[219.83494568 184.60820007]
[209.74522400 195.70764160]
[196.76289368 203.22155762]
[182.11250305 206.44122314]
[167.17596436 205.06292725]
[153.36215210 199.21667480]
[141.97406006 189.45391846]
[134.08578491 176.69537354]
[134.08578491 191.69537354]
[134.08578491 206.69537354]
[134.08578491 221.69537354]
[134.08578491 236.69537354]
[134.08578491 251.69537354]
[134.08578491 266.69537354]
[134.08578491 281.69537354]
[134.08578491 296.69537354]
[134.08578491 311.69537354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 122]
[12 121]
[13 120]
[17 62]
[18 61]
[19 60]
[20 59]
[28 52]
[29 51]
[30 50]
[31 49]
[34 46]
[35 45]
[36 44]
[64 96]
[65 95]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[98 117]
[99 116]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
