%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUAxxxxxxxxxxCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[176.32206726 459.84500122]
[176.01409912 444.84817505]
[175.70611572 429.85131836]
[175.39813232 414.85449219]
[175.09016418 399.85766602]
[174.78218079 384.86080933]
[174.47421265 369.86398315]
[174.16622925 354.86712646]
[173.85824585 339.87030029]
[171.86219788 325.00369263]
[168.20349121 310.45675659]
[164.54478455 295.90979004]
[153.93681335 285.45416260]
[158.07437134 270.18356323]
[154.41566467 255.63661194]
[138.80632019 254.74752808]
[124.21411133 249.08039856]
[112.06620026 239.17663574]
[103.55462646 225.99263000]
[99.51937866 210.80743408]
[100.36546326 195.09858704]
[106.02234650 180.39845276]
[115.94959259 168.14468384]
[129.18855286 159.53961182]
[125.23194122 145.07084656]
[121.27532959 130.60206604]
[89.64192200 131.02917480]
[73.26581573 108.82708740]
[80.67098236 86.46782684]
[71.75482941 74.40539551]
[69.16102600 89.17942810]
[57.78932190 98.96127319]
[42.79355621 99.31764221]
[30.97002792 90.08703613]
[27.67733383 75.45288849]
[34.40777206 62.04762268]
[48.11101151 55.94669724]
[62.57508469 59.91412735]
[55.47867966 46.69894409]
[48.38227844 33.48376083]
[41.52251053 27.35682297]
[41.27900696 19.92359352]
[34.45542908 6.56549358]
[23.68675041 -3.87651563]
[10.12485504 -10.28549099]
[-3.43704176 -16.69446754]
[-16.99893761 -23.10344315]
[-33.90290451 -24.40429497]
[-37.33237457 -41.00775909]
[-22.32715034 -48.89950180]
[-10.58996201 -36.66534042]
[2.97193384 -30.25636292]
[16.53383064 -23.84738731]
[30.09572601 -17.43841171]
[41.68477631 -26.96175003]
[38.02606964 -41.50870514]
[34.36736298 -56.05565643]
[30.70865822 -70.60260773]
[25.14672089 -84.53332520]
[17.78048134 -97.60002136]
[10.41424084 -110.66671753]
[3.04800177 -123.73341370]
[-9.99736595 -134.56182861]
[-3.20344043 -150.09498596]
[13.60341930 -147.86657715]
[16.11469650 -131.09965515]
[23.48093605 -118.03295898]
[30.84717560 -104.96626282]
[38.21341705 -91.89956665]
[39.52359390 -106.84223938]
[46.70034790 -120.01395416]
[58.54586411 -129.21633911]
[73.08309937 -132.91346741]
[87.88575745 -130.48831177]
[100.48323822 -122.34561920]
[108.77299500 -109.84442902]
[111.37145233 -95.07120514]
[107.84492493 -80.49164581]
[98.78199005 -68.53910828]
[85.69528198 -61.20848846]
[70.76898956 -59.72329330]
[56.49434662 -64.33139801]
[45.25561142 -74.26131439]
[48.91431808 -59.71436310]
[52.57302475 -45.16740799]
[56.23172760 -30.62045479]
[47.81352997 -0.25808170]
[54.63710403 13.10001755]
[61.59746170 26.38735962]
[68.69386292 39.60254288]
[75.79026794 52.81772614]
[83.81726074 65.48924255]
[92.73341370 77.55167389]
[106.79653168 70.33557129]
[125.77147675 73.07496643]
[138.10276794 64.53450775]
[150.43405151 55.99405289]
[154.70414734 40.52971268]
[169.51303101 34.35910797]
[183.50059509 42.21579742]
[185.93678284 58.07280350]
[174.95274353 69.76598358]
[158.97450256 68.32533264]
[146.64321899 76.86579132]
[134.31193542 85.40625763]
[140.30023193 99.15908051]
[154.95295715 95.95008850]
[166.70094299 84.50820160]
[182.40827942 89.22112274]
[185.91661072 105.24060059]
[173.61685181 116.08717346]
[158.16195679 110.60281372]
[143.50923157 113.81180573]
[135.74409485 126.64546204]
[139.70069885 141.11422729]
[143.65731812 155.58299255]
[158.07966614 155.99880981]
[171.78239441 160.46560669]
[183.65280151 168.61120605]
[192.72967529 179.76507568]
[198.28109741 193.01354980]
[199.86343384 207.27464294]
[197.35682678 221.38641357]
[190.97421265 234.20164490]
[181.24322510 244.68113708]
[168.96261597 251.97790527]
[172.62132263 266.52484131]
[183.49099731 278.02099609]
[179.09173584 292.25109863]
[182.75044250 306.79803467]
[186.40914917 321.34500122]
[192.19970703 307.50775146]
[203.67619324 297.84906006]
[218.29899597 294.50631714]
[232.83221436 298.21920776]
[244.05981445 308.16610718]
[249.49723816 322.14587402]
[247.94125366 337.06497192]
[239.73617554 349.62191772]
[226.69770813 357.03799438]
[211.71112061 357.67208862]
[198.09278870 351.38394165]
[188.85508728 339.56231689]
[189.16307068 354.55917358]
[189.47103882 369.55599976]
[189.77902222 384.55282593]
[190.08700562 399.54968262]
[190.39497375 414.54650879]
[190.70295715 429.54336548]
[191.01092529 444.54019165]
[191.31890869 459.53701782]
[193.90467834 478.74545288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 131]
[11 130]
[12 129]
[14 127]
[15 126]
[24 116]
[25 115]
[26 114]
[29 93]
[30 92]
[38 91]
[39 90]
[40 89]
[42 88]
[43 87]
[44 54]
[45 53]
[46 52]
[47 51]
[55 86]
[56 85]
[57 84]
[58 83]
[59 69]
[60 68]
[61 67]
[62 66]
[95 105]
[96 104]
[97 103]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
