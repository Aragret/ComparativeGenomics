%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUxxxxxxxxxxUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[163.91267395 71.00286102]
[150.64616394 63.99659348]
[137.73364258 56.35755539]
[129.48135376 68.88351440]
[121.22905731 81.40947723]
[112.97676849 93.93544006]
[111.96141052 107.88035583]
[99.54919434 114.31684875]
[91.29690552 126.84281158]
[83.04461670 139.36877441]
[74.79232788 151.89472961]
[76.60301208 167.83528137]
[65.16761017 179.08744812]
[49.25839233 177.01953125]
[41.07954025 163.21786499]
[46.90517426 148.26991272]
[62.26636505 143.64244080]
[70.51865387 131.11648560]
[78.77094269 118.59052277]
[87.02323151 106.06455994]
[88.03858948 92.11964417]
[100.45080566 85.68315125]
[108.70309448 73.15718842]
[116.95538330 60.63122559]
[125.20767212 48.10526657]
[113.09262085 39.25576401]
[101.41925812 29.83127403]
[90.21486664 19.85381126]
[79.50559998 9.34667683]
[69.31647491 -1.66558969]
[59.67129135 -13.15726757]
[50.59257126 -25.10151863]
[42.10152054 -37.47044373]
[34.21797562 -50.23516083]
[26.96034050 -63.36584854]
[20.34556961 -76.83184814]
[14.38911343 -90.60169983]
[9.10488224 -104.64324951]
[4.50521708 -118.92370605]
[0.60086167 -133.40969849]
[-2.59906578 -148.06742859]
[-5.08709145 -162.86262512]
[-6.85740423 -177.76075745]
[-7.90586948 -192.72702026]
[-8.23003864 -207.72645569]
[-7.82915497 -222.72404480]
[-6.70415401 -237.68473816]
[-4.85766363 -252.57362366]
[-2.29399657 -267.35589600]
[0.98085999 -281.99707031]
[4.95925713 -296.46292114]
[9.63190365 -310.71963501]
[14.98788548 -324.73397827]
[21.01469421 -338.47320557]
[27.69825172 -351.90518188]
[35.02295303 -364.99856567]
[42.97168732 -377.72280884]
[51.52588654 -390.04812622]
[60.66558075 -401.94580078]
[70.36941528 -413.38800049]
[80.61473083 -424.34799194]
[91.37760162 -434.80023193]
[102.63288116 -444.72024536]
[114.35429382 -454.08489990]
[126.51445007 -462.87231445]
[139.08496094 -471.06198120]
[152.03646851 -478.63476562]
[165.33869934 -485.57296753]
[178.96063232 -491.86038208]
[192.87040710 -497.48233032]
[207.03555298 -502.42568970]
[221.42298889 -506.67889404]
[235.99911499 -510.23205566]
[250.72988892 -513.07684326]
[265.58090210 -515.20654297]
[280.51745605 -516.61633301]
[295.50466919 -517.30279541]
[310.50756836 -517.26440430]
[325.49108887 -516.50122070]
[340.42022705 -515.01501465]
[355.26013184 -512.80926514]
[369.97616577 -509.88909912]
[384.53390503 -506.26138306]
[398.89938354 -501.93453979]
[413.03903198 -496.91873169]
[426.91983032 -491.22564697]
[440.50939941 -484.86859131]
[453.77593994 -477.86236572]
[466.68850708 -470.22338867]
[479.21691895 -461.96948242]
[491.33193970 -453.11993408]
[503.00524902 -443.69537354]
[514.20959473 -433.71786499]
[524.91882324 -423.21069336]
[535.10791016 -412.19836426]
[544.75299072 -400.70663452]
[553.83166504 -388.76235962]
[562.32269287 -376.39337158]
[570.20617676 -363.62863159]
[577.46374512 -350.49789429]
[584.07843018 -337.03189087]
[590.03485107 -323.26199341]
[595.31896973 -309.22042847]
[599.91857910 -294.93994141]
[603.82287598 -280.45391846]
[607.02270508 -265.79620361]
[609.51068115 -251.00097656]
[611.28094482 -236.10284424]
[612.32934570 -221.13656616]
[612.65344238 -206.13713074]
[612.25244141 -191.13955688]
[611.12738037 -176.17884827]
[609.28082275 -161.28997803]
[606.71710205 -146.50770569]
[603.44219971 -131.86656189]
[599.46368408 -117.40074158]
[594.79101562 -103.14402771]
[589.43493652 -89.12970734]
[583.40808105 -75.39053345]
[576.72442627 -61.95857620]
[569.39965820 -48.86521530]
[561.45086670 -36.14102554]
[552.89660645 -23.81573105]
[543.75689697 -11.91811657]
[534.05297852 -0.47596794]
[523.80761719 10.48399067]
[513.04473877 20.93616104]
[501.78936768 30.85613251]
[490.06793213 40.22073364]
[477.90771484 49.00809860]
[465.33718872 57.19769669]
[452.38565063 64.77040863]
[439.08337402 71.70854187]
[425.46142578 77.99589539]
[411.55160522 83.61778259]
[397.38644409 88.56107330]
[382.99899292 92.81422424]
[368.42285156 96.36729431]
[353.69204712 99.21199799]
[338.84103394 101.34168243]
[323.90447998 102.75138092]
[308.91723633 103.43778992]
[293.91433716 103.39931488]
[278.93084717 102.63604736]
[264.00170898 101.14975739]
[249.16180420 98.94393158]
[234.44580078 96.02371216]
[219.88807678 92.39591980]
[205.52261353 88.06903076]
[191.38298035 83.05315399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 22]
[8 20]
[9 19]
[10 18]
[11 17]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
