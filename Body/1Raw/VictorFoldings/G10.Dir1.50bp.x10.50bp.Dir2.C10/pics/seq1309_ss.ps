%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCAAACUGGxxxxxxxxxxUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[89.21819305 399.48550415]
[89.21819305 384.48550415]
[89.21819305 369.48550415]
[89.21819305 354.48550415]
[89.21819305 339.48550415]
[89.21819305 324.48550415]
[89.21819305 309.48550415]
[89.21819305 294.48550415]
[89.21819305 279.48550415]
[89.21819305 264.48550415]
[74.56381989 261.39599609]
[60.86675262 255.32464600]
[48.72669601 246.53459167]
[38.67572403 235.40806580]
[31.15497398 222.42979431]
[26.49528885 208.16586304]
[24.90265846 193.23899841]
[26.44911575 178.30139160]
[31.06948280 164.00622559]
[38.56411743 150.97911072]
[48.60752487 139.79069519]
[60.76251984 130.93164062]
[74.49922180 124.79113770]
[89.21819305 121.63983154]
[83.11285400 113.12754059]
[81.81861877 103.93261719]
[84.61952972 96.32157135]
[89.89156342 91.78342438]
[82.43492126 78.76810455]
[74.97828674 65.75278473]
[67.52165222 52.73746109]
[60.06501770 39.72213745]
[52.60838318 26.70681763]
[38.93295288 32.89772415]
[24.73095512 37.76065063]
[10.13101292 41.25155258]
[-4.73465490 43.33882141]
[-19.73141670 44.00354767]
[-34.72345734 43.23971939]
[-49.57500839 41.05424500]
[-64.15155792 37.46692276]
[-78.32110596 32.51023865]
[-91.95532227 26.22908401]
[-104.93073273 18.68033981]
[-117.12982178 9.93237400]
[-128.44212341 0.06440976]
[-138.76516724 -10.83418560]
[-148.00547791 -22.66470909]
[-156.07937622 -35.32002258]
[-162.91374207 -48.68550873]
[-168.44667053 -62.64012909]
[-172.62806702 -77.05750275]
[-175.42004395 -91.80706787]
[-176.79733276 -106.75524139]
[-176.74745178 -121.76664734]
[-175.27084351 -136.70533752]
[-172.38090515 -151.43601990]
[-168.10380554 -165.82528687]
[-162.47825623 -179.74282837]
[-155.55522156 -193.06260681]
[-147.39739990 -205.66397095]
[-138.07865906 -217.43283081]
[-127.68341064 -228.26258850]
[-116.30578613 -238.05514526]
[-104.04882812 -246.72184753]
[-91.02353668 -254.18420410]
[-77.34788513 -260.37460327]
[-63.14570999 -265.23699951]
[-48.54563904 -268.72738647]
[-33.67989349 -270.81411743]
[-18.68310738 -271.47830200]
[-3.69109344 -270.71392822]
[11.16037464 -268.52789307]
[25.73679543 -264.94003296]
[39.90616226 -259.98284912]
[53.54014969 -253.70118713]
[66.51528168 -246.15197754]
[78.71405792 -237.40356445]
[90.02599335 -227.53518677]
[100.34864044 -216.63621521]
[109.58853149 -204.80535889]
[117.66196442 -192.14974976]
[124.49584198 -178.78401184]
[130.02825928 -164.82919312]
[134.20912170 -150.41166687]
[137.00056458 -135.66200256]
[138.37730408 -120.71377563]
[138.32687378 -105.70237732]
[136.84973145 -90.76374054]
[133.95925903 -76.03316498]
[129.68162537 -61.64405060]
[124.05557251 -47.72671127]
[117.13205719 -34.40719223]
[108.97377014 -21.80611229]
[99.65460968 -10.03759861]
[89.25896454 0.79177344]
[77.88098145 10.58392715]
[65.62370300 19.25018120]
[73.08033752 32.26550293]
[80.53697968 45.28082657]
[87.99361420 58.29614639]
[95.45024872 71.31147003]
[102.90688324 84.32678986]
[96.75531769 70.64620972]
[96.12487030 55.65946579]
[101.10572815 41.51057434]
[110.98532867 30.22369957]
[124.35027313 23.41355324]
[139.28857422 22.05440140]
[153.66313171 26.34068680]
[165.41749573 35.65920639]
[172.87008667 48.67684555]
[174.95471191 63.53128433]
[171.37315369 78.09742737]
[162.63780212 90.29141998]
[149.99833679 98.36878204]
[135.26296997 101.17395782]
[120.53811646 98.30496979]
[134.91114807 102.59636688]
[149.28417969 106.88776398]
[163.65719604 111.17916107]
[176.61543274 102.42597198]
[192.16299438 104.10143280]
[202.95881653 115.41445160]
[203.90542603 131.02336121]
[194.55587769 143.55810547]
[179.32473755 147.10017395]
[165.40367126 139.97709656]
[159.36579895 125.55218506]
[144.99278259 121.26078796]
[130.61975098 116.96939087]
[116.24671936 112.67799377]
[104.21819305 121.63983154]
[118.93716431 124.79113770]
[132.67387390 130.93164062]
[144.82885742 139.79069519]
[154.87226868 150.97911072]
[162.36691284 164.00622559]
[166.98727417 178.30139160]
[168.53373718 193.23899841]
[166.94110107 208.16586304]
[162.28141785 222.42979431]
[154.76066589 235.40806580]
[144.70968628 246.53459167]
[132.56964111 255.32464600]
[118.87257385 261.39599609]
[104.21819305 264.48550415]
[104.21819305 279.48550415]
[104.21819305 294.48550415]
[104.21819305 309.48550415]
[104.21819305 324.48550415]
[104.21819305 339.48550415]
[104.21819305 354.48550415]
[104.21819305 369.48550415]
[104.21819305 384.48550415]
[104.21819305 399.48550415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 156]
[2 155]
[3 154]
[4 153]
[5 152]
[6 151]
[7 150]
[8 149]
[9 148]
[10 147]
[24 133]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[118 132]
[119 131]
[120 130]
[121 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
