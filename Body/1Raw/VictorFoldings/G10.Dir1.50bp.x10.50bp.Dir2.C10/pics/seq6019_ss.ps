%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGxxxxxxxxxxGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[85.63024902 324.75729370]
[88.22125244 305.54959106]
[88.53330231 290.55282593]
[88.84535980 275.55606079]
[89.15741730 260.55932617]
[89.46947479 245.56256104]
[89.78153229 230.56581116]
[90.09358978 215.56906128]
[90.40563965 200.57229614]
[90.71769714 185.57554626]
[91.02975464 170.57879639]
[74.39916992 166.38093567]
[59.25653458 158.32496643]
[46.48194504 146.87908936]
[34.21957397 155.51820374]
[21.95720673 164.15733337]
[9.69483948 172.79644775]
[11.74874783 187.96351624]
[6.50800705 202.34382629]
[-4.82309914 212.63287354]
[-19.64076614 216.46632385]
[-34.54000092 212.96327209]
[-46.09706879 202.92869568]
[-51.65624237 188.66847229]
[-49.94006348 173.45947266]
[-41.34289551 160.79664612]
[-27.84030533 153.58979797]
[-12.53509045 153.49501038]
[1.05572307 160.53407288]
[13.31809139 151.89495850]
[25.58045959 143.25584412]
[37.84282684 134.61672974]
[33.81384659 126.10028839]
[30.94548225 117.12615967]
[29.28803253 107.85172272]
[28.87056160 98.43959045]
[29.70039177 89.05482483]
[15.20479488 85.19766998]
[0.70919818 81.34050751]
[-13.78639793 77.48335266]
[-26.47549629 86.62232208]
[-42.06642151 85.41523743]
[-53.19761658 74.43204498]
[-54.61327362 58.85867691]
[-45.64495850 46.04839325]
[-30.52723885 42.04982376]
[-16.39823914 48.75096893]
[-9.92923927 62.98775482]
[4.56635761 66.84490967]
[19.06195450 70.70207214]
[33.55755234 74.55923462]
[37.70090103 65.63935852]
[43.03478241 57.37611008]
[49.45727158 49.92741013]
[56.84563065 43.43559265]
[65.05867004 38.02472305]
[73.93943787 33.79819870]
[83.31822205 30.83678818]
[93.01579285 29.19708633]
[102.84683228 28.91042709]
[105.02366638 14.06922245]
[107.20050812 -0.77198344]
[109.37734222 -15.61318874]
[111.55417633 -30.45439529]
[109.44000244 -36.82917023]
[110.71727753 -42.45054626]
[114.14270020 -45.86259079]
[116.93502045 -60.60039520]
[119.72734833 -75.33820343]
[122.51966858 -90.07600403]
[109.14980316 -97.12853241]
[98.45387268 -107.80975342]
[91.38294220 -121.16989136]
[88.56576538 -136.02098083]
[90.25283813 -151.04248047]
[96.29414368 -164.89866638]
[106.15249634 -176.35746765]
[118.95130157 -184.39999390]
[133.55249023 -188.31108093]
[148.65774536 -187.74296570]
[162.92390442 -182.74617004]
[175.08244324 -173.76499939]
[184.05223083 -161.59806824]
[189.03567505 -147.32722473]
[189.58964539 -132.22145081]
[185.66490173 -117.62392426]
[177.61041260 -104.83265686]
[166.14237976 -94.98503113]
[152.28053284 -88.95669556]
[137.25747681 -87.28368378]
[134.46514893 -72.54587555]
[131.67282104 -57.80807114]
[128.88050842 -43.07026291]
[126.39538574 -28.27755737]
[124.21854401 -13.43635178]
[122.04170990 1.40485346]
[119.86487579 16.24605942]
[117.68803406 31.08726501]
[144.36100769 44.37686539]
[163.25115967 67.42513275]
[171.04437256 96.18842316]
[186.02409363 96.96826172]
[201.00379944 97.74810791]
[215.98352051 98.52795410]
[223.15000916 88.94597626]
[233.95445251 84.09077454]
[245.63806152 85.07423401]
[255.27897644 91.53336334]
[260.52301025 101.75054169]
[275.45730591 103.15283966]
[290.39160156 104.55514526]
[300.54452515 92.82065582]
[315.66336060 89.32778168]
[329.93463135 95.41959381]
[337.87075806 108.75366974]
[336.42010498 124.20278931]
[326.14050293 135.82644653]
[310.98468018 139.15510559]
[296.78030396 132.90884399]
[288.98931885 119.48945618]
[274.05499268 118.08715057]
[259.12069702 116.68484497]
[245.81553650 129.18965149]
[227.27410889 128.04396057]
[215.20367432 113.50766754]
[200.22396851 112.72782135]
[185.24424744 111.94797516]
[170.26452637 111.16813660]
[168.75883484 118.27715302]
[166.53584290 125.19549561]
[163.61874390 131.85101318]
[160.03797913 138.17424011]
[155.83088684 144.09924316]
[151.04136658 149.56420898]
[145.71939087 154.51210022]
[139.92045593 158.89132690]
[133.70507812 162.65620422]
[127.13807678 165.76744080]
[120.28797913 168.19259644]
[113.22623444 169.90635681]
[106.02651215 170.89085388]
[105.71445465 185.88760376]
[105.40239716 200.88435364]
[105.09033966 215.88111877]
[104.77828217 230.87786865]
[104.46622467 245.87461853]
[104.15417480 260.87136841]
[103.84211731 275.86813354]
[103.53005981 290.86486816]
[103.21800232 305.86163330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[14 32]
[15 31]
[16 30]
[17 29]
[37 51]
[38 50]
[39 49]
[40 48]
[60 98]
[61 97]
[62 96]
[63 95]
[64 94]
[67 93]
[68 92]
[69 91]
[70 90]
[101 128]
[102 127]
[103 126]
[104 125]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
