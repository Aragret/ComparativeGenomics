%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCAxxxxxxxxxxAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[211.74258423 35.64551163]
[199.20155334 43.87488556]
[186.66052246 52.10425949]
[174.11950684 60.33363342]
[167.72349548 73.78504181]
[151.94073486 74.88725281]
[139.39970398 83.11662292]
[126.85868073 91.34600067]
[114.31764984 99.57537079]
[107.85847473 111.97579956]
[93.91172791 112.96566010]
[81.37069702 121.19503021]
[84.47830963 136.94842529]
[81.31945038 152.65237427]
[72.40531921 165.91508484]
[59.12135315 174.72808838]
[43.51200485 177.77044678]
[27.96609306 174.60659790]
[14.85122967 165.74847412]
[2.46915126 174.21511841]
[-9.91292763 182.68176270]
[-22.29500580 191.14842224]
[-24.96539116 206.72546387]
[-37.91634369 215.78352356]
[-53.46429443 212.94859314]
[-62.38491821 199.90260315]
[-59.38576889 184.38549805]
[-46.24618530 175.60330200]
[-30.76165390 178.76634216]
[-18.37957573 170.29969788]
[-5.99749708 161.83303833]
[6.38458157 153.36639404]
[2.97648168 139.72920227]
[4.43846083 125.71876526]
[10.61471462 113.02517700]
[20.77951431 103.18671417]
[33.72242355 97.40340424]
[47.89242172 96.39068604]
[61.58376694 100.29096222]
[73.14131927 108.65399933]
[85.68235016 100.42462921]
[92.14152527 88.02420044]
[106.08827209 87.03433990]
[118.62930298 78.80496979]
[131.17033386 70.57559204]
[143.71136475 62.34622192]
[151.00437927 48.30618668]
[165.89012146 47.79260254]
[178.43115234 39.56322861]
[190.97218323 31.33385658]
[203.51321411 23.10448265]
[195.97291565 10.13317013]
[189.14595032 -3.22734380]
[183.05230713 -16.93786812]
[177.70986938 -30.95818901]
[173.13432312 -45.24718094]
[169.33908081 -59.76293564]
[166.33528137 -74.46286774]
[164.13171387 -89.30387115]
[162.73484802 -104.24240112]
[162.14880371 -119.23464966]
[162.37527466 -134.23663330]
[163.41362000 -149.20436096]
[165.26077271 -164.09391785]
[167.91131592 -178.86163330]
[171.35749817 -193.46420288]
[175.58917236 -207.85877991]
[180.59396362 -222.00314331]
[186.35717773 -235.85580444]
[192.86190796 -249.37614441]
[200.08906555 -262.52447510]
[208.01747131 -275.26226807]
[216.62387085 -287.55215454]
[225.88299561 -299.35806274]
[235.76770020 -310.64538574]
[246.24899292 -321.38098145]
[257.29614258 -331.53341675]
[268.87670898 -341.07284546]
[280.95678711 -349.97134399]
[293.50085449 -358.20278931]
[306.47219849 -365.74304199]
[319.83273315 -372.56997681]
[333.54327393 -378.66357422]
[347.56362915 -384.00595093]
[361.85263062 -388.58145142]
[376.36840820 -392.37664795]
[391.06832886 -395.38040161]
[405.90936279 -397.58392334]
[420.84790039 -398.98074341]
[435.84014893 -399.56674194]
[450.84213257 -399.34020996]
[465.80984497 -398.30181885]
[480.69940186 -396.45462036]
[495.46710205 -393.80401611]
[510.06967163 -390.35778809]
[524.46423340 -386.12606812]
[538.60858154 -381.12121582]
[552.46124268 -375.35797119]
[565.98150635 -368.85321045]
[579.12982178 -361.62597656]
[591.86761475 -353.69754028]
[604.15747070 -345.09112549]
[615.96331787 -335.83193970]
[627.25061035 -325.94720459]
[637.98620605 -315.46585083]
[648.13854980 -304.41870117]
[657.67797852 -292.83807373]
[666.57641602 -280.75799561]
[674.80786133 -268.21386719]
[682.34802246 -255.24250793]
[689.17492676 -241.88194275]
[695.26849365 -228.17138672]
[700.61083984 -214.15103149]
[705.18627930 -199.86199951]
[708.98144531 -185.34622192]
[711.98510742 -170.64627075]
[714.18859863 -155.80525208]
[715.58532715 -140.86671448]
[716.17132568 -125.87446594]
[715.94470215 -110.87247467]
[714.90631104 -95.90476227]
[713.05902100 -81.01521301]
[710.40838623 -66.24751282]
[706.96209717 -51.64496994]
[702.73034668 -37.25042725]
[697.72546387 -23.10609436]
[691.96215820 -9.25346756]
[685.45733643 4.26682425]
[678.23010254 17.41512299]
[670.30157471 30.15286064]
[661.69512939 42.44267654]
[652.43591309 54.24852371]
[642.55114746 65.53577423]
[632.06976318 76.27131653]
[621.02258301 86.42366028]
[609.44189453 95.96303558]
[597.36181641 104.86145020]
[584.81762695 113.09281158]
[571.84625244 120.63297272]
[558.48565674 127.45981598]
[544.77508545 133.55331421]
[530.75469971 138.89559937]
[516.46569824 143.47100830]
[501.94989014 147.26611328]
[487.24993896 150.26977539]
[472.40890503 152.47319031]
[457.47036743 153.86988831]
[442.47808838 154.45579529]
[427.47610474 154.22917175]
[412.50839233 153.19067383]
[397.61886597 151.34338379]
[382.85116577 148.69267273]
[368.24862671 145.24636841]
[353.85409546 141.01452637]
[339.70980835 136.00959778]
[325.85717773 130.24624634]
[312.33691406 123.74138641]
[299.18862915 116.51409149]
[286.45092773 108.58555603]
[274.16113281 99.97904968]
[262.35531616 90.71980286]
[251.06811523 80.83497620]
[240.33261108 70.35357666]
[230.18029785 59.30633163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[6 46]
[7 45]
[8 44]
[9 43]
[11 41]
[12 40]
[19 32]
[20 31]
[21 30]
[22 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
