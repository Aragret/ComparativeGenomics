%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCACCCCAUUCCUCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUxxxxxxxxxxAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-37.18491364 319.40112305]
[-45.50266266 331.88372803]
[-53.82040787 344.36630249]
[-62.13815689 356.84890747]
[-70.32897949 369.41513062]
[-78.39203644 382.06375122]
[-86.06687164 394.95159912]
[-93.34640503 408.06680298]
[-100.62593079 421.18200684]
[-107.90546417 434.29718018]
[-107.08763123 450.67593384]
[-121.00805664 459.34506226]
[-135.34658813 451.38653564]
[-135.35298157 434.98739624]
[-121.02066040 427.01766968]
[-113.74113464 413.90246582]
[-106.46160126 400.78726196]
[-99.18207550 387.67205811]
[-99.83022308 384.14965820]
[-98.76697540 380.13619995]
[-95.77976990 376.45697021]
[-91.04063416 374.00067139]
[-82.97758484 361.35208130]
[-82.02846527 353.97787476]
[-74.62075043 348.53115845]
[-66.30300140 336.04855347]
[-57.98525238 323.56597900]
[-49.66750336 311.08337402]
[-60.08537674 303.29589844]
[-70.09876251 294.99478149]
[-79.68236542 286.20095825]
[-88.81198120 276.93667603]
[-97.46452332 267.22534180]
[-105.61814117 257.09149170]
[-113.25223541 246.56069946]
[-120.34750366 235.65960693]
[-126.88603210 224.41575623]
[-132.85130310 212.85754395]
[-138.22822571 201.01417542]
[-143.00323486 188.91558838]
[-147.16426086 176.59233093]
[-150.70077515 164.07554626]
[-153.60385132 151.39688110]
[-155.86616516 138.58833313]
[-157.48197937 125.68230438]
[-158.44723511 112.71138000]
[-158.75947571 99.70832825]
[-158.41792297 86.70602417]
[-157.42343140 73.73730469]
[-155.77851868 60.83494568]
[-153.48733521 48.03153992]
[-150.55567932 35.35944366]
[-146.99096680 22.85066986]
[-142.80216980 10.53682709]
[-137.99990845 -1.55097198]
[-132.59628296 -13.38218594]
[-126.60498047 -24.92692184]
[-120.04112244 -36.15600967]
[-112.92128754 -47.04107666]
[-105.26348114 -57.55461884]
[-97.08703613 -67.67007446]
[-88.41262054 -77.36188507]
[-79.26214600 -86.60556030]
[-69.65874481 -95.37774658]
[-59.62666702 -103.65628052]
[-49.19126892 -111.42024231]
[-38.37891388 -118.65001678]
[-27.21692085 -125.32733917]
[-15.73349380 -131.43533325]
[-3.95764756 -136.95855713]
[8.08086491 -141.88308716]
[20.35162544 -146.19644165]
[32.82363129 -149.88775635]
[45.46537018 -152.94767761]
[58.24489594 -155.36848450]
[71.12992859 -157.14407349]
[84.08789825 -158.26992798]
[97.08608246 -158.74324036]
[110.09162140 -158.56278992]
[123.07166290 -157.72903442]
[135.99340820 -156.24407959]
[148.82421875 -154.11167908]
[161.53166199 -151.33723450]
[174.08363342 -147.92774963]
[186.44842529 -143.89183044]
[198.59478760 -139.23966980]
[210.49203491 -133.98304749]
[222.11010742 -128.13520813]
[233.41964722 -121.71096802]
[244.39207458 -114.72652435]
[254.99967957 -107.19954681]
[265.21563721 -99.14904785]
[275.01419067 -90.59535980]
[284.37051392 -81.56010437]
[293.26098633 -72.06610870]
[301.66317749 -62.13735580]
[309.55581665 -51.79893875]
[321.95346069 -60.24275589]
[334.35113525 -68.68657684]
[340.98229980 -83.68521881]
[357.31387329 -85.17250824]
[366.54528809 -71.61843872]
[359.18008423 -56.96628189]
[342.79495239 -56.28891754]
[330.39727783 -47.84510040]
[317.99963379 -39.40127945]
[326.43084717 -25.24227142]
[333.94369507 -10.57530308]
[340.50772095 4.54013729]
[346.09631348 20.04274368]
[350.68676758 35.86964417]
[354.26046753 51.95664215]
[356.80294800 68.23849487]
[358.30389404 84.64916992]
[358.75720215 101.12210083]
[358.16104126 117.59048462]
[356.51785278 133.98751831]
[353.83422852 150.24670410]
[350.12112427 166.30210876]
[345.39358521 182.08860779]
[339.67077637 197.54216003]
[353.39450073 203.59687805]
[367.11819458 209.65161133]
[381.76110840 203.70507812]
[396.28729248 209.93122864]
[402.07867432 224.63616943]
[395.69931030 239.09574890]
[380.93395996 244.73132324]
[366.54263306 238.19943237]
[361.06347656 223.37532043]
[347.33975220 217.32058716]
[333.61605835 211.26586914]
[325.23461914 227.38101196]
[315.74325562 242.86846924]
[305.18878174 257.65188599]
[293.62316895 271.65844727]
[281.10345459 284.81909180]
[267.69128418 297.06900024]
[253.45275879 308.34780884]
[238.45806885 318.59991455]
[222.78108215 327.77481079]
[206.49905396 335.82727051]
[189.69223022 342.71765137]
[172.44342041 348.41195679]
[154.83763123 352.88217163]
[136.96160889 356.10620117]
[118.90345001 358.06823730]
[100.75213623 358.75854492]
[82.59712219 358.17376709]
[64.52786255 356.31677246]
[46.63340378 353.19668579]
[29.00192070 348.82891846]
[11.72030067 343.23495483]
[-5.12629747 336.44241333]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 23]
[6 22]
[7 18]
[8 17]
[9 16]
[10 15]
[97 106]
[98 105]
[99 104]
[121 132]
[122 131]
[123 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
