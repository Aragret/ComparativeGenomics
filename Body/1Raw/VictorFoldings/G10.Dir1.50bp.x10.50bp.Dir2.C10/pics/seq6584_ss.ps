%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.48587799 243.57305908]
[95.17382812 228.57629395]
[94.86177063 213.57954407]
[94.54971313 198.58279419]
[94.23765564 183.58604431]
[93.92559814 168.58927917]
[93.61354065 153.59252930]
[93.30149078 138.59577942]
[92.98943329 123.59902191]
[78.86463165 118.55027008]
[69.11697388 129.95129395]
[59.36932373 141.35231018]
[49.62167358 152.75332642]
[39.87401962 164.15435791]
[30.12636757 175.55537415]
[24.42904091 191.52336121]
[7.50790548 190.46907043]
[3.83676028 173.91735840]
[18.72534752 165.80772400]
[28.47299957 154.40669250]
[38.22064972 143.00567627]
[47.96830368 131.60466003]
[57.71595383 120.20363617]
[67.46360779 108.80261230]
[63.80405426 102.25603485]
[56.48494720 89.16288757]
[52.82539749 82.61631012]
[38.00763702 84.94741058]
[23.18988037 87.27851105]
[8.37212181 89.60961914]
[-6.44563675 91.94071960]
[-21.26339531 94.27182770]
[-35.97044754 102.70621490]
[-48.14653397 90.90879059]
[-40.18083572 75.94269562]
[-23.59449768 79.45407104]
[-8.77674007 77.12296295]
[6.04101753 74.79186249]
[20.85877609 72.46075439]
[35.67653275 70.12965393]
[50.49429321 67.79854584]
[36.37289429 62.74027252]
[22.25149727 57.68199921]
[8.13010120 52.62372208]
[4.65072441 38.03283691]
[7.17347908 23.24650192]
[15.29400826 10.63472080]
[27.71072578 2.21895552]
[42.43343735 -0.65188754]
[57.10233688 2.48234057]
[69.36624146 11.11927509]
[77.25945282 23.87455750]
[79.51688385 38.70244217]
[85.58914185 52.41840744]
[91.66139984 66.13436890]
[97.73365784 79.85033417]
[98.98052979 64.90224457]
[100.22740936 49.95415878]
[101.47428131 35.00607300]
[102.72115326 20.05798721]
[88.17816162 16.22752380]
[74.52133942 9.92971802]
[62.16570663 1.35595226]
[51.48673630 -9.23322678]
[42.80895233 -21.51602554]
[36.39605713 -35.11918259]
[32.44293213 -49.62931442]
[31.06971550 -64.60547638]
[32.31813049 -79.59255981]
[36.15024185 -94.13511658]
[42.44959641 -107.79122162]
[51.02476501 -120.14588165]
[61.61515427 -130.82365417]
[73.89893341 -139.50004578]
[87.50282288 -145.91139221]
[102.01340485 -149.86286926]
[116.98971558 -151.23439026]
[131.97665405 -149.98428345]
[146.51878357 -146.15051270]
[160.17417908 -139.84960938]
[172.52786255 -131.27304077]
[183.20443726 -120.68144989]
[191.87942505 -108.39668274]
[198.28924561 -94.79206848]
[202.23907471 -80.28103638]
[203.60888672 -65.30456543]
[202.35707092 -50.31777191]
[198.52166748 -35.77608109]
[192.21922302 -22.12140274]
[183.64125061 -9.76868820]
[173.04843140 0.90667903]
[160.76268005 9.58028603]
[147.15734863 15.98855305]
[132.64587402 19.93673706]
[117.66924286 21.30486107]
[116.42237091 36.25294876]
[115.17549133 51.20103455]
[113.92861938 66.14912415]
[112.68174744 81.09720612]
[123.00894928 91.97603607]
[138.00164795 91.50799561]
[152.99433899 91.03994751]
[161.53816223 87.62602997]
[168.30310059 90.72140503]
[183.30229187 90.56536102]
[198.30148315 90.40932465]
[204.31182861 76.41663361]
[215.49830627 66.08306122]
[229.92279053 61.19897842]
[245.08613586 62.61057281]
[258.36123657 70.07328033]
[267.44805908 82.29414368]
[270.77227783 97.15582275]
[267.75793457 112.08343506]
[258.92733765 124.49069214]
[245.81036377 132.22795105]
[230.67965698 133.95469666]
[216.15669250 129.37176514]
[204.75765991 119.27314758]
[198.45751953 105.40851593]
[183.45832825 105.56455231]
[168.45913696 105.72058868]
[153.46238708 106.03264618]
[138.46968079 106.50068665]
[123.47698975 106.96872711]
[136.85871887 113.74586487]
[150.24043274 120.52300262]
[165.24006653 120.41844940]
[178.94880676 126.50698853]
[188.92828369 137.70565796]
[193.40342712 152.02253723]
[191.57824707 166.91108704]
[183.77740479 179.72305298]
[171.38841248 188.17959595]
[156.61492920 190.77651978]
[142.08470154 187.05192566]
[130.38223267 177.66828918]
[123.58906555 164.29470825]
[122.91355133 149.30952454]
[115.44986725 136.29824829]
[107.98618317 123.28696442]
[108.29824066 138.28372192]
[108.61029816 153.28047180]
[108.92235565 168.27722168]
[109.23441315 183.27398682]
[109.54646301 198.27073669]
[109.85852051 213.26748657]
[110.17057800 228.26423645]
[110.48263550 243.26100159]
[113.07363129 262.46871948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
