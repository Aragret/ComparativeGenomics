%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.61651611 193.11203003]
[68.42109680 207.18354797]
[63.22568512 221.25508118]
[58.03026962 235.32659912]
[52.83485413 249.39811707]
[47.63943863 263.46963501]
[50.94420624 279.53234863]
[38.50780869 290.22195435]
[23.12374878 284.54193115]
[20.61782455 268.33538818]
[33.56791687 258.27423096]
[38.76333237 244.20269775]
[43.95874786 230.13117981]
[49.15416336 216.05966187]
[54.34957886 201.98814392]
[59.54499435 187.91662598]
[22.66272736 158.17976379]
[4.31462193 114.49992371]
[-10.64562702 115.59123230]
[-25.60587502 116.68254089]
[-29.22145081 119.34508514]
[-33.10832214 120.55474854]
[-36.76356506 120.40961456]
[-39.77099609 119.16487885]
[-41.84591675 117.18952942]
[-56.84510803 117.03349304]
[-71.84429169 116.87745667]
[-86.84348297 116.72142029]
[-101.84267426 116.87745667]
[-116.83536530 117.34549713]
[-131.82806396 117.81353760]
[-146.82075500 118.28157806]
[-154.66403198 131.56640625]
[-168.45478821 138.48150635]
[-183.79244995 136.82029724]
[-195.78282166 127.11285400]
[-200.59983826 112.45680237]
[-196.70637512 97.52882385]
[-185.34484863 87.09238434]
[-170.14067078 84.47771454]
[-155.94543457 90.51914978]
[-147.28880310 103.28888702]
[-132.29611206 102.82083893]
[-117.30341339 102.35279846]
[-102.31071472 101.88475800]
[-98.40779114 99.03121185]
[-92.65621948 98.64305878]
[-86.68744659 101.72222900]
[-71.68825531 101.87826538]
[-56.68907166 102.03430176]
[-41.68988037 102.19033813]
[-26.69718552 101.72229767]
[-11.73693752 100.63098907]
[3.22331142 99.53967285]
[3.54212761 92.13754272]
[4.42627716 84.78149414]
[5.87057829 77.51464081]
[7.86656570 70.37957764]
[10.40254116 63.41810989]
[13.46364212 56.67104721]
[17.03192711 50.17793655]
[21.08648109 43.97682571]
[25.60354424 38.10406494]
[30.55663872 32.59407425]
[35.91673660 27.47914124]
[41.65242386 22.78925133]
[47.73007965 18.55188751]
[54.11408997 14.79188633]
[60.76703262 11.53128433]
[67.64991760 8.78919220]
[74.72240448 6.58168030]
[81.94303894 4.92168760]
[89.26950836 3.81894231]
[96.65886688 3.27990818]
[104.06780243 3.30774426]
[111.45290375 3.90228772]
[118.77088165 5.06005335]
[125.97883606 6.77425623]
[133.03453064 9.03484917]
[139.89662170 11.82858276]
[146.52487183 15.13908386]
[152.88044739 18.94694901]
[158.92610168 23.22986031]
[164.62638855 27.96271706]
[169.94789124 33.11777878]
[174.85945129 38.66483688]
[179.33226013 44.57137299]
[183.34010315 50.80277252]
[186.85949707 57.32251358]
[189.86981201 64.09238434]
[192.35340881 71.07270813]
[194.29571533 78.22257233]
[195.68537903 85.50007629]
[210.64562988 84.40876770]
[225.60588074 83.31745911]
[240.56613159 82.22614288]
[246.33120728 78.78066254]
[252.09579468 78.80931091]
[256.16909790 81.41384888]
[264.71292114 77.99993134]
[271.47787476 81.09530640]
[286.47705078 80.93927002]
[301.47625732 80.78323364]
[316.47543335 80.62719727]
[321.22265625 66.24864197]
[330.38333130 54.19208908]
[342.96380615 45.76533508]
[357.59945679 41.88245010]
[372.70266724 42.96462250]
[386.63522339 48.89447021]
[397.88577271 59.02875900]
[405.23394775 72.26820374]
[407.88269043 87.17668915]
[405.54467773 102.13705444]
[398.47351074 115.52650452]
[387.43624878 125.89265442]
[373.63006592 132.11106873]
[358.55261230 133.50720215]
[343.83938599 129.92964172]
[331.08630371 121.76643372]
[321.67678833 109.90306091]
[316.63146973 95.62638092]
[301.63229370 95.78241730]
[286.63308716 95.93845367]
[271.63391113 96.09449005]
[256.63714600 96.40654755]
[241.65744019 97.18639374]
[226.69718933 98.27770233]
[211.73693848 99.36901093]
[196.77668762 100.46032715]
[196.39910889 108.55277252]
[195.34603882 116.58528900]
[193.62484741 124.50158691]
[191.24758911 132.24618530]
[188.23092651 139.76483154]
[184.59600830 147.00483704]
[180.36830139 153.91545105]
[175.57740784 160.44827271]
[170.25692749 166.55751038]
[164.44413757 172.20036316]
[158.17976379 177.33726501]
[151.50770569 181.93226624]
[144.47471619 185.95312500]
[137.13008118 189.37167358]
[129.52525330 192.16397095]
[121.71354675 194.31045532]
[113.74967194 195.79606628]
[105.68945312 196.61039734]
[97.58937073 196.74775696]
[89.50617218 196.20716858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 54]
[19 53]
[20 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 45]
[30 44]
[31 43]
[32 42]
[93 130]
[94 129]
[95 128]
[96 127]
[99 126]
[101 125]
[102 124]
[103 123]
[104 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
