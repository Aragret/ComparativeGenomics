%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAAxxxxxxxxxxCUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.40081024 146.10614014]
[77.97336578 152.79220581]
[64.54591370 159.47828674]
[51.11846542 166.16436768]
[37.69101334 172.85043335]
[24.26356506 179.53651428]
[11.42991161 187.30165100]
[-0.72342145 196.09349060]
[-12.87675476 204.88533020]
[-25.03008842 213.67716980]
[-37.18342209 222.46900940]
[-48.67408752 232.11082458]
[-59.44276428 242.55284119]
[-70.21144867 252.99484253]
[-74.73255920 268.15631104]
[-89.25581360 271.46151733]
[-100.02449036 281.90350342]
[-103.98945618 297.81613159]
[-119.82514191 302.07797241]
[-131.24114990 290.30480957]
[-126.49365997 274.60787964]
[-110.46649933 271.13482666]
[-99.69782257 260.69281006]
[-95.94696045 246.27824402]
[-80.65345764 242.22616577]
[-69.88477325 231.78416443]
[-59.11609650 221.34214783]
[-74.10389709 220.73739624]
[-85.31198883 210.76850891]
[-87.66068268 195.95352173]
[-80.08552551 183.00682068]
[-66.01969147 177.79605103]
[-51.83802032 182.68278503]
[-43.96785736 195.45230103]
[-45.97526169 210.31568909]
[-33.82192993 201.52383423]
[-21.66859627 192.73199463]
[-9.51526356 183.94015503]
[2.63806915 175.14831543]
[-12.24216461 173.25657654]
[-23.27651405 163.09571838]
[-26.38623047 148.42160034]
[-20.42183304 134.65838623]
[-7.58800793 126.89353943]
[7.37133121 127.99725342]
[18.92659378 137.56155396]
[22.80648041 152.05108643]
[17.57748985 166.10905457]
[31.00494003 159.42298889]
[44.43238831 152.73690796]
[57.85983658 146.05084229]
[71.28728485 139.36476135]
[84.71473694 132.67868042]
[74.20877838 116.08072662]
[75.29352570 99.54904938]
[84.23194885 89.35041046]
[75.07001495 77.47358704]
[65.90808105 65.59676361]
[50.54366302 59.86381531]
[48.09354401 43.64873123]
[61.07819748 33.63220215]
[76.14012146 40.11837387]
[77.78490448 56.43482971]
[86.94683838 68.31165314]
[96.10877228 80.18847656]
[93.76247406 65.37311554]
[91.41616821 50.55775833]
[89.06987000 35.74240112]
[86.72356415 20.92704010]
[77.62146759 9.00429821]
[70.91110992 -4.41103506]
[66.82955170 -18.84505272]
[65.52097321 -33.78786469]
[67.03159332 -48.71160507]
[71.30805206 -63.08908463]
[78.19928741 -76.41240692]
[87.46185303 -88.21091461]
[98.76854706 -98.06782532]
[111.71994781 -105.63493347]
[125.85855103 -110.64492798]
[140.68489075 -112.92082214]
[155.67521667 -112.38221741]
[170.29998779 -109.04814911]
[184.04257202 -103.03639221]
[196.41751099 -94.55931091]
[206.98765564 -83.91636658]
[215.37959290 -71.48352814]
[221.29687500 -57.70000076]
[224.53047180 -43.05268478]
[224.96617126 -28.05901337]
[222.58856201 -13.24864769]
[217.48162842 0.85522920]
[209.82580566 13.75438690]
[199.89151001 24.99315453]
[188.02969360 34.17451477]
[174.65939331 40.97412872]
[160.25163269 45.15203857]
[149.55842590 55.67132568]
[138.86521912 66.19060516]
[128.17201233 76.70989227]
[117.47881317 87.22917938]
[131.90618896 83.12423706]
[146.33358765 79.01928711]
[160.76097107 74.91434479]
[175.18835449 70.80940247]
[184.21971130 57.54990768]
[200.22753906 56.48748016]
[210.93202209 68.43711853]
[208.12156677 84.23208618]
[193.95213318 91.75582886]
[179.29328918 85.23678589]
[164.86590576 89.34172821]
[150.43852234 93.44667053]
[136.01113892 97.55162048]
[121.58375549 101.65656281]
[121.12204742 109.14234161]
[133.62609863 117.42778778]
[120.19863892 124.11389160]
[119.73693085 131.59967041]
[133.55050659 137.44645691]
[147.36408997 143.29324341]
[161.91552734 137.12626648]
[176.53408813 143.13233948]
[182.54687500 157.74815369]
[176.38658142 172.30239868]
[161.70802307 178.16032410]
[147.21971130 171.84649658]
[141.51730347 157.10682678]
[127.70372009 151.26004028]
[113.89014435 145.41323853]
[123.20960236 157.16687012]
[136.75334167 163.61412048]
[148.24293518 173.25721741]
[156.94136047 185.47758484]
[162.29064941 199.49133301]
[163.94766235 214.39952087]
[161.80609131 229.24586487]
[156.00334167 243.07800293]
[146.91160583 255.00865173]
[135.11410522 264.27252197]
[121.36761475 270.27532959]
[106.55391693 272.63204956]
[91.62324524 271.19152832]
[77.53336334 266.04611206]
[65.18808746 257.52587891]
[55.37931824 246.17741394]
[48.73625565 232.72862244]
[45.68502808 218.04223633]
[46.42136002 203.06031799]
[50.89802170 188.74391174]
[58.82785034 176.01136780]
[69.70217133 165.67942810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[7 39]
[8 38]
[9 37]
[10 36]
[11 35]
[12 27]
[13 26]
[14 25]
[16 23]
[17 22]
[56 65]
[57 64]
[58 63]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
