%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCxxxxxxxxxxACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[106.11590576 395.20629883]
[105.80384827 380.20956421]
[105.49179840 365.21279907]
[105.17974091 350.21603394]
[104.86768341 335.21929932]
[104.55562592 320.22253418]
[104.24356842 305.22576904]
[103.93151093 290.22903442]
[103.61946106 275.23226929]
[87.67863464 272.16378784]
[72.79338074 265.67034912]
[59.69007111 256.06567383]
[49.00881577 243.81547546]
[41.27216339 229.51472473]
[36.85956192 213.85882568]
[35.98874283 197.60980225]
[38.70496750 181.55920410]
[44.87870026 166.48951721]
[54.21177292 153.13603210]
[66.25178528 142.15101624]
[80.41404724 134.07174683]
[96.00993347 129.29435730]
[94.76306152 114.34627533]
[87.32701874 109.94166565]
[83.15956879 101.85347748]
[69.03475952 96.80471802]
[54.90996170 91.75595856]
[40.78515625 86.70720673]
[46.84281158 100.42962646]
[42.83107758 114.88320923]
[30.56730843 123.52033234]
[15.60711288 122.42830658]
[4.72760439 112.10182190]
[2.85730791 97.21887207]
[10.84348583 84.52159119]
[25.06872559 79.76197815]
[11.82613945 72.71684265]
[-1.41644621 65.67170715]
[-14.65903187 58.62657166]
[-27.90161705 51.58143616]
[-41.14420319 44.53630066]
[-54.38678741 37.49116516]
[-67.77307129 30.72305107]
[-81.29726410 24.23488617]
[-94.82145691 17.74672127]
[-108.34564209 11.25855541]
[-124.64695740 13.04719734]
[-134.12712097 -0.33407360]
[-127.03376770 -15.11975288]
[-110.66391754 -16.09960175]
[-101.85747528 -2.26563478]
[-88.33329010 4.22253036]
[-74.80909729 10.71069527]
[-61.28490829 17.19886017]
[-56.50641251 16.46299744]
[-51.22213745 18.76684952]
[-47.34165192 24.24857903]
[-34.09906769 31.29371452]
[-20.85648346 38.33884811]
[-7.61389685 45.38398361]
[5.62868881 52.42911911]
[18.87127495 59.47425461]
[32.11386108 66.51938629]
[45.83391190 72.58240509]
[59.95871735 77.63115692]
[74.08351898 82.67991638]
[88.20832062 87.72866821]
[74.54815674 81.53190613]
[64.16664886 70.70488739]
[58.54898453 56.79655075]
[58.49883652 41.79663467]
[64.02337646 27.85104561]
[74.33226013 16.95485687]
[87.95068359 10.66689110]
[102.93038177 9.88671112]
[117.12834167 14.72593021]
[128.51338196 24.49224472]
[135.45674133 37.78847122]
[136.96510315 52.71244049]
[132.82267761 67.12911224]
[123.62208557 78.97601318]
[110.67789459 86.55890656]
[124.20208740 80.07073975]
[137.72627258 73.58257294]
[151.25045776 67.09440613]
[164.77465820 60.60624313]
[178.29884338 54.11807632]
[191.82302856 47.62991333]
[194.62310791 30.98023605]
[206.65928650 19.37800980]
[223.07176208 17.23394394]
[237.39465332 25.19382668]
[250.78094482 18.42571259]
[264.16723633 11.65759754]
[262.64517212 -3.44365263]
[266.68484497 -18.07394218]
[275.73995972 -30.25464821]
[288.58584595 -38.33842468]
[303.48522949 -41.23201370]
[318.42306519 -38.54407501]
[331.37918091 -30.63813591]
[340.60131836 -18.58340454]
[344.84228516 -4.01018810]
[343.52850342 11.11060715]
[336.83767700 24.73401833]
[325.67468262 35.01758957]
[311.54922485 40.57055283]
[296.37161255 40.64191437]
[282.19454956 35.22202682]
[270.93533325 25.04388237]
[257.54907227 31.81199646]
[244.16278076 38.58011246]
[243.25549316 51.93574142]
[235.79388428 63.18011475]
[223.64651489 69.30318451]
[209.95266724 68.60229492]
[198.31120300 61.15410233]
[184.78700256 67.64226532]
[171.26281738 74.13043213]
[157.73863220 80.61859894]
[144.21443176 87.10676575]
[130.69024658 93.59492493]
[117.16606140 100.08309174]
[109.71115112 113.09940338]
[110.95802307 128.04748535]
[124.70503235 129.62005615]
[137.91365051 133.72639465]
[150.12132263 140.22093201]
[160.90084839 148.87452698]
[169.87535095 159.38250732]
[176.73147583 171.37539673]
[181.23031616 184.43193054]
[183.21572876 198.09384155]
[182.61973572 211.88191223]
[179.46490479 225.31285095]
[173.86346436 237.91616821]
[166.01330566 249.25068665]
[156.19100952 258.92001343]
[144.74208069 266.58636475]
[132.06883240 271.98229980]
[118.61621094 274.92022705]
[118.92826843 289.91696167]
[119.24032593 304.91372681]
[119.55238342 319.91049194]
[119.86443329 334.90722656]
[120.17649078 349.90399170]
[120.48854828 364.90075684]
[120.80060577 379.89749146]
[121.11266327 394.89425659]
[123.70365906 414.10195923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[22 125]
[23 124]
[25 67]
[26 66]
[27 65]
[28 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 54]
[44 53]
[45 52]
[46 51]
[82 123]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[88 117]
[92 112]
[93 111]
[94 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
