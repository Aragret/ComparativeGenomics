%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGxxxxxxxxxxCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[125.85598755 271.73623657]
[125.85598755 256.73623657]
[125.85598755 241.73623657]
[125.85598755 226.73623657]
[125.85598755 211.73623657]
[125.85598755 196.73623657]
[125.85598755 181.73623657]
[125.85598755 166.73623657]
[125.85598755 151.73623657]
[125.85598755 136.73623657]
[122.34681702 122.15248871]
[114.96076202 120.85012817]
[105.31896973 132.34082031]
[100.18864441 118.24540710]
[92.80258942 116.94304657]
[81.82178497 127.16175079]
[70.84098053 137.38046265]
[59.86017990 147.59916687]
[52.38414001 162.81578064]
[35.69263077 159.84428406]
[33.92733002 142.98248291]
[49.64147186 136.61836243]
[60.62227631 126.39965820]
[71.60308075 116.18095398]
[82.58387756 105.96224213]
[69.91275024 113.98985291]
[54.98754501 115.48593903]
[40.97517014 110.13305664]
[30.84883690 99.06700897]
[26.75720215 84.63584137]
[29.56844902 69.90163422]
[38.68606949 57.99076080]
[52.17544937 51.43052673]
[67.17433929 51.61291504]
[80.50020599 58.49922562]
[89.32550049 70.62828827]
[91.77764130 85.42630768]
[92.08561707 70.42946625]
[92.39360046 55.43262863]
[92.70157623 40.43579102]
[93.00955200 25.43895340]
[93.31752777 10.44211578]
[78.39669037 8.80926609]
[63.67855453 5.86408854]
[49.27830887 1.62963414]
[35.30866241 -3.86095691]
[21.87894630 -10.56471252]
[9.09426880 -18.42916489]
[-2.94531298 -27.39276314]
[-14.14556980 -37.38535309]
[-24.41884232 -48.32873154]
[-33.68472672 -60.13724518]
[-41.87070465 -72.71847534]
[-48.91270828 -85.97396088]
[-54.75562286 -99.79994965]
[-59.35371780 -114.08823395]
[-62.67100906 -128.72698975]
[-64.68152618 -143.60165405]
[-65.36954498 -158.59579468]
[-64.72967529 -173.59205627]
[-62.76692581 -188.47309875]
[-59.49665833 -203.12243652]
[-54.94446182 -217.42541504]
[-49.14597321 -231.27009583]
[-42.14656830 -244.54811096]
[-34.00102997 -257.15557861]
[-24.77310753 -268.99377441]
[-14.53502464 -279.97006226]
[-3.36691141 -289.99856567]
[8.64382744 -299.00079346]
[21.40318871 -306.90625000]
[34.81130981 -313.65310669]
[48.76325607 -319.18850708]
[63.14982986 -323.46917725]
[77.85843658 -326.46160889]
[92.77394867 -328.14236450]
[107.77964783 -328.49829102]
[122.75807953 -327.52658081]
[137.59202576 -325.23489380]
[152.16537476 -321.64114380]
[166.36407471 -316.77343750]
[180.07699585 -310.66989136]
[193.19682312 -303.37826538]
[205.62086487 -294.95562744]
[217.25189209 -285.46792603]
[227.99887085 -274.98934937]
[237.77769470 -263.60198975]
[246.51181030 -251.39491272]
[254.13288879 -238.46366882]
[260.58126831 -224.90946960]
[265.80645752 -210.83840942]
[269.76760864 -196.36061096]
[272.43368530 -181.58935547]
[273.78384399 -166.64028931]
[273.80749512 -151.63038635]
[272.50448608 -136.67713928]
[269.88497925 -121.89756775]
[265.96948242 -107.40734100]
[260.78866577 -93.31987762]
[254.38305664 -79.74542236]
[246.80278015 -66.79022980]
[238.10717773 -54.55567932]
[228.36431885 -43.13753510]
[217.65042114 -32.62515259]
[206.04936218 -23.10081291]
[193.65193176 -14.63905716]
[180.55516052 -7.30611038]
[166.86154175 -1.15936446]
[152.67825317 3.75307298]
[138.11630249 7.39275503]
[123.28966522 9.73119545]
[108.31436920 10.75009346]
[108.00639343 25.74693108]
[107.69841003 40.74377060]
[107.39043427 55.74060822]
[107.08245850 70.73744202]
[106.77448273 85.73428345]
[125.56360626 90.34973907]
[135.70492554 115.32891846]
[136.73577881 100.36437988]
[141.38937378 86.10450745]
[149.38398743 73.41253662]
[160.23567200 63.05680466]
[173.28747559 55.66421127]
[187.74928284 51.68228149]
[202.74565125 51.35206604]
[217.36872864 54.69355774]
[230.73329163 61.50447464]
[242.03028870 71.37249756]
[250.57583618 83.70026398]
[255.85260010 97.74147034]
[257.54116821 112.64612579]
[255.53930664 127.51194763]
[249.96820068 141.43899536]
[241.16511536 153.58418274]
[229.66296387 163.21228027]
[216.15802002 169.74043274]
[201.46786499 172.77345276]
[186.48176575 172.12770081]
[172.10694885 167.84231567]
[159.21360779 160.17668152]
[148.58227539 149.59486389]
[140.85598755 136.73623657]
[140.85598755 151.73623657]
[140.85598755 166.73623657]
[140.85598755 181.73623657]
[140.85598755 196.73623657]
[140.85598755 211.73623657]
[140.85598755 226.73623657]
[140.85598755 241.73623657]
[140.85598755 256.73623657]
[140.85598755 271.73623657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 119]
[15 25]
[16 24]
[17 23]
[18 22]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
