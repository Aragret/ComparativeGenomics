%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGxxxxxxxxxxUCCACCCUUAUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[107.86334229 361.90585327]
[107.86334229 346.90585327]
[107.86334229 331.90585327]
[107.86334229 316.90585327]
[107.86334229 301.90585327]
[107.86334229 286.90585327]
[107.86334229 271.90585327]
[107.86334229 256.90585327]
[107.86334229 241.90586853]
[107.86334229 226.90586853]
[88.81472015 215.84634399]
[80.04517365 195.50538635]
[85.13792419 173.82012939]
[102.23528290 159.34863281]
[99.78235626 144.55055237]
[97.32942963 129.75247192]
[94.87650299 114.95439148]
[83.09436035 105.67100525]
[68.13307953 106.74807739]
[53.48035812 109.95706940]
[39.43838120 115.23181152]
[25.39640427 120.50655365]
[24.92427063 135.70014954]
[18.66917992 149.55447388]
[7.58498716 159.95683289]
[-6.63804722 165.32095337]
[-21.83101463 164.82882690]
[-35.67709732 158.55552673]
[-46.06486893 147.45765686]
[-51.41027069 133.22758484]
[-50.89816284 118.03527069]
[-44.60664368 104.19745636]
[-33.49512482 93.82428741]
[-19.25802612 88.49761200]
[-4.06640577 89.02970123]
[9.76312447 95.33941650]
[20.12166214 106.46457672]
[34.16363907 101.18983459]
[48.20561600 95.91509247]
[33.58821106 92.54887390]
[21.31076813 83.93119049]
[13.17689323 71.32801819]
[10.38147736 56.59079361]
[13.33517933 41.88448334]
[21.60408974 29.36948586]
[33.97347260 20.88430405]
[48.62622833 17.67543983]
[63.40980911 20.21428490]
[76.15245819 28.12787819]
[84.98223114 40.25368118]
[88.60200500 54.81037140]
[86.48001862 69.65952301]
[78.92800903 82.61973572]
[67.05601501 91.78679657]
[82.01729584 90.70972443]
[92.55056763 86.23886871]
[101.12131500 89.00156403]
[110.03746796 76.93913269]
[118.95361328 64.87670135]
[127.86976624 52.81426620]
[136.78591919 40.75183487]
[145.70207214 28.68940353]
[134.60993958 18.57166100]
[124.61693573 7.36702633]
[115.82897949 -4.80572748]
[108.33924103 -17.81756210]
[102.22711182 -31.53054237]
[97.55737305 -45.79930496]
[94.37953949 -60.47259521]
[92.72729492 -75.39486694]
[92.61815643 -90.40792847]
[94.05326843 -105.35264587]
[97.01743317 -120.07058716]
[101.47922516 -134.40573120]
[107.39133453 -148.20613098]
[114.69110870 -161.32548523]
[123.30115509 -173.62471008]
[133.13020325 -184.97344971]
[144.07405090 -195.25138855]
[156.01670837 -204.34957886]
[168.83155823 -212.17156982]
[182.38276672 -218.63446045]
[196.52667236 -223.66970825]
[211.11335754 -227.22396851]
[225.98818970 -229.25953674]
[240.99346924 -229.75486755]
[255.97016907 -228.70468140]
[270.75949097 -226.12011719]
[285.20468140 -222.02857971]
[299.15258789 -216.47343445]
[312.45538330 -209.51358032]
[324.97204590 -201.22279358]
[336.56988525 -191.68894958]
[347.12594604 -181.01310730]
[356.52835083 -169.30845642]
[364.67742920 -156.69906616]
[371.48678589 -143.31860352]
[376.88421631 -129.30891418]
[380.81253052 -114.81848907]
[383.23010254 -100.00095367]
[384.11126709 -85.01337433]
[383.44671631 -70.01462555]
[381.24346924 -55.16370773]
[377.52490234 -40.61804962]
[372.33041382 -26.53183937]
[365.71505737 -13.05440044]
[357.74902344 -0.32860130]
[348.51666260 11.51065731]
[338.11593628 22.33787346]
[326.65704346 32.03827286]
[314.26144409 40.50902176]
[301.06060791 47.66033173]
[287.19439697 53.41639328]
[272.80981445 57.71618271]
[258.05938721 60.51412964]
[243.09942627 61.78056717]
[228.08854675 61.50207138]
[213.18586731 59.68159485]
[198.54934692 56.33843994]
[184.33418274 51.50803757]
[170.69100952 45.24160004]
[157.76449585 37.60555649]
[148.84834290 49.66798782]
[139.93220520 61.73041916]
[131.01605225 73.79284668]
[122.09989929 85.85527802]
[113.18374634 97.91770935]
[109.67457581 112.50146484]
[112.12751007 127.29953766]
[114.58043671 142.09762573]
[117.03336334 156.89570618]
[125.47159576 158.38122559]
[133.30053711 161.82319641]
[140.07463074 167.01748657]
[145.41029358 173.66050720]
[149.00764465 181.36688232]
[150.66740417 189.69187927]
[150.30183411 198.15698242]
[147.93940735 206.27749634]
[143.72270203 213.59017944]
[137.89987183 219.67980957]
[130.80998230 224.20265198]
[122.86334229 226.90586853]
[122.86334229 241.90586853]
[122.86334229 256.90585327]
[122.86334229 271.90585327]
[122.86334229 286.90585327]
[122.86334229 301.90585327]
[122.86334229 316.90585327]
[122.86334229 331.90585327]
[122.86334229 346.90585327]
[122.86334229 361.90585327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 131]
[15 130]
[16 129]
[17 128]
[18 55]
[19 54]
[20 39]
[21 38]
[22 37]
[57 127]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
