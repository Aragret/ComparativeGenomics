%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUxxxxxxxxxxGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.66976929 295.02789307]
[78.66976929 280.02789307]
[78.66976929 265.02789307]
[78.66976929 250.02789307]
[78.66976929 235.02789307]
[78.66976929 220.02789307]
[78.66976929 205.02789307]
[78.66976929 190.02789307]
[78.66976929 175.02789307]
[78.66976929 160.02789307]
[63.90874863 138.69024658]
[61.38984680 116.82269287]
[68.67872620 100.05229187]
[81.15461731 91.86370087]
[93.33775330 92.90562439]
[82.45892334 82.57842255]
[71.58010101 72.25122070]
[60.70127487 61.92401123]
[47.17708588 55.43584824]
[32.31403732 53.41351318]
[17.45099258 51.39117813]
[2.58794522 49.36884308]
[-14.41486454 64.48666382]
[-39.81007385 56.50789642]
[-54.62783051 58.83900070]
[-69.44558716 61.17010498]
[-84.26334381 63.50120926]
[-88.17941284 78.21800995]
[-97.74783325 90.06559753]
[-111.31082153 96.99128723]
[-126.51850891 97.79518127]
[-140.73606873 92.33798981]
[-151.50021362 81.56520081]
[-156.94601440 67.34327698]
[-156.12992859 52.13624191]
[-149.19335938 38.57881165]
[-137.33811951 29.01988983]
[-122.61817932 25.11561966]
[-107.58386993 27.54244041]
[-94.83997345 35.87988663]
[-86.59445190 48.68344879]
[-71.77669525 46.35234451]
[-56.95893478 44.02124405]
[-42.14117432 41.69013977]
[-39.19569397 26.98217773]
[-51.97304916 19.12475204]
[-64.75040436 11.26732540]
[-77.52776337 3.40989995]
[-93.40405273 5.71709108]
[-105.00755310 -5.36163950]
[-103.43705750 -21.32763863]
[-89.89731598 -29.93315697]
[-74.77485657 -24.57677841]
[-69.67034149 -9.36745739]
[-56.89298248 -1.51003170]
[-44.11562347 6.34739399]
[-31.33826828 14.20481968]
[-13.85879803 12.71971798]
[-0.40657368 21.17687988]
[4.61027956 34.50579834]
[19.47332573 36.52813339]
[34.33637238 38.55046463]
[49.19942093 40.57279968]
[37.72175598 30.91551399]
[28.30519295 19.23954010]
[21.29807472 5.97679901]
[16.95960808 -8.38209057]
[15.45028210 -23.30596161]
[16.82592964 -38.24274826]
[21.03566551 -52.63990402]
[27.92375755 -65.96485138]
[37.23540497 -77.72466278]
[48.62614441 -87.48432922]
[61.67461395 -94.88280487]
[75.89811707 -99.64641571]
[90.77049255 -101.59893799]
[105.74158478 -100.66815186]
[120.25758362 -96.88848114]
[133.78149414 -90.39974213]
[145.81306458 -81.44197845]
[155.90718079 -70.34654236]
[163.69047546 -57.52389526]
[168.87501526 -43.44836426]
[171.26901245 -28.64063644]
[170.78390503 -13.64848328]
[167.43763733 0.97350389]
[161.35400391 14.68442535]
[152.75804138 26.97708321]
[141.96772766 37.39674759]
[129.38224792 45.55796814]
[115.46714020 51.15884399]
[100.73716736 53.99219131]
[85.73722076 53.95319366]
[71.02848053 51.04518890]
[81.90730286 61.37239075]
[92.78613281 71.69960022]
[103.66495514 82.02680206]
[118.37291718 84.97228241]
[132.38963318 79.63077545]
[146.40634155 74.28926086]
[160.42304993 68.94774628]
[174.43977356 63.60623550]
[184.36567688 50.55218124]
[200.59742737 52.88938141]
[206.43717957 68.21352386]
[195.87750244 80.76044464]
[179.78128052 77.62294769]
[165.76457214 82.96446228]
[151.74786377 88.30596924]
[137.73114014 93.64748383]
[123.71443176 98.98899841]
[123.71443176 106.48899841]
[138.71443176 106.48899841]
[153.71443176 106.48925018]
[153.71392822 121.48925018]
[138.71443176 121.48899841]
[123.71443176 121.48899841]
[123.71443176 128.98899841]
[137.73114014 134.33050537]
[152.90042114 129.10820007]
[166.36346436 137.83322144]
[167.79257202 153.81250000]
[156.09146118 164.78808594]
[140.23622131 162.34045410]
[132.38963318 148.34722900]
[118.37291718 143.00570679]
[112.19712830 147.26126099]
[121.93709564 158.66883850]
[131.67706299 170.07643127]
[141.41702271 181.48402405]
[155.41120911 186.88429260]
[162.32708740 200.19483948]
[158.70135498 214.75004578]
[146.34970093 223.26101685]
[131.45753479 221.46565247]
[121.48249817 210.26303101]
[121.41970825 195.26356506]
[114.22832489 182.09982300]
[107.03694153 168.93608093]
[99.84555817 155.77233887]
[93.66976929 160.02789307]
[93.66976929 175.02789307]
[93.66976929 190.02789307]
[93.66976929 205.02789307]
[93.66976929 220.02789307]
[93.66976929 235.02789307]
[93.66976929 250.02789307]
[93.66976929 265.02789307]
[93.66976929 280.02789307]
[93.66976929 295.02789307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 97]
[16 96]
[17 95]
[18 94]
[19 63]
[20 62]
[21 61]
[22 60]
[24 44]
[25 43]
[26 42]
[27 41]
[45 57]
[46 56]
[47 55]
[48 54]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
