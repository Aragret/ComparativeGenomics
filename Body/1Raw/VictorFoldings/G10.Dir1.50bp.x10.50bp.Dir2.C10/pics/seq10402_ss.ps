%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCxxxxxxxxxxCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[148.83743286 348.53298950]
[148.83743286 333.53298950]
[148.83743286 318.53298950]
[148.83743286 303.53298950]
[148.83743286 288.53298950]
[148.83743286 273.53298950]
[148.83743286 258.53298950]
[148.83743286 243.53298950]
[148.83743286 228.53298950]
[148.83743286 213.53298950]
[146.19857788 198.76692200]
[132.12236023 188.33331299]
[135.30178833 170.22610474]
[129.81475830 156.26570129]
[124.32772827 142.30531311]
[118.84069824 128.34492493]
[109.69896698 116.45254517]
[95.35856628 118.52601624]
[83.68968964 109.93629456]
[81.40868378 95.62744141]
[69.32869720 86.73509216]
[57.24870682 77.84274292]
[45.16872025 68.95039368]
[29.46813965 67.00042725]
[23.80530548 53.22430420]
[10.02292442 47.30434036]
[-4.74313116 44.66547775]
[-19.50918579 42.02661133]
[-34.27524185 39.38774872]
[-49.04129791 36.74888229]
[-63.80735397 34.11001968]
[-78.57341003 31.47115517]
[-72.61100769 45.23522949]
[-79.46573639 58.57736969]
[-94.12734222 61.74555206]
[-105.87937164 52.42408752]
[-106.13204956 37.42621613]
[-94.70132446 27.71433830]
[-109.11354065 23.55644989]
[-123.52575684 19.39856339]
[-135.68562317 29.03792191]
[-151.19041443 29.65529823]
[-164.07821655 21.01329613]
[-169.39340210 6.43494463]
[-165.09219360 -8.47408485]
[-152.82847595 -17.98096466]
[-137.31790161 -18.43010712]
[-124.52460480 -9.64880753]
[-119.36786652 4.98634672]
[-104.95565033 9.14423466]
[-90.54343414 13.30212116]
[-75.93454742 16.70509911]
[-61.16848755 19.34396362]
[-46.40243149 21.98282814]
[-31.63637733 24.62169266]
[-16.87032127 27.26055717]
[-2.10426664 29.89942169]
[12.66178894 32.53828430]
[1.39908814 22.63113785]
[-6.97686625 10.18752956]
[-11.91635323 -3.97585511]
[-13.09519100 -18.92946243]
[-10.43601036 -33.69187164]
[-4.11333609 -47.29421616]
[5.45786953 -58.84376526]
[17.64944077 -67.58250427]
[31.66123390 -72.93691254]
[46.57364273 -74.55556488]
[61.40795517 -72.33223724]
[75.19058228 -66.41284943]
[87.01696014 -57.18588257]
[96.11090851 -45.25692368]
[101.87558746 -31.40887451]
[103.93265533 -16.55059624]
[102.14710999 -1.65724766]
[96.63613129 12.29370689]
[87.76141357 24.38665390]
[76.10541534 33.82792664]
[62.43311691 39.99788284]
[47.64185715 42.49158478]
[32.69765472 41.14431381]
[47.53419495 42.45824051]
[54.06106949 56.87040329]
[66.14105988 65.76275635]
[78.22104645 74.65510559]
[90.30103302 83.54745483]
[104.64143372 81.47398376]
[116.31031036 90.06370544]
[118.59131622 104.37255859]
[112.97973633 90.46176910]
[110.42920685 75.68019867]
[111.05452728 60.69323730]
[114.82756805 46.17551804]
[121.57846832 32.78054428]
[131.00335693 21.11128616]
[142.67796326 11.69302845]
[156.07676697 4.94973040]
[170.59661865 1.18493688]
[185.58393860 0.56811851]
[200.36405945 3.12704110]
[214.27165222 8.74651623]
[226.68070984 17.17358589]
[237.03260803 28.02890968]
[244.86138916 40.82384109]
[249.81462097 54.98242188]
[251.66935730 69.86730957]
[250.34210205 84.80847931]
[245.89259338 99.13334656]
[238.52111816 112.19709015]
[228.55952454 123.41165924]
[216.45620728 132.27223206]
[202.75598145 138.37994385]
[188.07559204 141.45986938]
[173.07583618 141.37336731]
[158.43194580 138.12434387]
[144.80308533 131.85902405]
[132.80108643 122.85789490]
[138.28811646 136.81828308]
[143.77514648 150.77867126]
[149.26217651 164.73905945]
[160.78697205 170.62406921]
[165.05058289 182.41560364]
[160.27009583 193.57151794]
[163.33338928 178.88763428]
[170.91976929 165.94750977]
[182.23690796 156.10258484]
[196.10284424 150.38107300]
[211.06944275 149.38050842]
[225.57357788 153.20541382]
[238.10046387 161.45628357]
[247.34181213 173.27143860]
[252.33242798 187.41688538]
[252.55113220 202.41528320]
[247.97505188 216.70022583]
[239.08212280 228.77978516]
[226.80111694 237.39239502]
[212.41465759 241.63854980]
[197.42526245 241.07478333]
[183.39839172 235.75996399]
[171.79904175 226.24919128]
[163.83743286 213.53298950]
[163.83743286 228.53298950]
[163.83743286 243.53298950]
[163.83743286 258.53298950]
[163.83743286 273.53298950]
[163.83743286 288.53298950]
[163.83743286 303.53298950]
[163.83743286 318.53298950]
[163.83743286 333.53298950]
[163.83743286 348.53298950]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[13 120]
[14 119]
[15 118]
[16 117]
[17 89]
[20 86]
[21 85]
[22 84]
[23 83]
[25 81]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[38 51]
[39 50]
[40 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
