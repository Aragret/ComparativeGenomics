%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUAxxxxxxxxxxGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.30676270 257.48260498]
[86.30676270 242.48260498]
[86.30676270 227.48260498]
[86.30676270 212.48260498]
[86.30676270 197.48260498]
[86.30676270 182.48260498]
[86.30676270 167.48260498]
[86.30676270 152.48260498]
[86.30676270 137.48260498]
[86.30676270 122.48259735]
[83.29717255 112.10474396]
[85.46350098 103.41125488]
[90.89223480 98.47290039]
[79.11009979 89.18951416]
[67.32796478 79.90612793]
[51.69970703 77.44277191]
[46.49129868 63.48849487]
[34.70915985 54.20511246]
[38.15671158 68.80355072]
[33.97341537 83.20841217]
[23.24260330 93.68933105]
[8.74318695 97.53210449]
[-5.76997995 93.74159241]
[-16.53848267 83.29940033]
[-20.77364922 68.90970612]
[-17.37871552 54.29894257]
[-7.23285389 43.25079727]
[7.03650618 38.62636566]
[21.73320007 41.62277985]
[12.09138584 30.13211250]
[2.44957209 18.64144516]
[-7.19224215 7.15077925]
[-13.35591984 4.49528027]
[-16.70642090 -0.19108514]
[-16.98225594 -5.01530838]
[-26.14419174 -16.89213181]
[-35.30612564 -28.76895523]
[-47.89456558 -36.92562103]
[-62.47831726 -40.43478775]
[-77.06206512 -43.94395447]
[-91.64581299 -47.45312500]
[-106.02465820 -40.33775330]
[-120.49102783 -47.27342987]
[-123.94757080 -62.93969345]
[-113.74272156 -75.31873322]
[-97.70475769 -74.91439819]
[-88.13665009 -62.03687286]
[-73.55289459 -58.52770615]
[-58.96914673 -55.01853943]
[-44.38539886 -51.50936890]
[-37.15338135 -64.65158844]
[-29.92199326 -77.79263306]
[-40.69067383 -88.23464203]
[-51.45935059 -98.67665100]
[-67.45808411 -99.86829376]
[-76.38209534 -113.20027161]
[-71.38563538 -128.44543457]
[-56.30157089 -133.90899658]
[-42.70109940 -125.39978027]
[-41.01734161 -109.44532776]
[-30.24866295 -99.00331879]
[-19.47998428 -88.56130981]
[-23.92422295 -102.88781738]
[-15.80729961 -115.50191498]
[-4.82513475 -125.71916199]
[8.34115601 -132.90586853]
[22.87499619 -136.61633301]
[37.87499619 -136.62040710]
[52.41085052 -132.91784668]
[65.58104706 -125.73830414]
[76.56876373 -115.52703094]
[84.69255066 -102.91734314]
[89.44855499 -88.69129944]
[90.54181671 -73.73119354]
[87.90452576 -58.96485519]
[81.70025635 -45.30809784]
[72.31378937 -33.60791397]
[60.32728195 -24.58995247]
[46.48413849 -18.81350708]
[31.64290810 -16.63683510]
[16.72405052 -18.19493294]
[2.65283298 -23.39116859]
[-9.69489574 -31.90046310]
[-23.42930412 -37.93089294]
[-14.26736736 -26.05406761]
[-5.10543251 -14.17724419]
[4.29842472 -2.49103498]
[13.94023895 8.99963188]
[23.58205223 20.49029732]
[33.22386551 31.98096466]
[43.99254608 42.42297363]
[55.77468109 51.70635986]
[70.56020355 53.50571060]
[76.61135101 68.12399292]
[88.39348602 77.40737915]
[100.17562103 86.69076538]
[114.60300446 90.79570770]
[129.50746155 89.10530853]
[144.39376831 87.26198578]
[159.26036072 85.26593018]
[167.40821838 80.99881744]
[174.45233154 83.38475800]
[189.35678101 81.69435883]
[204.22337341 79.69830322]
[219.04585266 77.39743042]
[233.86833191 75.09654999]
[248.69082642 72.79567719]
[263.51330566 70.49480438]
[278.33578491 68.19392395]
[293.05999756 59.78955078]
[305.21200562 71.61178589]
[297.21578979 86.56159973]
[280.63665771 83.01641083]
[265.81417847 85.31728363]
[250.99169922 87.61815643]
[236.16921997 89.91903687]
[221.34672546 92.21990967]
[206.52424622 94.52078247]
[203.00169373 97.82846832]
[197.34487915 98.91860199]
[191.04718018 96.59880829]
[176.14273071 98.28919983]
[161.25642395 100.13253021]
[146.38981628 102.12858582]
[140.14042664 106.16061401]
[131.19784546 104.00975800]
[116.29340363 105.70015717]
[130.18370056 111.36226654]
[144.07400513 117.02437592]
[159.07398987 117.00082397]
[172.78956604 123.07395172]
[182.85440063 134.19596863]
[187.53201294 148.44798279]
[186.01536560 163.37110901]
[178.56613159 176.39067078]
[166.46952820 185.26039124]
[151.81257629 188.45001221]
[137.12402344 185.40919495]
[124.93809509 176.66259766]
[117.35721588 163.71925354]
[115.68952942 148.81007385]
[108.49814606 135.64633179]
[101.30676270 122.48259735]
[101.30676270 137.48260498]
[101.30676270 152.48260498]
[101.30676270 167.48260498]
[101.30676270 182.48260498]
[101.30676270 197.48260498]
[101.30676270 212.48260498]
[101.30676270 227.48260498]
[101.30676270 242.48260498]
[101.30676270 257.48260498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[13 96]
[14 95]
[15 94]
[17 92]
[18 91]
[29 90]
[30 89]
[31 88]
[32 87]
[35 86]
[36 85]
[37 84]
[38 50]
[39 49]
[40 48]
[41 47]
[52 62]
[53 61]
[54 60]
[97 127]
[98 126]
[99 124]
[100 123]
[102 122]
[103 121]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
