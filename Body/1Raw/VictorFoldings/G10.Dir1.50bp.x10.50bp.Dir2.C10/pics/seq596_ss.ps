%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUxxxxxxxxxxUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-42.71634674 218.77351379]
[-54.62406921 227.89526367]
[-66.53178406 237.01699829]
[-72.78185272 251.55134583]
[-87.59054565 253.14877319]
[-99.49826813 262.27050781]
[-111.40599060 271.39227295]
[-123.31370544 280.51400757]
[-135.22143555 289.63574219]
[-128.74555969 303.22827148]
[-125.23764038 317.87026978]
[-124.85101318 332.92166138]
[-127.60257721 347.72445679]
[-133.37205505 361.63153076]
[-141.90722656 374.03494263]
[-152.83496094 384.39245605]
[-165.67756653 392.25128174]
[-179.87359619 397.26791382]
[-194.80247498 399.22296143]
[-209.81156921 398.03103638]
[-224.24475098 393.74420166]
[-237.47105408 386.54986572]
[-248.91230774 376.76254272]
[-258.06829834 364.81008911]
[-264.53881836 351.21502686]
[-268.04098511 336.57162476]
[-268.42169189 321.52011108]
[-265.66430664 306.71838379]
[-259.88937378 292.81359863]
[-251.34931946 280.41354370]
[-240.41749573 270.06030273]
[-227.57180786 262.20654297]
[-213.37380981 257.19549561]
[-198.44416809 255.24630737]
[-183.43553162 256.44415283]
[-169.00404358 260.73666382]
[-155.78056335 267.93618774]
[-144.34317017 277.72802734]
[-132.43545532 268.60629272]
[-120.52773285 259.48452759]
[-108.62001038 250.36279297]
[-96.71228790 241.24105835]
[-91.31394958 227.35914612]
[-75.65353394 225.10928345]
[-63.74581146 215.98753357]
[-51.83808899 206.86579895]
[-67.46044922 180.20039368]
[-78.44346619 151.31309509]
[-84.48286438 121.00421906]
[-85.41132355 90.11344147]
[-81.20313263 59.49656296]
[-71.97486877 30.00179291]
[-57.98218918 2.44626284]
[-39.61275482 -22.40662766]
[-17.37547493 -43.86835098]
[-26.38060760 -55.86449814]
[-35.38574219 -67.86064911]
[-44.39087296 -79.85679626]
[-59.48907471 -77.34623718]
[-74.02095032 -82.15074921]
[-84.64717102 -93.16628265]
[-88.92591858 -107.86154938]
[-85.87396240 -122.85968781]
[-76.19262695 -134.71423340]
[-62.10660172 -140.70109558]
[-46.85276031 -139.44454956]
[-33.93632126 -131.23332214]
[-26.32538986 -117.95430756]
[-25.76889801 -102.65892029]
[-32.39472580 -88.86193085]
[-23.38959312 -76.86577606]
[-14.38445950 -64.86962891]
[-5.37932634 -52.87348175]
[2.69797993 -58.13734818]
[11.03763008 -62.97484589]
[19.61713791 -67.37293243]
[28.41337395 -71.31975555]
[37.40261841 -74.80467224]
[46.56063843 -77.81827545]
[55.86274338 -80.35244751]
[65.28384399 -82.40036774]
[74.79855347 -83.95648956]
[84.38120270 -85.01663971]
[94.00596619 -85.57794952]
[103.64689636 -85.63890839]
[113.27798462 -85.19934845]
[122.87328339 -84.26045990]
[132.40690613 -82.82476807]
[141.85314941 -80.89615631]
[151.18655396 -78.47980499]
[160.38194275 -75.58224487]
[169.41453552 -72.21128082]
[178.25997925 -68.37600708]
[186.89442444 -64.08675385]
[195.29457092 -59.35510254]
[203.43778992 -54.19379425]
[211.30212402 -48.61675262]
[218.86637878 -42.63901520]
[226.11013794 -36.27669525]
[233.01388550 -29.54694939]
[239.55899048 -22.46792221]
[245.72782898 -15.05869770]
[251.50375366 -7.33925438]
[256.87121582 0.66959518]
[261.81570435 8.94625759]
[266.32391357 17.46841812]
[270.38366699 26.21309662]
[273.98406982 35.15671921]
[277.11535645 44.27517319]
[279.76910400 53.54386902]
[281.93817139 62.93782043]
[283.61669922 72.43169403]
[284.80017090 81.99990082]
[285.48538208 91.61663818]
[285.67047119 101.25598145]
[285.35498047 110.89193726]
[284.53973389 120.49851990]
[283.22692871 130.04985046]
[281.42013550 139.52014160]
[279.12417603 148.88389587]
[276.34527588 158.11582947]
[273.09091187 167.19108582]
[269.36984253 176.08518982]
[265.19216919 184.77413940]
[260.56906128 193.23454285]
[255.51306152 201.44354248]
[250.03775024 209.37905884]
[244.15791321 217.01965332]
[237.88940430 224.34474182]
[231.24913025 231.33457947]
[224.25497437 237.97030640]
[216.92579651 244.23405457]
[209.28138733 250.10890198]
[201.34231567 255.57904053]
[193.13002014 260.62969971]
[184.66661072 265.24728394]
[175.97494507 269.41934204]
[167.07843018 273.13458252]
[158.00105286 276.38305664]
[148.76730347 279.15594482]
[139.40206909 281.44580078]
[129.93058777 283.24645996]
[120.37841797 284.55303955]
[110.77130127 285.36203003]
[101.13513947 285.67126465]
[91.49592590 285.47988892]
[81.87963104 284.78842163]
[72.31220245 283.59872437]
[62.81941605 281.91400146]
[53.42687988 279.73883057]
[44.15991211 277.07904053]
[35.04349899 273.94183350]
[26.10222244 270.33563232]
[17.36018562 266.27017212]
[8.84096241 261.75640869]
[0.56752008 256.80651855]
[-7.43783426 251.43386841]
[-15.15351677 245.65290833]
[-22.55872536 239.47926331]
[-29.63349152 232.92953491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 46]
[2 45]
[3 44]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[55 73]
[56 72]
[57 71]
[58 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
