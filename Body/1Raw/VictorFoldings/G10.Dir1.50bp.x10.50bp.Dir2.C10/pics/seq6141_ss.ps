%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGxxxxxxxxxxCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.70396423 225.14752197]
[97.07998657 210.16050720]
[96.45600891 195.17349243]
[95.83203125 180.18647766]
[95.20805359 165.19946289]
[94.58407593 150.21244812]
[93.96009827 135.22543335]
[93.33612061 120.23841095]
[81.83431244 110.60988617]
[66.97126770 112.63221741]
[52.10822296 114.65455627]
[37.24517441 116.67688751]
[22.38212776 118.69921875]
[7.51908112 120.72155762]
[20.39804077 128.41131592]
[27.82654572 141.44271851]
[27.88175011 156.44261169]
[20.54936409 169.52833557]
[7.72735214 177.31268311]
[-7.26534462 177.78068542]
[-20.54791260 170.81123352]
[-28.68220139 158.20832825]
[-29.56267357 143.23419189]
[-22.96142197 129.76483154]
[-10.58726025 121.28680420]
[-25.54750824 120.19548798]
[-40.50775909 119.10417938]
[-55.46800613 118.01287079]
[-70.42825317 116.92155457]
[-85.38850403 115.83024597]
[-100.34875488 114.73893738]
[-115.30899811 113.64762878]
[-130.26925659 112.55631256]
[-137.82989502 125.81525421]
[-150.39950562 134.47363281]
[-165.48237610 136.81233215]
[-180.08381653 132.36698914]
[-191.30467224 122.02024841]
[-196.91703796 107.82644653]
[-195.80657959 92.60377502]
[-188.19378662 79.37471008]
[-175.59017944 70.76589966]
[-160.49819946 68.48661804]
[-145.91439819 72.98941803]
[-134.73437500 83.38027191]
[-129.17793274 97.59606934]
[-114.21768951 98.68737793]
[-99.25743866 99.77868652]
[-84.29719543 100.87000275]
[-69.33694458 101.96131134]
[-54.37669373 103.05261993]
[-39.41644669 104.14392853]
[-24.45619774 105.23524475]
[-9.49594975 106.32655334]
[5.49674654 105.85851288]
[20.35979271 103.83617401]
[35.22283936 101.81384277]
[50.08588791 99.79150391]
[64.94893646 97.76917267]
[79.81198120 95.74683380]
[89.55963135 84.34581757]
[89.24757385 69.34906006]
[81.22485352 55.71284103]
[88.69570923 42.82735825]
[88.38365173 27.83060646]
[73.84537506 23.69177628]
[61.17383957 15.45019436]
[51.49579620 3.83869743]
[45.67180634 -10.11022854]
[44.21973038 -25.15625381]
[47.26869583 -39.96149826]
[54.54758072 -53.20948792]
[65.40915680 -63.72221756]
[78.88762665 -70.56491089]
[93.78447723 -73.12911224]
[108.77510834 -71.18681335]
[122.52655029 -64.91072845]
[133.81604004 -54.85892487]
[141.63972473 -41.92519379]
[145.30192566 -27.25959778]
[144.47700500 -12.16619205]
[139.23829651 2.01292920]
[130.05165100 14.01696777]
[117.73392487 22.77853203]
[103.38040161 27.51854897]
[103.69245911 42.51530457]
[111.69286346 55.07885742]
[104.24433136 69.03701019]
[104.55638885 84.03376007]
[112.17928314 83.84681702]
[120.25457001 87.39466095]
[135.07232666 85.06356049]
[149.89009094 82.73245239]
[164.70783997 80.40135193]
[179.52560425 78.07024384]
[193.84820557 73.61343384]
[207.37239075 67.12526703]
[220.89657593 60.63710022]
[234.42076111 54.14893723]
[247.94496155 47.66077042]
[256.75140381 33.82680511]
[273.12124634 34.80665207]
[280.21459961 49.59233093]
[270.73443604 62.97360229]
[254.43312073 61.18496323]
[240.90893555 67.67312622]
[227.38475037 74.16129303]
[213.86054993 80.64945984]
[200.33636475 87.13761902]
[203.12869263 101.87542725]
[218.08894348 102.96673584]
[228.85496521 91.62537384]
[244.39807129 89.90902710]
[257.37927246 98.62811279]
[261.66925049 113.66573334]
[255.24240112 127.92159271]
[241.13328552 134.66450500]
[226.00379944 130.71067810]
[216.99761963 117.92698669]
[202.03738403 116.83567810]
[192.67073059 112.95130920]
[186.00668335 106.87392426]
[182.42237854 99.78858185]
[181.85670471 92.88800812]
[167.03894043 95.21910858]
[152.22119141 97.55021667]
[137.40342712 99.88131714]
[122.58567047 102.21241760]
[136.70707703 107.27069855]
[151.61265564 105.59034729]
[165.64233398 110.89771271]
[175.70361328 122.02293396]
[179.57876587 136.51373291]
[176.41360474 151.17597961]
[166.90579224 162.77778625]
[153.15110779 168.76179504]
[138.18139648 167.80902100]
[125.29635620 160.12945557]
[117.33615875 147.41586304]
[116.05588531 132.46762085]
[108.32313538 119.61443329]
[108.94711304 134.60145569]
[109.57109070 149.58847046]
[110.19506836 164.57548523]
[110.81904602 179.56250000]
[111.44302368 194.54951477]
[112.06700134 209.53652954]
[112.69097900 224.52354431]
[119.39096832 240.09744263]
[106.28044128 250.84689331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[61 89]
[62 88]
[64 86]
[65 85]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
