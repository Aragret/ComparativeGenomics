%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACxxxxxxxxxxUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-86.18893433 192.84239197]
[-99.84517670 199.04780579]
[-113.50141907 205.25320435]
[-122.86444092 218.00642395]
[-137.65243530 216.22744751]
[-151.30867004 222.43286133]
[-164.96490479 228.63825989]
[-178.62115479 234.84367371]
[-192.27738953 241.04907227]
[-188.39268494 255.57350159]
[-186.95175171 270.53924561]
[-187.99391174 285.53805542]
[-191.49072266 300.16070557]
[-197.34678650 314.00830078]
[-205.40235901 326.70309448]
[-215.43766785 337.89874268]
[-227.17895508 347.28982544]
[-240.30589294 354.62011719]
[-254.46037292 359.68969727]
[-269.25625610 362.36019897]
[-284.28988647 362.55883789]
[-299.15115356 360.28012085]
[-313.43463135 355.58630371]
[-326.75067139 348.60534668]
[-338.73593140 339.52774048]
[-349.06353760 328.60113525]
[-357.45169067 316.12359619]
[-363.67153931 302.43554688]
[-367.55346680 287.91036987]
[-368.99148560 272.94433594]
[-367.94644165 257.94573975]
[-364.44683838 243.32376099]
[-358.58810425 229.47727966]
[-350.53009033 216.78404236]
[-340.49261475 205.59033203]
[-328.74951172 196.20152283]
[-315.62118530 188.87374878]
[-301.46569824 183.80691528]
[-286.66931152 181.13923645]
[-271.63562012 180.94351196]
[-256.77481079 183.22506714]
[-242.49223328 187.92166138]
[-229.17755127 194.90518188]
[-217.19401550 203.98507690]
[-206.86854553 214.91368103]
[-198.48280334 227.39283752]
[-184.82655334 221.18742371]
[-171.17031860 214.98202515]
[-157.51408386 208.77661133]
[-143.85783386 202.57121277]
[-135.47160339 190.26185608]
[-119.70682526 191.59696960]
[-106.05058289 185.39155579]
[-92.39434052 179.18615723]
[-98.42488861 162.55871582]
[-103.02136993 145.47915649]
[-106.15056610 128.07089233]
[-107.78985596 110.45976257]
[-107.92739105 92.77304077]
[-106.56218719 75.13854218]
[-103.70410919 57.68372726]
[-99.37380219 40.53474426]
[-93.60256958 23.81552887]
[-86.43212891 7.64692020]
[-77.91429138 -7.85422993]
[-68.11061859 -22.57588959]
[-57.09197235 -36.41166306]
[-44.93798065 -49.26155090]
[-31.73648643 -61.03269196]
[-17.58289719 -71.64000702]
[-2.57950711 -81.00683594]
[13.16525173 -89.06548309]
[29.53758621 -95.75770569]
[46.41917419 -101.03513336]
[63.68799973 -104.85963440]
[81.21926117 -107.20355225]
[98.88626099 -108.04996490]
[116.56130981 -107.39275360]
[134.11666870 -105.23664856]
[151.42544556 -101.59725189]
[168.36256409 -96.50086212]
[184.80560303 -89.98431396]
[200.63574219 -82.09469604]
[208.35983276 -94.95309448]
[216.08390808 -107.81150055]
[212.01603699 -123.08329773]
[220.01058960 -136.71644592]
[235.32453918 -140.62263489]
[248.87240601 -132.48439026]
[252.61647034 -117.12998962]
[244.33543396 -103.66892242]
[228.94232178 -100.08740997]
[221.21823120 -87.22901154]
[213.49414062 -74.37060547]
[224.30125427 -66.83892822]
[234.61007690 -58.63845062]
[244.37928772 -49.80204010]
[253.56973267 -40.36511993]
[262.14456177 -30.36552238]
[270.06942749 -19.84333229]
[277.31250000 -8.84072781]
[283.84481812 2.59818363]
[289.64013672 14.42754745]
[294.67526245 26.59994316]
[298.92999268 39.06657791]
[302.38729858 51.77747345]
[305.03326416 64.68167877]
[306.85736084 77.72746277]
[307.85220337 90.86252594]
[308.01382446 104.03422546]
[307.34161377 117.18975067]
[305.83822632 130.27636719]
[303.50967407 143.24160767]
[300.36535645 156.03352356]
[296.41781616 168.60079956]
[291.68292236 180.89309692]
[286.17959595 192.86109924]
[279.92996216 204.45686340]
[272.95904541 215.63389587]
[265.29479980 226.34738159]
[256.96792603 236.55439758]
[248.01181030 246.21398926]
[238.46237183 255.28747559]
[228.35789490 263.73846436]
[217.73886108 271.53305054]
[206.64785767 278.64004517]
[195.12933350 285.03091431]
[183.22946167 290.68005371]
[170.99595642 295.56484985]
[158.47784424 299.66564941]
[145.72531128 302.96606445]
[132.78948975 305.45285034]
[119.72222137 307.11605835]
[106.57589722 307.94900513]
[93.40320587 307.94833374]
[80.25696564 307.11407471]
[67.18986511 305.44955444]
[54.25428772 302.96148682]
[41.50209427 299.65975952]
[28.98439789 295.55770874]
[16.75137901 290.67169189]
[4.85207891 285.02136230]
[-6.66580391 278.62933350]
[-17.75609779 271.52124023]
[-28.37434769 263.72555542]
[-38.47798538 255.27355957]
[-48.02650833 246.19912720]
[-56.98163986 236.53862000]
[-65.30748749 226.33078003]
[-72.97066498 215.61651611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 54]
[2 53]
[3 52]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
