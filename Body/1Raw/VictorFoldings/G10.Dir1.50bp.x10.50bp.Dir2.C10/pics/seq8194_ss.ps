%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAxxxxxxxxxxAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.68331909 223.25653076]
[116.05934143 208.26950073]
[115.43536377 193.28248596]
[114.81138611 178.29547119]
[114.18740845 163.30845642]
[113.56343079 148.32144165]
[112.93945312 133.33442688]
[112.31547546 118.34741211]
[98.19067383 113.29865265]
[88.20794678 124.49442291]
[78.22521973 135.69018555]
[68.24249268 146.88595581]
[58.25976562 158.08171082]
[48.27703857 169.27748108]
[49.43088913 185.03959656]
[39.03819656 196.94621277]
[23.26476860 197.93334961]
[11.46869278 187.41535950]
[10.64837646 171.63237000]
[21.29049683 159.94816589]
[37.08127213 159.29475403]
[47.06399918 148.09898376]
[57.04672623 136.90322876]
[67.02944946 125.70745850]
[77.01217651 114.51169586]
[86.99490356 103.31592560]
[93.20030975 89.65968323]
[95.06792450 74.77640533]
[96.93553925 59.89312744]
[98.80315399 45.00984573]
[84.06497955 42.19168091]
[69.53765869 38.43502426]
[55.28086853 33.75531387]
[41.35320663 28.17178154]
[27.81189728 21.70736885]
[14.71258926 14.38864040]
[2.10910892 6.24567032]
[-9.94675159 -2.68807983]
[-21.40545273 -12.37589836]
[-32.21990967 -22.77797699]
[-42.34567642 -33.85157013]
[-51.74115372 -45.55117416]
[-60.36772537 -57.82870865]
[-68.18994904 -70.63372803]
[-75.17567444 -83.91361237]
[-81.29619598 -97.61379242]
[-86.52636719 -111.67796326]
[-90.84469604 -126.04833984]
[-94.23343658 -140.66586304]
[-96.67865753 -155.47047424]
[-98.17032623 -170.40133667]
[-98.70229340 -185.39709473]
[-98.27239227 -200.39611816]
[-96.88237000 -215.33679199]
[-94.53795624 -230.15769958]
[-91.24877167 -244.79795837]
[-87.02834320 -259.19738770]
[-81.89400482 -273.29681396]
[-75.86685944 -287.03833008]
[-68.97167206 -300.36544800]
[-61.23677826 -313.22341919]
[-52.69396210 -325.55938721]
[-43.37832642 -337.32266235]
[-33.32815170 -348.46490479]
[-22.58473778 -358.94033813]
[-11.19223213 -368.70590210]
[0.80255121 -377.72149658]
[13.35032272 -385.95004272]
[26.39951897 -393.35775757]
[39.89652252 -399.91418457]
[53.78586197 -405.59237671]
[68.01047516 -410.36898804]
[82.51189423 -414.22442627]
[97.23054504 -417.14282227]
[112.10593414 -419.11221313]
[127.07694244 -420.12445068]
[142.08204651 -420.17541504]
[157.05958557 -419.26492310]
[171.94801331 -417.39666748]
[186.68614197 -414.57833862]
[201.21342468 -410.82150269]
[215.47016907 -406.14163208]
[229.39776611 -400.55795288]
[242.93901062 -394.09338379]
[256.03823853 -386.77450562]
[268.64163208 -378.63140869]
[280.69738770 -369.69754028]
[292.15597534 -360.00958252]
[302.97030640 -349.60739136]
[313.09594727 -338.53369141]
[322.49130249 -326.83395386]
[331.11773682 -314.55633545]
[338.93981934 -301.75122070]
[345.92541504 -288.47128296]
[352.04577637 -274.77102661]
[357.27578735 -260.70678711]
[361.59396362 -246.33636475]
[364.98254395 -231.71879578]
[367.42761230 -216.91416931]
[368.91909790 -201.98329163]
[369.45089722 -186.98751831]
[369.02084351 -171.98849487]
[367.63064575 -157.04785156]
[365.28607178 -142.22695923]
[361.99673462 -127.58675385]
[357.77612305 -113.18737030]
[352.64163208 -99.08798218]
[346.61434937 -85.34653473]
[339.71899414 -72.01949310]
[331.98397827 -59.16162491]
[323.44100952 -46.82575607]
[314.12524414 -35.06258774]
[304.07495117 -23.92045212]
[293.33142090 -13.44513607]
[281.93881226 -3.67968535]
[269.94390869 5.33577061]
[257.39605713 13.56418610]
[244.34678650 20.97174835]
[230.84970093 27.52801704]
[216.96029663 33.20605087]
[202.73564148 37.98252106]
[188.23417664 41.83779526]
[173.51548767 44.75603104]
[158.64007568 46.72523880]
[143.66906738 47.73732758]
[128.66395569 47.78813934]
[113.68643188 46.87746048]
[111.81881714 61.76073837]
[109.95120239 76.64402008]
[108.08359528 91.52729797]
[110.14447784 76.66954803]
[118.76197815 64.39198303]
[132.03463745 57.40367126]
[147.03381348 57.24659348]
[160.44992065 63.95541000]
[169.32266235 76.04981232]
[171.69424438 90.86114502]
[167.04139709 105.12126160]
[156.39076233 115.68364716]
[142.09242249 120.21768188]
[127.30249023 117.72343445]
[127.92646790 132.71044922]
[128.55044556 147.69746399]
[129.17442322 162.68447876]
[129.79840088 177.67149353]
[130.42237854 192.65850830]
[131.04635620 207.64552307]
[131.67033386 222.63255310]
[138.37031555 238.20645142]
[125.25979614 248.95588684]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[27 130]
[28 129]
[29 128]
[30 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
