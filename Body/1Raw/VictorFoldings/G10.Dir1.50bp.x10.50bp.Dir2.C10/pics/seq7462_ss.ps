%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUACUUCCCCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUxxxxxxxxxxCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[81.77176666 280.51266479]
[81.45970917 265.51589966]
[81.14765167 250.51914978]
[80.83559418 235.52238464]
[80.52354431 220.52563477]
[80.21148682 205.52888489]
[79.89942932 190.53213501]
[79.58737183 175.53536987]
[79.27531433 160.53862000]
[65.75112915 154.05046082]
[53.85874557 163.19218445]
[41.96636581 172.33392334]
[37.02857208 180.09730530]
[29.73014832 181.53906250]
[17.65016174 190.43141174]
[5.57017279 199.32376099]
[-6.50981569 208.21611023]
[-4.72934675 223.47145081]
[-10.82981777 237.56683350]
[-23.17023277 246.71067810]
[-38.43108368 248.44331360]
[-52.50727463 242.29869080]
[-61.61238480 229.92967224]
[-63.29718018 214.66346741]
[-57.10846710 200.60661316]
[-44.71097183 191.54031372]
[-29.43955994 189.90338135]
[-15.40216541 196.13612366]
[-3.32217717 187.24377441]
[8.75781155 178.35142517]
[20.83779907 169.45907593]
[32.82463074 160.44154358]
[44.71701050 151.29980469]
[56.60939026 142.15808105]
[49.01803207 132.03666687]
[43.72926712 120.60918427]
[40.95294571 108.38853455]
[40.78676224 95.91754913]
[43.21302795 83.74485016]
[48.10057068 72.40074921]
[55.21154785 62.37411118]
[64.21292114 54.09133911]
[74.69200897 47.89820862]
[86.17534637 44.04551697]
[98.15007782 42.67896271]
[110.08685303 43.83380890]
[121.46321106 47.43440247]
[128.91812134 34.41809464]
[136.37303162 21.40178490]
[143.82794189 8.38547516]
[151.28285217 -4.63083410]
[158.73776245 -17.64714432]
[166.19267273 -30.66345215]
[163.23913574 -51.35865021]
[179.10392761 -63.90570831]
[182.20225525 -78.58222961]
[185.30056763 -93.25875854]
[171.13298035 -98.25220490]
[157.73840332 -105.05223083]
[145.34603882 -113.54247284]
[134.16792297 -123.57764435]
[124.39533997 -134.98605347]
[116.19551086 -147.57246399]
[109.70873260 -161.12150574]
[105.04602051 -175.40136719]
[102.28714752 -190.16766357]
[101.47933197 -205.16773987]
[102.63638306 -220.14492798]
[105.73851013 -234.84295654]
[110.73263550 -249.01029968]
[117.53329468 -262.40457153]
[126.02412415 -274.79650879]
[136.05982971 -285.97415161]
[147.46870422 -295.74618530]
[160.05549622 -303.94543457]
[173.60485840 -310.43154907]
[187.88493347 -315.09359741]
[202.65136719 -317.85177612]
[217.65148926 -318.65887451]
[232.62861633 -317.50109863]
[247.32649231 -314.39828491]
[261.49359131 -309.40347290]
[274.88754272 -302.60217285]
[287.27908325 -294.11074829]
[298.45626831 -284.07452393]
[308.22775269 -272.66519165]
[316.42639160 -260.07800293]
[322.91186523 -246.52833557]
[327.57321167 -232.24803162]
[330.33068848 -217.48147583]
[331.13708496 -202.48130798]
[329.97860718 -187.50422668]
[326.87509155 -172.80650330]
[321.87960815 -158.63963318]
[315.07766724 -145.24603271]
[306.58566284 -132.85487366]
[296.54888916 -121.67819214]
[285.13909912 -111.90723419]
[272.55151367 -103.70919800]
[259.00152588 -97.22435760]
[244.72100830 -92.56368256]
[229.95431519 -89.80692291]
[214.95411682 -89.00124359]
[199.97709656 -90.16043854]
[196.87876892 -75.48390961]
[193.78045654 -60.80738449]
[198.44677734 -56.42229843]
[201.48449707 -50.78528595]
[216.46420288 -50.00543976]
[231.44392395 -49.22559357]
[241.09989929 -61.37226868]
[256.06036377 -65.49104309]
[270.57269287 -59.99816895]
[279.05661011 -47.00576019]
[278.24990845 -31.50967216]
[268.46270752 -19.46846008]
[253.45846558 -15.51221943]
[239.00656128 -21.16220474]
[230.66407776 -34.24588013]
[215.68437195 -35.02572632]
[200.70465088 -35.80557251]
[192.27108765 -26.00941658]
[179.20898438 -23.20854187]
[171.75407410 -10.19223309]
[164.29916382 2.82407618]
[156.84425354 15.84038544]
[149.38934326 28.85669518]
[141.93443298 41.87300491]
[134.47952271 54.88931274]
[143.55807495 63.09740067]
[150.71061707 73.11080170]
[155.58326721 84.48304749]
[157.92456055 96.69947815]
[157.59829712 109.20057678]
[154.59107971 121.40756989]
[149.01437378 132.74922180]
[141.10044861 142.68856812]
[131.19299316 150.74832153]
[119.73211670 156.53373718]
[107.23490906 159.75193787]
[94.27207184 160.22656250]
[94.58412933 175.22331238]
[94.89617920 190.22007751]
[95.20823669 205.21682739]
[95.52029419 220.21357727]
[95.83235168 235.21032715]
[96.14440918 250.20709229]
[96.45646667 265.20382690]
[96.76851654 280.20059204]
[99.35951996 299.40832520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 34]
[11 33]
[12 32]
[14 31]
[15 30]
[16 29]
[17 28]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 123]
[55 106]
[56 105]
[57 104]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
