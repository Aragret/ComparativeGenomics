%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAxxxxxxxxxxCCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.12483978 396.91333008]
[97.12483978 381.91333008]
[97.12483978 366.91333008]
[97.12483978 351.91333008]
[97.12483978 336.91333008]
[97.12483978 321.91333008]
[97.12483978 306.91333008]
[97.12483978 291.91333008]
[97.12483978 276.91333008]
[97.12483978 261.91333008]
[82.08184052 258.31530762]
[68.32262421 251.23077393]
[56.64252853 241.06455994]
[47.71785355 228.39978027]
[42.06664658 213.96438599]
[40.01866531 198.58932495]
[41.69613266 183.16069031]
[47.00643539 168.56863403]
[55.64725494 155.65606689]
[67.12374878 145.16993713]
[80.77689362 137.71801758]
[95.82135773 133.73365784]
[95.51734924 118.73674774]
[84.43824768 108.62470245]
[69.47596741 109.68789673]
[54.51369858 110.75109863]
[39.55142593 111.81429291]
[24.61377335 113.18051147]
[9.70687771 114.84918213]
[-5.20001745 116.51786041]
[-10.70158768 130.80041504]
[-22.21806145 140.88156128]
[-37.10303879 144.44471741]
[-51.93605423 140.67109680]
[-63.30859756 130.42787170]
[-68.60733795 116.06883240]
[-66.61466217 100.89359283]
[-57.78847504 88.38931274]
[-44.15697098 81.42938232]
[-28.85256386 81.61314392]
[-15.39210033 88.89836884]
[-6.86869431 101.61096954]
[8.03820038 99.94229126]
[22.94509506 98.27361298]
[26.60355759 95.12094879]
[32.29780197 94.27170563]
[38.48822784 96.85202026]
[53.45050049 95.78882599]
[68.41277313 94.72562408]
[83.37504578 93.66242981]
[68.49990082 91.73111725]
[56.06861115 83.33689117]
[48.71890640 70.26088715]
[48.01028824 55.27763367]
[54.09311295 41.56635284]
[65.67669678 32.03636551]
[80.30317688 28.70979881]
[94.86904144 32.29249573]
[106.28362274 42.02426147]
[112.12493134 55.84016037]
[111.15351868 70.80867767]
[103.57565308 83.75356293]
[113.57489777 72.57254791]
[123.57414246 61.39153671]
[133.57339478 50.21052170]
[143.57263184 39.02950668]
[133.48820496 27.90646553]
[124.62171936 15.79023457]
[117.07031250 2.81356382]
[110.91672516 -10.88136578]
[106.22838593 -25.14450645]
[103.05665588 -39.81958008]
[101.43628693 -54.74580383]
[101.38503265 -69.75963593]
[102.90345764 -84.69657135]
[105.97492218 -99.39295959]
[110.56578064 -113.68777466]
[116.62571716 -127.42440033]
[124.08835602 -140.45231628]
[132.87191772 -152.62879944]
[142.88017273 -163.82043457]
[154.00344849 -173.90458679]
[166.11990356 -182.77078247]
[179.09675598 -190.32188416]
[192.79183960 -196.47512817]
[207.05508423 -201.16313171]
[221.73023987 -204.33450317]
[236.65649414 -205.95451355]
[251.67033386 -206.00540161]
[266.60723877 -204.48660278]
[281.30355835 -201.41477966]
[295.59823608 -196.82357788]
[309.33471680 -190.76330566]
[322.36245728 -183.30035400]
[334.53872681 -174.51649475]
[345.73013306 -164.50798035]
[355.81402588 -153.38444519]
[364.67990112 -141.26777649]
[372.23068237 -128.29074097]
[378.38360596 -114.59552002]
[383.07125854 -100.33215332]
[386.24227905 -85.65692139]
[387.86190796 -70.73062134]
[387.91244507 -55.71678543]
[386.39328003 -40.77992249]
[383.32110596 -26.08368492]
[378.72955322 -11.78909206]
[372.66894531 1.94723654]
[365.20568848 14.97479820]
[356.42153931 27.15085411]
[346.41275024 38.34199905]
[335.28897095 48.42561722]
[323.17208862 57.29122162]
[310.19485474 64.84168243]
[296.49948120 70.99427032]
[282.23599243 75.68157196]
[267.56069946 78.85223389]
[252.63435364 80.47151184]
[237.62052917 80.52167511]
[222.68370056 79.00215912]
[207.98753357 75.92962646]
[193.69305420 71.33773041]
[179.95687866 65.27678680]
[166.92948914 57.81320190]
[154.75364685 49.02875137]
[144.75440979 60.20976639]
[134.75515747 71.39077759]
[124.75591278 82.57179260]
[114.75666809 93.75280762]
[117.64192963 105.96353149]
[110.51426697 118.43273926]
[110.81827545 133.42965698]
[125.06845856 136.47633362]
[138.27091980 142.62658691]
[149.75961304 151.56645203]
[158.95579529 162.84130859]
[165.39717102 175.87902832]
[168.76107788 190.01898193]
[168.88073730 204.54554749]
[165.75347900 218.72428894]
[159.54066467 231.83914185]
[150.55944824 243.22850037]
[139.26649475 252.31864929]
[126.23487091 258.65264893]
[112.12483978 261.91333008]
[112.12483978 276.91333008]
[112.12483978 291.91333008]
[112.12483978 306.91333008]
[112.12483978 321.91333008]
[112.12483978 336.91333008]
[112.12483978 351.91333008]
[112.12483978 366.91333008]
[112.12483978 381.91333008]
[112.12483978 396.91333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[22 132]
[23 131]
[24 50]
[25 49]
[26 48]
[27 47]
[28 44]
[29 43]
[30 42]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
