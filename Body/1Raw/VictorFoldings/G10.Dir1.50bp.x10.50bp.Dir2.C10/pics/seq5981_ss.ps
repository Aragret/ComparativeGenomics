%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCxxxxxxxxxxGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.40956879 228.39985657]
[125.49805450 213.42756653]
[124.58654022 198.45529175]
[123.67502594 183.48301697]
[122.76351166 168.51074219]
[121.85199738 153.53845215]
[120.94048309 138.56617737]
[106.45817566 134.65942383]
[98.14042664 147.14201355]
[89.82268524 159.62460327]
[81.50493622 172.10719299]
[73.18718719 184.58978271]
[72.67590332 200.98095703]
[58.09914017 208.49427795]
[44.45221710 199.40068054]
[45.77391815 183.05488586]
[60.70459747 176.27203369]
[69.02234650 163.78944397]
[77.34008789 151.30685425]
[85.65783691 138.82426453]
[93.97558594 126.34167480]
[85.65744781 119.02692413]
[81.93071747 109.95995331]
[67.06069946 111.93040466]
[52.19068909 113.90085602]
[37.41274261 116.47230530]
[22.75114822 119.64052582]
[8.08955288 122.80874634]
[-6.57204247 125.97696686]
[-21.23363686 129.14518738]
[-29.58471107 142.56291199]
[-44.99629593 146.06414795]
[-58.32497025 137.57167053]
[-61.66306686 122.12393188]
[-53.03015518 108.88579559]
[-37.54798889 105.71120453]
[-24.40185928 114.48359680]
[-9.74026299 111.31537628]
[4.92133188 108.14714813]
[19.58292770 104.97892761]
[34.24452209 101.81070709]
[35.87960434 99.46514130]
[38.56958008 97.64602661]
[42.11120987 96.76884460]
[46.15106964 97.16497040]
[50.22023773 99.03084564]
[65.09024811 97.06039429]
[79.96026611 95.08994293]
[94.74716187 77.85212708]
[118.94159698 83.84979248]
[124.97597504 110.31398010]
[130.04273987 96.19562531]
[135.10949707 82.07727051]
[140.17626953 67.95891571]
[128.74015808 52.68965530]
[128.74641418 33.76156616]
[140.01385498 18.73826027]
[157.89701843 13.51586914]
[162.09648132 -0.88428783]
[166.29594421 -15.28444481]
[170.49540710 -29.68460083]
[166.93107605 -45.09907913]
[177.92214966 -55.15122604]
[182.12161255 -69.55138397]
[186.32107544 -83.95153809]
[172.72563171 -90.36329651]
[160.30067444 -98.82301331]
[149.35215759 -109.12236023]
[140.14970398 -121.00769806]
[132.91993713 -134.18635559]
[127.84089661 -148.33378601]
[125.03765106 -163.10159302]
[124.57923889 -178.12612915]
[126.47694397 -193.03736877]
[130.68403625 -207.46812439]
[137.09692383 -221.06303406]
[145.55766296 -233.48730469]
[155.85791016 -244.43496704]
[167.74400330 -253.63642883]
[180.92326355 -260.86511230]
[195.07110596 -265.94299316]
[209.83915710 -268.74502563]
[224.86372375 -269.20217896]
[239.77481079 -267.30325317]
[254.20521545 -263.09497070]
[267.79959106 -256.68096924]
[280.22317505 -248.21920776]
[291.16998291 -237.91804504]
[300.37045288 -226.03118896]
[307.59805298 -212.85133362]
[312.67477417 -198.70306396]
[315.47558594 -183.93479919]
[315.93151855 -168.91020203]
[314.03134155 -153.99926758]
[309.82186890 -139.56919861]
[303.40673828 -125.97534943]
[294.94393921 -113.55248260]
[284.64190674 -102.60651398]
[272.75427246 -93.40700531]
[259.57382202 -86.18050385]
[245.42514038 -81.10496521]
[230.65663147 -78.30537415]
[215.63200378 -77.85067749]
[200.72122192 -79.75207520]
[196.52175903 -65.35192108]
[192.32229614 -50.95176315]
[196.18701172 -36.56728363]
[184.89556885 -25.48513985]
[180.69610596 -11.08498287]
[176.49664307 3.31517434]
[172.29718018 17.71533203]
[180.73754883 25.15975761]
[185.78829956 35.27467728]
[186.67576599 46.59729385]
[183.23150635 57.47383499]
[175.92265320 66.30110931]
[165.78886414 71.76280212]
[154.29461670 73.02568054]
[149.22785950 87.14403534]
[144.16108704 101.26239014]
[139.09432983 115.38073730]
[145.62443542 101.87674713]
[155.25061035 90.37297821]
[167.39158630 81.56409454]
[181.31425476 75.98200226]
[196.17785645 73.96379089]
[211.08488464 75.63132477]
[225.13516235 80.88391113]
[237.48027039 89.40436554]
[247.37475586 100.67819214]
[254.22113037 114.02462006]
[257.60598755 128.63772583]
[257.32495117 143.63508606]
[253.39494324 158.11109924]
[246.05331421 171.19163513]
[235.74337769 182.08682251]
[223.08769226 190.13876343]
[208.85046387 194.86123657]
[193.89143372 195.96907043]
[179.11387634 193.39537048]
[165.41015625 187.29554749]
[153.60774231 178.03794861]
[144.41934204 166.18159485]
[138.39978027 152.44241333]
[135.91276550 137.65466309]
[136.82427979 152.62693787]
[137.73579407 167.59922791]
[138.64730835 182.57150269]
[139.55882263 197.54377747]
[140.47033691 212.51605225]
[141.38185120 227.48834229]
[150.87565613 240.85993958]
[143.79737854 255.65284729]
[127.42852783 256.64938354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 21]
[9 20]
[10 19]
[11 18]
[12 17]
[23 48]
[24 47]
[25 46]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[51 121]
[52 120]
[53 119]
[54 118]
[58 111]
[59 110]
[60 109]
[61 108]
[63 106]
[64 105]
[65 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
