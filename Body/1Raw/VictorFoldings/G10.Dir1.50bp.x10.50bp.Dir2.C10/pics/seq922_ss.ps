%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGxxxxxxxxxxAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[116.04674530 255.28250122]
[116.04674530 240.28250122]
[116.04674530 225.28250122]
[116.04674530 210.28250122]
[116.04674530 195.28250122]
[116.04674530 180.28250122]
[116.04674530 165.28250122]
[116.04674530 150.28250122]
[116.04674530 135.28250122]
[116.04674530 120.28250122]
[103.88372040 130.33180237]
[85.78081512 132.30535889]
[74.08119202 141.69252014]
[62.38157272 151.07968140]
[57.60635376 158.94410706]
[50.33950424 160.53738403]
[38.44712448 169.67912292]
[32.22148895 184.22395325]
[17.41549492 185.84625244]
[13.91788483 201.50338745]
[-0.56662440 208.40110779]
[-14.92675877 201.24806213]
[-18.14665031 185.53144836]
[-7.75627565 173.30772400]
[8.27375984 173.95387268]
[13.64877415 160.06291199]
[29.30538940 157.78674316]
[41.19776917 148.64500427]
[52.99440765 139.38006592]
[64.69403076 129.99288940]
[76.39365387 120.60573578]
[74.76824188 113.28398132]
[60.12468719 116.53456879]
[56.87434769 101.89096069]
[71.51741791 98.64048004]
[69.89200592 91.31873322]
[55.31930161 87.76396942]
[40.74660110 84.20920563]
[30.19188881 95.36688232]
[15.46782970 99.73696899]
[0.53512257 96.14394379]
[-10.58941078 85.55431366]
[-14.91332626 70.81662750]
[-11.27351284 55.89525604]
[-0.64906108 44.80397034]
[14.10210419 40.52627182]
[29.01199341 44.21284103]
[40.06991959 54.87200546]
[44.30136108 69.63650513]
[58.87406540 73.19126892]
[73.44676971 76.74603271]
[105.45540619 69.91112518]
[124.19995117 90.87638855]
[131.92404175 78.01798248]
[139.64811707 65.15958405]
[147.37220764 52.30118179]
[155.09629822 39.44277954]
[162.82037354 26.58437538]
[170.27528381 13.56806564]
[177.45779419 0.39948323]
[178.83628845 -8.69730854]
[184.92916870 -12.96607304]
[192.38407898 -25.98238182]
[199.83898926 -38.99869156]
[207.29389954 -52.01499939]
[200.15246582 -67.31375885]
[203.48034668 -83.69687653]
[215.77844238 -94.77491760]
[232.08895874 -96.34734344]
[239.27145386 -109.51593018]
[226.30078125 -101.98191071]
[211.79777527 -98.15269470]
[196.79852295 -98.30181885]
[182.37451172 -102.41863251]
[169.55618286 -110.20904541]
[159.25924683 -121.11653137]
[152.21929932 -134.36186218]
[148.93923950 -148.99885559]
[149.65339661 -163.98184204]
[154.31076050 -178.24047852]
[162.57861328 -190.75617981]
[173.86631775 -200.63482666]
[187.36749268 -207.17073059]
[202.11767578 -209.89697266]
[217.06311035 -208.61878967]
[231.13615417 -203.42749023]
[243.33145142 -194.69395447]
[252.77778625 -183.04205322]
[258.80035400 -169.30419922]
[260.96890259 -154.46177673]
[259.12850952 -139.57510376]
[253.41342163 -125.71240997]
[265.49340820 -134.60476685]
[277.57339478 -143.49711609]
[289.65338135 -152.38946533]
[293.47595215 -167.97045898]
[308.10083008 -174.56535339]
[322.30905151 -167.11511230]
[325.20129395 -151.33491516]
[314.55886841 -139.32998657]
[298.54574585 -140.30947876]
[286.46572876 -131.41712952]
[274.38574219 -122.52477264]
[262.30575562 -113.63242340]
[252.44004822 -102.33341980]
[245.25753784 -89.16483307]
[252.08850098 -77.65250397]
[252.32446289 -64.15969849]
[245.79612732 -52.22523880]
[234.12239075 -45.03240204]
[220.31021118 -44.56008911]
[212.85530090 -31.54378128]
[205.40039062 -18.52747154]
[197.94548035 -5.51116228]
[190.62637329 7.58199215]
[183.44386292 20.75057411]
[183.93029785 25.56086540]
[181.35484314 30.71821785]
[175.67877197 34.30846024]
[167.95469666 47.16686249]
[160.23060608 60.02526474]
[152.50653076 72.88366699]
[144.78244019 85.74207306]
[137.05834961 98.60047150]
[146.67984009 87.09277344]
[159.58406067 79.44548798]
[174.29827881 76.53140259]
[189.14314270 78.68309784]
[202.42443848 85.65500641]
[212.62634277 96.65141296]
[218.58453369 110.41731262]
[219.61898804 125.38159943]
[215.61166382 139.83641052]
[207.01989746 152.13200378]
[194.82427979 160.86508179]
[180.41668701 165.03897095]
[165.44145203 164.17727661]
[151.60771179 158.37834167]
[140.49429321 148.30401611]
[133.36958313 135.10408020]
[131.04673767 120.28250122]
[131.04673767 135.28250122]
[131.04673767 150.28250122]
[131.04673767 165.28250122]
[131.04673767 180.28250122]
[131.04673767 195.28250122]
[131.04673767 210.28250122]
[131.04673767 225.28250122]
[131.04673767 240.28250122]
[131.04673767 255.28250122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 31]
[13 30]
[14 29]
[16 28]
[17 27]
[19 25]
[36 51]
[37 50]
[38 49]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 116]
[60 115]
[62 114]
[63 113]
[64 112]
[65 111]
[69 106]
[70 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
