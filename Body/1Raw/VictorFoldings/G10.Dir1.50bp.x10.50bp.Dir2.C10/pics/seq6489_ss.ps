%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.24261475]
[92.50000000 237.24261475]
[92.50000000 222.24261475]
[92.50000000 207.24261475]
[92.50000000 192.24261475]
[92.50000000 177.24261475]
[92.50000000 162.24261475]
[92.50000000 147.24261475]
[92.50000000 132.24261475]
[92.50000000 117.24262238]
[87.00959778 112.13327026]
[85.86685944 127.08967590]
[73.46107483 135.52154541]
[59.13384628 131.07963562]
[53.67364502 117.10872650]
[61.19202805 104.12897491]
[76.02879333 101.91455841]
[70.53839874 96.80520630]
[55.57711411 97.88227844]
[40.61583328 98.95934296]
[25.65455246 100.03641510]
[10.69327259 101.11348724]
[-4.26800871 102.19055176]
[-19.22929001 103.26762390]
[-34.19057083 104.34469604]
[-49.12658310 105.72872162]
[-64.03102875 107.41912079]
[-76.87135315 116.66231537]
[-90.38948822 110.40857697]
[-105.29393768 112.09897614]
[-120.19838715 113.78937531]
[-135.10282898 115.47977448]
[-150.00727844 117.17016602]
[-162.86604309 127.34780121]
[-178.00765991 121.04991150]
[-179.85574341 104.75522614]
[-166.50912476 95.22632599]
[-151.69767761 102.26572418]
[-136.79322815 100.57532501]
[-121.88878632 98.88492584]
[-106.98433685 97.19452667]
[-92.07988739 95.50413513]
[-80.30563354 86.38184357]
[-65.72142792 92.51467133]
[-50.81697845 90.82427216]
[-47.16159439 87.66399384]
[-41.46479797 86.80702209]
[-35.26763916 89.38341522]
[-20.30635834 88.30634308]
[-5.34507847 87.22927094]
[9.61620235 86.15220642]
[24.57748222 85.07513428]
[39.53876495 83.99806213]
[54.50004578 82.92099762]
[69.46132660 81.84392548]
[90.72230530 77.01796722]
[103.70478821 86.45772552]
[113.34660339 74.96705627]
[122.98841858 63.47639084]
[132.63023376 51.98572159]
[142.27204895 40.49505615]
[145.21549988 24.95006943]
[159.32356262 20.17385483]
[148.85775757 9.41012287]
[139.53460693 -2.35720491]
[131.44979858 -15.00737667]
[124.68627930 -28.41058159]
[119.31346893 -42.42927933]
[115.38648987 -56.91961670]
[112.94564056 -71.73289490]
[112.01597595 -86.71710968]
[112.60702515 -101.71849823]
[114.71273041 -116.58312225]
[118.31148529 -131.15844727]
[123.36634827 -145.29489136]
[129.82546997 -158.84742737]
[137.62254333 -171.67694092]
[146.67758179 -183.65180969]
[156.89764404 -194.64913940]
[168.17787170 -204.55607605]
[180.40249634 -213.27096558]
[193.44609070 -220.70439148]
[207.17480469 -226.78004456]
[221.44773865 -231.43560791]
[236.11845398 -234.62329102]
[251.03637695 -236.31037903]
[266.04846191 -236.47958374]
[281.00061035 -235.12913513]
[295.73944092 -232.27291870]
[310.11367798 -227.94023132]
[323.97586060 -222.17553711]
[337.18365479 -215.03799438]
[349.60162354 -206.60083008]
[361.10226440 -196.95063782]
[371.56759644 -186.18644714]
[380.89022827 -174.41871643]
[388.97445679 -161.76818848]
[395.73739624 -148.36468506]
[401.10958862 -134.34574890]
[405.03591919 -119.85523987]
[407.47613525 -105.04185486]
[408.40512085 -90.05759430]
[407.81341553 -75.05623627]
[405.70706177 -60.19170380]
[402.10766602 -45.61653900]
[397.05218506 -31.48030853]
[390.59246826 -17.92807007]
[382.79483032 -5.09889412]
[373.73925781 6.87557268]
[363.51870728 17.87245178]
[352.23803711 27.77889824]
[340.01303101 36.49325562]
[326.96911621 43.92609787]
[313.24014282 50.00115585]
[298.96701050 54.65608215]
[284.29614258 57.84312057]
[269.37814331 59.52956009]
[254.36605835 59.69809341]
[239.41395569 58.34699249]
[224.67524719 55.49012756]
[210.30119324 51.15680695]
[196.43930054 45.39150238]
[183.23179626 38.25337219]
[170.81422424 29.81566811]
[168.56040955 44.53876495]
[153.76271057 50.13687134]
[144.12089539 61.62753677]
[134.47908020 73.11820221]
[124.83726501 84.60887146]
[115.19544983 96.09953308]
[126.88426208 86.69891357]
[141.43832397 83.06856537]
[156.17283630 85.87818146]
[168.36975098 94.60947418]
[175.77906799 107.65178680]
[177.03402710 122.59919739]
[171.90310669 136.69435120]
[161.33280945 147.33714294]
[147.27304077 152.56427002]
[132.31741333 151.41149902]
[119.22476959 144.09147644]
[110.41031647 131.95452881]
[107.50000000 117.24262238]
[107.50000000 132.24261475]
[107.50000000 147.24261475]
[107.50000000 162.24261475]
[107.50000000 177.24261475]
[107.50000000 192.24261475]
[107.50000000 207.24261475]
[107.50000000 222.24261475]
[107.50000000 237.24261475]
[107.50000000 252.24261475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[63 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
