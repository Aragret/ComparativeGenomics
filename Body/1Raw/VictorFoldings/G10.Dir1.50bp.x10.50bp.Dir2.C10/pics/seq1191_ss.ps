%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAxxxxxxxxxxCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.37868500 443.82800293]
[111.96446228 424.61956787]
[112.27243805 409.62274170]
[112.58041382 394.62591553]
[112.88839722 379.62905884]
[113.19637299 364.63223267]
[113.50434875 349.63540649]
[113.81232452 334.63854980]
[114.12030792 319.64172363]
[114.42828369 304.64486694]
[114.73625946 289.64804077]
[95.75695801 280.25067139]
[83.95884705 262.57824707]
[82.54749298 241.30584717]
[91.96942902 222.10328674]
[109.77441406 210.12371826]
[107.62583923 195.27839661]
[105.47725677 180.43307495]
[103.17638397 165.61059570]
[100.72345734 150.81251526]
[98.27053070 136.01443481]
[88.55610657 124.72376251]
[93.93253326 109.84409332]
[85.60643005 122.32111359]
[71.59236908 127.66957092]
[57.07051849 123.91246033]
[47.40876007 112.43856049]
[46.17847443 97.48909760]
[53.83443069 84.59001160]
[67.54666901 78.50933838]
[82.24657440 81.49475098]
[92.50000000 92.44172668]
[92.50000000 77.44172668]
[92.50000000 62.44173050]
[84.76270294 48.64155579]
[92.50000000 35.91428375]
[92.50000000 20.91428566]
[91.26938629 5.96485090]
[88.81645966 -8.83322811]
[86.36353302 -23.63130760]
[83.91060638 -38.42938614]
[80.40143585 -53.01313400]
[75.85414886 -67.30726624]
[71.30685425 -81.60139465]
[66.75956726 -95.89552307]
[62.21227646 -110.18965912]
[57.66498566 -124.48378754]
[42.85288239 -121.96430969]
[27.83428574 -121.53086853]
[12.90153503 -123.19190979]
[-1.65470016 -126.91510010]
[-15.55107784 -132.62796021]
[-28.51710129 -140.21929932]
[-40.30038071 -149.54133606]
[-50.67155457 -160.41262817]
[-59.42874527 -172.62155151]
[-66.40148926 -185.93046570]
[-71.45405579 -200.08029175]
[-74.48810577 -214.79560852]
[-75.44457245 -229.78997803]
[-74.30484009 -244.77154541]
[-71.09109497 -259.44866943]
[-65.86589050 -273.53567505]
[-58.73093414 -286.75833130]
[-49.82512283 -298.85925293]
[-39.32179642 -309.60290527]
[-27.42541695 -318.78018188]
[-14.36754227 -326.21240234]
[-0.40235090 -331.75494385]
[14.19832039 -335.29986572]
[29.15026474 -336.77819824]
[44.16244125 -336.16116333]
[58.94262695 -333.46075439]
[73.20313263 -328.72955322]
[86.66635895 -322.05966187]
[99.07025146 -313.58090210]
[110.17335510 -303.45828247]
[119.75955963 -291.88888550]
[127.64225006 -279.09790039]
[133.66799927 -265.33432007]
[137.71951294 -250.86602783]
[139.71791077 -235.97467041]
[139.62431335 -220.95010376]
[137.44055176 -206.08480835]
[133.20909119 -191.66810608]
[127.01234436 -177.98065186]
[118.97090912 -165.28887939]
[109.24131775 -153.83979797]
[98.01295471 -143.85630798]
[85.50439453 -135.53273010]
[71.95911407 -129.03108215]
[76.50640869 -114.73694611]
[81.05369568 -100.44281769]
[85.60098267 -86.14868927]
[90.14827728 -71.85455322]
[94.69556427 -57.56042480]
[101.91755676 -70.70739746]
[115.83721924 -76.29694366]
[130.14595032 -71.79580688]
[138.35882568 -59.24396515]
[136.75364685 -44.33010101]
[126.05789948 -33.81339645]
[111.11906433 -32.46017838]
[98.70867920 -40.88231277]
[101.16161346 -26.08423615]
[103.61454010 -11.28615665]
[106.06746674 3.51192260]
[114.39356995 -8.96509743]
[128.40763855 -14.31355762]
[142.92947388 -10.55644512]
[152.59124756 0.91745639]
[153.82151794 15.86691761]
[146.16557312 28.76600075]
[132.45333862 34.84667206]
[117.75342560 31.86126328]
[107.50000000 20.91428566]
[107.50000000 35.91428375]
[115.23729706 48.64155579]
[107.50000000 62.44173050]
[107.50000000 77.44172668]
[107.50000000 92.44172668]
[108.73061371 107.39116669]
[118.62048340 119.74029541]
[113.06860352 133.56150818]
[115.52153778 148.35958862]
[117.97446442 163.15766907]
[122.49046326 171.17025757]
[120.32257843 178.28450012]
[122.47116089 193.12982178]
[124.61973572 207.97514343]
[133.89349365 209.43466187]
[142.59272766 212.93241882]
[150.27621460 218.28527832]
[156.55555725 225.21620178]
[161.11479187 233.36849976]
[163.72625732 242.32427979]
[164.26200867 251.62579346]
[162.70005798 260.79885864]
[159.12521362 269.37707520]
[153.72448730 276.92538452]
[146.77732849 283.06240845]
[138.64118958 287.47940063]
[129.73309326 289.95602417]
[129.42512512 304.95285034]
[129.11714172 319.94970703]
[128.80915833 334.94653320]
[128.50119019 349.94335938]
[128.19320679 364.94021606]
[127.88523102 379.93704224]
[127.57725525 394.93389893]
[127.26927948 409.93072510]
[126.96129608 424.92755127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 152]
[3 151]
[4 150]
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[10 144]
[11 143]
[16 130]
[17 129]
[18 128]
[19 126]
[20 125]
[21 124]
[23 122]
[32 121]
[33 120]
[34 119]
[36 117]
[37 116]
[38 107]
[39 106]
[40 105]
[41 104]
[42 96]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
