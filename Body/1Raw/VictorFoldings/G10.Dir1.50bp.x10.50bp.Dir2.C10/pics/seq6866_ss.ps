%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUxxxxxxxxxxAAGCUAAGAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 252.47723389]
[92.50000000 237.47723389]
[92.50000000 222.47723389]
[92.50000000 207.47723389]
[92.50000000 192.47723389]
[92.50000000 177.47723389]
[92.50000000 162.47723389]
[92.50000000 147.47723389]
[92.50000000 132.47723389]
[92.50000000 117.47723389]
[80.32816315 108.71102142]
[66.10138702 113.46483612]
[51.87460327 118.21865082]
[47.13956451 122.98172760]
[41.54662704 124.37827301]
[36.95608139 122.86090851]
[22.54386330 127.01879120]
[8.13164806 131.17668152]
[-6.28056812 135.33456421]
[-20.64875221 139.64215088]
[-34.97134781 144.09896851]
[-49.29394531 148.55578613]
[-63.61654282 153.01260376]
[-77.93914032 157.46942139]
[-88.81718445 168.95762634]
[-103.26860046 165.35127258]
[-108.11975098 180.09054565]
[-120.72759247 189.13609314]
[-136.24415588 189.00971985]
[-148.70300293 179.76002502]
[-153.31344604 164.94371033]
[-148.30268860 150.25793457]
[-135.59745789 141.34968567]
[-120.08319092 141.64437866]
[-107.72541809 151.02868652]
[-97.87182617 139.85925293]
[-82.39595795 143.14682007]
[-68.07335663 138.69000244]
[-53.75076294 134.23318481]
[-39.42816544 129.77636719]
[-25.10556793 125.31955719]
[-19.61779594 120.29660797]
[-10.43845558 120.92234802]
[3.97376060 116.76446533]
[18.38597679 112.60657501]
[32.79819107 108.44869232]
[47.12078857 103.99187469]
[61.34756851 99.23806000]
[75.57434845 94.48424530]
[84.28104401 86.20940399]
[94.20480347 84.25128937]
[101.83364868 87.48224640]
[110.34474182 75.13066864]
[118.85583496 62.77909851]
[127.36692047 50.42752457]
[135.87800598 38.07595444]
[144.38909912 25.72438049]
[132.87992859 16.08730316]
[122.32376099 5.41482258]
[112.81337738 -6.19926739]
[104.43235779 -18.65290070]
[97.25434875 -31.83662987]
[91.34244537 -45.63459778]
[86.74859619 -59.92553711]
[83.51316833 -74.58386230]
[81.66460419 -89.48075104]
[81.21914673 -104.48528290]
[82.18070221 -119.46559906]
[84.54083252 -134.29005432]
[88.27878571 -148.82835388]
[93.36172485 -162.95272827]
[99.74496460 -176.53907776]
[107.37242126 -189.46797180]
[116.17705536 -201.62580872]
[126.08148956 -212.90573120]
[136.99867249 -223.20861816]
[148.83268738 -232.44390869]
[161.47952271 -240.53045654]
[174.82801819 -247.39718628]
[188.76087952 -252.98376465]
[203.15565491 -257.24108887]
[217.88584900 -260.13171387]
[232.82200623 -261.63031006]
[247.83287048 -261.72363281]
[262.78649902 -260.41088867]
[277.55148315 -257.70361328]
[291.99810791 -253.62562561]
[305.99935913 -248.21272278]
[319.43218994 -241.51251221]
[332.17858887 -233.58383179]
[344.12652588 -224.49639893]
[355.17098999 -214.33006287]
[365.21490479 -203.17416382]
[374.17004395 -191.12675476]
[381.95767212 -178.29370117]
[388.50933838 -164.78778076]
[393.76751709 -150.72767639]
[397.68594360 -136.23698425]
[400.23022461 -121.44303131]
[401.37799072 -106.47583008]
[401.11914062 -91.46691895]
[399.45593262 -76.54819489]
[396.40304565 -61.85077286]
[391.98724365 -47.50381470]
[386.24734497 -33.63340378]
[379.23382568 -20.36144066]
[371.00830078 -7.80455875]
[361.64306641 3.92688799]
[351.22042847 14.72980118]
[339.83197021 24.50924301]
[327.57778931 33.17926788]
[314.56555176 40.66368103]
[300.90963745 46.89671326]
[286.73007202 51.82357788]
[272.15142822 55.40098572]
[257.30184937 57.59749222]
[242.31185913 58.39379501]
[227.31314087 57.78289795]
[212.43754578 55.77016830]
[197.81579590 52.37329483]
[183.57638550 47.62212753]
[169.84445190 41.55842209]
[156.74067688 34.23546982]
[148.22958374 46.58704376]
[139.71849060 58.93861771]
[131.20739746 71.29019165]
[122.69631195 83.64176178]
[114.18522644 95.99333191]
[125.41558075 86.04953766]
[139.78132629 81.73381042]
[154.63240051 83.84226990]
[167.22923279 91.98596954]
[175.24807739 104.66264343]
[177.20971680 119.53382111]
[172.75227356 133.85623169]
[162.69801331 144.98779297]
[148.90165710 150.87510681]
[133.90818787 150.43209839]
[120.48348999 143.74052429]
[111.10398102 132.03475952]
[107.50000000 117.47723389]
[107.50000000 132.47723389]
[107.50000000 147.47723389]
[107.50000000 162.47723389]
[107.50000000 177.47723389]
[107.50000000 192.47723389]
[107.50000000 207.47723389]
[107.50000000 222.47723389]
[107.50000000 237.47723389]
[107.50000000 252.47723389]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 49]
[12 48]
[13 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[26 35]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
[57 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
