%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUACAxxxxxxxxxxACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 296.45831299]
[92.50000000 281.45831299]
[92.50000000 266.45831299]
[92.50000000 251.45832825]
[92.50000000 236.45832825]
[92.50000000 221.45832825]
[92.50000000 206.45832825]
[92.50000000 191.45832825]
[92.50000000 176.45832825]
[92.50000000 161.45832825]
[84.76351929 160.01020813]
[77.27326965 157.59228516]
[70.15029907 154.24362183]
[63.50972366 150.01835632]
[57.45885849 144.98474121]
[52.09548950 139.22413635]
[39.42397308 147.25114441]
[26.75245857 155.27813721]
[18.62500381 171.76980591]
[1.10263717 171.87550354]
[-11.40139866 180.16098022]
[-15.98811054 195.53437805]
[-30.92057228 201.39962769]
[-44.74387741 193.25741577]
[-46.85396576 177.35372925]
[-35.63216400 165.88853455]
[-19.68687248 167.65693665]
[-7.18283749 159.37145996]
[-4.45152187 147.54766846]
[5.95132732 140.55110168]
[18.72546005 142.60662842]
[31.39697647 134.57962036]
[44.06849289 126.55262756]
[38.53144455 107.41566467]
[39.35844040 87.51092529]
[46.46386719 68.89923096]
[59.11207199 53.50749588]
[75.99353790 42.92929459]
[95.36048126 38.25981522]
[115.20776367 39.98250580]
[120.62638855 25.99542427]
[126.04501343 12.00834084]
[131.46363831 -1.97874296]
[136.88226318 -15.96582603]
[124.10331726 -23.89896774]
[113.00270081 -34.04256058]
[103.95747375 -46.05006409]
[97.27451324 -59.51165771]
[93.18012238 -73.96823120]
[91.81231689 -88.92703247]
[93.21623230 -103.87848663]
[97.34259033 -118.31352997]
[104.04945374 -131.74093628]
[113.10710144 -143.70408630]
[124.20587158 -153.79643250]
[136.96681213 -161.67532349]
[150.95452881 -167.07369995]
[165.69213867 -169.80906677]
[180.67744446 -169.78970337]
[195.40008545 -167.01774597]
[200.81871033 -181.00483704]
[188.78851318 -184.33232117]
[178.61328125 -195.75215149]
[174.87493896 -213.73159790]
[174.56695557 -228.72843933]
[174.25898743 -243.72528076]
[173.95100403 -258.72210693]
[173.64302063 -273.71896362]
[159.37059021 -278.88247681]
[147.92979431 -288.85607910]
[140.86790466 -302.29089355]
[139.13998413 -317.36996460]
[142.97972107 -332.05398560]
[151.86782837 -344.35708618]
[164.60226440 -352.61532593]
[179.46078491 -355.71188354]
[194.43391418 -353.22796631]
[207.49665833 -345.49948120]
[216.88237000 -333.57168579]
[221.32173157 -319.05764771]
[220.21434021 -303.92034912]
[213.70996094 -290.20693970]
[202.68827820 -279.77206421]
[188.63986206 -274.02691650]
[188.94784546 -259.03009033]
[189.25581360 -244.03324890]
[189.56379700 -229.03642273]
[189.87178040 -214.03958130]
[196.47937012 -210.49137878]
[203.57598877 -223.70643616]
[216.79093933 -216.60960388]
[209.69454956 -203.39497375]
[216.30213928 -199.84677124]
[228.97366333 -207.87376404]
[226.71960449 -222.93495178]
[230.79260254 -237.60908508]
[240.48699951 -249.35382080]
[254.12318420 -256.13427734]
[269.33859253 -256.77572632]
[283.49703979 -251.16700745]
[294.14553833 -240.27987671]
[299.43914795 -226.00061035]
[298.46072388 -210.80316162]
[291.37976074 -197.32057190]
[279.42312622 -187.88880920]
[264.66232300 -184.14195251]
[249.65478516 -186.72918701]
[237.00065613 -195.20225525]
[224.32913208 -187.17526245]
[214.80580139 -175.58621216]
[209.38717651 -161.59912109]
[222.13479614 -153.72903442]
[233.22212219 -143.64781189]
[242.27053833 -131.69769287]
[248.97071838 -118.28477478]
[253.09318542 -103.86521149]
[254.49612427 -88.92968750]
[253.13027954 -73.98672485]
[249.04072571 -59.54536057]
[242.36531067 -46.09782791]
[233.33009338 -34.10276031]
[222.24159241 -23.96955109]
[209.47647095 -16.04439163]
[195.46868896 -10.59843063]
[180.69477844 -7.81850958]
[165.65762329 -7.80074263]
[150.86935425 -10.54720116]
[145.45072937 3.43988204]
[140.03210449 17.42696571]
[134.61347961 31.41404915]
[129.19485474 45.40113068]
[139.97111511 52.71696091]
[148.97842407 62.12533951]
[155.81814575 73.20989227]
[160.18759155 85.48006439]
[161.89340210 98.39282227]
[160.86004639 111.37671661]
[157.13330078 123.85711670]
[150.87805176 135.28170776]
[142.37117004 145.14486694]
[131.98910522 153.01011658]
[120.19134521 158.52935791]
[107.50000000 161.45832825]
[107.50000000 176.45832825]
[107.50000000 191.45832825]
[107.50000000 206.45832825]
[107.50000000 221.45832825]
[107.50000000 236.45832825]
[107.50000000 251.45832825]
[107.50000000 266.45831299]
[107.50000000 281.45831299]
[107.50000000 296.45831299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[16 33]
[17 32]
[18 31]
[20 28]
[21 27]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
[60 111]
[61 110]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
