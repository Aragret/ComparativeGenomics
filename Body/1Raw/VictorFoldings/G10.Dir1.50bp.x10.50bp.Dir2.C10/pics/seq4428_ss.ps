%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGxxxxxxxxxxCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-58.90864563 197.42260742]
[-72.00180054 204.74171448]
[-85.09495544 212.06080627]
[-98.18811035 219.37991333]
[-111.28126526 226.69902039]
[-124.37442017 234.01812744]
[-137.46757507 241.33723450]
[-148.96937561 250.96575928]
[-158.47773743 262.56710815]
[-167.98609924 274.16845703]
[-177.49444580 285.76977539]
[-187.00280762 297.37112427]
[-196.51116943 308.97247314]
[-206.01953125 320.57382202]
[-208.14498901 336.83462524]
[-223.39172363 342.87359619]
[-236.07519531 332.47833252]
[-233.14773560 316.34259033]
[-217.62086487 311.06546021]
[-208.11250305 299.46411133]
[-198.60415649 287.86276245]
[-189.09579468 276.26141357]
[-179.58743286 264.66009521]
[-170.07907104 253.05874634]
[-160.57072449 241.45739746]
[-174.75903320 246.32482910]
[-189.75535583 246.65681458]
[-204.14517212 242.42204285]
[-216.57115173 234.01997375]
[-225.86122131 222.24310303]
[-231.13911438 208.20231628]
[-231.90695190 193.22196960]
[-228.09234619 178.71511841]
[-220.05509949 166.05010986]
[-208.55331421 156.42155457]
[-194.67190552 150.73768616]
[-179.72021484 149.53462219]
[-165.10859680 152.92584229]
[-152.21525574 160.59147644]
[-142.25637817 171.80845642]
[-136.17132568 185.51875305]
[-134.53405762 200.42913818]
[-137.49903870 215.13317871]
[-144.78668213 228.24407959]
[-131.69352722 220.92497253]
[-118.60037231 213.60586548]
[-105.50721741 206.28675842]
[-92.41406250 198.96765137]
[-79.32090759 191.64855957]
[-66.22775269 184.32945251]
[-71.87247467 172.13163757]
[-76.62353516 159.55879211]
[-80.45622253 146.67625427]
[-83.35062408 133.55102539]
[-85.29167175 120.25133514]
[-86.26928711 106.84635925]
[-86.27838898 93.40577698]
[-85.31891632 79.99948120]
[-83.39586639 66.69718170]
[-80.51923370 53.56804657]
[-76.70398712 40.68033600]
[-71.96994781 28.10106087]
[-66.34174347 15.89562798]
[-59.84863281 4.12750292]
[-52.52437973 -7.14212656]
[-44.40706253 -17.85466385]
[-35.53889084 -27.95440674]
[-25.96597672 -37.38883972]
[-15.73809433 -46.10891342]
[-4.90842247 -54.06928253]
[6.46672773 -61.22855759]
[18.32821083 -67.54951477]
[30.61435127 -72.99928284]
[43.26126862 -77.54953766]
[56.20320129 -81.17660522]
[69.37285614 -83.86163330]
[82.70176697 -85.59066010]
[96.12061310 -86.35469055]
[109.55963135 -86.14976501]
[122.94895172 -84.97693634]
[136.21893311 -82.84230804]
[149.30059814 -79.75698090]
[162.12593079 -75.73699188]
[174.62821960 -70.80324554]
[186.74249268 -64.98139954]
[198.40573120 -58.30171967]
[209.55729675 -50.79893875]
[220.13922119 -42.51206589]
[230.09646606 -33.48419571]
[239.37727356 -23.76226425]
[247.93336487 -13.39682102]
[260.19573975 -22.03593636]
[272.45809937 -30.67505264]
[284.72048950 -39.31417084]
[296.98284912 -47.95328522]
[299.43496704 -63.56618881]
[312.25787354 -72.80461121]
[327.84396362 -70.18756866]
[336.94631958 -57.26770401]
[334.16461182 -41.71014023]
[321.14923096 -32.74490738]
[305.62194824 -35.69091797]
[293.35958862 -27.05180168]
[281.09722900 -18.41268539]
[268.83486938 -9.77356911]
[256.57247925 -1.13445294]
[265.26806641 13.80492592]
[272.54229736 29.48560143]
[278.33261108 45.77271271]
[282.58926392 62.52619171]
[285.27557373 79.60195160]
[286.36849976 96.85314178]
[285.85861206 114.13139343]
[283.75030518 131.28811646]
[280.06170654 148.17575073]
[294.38430786 152.63256836]
[308.70690918 157.08938599]
[322.57965088 149.51820374]
[337.71902466 154.05418396]
[345.14309692 168.00619507]
[340.44729614 183.09675598]
[326.41757202 190.37290955]
[311.37750244 185.51783752]
[304.25009155 171.41197205]
[289.92749023 166.95515442]
[275.60488892 162.49835205]
[269.54690552 177.44007874]
[262.22036743 191.80238342]
[253.68002319 205.47781372]
[243.98983765 218.36404419]
[233.22230530 230.36463928]
[221.45796204 241.38983154]
[208.78485107 251.35711670]
[195.29779053 260.19192505]
[181.09770203 267.82812500]
[166.29081726 274.20864868]
[150.98794556 279.28567505]
[135.30355835 283.02127075]
[119.35502625 285.38745117]
[103.26168060 286.36651611]
[87.14392853 285.95117188]
[71.12236786 284.14453125]
[55.31687164 280.96005249]
[39.84570694 276.42160034]
[24.82462502 270.56314087]
[10.36602116 263.42849731]
[-3.42192507 255.07104492]
[-16.43604851 245.55331421]
[-28.57897758 234.94653320]
[-39.75985336 223.33006287]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
