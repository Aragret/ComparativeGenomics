%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGxxxxxxxxxxUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUAUUAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.49279785 247.68844604]
[92.49279785 232.68844604]
[92.49279785 217.68844604]
[92.49279785 202.68844604]
[92.49279785 187.68844604]
[92.49279785 172.68844604]
[92.49279785 157.68844604]
[92.49279785 142.68844604]
[92.49279785 127.68844604]
[92.49279785 112.68844604]
[92.58279419 111.51393127]
[92.75040436 110.36587524]
[78.96802521 116.28584290]
[65.18563843 122.20580292]
[51.40325928 128.12576294]
[47.08053589 133.26596069]
[41.62304306 135.12258911]
[36.92225266 133.99205017]
[22.90554047 139.33357239]
[9.06232166 145.10983276]
[-4.59391928 151.31524658]
[-18.25016022 157.52066040]
[-19.65915108 172.81477356]
[-28.53953552 185.34611511]
[-42.50253296 191.74378967]
[-57.79216766 190.28686523]
[-70.29560852 181.36724854]
[-76.64948273 167.38426208]
[-75.14464569 152.09927368]
[-66.18587494 139.62385559]
[-52.18304443 133.31384277]
[-36.90284348 134.86657715]
[-24.45556831 143.86441040]
[-10.79932594 137.65901184]
[2.85691500 131.45359802]
[4.43295717 128.23124695]
[7.68265724 125.63487244]
[12.28359890 124.45855713]
[17.56402779 125.31685638]
[31.58073997 119.97534180]
[45.48329544 114.34338379]
[59.26567841 108.42342377]
[73.04805756 102.50345612]
[86.83043671 96.58349609]
[97.04392242 85.59783173]
[101.94547272 71.42127228]
[106.84702301 57.24471283]
[111.74857330 43.06815720]
[116.65012360 28.89159775]
[121.55167389 14.71504021]
[118.14869690 0.10614780]
[107.48706818 -10.44514275]
[92.19620514 -7.80525303]
[78.28884125 -14.68747425]
[71.11265564 -28.44545174]
[73.42702484 -43.78896332]
[84.34204102 -54.81811142]
[99.66064453 -57.29196930]
[113.49252319 -50.25928497]
[120.51904297 -36.42427063]
[118.03836060 -21.10676956]
[128.69998169 -10.55547810]
[141.50085449 -21.28969383]
[156.58038330 -21.49861145]
[164.03529358 -34.51492310]
[165.60273743 -43.58106613]
[171.78311157 -47.72215271]
[179.50720215 -60.58055496]
[187.23129272 -73.43895721]
[194.95536804 -86.29735565]
[181.18711853 -80.34462738]
[166.19512939 -80.83498383]
[152.84529114 -87.67470551]
[143.68954468 -99.55629730]
[140.47810364 -114.20848846]
[143.82487488 -128.83036804]
[153.09007263 -140.62680054]
[166.50257874 -147.34280396]
[181.49845886 -147.69453430]
[195.21109009 -141.61476135]
[205.01918030 -130.26568604]
[209.04780579 -115.81681061]
[206.52743530 -101.03153992]
[217.18905640 -111.58283234]
[227.85067749 -122.13411713]
[238.51231384 -132.68540955]
[232.15510559 -146.44628906]
[230.89086914 -161.55183411]
[234.87228394 -176.17797852]
[243.61856079 -188.55854797]
[256.07354736 -197.19853210]
[270.73321533 -201.05459595]
[285.82739258 -199.66111755]
[299.53335571 -193.18635559]
[310.19604492 -182.41217041]
[316.52786255 -168.63960266]
[317.76425171 -153.53175354]
[313.75592041 -138.91296387]
[304.98684692 -126.54853821]
[292.51596069 -117.93152618]
[277.84918213 -114.10247803]
[262.75759888 -115.52377319]
[249.06359863 -122.02378845]
[238.40197754 -111.47249603]
[227.74034119 -100.92120361]
[217.07872009 -90.36991119]
[207.81376648 -78.57327271]
[200.08969116 -65.71487427]
[192.36560059 -52.85646820]
[184.64152527 -39.99806595]
[177.05160522 -27.06001091]
[169.59669495 -14.04370117]
[175.44528198 -2.51570964]
[173.69535828 10.88407612]
[164.30320740 21.40130615]
[150.04710388 24.93527985]
[135.72822571 19.61659050]
[130.82667542 33.79314804]
[125.92513275 47.96970749]
[121.02358246 62.14626694]
[116.12203217 76.32282257]
[111.22048187 90.49938202]
[119.06809235 77.71599579]
[130.40588379 67.89486694]
[144.17785645 61.95073318]
[159.10130310 60.43721771]
[173.78627014 63.49528885]
[186.86500549 70.84012604]
[197.11936951 81.78762817]
[203.59429932 95.31816864]
[205.68669128 110.17150879]
[203.20169067 124.96424103]
[196.37074280 138.31857300]
[185.83006287 148.99067688]
[172.56140137 155.98660278]
[157.80061340 158.65472412]
[142.92247009 156.74653625]
[129.31274414 150.43978882]
[118.23900604 140.32186890]
[110.73266602 127.33515167]
[107.49279785 112.68844604]
[107.49279785 127.68844604]
[107.49279785 142.68844604]
[107.49279785 157.68844604]
[107.49279785 172.68844604]
[107.49279785 187.68844604]
[107.49279785 202.68844604]
[107.49279785 217.68844604]
[107.49279785 232.68844604]
[107.49279785 247.68844604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 44]
[13 43]
[14 42]
[15 41]
[18 40]
[19 39]
[20 35]
[21 34]
[22 33]
[45 122]
[46 121]
[47 120]
[48 119]
[49 118]
[50 117]
[51 62]
[52 61]
[64 112]
[65 111]
[67 110]
[68 109]
[69 108]
[70 107]
[83 106]
[84 105]
[85 104]
[86 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
