%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAxxxxxxxxxxACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[130.82899475 294.65518188]
[130.82899475 279.65518188]
[130.82899475 264.65518188]
[130.82899475 249.65518188]
[130.82899475 234.65518188]
[130.82899475 219.65518188]
[130.82899475 204.65518188]
[130.82899475 189.65518188]
[130.82899475 174.65518188]
[130.82899475 159.65518188]
[123.96897125 156.62367249]
[117.90574646 170.34364319]
[104.18588257 164.28019714]
[110.24891663 150.56066895]
[103.38889313 147.52915955]
[92.29757690 157.62780762]
[81.20626068 167.72645569]
[79.02225494 183.62016296]
[65.16124725 191.69802856]
[50.25621414 185.76341248]
[45.74102402 170.36885071]
[55.07934189 157.32373047]
[71.10761261 156.63514709]
[82.19892883 146.53648376]
[93.29023743 136.43783569]
[90.33026123 129.54664612]
[75.43437958 127.78232574]
[84.41029358 115.76426697]
[81.45031738 108.87307739]
[66.49006653 109.96438599]
[51.52981567 111.05570221]
[36.56956863 112.14701080]
[21.60931969 113.23831940]
[10.07477093 124.38882446]
[-5.81552172 122.18017578]
[-13.87188625 108.30665588]
[-7.91416836 93.41084290]
[7.48738003 88.91953278]
[20.51800919 98.27807617]
[35.47826004 97.18675995]
[50.43850708 96.09545135]
[65.39875793 95.00414276]
[80.35900116 93.91282654]
[81.98442078 86.59107971]
[85.23524475 71.94757843]
[86.86065674 64.62582397]
[73.76750183 57.30672073]
[58.00093460 60.27234650]
[45.94661713 49.68589401]
[46.85158920 33.66838455]
[60.02163315 24.50708199]
[75.35382080 29.22975159]
[81.08660889 44.21356583]
[94.17976379 51.53267288]
[108.88772583 48.58718872]
[118.15267181 36.79055023]
[127.41761780 24.99390984]
[136.68257141 13.19727039]
[145.94752502 1.40063071]
[155.21246338 -10.39600945]
[153.52105713 -25.88073921]
[163.08506775 -37.71222687]
[177.85781860 -39.22930908]
[187.12277222 -51.02594757]
[196.38772583 -62.82258987]
[205.65266418 -74.61923218]
[208.09158325 -90.25131989]
[222.03770447 -95.48154449]
[231.30264282 -107.27818298]
[217.51628113 -101.36750793]
[204.08154297 -94.69609833]
[189.21371460 -92.70918274]
[174.49859619 -95.61869049]
[161.50567627 -103.11428070]
[151.62075806 -114.39650726]
[145.89816284 -128.26199341]
[144.94825745 -143.23188782]
[148.87234497 -157.70950317]
[157.25190735 -170.15069580]
[169.19317627 -179.22846985]
[183.42250061 -183.97463989]
[198.42222595 -183.88294983]
[212.59248352 -178.96319580]
[224.42189026 -169.74012756]
[232.64723206 -157.20082092]
[230.17208862 -142.40644836]
[239.43702698 -154.20307922]
[248.70198059 -165.99972534]
[257.96691895 -177.79637146]
[259.75366211 -194.09788513]
[274.87145996 -200.45274353]
[287.76843262 -190.32359314]
[285.17730713 -174.13043213]
[269.76358032 -168.53141785]
[260.49862671 -156.73477173]
[251.23367310 -144.93814087]
[241.96871948 -133.14149475]
[250.60783386 -120.87912750]
[264.83462524 -125.63294220]
[279.06140137 -130.38676453]
[282.05090332 -145.45190430]
[292.18450928 -156.99336243]
[306.73635864 -161.90655518]
[321.79205322 -158.86985779]
[333.30169678 -148.70010376]
[338.16925049 -134.13293457]
[335.08535767 -119.08683777]
[324.87960815 -107.60912323]
[310.29724121 -102.78725433]
[295.26086426 -105.91828156]
[283.81521606 -116.15998077]
[269.58843994 -111.40616608]
[255.36164856 -106.65235138]
[243.09928894 -98.01323700]
[233.83433533 -86.21659088]
[232.05810547 -71.42827606]
[217.44931030 -65.35427856]
[208.18435669 -53.55764008]
[198.91940308 -41.76100159]
[189.65446472 -29.96435928]
[191.68150330 -15.25291157]
[182.45356750 -3.15745878]
[167.00910950 -1.13106000]
[157.74415588 10.66557980]
[148.47921753 22.46221924]
[139.21426392 34.25886154]
[129.94931030 46.05550003]
[120.68436432 57.85213852]
[134.80685425 52.79690170]
[149.77514648 51.82228088]
[164.43392944 55.00350952]
[177.65173340 62.09503937]
[188.40830994 72.54950714]
[195.87342834 85.55995941]
[199.47088623 100.12218475]
[198.92297363 115.11217499]
[194.27201843 129.37290955]
[185.87699890 141.80366516]
[174.38589478 151.44494629]
[160.68565369 157.55259705]
[145.82899475 159.65518188]
[145.82899475 174.65518188]
[145.82899475 189.65518188]
[145.82899475 204.65518188]
[145.82899475 219.65518188]
[145.82899475 234.65518188]
[145.82899475 249.65518188]
[145.82899475 264.65518188]
[145.82899475 279.65518188]
[145.82899475 294.65518188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 25]
[16 24]
[17 23]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[46 54]
[47 53]
[55 128]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[63 120]
[64 119]
[65 118]
[66 117]
[68 115]
[69 114]
[86 97]
[87 96]
[88 95]
[89 94]
[98 113]
[99 112]
[100 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
