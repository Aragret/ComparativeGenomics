%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCxxxxxxxxxxCCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[137.22604370 84.94719696]
[124.61491394 93.06873322]
[112.00378418 101.19027710]
[99.56434631 109.57241821]
[87.30197906 118.21154022]
[80.47668457 132.48480225]
[65.61602783 133.48977661]
[53.35365677 142.12889099]
[46.52836609 156.40216064]
[31.66770363 157.40715027]
[19.40533638 166.04626465]
[7.14296818 174.68537903]
[-5.11940002 183.32449341]
[-17.38176918 191.96360779]
[-29.64413643 200.60272217]
[-41.90650558 209.24183655]
[-38.91611481 224.17427063]
[-42.26416016 239.03059387]
[-51.37056732 251.23687744]
[-64.65760040 258.67828369]
[-79.82319641 260.06558228]
[-94.23983002 255.15837097]
[-105.40972137 244.80688477]
[-111.39763641 230.80456543]
[-111.16611481 215.57740784]
[-104.75527954 201.76361084]
[-93.27584839 191.75648499]
[-78.71669006 187.28984070]
[-63.60028076 189.13754272]
[-50.54561996 196.97947693]
[-38.28325272 188.34036255]
[-26.02088356 179.70123291]
[-13.75851631 171.06211853]
[-1.49614811 162.42300415]
[10.76622009 153.78388977]
[23.02858734 145.14477539]
[28.97679138 131.48944092]
[44.71454239 129.86653137]
[56.97690964 121.22741699]
[62.92511368 107.57208252]
[78.66286469 105.94916534]
[90.92523193 97.31005096]
[92.98939514 92.41189575]
[97.67584229 89.04708862]
[103.88224030 88.57914734]
[116.49337006 80.45761108]
[129.10450745 72.33606720]
[121.30145264 58.09421539]
[114.56560516 43.31794739]
[108.93330383 28.08710289]
[104.43494415 12.48396015]
[101.09479523 -3.40718222]
[98.93084717 -19.50047874]
[97.95476532 -35.70899200]
[98.17178345 -51.94516373]
[99.58068848 -68.12129211]
[102.17383575 -84.15000153]
[105.93717957 -99.94471741]
[110.85034943 -115.42012787]
[116.88677979 -130.49264526]
[124.01382446 -145.08087158]
[132.19296265 -159.10601807]
[141.37995911 -172.49234009]
[151.52516174 -185.16757202]
[162.57376099 -197.06323242]
[174.46603394 -208.11511230]
[187.13771057 -218.26353455]
[200.52032471 -227.45370483]
[214.54156494 -235.63601685]
[229.12567139 -242.76629639]
[244.19384766 -248.80607605]
[259.66470337 -253.72274780]
[275.45462036 -257.48980713]
[291.47833252 -260.08691406]
[307.64926147 -261.50012207]
[323.88006592 -261.72177124]
[340.08306885 -260.75076294]
[356.17071533 -258.59231567]
[372.05615234 -255.25819397]
[387.65353394 -250.76640320]
[402.87866211 -245.14125061]
[417.64929199 -238.41314697]
[431.88565063 -230.61849976]
[445.51086426 -221.79940796]
[454.52838135 -233.78623962]
[463.54592896 -245.77307129]
[472.56344604 -257.75991821]
[468.85739136 -272.95199585]
[475.82998657 -286.94903564]
[490.18899536 -293.14202881]
[505.15447998 -288.60687256]
[513.66027832 -275.48492432]
[511.69012451 -259.97192383]
[500.17434692 -249.39268494]
[484.55026245 -248.74238586]
[475.53274536 -236.75555420]
[466.51522827 -224.76872253]
[457.49768066 -212.78187561]
[468.12054443 -203.64199829]
[478.14242554 -193.84664917]
[487.52291870 -183.43524170]
[496.22427368 -172.44970703]
[504.21139526 -160.93426514]
[511.45211792 -148.93527222]
[517.91729736 -136.50106812]
[523.58081055 -123.68168640]
[528.41992188 -110.52875519]
[532.41503906 -97.09523773]
[535.55010986 -83.43521881]
[537.81250000 -69.60371399]
[539.19305420 -55.65641403]
[539.68615723 -41.64948273]
[539.28991699 -27.63932610]
[538.00579834 -13.68236637]
[535.83898926 0.16519029]
[532.79815674 13.84757614]
[528.89562988 27.30968666]
[524.14703369 40.49730682]
[518.57147217 53.35731888]
[512.19140625 65.83792877]
[505.03250122 77.88887024]
[497.12359619 89.46160126]
[488.49645996 100.50951385]
[479.18588257 110.98809052]
[469.22930908 120.85514069]
[458.66683960 130.07089233]
[447.54098511 138.59825134]
[435.89654541 146.40283203]
[423.78039551 153.45320129]
[411.24133301 159.72094727]
[398.32983398 165.18081665]
[385.09790039 169.81080627]
[371.59878540 173.59223938]
[357.88684082 176.50988770]
[344.01733398 178.55198669]
[330.04605103 179.71026611]
[316.02929688 179.98007202]
[302.02352905 179.36027527]
[288.08508301 177.85336304]
[274.27014160 175.46539307]
[260.63436890 172.20596313]
[247.23260498 168.08816528]
[234.11888123 163.12857056]
[221.34599304 157.34713745]
[208.96539307 150.76712036]
[197.02694702 143.41500854]
[185.57875061 135.32040405]
[174.66688538 126.51587677]
[164.33534241 117.03686523]
[154.62571716 106.92153168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 42]
[5 41]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[84 98]
[85 97]
[86 96]
[87 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
