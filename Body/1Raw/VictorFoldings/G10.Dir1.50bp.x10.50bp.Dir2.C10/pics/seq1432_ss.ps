%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAxxxxxxxxxxUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 288.34185791]
[92.50000000 273.34185791]
[92.50000000 258.34185791]
[92.50000000 243.34184265]
[92.50000000 228.34184265]
[92.50000000 213.34184265]
[92.50000000 198.34184265]
[92.50000000 183.34184265]
[92.50000000 168.34184265]
[92.50000000 153.34184265]
[81.37889862 151.62376404]
[70.65824890 147.57130432]
[60.83076096 141.27952576]
[52.36621475 132.94790649]
[40.28622437 141.84025574]
[28.20623779 150.73260498]
[16.12624931 159.62495422]
[17.90671730 174.88029480]
[11.80624676 188.97567749]
[-0.53416866 198.11952209]
[-15.79501820 199.85215759]
[-29.87121010 193.70753479]
[-38.97631836 181.33851624]
[-40.66111755 166.07231140]
[-34.47240067 152.01545715]
[-22.07490730 142.94915771]
[-6.80349541 141.31222534]
[7.23389912 147.54496765]
[19.31388664 138.65261841]
[31.39387512 129.76026917]
[43.47386551 120.86791992]
[40.07088470 106.25902557]
[25.30483055 103.62016296]
[10.53877544 100.98130035]
[-4.22728062 98.34243774]
[-18.99333572 95.70356750]
[-30.04332733 102.43792725]
[-42.32104874 99.89303589]
[-49.31975555 89.97711182]
[-64.02771759 87.03163147]
[-79.38168335 92.79250336]
[-91.87413788 82.16844940]
[-88.65391541 66.08857727]
[-73.03369904 61.09449005]
[-61.08223343 72.32366943]
[-46.37427139 75.26915741]
[-30.11315155 68.74413300]
[-16.35447121 80.93751526]
[-1.58841622 83.57637787]
[13.17763901 86.21524048]
[27.94369507 88.85411072]
[42.70975113 91.49297333]
[53.48748016 67.21563721]
[73.68265533 50.69112396]
[98.69943237 45.13591766]
[123.08317566 51.32999420]
[131.33546448 38.80403137]
[139.58775330 26.27807045]
[147.84004211 13.75210762]
[139.00199890 11.37518597]
[130.54103088 5.44471169]
[123.68040466 -3.90988612]
[119.58088684 -16.17402649]
[119.22663879 -30.47607422]
[123.32238770 -45.64770126]
[124.25801849 -60.61849213]
[125.19364929 -75.58928680]
[111.04972839 -80.92228699]
[99.10713196 -90.18865967]
[90.42778015 -102.56446075]
[85.78345490 -116.94923401]
[85.58710480 -132.06388855]
[89.85620117 -146.56445312]
[98.21113586 -159.16152954]
[109.90899658 -168.73501587]
[123.90960693 -174.43362427]
[138.96806335 -175.75064087]
[153.74534607 -172.56898499]
[166.92750549 -165.17152405]
[177.34236145 -154.21606445]
[184.06385803 -140.67675781]
[186.49430847 -125.75749969]
[184.41760254 -110.78489685]
[178.01838684 -97.09031677]
[167.86570740 -85.89146423]
[154.86230469 -78.18413544]
[140.16444397 -74.65365601]
[139.22880554 -59.68286514]
[138.29318237 -44.71207047]
[151.94941711 -38.50666428]
[162.61105347 -49.05795670]
[173.27267456 -59.60924530]
[177.07514954 -75.56146240]
[192.86654663 -79.98458099]
[204.40202332 -68.32847595]
[199.81488037 -52.58394623]
[183.82395935 -48.94762039]
[173.16233826 -38.39632797]
[162.50071716 -27.84503937]
[165.31669617 -20.89376068]
[179.21925354 -26.52571678]
[193.12181091 -32.15767288]
[207.02444458 -37.78941727]
[212.65597534 -23.88668633]
[198.75375366 -18.25511742]
[184.85121155 -12.62316132]
[170.94865417 -6.99120474]
[173.76463318 -0.03992653]
[188.76380920 0.11611003]
[197.90615845 -12.42172527]
[212.68232727 -17.15926743]
[227.41059875 -12.27483654]
[236.42764282 0.35340521]
[236.26622009 15.86964130]
[226.98841858 28.30756187]
[212.16171265 32.88453293]
[197.48730469 27.84061432]
[188.60777283 15.11529827]
[173.60859680 14.95926189]
[160.36599731 22.00439644]
[152.11370850 34.53035736]
[143.86141968 47.05632019]
[135.60913086 59.58228302]
[140.42910767 64.40379333]
[144.60145569 69.79549408]
[148.05937195 75.67102814]
[150.74745178 81.93626404]
[152.62263489 88.49085999]
[153.65489197 95.22981262]
[153.82768250 102.04517365]
[153.13824463 108.82778168]
[151.59761047 115.46897125]
[149.23046875 121.86238098]
[146.07472229 127.90558624]
[142.18095398 133.50178528]
[137.61149597 138.56135559]
[132.43957520 143.00321960]
[126.74800873 146.75624084]
[120.62799072 149.76031494]
[114.17754364 151.96730042]
[107.50000000 153.34184265]
[107.50000000 168.34184265]
[107.50000000 183.34184265]
[107.50000000 198.34184265]
[107.50000000 213.34184265]
[107.50000000 228.34184265]
[107.50000000 243.34184265]
[107.50000000 258.34185791]
[107.50000000 273.34185791]
[107.50000000 288.34185791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 31]
[15 30]
[16 29]
[17 28]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[39 46]
[40 45]
[56 123]
[57 122]
[58 121]
[59 120]
[65 89]
[66 88]
[67 87]
[90 99]
[91 98]
[92 97]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
