%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUAUAAUAAUUxxxxxxxxxxAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.01027679 367.67785645]
[94.01027679 352.67785645]
[94.01027679 337.67785645]
[94.01027679 322.67785645]
[94.01027679 307.67785645]
[94.01027679 292.67785645]
[94.01027679 277.67785645]
[94.01027679 262.67785645]
[94.01027679 247.67784119]
[94.01027679 232.67784119]
[78.99471283 228.78184509]
[65.48250580 221.13912964]
[54.39095306 210.26191711]
[46.47470856 196.88227844]
[42.27446365 181.90278625]
[42.07999420 166.33566284]
[45.91019821 151.23437500]
[53.51141357 137.62234497]
[64.37422180 126.42359161]
[77.76756287 118.40000916]
[92.78797150 114.09954071]
[87.29756927 108.99018097]
[77.07868195 119.97081757]
[66.09821320 109.75174713]
[76.31676483 98.77147675]
[70.82636261 93.66212463]
[55.84612274 94.43178558]
[40.86588287 95.20144653]
[25.88564110 95.97110748]
[10.90540028 96.74076080]
[-4.07484150 97.51042175]
[-19.03612137 98.58749390]
[-33.97213364 99.97151947]
[-48.90814590 101.35554504]
[-64.12182617 108.83753967]
[-75.52298737 96.28964233]
[-66.62162018 81.86043549]
[-50.29217148 86.41953278]
[-35.35615921 85.03550720]
[-20.42014694 83.65148163]
[-16.70064545 80.56691742]
[-10.98745632 79.82709503]
[-4.84450150 82.53018188]
[10.13573933 81.76052094]
[25.11598015 80.99085999]
[40.09622192 80.22120667]
[55.07646179 79.45154572]
[70.05670166 78.68188477]
[88.43336487 80.47370911]
[98.98815918 91.42630768]
[106.88464355 78.67304993]
[114.78112793 65.91979980]
[122.67760468 53.16653824]
[110.62248993 44.22558594]
[99.35781860 34.30723572]
[88.96260071 23.48106003]
[79.50976562 11.82299709]
[71.06561279 -0.58517689]
[63.68936920 -13.65642738]
[57.43277740 -27.29906845]
[52.33972549 -41.41740417]
[48.44593811 -55.91239929]
[45.77872849 -70.68238831]
[44.35680008 -85.62376404]
[44.19013214 -100.63172150]
[45.27989197 -115.60098267]
[47.61843872 -130.42655945]
[51.18936157 -145.00445557]
[55.96761703 -159.23242188]
[61.91969299 -173.01063538]
[69.00382996 -186.24247742]
[77.17034149 -198.83511353]
[86.36194611 -210.70022583]
[96.51417542 -221.75459290]
[107.55580139 -231.92065430]
[119.40938568 -241.12712097]
[131.99179077 -249.30941772]
[145.21473694 -256.41012573]
[158.98548889 -262.37945557]
[173.20744324 -267.17553711]
[187.78085327 -270.76473999]
[202.60348511 -273.12185669]
[217.57138062 -274.23037720]
[232.57952881 -274.08251953]
[247.52267456 -272.67932129]
[262.29598999 -270.03060913]
[276.79586792 -266.15499878]
[290.92056274 -261.07965088]
[304.57104492 -254.84014893]
[317.65151978 -247.48030090]
[330.07028198 -239.05169678]
[341.74017334 -229.61347961]
[352.57937622 -219.23184204]
[362.51181030 -207.97959900]
[371.46786499 -195.93569946]
[379.38470459 -183.18460083]
[386.20678711 -169.81576538]
[391.88623047 -155.92294312]
[396.38323975 -141.60360718]
[399.66625977 -126.95819092]
[401.71224976 -112.08941650]
[402.50686646 -97.10158539]
[402.04455566 -82.09982300]
[400.32852173 -67.18936157]
[397.37081909 -52.47479248]
[393.19223022 -38.05932617]
[387.82199097 -24.04407501]
[381.29782104 -10.52735043]
[373.66549683 2.39603591]
[364.97851562 14.63543415]
[355.29782104 26.10499382]
[344.69131470 36.72425842]
[333.23342896 46.41874695]
[321.00448608 55.12045670]
[308.09030151 62.76834488]
[294.58142090 69.30876923]
[280.57266235 74.69586182]
[266.16223145 78.89182281]
[251.45123291 81.86721802]
[236.54284668 83.60118866]
[221.54165649 84.08157349]
[206.55287170 83.30498505]
[191.68165588 81.27688599]
[177.03228760 78.01149750]
[162.70755005 73.53173065]
[148.80790710 67.86899567]
[135.43086243 61.06302261]
[127.53438568 73.81627655]
[119.63790131 86.56953430]
[111.74141693 99.32279205]
[107.78480530 113.79155731]
[121.93965912 117.08473969]
[134.88066101 123.67716217]
[145.85214233 133.17877197]
[154.21470642 145.02981567]
[159.48242188 158.53372192]
[161.35107422 172.89819336]
[159.71578979 187.28155518]
[154.67683411 200.84216309]
[146.53350830 212.78759766]
[135.76638794 222.42098999]
[123.00894165 229.18168640]
[109.01027679 232.67784119]
[109.01027679 247.67784119]
[109.01027679 262.67785645]
[109.01027679 277.67785645]
[109.01027679 292.67785645]
[109.01027679 307.67785645]
[109.01027679 322.67785645]
[109.01027679 337.67785645]
[109.01027679 352.67785645]
[109.01027679 367.67785645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 131]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 40]
[33 39]
[34 38]
[50 130]
[51 129]
[52 128]
[53 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
