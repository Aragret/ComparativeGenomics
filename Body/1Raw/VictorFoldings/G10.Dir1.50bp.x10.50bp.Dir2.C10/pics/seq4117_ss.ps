%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACxxxxxxxxxxGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 455.81030273]
[92.50000000 440.81030273]
[92.50000000 425.81030273]
[92.50000000 410.81030273]
[92.50000000 395.81030273]
[92.50000000 380.81030273]
[92.50000000 365.81030273]
[92.50000000 350.81030273]
[92.50000000 335.81030273]
[92.50000000 320.81030273]
[77.77018738 318.07662964]
[63.78981781 312.68136597]
[51.03553772 304.80688477]
[39.94248962 294.72009277]
[30.88946152 282.76345825]
[24.18593407 269.34329224]
[20.06152153 254.91598511]
[18.65810013 239.97250366]
[20.02492142 225.02162170]
[24.11689758 210.57264709]
[30.79607773 197.11808777]
[39.83630371 185.11679077]
[50.93086243 174.97839355]
[63.70289993 167.04924011]
[77.71820831 161.60063171]
[92.50000000 158.81948853]
[92.50000000 143.81948853]
[92.50000000 128.81948853]
[78.35186005 120.44922638]
[70.80037689 105.84764862]
[72.14665222 89.46415710]
[81.98044586 76.29117584]
[76.20417023 62.44795609]
[70.42789459 48.60473633]
[64.65162659 34.76152039]
[53.25259018 35.05945206]
[42.33848190 31.85006332]
[32.95936203 25.45924759]
[26.01234436 16.51814651]
[22.15579033 5.90086126]
[21.74695015 -5.36099529]
[24.80892754 -16.17853165]
[31.03003311 -25.51085854]
[39.79542160 -32.46524429]
[35.18985748 -46.74070740]
[30.43604279 -60.96748734]
[25.53449249 -75.14404297]
[20.63294220 -89.32060242]
[15.73139095 -103.49716187]
[10.82983971 -117.67372131]
[5.92828941 -131.85028076]
[-8.95025921 -129.62689209]
[-23.98400879 -130.17552185]
[-38.66091919 -133.47749329]
[-52.48109436 -139.42033386]
[-64.97383118 -147.80163574]
[-75.71362305 -158.33593750]
[-84.33468628 -170.66442871]
[-90.54338074 -184.36723328]
[-94.12825012 -198.97761536]
[-94.96719360 -213.99797058]
[-93.03163147 -228.91668701]
[-88.38748932 -243.22566223]
[-81.19294739 -256.43753052]
[-71.69305420 -268.10226440]
[-60.21136093 -277.82263184]
[-47.13893890 -285.26751709]
[-32.92102432 -290.18338013]
[-18.04187775 -292.40274048]
[-3.00827527 -291.85006714]
[11.66774273 -288.54412842]
[25.48631668 -282.59756470]
[37.97679138 -274.21289062]
[48.71374893 -263.67572021]
[57.33148575 -251.34489441]
[63.53649139 -237.64041138]
[67.11742401 -223.02906799]
[67.95231628 -208.00848389]
[66.01272583 -193.09028625]
[61.36473083 -178.78257751]
[54.16662979 -165.57266235]
[44.66358948 -153.91046143]
[33.17927551 -144.19319153]
[20.10484695 -136.75183105]
[25.00639725 -122.57527161]
[29.90794945 -108.39871216]
[34.80949783 -94.22215271]
[39.71105194 -80.04559326]
[44.61260223 -65.86903381]
[49.80433655 -60.54066849]
[49.46532059 -51.34627151]
[54.07088470 -37.07080841]
[72.66847229 -34.17641068]
[87.33141327 -22.24761963]
[94.00651550 -4.47673035]
[90.79568481 14.31498337]
[78.49484253 28.98524666]
[84.27111816 42.82846451]
[90.04738617 56.67168045]
[95.82366180 70.51490021]
[114.80018616 74.15880585]
[127.54519653 88.68296814]
[142.40823364 86.66062927]
[157.27128601 84.63829803]
[172.13433838 82.61596680]
[186.99737549 80.59362793]
[201.86042786 78.57129669]
[212.67700195 66.72303009]
[228.67411804 67.93622589]
[237.58015442 81.28021240]
[232.56317139 96.51863098]
[217.47175598 101.96186829]
[203.88276672 93.43434143]
[189.01971436 95.45667267]
[174.15666199 97.47901154]
[159.29362488 99.50134277]
[144.43057251 101.52368164]
[129.56753540 103.54601288]
[127.88377380 110.45505524]
[124.60996246 116.76790619]
[119.93278503 122.12458038]
[114.11895752 126.21961212]
[107.50000000 128.81948853]
[107.50000000 143.81948853]
[107.50000000 158.81948853]
[122.28179169 161.60063171]
[136.29710388 167.04924011]
[149.06913757 174.97839355]
[160.16369629 185.11679077]
[169.20391846 197.11808777]
[175.88310242 210.57264709]
[179.97508240 225.02162170]
[181.34190369 239.97250366]
[179.93847656 254.91598511]
[175.81407166 269.34329224]
[169.11053467 282.76345825]
[160.05751038 294.72009277]
[148.96446228 304.80688477]
[136.21018982 312.68136597]
[122.22981262 318.07662964]
[107.50000000 320.81030273]
[107.50000000 335.81030273]
[107.50000000 350.81030273]
[107.50000000 365.81030273]
[107.50000000 380.81030273]
[107.50000000 395.81030273]
[107.50000000 410.81030273]
[107.50000000 425.81030273]
[107.50000000 440.81030273]
[107.50000000 455.81030273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[28 123]
[32 100]
[33 99]
[34 98]
[35 97]
[44 92]
[45 91]
[46 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
