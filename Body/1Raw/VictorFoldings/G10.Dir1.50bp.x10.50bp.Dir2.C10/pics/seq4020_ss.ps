%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCxxxxxxxxxxUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[157.32667542 395.64712524]
[157.32667542 380.64712524]
[157.32667542 365.64712524]
[157.32667542 350.64712524]
[157.32667542 335.64712524]
[157.32667542 320.64712524]
[157.32667542 305.64712524]
[157.32667542 290.64712524]
[157.32667542 275.64712524]
[157.32667542 260.64712524]
[154.22836304 245.97061157]
[148.16534424 232.25054932]
[135.94389343 223.73672485]
[137.44293213 207.98669434]
[131.37991333 194.26663208]
[125.76322937 189.38827515]
[125.33679199 180.19750977]
[119.56051636 166.35429382]
[107.51882935 157.58805847]
[109.34519958 141.87261963]
[103.56892395 128.02940369]
[97.79265594 114.18618011]
[84.26846313 107.69801331]
[69.85624695 111.85590363]
[55.44403458 116.01378632]
[52.42904663 131.01940918]
[42.77694702 142.89776611]
[28.70572090 148.91932678]
[13.44882965 147.70036316]
[0.51219642 139.52099609]
[-7.13143539 126.26077271]
[-7.72561502 110.96680450]
[-1.13380444 97.15352631]
[11.12924671 87.99513245]
[26.24557877 85.59615326]
[40.74156952 90.50785828]
[51.28614426 101.60157776]
[65.69836426 97.44368744]
[80.11058044 93.28579712]
[87.19305420 92.40703583]
[93.54079437 94.04544067]
[93.22874451 79.04868317]
[92.91668701 64.05193329]
[92.60462952 49.05517578]
[92.29257202 34.05842209]
[91.98051453 19.06167030]
[83.95779419 5.42544937]
[91.42864227 -7.46003294]
[91.11659241 -22.45678711]
[90.80453491 -37.45354080]
[90.49247742 -52.45029449]
[84.28707123 -66.10653687]
[73.19575500 -76.20518494]
[57.06742096 -79.17316437]
[51.82929611 -94.71324921]
[62.86991119 -106.83911896]
[78.83163452 -103.07672882]
[83.29440308 -87.29650116]
[94.38571930 -77.19785309]
[101.54701996 -79.42626190]
[92.88256073 -91.67073059]
[101.85043335 -103.69476318]
[116.05712891 -98.88125610]
[115.86961365 -83.88307190]
[123.03091431 -86.11148071]
[126.43389130 -100.72037506]
[129.83686829 -115.32926941]
[116.24397278 -121.81365204]
[104.36310577 -131.06886292]
[94.74994659 -142.66203308]
[87.85413361 -156.05088806]
[83.99818420 -170.60925293]
[83.36245728 -185.65617371]
[85.97667694 -200.48789978]
[91.71858215 -214.41070557]
[100.31960297 -226.77340698]
[111.37746429 -236.99777222]
[124.37496948 -244.60560608]
[138.70419312 -249.24105835]
[153.69493103 -250.68733215]
[168.64605713 -248.87677002]
[182.85826111 -243.89405823]
[195.66680908 -235.97225952]
[206.47264099 -225.48187256]
[214.77033997 -212.91357422]
[220.17179871 -198.85517883]
[222.42439270 -183.96424866]
[221.42277527 -168.93724060]
[217.21376038 -154.47702026]
[209.99423218 -141.25988770]
[200.10186768 -129.90403748]
[187.99932861 -120.94062805]
[174.25270081 -114.78887177]
[159.50491333 -111.73650360]
[144.44577026 -111.92629242]
[141.04278564 -97.31739807]
[137.63980103 -82.70850372]
[125.48326111 -57.19618988]
[105.48922729 -52.76235199]
[105.80128479 -37.76559830]
[106.11334229 -22.76884270]
[106.42539978 -7.77208900]
[114.42579651 4.79146338]
[106.97727203 18.74961472]
[107.28932953 33.74636841]
[107.60137939 48.74312210]
[107.91343689 63.73987579]
[108.22549438 78.73662567]
[108.53755188 93.73338318]
[111.63587189 108.40990448]
[117.41214752 122.25312805]
[123.18841553 136.09634399]
[135.64326477 145.85275269]
[133.40373230 160.57801819]
[139.18000793 174.42123413]
[145.09997559 188.20362854]
[151.16297913 201.92367554]
[163.81809998 211.41885376]
[161.88539124 226.18754578]
[167.94841003 239.90759277]
[169.90438843 225.03567505]
[175.89790344 211.28511047]
[185.46122742 199.72903442]
[197.84802246 191.26927185]
[212.09159851 186.56605530]
[227.08039856 185.98638916]
[241.64466858 189.57554626]
[254.64779663 197.05340576]
[265.07504272 207.83639526]
[272.11260986 221.08300781]
[275.21130371 235.75946045]
[274.12927246 250.72038269]
[268.95101929 264.79821777]
[260.08059692 276.89431763]
[248.21029663 286.06469727]
[234.26646423 291.59368896]
[219.33731079 293.04980469]
[204.58790588 290.31942749]
[191.16931152 283.61560059]
[180.12872314 273.46151733]
[172.32667542 260.64712524]
[172.32667542 275.64712524]
[172.32667542 290.64712524]
[172.32667542 305.64712524]
[172.32667542 320.64712524]
[172.32667542 335.64712524]
[172.32667542 350.64712524]
[172.32667542 365.64712524]
[172.32667542 380.64712524]
[172.32667542 395.64712524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 120]
[12 119]
[14 117]
[15 116]
[17 115]
[18 114]
[20 112]
[21 111]
[22 110]
[23 39]
[24 38]
[25 37]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[46 104]
[48 102]
[49 101]
[50 100]
[51 99]
[52 59]
[53 58]
[65 97]
[66 96]
[67 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
