%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACxxxxxxxxxxCCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 277.89743042]
[92.50000000 262.89743042]
[92.50000000 247.89741516]
[92.50000000 232.89741516]
[92.50000000 217.89741516]
[92.50000000 202.89741516]
[92.50000000 187.89741516]
[92.50000000 172.89741516]
[92.50000000 157.89741516]
[92.50000000 142.89741516]
[79.82054901 138.59051514]
[69.04916382 130.63468933]
[61.20434189 119.78220367]
[57.02784348 107.05919647]
[42.02863312 106.90520477]
[30.78424644 117.68488312]
[15.57510853 117.31504059]
[5.36762524 106.52880096]
[-9.63158417 106.37480927]
[-24.63079453 106.22080994]
[-39.63000488 106.06681061]
[-54.62921143 105.91281891]
[-69.62842560 105.75881958]
[-84.62763214 105.60482025]
[-94.49642944 119.30544281]
[-110.42185211 124.39557648]
[-126.09349060 119.06533813]
[-135.42405701 105.59349060]
[-150.42326355 105.74748230]
[-165.42247009 105.90148163]
[-170.73225403 120.12015533]
[-180.82278442 131.45796204]
[-194.32937622 138.38154602]
[-209.42541504 139.95457458]
[-224.06924438 135.96427917]
[-236.28044128 126.95032501]
[-244.40751648 114.13178253]
[-247.35136414 99.24224854]
[-244.71385193 84.29541779]
[-236.85166931 71.31271362]
[-224.82812500 62.04994202]
[-210.26930237 57.75982666]
[-195.14416504 59.02256393]
[-181.49824524 65.66738129]
[-171.17707825 76.79561615]
[-165.57647705 90.90227509]
[-150.57727051 90.74827576]
[-135.57804871 90.59427643]
[-128.86184692 79.01651001]
[-117.20048523 72.22832489]
[-103.59938812 72.10344696]
[-91.62590790 78.78199768]
[-84.47363281 90.60561371]
[-69.47442627 90.75961304]
[-54.47521591 90.91360474]
[-39.47600555 91.06760406]
[-24.47679710 91.22160339]
[-9.47758770 91.37559509]
[5.52162218 91.52959442]
[15.94841480 80.95520782]
[31.16193962 80.89772034]
[42.18262863 91.90599060]
[57.18183899 92.05998993]
[67.20124054 71.35248566]
[86.37291718 58.63888931]
[109.34715271 57.46684265]
[129.71311951 68.16339874]
[141.68338013 59.12387848]
[153.65364075 50.08436203]
[138.70512390 51.32603836]
[124.20877075 47.47170258]
[111.85092926 38.96971893]
[103.06915283 26.80911064]
[98.88500977 12.40449429]
[99.78524017 -2.56846762]
[105.66511536 -16.36800003]
[115.84064484 -27.38882637]
[129.12812805 -34.34891891]
[143.98184204 -36.43862152]
[158.67391968 -33.41484451]
[171.49522400 -25.62933731]
[180.95428467 -13.98777103]
[185.95075989 0.15561017]
[185.90341187 15.15553570]
[180.81774902 29.26709175]
[171.28669739 40.84757233]
[185.53338623 36.15377045]
[199.78007507 31.45996857]
[212.44113159 15.82584858]
[231.18408203 20.43006897]
[245.22605896 15.15532780]
[259.26803589 9.88058662]
[273.31002808 4.60584450]
[287.35198975 -0.66889691]
[285.71685791 -15.66146755]
[287.86242676 -30.58954239]
[293.65380859 -44.51472855]
[302.72692871 -56.56167603]
[314.51150513 -65.97310638]
[328.26669312 -72.15740967]
[343.12783813 -74.72583008]
[358.16079712 -73.51691437]
[372.42053223 -68.60666656]
[385.01071167 -60.30374146]
[395.13986206 -49.13006592]
[402.17126465 -35.78802872]
[405.66296387 -21.11632538]
[405.39541626 -6.03722525]
[401.38546753 8.50138283]
[393.88519287 21.58559227]
[383.36602783 32.39291382]
[370.48925781 40.24399948]
[356.06430054 44.64531326]
[340.99795532 45.32019043]
[326.23724365 42.22620392]
[312.71008301 35.55784988]
[301.26681519 25.73430252]
[292.62673950 13.37307930]
[278.58474731 18.64782143]
[264.54278564 23.92256355]
[250.50080872 29.19730377]
[236.45883179 34.47204590]
[233.05502319 44.18653488]
[224.67044067 50.53009796]
[213.95657349 51.19137573]
[204.47387695 45.70666122]
[190.22718811 50.40046310]
[175.98049927 55.09426117]
[162.69316101 62.05461884]
[150.72290039 71.09413910]
[138.75263977 80.13365936]
[141.36799622 86.39382935]
[142.97927856 92.98425293]
[143.54737854 99.74495697]
[143.05850220 106.51184845]
[141.52452087 113.12068939]
[138.98268127 119.41106415]
[135.49465942 125.23030853]
[131.14511108 130.43716431]
[126.03962708 134.90525818]
[120.30210876 138.52613831]
[114.07183075 141.21191406]
[107.50000000 142.89741516]
[107.50000000 157.89741516]
[107.50000000 172.89741516]
[107.50000000 187.89741516]
[107.50000000 202.89741516]
[107.50000000 217.89741516]
[107.50000000 232.89741516]
[107.50000000 247.89741516]
[107.50000000 262.89743042]
[107.50000000 277.89743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[14 63]
[15 62]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[28 48]
[29 47]
[30 46]
[67 131]
[68 130]
[69 129]
[86 128]
[87 127]
[88 126]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
