%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUxxxxxxxxxxCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[87.72782898 423.65933228]
[87.72782898 408.65933228]
[87.72782898 393.65933228]
[87.72782898 378.65933228]
[87.72782898 363.65933228]
[87.72782898 348.65933228]
[87.72782898 333.65933228]
[87.72782898 318.65933228]
[87.72782898 303.65933228]
[87.72782898 288.65933228]
[73.89034271 285.81866455]
[60.87804794 280.30761719]
[49.20096588 272.33993530]
[39.31721878 262.22576904]
[31.61506844 250.35952759]
[26.39764214 237.20443726]
[23.87101555 223.27459717]
[24.13607979 209.11476135]
[27.18449593 195.27911377]
[32.89896011 182.30953979]
[41.05770493 170.71443176]
[51.34310913 160.94873047]
[63.35406876 153.39607239]
[76.62162018 148.35377502]
[90.62726593 146.02107239]
[91.23515320 131.03340149]
[82.78147125 127.26566315]
[75.74614716 121.25194550]
[70.70872498 113.48760986]
[68.08415222 104.61223602]
[53.14649582 103.24602509]
[38.20884323 101.87980652]
[23.27119255 100.51358795]
[8.33353996 99.14736938]
[0.93483561 112.45823669]
[-11.24213219 121.60379791]
[-26.08763123 124.99953461]
[-41.02958679 122.05712128]
[-53.47921753 113.28634644]
[-61.27954865 100.20678711]
[-63.07912827 85.08457184]
[-58.56616211 70.53971100]
[-48.52255249 59.09218597]
[-34.68841553 52.72535324]
[-19.46059990 52.54230499]
[-5.47741508 58.57475281]
[4.83846664 69.77754211]
[9.69975662 84.20971680]
[24.63740921 85.57593536]
[39.57506180 86.94215393]
[54.51271439 88.30837250]
[69.45036316 89.67458344]
[82.22138977 70.10410309]
[106.38195801 63.23153687]
[106.07795715 48.23461914]
[105.77394867 33.23769760]
[103.31340790 29.49800110]
[102.31010437 25.56471062]
[102.64086914 21.93109322]
[104.03166962 18.99666977]
[106.10259247 17.02526093]
[107.01410675 2.05298233]
[107.92562103 -12.91929626]
[108.83713531 -27.89157677]
[106.22380066 -36.70700073]
[109.92187500 -43.15710449]
[111.13665009 -58.10783386]
[112.35141754 -73.05856323]
[113.56618500 -88.00929260]
[114.78095245 -102.96002197]
[100.81223297 -108.76779175]
[89.32321930 -118.60942078]
[81.43946838 -131.52072144]
[77.93335724 -146.23678589]
[79.14839172 -161.31587219]
[84.96551514 -175.28068542]
[94.81483459 -186.76310730]
[107.73141479 -194.63819885]
[122.44982147 -198.13444519]
[137.52809143 -196.90931702]
[151.48901367 -191.08283997]
[162.96482849 -181.22583008]
[170.83126831 -168.30397034]
[174.31765747 -153.58322144]
[173.08241272 -138.50578308]
[167.24658203 -124.54876709]
[157.38188171 -113.07955170]
[144.45475769 -105.22177124]
[129.73168945 -101.74525452]
[128.51692200 -86.79452515]
[127.30214691 -71.84379578]
[126.08737946 -56.89306641]
[124.87261200 -41.94233704]
[123.80941010 -26.98006248]
[122.89790344 -12.00778294]
[121.98638916 2.96449590]
[121.07487488 17.93677521]
[120.77086639 32.93369293]
[121.07487488 47.93061447]
[121.37887573 62.92753220]
[132.85867310 72.58227539]
[147.68569946 70.31085968]
[162.51272583 68.03944397]
[177.29067993 65.46799469]
[192.01347351 62.59757233]
[206.73626709 59.72714615]
[221.45906067 56.85672379]
[236.18185425 53.98629761]
[244.80314636 40.74058914]
[260.28253174 37.55241776]
[273.43634033 46.31327438]
[276.46066284 61.82549286]
[267.56124878 74.88595581]
[252.01791382 77.74611664]
[239.05227661 68.70909119]
[224.32948303 71.57952118]
[209.60668945 74.44994354]
[194.88389587 77.32036591]
[180.16110229 80.19078827]
[176.76997375 83.62937927]
[171.16320801 84.93698120]
[164.78414917 82.86647034]
[149.95712280 85.13788605]
[135.13009644 87.40930176]
[136.41708374 96.40792084]
[135.47991943 105.27163696]
[132.46136475 113.46965790]
[127.62621307 120.53218079]
[121.34037018 126.07723999]
[114.04431152 129.83113098]
[106.22283173 131.64128113]
[105.61494446 146.62895203]
[121.01544952 150.69758606]
[135.13331604 158.05976868]
[147.27449036 168.35023499]
[156.84288025 181.05986023]
[163.36953735 195.56083679]
[166.53565979 211.13766479]
[166.18820190 227.02250671]
[162.34725952 242.43298340]
[155.20486450 256.61074829]
[145.11547852 268.85876465]
[132.57836914 278.57565308]
[118.21286011 285.28509521]
[102.72782898 288.65933228]
[102.72782898 303.65933228]
[102.72782898 318.65933228]
[102.72782898 333.65933228]
[102.72782898 348.65933228]
[102.72782898 363.65933228]
[102.72782898 378.65933228]
[102.72782898 393.65933228]
[102.72782898 408.65933228]
[102.72782898 423.65933228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[25 132]
[26 131]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[54 100]
[55 99]
[56 98]
[61 97]
[62 96]
[63 95]
[64 94]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[101 124]
[102 123]
[103 122]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
