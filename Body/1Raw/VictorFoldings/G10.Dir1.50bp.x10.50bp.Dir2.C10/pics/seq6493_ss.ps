%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.59540558 255.08335876]
[105.59540558 240.08335876]
[105.59540558 225.08335876]
[105.59540558 210.08335876]
[105.59540558 195.08335876]
[105.59540558 180.08335876]
[105.59540558 165.08335876]
[105.59540558 150.08335876]
[105.59540558 135.08335876]
[105.59540558 120.08336639]
[92.73699951 112.35927582]
[79.49441528 119.40441132]
[66.25183105 126.44954681]
[60.09607697 133.28756714]
[52.65965271 133.50024414]
[39.27336884 140.26835632]
[25.88708496 147.03646851]
[23.30009270 162.22244263]
[12.39464092 172.84904480]
[-2.50084281 174.99113464]
[-15.64412117 168.03468323]
[-29.03040695 174.80279541]
[-31.37259483 190.14208984]
[-42.30758667 201.15142822]
[-57.63064957 203.59750366]
[-71.44976044 196.53974915]
[-78.45117950 182.69201660]
[-75.94272614 167.37904358]
[-64.88895416 156.48896790]
[-49.54025269 154.20925903]
[-35.79852295 161.41651917]
[-22.41223717 154.64839172]
[-20.22285080 139.93974304]
[-9.66736317 129.21380615]
[5.35558510 126.73097992]
[19.11896896 133.65019226]
[32.50525284 126.88208008]
[45.89154053 120.11396027]
[59.20669556 113.20696259]
[72.44927979 106.16182709]
[85.69186401 99.11669159]
[95.55758667 87.81768799]
[100.75300598 73.74617004]
[105.94841766 59.67464828]
[105.99216461 50.47410965]
[111.40106201 45.36632156]
[116.88809204 31.40593147]
[117.12323761 22.20829201]
[122.63722229 17.21413422]
[128.41349792 3.37091637]
[134.18977356 -10.47230148]
[139.96603394 -24.31551933]
[145.74230957 -38.15873718]
[151.51858521 -52.00195312]
[139.03208923 -64.06343079]
[138.16900635 -85.43860626]
[128.66064453 -97.03994751]
[113.94399261 -105.45758057]
[117.95867920 -121.92932892]
[134.89808655 -122.63137054]
[140.26197815 -106.54830933]
[149.77033997 -94.94696808]
[157.26385498 -95.25895691]
[164.21670532 -108.55022430]
[172.25086975 -95.88293457]
[179.74436951 -96.19492340]
[188.25546265 -108.54649353]
[196.76655579 -120.89807129]
[182.75074768 -115.55419159]
[167.76736450 -116.26000977]
[154.31596375 -122.89778137]
[144.64056396 -134.36018372]
[140.35520935 -148.73501587]
[142.17481995 -163.62423706]
[149.79583740 -176.54400635]
[161.94688416 -185.33898926]
[176.60092163 -188.54200745]
[191.31330872 -185.61871338]
[203.62969971 -177.05679321]
[211.49543762 -164.28454590]
[213.59834290 -149.43269348]
[209.58825684 -134.98010254]
[221.09005737 -144.60862732]
[232.59185791 -154.23715210]
[244.09365845 -163.86567688]
[255.59545898 -173.49420166]
[267.09725952 -183.12272644]
[278.59906006 -192.75125122]
[273.40774536 -206.99295044]
[273.40353394 -222.15130615]
[278.58697510 -236.39587402]
[288.33209229 -248.00656128]
[301.46218872 -255.58132935]
[316.39166260 -258.20547485]
[331.31777954 -255.56210327]
[344.43807983 -247.97044373]
[354.16824341 -236.34721375]
[359.33331299 -222.09597778]
[359.30960083 -206.93763733]
[354.09991455 -192.70263672]
[344.33340454 -181.10992432]
[331.18939209 -173.55937195]
[316.25509644 -170.96275330]
[301.33389282 -173.63362122]
[288.22760010 -181.24945068]
[276.72579956 -171.62092590]
[265.22399902 -161.99240112]
[253.72218323 -152.36387634]
[242.22038269 -142.73535156]
[230.71858215 -133.10681152]
[219.21678162 -123.47829437]
[209.11813354 -112.38697815]
[200.60704041 -100.03540802]
[192.09594727 -87.68383026]
[190.13816833 -54.93018341]
[165.36180115 -46.22568130]
[159.58552551 -32.38246536]
[153.80924988 -18.53924751]
[148.03298950 -4.69602919]
[142.25671387 9.14718914]
[136.48043823 22.99040604]
[130.84848022 36.89296341]
[125.36145020 50.85335159]
[120.01994324 64.87006378]
[114.82452393 78.94158173]
[109.62910461 93.01310730]
[120.93476105 83.15499878]
[131.03204346 72.06243134]
[144.50949097 65.47773743]
[159.46551514 64.32997894]
[173.78988647 68.78111267]
[185.46148682 78.20308685]
[192.83352661 91.26651001]
[194.86581421 106.12820435]
[191.27163696 120.69123077]
[182.55810547 132.90083313]
[169.95463562 141.03427124]
[155.23956299 143.94396973]
[140.48907471 141.21937561]
[127.78678894 133.24710083]
[120.59540558 120.08336639]
[120.59540558 135.08335876]
[120.59540558 150.08335876]
[120.59540558 165.08335876]
[120.59540558 180.08335876]
[120.59540558 195.08335876]
[120.59540558 210.08335876]
[120.59540558 225.08335876]
[120.59540558 240.08335876]
[120.59540558 255.08335876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 41]
[12 40]
[13 39]
[15 38]
[16 37]
[17 36]
[21 32]
[22 31]
[42 126]
[43 125]
[44 124]
[46 123]
[47 122]
[49 121]
[50 120]
[51 119]
[52 118]
[53 117]
[54 116]
[56 62]
[57 61]
[66 114]
[67 113]
[68 112]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
