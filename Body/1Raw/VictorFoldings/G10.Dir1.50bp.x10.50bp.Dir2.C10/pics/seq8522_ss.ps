%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCxxxxxxxxxxAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.08337402 272.04779053]
[155.77539062 257.05093384]
[155.46742249 242.05410767]
[155.15943909 227.05726624]
[154.85145569 212.06042480]
[154.54348755 197.06358337]
[154.23550415 182.06675720]
[153.92752075 167.06991577]
[153.61955261 152.07307434]
[149.21925354 137.73301697]
[141.06259155 125.14457703]
[132.90591431 112.55613708]
[101.88080597 130.56248474]
[77.01010132 112.18730164]
[62.29457474 115.09477234]
[47.57905197 118.00224304]
[32.86352921 120.90972137]
[24.99381447 125.67032623]
[17.81618500 123.72255707]
[3.04406786 126.32727814]
[-11.72804832 128.93200684]
[-26.50016403 131.53672791]
[-41.27228165 134.14144897]
[-55.98780441 137.04891968]
[-70.64052582 140.25791931]
[-85.29325104 143.46690369]
[-88.32636261 158.39071655]
[-97.17259216 170.78684998]
[-110.29927826 178.50761414]
[-125.43214417 180.21530151]
[-139.94932556 175.61408997]
[-151.33564758 165.50114441]
[-157.61834717 151.62860107]
[-157.70890808 136.39994812]
[-151.59164429 122.45365906]
[-140.32641602 112.20600128]
[-125.86497498 107.43245697]
[-110.71286774 108.96005249]
[-97.49528503 116.52413940]
[-88.50225067 128.81417847]
[-73.84952545 125.60518646]
[-59.19680023 122.39619446]
[-55.88454819 118.87792969]
[-50.30557632 117.44161987]
[-43.87700272 119.36933136]
[-29.10488701 116.76460266]
[-14.33277130 114.15988159]
[0.43934518 111.55516052]
[15.21146107 108.95043945]
[29.95605850 106.19419861]
[44.67158127 103.28672028]
[59.38710403 100.37924957]
[74.10262299 97.47177887]
[75.33016968 87.05387878]
[80.83085632 77.31401062]
[90.20983124 70.01766205]
[102.34597778 66.70235443]
[115.51881409 68.38319397]
[115.51881409 53.38319397]
[115.51881409 38.38319397]
[115.51881409 23.38319206]
[115.51881409 8.38319206]
[115.51881409 -6.61680746]
[100.83022308 -9.96242809]
[87.25460815 -16.49315453]
[75.47290802 -25.88140869]
[66.07609558 -37.65628052]
[59.53549957 -51.22714615]
[56.17920303 -65.91329956]
[56.17555237 -80.97808075]
[59.52473450 -95.66585541]
[66.05874634 -109.23989105]
[75.44985962 -121.01931000]
[87.22700500 -130.41326904]
[100.79945374 -136.95057678]
[115.48641968 -140.30331421]
[130.55120850 -140.30331421]
[145.23815918 -136.95057678]
[158.81062317 -130.41326904]
[170.58776855 -121.01931000]
[179.97886658 -109.23989105]
[186.51289368 -95.66585541]
[189.86206055 -80.97808075]
[189.85841370 -65.91329956]
[186.50212097 -51.22714615]
[179.96153259 -37.65628052]
[170.56471252 -25.88140869]
[158.78302002 -16.49315453]
[145.20739746 -9.96242809]
[130.51881409 -6.61680746]
[130.51881409 8.38319206]
[130.51881409 23.38319206]
[130.51881409 38.38319397]
[130.51881409 53.38319397]
[130.51881409 68.38319397]
[143.19032288 76.41018677]
[142.07124329 61.27374268]
[146.49937439 46.75630188]
[155.87586975 34.82123566]
[168.93261719 27.08266258]
[183.90382385 24.58716202]
[198.76473999 27.67222786]
[211.50555420 35.92063141]
[220.40316772 48.21684265]
[224.25425720 62.89790344]
[222.53800964 77.97831726]
[215.48649597 91.41858673]
[204.05342102 101.40101624]
[189.78497314 106.57557678]
[174.61087036 106.24243927]
[160.58326721 100.44666290]
[149.59930420 89.97208405]
[145.49435425 104.39946747]
[153.65101624 116.98790741]
[161.80769348 129.57635498]
[161.41040039 114.58161163]
[164.18626404 99.84069824]
[170.01026917 86.01749420]
[178.62011719 73.73455811]
[189.62805176 63.54508209]
[202.53829956 55.90797043]
[216.76942444 51.16717529]
[231.68048096 49.53620911]
[246.59994507 51.08852768]
[260.85586548 55.75421524]
[273.80621338 63.32314682]
[284.86770630 73.45443726]
[293.54220581 85.69179535]
[299.43902588 99.48410034]
[302.29257202 114.21017456]
[301.97436523 129.20680237]
[298.49868774 143.79856873]
[292.02212524 157.32830811]
[282.83630371 169.18669128]
[271.35498047 178.83963013]
[258.09524536 185.85238647]
[243.65422058 189.90913391]
[228.68234253 190.82717896]
[213.85388184 188.56513977]
[199.83666992 183.22492981]
[187.26202393 175.04704285]
[176.69622803 164.39978027]
[168.61639404 151.76509094]
[168.92436218 166.76193237]
[169.23234558 181.75877380]
[169.54031372 196.75561523]
[169.84829712 211.75245667]
[170.15628052 226.74928284]
[170.46424866 241.74612427]
[170.77223206 256.74295044]
[171.08021545 271.73980713]
[173.66598511 290.94824219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 115]
[11 114]
[12 113]
[14 53]
[15 52]
[16 51]
[17 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 42]
[25 41]
[26 40]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[63 90]
[96 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
