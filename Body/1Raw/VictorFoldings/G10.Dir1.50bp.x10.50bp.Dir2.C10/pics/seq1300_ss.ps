%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAAUAGCUAAGACCCxxxxxxxxxxAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 392.54760742]
[92.50000000 377.54760742]
[92.50000000 362.54760742]
[92.50000000 347.54760742]
[92.50000000 332.54760742]
[92.50000000 317.54760742]
[92.50000000 302.54760742]
[92.50000000 287.54760742]
[92.50000000 272.54760742]
[92.50000000 257.54760742]
[77.89575195 254.24337769]
[64.38652039 247.76889038]
[52.65122604 238.44592285]
[43.28042221 226.73953247]
[36.74658203 213.23483276]
[33.38029099 198.60768127]
[33.35351944 183.59098816]
[36.67081451 168.93783569]
[43.16894913 155.38385010]
[52.52492142 143.61018372]
[64.27202606 134.20932007]
[77.82312775 127.65522766]
[92.50000000 124.27952576]
[80.60238647 116.41577911]
[74.81447601 103.38152313]
[76.95930481 89.28218079]
[86.36130524 78.55865479]
[82.40470123 64.08988953]
[78.44808960 49.62112045]
[67.62309265 42.53429413]
[64.64885712 30.35540581]
[70.59603119 19.77744102]
[66.93732452 5.23048735]
[63.27861786 -9.31646633]
[59.61991119 -23.86342049]
[55.96120453 -38.41037369]
[50.49334335 -24.44246483]
[39.58778381 -14.14349461]
[25.33014107 -9.48306751]
[10.44708443 -11.35245991]
[-2.21510458 -19.39416122]
[-10.23487186 -32.07025528]
[-12.07849216 -46.95652390]
[-7.39338779 -61.20608139]
[2.92444921 -72.09378815]
[16.90180397 -77.53746033]
[31.86560822 -76.49602509]
[44.95413589 -69.16864777]
[53.66483307 -56.95538712]
[53.66483307 -71.95539093]
[53.66483307 -86.95539093]
[43.41046524 -76.00788116]
[28.71042442 -73.02311707]
[14.99845505 -79.10439301]
[7.34306669 -92.00381470]
[8.57400703 -106.95321655]
[18.23627090 -118.42669678]
[32.75828552 -122.18317413]
[46.77211380 -116.83409882]
[55.09736633 -104.35774994]
[57.55029678 -119.15583038]
[60.00322342 -133.95390320]
[62.45615005 -148.75198364]
[64.45220947 -163.61859131]
[65.98950195 -178.53959656]
[67.52679443 -193.46061707]
[69.06408691 -208.38163757]
[54.91444778 -213.60069275]
[42.50774384 -222.17533875]
[32.62386703 -233.56655884]
[25.88412666 -247.05828857]
[22.71219063 -261.80242920]
[23.30744743 -276.87213135]
[27.63247871 -291.32015991]
[35.41540909 -304.23822021]
[46.16699982 -314.81433105]
[59.21139145 -322.38366699]
[73.72860718 -326.47036743]
[88.80608368 -326.81759644]
[103.49603271 -323.40347290]
[116.87503815 -316.44265747]
[128.10208130 -306.37268066]
[136.47142029 -293.82656860]
[141.45695496 -279.59295654]
[142.74526978 -264.56661987]
[140.25541687 -249.69209290]
[134.14389038 -235.90441895]
[124.79486084 -224.07029724]
[112.79602051 -214.93362427]
[98.90163422 -209.06875610]
[83.98509979 -206.84434509]
[82.44780731 -191.92332458]
[80.91051483 -177.00230408]
[79.37322235 -162.08129883]
[81.35656738 -159.09573364]
[81.95703125 -154.98367310]
[80.65335846 -150.42230225]
[77.25423431 -146.29905701]
[74.80130005 -131.50097656]
[72.34837341 -116.70290375]
[69.89544678 -101.90482330]
[68.66483307 -86.95539093]
[68.66483307 -71.95539093]
[68.66483307 -56.95538712]
[70.50815582 -42.06908035]
[74.16686249 -27.52212715]
[77.82556915 -12.97517204]
[81.48427582 1.57178175]
[85.14298248 16.11873627]
[98.02095795 28.00158882]
[92.91685486 45.66450882]
[96.87346649 60.13327789]
[100.83007812 74.60204315]
[118.06066132 82.12381744]
[125.40513611 99.43071747]
[139.83251953 103.53565979]
[154.25990295 107.64060211]
[168.68728638 111.74555206]
[183.11468506 115.85049438]
[198.87788391 111.32794952]
[210.48658752 122.91113281]
[205.99874878 138.68424988]
[190.03106689 142.42127991]
[179.00973511 130.27787781]
[164.58235168 126.17293549]
[150.15496826 122.06798553]
[135.72758484 117.96304321]
[121.30019379 113.85810089]
[115.31385803 120.27883148]
[107.50000000 124.27952576]
[122.17687225 127.65522766]
[135.72796631 134.20932007]
[147.47508240 143.61018372]
[156.83105469 155.38385010]
[163.32917786 168.93783569]
[166.64648438 183.59098816]
[166.61970520 198.60768127]
[163.25341797 213.23483276]
[156.71957397 226.73953247]
[147.34877014 238.44592285]
[135.61347961 247.76889038]
[122.10424805 254.24337769]
[107.50000000 257.54760742]
[107.50000000 272.54760742]
[107.50000000 287.54760742]
[107.50000000 302.54760742]
[107.50000000 317.54760742]
[107.50000000 332.54760742]
[107.50000000 347.54760742]
[107.50000000 362.54760742]
[107.50000000 377.54760742]
[107.50000000 392.54760742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[23 130]
[27 113]
[28 112]
[29 111]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[49 104]
[50 103]
[51 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 94]
[65 93]
[66 92]
[67 91]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
