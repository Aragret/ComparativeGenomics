%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCxxxxxxxxxxACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCUGAGCCCUAGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.36160278]
[92.50000000 232.36160278]
[92.50000000 217.36160278]
[92.50000000 202.36160278]
[92.50000000 187.36160278]
[92.50000000 172.36160278]
[92.50000000 157.36160278]
[92.50000000 142.36160278]
[92.50000000 127.36161041]
[92.50000000 112.36161041]
[85.45486450 99.11902618]
[73.01542664 90.73687744]
[60.57598495 82.35473633]
[48.13654327 73.97259521]
[25.41094780 77.82144165]
[9.73540497 61.66009903]
[-5.26378393 61.50406265]
[-13.94222927 64.55962372]
[-20.57254219 61.18551254]
[-35.56523895 60.71747208]
[-50.55793381 60.24943161]
[-64.59281158 67.55236053]
[-77.07246399 59.42169952]
[-92.06515503 58.95365524]
[-107.05785370 58.48561478]
[-122.05055237 58.01757431]
[-137.04324341 57.54953003]
[-152.03594971 57.08148956]
[-167.01565552 57.86133194]
[-181.87870789 59.88366699]
[-196.74174500 61.90600204]
[-211.60479736 63.92833710]
[-224.23341370 74.39017487]
[-239.51170349 68.43149567]
[-241.72267151 52.18207932]
[-228.59187317 42.35792923]
[-213.62713623 49.06528854]
[-198.76408386 47.04295731]
[-183.90103149 45.02062225]
[-169.03799438 42.99828720]
[-181.25379944 34.29346085]
[-186.17193604 20.12264633]
[-181.97525024 5.72168159]
[-170.21432495 -3.58856606]
[-155.23460388 -4.36814547]
[-142.57077026 3.67098308]
[-136.90188599 17.55852127]
[-140.32247925 32.16329956]
[-151.56790161 42.08879089]
[-136.57521057 42.55683517]
[-121.58251190 43.02487564]
[-106.58981323 43.49291992]
[-91.59711456 43.96096039]
[-76.60442352 44.42900467]
[-63.64192200 37.09259796]
[-50.08989334 45.25673294]
[-35.09719849 45.72477722]
[-20.10450172 46.19281769]
[-5.10774708 46.50487518]
[9.89144135 46.66091156]
[12.25697231 41.69865417]
[15.69367027 37.40810394]
[20.01973915 34.01622391]
[25.00633240 31.70244217]
[25.00633240 16.70244217]
[25.00633240 1.70244181]
[10.61315918 -2.95499849]
[-1.63514388 -11.83386421]
[-10.53861332 -24.06429482]
[-15.22497749 -38.44807434]
[-15.23511410 -53.57603455]
[-10.56803036 -67.96607971]
[-1.68095958 -80.20843506]
[10.55543327 -89.10370636]
[24.94235229 -93.78043365]
[40.07031250 -93.78043365]
[54.45723343 -89.10370636]
[66.69362640 -80.20843506]
[75.58069611 -67.96607971]
[80.24777985 -53.57603455]
[80.23764038 -38.44807434]
[75.55127716 -24.06429482]
[66.64781189 -11.83386421]
[54.39950562 -2.95499849]
[40.00633240 1.70244181]
[40.00633240 16.70244217]
[40.00633240 31.70244217]
[50.47044373 38.05579376]
[56.55410004 48.90246964]
[56.51868820 61.53315353]
[68.95812988 69.91529846]
[81.39756775 78.29743958]
[93.83700562 86.67958069]
[120.27625275 80.55005646]
[135.13929749 78.52771759]
[150.00234985 76.50538635]
[162.63336182 66.97815704]
[176.28758240 72.92889404]
[188.91859436 63.40166855]
[202.57283020 69.35240173]
[217.43588257 67.33007050]
[232.29891968 65.30773926]
[247.16197205 63.28540039]
[250.60443115 60.40252686]
[254.40827942 58.95277405]
[258.06546021 58.86962891]
[261.14468384 59.92434692]
[263.33877563 61.76642990]
[278.31848145 60.98658371]
[290.08251953 50.07845688]
[305.92340088 52.61721039]
[313.68942261 66.65532684]
[307.42309570 81.42397308]
[291.93145752 85.59390259]
[279.09832764 75.96630096]
[264.11862183 76.74614716]
[249.18431091 78.14844513]
[234.32125854 80.17078400]
[219.45820618 82.19311523]
[204.59516907 84.21545410]
[193.02725220 93.59803009]
[178.30992126 87.79194641]
[166.74201965 97.17452240]
[152.02467346 91.36843109]
[137.16163635 93.39076996]
[122.29858398 95.41310120]
[136.31169128 100.76406097]
[150.32479858 106.11502075]
[165.29739380 107.02136993]
[178.41712952 114.29273224]
[187.12149048 126.50887299]
[189.71035767 141.28378296]
[185.67808533 155.73164368]
[175.81225586 167.03054810]
[162.03982544 172.97363281]
[147.05079651 172.40008545]
[133.77278137 165.42195129]
[124.79920959 153.40217590]
[121.88276672 138.68908691]
[114.69138336 125.52534485]
[107.50000000 112.36161041]
[107.50000000 127.36161041]
[107.50000000 142.36160278]
[107.50000000 157.36160278]
[107.50000000 172.36160278]
[107.50000000 187.36160278]
[107.50000000 202.36160278]
[107.50000000 217.36160278]
[107.50000000 232.36160278]
[107.50000000 247.36160278]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 93]
[12 92]
[13 91]
[14 90]
[16 60]
[17 59]
[19 58]
[20 57]
[21 56]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 40]
[30 39]
[31 38]
[32 37]
[64 87]
[65 86]
[66 85]
[94 126]
[95 125]
[96 124]
[98 122]
[100 120]
[101 119]
[102 118]
[103 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
