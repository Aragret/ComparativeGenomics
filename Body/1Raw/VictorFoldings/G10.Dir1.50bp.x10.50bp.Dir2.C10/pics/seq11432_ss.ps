%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACUAAACCCACACUxxxxxxxxxxGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUAAAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[100.06217194 499.67776489]
[100.06217194 484.67776489]
[100.06217194 469.67776489]
[100.06217194 454.67776489]
[100.06217194 439.67776489]
[100.06217194 424.67776489]
[100.06217194 409.67776489]
[100.06217194 394.67776489]
[100.06217194 379.67776489]
[100.06217194 364.67776489]
[84.62249756 361.73306274]
[70.03812408 355.86007690]
[56.85892868 347.27838135]
[45.58214951 336.30969238]
[36.63365936 323.36581421]
[30.35187340 308.93325806]
[26.97493172 293.55477905]
[26.63170052 277.80914307]
[29.33683205 262.28930664]
[34.99016571 247.57995605]
[43.38042450 234.23567200]
[54.19311142 222.75990295]
[67.02230072 213.58596802]
[81.38587189 207.06077576]
[96.74364471 203.43161011]
[85.64818573 193.56114197]
[84.81015015 178.37060547]
[95.23844147 166.79959106]
[94.62261963 151.81224060]
[94.00679016 136.82487488]
[93.39096832 121.83752441]
[77.11688995 109.54342651]
[76.33721161 87.47938538]
[94.22302246 71.83757782]
[88.51835632 57.96469879]
[82.81369019 44.09181976]
[77.10903168 30.21893883]
[64.70476532 20.39830780]
[67.02035522 5.68480062]
[61.03205490 -8.06802845]
[54.76264954 -21.69500732]
[48.49324799 -35.32198715]
[42.22384262 -48.94896698]
[27.86148262 -44.54372787]
[13.04010201 -42.09217834]
[-1.97579741 -41.63806152]
[-16.91823769 -43.18948746]
[-31.52055359 -46.71876526]
[-45.52215195 -52.16291046]
[-58.67315292 -59.42476654]
[-70.73886871 -68.37474060]
[-81.50396729 -78.85310364]
[-90.77632904 -90.67286682]
[-98.39048767 -103.62307739]
[-104.21054840 -117.47263336]
[-108.13265991 -131.97438049]
[-110.08680725 -146.86950684]
[-110.03813934 -161.89218140]
[-107.98751068 -176.77433777]
[-103.97151947 -191.25036621]
[-98.06183624 -205.06192017]
[-90.36392212 -217.96252441]
[-81.01515961 -229.72195435]
[-70.18239594 -240.13034058]
[-58.05894089 -249.00193787]
[-44.86116028 -256.17843628]
[-30.82457924 -261.53173828]
[-16.19970131 -264.96630859]
[-1.24752164 -266.42089844]
[13.76511955 -265.86947632]
[28.57030487 -263.32192993]
[42.90381622 -258.82373047]
[56.50985718 -252.45513916]
[69.14561462 -244.32978821]
[80.58557892 -234.59272766]
[90.62560272 -223.41769409]
[99.08650208 -211.00411987]
[105.81728363 -197.57356262]
[110.69783020 -183.36569214]
[113.64104462 -168.63404846]
[114.59439850 -153.64157104]
[113.54087830 -138.65579224]
[110.49928284 -123.94416046]
[105.52389526 -109.76921844]
[98.70351410 -96.38393402]
[90.15985107 -84.02718353]
[80.04537201 -72.91949463]
[68.54058838 -63.25909042]
[55.85081863 -55.21837234]
[62.12022400 -41.59139252]
[68.38963318 -27.96441269]
[74.65903473 -14.33743286]
[78.80445099 -11.85453892]
[81.40102386 -6.71200323]
[80.89323425 -0.01986252]
[92.88946533 8.80848598]
[90.98191071 24.51427460]
[96.68656921 38.38715744]
[102.39123535 52.26003647]
[108.09590149 66.13291931]
[121.59128571 72.68078613]
[136.01866150 68.57584381]
[150.44606018 64.47090149]
[161.60200500 53.25236893]
[175.96083069 57.21131897]
[184.99218750 43.95182800]
[201.00003052 42.88940048]
[211.70449829 54.83903885]
[208.89404297 70.63400269]
[194.72460938 78.15775299]
[180.06578064 71.63870239]
[169.94177246 82.56362152]
[154.55099487 78.89828491]
[140.12361145 83.00322723]
[125.69622803 87.10816956]
[127.31861115 96.34365845]
[125.85553741 105.21178436]
[121.72218323 112.75267029]
[115.60860443 118.23413086]
[108.37831879 121.22170258]
[108.99414825 136.20906067]
[109.60997009 151.19641113]
[110.22579956 166.18376160]
[121.56823730 176.86022949]
[121.97927094 192.06829834]
[111.73099518 202.81579590]
[125.90984344 204.82635498]
[139.51274109 209.29182434]
[152.11824036 216.07250977]
[163.33604431 224.95703125]
[172.81903076 235.66888428]
[180.27409363 247.87504578]
[185.47108459 261.19635010]
[188.25004578 275.21920776]
[188.52601624 289.50848389]
[186.29170227 303.62109375]
[181.61763000 317.11956787]
[174.64994812 329.58566284]
[165.60581970 340.63345337]
[154.76669312 349.92114258]
[142.46952820 357.16165161]
[129.09629822 362.13150024]
[115.06217194 364.67776489]
[115.06217194 379.67776489]
[115.06217194 394.67776489]
[115.06217194 409.67776489]
[115.06217194 424.67776489]
[115.06217194 439.67776489]
[115.06217194 454.67776489]
[115.06217194 469.67776489]
[115.06217194 484.67776489]
[115.06217194 499.67776489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[25 126]
[28 123]
[29 122]
[30 121]
[31 120]
[34 100]
[35 99]
[36 98]
[37 97]
[39 95]
[40 92]
[41 91]
[42 90]
[43 89]
[101 115]
[102 114]
[103 113]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
