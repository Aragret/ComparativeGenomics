%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAxxxxxxxxxxAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCUACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.91424561 518.08679199]
[121.91424561 503.08679199]
[121.91424561 488.08679199]
[121.91424561 473.08679199]
[121.91424561 458.08679199]
[121.91424561 443.08679199]
[121.91424561 428.08679199]
[121.91424561 413.08679199]
[121.91424561 398.08679199]
[121.91424561 383.08679199]
[106.83573914 380.16275024]
[92.60738373 374.36553955]
[79.77117920 365.91403198]
[68.81645966 355.12826538]
[60.16127014 342.41729736]
[54.13637161 328.26370239]
[50.97263718 313.20523071]
[50.79219818 297.81445312]
[53.60371399 282.67684937]
[59.30199051 268.36865234]
[67.67190552 255.43492126]
[78.39654541 244.36865234]
[91.06918335 235.59214783]
[105.20870972 229.44075012]
[120.27790833 226.15017700]
[119.96585083 211.15342712]
[117.78901672 196.31222534]
[113.78127289 181.85752869]
[109.77353668 167.40284729]
[99.37471008 161.14410400]
[95.94330597 149.08407593]
[101.85588837 137.57341003]
[98.14972687 123.03847504]
[94.44356537 108.50354004]
[89.52899170 102.04358673]
[90.81484222 93.62765503]
[87.15231323 89.72824097]
[85.55677032 85.25536346]
[85.89396667 81.10951996]
[87.68554688 78.00183105]
[85.20043182 63.20912552]
[82.71530914 48.41641998]
[79.30313873 44.29614639]
[77.98970032 39.73245621]
[78.58483887 35.61572266]
[80.56677246 32.62583542]
[79.00918579 17.70692253]
[77.45160675 2.78800964]
[73.42513275 -5.48479891]
[76.02013397 -12.45700455]
[74.77325439 -27.40509224]
[73.52638245 -42.35317993]
[72.27950287 -57.30126572]
[59.20437622 -60.69663239]
[47.84073257 -67.95873260]
[39.29626465 -78.36289215]
[34.39865494 -90.87899780]
[33.61541367 -104.27348328]
[37.00929260 -117.23088837]
[44.23351669 -128.48306274]
[54.56713867 -136.93330383]
[66.98699188 -141.76316833]
[66.36301422 -156.75018311]
[65.73903656 -171.73719788]
[65.11505890 -186.72421265]
[64.49108124 -201.71122742]
[63.86710739 -216.69824219]
[49.58144760 -221.89328003]
[38.37465286 -232.16343689]
[31.95567322 -245.94259644]
[31.30335808 -261.12951660]
[36.51718140 -275.40835571]
[46.80207443 -286.60162354]
[60.58966064 -293.00247192]
[75.77744293 -293.63479614]
[90.04938507 -288.40219116]
[101.22911835 -278.10260010]
[107.61182404 -264.30661011]
[108.22418213 -249.11799622]
[102.97280884 -234.85295105]
[92.65850067 -223.68678284]
[78.85412598 -217.32221985]
[79.47810364 -202.33520508]
[80.10208130 -187.34819031]
[80.72605896 -172.36117554]
[81.35003662 -157.37416077]
[81.97401428 -142.38714600]
[97.69269562 -137.06410217]
[110.20675659 -126.10846710]
[117.59381866 -111.16600037]
[118.70490265 -94.49768066]
[113.34303284 -78.63761902]
[102.29744720 -66.00778198]
[87.22759247 -58.54814148]
[88.47446442 -43.60005188]
[89.72134399 -28.65196609]
[90.96821594 -13.70387936]
[92.37052155 1.23042858]
[93.92810059 16.14934158]
[95.48567963 31.06825256]
[97.50801849 45.93130112]
[99.99313354 60.72400665]
[102.47825623 75.51671600]
[105.42373657 90.22467804]
[108.97850037 104.79737854]
[112.68466187 119.33231354]
[116.39082336 133.86724854]
[129.55288696 146.70234680]
[124.22822571 163.39509583]
[128.23596191 177.84979248]
[132.24369812 192.30447388]
[137.40562439 178.22064209]
[148.08294678 167.68522644]
[162.23458862 162.71220398]
[177.15533447 164.25219727]
[189.99291992 172.01083374]
[198.29331970 184.50495911]
[200.46983337 199.34622192]
[196.10639954 213.69754028]
[186.03713989 224.81553650]
[172.18687439 230.57489014]
[157.20321655 229.87463379]
[143.95046997 222.84864807]
[134.96260071 210.84136963]
[135.27465820 225.83811951]
[149.73477173 228.29876709]
[163.48780823 233.38623047]
[176.06114197 240.92404175]
[187.02296448 250.65156555]
[195.99714661 262.23297119]
[202.67616272 275.26885986]
[206.83155823 289.31005859]
[208.32185364 303.87307739]
[207.09727478 318.45666504]
[203.20147705 332.55926514]
[196.76997375 345.69604492]
[188.02540588 357.41571045]
[177.26985168 367.31597900]
[164.87437439 375.05737305]
[151.26626587 380.37481689]
[136.91424561 383.08679199]
[136.91424561 398.08679199]
[136.91424561 413.08679199]
[136.91424561 428.08679199]
[136.91424561 443.08679199]
[136.91424561 458.08679199]
[136.91424561 473.08679199]
[136.91424561 488.08679199]
[136.91424561 503.08679199]
[136.91424561 518.08679199]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 125]
[26 124]
[27 111]
[28 110]
[29 109]
[32 107]
[33 106]
[34 105]
[36 104]
[40 103]
[41 102]
[42 101]
[46 100]
[47 99]
[48 98]
[50 97]
[51 96]
[52 95]
[53 94]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
