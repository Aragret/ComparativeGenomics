%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAAAAAAUUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAxxxxxxxxxxUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.80233002 185.73983765]
[83.10269928 195.12699890]
[71.40307617 204.51416016]
[59.80173874 214.02252197]
[48.29993439 223.65104675]
[36.79813004 233.27957153]
[25.29632759 242.90809631]
[13.79452419 252.53662109]
[2.29272056 262.16516113]
[-9.20908260 271.79367065]
[-20.71088600 281.42221069]
[-14.84085941 295.35180664]
[-13.33910465 310.39297485]
[-16.33915520 325.20819092]
[-23.57425117 338.48016357]
[-34.40105057 349.02868652]
[-47.85684204 355.91586304]
[-62.74514771 358.52923584]
[-77.74211121 356.63647461]
[-91.51420593 350.40582275]
[-102.83683014 340.39135742]
[-110.70318604 327.48355103]
[-114.41379547 312.83013916]
[-113.63872528 297.73406982]
[-108.44688416 283.53771973]
[-99.29993439 271.50341797]
[-87.01120758 262.70123291]
[-72.67341614 257.91381836]
[-57.56146622 257.56692505]
[-43.01909637 261.69137573]
[-30.33941269 269.92041016]
[-18.83760834 260.29187012]
[-7.33580589 250.66334534]
[4.16599751 241.03482056]
[15.66780090 231.40629578]
[27.16960526 221.77777100]
[38.67140961 212.14923096]
[50.17321014 202.52070618]
[53.30351257 195.77186584]
[62.01591873 192.81452942]
[73.71553802 183.42736816]
[85.41516113 174.04020691]
[70.47736359 172.67564392]
[62.93844223 159.70780945]
[69.14381409 146.05155945]
[83.87049866 143.20115662]
[94.72327423 153.55584717]
[94.09929657 138.56883240]
[93.47531891 123.58181763]
[92.85134125 108.59480286]
[92.07149506 93.61508179]
[91.13587189 78.64429474]
[90.20024109 63.67350388]
[89.26461029 48.70270920]
[88.17330170 33.74246216]
[86.92642975 18.79437447]
[77.57708740 9.84766102]
[76.87926483 -2.67160463]
[84.66206360 -11.98478413]
[83.72643280 -26.95557594]
[72.15866852 -37.38747025]
[71.42307281 -52.58331299]
[81.43957520 -63.54712296]
[80.50394440 -78.51791382]
[79.56832123 -93.48870850]
[78.63269043 -108.45949554]
[64.15657043 -113.02090454]
[52.30820847 -122.50672150]
[44.68999100 -135.63406372]
[42.33222580 -150.62757874]
[45.55377579 -165.45950317]
[53.91895676 -178.12394714]
[66.29644775 -186.90815735]
[81.01228333 -190.62411499]
[96.07628632 -188.76930237]
[109.45116425 -181.59454346]
[119.32807159 -170.07017517]
[124.37123871 -155.75476074]
[123.89862061 -140.58436584]
[117.97413635 -126.61064148]
[107.39902496 -115.72342682]
[93.60348511 -109.39512634]
[94.53910828 -94.42433929]
[95.47473907 -79.45354462]
[96.41036987 -64.48274994]
[107.71401215 -54.85138321]
[108.87613678 -39.68220139]
[98.69722748 -27.89120483]
[99.63285828 -12.92041302]
[110.11991119 1.11602700]
[101.87451172 17.54750061]
[103.12139130 32.49558640]
[106.83563995 38.94151688]
[104.23540497 47.76708221]
[105.17103577 62.73787308]
[106.10665894 77.70866394]
[107.04228973 92.67945862]
[110.66840363 99.94136810]
[107.83835602 107.97082520]
[108.46233368 122.95783997]
[109.08631134 137.94485474]
[109.71028900 152.93186951]
[118.55804443 140.81918335]
[128.79095459 129.85160828]
[140.26211548 120.18659973]
[152.80686951 111.96289825]
[166.24511719 105.29856110]
[180.38395691 100.28926086]
[195.02041626 97.00689697]
[209.94439697 95.49858856]
[224.94165039 95.78599548]
[239.79687500 97.86499786]
[254.29682922 101.70573425]
[268.23336792 107.25308228]
[281.40640259 114.42739868]
[293.62686157 123.12570190]
[304.71929932 133.22312927]
[314.52447510 144.57470703]
[322.90164185 157.01750183]
[329.73052979 170.37287903]
[334.91314697 184.44912720]
[338.37503052 199.04415894]
[340.06652832 213.94848633]
[339.96337891 228.94813538]
[338.06698608 243.82777405]
[334.40463257 258.37380981]
[329.02890015 272.37744141]
[322.01693726 285.63760376]
[313.46939087 297.96398926]
[303.50897217 309.17959595]
[292.27868652 319.12347412]
[279.93972778 327.65286255]
[266.66925049 334.64529419]
[252.65771484 340.00039673]
[238.10629272 343.64129639]
[223.22387695 345.51574707]
[208.22409058 345.59683228]
[193.32228088 343.88336182]
[178.73236084 340.39996338]
[164.66375732 335.19662476]
[151.31846619 328.34805298]
[138.88803101 319.95257568]
[127.55090332 310.13067627]
[117.46983337 299.02337646]
[108.78955078 286.79013062]
[101.63464355 273.60650635]
[96.10783386 259.66183472]
[92.28846741 245.15621948]
[90.23136139 230.29794312]
[89.96604919 215.30029297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[4 38]
[5 37]
[6 36]
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[47 102]
[48 101]
[49 100]
[50 99]
[51 97]
[52 96]
[53 95]
[54 94]
[55 92]
[56 91]
[59 89]
[60 88]
[63 85]
[64 84]
[65 83]
[66 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
