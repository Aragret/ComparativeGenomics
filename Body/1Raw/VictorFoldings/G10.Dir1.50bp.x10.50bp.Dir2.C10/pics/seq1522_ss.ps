%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUxxxxxxxxxxCCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.88029480 376.40203857]
[135.88029480 361.40203857]
[135.88029480 346.40203857]
[135.88029480 331.40203857]
[135.88029480 316.40203857]
[135.88029480 301.40203857]
[135.88029480 286.40203857]
[135.88029480 271.40203857]
[135.88029480 256.40203857]
[135.88029480 241.40205383]
[133.24142456 226.63598633]
[128.04602051 212.56446838]
[117.16291809 207.19180298]
[112.74090576 195.45874023]
[117.67620087 183.49642944]
[112.77464294 169.31987000]
[107.87309265 155.14331055]
[102.97154236 140.96676636]
[98.06999207 126.79019928]
[93.16844177 112.61364746]
[82.50682068 102.06235504]
[68.28003693 97.30854034]
[54.05325699 92.55472565]
[39.82648087 87.80091095]
[25.59970093 83.04709625]
[16.94396782 95.41472626]
[5.16585827 104.83271027]
[-8.77476120 110.54447174]
[-23.74486732 112.09501648]
[-38.53036499 109.36719513]
[-51.93455505 102.59048462]
[-62.87497711 92.32170105]
[-70.47084808 79.39929962]
[-74.11395264 64.87487030]
[-73.51732635 49.92758179]
[-87.74410248 45.17376709]
[-94.39139557 46.13348770]
[-99.70039368 43.88719940]
[-102.45660400 39.91494370]
[-116.47332001 34.57343292]
[-130.49003601 29.23191833]
[-144.50674438 23.89040565]
[-157.42579651 32.48561478]
[-172.92825317 31.81202126]
[-185.05308533 22.12862968]
[-189.13806152 7.15890646]
[-183.61241150 -7.34098625]
[-170.60087585 -15.79554367]
[-155.10664368 -14.95381546]
[-143.08757019 -5.13946342]
[-139.16523743 9.87369347]
[-125.14852142 15.21520615]
[-111.13180542 20.55671883]
[-97.11509705 25.89823151]
[-82.99028778 30.94698715]
[-68.76351166 35.70080185]
[-60.25444794 23.39742279]
[-48.61153412 13.98074436]
[-34.77295685 8.22056580]
[-19.85695457 6.59159803]
[-5.07142210 9.23435307]
[8.38387775 15.94306850]
[19.41468048 26.18170547]
[27.12120819 39.12676239]
[30.87155724 53.73351288]
[30.35351562 68.82031250]
[44.58029556 73.57412720]
[58.80707169 78.32794189]
[73.03385162 83.08175659]
[87.26063538 87.83557129]
[73.65682220 81.51605225]
[64.77003479 69.43196869]
[62.79156876 54.56301880]
[68.20927429 40.57558060]
[79.68725586 30.91866875]
[94.39527893 27.97348404]
[108.70664215 32.46624756]
[119.09245300 43.28913498]
[122.99179077 57.77344131]
[119.44314575 72.34764099]
[109.32257080 83.41735077]
[120.62158203 73.55162811]
[131.92057800 63.68590546]
[132.76310730 46.24378586]
[145.68411255 35.00403976]
[162.40371704 36.52468109]
[173.49504089 26.42603111]
[184.58634949 16.32738113]
[195.67767334 6.22873116]
[191.26690674 -8.38318062]
[193.64131165 -23.46048164]
[202.32942200 -36.00956345]
[215.60621643 -43.53879547]
[230.83558655 -44.55324173]
[244.99372864 -38.85148621]
[255.26951599 -27.56561661]
[259.62271118 -12.93645000]
[257.18893433 2.13138366]
[248.45147705 14.64615345]
[235.14514160 22.12304306]
[219.91189575 23.07751083]
[205.77632141 17.32004738]
[194.68499756 27.41869545]
[183.59368896 37.51734543]
[172.50238037 47.61599350]
[173.70079041 60.48303223]
[167.15434265 71.85046387]
[155.06983948 77.43549347]
[141.78630066 74.98490906]
[130.48730469 84.85063171]
[119.18829346 94.71635437]
[117.58936310 100.01616669]
[114.72065735 104.08258057]
[111.11763000 106.66658020]
[107.34500122 107.71208954]
[112.24655151 121.88864899]
[117.14810181 136.06521606]
[122.04965210 150.24176025]
[126.95120239 164.41831970]
[131.85275269 178.59487915]
[146.03619385 190.29147339]
[142.11753845 207.36906433]
[147.31294250 221.44058228]
[150.37625122 206.75669861]
[157.96263123 193.81657410]
[169.27975464 183.97164917]
[183.14570618 178.25013733]
[198.11228943 177.24957275]
[212.61643982 181.07447815]
[225.14332581 189.32534790]
[234.38465881 201.14050293]
[239.37528992 215.28594971]
[239.59397888 230.28434753]
[235.01789856 244.56929016]
[226.12498474 256.64886475]
[213.84397888 265.26144409]
[199.45751953 269.50759888]
[184.46810913 268.94384766]
[170.44125366 263.62902832]
[158.84188843 254.11825562]
[150.88029480 241.40205383]
[150.88029480 256.40203857]
[150.88029480 271.40203857]
[150.88029480 286.40203857]
[150.88029480 301.40203857]
[150.88029480 316.40203857]
[150.88029480 331.40203857]
[150.88029480 346.40203857]
[150.88029480 361.40203857]
[150.88029480 376.40203857]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[15 120]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[35 56]
[36 55]
[39 54]
[40 53]
[41 52]
[42 51]
[81 111]
[82 110]
[83 109]
[86 105]
[87 104]
[88 103]
[89 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
