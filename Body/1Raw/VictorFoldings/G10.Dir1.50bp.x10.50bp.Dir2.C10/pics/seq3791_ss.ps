%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCxxxxxxxxxxUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.22437286 237.93998718]
[94.92800903 222.94291687]
[94.63165283 207.94584656]
[94.33529663 192.94877625]
[94.03894043 177.95170593]
[93.74258423 162.95463562]
[93.44622803 147.95755005]
[93.14987183 132.96047974]
[92.85350800 117.96341705]
[81.68653107 107.94850159]
[66.74578094 109.28043365]
[51.80503464 110.61237335]
[47.20273209 125.07247925]
[37.44118118 136.63774109]
[24.03168678 143.56587219]
[9.03193474 144.82881165]
[-5.26973486 140.26513672]
[-16.70343781 130.59996033]
[-23.54695892 117.32985687]
[-38.48770523 118.66179657]
[-53.42845535 119.99373627]
[-68.36920166 121.32567596]
[-83.30995178 122.65761566]
[-98.25069427 123.98954773]
[-113.03420258 134.92678833]
[-128.65797424 126.98517609]
[-143.56948853 128.61204529]
[-158.48100281 130.23890686]
[-161.79463196 145.01383972]
[-169.72824097 157.91099548]
[-181.42127991 167.53137207]
[-195.60534668 172.83143616]
[-210.74188232 173.23626709]
[-225.18899536 168.70196533]
[-237.37954712 159.72036743]
[-245.99121094 147.26573181]
[-250.08985901 132.68904114]
[-249.23089600 117.57147217]
[-243.50749207 103.55286407]
[-233.54048157 92.15384674]
[-220.41102600 84.61090851]
[-205.54328918 81.74224091]
[-190.55003357 83.85901642]
[-177.05758667 90.73162842]
[-166.52954102 101.61459351]
[-160.10787964 115.32739258]
[-145.19636536 113.70052338]
[-130.28483582 112.07366180]
[-122.43885040 102.82303619]
[-109.99160767 101.37326050]
[-99.58263397 109.04880524]
[-84.64188385 107.71686554]
[-69.70114136 106.38492584]
[-54.76039124 105.05298615]
[-39.81964493 103.72104645]
[-24.87889671 102.38911438]
[-20.49064636 88.11772156]
[-10.94692326 76.58243561]
[2.32194781 69.56090546]
[17.30856514 68.15062714]
[31.73212051 72.59750366]
[43.38551712 82.25365448]
[50.47309494 95.67163086]
[65.41384125 94.33969116]
[80.35459137 93.00775146]
[88.00035858 85.39997101]
[97.51747131 83.23857117]
[105.75262451 86.15767670]
[116.41149139 75.60359192]
[127.07035065 65.04951477]
[137.72921753 54.49543381]
[123.19476318 58.20348740]
[108.19593048 58.39033508]
[93.57360840 55.04550552]
[80.14760590 48.35652542]
[68.67063904 38.69840622]
[59.78616333 26.61262894]
[53.99227142 12.77677631]
[51.61380386 -2.03345275]
[52.78410339 -16.98773003]
[57.43756104 -31.24765015]
[65.31328583 -44.01373672]
[75.96971893 -54.57027054]
[88.80942535 -62.32539749]
[103.11254120 -66.84433746]
[118.07717896 -67.87373352]
[132.86434937 -65.35587311]
[146.64501953 -59.43191910]
[158.64657593 -50.43399811]
[168.19616699 -38.86656952]
[174.75839233 -25.37816048]
[177.96533203 -10.72498894]
[177.63722229 4.27142239]
[173.79243469 18.77030563]
[166.64654541 31.95878983]
[156.60060120 43.09707642]
[170.90263367 38.57471085]
[185.20466614 34.05234909]
[199.50671387 29.52998543]
[211.58395386 15.66220474]
[228.55265808 20.04793739]
[242.76255798 15.24388885]
[256.97244263 10.43984127]
[271.18234253 5.63579321]
[281.77758789 -6.11373425]
[296.31250000 -2.86014748]
[299.95742798 -17.85074615]
[311.14401245 -28.47448540]
[326.30264282 -31.34136963]
[340.59628296 -25.53658676]
[349.46386719 -12.91242027]
[350.07577515 2.50280333]
[342.23675537 15.79014206]
[328.44821167 22.70965385]
[313.11001587 21.05334854]
[301.11654663 11.34974766]
[291.53768921 22.75565720]
[275.98638916 19.84568787]
[261.77648926 24.64973640]
[247.56660461 29.45378494]
[233.35670471 34.25783157]
[227.69006348 44.98270416]
[215.84828186 49.08244324]
[204.02906799 43.83202362]
[189.72703552 48.35438538]
[175.42500305 52.87674713]
[161.12297058 57.39910889]
[148.28329468 65.15429688]
[137.62443542 75.70838165]
[126.96556854 86.26245880]
[116.30670166 96.81654358]
[130.72062683 92.66459656]
[143.53182983 84.86247253]
[158.19198608 81.68757629]
[173.08326721 83.49027252]
[186.56236267 90.07162476]
[197.14176941 100.70534515]
[203.65400696 114.21795654]
[205.38043213 129.11827087]
[202.13050842 143.76197815]
[194.26289368 156.53306580]
[182.64581299 166.02217102]
[168.56124878 171.18214417]
[153.56353760 171.44355774]
[139.30770874 166.77754211]
[127.36699677 157.69903564]
[119.05909729 145.20989990]
[115.30064392 130.68614197]
[107.85058594 117.66705322]
[108.14694214 132.66412354]
[108.44329834 147.66119385]
[108.73965454 162.65827942]
[109.03601074 177.65534973]
[109.33236694 192.65242004]
[109.62873077 207.64949036]
[109.92508698 222.64656067]
[110.22144318 237.64363098]
[112.79233551 256.85406494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[5 153]
[6 152]
[7 151]
[8 150]
[9 149]
[10 65]
[11 64]
[12 63]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[26 48]
[27 47]
[28 46]
[68 131]
[69 130]
[70 129]
[71 128]
[96 127]
[97 126]
[98 125]
[99 124]
[101 121]
[102 120]
[103 119]
[104 118]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
