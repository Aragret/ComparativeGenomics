%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACxxxxxxxxxxUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[60.39146805 363.67880249]
[42.41569901 360.34475708]
[24.71065521 355.78674316]
[7.35957336 350.02618408]
[-9.55597401 343.09017944]
[-25.95646095 335.01132202]
[-33.41136932 348.02761841]
[-40.86627960 361.04394531]
[-48.32118988 374.06024170]
[-55.77610016 387.07653809]
[-55.17818451 403.46478271]
[-69.21371460 411.94628906]
[-83.44413757 403.79602051]
[-83.23042297 387.39825439]
[-68.79241180 379.62164307]
[-61.33750153 366.60534668]
[-53.88259125 353.58901978]
[-46.42768097 340.57272339]
[-38.97277069 327.55639648]
[-50.30439758 320.23608398]
[-61.25127411 312.35202026]
[-71.78536987 303.92434692]
[-81.87972260 294.97463989]
[-91.50849152 285.52584839]
[-100.64702606 275.60214233]
[-109.27194214 265.22894287]
[-117.36115265 254.43275452]
[-124.89395142 243.24125671]
[-131.85105896 231.68307495]
[-138.21466064 219.78781128]
[-143.96847534 207.58590698]
[-149.09777832 195.10859680]
[-153.58941650 182.38783264]
[-157.43191528 169.45616150]
[-160.61541748 156.34669495]
[-163.13179016 143.09300232]
[-164.97459412 129.72897339]
[-166.13909912 116.28886414]
[-166.62232971 102.80705261]
[-166.42304993 89.31804657]
[-165.54177856 75.85639191]
[-163.98074341 62.45654297]
[-161.74397278 49.15279770]
[-158.83717346 35.97921371]
[-155.26780701 22.96950912]
[-151.04498291 10.15699387]
[-146.17951965 -2.42553902]
[-140.68388367 -14.74587822]
[-134.57212830 -26.77248764]
[-127.85990906 -38.47457886]
[-120.56440735 -49.82219696]
[-112.70429230 -60.78629303]
[-104.29969025 -71.33879852]
[-95.37210846 -81.45271301]
[-85.94441223 -91.10212708]
[-76.04071808 -100.26235962]
[-65.68639374 -108.90994263]
[-54.90793991 -117.02275848]
[-43.73294449 -124.58002472]
[-32.19001770 -131.56240845]
[-20.30870247 -137.95202637]
[-8.11941814 -143.73251343]
[4.34663630 -148.88909912]
[17.05754662 -153.40855408]
[29.98077774 -157.27932739]
[43.08324814 -160.49151611]
[56.33141327 -163.03688049]
[69.69136810 -164.90892029]
[83.12890625 -166.10282898]
[96.60962677 -166.61555481]
[110.09902954 -166.44578552]
[123.56258392 -165.59396362]
[136.96582031 -164.06225586]
[150.27442932 -161.85459900]
[163.45433044 -158.97662354]
[176.47181702 -155.43572998]
[189.29354858 -151.24093628]
[201.88668823 -146.40303040]
[214.21902466 -140.93435669]
[226.25897217 -134.84892273]
[237.97572327 -128.16232300]
[249.33927917 -120.89167023]
[260.32055664 -113.05555725]
[270.89141846 -104.67406464]
[281.02484131 -95.76863098]
[290.69485474 -86.36206818]
[299.87673950 -76.47844696]
[308.54693604 -66.14306641]
[316.68331909 -55.38238525]
[324.26501465 -44.22394943]
[331.27264404 -32.69632339]
[337.68823242 -20.82901955]
[343.49539185 -8.65240955]
[348.67922974 3.80233264]
[353.22647095 16.50332642]
[357.12551880 29.41805649]
[360.36636353 42.51346588]
[362.94070435 55.75603485]
[364.84197998 69.11185455]
[366.06527710 82.54675293]
[366.60748291 96.02632141]
[366.46725464 109.51605988]
[365.64486694 122.98144531]
[380.54678345 124.69413757]
[395.44866943 126.40682220]
[410.35058594 128.11950684]
[425.25247192 129.83219910]
[440.15438843 131.54489136]
[455.07330322 133.10247803]
[470.00759888 134.50477600]
[484.94192505 135.90707397]
[499.87622070 137.30938721]
[511.88592529 127.03600311]
[527.63574219 128.34706116]
[537.78155518 140.46472168]
[536.30407715 156.19978333]
[524.07983398 166.21693420]
[508.36126709 164.57316589]
[498.47390747 152.24369812]
[483.53961182 150.84138489]
[468.60531616 149.43908691]
[453.67098999 148.03678894]
[446.67218018 150.55911255]
[438.44171143 146.44679260]
[423.53979492 144.73410034]
[408.63790894 143.02142334]
[393.73599243 141.30873108]
[378.83407593 139.59603882]
[363.93218994 137.88334656]
[360.71575928 155.88053894]
[356.27365112 173.61500549]
[350.62667847 191.00338745]
[343.80142212 207.96392822]
[335.82998657 224.41690063]
[326.74981689 240.28494263]
[316.60363770 255.49345398]
[305.43911743 269.97094727]
[293.30874634 283.64932251]
[280.26956177 296.46432495]
[266.38290405 308.35565186]
[251.71398926 319.26745605]
[236.33181763 329.14837646]
[220.30870056 337.95202637]
[203.71997070 345.63696289]
[186.64363098 352.16705322]
[169.15994263 357.51165771]
[151.35110474 361.64556885]
[133.30084229 364.54943848]
[115.09403229 366.20953369]
[96.81625366 366.61810303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
