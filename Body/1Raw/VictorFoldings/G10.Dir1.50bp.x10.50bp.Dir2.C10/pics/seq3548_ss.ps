%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUxxxxxxxxxxACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-25.26483727 214.64425659]
[-36.76663971 224.27278137]
[-48.26844406 233.90132141]
[-59.77024841 243.52984619]
[-71.17126465 253.27749634]
[-82.47027588 263.14321899]
[-93.76927948 273.00894165]
[-105.06828308 282.87466431]
[-116.36728668 292.74038696]
[-127.66629028 302.60610962]
[-138.75761414 312.70477295]
[-149.63642883 323.03195190]
[-160.51525879 333.35916138]
[-155.80146790 347.87615967]
[-157.86169434 362.99960327]
[-166.28684998 375.72671509]
[-179.40414429 383.53051758]
[-194.60911560 384.86157227]
[-208.88279724 379.45559692]
[-219.39115906 368.38592529]
[-224.04774475 353.85049438]
[-221.92797852 338.73529053]
[-213.45275879 326.04147339]
[-200.30484009 318.28936768]
[-185.09475708 317.01818848]
[-170.84246826 322.48034668]
[-159.96363831 312.15313721]
[-149.08480835 301.82592773]
[-148.07081604 297.09863281]
[-144.03623962 292.98117065]
[-137.53201294 291.30709839]
[-126.23300934 281.44137573]
[-114.93400574 271.57565308]
[-103.63500214 261.70993042]
[-92.33599854 251.84420776]
[-81.03699493 241.97848511]
[-78.04776764 235.16598511]
[-69.39877319 232.02803040]
[-57.89696884 222.39950562]
[-46.39516830 212.77098083]
[-34.89336395 203.14245605]
[-49.44168091 180.63356018]
[-60.26722717 156.11596680]
[-67.10032654 130.20046997]
[-69.77074432 103.53263092]
[-68.21197510 76.77679443]
[-62.46284103 50.59947968]
[-52.66656113 25.65279198]
[-39.06717300 2.55818081]
[-50.95955276 -6.58355331]
[-62.85193253 -15.72528744]
[-79.17115784 -17.34233284]
[-85.68292236 -32.39321136]
[-75.68848419 -45.39487076]
[-59.46925735 -42.97231674]
[-53.71019745 -27.61766815]
[-41.81781769 -18.47593307]
[-29.92543793 -9.33419895]
[-23.94979668 -16.06478310]
[-17.62592697 -22.46929169]
[-10.97159576 -28.52972984]
[-4.00549507 -34.22906876]
[3.25280261 -39.55130386]
[10.78290558 -44.48147583]
[18.56365967 -49.00573349]
[26.57320213 -53.11137009]
[34.78903580 -56.78684998]
[43.18807220 -60.02184677]
[51.74671936 -62.80727005]
[60.44093323 -65.13529968]
[69.24628448 -66.99938965]
[78.13803864 -68.39430237]
[87.09120941 -69.31612396]
[96.08065033 -69.76226044]
[105.08110046 -69.73146057]
[114.06726837 -69.22380829]
[123.01392365 -68.24073792]
[131.89591980 -66.78500366]
[140.68830872 -64.86069489]
[149.36639404 -62.47321701]
[157.90577698 -59.62928391]
[166.28247070 -56.33687973]
[174.47296143 -52.60525894]
[182.45420837 -48.44490051]
[190.20382690 -43.86749649]
[197.70001221 -38.88590622]
[204.92170715 -33.51412201]
[211.84864807 -27.76724052]
[218.46133423 -21.66140366]
[224.74122620 -15.21376514]
[230.67066956 -8.44244099]
[236.23298645 -1.36645472]
[241.41258240 5.99431467]
[246.19487000 13.61918736]
[250.56645203 21.48674202]
[254.51501465 29.57487488]
[258.02947998 37.86086273]
[261.09994507 46.32142639]
[263.71783447 54.93279648]
[265.87579346 63.67078400]
[267.56768799 72.51083374]
[268.78884888 81.42810822]
[269.53576660 90.39756775]
[269.80642700 99.39399719]
[269.60000610 108.39213562]
[284.53430176 109.79443359]
[299.46859741 111.19673920]
[314.40292358 112.59904480]
[329.33721924 114.00135040]
[337.17205811 100.90256500]
[349.91909790 92.50755310]
[365.04736328 90.48314667]
[379.55313110 95.23128510]
[390.55630493 105.80922699]
[395.87219238 120.11672211]
[394.44528198 135.31298828]
[386.55892944 148.38081360]
[373.77893066 156.72557068]
[358.64282227 158.69038391]
[344.15585327 153.88516235]
[333.19439697 143.26396179]
[327.93493652 128.93565369]
[313.00061035 127.53334808]
[298.06631470 126.13105011]
[283.13198853 124.72874451]
[268.19769287 123.32643890]
[265.53378296 137.85696411]
[261.61706543 152.10098267]
[256.47714233 165.95066833]
[250.15293884 179.30120850]
[242.69230652 192.05157471]
[234.15171814 204.10523987]
[224.59582520 215.37100220]
[214.09692383 225.76358032]
[202.73448181 235.20433044]
[190.59451294 243.62179565]
[177.76889038 250.95227051]
[164.35466003 257.14025879]
[150.45338440 262.13894653]
[136.17024231 265.91052246]
[121.61335754 268.42639160]
[106.89289093 269.66754150]
[92.12025452 269.62457275]
[77.40725708 268.29782104]
[62.86524582 265.69729614]
[48.60429382 261.84271240]
[34.73232269 256.76324463]
[21.35432625 250.49732971]
[8.57155418 243.09236145]
[-3.51924753 234.60443115]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[4 38]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 31]
[11 28]
[12 27]
[13 26]
[49 58]
[50 57]
[51 56]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
