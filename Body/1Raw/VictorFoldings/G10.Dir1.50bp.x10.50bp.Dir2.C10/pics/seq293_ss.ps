%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAxxxxxxxxxxGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCAAACCCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-24.09763527 311.25512695]
[-32.08755112 323.95004272]
[-40.07746887 336.64498901]
[-47.93489456 349.42233276]
[-55.65897751 362.28073120]
[-63.38306427 375.13912964]
[-71.10714722 387.99755859]
[-78.83123016 400.85595703]
[-86.55532074 413.71435547]
[-94.27940369 426.57275391]
[-91.80718231 442.42419434]
[-102.76461029 454.14230347]
[-118.74607849 452.73797607]
[-127.49198151 439.28848267]
[-122.29320526 424.11111450]
[-107.13780212 418.84866333]
[-99.41371918 405.99026489]
[-91.68963623 393.13186646]
[-83.96555328 380.27346802]
[-76.24146271 367.41506958]
[-68.51737976 354.55667114]
[-60.79329681 341.69824219]
[-60.04015732 334.29699707]
[-52.77239609 328.65505981]
[-44.78248215 315.96014404]
[-36.79256439 303.26519775]
[-62.70719528 283.18112183]
[-85.70822906 259.81677246]
[-105.38378143 233.59062195]
[-121.38152313 204.97224426]
[-133.41497803 174.47412109]
[-141.26867676 142.64239502]
[-144.80197144 110.04708099]
[-159.80116272 110.20311737]
[-174.80035400 110.35915375]
[-188.63327026 119.16722870]
[-203.05078125 111.35265350]
[-203.22137451 94.95439148]
[-188.96955872 86.84157562]
[-174.95639038 95.35996246]
[-159.95719910 95.20392609]
[-144.95800781 95.04788971]
[-144.44683838 83.42612457]
[-143.38459778 71.84171295]
[-141.77368164 60.32078934]
[-139.61770630 48.88931274]
[-136.92156982 37.57305527]
[-133.69131470 26.39753532]
[-129.93423462 15.38793945]
[-125.65879059 4.56909037]
[-120.87464142 -6.03462362]
[-115.59256744 -16.39929771]
[-109.82446289 -26.50156403]
[-103.58333588 -36.31865311]
[-96.88326263 -45.82843018]
[-89.73934174 -55.00945663]
[-82.16768646 -63.84103394]
[-74.18534851 -72.30326080]
[-65.81034088 -80.37705231]
[-57.06153870 -88.04420471]
[-47.95866394 -95.28743744]
[-38.52223587 -102.09042358]
[-28.77352524 -108.43782806]
[-18.73451614 -114.31533813]
[-8.42783546 -119.70970154]
[2.12327957 -124.60876465]
[12.89504433 -129.00148010]
[23.86317444 -132.87794495]
[35.00294495 -136.22940063]
[46.28924179 -139.04832458]
[57.69662476 -141.32835388]
[69.19937134 -143.06433105]
[80.77155304 -144.25236511]
[92.38708496 -144.88975525]
[104.01977539 -144.97508240]
[115.64340973 -144.50814819]
[127.23177338 -143.49000549]
[138.75875854 -141.92294312]
[150.19834900 -139.81050110]
[161.52478027 -137.15744019]
[172.71252441 -133.96974182]
[183.73632812 -130.25459290]
[194.57138062 -126.02036285]
[205.19322205 -121.27660370]
[215.57792664 -116.03401184]
[225.70207214 -110.30439758]
[235.54284668 -104.10067749]
[245.07804871 -97.43685150]
[254.28619385 -90.32792664]
[263.14654541 -82.78993225]
[271.63906860 -74.83986664]
[279.74468994 -66.49564362]
[287.44506836 -57.77608490]
[294.72290039 -48.70084000]
[301.56176758 -39.29037094]
[307.94622803 -29.56589317]
[313.86187744 -19.54932404]
[319.29544067 -9.26325035]
[324.23461914 1.26914370]
[328.66830444 12.02411175]
[332.58648682 22.97740936]
[335.98031616 34.10434341]
[338.84219360 45.37982941]
[341.16558838 56.77845001]
[342.94534302 68.27450562]
[344.17739868 79.84208679]
[344.85900879 91.45510864]
[344.98861694 103.08739471]
[344.56591797 114.71271515]
[343.59188843 126.30487061]
[342.06869507 137.83772278]
[339.99981689 149.28527832]
[337.38989258 160.62173462]
[334.24478149 171.82151794]
[330.57162476 182.85939026]
[326.37866211 193.71047974]
[321.67535400 204.35029602]
[316.47232056 214.75488281]
[310.78128052 224.90075684]
[304.61508179 234.76506042]
[297.98757935 244.32556152]
[290.91375732 253.56069946]
[283.40954590 262.44967651]
[275.49185181 270.97241211]
[267.17852783 279.10971069]
[258.48834229 286.84323120]
[249.44087219 294.15554810]
[240.05648804 301.03018188]
[230.35638428 307.45159912]
[220.36239624 313.40533447]
[210.09707642 318.87802124]
[199.58355713 323.85723877]
[188.84555054 328.33181763]
[177.90724182 332.29165649]
[166.79330444 335.72781372]
[155.52879333 338.63256836]
[144.13909912 340.99935913]
[132.64988708 342.82284546]
[121.08708954 344.09893799]
[109.47674561 344.82470703]
[97.84503937 344.99859619]
[86.21819305 344.62014771]
[74.62241364 343.69021606]
[63.08383942 342.21096802]
[51.62849426 340.18563843]
[40.28219223 337.61889648]
[29.07051849 334.51644897]
[18.01874352 330.88531494]
[7.15178490 326.73367310]
[-3.50586128 322.07089233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[4 22]
[5 21]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
