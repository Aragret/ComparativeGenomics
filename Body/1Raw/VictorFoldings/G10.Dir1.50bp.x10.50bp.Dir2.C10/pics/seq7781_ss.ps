%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCxxxxxxxxxxUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.86160278 397.43319702]
[94.86160278 382.43319702]
[94.86160278 367.43319702]
[94.86160278 352.43319702]
[94.86160278 337.43319702]
[94.86160278 322.43319702]
[94.86160278 307.43319702]
[94.86160278 292.43319702]
[94.86160278 277.43319702]
[94.86160278 262.43319702]
[80.25735474 259.12899780]
[66.74812317 252.65451050]
[55.01282883 243.33154297]
[45.64202118 231.62515259]
[39.10818100 218.12043762]
[35.74189377 203.49330139]
[35.71511841 188.47660828]
[39.03241730 173.82345581]
[45.53055191 160.26947021]
[54.88652420 148.49580383]
[66.63362885 139.09494019]
[80.18473053 132.54084778]
[94.86160278 129.16514587]
[75.43849945 114.92826080]
[73.40887451 91.65345764]
[89.08058929 75.30844879]
[78.86711121 64.32278442]
[68.42729187 53.55197906]
[57.76566696 43.00069046]
[47.10404205 32.44939804]
[36.44241714 21.89810753]
[24.64577675 12.63315868]
[11.86841869 4.77573347]
[-0.87916803 7.00124025]
[-11.37502766 0.14150965]
[-14.26140785 -11.64730358]
[-26.87253571 -19.76884651]
[-39.48366547 -27.89038849]
[-55.27529907 -28.85722733]
[-61.78639603 -42.25330734]
[-74.39752197 -50.37484741]
[-87.00865173 -58.49639130]
[-99.61978149 -66.61793518]
[-117.99878693 -67.05603790]
[-125.46519470 -82.90699005]
[-138.24255371 -90.76441956]
[-151.01991272 -98.62184143]
[-165.79898071 -93.51177216]
[-180.38656616 -99.14529419]
[-187.89483643 -112.86243439]
[-184.77862549 -128.18637085]
[-172.50930786 -137.88162231]
[-156.88008118 -137.37037659]
[-145.27058411 -126.89403534]
[-143.16247559 -111.39920044]
[-130.38511658 -103.54177856]
[-117.60776520 -95.68434906]
[-105.73033905 -98.18113708]
[-95.00559235 -91.68507385]
[-91.49823761 -79.22905731]
[-78.88710785 -71.10752106]
[-66.27598572 -62.98597717]
[-53.66485596 -54.86443329]
[-38.77524948 -54.47850037]
[-31.36212158 -40.50151825]
[-18.75099373 -32.37997437]
[-6.13986540 -24.25843239]
[11.38110638 -24.38286972]
[19.72584534 -8.00162411]
[32.50320053 -0.14419836]
[27.01440620 -14.10389423]
[28.51391411 -29.02875519]
[36.67004776 -41.61753845]
[49.67874527 -49.08572388]
[64.66260529 -49.78141403]
[78.30732727 -43.55073166]
[87.59484100 -31.77184486]
[90.47081757 -17.05013466]
[86.29912567 -2.64190841]
[76.00250244 8.26586723]
[61.85847092 13.26049328]
[46.99370575 11.23648167]
[57.65533447 21.78777313]
[68.31695557 32.33906174]
[78.97858429 42.89035416]
[83.73521423 43.75635529]
[87.97657776 47.66047668]
[89.85277557 54.10930634]
[100.06625366 65.09497070]
[114.70975494 68.34579468]
[128.61230469 62.71384048]
[142.51486206 57.08188629]
[156.41741943 51.44992828]
[170.31997681 45.81797028]
[157.94224548 37.34497833]
[156.63674927 22.40189552]
[167.35772705 11.91090870]
[182.26898193 13.54007912]
[190.47161865 26.09861565]
[185.97061157 40.40676117]
[200.38282776 36.24887466]
[214.79504395 32.09098434]
[229.20726013 27.93309784]
[243.61947632 23.77521133]
[254.59614563 11.59142685]
[270.57742310 15.26980209]
[275.12316895 31.02633858]
[263.55706787 42.65206528]
[247.77735901 38.18742752]
[233.36514282 42.34531403]
[218.95292664 46.50320053]
[204.54071045 50.66109085]
[190.12849426 54.81897736]
[175.95193481 59.72052765]
[162.04937744 65.35248566]
[148.14682007 70.98444366]
[134.24426270 76.61639404]
[120.34171295 82.24835205]
[127.54338074 93.47247314]
[128.67813110 107.38735962]
[142.33438110 113.59276581]
[158.59495544 111.46537781]
[168.35145569 124.64653015]
[161.56723022 139.57658386]
[145.22129822 140.89677429]
[136.12896729 127.24900818]
[122.47273254 121.04360199]
[109.86160278 129.16514587]
[124.53847504 132.54084778]
[138.08956909 139.09494019]
[149.83668518 148.49580383]
[159.19265747 160.26947021]
[165.69078064 173.82345581]
[169.00808716 188.47660828]
[168.98130798 203.49330139]
[165.61502075 218.12043762]
[159.08117676 231.62515259]
[149.71037292 243.33154297]
[137.97508240 252.65451050]
[124.46585083 259.12899780]
[109.86160278 262.43319702]
[109.86160278 277.43319702]
[109.86160278 292.43319702]
[109.86160278 307.43319702]
[109.86160278 322.43319702]
[109.86160278 337.43319702]
[109.86160278 352.43319702]
[109.86160278 367.43319702]
[109.86160278 382.43319702]
[109.86160278 397.43319702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[26 89]
[27 88]
[28 85]
[29 84]
[30 83]
[31 82]
[32 70]
[33 69]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[42 61]
[43 60]
[45 57]
[46 56]
[47 55]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
