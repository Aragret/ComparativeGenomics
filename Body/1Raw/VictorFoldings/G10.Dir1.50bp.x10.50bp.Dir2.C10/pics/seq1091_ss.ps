%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCxxxxxxxxxxCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[14.90935135 323.40158081]
[9.13307953 337.24478149]
[3.35680676 351.08801270]
[-2.41946578 364.93124390]
[-8.19573784 378.77444458]
[-6.36936617 394.48989868]
[-18.41105461 403.25613403]
[-15.77733135 419.44241333]
[-28.64763451 429.60543823]
[-43.78210068 423.29037476]
[-45.61168671 406.99362183]
[-32.25427246 397.47985840]
[-34.49380112 382.75457764]
[-22.03895569 372.99816895]
[-16.26268387 359.15496826]
[-10.48641109 345.31173706]
[-4.71013832 331.46853638]
[1.06613386 317.62530518]
[-11.62678146 311.39572144]
[-23.92920303 304.42660522]
[-35.79809570 296.74237061]
[-47.19193649 288.36990356]
[-58.07086945 279.33847046]
[-68.39683533 269.67965698]
[-78.13372040 259.42730713]
[-87.24745178 248.61720276]
[-95.70615387 237.28723145]
[-103.48023224 225.47700500]
[-110.54249573 213.22781372]
[-116.86824036 200.58255005]
[-122.43533325 187.58541870]
[-127.22430420 174.28189087]
[-131.21839905 160.71850586]
[-134.40364075 146.94271851]
[-136.76887512 133.00273132]
[-138.30586243 118.94727325]
[-139.00920105 104.82554626]
[-138.87643433 90.68692780]
[-137.90802002 76.58089447]
[-136.10736084 62.55678940]
[-133.48075867 48.66366577]
[-130.03738403 34.95012665]
[-125.78929138 21.46414566]
[-120.75133514 8.25289822]
[-114.94115448 -4.63739729]
[-108.37905884 -17.16164970]
[-101.08800507 -29.27604675]
[-93.09351349 -40.93820953]
[-84.42353821 -52.10733795]
[-75.10840607 -62.74436951]
[-85.77003479 -73.29565430]
[-96.43165588 -83.84694672]
[-107.09328461 -94.39823914]
[-117.75491333 -104.94953156]
[-133.74581909 -108.58585358]
[-138.33296204 -124.33038330]
[-126.79749298 -135.98649597]
[-111.00609589 -131.56336975]
[-107.20362091 -115.61115265]
[-96.54199219 -105.05986786]
[-85.88037109 -94.50857544]
[-75.21874237 -83.95728302]
[-64.55711365 -73.40599060]
[-51.50790405 -84.91629791]
[-37.65601730 -95.44693756]
[-23.07483864 -104.94210815]
[-7.84161901 -113.35151672]
[7.96293592 -120.63059998]
[24.25509644 -126.74080658]
[40.94854736 -131.64974976]
[57.95484543 -135.33143616]
[75.18389893 -137.76635742]
[92.54442596 -138.94161987]
[109.94445038 -138.85098267]
[127.29178619 -137.49493408]
[144.49453735 -134.88064575]
[161.46156311 -131.02198792]
[178.10296631 -125.93939209]
[194.33058167 -119.65979004]
[210.05844116 -112.21644592]
[225.20323181 -103.64880371]
[239.68469238 -94.00223541]
[253.42613220 -83.32786560]
[266.35470581 -71.68223572]
[278.40197754 -59.12705231]
[289.90377808 -68.75557709]
[301.40557861 -78.38410187]
[312.90737915 -88.01263428]
[314.83657837 -100.80841827]
[324.66906738 -108.58924103]
[336.76492310 -107.59071350]
[348.46456909 -116.97787476]
[360.16418457 -126.36503601]
[371.86380005 -135.75219727]
[375.03494263 -151.47871399]
[389.37280273 -158.67628479]
[403.87863159 -151.82351685]
[407.42480469 -136.17729187]
[397.29098511 -123.74005127]
[381.25097656 -124.05257416]
[369.55133057 -114.66541290]
[357.85171509 -105.27825165]
[346.15209961 -95.89109039]
[340.71734619 -79.23384857]
[322.53591919 -76.51082611]
[311.03411865 -66.88230133]
[299.53231812 -57.25377655]
[288.03048706 -47.62524796]
[296.42153931 -36.26175308]
[304.12673950 -24.42249298]
[311.11923218 -12.14880180]
[317.37457275 0.51646489]
[322.87097168 13.52908421]
[327.58917236 26.84362221]
[331.51272583 40.41359329]
[334.62796021 54.19161224]
[336.92395020 68.12957001]
[338.39273071 82.17881012]
[339.02911377 96.29027557]
[338.83093262 110.41468811]
[337.79885864 124.50274658]
[335.93649292 138.50524902]
[333.25033569 152.37330627]
[329.74978638 166.05848694]
[325.44702148 179.51303101]
[320.35711670 192.68995667]
[314.49780273 205.54324341]
[307.88955688 218.02801514]
[300.55548096 230.10067749]
[292.52111816 241.71910095]
[283.81457520 252.84269714]
[274.46621704 263.43261719]
[264.50869751 273.45193481]
[253.97679138 282.86560059]
[242.90727234 291.64080811]
[231.33877563 299.74685669]
[219.31169128 307.15551758]
[206.86804199 313.84085083]
[194.05123901 319.77954102]
[180.90606689 324.95086670]
[167.47839355 329.33676147]
[153.81510925 332.92190552]
[139.96394348 335.69378662]
[125.97322845 337.64273071]
[111.89183044 338.76193237]
[97.76890564 339.04748535]
[83.65377808 338.49838257]
[69.59572601 337.11654663]
[55.64382553 334.90682983]
[41.84680176 331.87689209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[7 12]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[85 108]
[86 107]
[87 106]
[88 105]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
