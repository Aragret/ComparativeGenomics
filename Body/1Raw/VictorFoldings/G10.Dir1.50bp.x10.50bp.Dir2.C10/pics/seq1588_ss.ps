%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACxxxxxxxxxxGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[123.88250732 366.57681274]
[123.88250732 351.57681274]
[123.88250732 336.57681274]
[123.88250732 321.57681274]
[123.88250732 306.57681274]
[123.88250732 291.57681274]
[123.88250732 276.57681274]
[123.88250732 261.57681274]
[123.88250732 246.57681274]
[123.88250732 231.57681274]
[122.01489258 216.69352722]
[118.30873108 202.15859985]
[114.60256958 187.62365723]
[110.89640808 173.08872986]
[107.19024658 158.55378723]
[103.48408508 144.01885986]
[99.77792358 129.48391724]
[96.07176208 114.94898224]
[85.52046967 104.28735352]
[71.02487946 100.43019104]
[56.52928162 96.57303619]
[41.92038727 93.17005920]
[27.21242523 90.22457123]
[12.50446415 87.27909088]
[2.85172844 99.64879608]
[-12.91041279 105.03588104]
[-29.99250221 100.69553375]
[-42.58969498 87.02045441]
[-57.58888245 86.86441040]
[-72.58807373 86.70837402]
[-87.58725739 86.55233765]
[-102.58644867 86.39630127]
[-116.46636200 93.98963165]
[-129.11245728 86.12035370]
[-144.11164856 85.96431732]
[-156.53315735 96.11742401]
[-172.18486023 92.59553528]
[-179.06010437 78.10034180]
[-171.88479614 63.75131989]
[-156.16320801 60.55580902]
[-143.95561218 70.96512604]
[-128.95642090 71.12116241]
[-116.14935303 63.51667786]
[-102.43041229 71.39711761]
[-87.43122101 71.55315399]
[-72.43203735 71.70919037]
[-57.43284607 71.86522675]
[-42.43365860 72.02126312]
[-37.53210831 57.84470367]
[-49.42448807 48.70296860]
[-61.31686783 39.56123734]
[-77.63609314 37.94419098]
[-84.14785767 22.89331245]
[-74.15341949 9.89165401]
[-57.93419266 12.31420612]
[-52.17513275 27.66885567]
[-40.28275299 36.81058884]
[-28.39037323 45.95232391]
[-6.91306639 43.82655716]
[9.85254288 54.86711884]
[15.44994640 72.57112885]
[30.15790749 75.51661682]
[44.86587143 78.46209717]
[48.02794647 76.76835632]
[52.18228912 76.56069183]
[56.60320282 78.29501343]
[60.38644028 82.07743835]
[74.88203430 85.93460083]
[89.37763214 89.79175568]
[78.50576782 79.45722198]
[66.26458740 70.78811646]
[58.67387009 57.85053253]
[57.07791519 42.93567657]
[61.75935745 28.68491936]
[71.88912964 17.62202072]
[85.67327881 11.70618248]
[100.67068481 11.98508167]
[114.22535706 18.40932465]
[123.93680573 29.84119987]
[128.08515930 44.25616074]
[125.93577576 59.10136795]
[117.86842346 71.74865723]
[109.62458038 84.28018188]
[122.86716461 77.23504639]
[136.10975647 70.18991089]
[124.30238342 53.72612381]
[128.85859680 27.59585381]
[138.84132385 16.40008736]
[148.82405090 5.20432234]
[158.80677795 -5.99144363]
[159.32859802 -22.02600861]
[172.27587891 -31.49952126]
[187.71658325 -27.14471626]
[193.80590820 -12.30222416]
[185.87266541 1.64206338]
[170.00254822 3.99128294]
[160.01982117 15.18704891]
[150.03709412 26.38281441]
[140.05436707 37.57857895]
[143.71391296 44.12515640]
[154.69258118 63.76488876]
[169.45863342 61.12602615]
[184.22468567 58.48715973]
[198.99073792 55.84829712]
[213.75680542 53.20943069]
[228.52285767 50.57056808]
[243.28890991 47.93170166]
[257.81732178 39.19317627]
[270.23620605 50.73473740]
[262.58358765 65.86331177]
[245.92778015 62.69775772]
[231.16171265 65.33662415]
[216.39566040 67.97548676]
[201.62960815 70.61434937]
[186.86355591 73.25321960]
[172.09750366 75.89208221]
[157.33143616 78.53094482]
[143.15487671 83.43249512]
[129.91229248 90.47763062]
[116.66971588 97.52276611]
[110.60669708 111.24282074]
[114.31285858 125.77775574]
[118.01902008 140.31269836]
[121.72518158 154.84762573]
[125.43134308 169.38256836]
[129.13751221 183.91749573]
[132.84367371 198.45243835]
[136.54983521 212.98736572]
[142.00363159 199.01396179]
[152.89782715 188.70297241]
[167.14985657 184.02542114]
[182.03532410 185.87548828]
[194.70872498 193.89952087]
[202.74740601 206.56362915]
[204.61470032 221.44694519]
[199.95364380 235.70439148]
[189.65525818 246.61048889]
[175.68818665 252.08045959]
[160.72235107 251.06864929]
[147.61862183 243.76847839]
[138.88250732 231.57681274]
[138.88250732 246.57681274]
[138.88250732 261.57681274]
[138.88250732 276.57681274]
[138.88250732 291.57681274]
[138.88250732 306.57681274]
[138.88250732 321.57681274]
[138.88250732 336.57681274]
[138.88250732 351.57681274]
[138.88250732 366.57681274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 128]
[12 127]
[13 126]
[14 125]
[15 124]
[16 123]
[17 122]
[18 121]
[19 69]
[20 68]
[21 67]
[22 63]
[23 62]
[24 61]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[49 58]
[50 57]
[51 56]
[83 120]
[84 119]
[85 118]
[87 99]
[88 98]
[89 97]
[90 96]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
