%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUAAAAAACUCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACxxxxxxxxxxUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.59332275 409.23608398]
[95.18432617 390.02838135]
[95.49638367 375.03161621]
[95.80843353 360.03485107]
[96.12049103 345.03811646]
[96.43254852 330.04135132]
[96.74460602 315.04461670]
[97.05666351 300.04785156]
[97.36872101 285.05108643]
[97.68077087 270.05435181]
[97.99282837 255.05758667]
[81.39823914 249.24101257]
[67.73774719 238.13099670]
[58.63746262 223.02947998]
[55.18761444 205.71473694]
[57.81195831 188.23199463]
[66.21581268 172.65182495]
[79.41904449 160.82495117]
[95.87034607 154.16235352]
[94.93472290 139.19155884]
[93.99909210 124.22077179]
[90.11056519 122.90972900]
[86.48949432 120.97911072]
[83.23381042 118.48111725]
[80.43155670 115.48330688]
[66.41484833 120.82482147]
[52.39813232 126.16633606]
[39.75040054 137.45664978]
[25.40007401 128.42866516]
[30.10267448 112.13996124]
[47.05662155 112.14962006]
[61.07333374 106.80810547]
[75.09004211 101.46659088]
[75.41506958 95.72941589]
[77.04388428 90.21871948]
[79.89011383 85.22673798]
[83.80281830 81.01821899]
[88.57448578 77.81634521]
[93.95207977 75.79092407]
[99.65040588 75.04936218]
[103.95799255 60.68117523]
[108.26557922 46.31299210]
[112.57315826 31.94480705]
[116.88074493 17.57662201]
[110.35533905 6.89226723]
[111.46673584 -5.32479668]
[119.47733307 -14.28050327]
[120.72420502 -29.22859001]
[121.97108459 -44.17667770]
[123.21795654 -59.12476349]
[114.17044830 -47.16054153]
[102.99983215 -37.14968491]
[90.11932373 -29.46251678]
[76.00540924 -24.38340378]
[61.18019104 -22.10023117]
[46.19208527 -22.69746017]
[31.59553528 -26.15299797]
[17.93050003 -32.33901596]
[5.70247936 -41.02667999]
[-4.63618517 -51.89461517]
[-12.70304394 -64.54079437]
[-18.19968605 -78.49739838]
[-20.92278099 -93.24815369]
[-20.77159119 -108.24739075]
[-17.75171280 -122.94026184]
[-11.97485542 -136.78323364]
[-3.65471983 -149.26423645]
[6.90091467 -159.92155457]
[19.30157280 -168.36097717]
[33.08852386 -174.27027893]
[47.75176620 -177.43089294]
[62.74886322 -177.72587585]
[77.52504730 -175.14431763]
[91.53371429 -169.78173828]
[104.25664520 -161.83648682]
[115.22320557 -151.60249329]
[124.02770233 -139.45832825]
[130.34445190 -125.85323334]
[133.93977356 -111.29048157]
[134.68066406 -96.30879211]
[132.54129028 -81.46875763]
[142.28894043 -92.86978149]
[152.03660583 -104.27079773]
[161.78425598 -115.67182159]
[171.53190613 -127.07284546]
[181.27955627 -138.47386169]
[191.02720642 -149.87487793]
[200.77485657 -161.27590942]
[210.52250671 -172.67692566]
[209.04100037 -188.41162109]
[219.18374634 -200.53187561]
[234.93322754 -201.84693909]
[246.94555664 -191.57662964]
[248.09403992 -175.81411743]
[237.69729614 -163.91104126]
[221.92353821 -162.92927551]
[212.17588806 -151.52825928]
[202.42822266 -140.12722778]
[192.68057251 -128.72621155]
[182.93292236 -117.32518768]
[173.18527222 -105.92417145]
[163.43762207 -94.52314758]
[153.68997192 -83.12213135]
[143.94232178 -71.72110748]
[138.16604614 -57.87788773]
[136.91917419 -42.92980194]
[135.67230225 -27.98171616]
[134.42541504 -13.03362846]
[144.29113770 -1.73462367]
[159.27085876 -0.95477861]
[174.25057983 -0.17493349]
[185.82254028 -10.93900681]
[201.61325073 -10.28425980]
[212.25437927 1.40085864]
[211.43272400 17.18377495]
[199.63575745 27.70076370]
[183.86241150 26.71228218]
[173.47073364 14.80478096]
[158.49101257 14.02493572]
[143.51129150 13.24509048]
[131.24893188 21.88420677]
[126.94134521 36.25239182]
[122.63375854 50.62057495]
[118.32617950 64.98876190]
[114.01859283 79.35694122]
[124.78990173 102.84912872]
[108.96987915 123.28514099]
[109.90550995 138.25593567]
[110.84114075 153.22673035]
[123.14630890 155.83782959]
[134.44445801 161.34303284]
[144.06690979 169.41053772]
[151.44561768 179.55703735]
[156.14668274 191.17675781]
[157.89587402 203.57756042]
[156.59465027 216.02214050]
[152.32563782 227.77195740]
[145.34742737 238.13099670]
[136.07894897 246.48698425]
[125.07429504 252.34765625]
[112.98958588 255.36964417]
[112.67752838 270.36639404]
[112.36547089 285.36315918]
[112.05341339 300.35989380]
[111.74135590 315.35665894]
[111.42930603 330.35342407]
[111.11724854 345.35015869]
[110.80519104 360.34692383]
[110.49313354 375.34368896]
[110.18107605 390.34042358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[19 129]
[20 128]
[21 127]
[25 33]
[26 32]
[27 31]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[47 108]
[48 107]
[49 106]
[50 105]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
