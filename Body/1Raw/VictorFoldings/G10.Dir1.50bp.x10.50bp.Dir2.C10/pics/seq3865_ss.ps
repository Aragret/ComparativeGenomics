%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAACACCUCUGAxxxxxxxxxxAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.40802765 258.77539062]
[126.40802765 243.77539062]
[126.40802765 228.77539062]
[126.40802765 213.77539062]
[126.40802765 198.77539062]
[126.40802765 183.77539062]
[126.40802765 168.77539062]
[126.40802765 153.77539062]
[126.40802765 138.77539062]
[126.40802765 123.77539825]
[119.39967346 121.10463715]
[105.38295746 115.76313019]
[98.37460327 113.09236908]
[88.39187622 124.28813934]
[78.40914917 135.48390198]
[75.60910034 151.64224243]
[60.12435150 157.04173279]
[47.88428497 146.12785339]
[51.48043060 130.12786865]
[67.21338654 125.50117493]
[77.19611359 114.30541229]
[87.17884064 103.10964203]
[92.81079102 89.20709229]
[93.43476868 74.22006989]
[94.05874634 59.23305511]
[94.68272400 44.24604034]
[79.75777435 42.70028305]
[64.95628357 40.23865891]
[50.33440781 36.87051010]
[35.94761276 32.60861206]
[21.85047340 27.46912766]
[8.09646320 21.47155762]
[-5.26224232 14.63865089]
[-18.17497063 6.99632692]
[-30.59273720 -1.42642343]
[-42.46843719 -10.59764957]
[-53.75702286 -20.48256302]
[-64.41567230 -31.04366493]
[-74.40394592 -42.24089432]
[-83.68396759 -54.03177261]
[-92.22052765 -66.37158203]
[-99.98124695 -79.21350098]
[-106.93667603 -92.50881958]
[-113.06044769 -106.20710754]
[-118.32931519 -120.25640106]
[-122.72330475 -134.60340881]
[-126.22573853 -149.19369507]
[-128.82333374 -163.97192383]
[-130.50624084 -178.88204956]
[-131.26808167 -193.86747742]
[-131.10594177 -208.87138367]
[-130.02046204 -223.83686829]
[-128.01574707 -238.70712280]
[-125.09941101 -253.42578125]
[-121.28250122 -267.93698120]
[-116.57951355 -282.18566895]
[-111.00827026 -296.11782837]
[-104.58992767 -309.68060303]
[-97.34880829 -322.82250977]
[-89.31240082 -335.49371338]
[-80.51117706 -347.64617920]
[-70.97853088 -359.23376465]
[-60.75061798 -370.21252441]
[-49.86623764 -380.54083252]
[-38.36668396 -390.17950439]
[-26.29557037 -399.09197998]
[-13.69869328 -407.24441528]
[-0.62383431 -414.60592651]
[12.87940788 -421.14855957]
[26.75980949 -426.84750366]
[40.96471786 -431.68115234]
[55.44025040 -435.63116455]
[70.13149261 -438.68255615]
[84.98271942 -440.82376099]
[99.93759155 -442.04663086]
[114.93938446 -442.34655762]
[129.93118286 -441.72238159]
[144.85612488 -440.17648315]
[159.65759277 -437.71472168]
[174.27943420 -434.34640503]
[188.66618347 -430.08438110]
[202.76327515 -424.94476318]
[216.51722717 -418.94705200]
[229.87585449 -412.11401367]
[242.78851318 -404.47155762]
[255.20619202 -396.04867554]
[267.08181763 -386.87734985]
[278.37030029 -376.99230957]
[289.02883911 -366.43112183]
[299.01699829 -355.23379517]
[308.29690552 -343.44281006]
[316.83334351 -331.10293579]
[324.59393311 -318.26092529]
[331.54925537 -304.96554565]
[337.67288208 -291.26718140]
[342.94161987 -277.21783447]
[347.33544922 -262.87078857]
[350.83773804 -248.28047180]
[353.43521118 -233.50221252]
[355.11795044 -218.59208679]
[355.87963867 -203.60664368]
[355.71737671 -188.60272217]
[354.63174438 -173.63726807]
[352.62689209 -158.76702881]
[349.71038818 -144.04840088]
[345.89334106 -129.53724670]
[341.19021606 -115.28858948]
[335.61883545 -101.35648346]
[329.20034790 -87.79379272]
[321.95910645 -74.65194702]
[313.92257690 -61.98080826]
[305.12124634 -49.82844162]
[295.58847046 -38.24094391]
[285.36044312 -27.26227188]
[274.47598267 -16.93407059]
[262.97631836 -7.29551840]
[250.90512085 1.61682045]
[238.30816650 9.76913929]
[225.23323059 17.13051414]
[211.72993469 23.67301750]
[197.84947205 29.37183571]
[183.64451599 34.20534897]
[169.16894531 38.15522003]
[154.47766113 41.20646667]
[139.62641907 43.34751511]
[124.67153168 44.57024765]
[109.66973877 44.87001801]
[109.04576111 59.85703278]
[108.42179108 74.84404755]
[107.79781342 89.83106995]
[110.65618134 75.10592651]
[119.44010162 62.94686890]
[132.52174377 55.60721207]
[147.47682190 54.44713974]
[161.53384399 59.68163681]
[172.08778381 70.34064484]
[177.18276978 84.44883728]
[175.87460327 99.39168549]
[168.40571594 112.39997864]
[156.16023254 121.06302643]
[141.40803528 123.77539825]
[141.40803528 138.77539062]
[141.40803528 153.77539062]
[141.40803528 168.77539062]
[141.40803528 183.77539062]
[141.40803528 198.77539062]
[141.40803528 213.77539062]
[141.40803528 228.77539062]
[141.40803528 243.77539062]
[141.40803528 258.77539062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 22]
[14 21]
[15 20]
[23 130]
[24 129]
[25 128]
[26 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
