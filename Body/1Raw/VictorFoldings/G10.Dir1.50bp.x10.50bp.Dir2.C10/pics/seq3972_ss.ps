%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUGGCCAUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACxxxxxxxxxxACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[99.29547119 282.18215942]
[99.29547119 267.18215942]
[99.29547119 252.18215942]
[99.29547119 237.18215942]
[99.29547119 222.18215942]
[99.29547119 207.18215942]
[99.29547119 192.18215942]
[99.29547119 177.18215942]
[99.29547119 162.18215942]
[99.29547119 147.18215942]
[86.02249146 142.77786255]
[75.23577881 134.93212891]
[67.73007202 124.69644165]
[63.91044235 113.26979065]
[49.09268188 115.60089111]
[34.27492523 117.93199921]
[19.45716667 120.26309967]
[25.78615570 138.80123901]
[15.24003124 161.74325562]
[2.97766280 170.38237000]
[-9.28470516 179.02148438]
[-18.75072098 193.08671570]
[-34.88673782 187.88429260]
[-34.35450745 170.93869019]
[-17.92382240 166.75912476]
[-5.66145325 158.11999512]
[6.60091496 149.48088074]
[4.89942598 142.17643738]
[-7.94289112 149.92723083]
[-19.28281784 140.10858154]
[-13.44892597 126.28954315]
[1.49644780 127.56754303]
[-0.20504116 120.26309967]
[-15.02279949 117.93199921]
[-29.84055710 115.60089111]
[-44.65831375 113.26979065]
[-54.24901581 125.26620483]
[-68.55885315 130.84510803]
[-83.73854828 128.50579834]
[-95.70484924 118.87754059]
[-101.23886871 104.55028534]
[-98.85198975 89.37799835]
[-89.18627167 77.44194031]
[-74.84174347 71.95285797]
[-59.67700577 74.38728333]
[-47.77130508 84.09036255]
[-42.32721329 98.45202637]
[-27.50945282 100.78313446]
[-12.69169521 103.11423492]
[2.12606263 105.44534302]
[17.12606239 105.44534302]
[31.94382095 103.11423492]
[46.76157761 100.78313446]
[61.57933807 98.45202637]
[65.20191193 75.77396393]
[82.17562866 57.21508408]
[74.18571472 44.52015686]
[66.19579315 31.82522583]
[58.20587921 19.13029671]
[42.94428253 14.18426609]
[37.43088531 -0.88165504]
[45.89509201 -14.51018238]
[61.84388733 -16.24667549]
[73.04272461 -4.75904655]
[70.90081024 11.14037991]
[78.89072418 23.83530998]
[86.88064575 36.53023911]
[94.87055969 49.22517014]
[102.22454071 50.69791031]
[101.29900360 35.72649002]
[100.37346649 20.75507164]
[99.44792938 5.78365374]
[95.48927307 -8.68455505]
[100.12927246 -22.94886017]
[111.84231567 -32.31926346]
[126.77725983 -33.71484375]
[140.02357483 -26.67674255]
[147.22599792 -13.51903915]
[146.01640320 1.43211114]
[136.79078674 13.26210213]
[130.17135620 26.72253227]
[123.55192566 40.18296051]
[116.93250275 53.64339066]
[124.28648376 55.11613464]
[136.54884338 46.47701645]
[148.81121826 37.83790207]
[161.07359314 29.19878578]
[164.24136353 23.27656174]
[169.19766235 20.33270454]
[174.03059387 20.46788216]
[186.64172363 12.34634018]
[199.25285339 4.22479773]
[196.50531006 -10.72576904]
[199.69313049 -25.58868408]
[208.33020020 -38.09745789]
[221.09942627 -46.34460068]
[236.05358887 -49.07247543]
[250.91230774 -45.86510468]
[263.40969849 -37.21158981]
[271.64004517 -24.43152618]
[274.34823608 -9.47378254]
[271.12133789 5.38069344]
[262.45138550 17.86670303]
[249.66050720 26.08022118]
[234.69921875 28.76874352]
[219.84899902 25.52229118]
[207.37440491 16.83592606]
[194.76327515 24.95746803]
[182.15214539 33.07901001]
[169.71270752 41.46115494]
[157.45033264 50.10026932]
[145.18797302 58.73938751]
[132.92559814 67.37850189]
[145.68359375 89.98558807]
[144.34013367 116.14326477]
[158.35684204 121.48477173]
[172.37355042 126.82628632]
[186.39027405 132.16780090]
[200.40698242 137.50930786]
[215.57626343 132.28700256]
[229.03930664 141.01202393]
[230.46841431 156.99130249]
[218.76730347 167.96688843]
[202.91204834 165.51925659]
[195.06547546 151.52603149]
[181.04875183 146.18450928]
[167.03204346 140.84300232]
[153.01533508 135.50148010]
[138.99861145 130.15997314]
[132.82283020 134.41551208]
[142.56278992 145.82310486]
[152.30276489 157.23069763]
[165.91758728 163.52644348]
[170.28776550 177.87571716]
[162.49357605 190.69172668]
[147.74230957 193.41210938]
[135.88934326 184.21932983]
[134.85401917 169.25408936]
[127.66264343 156.09034729]
[120.47126007 142.92660522]
[114.29547119 147.18215942]
[114.29547119 162.18215942]
[114.29547119 177.18215942]
[114.29547119 192.18215942]
[114.29547119 207.18215942]
[114.29547119 222.18215942]
[114.29547119 237.18215942]
[114.29547119 252.18215942]
[114.29547119 267.18215942]
[114.29547119 282.18215942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 54]
[15 53]
[16 52]
[17 51]
[19 27]
[20 26]
[21 25]
[33 50]
[34 49]
[35 48]
[36 47]
[56 68]
[57 67]
[58 66]
[59 65]
[84 113]
[85 112]
[86 111]
[87 110]
[90 109]
[91 108]
[92 107]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
