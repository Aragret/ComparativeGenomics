%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGAAGACCxxxxxxxxxxUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[156.95445251 369.36386108]
[156.95445251 354.36386108]
[156.95445251 339.36386108]
[156.95445251 324.36386108]
[156.95445251 309.36386108]
[156.95445251 294.36386108]
[156.95445251 279.36386108]
[156.95445251 264.36386108]
[156.95445251 249.36386108]
[156.95445251 234.36386108]
[141.15373230 232.33998108]
[127.00274658 225.64497375]
[115.81735992 215.08903503]
[108.57887268 201.83146667]
[105.84896088 187.25489807]
[107.72895050 172.82173157]
[113.86605835 159.92755127]
[123.50428009 149.76615906]
[115.69923401 136.95674133]
[107.89418030 124.14733124]
[100.08913422 111.33790588]
[96.21189117 113.51045990]
[91.19287109 114.21794128]
[85.59495544 113.02114105]
[80.12636566 109.69230652]
[65.13329315 109.23633575]
[55.60034943 121.33712769]
[40.94132996 125.45617676]
[26.83457184 120.21562958]
[18.61701584 107.82168579]
[3.62394691 107.36572266]
[-11.36912155 106.90975189]
[-26.36219025 106.45378876]
[-41.35525894 105.99781799]
[-56.34832764 105.54185486]
[-71.34139252 105.08588409]
[-82.67805481 116.09750366]
[-98.47923279 115.78412628]
[-109.37037659 104.33168030]
[-108.88996124 88.53469849]
[-97.32300568 77.76524353]
[-81.53198242 78.41264343]
[-70.88542938 90.09281921]
[-55.89235687 90.54878235]
[-40.89929199 91.00475311]
[-25.90622139 91.46071625]
[-10.91315365 91.91668701]
[4.07991457 92.37265015]
[19.07298279 92.82862091]
[28.02850151 80.95694733]
[42.42764664 76.58331299]
[56.80926895 81.58554840]
[65.58926392 94.24327087]
[80.58232880 94.69923401]
[90.80612946 83.72317505]
[89.28860474 68.80013275]
[87.77108002 53.87709045]
[75.80610657 43.90327072]
[74.47970581 28.74756813]
[84.06195068 17.40225792]
[82.54442596 2.47921824]
[67.58340454 0.75237876]
[53.34353638 -4.15069294]
[40.49083710 -12.00067234]
[29.62645149 -22.43039894]
[21.25852966 -34.95206070]
[15.77845383 -48.97998810]
[13.44253635 -63.85807800]
[14.36003304 -78.89045715]
[18.48803139 -93.37402344]
[25.63345528 -106.63135529]
[35.46210098 -118.04239655]
[47.51426697 -127.07341766]
[61.22624969 -133.30203247]
[75.95671844 -136.43690491]
[91.01669312 -136.33142090]
[105.70180511 -132.99050903]
[119.32519531 -126.57043457]
[131.24966431 -117.37147522]
[140.91751099 -105.82388306]
[147.87652588 -92.46775818]
[151.80123901 -77.92778778]
[152.50807190 -62.88403320]
[149.96397400 -48.04012299]
[144.28793335 -34.09033203]
[135.74543762 -21.68711853]
[124.73602295 -11.41059971]
[111.77462006 -3.74142861]
[97.46746826 0.96169347]
[98.98499298 15.88473320]
[110.65488434 25.06891251]
[112.40645599 40.18137741]
[102.69412231 52.35956573]
[104.21164703 67.28260803]
[105.72917175 82.20565033]
[109.59780121 67.71310425]
[119.55229950 56.49223709]
[133.48046875 50.92393494]
[148.42697144 52.18970871]
[161.22038269 60.02098083]
[169.14611816 72.75607300]
[170.52247620 87.69279480]
[165.05740356 101.66179657]
[153.91050720 111.69906616]
[139.44700623 115.67485046]
[124.73580933 112.74554443]
[112.89855194 103.53285980]
[120.70359802 116.34227753]
[128.50865173 129.15168762]
[136.31370544 141.96112061]
[153.11462402 137.67160034]
[170.73394775 140.14352417]
[186.48728943 149.34538269]
[197.84555054 164.19572449]
[202.83868408 182.68148804]
[200.39019775 202.12838745]
[214.74705505 206.47355652]
[229.10391235 210.81874084]
[243.46076965 215.16392517]
[255.74511719 205.68370056]
[271.25662231 205.26823425]
[284.03082275 214.07730103]
[289.15576172 228.72361755]
[284.66079712 243.57537842]
[272.27432251 252.92178345]
[256.75921631 253.16894531]
[244.08134460 244.22183228]
[239.11560059 229.52078247]
[224.75874329 225.17559814]
[210.40187073 220.83042908]
[196.04501343 216.48524475]
[190.02236938 220.95489502]
[200.53851318 231.65119934]
[211.05465698 242.34748840]
[221.57080078 253.04379272]
[234.48767090 260.66967773]
[238.19204712 275.20507812]
[230.50064087 288.08303833]
[215.94660950 291.71353149]
[203.10787964 283.95678711]
[199.55123901 269.38540649]
[192.35986328 256.22167969]
[185.16847229 243.05793762]
[177.97709656 229.89419556]
[171.95445251 234.36386108]
[171.95445251 249.36386108]
[171.95445251 264.36386108]
[171.95445251 279.36386108]
[171.95445251 294.36386108]
[171.95445251 309.36386108]
[171.95445251 324.36386108]
[171.95445251 339.36386108]
[171.95445251 354.36386108]
[171.95445251 369.36386108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[18 110]
[19 109]
[20 108]
[21 107]
[25 54]
[26 53]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[55 95]
[56 94]
[57 93]
[60 90]
[61 89]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
