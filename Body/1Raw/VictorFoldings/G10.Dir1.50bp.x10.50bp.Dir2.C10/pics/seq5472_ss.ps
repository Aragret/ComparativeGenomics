%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUxxxxxxxxxxGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[200.05963135 94.47982788]
[194.94665527 80.37214661]
[184.86282349 91.33415985]
[169.45869446 87.72535706]
[155.04647827 91.88323975]
[140.63426208 96.04113007]
[126.22205353 100.19902039]
[111.80983734 104.35690308]
[99.19870758 112.47844696]
[89.45105743 123.87947083]
[79.70339966 135.28048706]
[69.95574951 146.68150330]
[74.49840546 161.42491150]
[70.32704163 176.27763367]
[58.77272797 186.50021362]
[43.52239990 188.83068848]
[29.44238663 182.52539062]
[21.02556610 169.59632874]
[20.95771599 154.16911316]
[29.26048660 141.16651917]
[43.28449631 134.73762512]
[58.55472946 136.93385315]
[68.30238342 125.53283691]
[78.05003357 114.13181305]
[87.79768372 102.73079681]
[85.12693024 95.72243500]
[70.31729126 93.34027100]
[79.78541565 81.70572662]
[77.11466217 74.69736481]
[62.25161362 72.67503357]
[45.41368484 80.05500793]
[31.94144821 68.85238647]
[17.03954506 67.13970184]
[2.13764358 65.42700958]
[-12.76425934 63.71432114]
[-27.66616058 62.00163269]
[-42.56806183 60.28894043]
[-54.78890228 70.31024933]
[-70.50803375 68.67182922]
[-80.39957428 56.34572220]
[-78.59505463 40.64479065]
[-66.16505432 30.88411903]
[-50.48408127 32.85454178]
[-40.85537338 45.38703918]
[-25.95347214 47.09972763]
[-11.05156898 48.81241989]
[3.85033321 50.52510834]
[18.75223541 52.23779678]
[33.65413666 53.95048904]
[43.35934830 46.66239929]
[55.82540131 48.01015472]
[64.27394867 57.81198883]
[79.13699341 59.83432007]
[107.65194702 89.94468689]
[122.06416321 85.78680420]
[136.47637939 81.62891388]
[150.88859558 77.47102356]
[165.30081177 73.31314087]
[176.41549683 62.05372620]
[190.78875732 65.95993042]
[187.60140991 51.29670715]
[185.40057373 36.45333862]
[184.19609070 21.49611855]
[183.99333191 6.49184752]
[184.79319763 -8.49246025]
[186.59213257 -23.38987923]
[189.38208008 -38.13387680]
[193.15060425 -52.65859985]
[197.88084412 -66.89917755]
[203.55171204 -80.79199982]
[210.13783264 -94.27503204]
[217.60983276 -107.28804779]
[225.93432617 -119.77291870]
[235.07412720 -131.67390442]
[244.98841858 -142.93783569]
[255.63291931 -153.51440430]
[266.96008301 -163.35638428]
[278.91934204 -172.41979980]
[291.45724487 -180.66418457]
[304.51782227 -188.05271912]
[318.04275513 -194.55239868]
[331.97158813 -200.13420105]
[346.24215698 -204.77319336]
[360.79071045 -208.44863892]
[375.55227661 -211.14414978]
[390.46090698 -212.84767151]
[405.45001221 -213.55158997]
[420.45269775 -213.25277710]
[435.40188599 -211.95256042]
[450.23086548 -209.65673828]
[464.87338257 -206.37557983]
[479.26403809 -202.12373352]
[493.33856201 -196.92018127]
[507.03411865 -190.78817749]
[520.28948975 -183.75509644]
[533.04553223 -175.85235596]
[545.24517822 -167.11526489]
[556.83404541 -157.58282471]
[567.76037598 -147.29760742]
[577.97528076 -136.30557251]
[587.43316650 -124.65579987]
[596.09185791 -112.40032196]
[603.91259766 -99.59387207]
[610.86047363 -86.29364777]
[616.90454102 -72.55905914]
[622.01770020 -58.45143890]
[626.17712402 -44.03380585]
[629.36431885 -29.37054253]
[631.56494141 -14.52714634]
[632.76922607 0.43009001]
[632.97180176 15.43436337]
[632.17175293 30.41866112]
[630.37261963 45.31605911]
[627.58251953 60.06002045]
[623.81378174 74.58469391]
[619.08337402 88.82521057]
[613.41235352 102.71796417]
[606.82604980 116.20091248]
[599.35388184 129.21383667]
[591.02923584 141.69860840]
[581.88928223 153.59947205]
[571.97485352 164.86328125]
[561.33020020 175.43971252]
[550.00292969 185.28153992]
[538.04357910 194.34481812]
[525.50555420 202.58905029]
[512.44488525 209.97741699]
[498.91986084 216.47692871]
[484.99093628 222.05856323]
[470.72030640 226.69735718]
[456.17172241 230.37263489]
[441.41012573 233.06794739]
[426.50146484 234.77128601]
[411.51235962 235.47502136]
[396.50967407 235.17601013]
[381.56048584 233.87561035]
[366.73153687 231.57960510]
[352.08908081 228.29826355]
[337.69848633 224.04623413]
[323.62402344 218.84249878]
[309.92855835 212.71032715]
[296.67324829 205.67707825]
[283.91732788 197.77418518]
[271.71777344 189.03692627]
[260.12899780 179.50434875]
[249.20285034 169.21899414]
[238.98808289 158.22683716]
[229.53031921 146.57693481]
[220.87181091 134.32135010]
[213.05122375 121.51480103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 60]
[4 58]
[5 57]
[6 56]
[7 55]
[8 54]
[9 25]
[10 24]
[11 23]
[12 22]
[29 53]
[30 52]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
