%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAUCCACCCCUUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAxxxxxxxxxxAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[141.59001160 93.64553833]
[127.36077881 98.39199829]
[113.13153839 103.13845825]
[101.68279266 112.83000946]
[94.65220642 126.08032990]
[87.62162018 139.33064270]
[80.59103394 152.58096313]
[80.95759583 168.39791870]
[68.15747070 176.01409912]
[61.12688828 189.26440430]
[62.25384521 205.62478638]
[48.49959564 214.55522156]
[34.01333618 206.86885071]
[33.69728851 190.47274780]
[47.87657166 182.23382568]
[54.90715790 168.98350525]
[54.03772354 154.11430359]
[67.34072113 145.55036926]
[74.37130737 132.30006409]
[81.40189362 119.04974365]
[88.43247223 105.79942322]
[84.78858185 99.24411774]
[77.50080109 86.13350677]
[73.85691071 79.57819366]
[58.89187622 78.55455780]
[43.92684555 77.53092194]
[29.63083267 84.30843353]
[17.46124268 75.72062683]
[3.16523027 82.49813080]
[-9.00435925 73.91033173]
[-23.96939087 72.88669586]
[-38.93442154 71.86306000]
[-53.89945221 70.83942413]
[-59.76236725 84.80025482]
[-69.84255219 96.09931183]
[-83.04658508 103.51094818]
[-97.94218445 106.23120117]
[-112.91358948 103.96501160]
[-126.33682251 96.95818329]
[-136.75582886 85.97077942]
[-143.04042053 72.19461823]
[-144.50889587 57.12404251]
[-141.00198364 42.39379120]
[-132.90007019 29.60169601]
[-121.08199310 20.13534546]
[-106.82969666 15.02157784]
[-91.68914795 14.81509781]
[-77.30269623 19.53830338]
[-65.23086548 28.67885399]
[-56.78312302 41.24525070]
[-52.87581635 55.87438965]
[-37.91078568 56.89802551]
[-22.94575500 57.92166138]
[-7.98072338 58.94529724]
[5.24489069 52.09457779]
[18.48487854 60.75559616]
[31.71049309 53.90487289]
[44.95048141 62.56589127]
[59.91551208 63.58952713]
[74.88054657 64.61316681]
[108.38507843 88.90922546]
[122.61431885 84.16276550]
[136.84355164 79.41630554]
[132.99848938 64.91233826]
[130.07173157 50.19556046]
[128.07482910 35.32405090]
[127.01566315 20.35649872]
[126.89840698 5.35197449]
[127.72352600 -9.63030338]
[129.48776245 -24.53120804]
[132.18415833 -39.29193115]
[135.80207825 -53.85421753]
[140.32722473 -68.16059875]
[145.74176025 -82.15460968]
[152.02429199 -95.78102112]
[159.15003967 -108.98606110]
[167.09089661 -121.71761322]
[175.81549072 -133.92543030]
[185.28941345 -145.56134033]
[195.47526550 -156.57940674]
[206.33285522 -166.93615723]
[217.81932068 -176.59071350]
[229.88934326 -185.50497437]
[242.49528503 -193.64376831]
[255.58738708 -200.97496033]
[269.11398315 -207.46961975]
[283.02169800 -213.10211182]
[297.25561523 -217.85023499]
[311.75961304 -221.69520569]
[326.47640991 -224.62188721]
[341.34793091 -226.61871338]
[356.31549072 -227.67781067]
[371.32000732 -227.79498291]
[386.30227661 -226.96978760]
[401.20318604 -225.20547485]
[415.96389771 -222.50900269]
[430.52615356 -218.89100647]
[444.83251953 -214.36578369]
[458.82650757 -208.95118713]
[472.45288086 -202.66857910]
[485.65786743 -195.54275513]
[498.38940430 -187.60183716]
[510.59716797 -178.87716675]
[522.23303223 -169.40318298]
[533.25103760 -159.21726990]
[543.60772705 -148.35963440]
[553.26220703 -136.87312317]
[562.17645264 -124.80304718]
[570.31512451 -112.19706726]
[577.64624023 -99.10492706]
[584.14086914 -85.57830048]
[589.77331543 -71.67055511]
[594.52130127 -57.43659973]
[598.36621094 -42.93259430]
[601.29284668 -28.21578407]
[603.28961182 -13.34425163]
[604.34857178 1.62331212]
[604.46569824 16.62783623]
[603.64044189 31.61010551]
[601.87603760 46.51099014]
[599.17950439 61.27168655]
[595.56140137 75.83393097]
[591.03613281 90.14026642]
[585.62145996 104.13422394]
[579.33874512 117.76057434]
[572.21289062 130.96553040]
[564.27191162 143.69700623]
[555.54718018 155.90473938]
[546.07312012 167.54054260]
[535.88714600 178.55850220]
[525.02941895 188.91514587]
[513.54290771 198.56958008]
[501.47277832 207.48371887]
[488.86672974 215.62237549]
[475.77456665 222.95343018]
[462.24789429 229.44793701]
[448.34011841 235.08029175]
[434.10614014 239.82826233]
[419.60211182 243.67309570]
[404.88528442 246.59962463]
[390.01376343 248.59628296]
[375.04617310 249.65522766]
[360.04165649 249.77224731]
[345.05938721 248.94689941]
[330.15850830 247.18241882]
[315.39782715 244.48579407]
[300.83560181 240.86764526]
[286.52929688 236.34226990]
[272.53536987 230.92753601]
[258.90905762 224.64477539]
[245.70413208 217.51881409]
[232.97270203 209.57777405]
[220.76501465 200.85298157]
[209.12925720 191.37887573]
[198.11134338 181.19285583]
[187.75477600 170.33509827]
[178.10038757 158.84848022]
[169.18632507 146.77832031]
[161.04772949 134.17225647]
[153.71673584 121.08003998]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 21]
[5 20]
[6 19]
[7 18]
[9 16]
[10 15]
[24 60]
[25 59]
[26 58]
[28 56]
[30 54]
[31 53]
[32 52]
[33 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
