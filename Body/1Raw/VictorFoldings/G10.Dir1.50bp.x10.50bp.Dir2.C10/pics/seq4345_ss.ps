%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCxxxxxxxxxxGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 551.44665527]
[92.50000000 536.44665527]
[92.50000000 521.44665527]
[92.50000000 506.44665527]
[92.50000000 491.44665527]
[92.50000000 476.44665527]
[92.50000000 461.44665527]
[92.50000000 446.44665527]
[92.50000000 431.44665527]
[92.50000000 416.44665527]
[77.77018738 413.71301270]
[63.78981781 408.31774902]
[51.03553772 400.44323730]
[39.94248962 390.35644531]
[30.88946152 378.39981079]
[24.18593407 364.97967529]
[20.06152153 350.55236816]
[18.65810013 335.60888672]
[20.02492142 320.65798950]
[24.11689758 306.20901489]
[30.79607773 292.75445557]
[39.83630371 280.75317383]
[50.93086243 270.61477661]
[63.70289993 262.68560791]
[77.71820831 257.23699951]
[92.50000000 254.45585632]
[79.53267670 247.12686157]
[71.92427826 234.20524597]
[71.80444336 219.11047363]
[79.30548859 205.89567566]
[92.50000000 198.15925598]
[92.50000000 183.15925598]
[92.50000000 168.15925598]
[92.50000000 153.15925598]
[92.50000000 138.15925598]
[83.44424438 135.18928528]
[75.38275909 130.10598755]
[68.79969025 123.21463013]
[64.09038544 114.92910767]
[61.53767014 105.74699402]
[61.29485321 96.21974182]
[63.37651443 86.91951752]
[50.48865891 79.24468231]
[37.60080338 71.56983948]
[19.21497154 71.77327728]
[11.20271587 56.18828964]
[-1.83803916 48.77622604]
[-14.87879372 41.36415863]
[-27.91954994 33.95209503]
[-44.30573654 34.60390091]
[-52.83335495 20.59633827]
[-44.72991943 6.33918810]
[-28.33154869 6.49898291]
[-20.50748444 20.91134071]
[-7.46672916 28.32340431]
[5.57402611 35.73546982]
[18.61478043 43.14753342]
[30.39522171 40.24245834]
[41.33607483 46.35986710]
[45.27563858 58.68198395]
[58.16349792 66.35682678]
[71.05135345 74.03166199]
[79.95835114 66.67266846]
[90.63431549 62.25529480]
[102.13694000 61.16944504]
[113.45095062 63.51095200]
[121.25600433 50.70153427]
[129.06105042 37.89211655]
[136.86610413 25.08269882]
[144.67115784 12.27328110]
[131.37991333 19.22619820]
[116.89064789 23.10706902]
[101.90351868 23.72835732]
[87.14276123 21.06003952]
[73.32165527 15.23105812]
[61.10808563 6.52308846]
[51.09225464 -4.64307022]
[43.75815582 -17.72783279]
[39.46020126 -32.09889984]
[38.40608215 -47.06181717]
[40.64673996 -61.89352036]
[46.07389069 -75.87729645]
[54.42528152 -88.33740234]
[65.29734802 -98.67173004]
[78.16470337 -106.38088226]
[92.40557098 -111.09232330]
[107.33177948 -112.57839203]
[122.22203827 -110.76727295]
[136.35681152 -105.74649048]
[149.05303955 -97.75865173]
[159.69721985 -87.18976593]
[167.77499390 -74.55055237]
[172.89599609 -60.45177841]
[174.81277466 -45.57475281]
[173.43270874 -30.63837242]
[168.82246399 -16.36441994]
[161.20622253 -3.44446898]
[174.39451599 -10.59071541]
[187.58280945 -17.73696136]
[200.69801331 -25.01649094]
[213.73876953 -32.42855453]
[221.56283569 -46.84091187]
[237.96119690 -47.00070953]
[246.06463623 -32.74355698]
[237.53701782 -18.73599434]
[221.15083313 -19.38780022]
[208.11007690 -11.97573566]
[203.82374573 -5.90062046]
[194.72904968 -4.54866505]
[181.54075623 2.59758115]
[168.35246277 9.74382782]
[157.48057556 20.07833099]
[149.67552185 32.88774872]
[141.87046814 45.69716644]
[134.06541443 58.50658417]
[126.26036835 71.31600189]
[137.39697266 89.33015442]
[137.44256592 110.50871277]
[126.38364410 128.57064819]
[107.50000000 138.15925598]
[107.50000000 153.15925598]
[107.50000000 168.15925598]
[107.50000000 183.15925598]
[107.50000000 198.15925598]
[120.69451141 205.89567566]
[128.19555664 219.11047363]
[128.07571411 234.20524597]
[120.46732330 247.12686157]
[107.50000000 254.45585632]
[122.28179169 257.23699951]
[136.29710388 262.68560791]
[149.06913757 270.61477661]
[160.16369629 280.75317383]
[169.20391846 292.75445557]
[175.88310242 306.20901489]
[179.97508240 320.65798950]
[181.34190369 335.60888672]
[179.93847656 350.55236816]
[175.81407166 364.97967529]
[169.11053467 378.39981079]
[160.05751038 390.35644531]
[148.96446228 400.44323730]
[136.21018982 408.31774902]
[122.22981262 413.71301270]
[107.50000000 416.44665527]
[107.50000000 431.44665527]
[107.50000000 446.44665527]
[107.50000000 461.44665527]
[107.50000000 476.44665527]
[107.50000000 491.44665527]
[107.50000000 506.44665527]
[107.50000000 521.44665527]
[107.50000000 536.44665527]
[107.50000000 551.44665527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 154]
[2 153]
[3 152]
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[26 129]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[42 62]
[43 61]
[44 60]
[46 57]
[47 56]
[48 55]
[49 54]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[97 111]
[98 110]
[99 109]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
