%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAxxxxxxxxxxCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.35508728 107.35223389]
[92.64776611 92.35508728]
[92.94044495 77.35794830]
[93.23311615 62.36080170]
[93.52579498 47.36365509]
[93.81847382 32.36651230]
[94.11114502 17.36936760]
[94.40382385 2.37222266]
[94.69650269 -12.62492180]
[94.98917389 -27.62206650]
[95.28185272 -42.61920929]
[80.31013489 -43.57977676]
[65.39607239 -45.20633316]
[50.56927490 -47.49565125]
[35.85917282 -50.44318390]
[21.29498100 -54.04307938]
[6.90560913 -58.28819275]
[-7.28037119 -63.17009354]
[-21.23479462 -68.67908478]
[-34.92995834 -74.80423737]
[-48.33866882 -81.53339386]
[-61.43430710 -88.85317230]
[-74.19087219 -96.74906921]
[-86.58303070 -105.20538330]
[-98.58618927 -114.20533752]
[-110.17651367 -123.73106384]
[-121.33098602 -133.76364136]
[-132.02746582 -144.28315735]
[-142.24472046 -155.26873779]
[-151.96244812 -166.69854736]
[-161.16137695 -178.54989624]
[-169.82322693 -190.79928589]
[-177.93081665 -203.42236328]
[-185.46803284 -216.39407349]
[-192.41990662 -229.68867493]
[-198.77265930 -243.27975464]
[-204.51365662 -257.14035034]
[-209.63151550 -271.24291992]
[-214.11605835 -285.55947876]
[-217.95840454 -300.06158447]
[-221.15089417 -314.72048950]
[-223.68722534 -329.50701904]
[-225.56233215 -344.39187622]
[-226.77250671 -359.34548950]
[-227.31533813 -374.33816528]
[-227.18975830 -389.34014893]
[-226.39601135 -404.32162476]
[-224.93566895 -419.25289917]
[-222.81164551 -434.10427856]
[-220.02813721 -448.84628296]
[-216.59068298 -463.44967651]
[-212.50611877 -477.88543701]
[-207.78253174 -492.12490845]
[-202.42930603 -506.13983154]
[-196.45707703 -519.90234375]
[-189.87768555 -533.38519287]
[-182.70422363 -546.56152344]
[-174.95091248 -559.40527344]
[-166.63314819 -571.89086914]
[-157.76744080 -583.99353027]
[-148.37139893 -595.68920898]
[-138.46368408 -606.95471191]
[-128.06396484 -617.76770020]
[-117.19287872 -628.10668945]
[-105.87201691 -637.95117188]
[-94.12384796 -647.28149414]
[-81.97171021 -656.07928467]
[-69.43972015 -664.32696533]
[-56.55276108 -672.00817871]
[-43.33641815 -679.10772705]
[-29.81693649 -685.61145020]
[-16.02115440 -691.50646973]
[-1.97646129 -696.78106689]
[12.28925705 -701.42480469]
[26.74767876 -705.42846680]
[41.37009430 -708.78399658]
[56.12747574 -711.48486328]
[70.99052429 -713.52569580]
[85.92972565 -714.90234375]
[100.91542816 -715.61212158]
[115.91786957 -715.65362549]
[130.90727234 -715.02679443]
[145.85386658 -713.73284912]
[160.72798157 -711.77441406]
[175.50009155 -709.15527344]
[190.14085388 -705.88067627]
[204.62121582 -701.95715332]
[218.91241455 -697.39245605]
[232.98609924 -692.19567871]
[246.81430054 -686.37707520]
[260.36956787 -679.94830322]
[273.62503052 -672.92205811]
[286.55429077 -665.31225586]
[299.13174438 -657.13409424]
[311.33239746 -648.40374756]
[323.13204956 -639.13854980]
[334.50723267 -629.35693359]
[345.43539429 -619.07830811]
[355.89480591 -608.32305908]
[365.86471558 -597.11254883]
[375.32537842 -585.46899414]
[384.25793457 -573.41564941]
[392.64468384 -560.97625732]
[400.46896362 -548.17565918]
[407.71527100 -535.03924561]
[414.36917114 -521.59301758]
[420.41751099 -507.86376953]
[425.84823608 -493.87869263]
[430.65057373 -479.66558838]
[434.81500244 -465.25265503]
[438.33322144 -450.66851807]
[441.19830322 -435.94213867]
[443.40451050 -421.10275269]
[444.94747925 -406.17980957]
[445.82415771 -391.20294189]
[446.03277588 -376.20187378]
[445.57293701 -361.20642090]
[444.44555664 -346.24636841]
[442.65286255 -331.35134888]
[440.19845581 -316.55099487]
[437.08712769 -301.87466431]
[433.32513428 -287.35147095]
[428.91992188 -273.01031494]
[423.88018799 -258.87963867]
[418.21600342 -244.98748779]
[411.93859863 -231.36143494]
[405.06042480 -218.02856445]
[397.59512329 -205.01531982]
[389.55755615 -192.34754944]
[380.96362305 -180.05041504]
[371.83044434 -168.14831543]
[362.17614746 -156.66488647]
[352.01986694 -145.62292480]
[341.38177490 -135.04435730]
[330.28298950 -124.95018005]
[318.74560547 -115.36044312]
[306.79244995 -106.29418182]
[294.44726562 -97.76939392]
[281.73461914 -89.80300903]
[268.67968750 -82.41084290]
[255.30844116 -75.60757446]
[241.64739990 -69.40670013]
[227.72367859 -63.82054520]
[213.56494141 -58.86019135]
[199.19929504 -54.53548813]
[184.65525818 -50.85502625]
[169.96170044 -47.82611084]
[155.14779663 -45.45475006]
[140.24296570 -43.74566269]
[125.27679443 -42.70223236]
[110.27899933 -42.32653427]
[109.98632050 -27.32938957]
[109.69364166 -12.33224487]
[109.40097046 2.66489911]
[109.10829163 17.66204262]
[108.81561279 32.65918732]
[108.52294159 47.65633392]
[108.23026276 62.65347672]
[107.93758392 77.65061951]
[107.64491272 92.64776611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[5 157]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[11 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
