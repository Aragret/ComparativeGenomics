%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCACCCUCCUCUCCCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCxxxxxxxxxxCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[124.36389923 289.94122314]
[124.36389923 274.94122314]
[124.36389923 259.94122314]
[124.36389923 244.94120789]
[124.36389923 229.94120789]
[124.36389923 214.94120789]
[124.36389923 199.94120789]
[124.36389923 184.94120789]
[124.36389923 169.94120789]
[124.36389923 154.94120789]
[122.18706512 140.10000610]
[117.87947845 125.73182678]
[110.87112427 123.06106567]
[99.23707581 132.52938843]
[96.85440826 117.71955872]
[89.84605408 115.04879761]
[77.06869507 122.90622711]
[64.29133606 130.76365662]
[51.51398087 138.62107849]
[38.73662186 146.47850037]
[25.95926476 154.33592224]
[22.53807068 169.76547241]
[9.16388226 178.18608093]
[-6.22863340 174.60194397]
[-14.50736904 161.13948059]
[-10.76069641 145.78572083]
[2.78854847 137.64978027]
[18.10183907 141.55857849]
[30.87919807 133.70114136]
[43.65655518 125.84371948]
[56.43391037 117.98628998]
[69.21126556 110.12886810]
[81.98862457 102.27143860]
[89.97854614 89.57651520]
[91.53612518 74.65760040]
[93.09370422 59.73868942]
[94.65128326 44.81977463]
[84.99742126 35.37199783]
[82.60317230 22.27636719]
[88.12558746 10.37774181]
[99.33448792 3.94677925]
[101.20210266 -10.93650055]
[102.91478729 -25.83840370]
[104.47237396 -40.75731659]
[106.02995300 -55.67622757]
[103.65242767 -61.95753860]
[104.69475555 -67.62718201]
[107.97527313 -71.17876434]
[110.15210724 -86.01996613]
[112.32894897 -100.86117554]
[114.50578308 -115.70237732]
[116.68261719 -130.54357910]
[111.37436676 -129.93051147]
[105.58702087 -130.76786804]
[99.68598175 -133.19342041]
[94.06764984 -137.25796509]
[89.13957214 -142.91929626]
[85.29952240 -150.04043579]
[78.11701202 -163.20901489]
[70.93450165 -176.37759399]
[63.75199509 -189.54617310]
[49.47889328 -197.62149048]
[49.60635376 -214.02014160]
[64.00325775 -221.87260437]
[77.85929871 -213.10093689]
[76.92057800 -196.72868347]
[84.10308838 -183.56010437]
[91.28559113 -170.39152527]
[98.46810150 -157.22293091]
[105.87698364 -156.05738831]
[105.88709259 -171.05738831]
[105.89720154 -186.05737305]
[105.90731049 -201.05737305]
[99.17550659 -214.46195984]
[101.57929993 -229.26809692]
[112.20606232 -239.85450745]
[127.02124023 -242.20193481]
[140.40011597 -235.41917419]
[147.26324463 -222.08135986]
[145.00500488 -207.25231934]
[134.48255920 -196.56196594]
[129.88662720 -182.28340149]
[125.29067993 -168.00483704]
[120.69474030 -153.72628784]
[128.10362244 -152.56072998]
[138.98243713 -162.88793945]
[149.86126709 -173.21513367]
[153.96623230 -181.44927979]
[161.07548523 -183.64111328]
[172.16680908 -193.73976135]
[176.44218445 -201.88671875]
[183.59550476 -203.93017578]
[194.89450073 -213.79589844]
[197.40867615 -229.64071655]
[211.43473816 -237.42848206]
[226.21308899 -231.18507385]
[230.40702820 -215.69992065]
[220.79934692 -202.85188293]
[204.76022339 -202.49688721]
[193.46122742 -192.63116455]
[182.26545715 -182.64843750]
[171.17413330 -172.54978943]
[160.18847656 -162.33631897]
[149.30964661 -152.00910950]
[138.43081665 -141.68190002]
[131.52381897 -128.36674500]
[129.34698486 -113.52554321]
[127.17015076 -98.68433380]
[124.99331665 -83.84313202]
[122.81647491 -69.00193024]
[120.94886780 -54.11864471]
[119.39128113 -39.19973373]
[117.83370209 -24.28082275]
[120.28308868 -17.25613976]
[116.08538055 -9.06888771]
[114.21776581 5.81439257]
[125.09039307 18.60673332]
[123.34373474 35.64296722]
[109.57019806 46.37735748]
[108.01261902 61.29626846]
[106.45503235 76.21517944]
[104.89745331 91.13409424]
[117.10525513 90.31317902]
[129.16825867 101.03782654]
[132.24766541 121.42424011]
[136.55525208 135.79241943]
[140.94424438 121.44889832]
[150.40548706 109.80910492]
[163.54974365 102.58216095]
[178.44696045 100.82924652]
[192.90972900 104.80773926]
[204.81440735 113.93345642]
[212.41296387 126.86643219]
[214.58967590 141.70765686]
[211.02491760 156.27792358]
[202.24214172 168.43780518]
[189.53092957 176.40180969]
[174.75776672 179.00053406]
[160.09184265 175.85241699]
[147.68663025 167.41970825]
[139.36390686 154.94120789]
[139.36390686 169.94120789]
[139.36390686 184.94120789]
[139.36390686 199.94120789]
[139.36390686 214.94120789]
[139.36390686 229.94120789]
[139.36390686 244.94120789]
[139.36390686 259.94122314]
[139.36390686 274.94122314]
[139.36390686 289.94122314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 126]
[12 125]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[34 122]
[35 121]
[36 120]
[37 119]
[41 116]
[42 115]
[43 113]
[44 112]
[45 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[58 69]
[59 68]
[60 67]
[61 66]
[85 105]
[86 104]
[87 103]
[89 102]
[90 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
