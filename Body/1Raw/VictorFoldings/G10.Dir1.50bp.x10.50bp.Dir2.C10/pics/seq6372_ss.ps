%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUAAUCGGUGCCxxxxxxxxxxCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAACCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[132.09414673 340.48574829]
[131.79400635 325.48876953]
[131.49388123 310.49176025]
[131.19374084 295.49475098]
[130.89361572 280.49777222]
[130.59347534 265.50076294]
[130.29335022 250.50376892]
[129.99322510 235.50677490]
[129.69308472 220.50978088]
[127.15407562 205.72622681]
[122.43326569 191.48846436]
[117.71245575 177.25070190]
[112.99164581 163.01292419]
[108.27083588 148.77516174]
[98.11729431 150.16496277]
[87.74575806 149.43286133]
[77.60113525 146.54925537]
[68.13095856 141.57809448]
[59.76564026 134.67655945]
[52.89904785 126.09067535]
[39.80977631 133.41671753]
[31.54641342 146.90847778]
[16.66144371 146.37280273]
[3.57217121 153.69883728]
[-4.34661436 168.05937195]
[-20.74567986 168.11120605]
[-28.75507355 153.80101013]
[-20.13541603 139.84989929]
[-3.75387359 140.60957336]
[9.33539963 133.28352356]
[16.66252708 120.31578064]
[32.48373032 120.32744598]
[45.57300186 113.00139618]
[44.07474518 98.07640839]
[29.79046059 93.49828339]
[15.50617695 88.92015839]
[11.17665482 90.03212738]
[7.13604212 89.70660400]
[3.80941987 88.21900940]
[1.48497975 85.95654297]
[0.28905451 83.36241913]
[-13.58345318 77.65684509]
[-22.76740265 77.27858734]
[-27.67461205 71.69583130]
[-41.43017960 65.71382904]
[-55.18574905 59.73182678]
[-68.94132233 53.74982834]
[-85.16506195 56.14195633]
[-95.13510132 43.12157822]
[-88.59512329 28.08293724]
[-72.27288818 26.49650192]
[-62.95931625 39.99425888]
[-49.20375061 45.97625732]
[-35.44818115 51.95825958]
[-21.69261169 57.94026184]
[-7.87788248 63.78433990]
[5.99462509 69.48990631]
[20.08430290 74.63587952]
[34.36858749 79.21400452]
[48.65287018 83.79212952]
[53.67584610 74.01270294]
[60.50243378 65.58610535]
[68.79553986 58.83176041]
[78.16456604 53.98926544]
[88.18363953 51.21023560]
[98.41082764 50.55408859]
[100.20742035 35.66206741]
[102.00400543 20.77004814]
[99.91768646 11.81821537]
[103.98842621 5.59913588]
[106.08262634 -9.25395584]
[108.17683411 -24.10704613]
[94.48925018 -30.52122116]
[83.30150604 -40.68614960]
[75.60839844 -53.69797134]
[72.09399414 -68.39968109]
[73.07079315 -83.48402405]
[78.45193481 -97.60969543]
[87.75894165 -109.52066040]
[100.16423035 -118.15780640]
[114.56473541 -122.75311279]
[129.67997742 -122.89797974]
[144.16590881 -118.57951355]
[156.73445129 -110.18172455]
[166.26803589 -98.45132446]
[171.91893005 -84.43138123]
[173.18466187 -69.36853790]
[169.95268250 -54.60216522]
[162.51037598 -41.44528580]
[151.51950073 -31.06779861]
[137.95736694 -24.39246368]
[123.02992249 -22.01284599]
[120.93572235 -7.15975380]
[118.84152222 7.69333744]
[116.89602661 22.56663704]
[115.09943390 37.45865631]
[113.30284882 52.35067749]
[120.99558258 55.20481110]
[128.11077881 59.29117966]
[134.45268250 64.49737549]
[139.84686279 70.68019104]
[144.14492798 77.66953278]
[147.22863770 85.27315521]
[162.06002808 83.03045654]
[176.89141846 80.78775024]
[185.18902588 70.86521149]
[197.62760925 69.32854462]
[207.44029236 76.46202850]
[222.31359863 74.51653290]
[237.18690491 72.57103729]
[244.48381042 58.87670517]
[258.45114136 52.11705399]
[273.71820068 54.89131546]
[284.41448975 66.13272858]
[286.42703247 81.51873016]
[278.98202515 95.13310242]
[264.94216919 101.74083710]
[249.70608521 98.80112457]
[239.13238525 87.44434357]
[224.25909424 89.38983154]
[209.38578796 91.33532715]
[196.08488464 102.74655914]
[179.13412476 95.61914825]
[164.30273438 97.86184692]
[149.47132874 100.10455322]
[142.16839600 125.86985779]
[122.50860596 144.05435181]
[127.22941589 158.29212952]
[131.95022583 172.52989197]
[136.67103577 186.76765442]
[141.39184570 201.00541687]
[145.07699585 186.46513367]
[153.68623352 174.18177795]
[166.09690857 165.75711060]
[180.69064331 162.28971863]
[195.56439209 164.23175049]
[208.77861023 171.32997131]
[218.61010742 182.65876770]
[223.77687073 196.74082947]
[223.60513306 211.73985291]
[218.11729431 225.69992065]
[208.02896118 236.80062866]
[194.65570068 243.59442139]
[179.74137878 245.19538879]
[165.23086548 241.39476013]
[153.01634216 232.68812561]
[144.69007874 220.20964050]
[144.99021912 235.20664978]
[145.29034424 250.20364380]
[145.59048462 265.20065308]
[145.89060974 280.19763184]
[146.19075012 295.19464111]
[146.49087524 310.19161987]
[146.79101562 325.18862915]
[147.09114075 340.18563843]
[149.66687012 359.39541626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 155]
[2 154]
[3 153]
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[20 33]
[21 32]
[23 30]
[24 29]
[34 60]
[35 59]
[36 58]
[41 57]
[42 56]
[44 55]
[45 54]
[46 53]
[47 52]
[66 97]
[67 96]
[68 95]
[70 94]
[71 93]
[72 92]
[103 125]
[104 124]
[105 123]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
