%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[140.78492737 421.64837646]
[140.78492737 406.64837646]
[140.78492737 391.64837646]
[140.78492737 376.64837646]
[140.78492737 361.64837646]
[140.78492737 346.64837646]
[140.78492737 331.64837646]
[140.78492737 316.64837646]
[140.78492737 301.64837646]
[140.78492737 286.64837646]
[124.63847351 281.25912476]
[111.26714325 270.68582153]
[102.27452850 256.17532349]
[98.74628448 239.44779968]
[101.11910248 222.49298096]
[109.12674713 207.33338928]
[121.82979584 195.78314209]
[137.72583008 189.23081970]
[136.79020691 174.26002502]
[133.21084595 167.73823547]
[135.99412537 158.96867371]
[135.37014771 143.98164368]
[134.74617004 128.99462891]
[91.88439178 136.82905579]
[70.85609436 107.80358887]
[55.85690689 107.95962524]
[40.85771561 108.11566162]
[25.85852814 108.27169800]
[10.85933971 108.42773438]
[5.84675884 122.73332214]
[-3.75872755 134.45980835]
[-16.79720879 142.19116211]
[-31.69422722 144.99377441]
[-46.65089417 142.52923584]
[-59.86111450 135.09513855]
[-69.72969818 123.58919525]
[-75.06496429 109.40078735]
[-75.22264862 94.24325562]
[-70.18370819 79.94692993]
[-60.55662918 68.23816681]
[-47.50392151 60.53085327]
[-32.60176468 57.75569153]
[-17.64966583 60.24779129]
[-4.45316505 67.70622253]
[5.39419699 79.23033905]
[10.70330334 93.42855072]
[25.70249176 93.27251434]
[40.70167923 93.11647797]
[55.70087051 92.96044159]
[70.70005798 92.80440521]
[77.54195404 72.89689636]
[97.83216858 59.83181381]
[124.95617676 62.24850845]
[121.25001526 47.71357346]
[117.54385376 33.17863846]
[111.48084259 19.45858383]
[103.22854614 6.93262243]
[94.97625732 -5.59333944]
[86.72396851 -18.11930084]
[71.82901001 -24.98021126]
[70.59288788 -41.33270645]
[84.28723145 -50.35474014]
[98.82446289 -42.76521683]
[99.24993134 -26.37159157]
[107.50222015 -13.84562874]
[115.75450897 -1.31966674]
[124.00679779 11.20629501]
[123.76984406 -3.79183316]
[128.58589172 -17.99766541]
[137.89498901 -29.75950241]
[150.61476135 -37.70980453]
[165.26631165 -40.92419434]
[180.14608765 -39.02894211]
[193.52406311 -32.24440384]
[203.84477234 -21.35941315]
[209.90823364 -7.63955832]
[211.00946045 7.31996346]
[207.02041626 21.77982140]
[198.40489197 34.05878067]
[186.16462708 42.72917938]
[171.72276306 46.78290939]
[156.75846863 45.74865723]
[143.01161194 39.74666595]
[132.07878113 29.47247696]
[135.78494263 44.00741196]
[139.49110413 58.54235077]
[153.61592102 63.59110641]
[165.69590759 54.69875717]
[177.77589417 45.80640793]
[189.85588074 36.91405487]
[201.93586731 28.02170753]
[198.63546753 13.15472031]
[201.67372131 -1.76804507]
[210.52423096 -14.16112900]
[223.65357971 -21.87735558]
[238.78703308 -23.57983971]
[253.30262756 -18.97361946]
[264.68545532 -8.85674667]
[270.96337891 5.01796722]
[271.04867554 20.24664497]
[264.92660522 34.19082642]
[253.65785217 44.43459320]
[239.19476318 49.20315933]
[224.04319763 47.67033768]
[210.82821655 40.10169601]
[198.74822998 48.99404526]
[186.66824341 57.88639450]
[174.58825684 66.77874756]
[162.50827026 75.67109680]
[163.59667969 83.09169769]
[178.43788147 80.91485596]
[193.27909851 78.73802185]
[208.12033081 76.56141663]
[210.29670715 91.40268707]
[195.45593262 93.57923126]
[180.61473083 95.75606537]
[165.77351379 97.93289948]
[166.86193848 105.35350800]
[180.98674011 110.40225983]
[197.01420593 106.93058014]
[207.83261108 119.25510406]
[202.31292725 134.69741821]
[186.13331604 137.37179565]
[175.93798828 124.52706146]
[161.81318665 119.47830963]
[149.73318481 128.37065125]
[150.35716248 143.35766602]
[150.98114014 158.34469604]
[151.76098633 173.32440186]
[152.69662476 188.29519653]
[165.46546936 191.20899963]
[177.02172852 197.34347534]
[186.57000732 206.26841736]
[193.45523071 217.36180115]
[197.20753479 229.85324097]
[197.57438660 242.87734985]
[194.53747559 255.53381348]
[188.31356812 266.94955444]
[179.33901978 276.33895874]
[168.23921204 283.05801392]
[155.78492737 286.64837646]
[155.78492737 301.64837646]
[155.78492737 316.64837646]
[155.78492737 331.64837646]
[155.78492737 346.64837646]
[155.78492737 361.64837646]
[155.78492737 376.64837646]
[155.78492737 391.64837646]
[155.78492737 406.64837646]
[155.78492737 421.64837646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[21 128]
[22 127]
[23 126]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[53 86]
[54 85]
[55 84]
[56 67]
[57 66]
[58 65]
[59 64]
[87 109]
[88 108]
[89 107]
[90 106]
[91 105]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
