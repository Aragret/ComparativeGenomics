%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGxxxxxxxxxxUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 452.16131592]
[92.50000000 437.16131592]
[92.50000000 422.16131592]
[92.50000000 407.16131592]
[92.50000000 392.16131592]
[92.50000000 377.16131592]
[92.50000000 362.16131592]
[92.50000000 347.16131592]
[92.50000000 332.16131592]
[92.50000000 317.16131592]
[77.89575195 313.85711670]
[64.38652039 307.38262939]
[52.65122604 298.05966187]
[43.28042221 286.35327148]
[36.74658203 272.84854126]
[33.38029099 258.22140503]
[33.35351944 243.20471191]
[36.67081451 228.55157471]
[43.16894913 214.99758911]
[52.52492142 203.22390747]
[64.27202606 193.82304382]
[77.82312775 187.26895142]
[92.50000000 183.89324951]
[92.50000000 168.89324951]
[92.50000000 153.89324951]
[92.50000000 138.89324951]
[92.50000000 123.89324951]
[76.71799469 113.89705658]
[71.34153748 94.47758484]
[81.03559875 75.15322113]
[67.94244385 67.83411407]
[54.84928894 60.51500702]
[45.76732635 59.04196548]
[41.56217575 52.90499878]
[25.74398804 52.59590530]
[18.68127251 39.48227692]
[5.74321556 31.89236641]
[-7.19484043 24.30245781]
[-21.03805733 18.52618599]
[-35.53365326 14.66902733]
[-48.22275162 23.80800056]
[-63.81367874 22.60091591]
[-74.94487000 11.61772537]
[-76.36052704 -3.95564723]
[-67.39221191 -16.76593018]
[-52.27449417 -20.76450157]
[-38.14549637 -14.06335545]
[-31.67649460 0.17343025]
[-17.18089867 4.03058958]
[-13.45344353 -2.47756505]
[-5.99853325 -15.49387455]
[-2.27107787 -22.00202942]
[-12.93270397 -32.55331802]
[-23.59432983 -43.10461044]
[-39.58523941 -46.74094009]
[-44.17238617 -62.48546600]
[-32.63690948 -74.14157104]
[-16.84551620 -69.71845245]
[-13.04304028 -53.76623535]
[-2.38141394 -43.21494675]
[8.28021240 -32.66365433]
[13.04050255 -5.37729025]
[0.39506799 11.36440277]
[13.33312416 18.95431137]
[26.27117920 26.54421997]
[41.16395187 26.31043243]
[49.15208435 39.96694565]
[62.16839218 47.42185593]
[75.26155090 54.74095917]
[88.35470581 62.06006622]
[75.76476288 53.90571594]
[68.16571808 40.97302628]
[67.16996765 26.00611115]
[72.98880005 12.18072987]
[84.38755035 2.43041682]
[98.94756317 -1.17595875]
[113.57943726 2.12682176]
[125.17849731 11.63795757]
[131.28361511 25.33933067]
[130.59934998 40.32371521]
[123.27092743 53.41165161]
[110.85348511 61.82601166]
[123.79154205 54.23610306]
[136.72959900 46.64619446]
[124.24758911 30.68782806]
[127.71287537 4.39064407]
[137.22123718 -7.21069717]
[146.72959900 -18.81203842]
[156.23794556 -30.41337967]
[156.09230042 -46.45577240]
[168.63429260 -56.45967102]
[184.24278259 -52.75094604]
[190.94427490 -38.17461014]
[183.59794617 -23.91238022]
[167.83929443 -20.90502167]
[158.33093262 -9.30368042]
[148.82257080 2.29766130]
[139.31422424 13.89900208]
[147.17199707 26.67692375]
[155.02906799 39.45371628]
[169.67257690 36.20289230]
[184.31607056 32.95206451]
[198.95957947 29.70124054]
[213.60307312 26.45041466]
[228.24658203 23.19958878]
[242.89007568 19.94876289]
[257.04238892 10.61343956]
[269.93063354 21.62840462]
[262.91397095 37.06221771]
[246.14089966 34.59226227]
[231.49740601 37.84309006]
[216.85389709 41.09391403]
[202.21040344 44.34474182]
[187.56689453 47.59556580]
[172.92340088 50.84639359]
[158.27989197 54.09721756]
[144.31950378 59.58425140]
[131.38145447 67.17415619]
[118.44338989 74.76406860]
[126.36286926 85.65229797]
[128.72442627 98.35669708]
[125.52250671 110.31600189]
[117.82898712 119.31476593]
[107.50000000 123.89324951]
[107.50000000 138.89324951]
[107.50000000 153.89324951]
[107.50000000 168.89324951]
[107.50000000 183.89324951]
[122.17687225 187.26895142]
[135.72796631 193.82304382]
[147.47508240 203.22390747]
[156.83105469 214.99758911]
[163.32917786 228.55157471]
[166.64648438 243.20471191]
[166.61970520 258.22140503]
[163.25341797 272.84854126]
[156.71957397 286.35327148]
[147.34877014 298.05966187]
[135.61347961 307.38262939]
[122.10424805 313.85711670]
[107.50000000 317.16131592]
[107.50000000 332.16131592]
[107.50000000 347.16131592]
[107.50000000 362.16131592]
[107.50000000 377.16131592]
[107.50000000 392.16131592]
[107.50000000 407.16131592]
[107.50000000 422.16131592]
[107.50000000 437.16131592]
[107.50000000 452.16131592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[30 70]
[31 69]
[32 68]
[34 67]
[36 65]
[37 64]
[38 63]
[39 49]
[40 48]
[52 61]
[53 60]
[54 59]
[82 119]
[83 118]
[84 117]
[86 98]
[87 97]
[88 96]
[89 95]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
