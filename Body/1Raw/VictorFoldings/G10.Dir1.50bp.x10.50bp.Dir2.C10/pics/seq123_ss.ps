%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCUAUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUxxxxxxxxxxCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[110.14974976 282.49923706]
[110.14974976 267.49923706]
[110.14974976 252.49923706]
[110.14974976 237.49923706]
[110.14974976 222.49923706]
[110.14974976 207.49923706]
[110.14974976 192.49923706]
[110.14974976 177.49923706]
[110.14974976 162.49923706]
[110.14974976 147.49923706]
[95.67092896 146.52044678]
[82.68773651 141.39710999]
[72.30461121 132.92097473]
[65.29555511 122.15088654]
[51.39300156 127.78284454]
[41.50756454 140.13552856]
[26.80638123 137.74293518]
[12.90382576 143.37489319]
[-0.99872994 149.00685120]
[-14.90128613 154.63880920]
[-18.74165726 169.55717468]
[-30.49270248 179.24047852]
[-45.51469421 180.13697815]
[-58.03423309 172.11206055]
[-71.93679047 177.74401855]
[-77.86698914 192.39352417]
[-92.45143127 198.48200989]
[-107.03742981 192.39724731]
[-112.97136688 177.74925232]
[-106.73274994 163.22840881]
[-92.02282715 157.44966125]
[-77.56874847 163.84146118]
[-63.66619110 158.20950317]
[-60.26172638 143.73374939]
[-48.85117340 133.92236328]
[-33.67383575 132.69691467]
[-20.53324318 140.73625183]
[-6.63068676 135.10429382]
[7.27186918 129.47233582]
[21.17442513 123.84037781]
[30.06545639 111.89053345]
[45.76104355 113.88028717]
[59.66360092 108.24832916]
[60.42680740 88.64119720]
[70.17881775 71.61414337]
[86.70452118 61.03475571]
[84.52767944 46.19355011]
[82.35084534 31.35234451]
[80.17400360 16.51113892]
[77.99716949 1.66993392]
[72.36521149 -12.23262215]
[63.59900665 -24.40445900]
[54.83279800 -36.57629395]
[46.06659317 -48.74813080]
[37.30038452 -60.91996765]
[28.53417778 -73.09180450]
[19.76797104 -85.26364136]
[11.00176334 -97.43547821]
[-4.16571140 -103.67084503]
[-6.08099937 -119.95776367]
[7.22618389 -129.54165649]
[22.06654930 -122.56342316]
[23.17359924 -106.20169067]
[31.93980598 -94.02985382]
[40.70601273 -81.85801697]
[49.47222137 -69.68618011]
[58.23843002 -57.51433945]
[67.00463867 -45.34250259]
[75.77084351 -33.17066574]
[84.53704834 -20.99882889]
[83.34883881 -35.95169449]
[85.84682465 -50.74223328]
[91.87986755 -64.47549438]
[101.08291626 -76.32048798]
[112.89910126 -85.56050110]
[126.61344147 -91.63642120]
[141.39610291 -94.18061829]
[156.35260010 -93.03913116]
[170.57795715 -88.28103638]
[183.21139526 -80.19423676]
[193.48847961 -69.26805878]
[200.78736877 -56.16362381]
[204.66642761 -41.67387009]
[204.89091492 -26.67555046]
[201.44726562 -12.07619190]
[194.54383850 1.24081731]
[184.59835815 12.46968365]
[172.21261597 20.93096161]
[158.13604736 26.11267471]
[143.22039795 27.70128059]
[128.36822510 25.60065651]
[114.47817230 19.93790817]
[102.39073944 11.05568218]
[92.83837891 -0.50690305]
[95.01521301 14.33430290]
[97.19204712 29.17550850]
[99.36888885 44.01671219]
[101.54572296 58.85791779]
[109.76852417 59.15860367]
[117.92600250 61.11763763]
[125.68113708 64.71902466]
[132.70115662 69.87787628]
[138.67169189 76.44154358]
[143.31060791 84.19374847]
[146.38085938 92.86145782]
[147.70199585 102.12440491]
[147.15940857 111.62691498]
[162.15209961 112.09495544]
[177.14479065 112.56299591]
[192.13749695 113.03104401]
[202.42242432 101.25164032]
[217.88067627 98.89021301]
[231.21334839 107.06175232]
[236.12515259 121.90789795]
[230.29687500 136.41876221]
[216.48046875 143.74276733]
[201.19961548 140.42172241]
[191.66944885 128.02374268]
[176.67675781 127.55569458]
[161.68406677 127.08765411]
[146.69136047 126.61961365]
[141.30595398 131.83952332]
[154.23889160 139.43814087]
[167.17182922 147.03677368]
[180.10476685 154.63539124]
[193.03770447 162.23402405]
[207.48281860 166.27615356]
[218.56712341 176.38250732]
[223.92251587 190.39392090]
[222.40487671 205.31694031]
[214.33842468 217.96337891]
[201.44650269 225.63139343]
[186.48339844 226.68275452]
[172.64587402 220.89286804]
[162.89022827 209.49868774]
[159.30068970 194.93428040]
[152.10929871 181.77053833]
[144.91792297 168.60681152]
[137.72653198 155.44306946]
[130.53515625 142.27932739]
[125.14974976 147.49923706]
[125.14974976 162.49923706]
[125.14974976 177.49923706]
[125.14974976 192.49923706]
[125.14974976 207.49923706]
[125.14974976 222.49923706]
[125.14974976 237.49923706]
[125.14974976 252.49923706]
[125.14974976 267.49923706]
[125.14974976 282.49923706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[14 43]
[15 42]
[17 40]
[18 39]
[19 38]
[20 37]
[24 33]
[25 32]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
