%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAxxxxxxxxxxUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[131.49124146 295.09381104]
[130.86726379 280.10681152]
[130.24328613 265.11978149]
[129.61930847 250.13276672]
[128.99533081 235.14575195]
[128.37135315 220.15873718]
[127.74738312 205.17172241]
[127.12340546 190.18470764]
[113.46716309 183.97929382]
[101.76753998 193.36645508]
[90.06791687 202.75361633]
[78.36829376 212.14077759]
[66.66867065 221.52793884]
[54.96904373 230.91510010]
[52.77407074 243.66798401]
[42.78184509 251.24256897]
[30.70935822 249.99261475]
[18.81697845 259.13433838]
[6.92459965 268.27609253]
[-4.96778011 277.41781616]
[-13.84051037 291.86465454]
[-30.17897224 287.33795166]
[-30.35211563 270.38488770]
[-14.10951424 265.52545166]
[-2.21713448 256.38369751]
[9.67524529 247.24197388]
[21.56762505 238.10023499]
[27.34772301 221.55967712]
[45.58188248 219.21548462]
[57.28150558 209.82832336]
[68.98113251 200.44116211]
[80.68075562 191.05398560]
[92.38037872 181.66682434]
[104.08000183 172.27966309]
[100.67702484 157.67077637]
[86.03352356 154.41995239]
[71.39002228 151.16912842]
[56.74652100 147.91830444]
[42.10301971 144.66748047]
[29.80507278 154.32638550]
[14.17742920 153.76890564]
[2.59898400 143.25825500]
[0.53672498 127.75725555]
[8.96438789 114.58499146]
[23.90268707 109.96101379]
[38.29821396 116.06861115]
[45.35384369 130.02397156]
[59.99734497 133.27479553]
[74.64084625 136.52561951]
[89.28434753 139.77644348]
[103.92784882 143.02728271]
[73.71459961 131.82380676]
[60.84764862 103.88924408]
[70.96403503 76.40431976]
[61.45567322 64.80297852]
[51.94731522 53.20163727]
[36.18865585 50.19427872]
[28.84233665 35.93205261]
[35.54382706 21.35571480]
[51.15231323 17.64698792]
[63.69430542 27.65088844]
[63.54865646 43.69327927]
[73.05701447 55.29462051]
[82.56537628 66.89596558]
[113.28870392 62.96699524]
[138.06538391 84.04058075]
[139.23194885 118.10050201]
[141.09956360 103.21722412]
[127.24308014 97.20270538]
[115.64324188 87.52693939]
[107.24040985 74.97428894]
[102.71575928 60.56233978]
[102.43607330 45.45941162]
[106.42404175 30.88982773]
[114.35636902 18.03467751]
[125.59001923 7.93607187]
[139.21432495 1.41265965]
[154.12483215 -1.00673592]
[169.11280823 0.87401503]
[182.96324158 6.90244818]
[194.55335999 16.58986664]
[202.94357300 29.15095329]
[207.45375061 43.56743622]
[207.71826172 58.67063904]
[203.71565247 73.23621368]
[195.77041626 86.08338165]
[184.52662659 96.17070007]
[170.89578247 102.68041992]
[155.98284912 105.08483887]
[154.11523438 119.96811676]
[166.00761414 129.10984802]
[179.91017151 123.47789764]
[193.81272888 117.84593964]
[207.71528625 112.21398163]
[221.61784363 106.58202362]
[227.38262939 94.99664307]
[239.12918091 90.61059570]
[250.33421326 95.27478027]
[264.35092163 89.93327332]
[278.36764526 84.59175873]
[292.38436890 79.25024414]
[298.61804199 64.72727203]
[313.32598877 58.94352722]
[327.78222656 65.33040619]
[333.41015625 80.09868622]
[326.87078857 94.48660278]
[312.04385376 99.95806885]
[297.72586060 93.26696014]
[283.70916748 98.60847473]
[269.69244385 103.94998169]
[255.67572021 109.29149628]
[245.38909912 123.47547913]
[227.24980164 120.48458099]
[213.34724426 126.11653900]
[199.44468689 131.74848938]
[185.54212952 137.38044739]
[171.63957214 143.01240540]
[171.79560852 158.01159668]
[185.81231689 163.35310364]
[200.98159790 158.13079834]
[214.44464111 166.85581970]
[215.87374878 182.83509827]
[204.17263794 193.81068420]
[188.31739807 191.36305237]
[180.47080994 177.36982727]
[166.45410156 172.02830505]
[160.36817932 176.41140747]
[170.10813904 187.81900024]
[179.84811401 199.22659302]
[189.58807373 210.63417053]
[199.32803345 222.04176331]
[211.08470154 231.35739136]
[210.74014282 246.35343933]
[198.56803894 255.11927795]
[184.23608398 250.69262695]
[179.12733459 236.59039307]
[171.39459229 223.73719788]
[163.66183472 210.88400269]
[155.92909241 198.03080750]
[148.19633484 185.17761230]
[142.11042786 189.56072998]
[142.73440552 204.54774475]
[143.35838318 219.53475952]
[143.98234558 234.52177429]
[144.60632324 249.50878906]
[145.23030090 264.49578857]
[145.85427856 279.48281860]
[146.47825623 294.46984863]
[153.17825317 310.04373169]
[140.06771851 320.79318237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[8 141]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[17 27]
[18 26]
[19 25]
[20 24]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[54 64]
[55 63]
[56 62]
[67 90]
[68 89]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
