%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGxxxxxxxxxxCAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.67762756 274.95678711]
[88.67762756 259.95678711]
[88.67762756 244.95677185]
[88.67762756 229.95677185]
[88.67762756 214.95677185]
[88.67762756 199.95677185]
[88.67762756 184.95677185]
[88.67762756 169.95677185]
[88.67762756 154.95677185]
[88.67762756 139.95677185]
[75.22166443 133.32827759]
[63.32928467 142.47001648]
[51.43690491 151.61174011]
[49.24995422 167.03428650]
[37.05916595 176.13589478]
[22.36959839 173.95593262]
[10.47721863 183.09767151]
[-1.41516066 192.23939514]
[-1.90290856 207.86936951]
[-12.36178780 219.49459839]
[-27.85343552 221.62600708]
[-41.06317139 213.25718689]
[-45.75375748 198.33967590]
[-39.71044540 183.91703796]
[-25.78670311 176.79920959]
[-10.55689526 180.34701538]
[1.33548486 171.20529175]
[13.22786427 162.06355286]
[14.89853764 147.30738831]
[26.82887459 137.86695862]
[42.29516983 139.71936035]
[54.18754959 130.57763672]
[66.07993317 121.43589783]
[62.40186691 93.49530792]
[77.68167114 71.51423645]
[102.40361786 65.86586761]
[106.71120453 51.49768448]
[111.01879120 37.12950134]
[115.32637024 22.76131821]
[119.63395691 8.39313316]
[112.72695923 -4.92202187]
[98.50018311 -9.67583656]
[84.27339935 -14.42965221]
[68.32163239 -10.62529182]
[57.24916458 -22.72208595]
[62.44639587 -38.27589035]
[78.56686401 -41.28628159]
[89.02721405 -28.65643120]
[103.25399780 -23.90261650]
[117.48077393 -19.14880180]
[125.37274170 -30.45623398]
[136.87489319 -35.92663956]
[148.52799988 -35.04126358]
[155.71051025 -48.20984268]
[162.89302063 -61.37842560]
[170.07553101 -74.54701233]
[157.66394043 -82.99207306]
[146.13987732 -92.61303711]
[135.61434937 -103.31723785]
[126.18870544 -115.00159454]
[117.95373535 -127.55356598]
[110.98874664 -140.85227966]
[105.36081696 -154.76965332]
[101.12413788 -169.17164612]
[98.31952667 -183.91955566]
[96.97399139 -198.87135315]
[97.10047913 -213.88304138]
[98.69777679 -228.81004333]
[101.75051117 -243.50860596]
[106.22927094 -257.83715820]
[112.09092712 -271.65771484]
[119.27902222 -284.83715820]
[127.72433472 -297.24859619]
[137.34553528 -308.77246094]
[148.04994202 -319.29779053]
[159.73448181 -328.72317505]
[172.28662109 -336.95791626]
[185.58547974 -343.92263794]
[199.50296021 -349.55029297]
[213.90502930 -353.78665161]
[228.65299988 -356.59097290]
[243.60482788 -357.93621826]
[258.61651611 -357.80944824]
[273.54348755 -356.21182251]
[288.24197388 -353.15881348]
[302.57043457 -348.67977905]
[316.39089966 -342.81784058]
[329.57019043 -335.62948608]
[341.98144531 -327.18389893]
[353.50512695 -317.56250000]
[364.03024292 -306.85784912]
[373.45541382 -295.17312622]
[381.68988037 -282.62081909]
[388.65432739 -269.32183838]
[394.28170776 -255.40425110]
[398.51779175 -241.00207520]
[401.32183838 -226.25405884]
[402.66677856 -211.30220032]
[402.53967285 -196.29052734]
[400.94177246 -181.36358643]
[397.88845825 -166.66514587]
[393.40911865 -152.33676147]
[387.54690552 -138.51644897]
[380.35830688 -125.33728027]
[371.91247559 -112.92619324]
[362.29083252 -101.40270996]
[351.58599854 -90.87782288]
[339.90109253 -81.45288086]
[327.34860229 -73.21866608]
[314.04946899 -66.25447845]
[300.13177490 -60.62737656]
[285.72952271 -56.39156723]
[270.98144531 -53.58784103]
[256.02957153 -52.24319458]
[241.01788330 -52.37058640]
[226.09097290 -53.96878433]
[211.39260864 -57.02239609]
[197.06431580 -61.50201797]
[183.24411011 -67.36450195]
[176.06159973 -54.19591904]
[168.87908936 -41.02733612]
[161.69657898 -27.85875320]
[168.94166565 -9.08251667]
[157.64279175 9.76331615]
[134.00213623 12.70071793]
[129.69456482 27.06890297]
[125.38697052 41.43708801]
[121.07939148 55.80527115]
[116.77180481 70.17345428]
[122.98448944 73.98923492]
[128.32804871 79.10063934]
[132.53225708 85.30939484]
[135.37219238 92.36096191]
[136.67988586 99.95482635]
[136.35371399 107.75734711]
[134.36485291 115.41635895]
[130.76045227 122.57710266]
[125.66337585 128.89860535]
[119.26847839 134.06987000]
[111.83528900 137.82502747]
[103.67762756 139.95677185]
[103.67762756 154.95677185]
[103.67762756 169.95677185]
[103.67762756 184.95677185]
[103.67762756 199.95677185]
[103.67762756 214.95677185]
[103.67762756 229.95677185]
[103.67762756 244.95677185]
[103.67762756 259.95678711]
[103.67762756 274.95678711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 33]
[12 32]
[13 31]
[16 28]
[17 27]
[18 26]
[36 129]
[37 128]
[38 127]
[39 126]
[40 125]
[41 50]
[42 49]
[43 48]
[53 122]
[54 121]
[55 120]
[56 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
