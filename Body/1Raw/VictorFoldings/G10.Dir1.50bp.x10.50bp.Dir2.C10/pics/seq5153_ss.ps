%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.91920471 250.00524902]
[86.60714722 235.00848389]
[86.29508972 220.01173401]
[85.98303223 205.01498413]
[85.67098236 190.01823425]
[85.35892487 175.02146912]
[85.04686737 160.02471924]
[84.73480988 145.02796936]
[84.42275238 130.03121948]
[72.16038513 121.39209747]
[57.93360901 126.14591217]
[43.70682907 130.89971924]
[29.48004913 135.65353394]
[18.84336090 147.36555481]
[4.32004309 144.06063843]
[-9.90673637 148.81445312]
[-8.30994892 163.78991699]
[-9.97022438 178.75846863]
[-14.80990791 193.02000427]
[-22.60264015 205.90750122]
[-32.98394012 216.81816101]
[-45.46825409 225.24169922]
[-59.47167206 230.78411865]
[-74.33922577 233.18618774]
[-89.37552643 232.33557129]
[-103.87731171 228.27203369]
[-117.16630554 221.18565369]
[-128.62094116 211.40786743]
[-137.70549011 199.39598083]
[-143.99502563 185.71183777]
[-147.19538879 170.99546814]
[-147.15690613 155.93516541]
[-143.88134766 141.23535156]
[-137.52192688 127.58353424]
[-128.37609863 115.61825562]
[-116.87162018 105.89914703]
[-103.54658508 98.88079071]
[-89.02421570 94.89144135]
[-73.98375702 94.11769867]
[-59.12867737 96.59574890]
[-45.15377426 102.20967865]
[-32.71268463 110.69692230]
[-22.38729858 121.66052246]
[-14.66055107 134.58767700]
[-0.43377164 129.83386230]
[9.18532085 118.46186829]
[24.72623444 121.42675781]
[38.95301437 116.67294312]
[53.17979431 111.91912842]
[67.40657043 107.16531372]
[78.53228760 84.58969879]
[97.87683105 80.63554382]
[99.74444580 65.75226593]
[101.61206055 50.86898422]
[103.47966766 35.98570251]
[105.34728241 21.10242271]
[95.92366028 8.69947529]
[98.02970886 -6.36768246]
[109.91209412 -15.27522945]
[111.77970886 -30.15851021]
[113.64732361 -45.04179001]
[111.60264587 -54.01235962]
[115.71173096 -60.21406174]
[117.88856506 -75.05526733]
[120.06540680 -89.89646912]
[122.24224091 -104.73767853]
[124.41908264 -119.57888031]
[110.50669861 -125.40094757]
[98.47978973 -134.50064087]
[89.09436798 -146.30592346]
[82.94041443 -160.07470703]
[80.40476990 -174.94149780]
[81.64682770 -189.97174072]
[86.58851624 -204.22061157]
[94.91918182 -216.79243469]
[106.11516571 -226.89692688]
[119.47267914 -233.89891052]
[134.15205383 -237.35824585]
[149.23051453 -237.05744934]
[163.76025391 -233.01545715]
[176.82788086 -225.48632812]
[187.61198425 -214.94337463]
[195.43466187 -202.04931641]
[199.80415344 -187.61468506]
[200.44580078 -172.54687500]
[197.31927490 -157.79304504]
[190.62110901 -144.28062439]
[180.77233887 -132.85902405]
[168.39210510 -124.24623108]
[154.25859070 -118.98363495]
[139.26028442 -117.40204620]
[137.08345032 -102.56083679]
[134.90661621 -87.71963501]
[132.72976685 -72.87842560]
[130.55293274 -58.03722382]
[128.53060913 -43.17417526]
[126.66298676 -28.29089546]
[124.79537964 -13.40761662]
[134.10850525 -1.84037077]
[132.42649841 13.27999592]
[120.23056030 22.97003746]
[118.36295319 37.85331726]
[116.49533844 52.73659515]
[114.62772369 67.61987305]
[112.76010895 82.50315857]
[122.26847076 94.10449982]
[137.22871399 95.19580841]
[152.18896484 96.28711700]
[167.14921570 97.37842560]
[177.44018555 89.53305817]
[189.91580200 90.78929138]
[197.90632629 99.92487335]
[212.84063721 101.32717133]
[227.51339722 94.00310516]
[241.04150391 103.27252960]
[239.50840759 119.59986115]
[224.49121094 126.18893433]
[211.43832397 116.26148224]
[196.50401306 114.85917664]
[181.00834656 123.03746033]
[166.05790710 112.33867645]
[151.09765625 111.24736786]
[136.13740540 110.15605927]
[121.17716217 109.06474304]
[115.73774719 114.22834778]
[128.34339905 122.35839081]
[140.94905090 130.48843384]
[153.55470276 138.61846924]
[168.20886230 141.82090759]
[179.11315918 152.12121582]
[183.14454651 166.56932068]
[179.14842224 181.02722168]
[168.26928711 191.35411072]
[153.62298584 194.59230042]
[139.40429688 189.81436157]
[129.68551636 178.38871765]
[127.24996948 163.58940125]
[119.78628540 150.57810974]
[112.32260132 137.56683350]
[104.85891724 124.55555725]
[99.41950989 129.71916199]
[99.73156738 144.71591187]
[100.04361725 159.71266174]
[100.35567474 174.70941162]
[100.66773224 189.70617676]
[100.97978973 204.70292664]
[101.29184723 219.69967651]
[101.60390472 234.69642639]
[101.91595459 249.69319153]
[104.50695801 268.90090942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 50]
[11 49]
[12 48]
[13 47]
[15 45]
[16 44]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[59 98]
[60 97]
[61 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[106 124]
[107 123]
[108 122]
[109 121]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
