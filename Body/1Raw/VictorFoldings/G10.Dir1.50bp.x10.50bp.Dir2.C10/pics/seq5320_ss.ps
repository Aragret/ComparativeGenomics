%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCxxxxxxxxxxUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.08184814 450.92050171]
[92.08184814 435.92050171]
[92.08184814 420.92050171]
[92.08184814 405.92050171]
[92.08184814 390.92050171]
[92.08184814 375.92050171]
[92.08184814 360.92050171]
[92.08184814 345.92050171]
[92.08184814 330.92050171]
[92.08184814 315.92050171]
[77.38628387 313.01971436]
[63.53462982 307.30572510]
[51.05997467 298.99639893]
[40.44279480 288.40954590]
[32.09247971 275.95074463]
[26.33150864 262.09777832]
[23.38303375 247.38233948]
[23.36221123 232.36962891]
[26.27171135 217.63664246]
[32.00154877 203.74998474]
[40.33324051 191.24409485]
[50.94812393 180.60064697]
[63.43955994 172.23004150]
[77.32849121 166.45552063]
[92.08184814 163.50079346]
[92.08184814 148.50079346]
[92.08184814 133.50079346]
[92.08184814 118.50079346]
[84.94262695 110.99018860]
[82.91760254 101.62106323]
[85.82501984 93.30455780]
[92.06013489 88.23413086]
[87.75254822 73.86595154]
[83.44496155 59.49776459]
[79.13738251 45.12958145]
[64.89900970 44.09533310]
[51.90050888 38.26555634]
[41.70154572 28.36218262]
[35.51819611 15.59457302]
[34.07794189 1.51184547]
[37.53416824 -12.18507767]
[45.45008469 -23.84890366]
[56.85383987 -32.08408737]
[52.84609985 -46.53877640]
[48.83835983 -60.99346542]
[44.83061981 -75.44815063]
[40.82287979 -89.90283966]
[25.92667389 -87.94091797]
[10.90238857 -88.07131958]
[-3.95752144 -90.29150391]
[-18.36380386 -94.55825043]
[-32.03603745 -100.78852081]
[-44.70808411 -108.86102295]
[-56.13328552 -118.61862946]
[-66.08924103 -129.87141418]
[-74.38215637 -142.40032959]
[-80.85060883 -155.96148682]
[-85.36869049 -170.29093933]
[-87.84844971 -185.10974121]
[-88.24161530 -200.12945557]
[-86.54054260 -215.05769348]
[-82.77834320 -229.60389709]
[-77.02824402 -243.48490906]
[-69.40217590 -256.43054199]
[-60.04857635 -268.18878174]
[-49.14952087 -278.53076172]
[-36.91716766 -287.25518799]
[-23.58961296 -294.19223022]
[-9.42628956 -299.20684814]
[5.29711342 -302.20144653]
[20.29400063 -303.11770630]
[35.27244949 -301.93780518]
[49.94090652 -298.68472290]
[64.01383972 -293.42175293]
[77.21731567 -286.25137329]
[89.29433441 -277.31317139]
[100.00979614 -266.78106689]
[109.15513611 -254.86013794]
[116.55233765 -241.78237915]
[122.05739594 -227.80238342]
[125.56317139 -213.19226074]
[127.00141144 -198.23640442]
[126.34413147 -183.22593689]
[123.60411072 -168.45303345]
[118.83470154 -154.20527649]
[112.12873077 -140.75997925]
[103.61672974 -128.37886047]
[93.46439362 -117.30292511]
[81.86933899 -107.74777985]
[69.05726624 -99.89940643]
[55.27756882 -93.91058350]
[59.28530884 -79.45589447]
[63.29304886 -65.00120544]
[67.30078888 -50.54651642]
[71.30853271 -36.09182739]
[87.03633118 -34.41224289]
[100.95551300 -26.81888771]
[110.92949677 -14.44378376]
[115.41445160 0.84452480]
[113.69824219 16.72308159]
[106.01327515 30.76747322]
[93.50556183 40.82199478]
[97.81314850 55.19017792]
[102.12073517 69.55836487]
[106.42831421 83.92654419]
[118.32069397 93.06828308]
[133.31340027 93.53632355]
[148.30609131 94.00436401]
[163.29878235 94.47241211]
[178.29148865 94.94045258]
[188.57641602 83.16104889]
[204.03466797 80.79962158]
[217.36734009 88.97116089]
[222.27912903 103.81731415]
[216.45086670 118.32817841]
[202.63446045 125.65217590]
[187.35359192 122.33113098]
[177.82344055 109.93314362]
[162.83074951 109.46510315]
[147.83804321 108.99706268]
[132.84535217 108.52902222]
[117.85265350 108.06098175]
[107.08184814 118.50079346]
[107.08184814 133.50079346]
[107.08184814 148.50079346]
[107.08184814 163.50079346]
[121.83519745 166.45552063]
[135.72413635 172.23004150]
[148.21556091 180.60064697]
[158.83044434 191.24409485]
[167.16213989 203.74998474]
[172.89198303 217.63664246]
[175.80148315 232.36962891]
[175.78065491 247.38233948]
[172.83218384 262.09777832]
[167.07121277 275.95074463]
[158.72090149 288.40954590]
[148.10371399 298.99639893]
[135.62905884 307.30572510]
[121.77741241 313.01971436]
[107.08184814 315.92050171]
[107.08184814 330.92050171]
[107.08184814 345.92050171]
[107.08184814 360.92050171]
[107.08184814 375.92050171]
[107.08184814 390.92050171]
[107.08184814 405.92050171]
[107.08184814 420.92050171]
[107.08184814 435.92050171]
[107.08184814 450.92050171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[25 126]
[26 125]
[27 124]
[28 123]
[32 105]
[33 104]
[34 103]
[35 102]
[43 95]
[44 94]
[45 93]
[46 92]
[47 91]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
