%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUxxxxxxxxxxCUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[91.86318970 243.48632812]
[91.55520630 228.48948669]
[91.24723053 213.49264526]
[90.93925476 198.49581909]
[90.63127899 183.49897766]
[90.32329559 168.50213623]
[90.01531982 153.50529480]
[89.70734406 138.50846863]
[89.39936829 123.51162720]
[75.83747101 117.10264587]
[64.05533600 126.38603210]
[52.27319717 135.66941833]
[40.49105835 144.95280457]
[35.64838791 152.77229309]
[28.37036896 154.30285645]
[16.40011024 163.34237671]
[19.45298767 178.29707336]
[15.70661640 193.09326172]
[5.90483856 204.79318237]
[-8.00619411 211.07377625]
[-23.26443672 210.68804932]
[-36.84035492 203.71257019]
[-46.03843689 191.53233337]
[-49.03240204 176.56575012]
[-45.22779083 161.78442383]
[-35.38001633 150.12319946]
[-21.44435692 143.89743042]
[-6.18775177 144.34324646]
[7.36059093 151.37211609]
[19.33084869 142.33259583]
[31.20767212 133.17066956]
[42.98981094 123.88728333]
[54.77194595 114.60389709]
[66.55408478 105.32051086]
[78.58824158 90.42363739]
[92.93951416 89.03093719]
[87.52088928 75.04385376]
[82.10226440 61.05677414]
[76.68363953 47.06969070]
[71.26501465 33.08260727]
[59.38284302 32.29619980]
[48.65478516 25.42074394]
[42.16775513 13.49357700]
[42.22020721 -0.91922945]
[29.88892174 -9.45968819]
[17.55763817 -18.00014687]
[5.22635508 -26.54060555]
[-7.19195938 -34.95401764]
[-19.69599533 -43.23949051]
[-32.20003128 -51.52496719]
[-48.59247208 -51.99390411]
[-56.14341736 -66.55120850]
[-47.08510590 -80.22158051]
[-30.73594666 -78.94210815]
[-23.91455650 -64.02899933]
[-11.41052055 -55.74352646]
[1.09351528 -47.45805359]
[8.45195198 -46.37842178]
[13.76681423 -38.87189102]
[26.09809685 -30.33143044]
[38.42938232 -21.79097176]
[50.76066589 -13.25051308]
[64.25605011 -19.79838371]
[65.17946625 -34.76993561]
[66.10287476 -49.74148560]
[51.67892456 -54.10568619]
[38.65052795 -61.67916870]
[27.72029305 -72.05349731]
[19.47767448 -84.66919708]
[14.36718750 -98.84593201]
[12.66443253 -113.81915283]
[14.46123695 -128.78137207]
[19.66070175 -142.92572021]
[27.98242760 -155.48937988]
[38.97763062 -165.79481506]
[52.05335999 -173.28628540]
[66.50444794 -177.55976868]
[81.55157471 -178.38481140]
[96.38327026 -175.71690369]
[110.19966888 -169.69995117]
[122.25566864 -160.65840149]
[131.90112305 -149.07989502]
[138.61584473 -135.58880615]
[142.03771973 -120.91272736]
[141.98222351 -105.84310150]
[138.45234680 -91.19261932]
[131.63844299 -77.75135803]
[121.90797424 -66.24420166]
[109.78570557 -57.29169846]
[95.92536163 -51.37665939]
[81.07442474 -48.81806946]
[80.15101624 -33.84651947]
[79.22760010 -18.87496948]
[96.45520020 4.60734797]
[85.25209808 27.66398239]
[90.67072296 41.65106583]
[96.08934784 55.63814926]
[101.50797272 69.62522888]
[106.92659760 83.61231232]
[119.43063354 91.89778900]
[134.42352295 91.43586731]
[149.41639709 90.97393799]
[153.93040466 78.48479462]
[162.41426086 68.30987549]
[173.83299255 61.65632629]
[186.80514526 59.30379486]
[199.76995850 61.51310730]
[211.17510986 67.99755859]
[219.66259766 77.95990753]
[224.23045349 90.19032288]
[239.22966003 90.34432220]
[254.22886658 90.49832153]
[266.64898682 80.34352112]
[282.30117798 83.86328888]
[289.17840576 98.35754395]
[282.00503540 112.70753479]
[266.28390503 115.90518951]
[254.07487488 105.49752808]
[239.07566833 105.34352875]
[224.07644653 105.18953705]
[217.07026672 120.50667572]
[204.05061340 131.27929688]
[187.58560181 135.32022095]
[170.95018005 131.77632141]
[157.47473145 121.30799866]
[149.87832642 105.96682739]
[134.88543701 106.42874908]
[119.89255524 106.89067841]
[133.27151489 113.67327118]
[146.65046692 120.45586395]
[161.62715149 121.29199219]
[174.71304321 128.62405396]
[183.24609375 140.96046448]
[185.49038696 155.79161072]
[180.98936462 170.10038757]
[170.65867615 180.97590637]
[156.59992981 186.20574951]
[141.67309570 184.72601318]
[128.91476440 176.83770752]
[120.92041779 164.14558411]
[119.31649017 149.23027039]
[111.85634613 136.21696472]
[104.39620209 123.20364380]
[104.70417786 138.20048523]
[105.01216125 153.19732666]
[105.32013702 168.19415283]
[105.62811279 183.19099426]
[105.93608856 198.18783569]
[106.24407196 213.18467712]
[106.55204773 228.18151855]
[106.86002350 243.17834473]
[109.44580078 262.38677979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 34]
[11 33]
[12 32]
[13 31]
[15 30]
[16 29]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[44 62]
[45 61]
[46 60]
[47 59]
[48 57]
[49 56]
[50 55]
[63 93]
[64 92]
[65 91]
[100 128]
[101 127]
[102 126]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
