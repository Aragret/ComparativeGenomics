%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAxxxxxxxxxxACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.43721008 241.23411560]
[95.12515259 226.23736572]
[94.81310272 211.24061584]
[94.50104523 196.24385071]
[94.18898773 181.24710083]
[93.87693024 166.25035095]
[93.56487274 151.25360107]
[93.25281525 136.25683594]
[92.94076538 121.26008606]
[78.71398163 116.50627136]
[69.44903564 128.30291748]
[60.18408585 140.09954834]
[50.91913605 151.89619446]
[41.65418625 163.69284058]
[36.62603378 179.88400269]
[19.67568970 179.53451538]
[15.31919575 163.14985657]
[29.85754585 154.42788696]
[39.12249374 142.63124084]
[48.38744354 130.83460999]
[57.65239334 119.03796387]
[66.91734314 107.24132538]
[54.47464752 115.61863708]
[39.62649918 113.48966980]
[30.03902817 101.95362091]
[30.66226959 86.96657562]
[41.17444229 76.26638031]
[56.14808655 75.37756348]
[67.85330963 84.76080322]
[59.60102081 72.23484039]
[51.34873199 59.70887756]
[45.52823257 56.35785675]
[42.74045944 51.31210327]
[43.02637482 46.48574448]
[35.30228806 33.62733841]
[27.57820320 20.76893806]
[19.85411835 7.91053534]
[12.13003349 -4.94786692]
[1.35922539 -15.38767910]
[-11.73392868 -22.70678520]
[-24.82708359 -30.02589035]
[-37.92023849 -37.34499741]
[-51.01339340 -44.66410065]
[-64.10654449 -51.98320770]
[-77.34912872 -59.02834320]
[-90.73542023 -65.79645538]
[-104.12170410 -72.56457520]
[-120.98500061 -74.31544495]
[-123.97077942 -91.00440216]
[-108.76057434 -98.49346161]
[-97.35358429 -85.95085907]
[-83.96730042 -79.18273926]
[-70.58101654 -72.41462708]
[-65.78824615 -73.05091858]
[-60.55304337 -70.63763428]
[-56.78744125 -65.07636261]
[-43.69428635 -57.75725555]
[-30.60113144 -50.43815231]
[-17.50797844 -43.11904526]
[-4.41482353 -35.79993820]
[8.67833138 -28.48083305]
[1.31023610 -41.54648209]
[-2.90928745 -55.94077301]
[-3.76122189 -70.91656494]
[-1.20134699 -85.69651794]
[4.63746500 -99.51347351]
[13.45214558 -111.65025330]
[24.78516388 -121.47688293]
[38.04826736 -128.48330688]
[52.55303192 -132.30586243]
[67.54656982 -132.74612427]
[82.25063324 -129.78123474]
[95.90199280 -123.56510162]
[107.79206848 -114.42037201]
[117.30370331 -102.82171631]
[123.94317627 -89.37116241]
[127.36586761 -74.76687622]
[127.39411926 -59.76690292]
[124.02645874 -45.14982605]
[117.43769836 -31.67436028]
[107.96982574 -20.03995514]
[96.11428070 -10.85050583]
[82.48642731 -4.58299589]
[67.79364014 -1.56274652]
[52.79854584 -1.94652522]
[38.27948761 -5.71441174]
[24.98843575 -12.67195225]
[32.71252060 0.18645048]
[40.43660736 13.04485321]
[48.16069031 25.90325546]
[55.88477707 38.76165771]
[63.87469101 51.45658875]
[72.12698364 63.98254776]
[80.37927246 76.50851440]
[143.54696655 49.03194046]
[158.19047546 45.78111267]
[172.83396912 42.53028870]
[187.47747803 39.27946091]
[194.15528870 22.48005676]
[209.42076111 13.09136486]
[227.11456299 14.68195534]
[240.22784424 26.43396568]
[254.72343445 22.57680511]
[269.21902466 18.71964645]
[278.47625732 5.61683464]
[294.49993896 4.82882404]
[304.99810791 16.96010780]
[301.91744995 32.70460510]
[287.62118530 39.98448181]
[273.07620239 33.21524429]
[258.58059692 37.07240295]
[244.08500671 40.92956161]
[241.41720581 52.84692001]
[233.87100220 62.54071808]
[222.84310913 68.11609650]
[210.41799927 68.44988251]
[198.97407532 63.41631699]
[190.72830200 53.92296219]
[176.08479309 57.17378998]
[161.44129944 60.42461395]
[146.79779053 63.67544174]
[144.31257629 78.46880341]
[141.82756042 93.26085663]
[154.60491943 101.11827850]
[171.00384521 101.03201294]
[179.04325867 115.32535553]
[170.45292664 129.29454041]
[154.06982422 128.56927490]
[146.74749756 113.89563751]
[133.97013855 106.03821564]
[127.46198273 109.76567078]
[134.91688538 122.78197479]
[142.37179565 135.79827881]
[149.82670593 148.81459045]
[157.28140259 161.83102417]
[144.26484680 169.28550720]
[136.81039429 156.26950073]
[129.35548401 143.25318909]
[121.90058136 130.23689270]
[114.44567108 117.22058105]
[107.93751526 120.94803619]
[108.24957275 135.94479370]
[108.56163025 150.94154358]
[108.87368774 165.93829346]
[109.18573761 180.93504333]
[109.49779510 195.93180847]
[109.80985260 210.92855835]
[110.12191010 225.92530823]
[110.43396759 240.92205811]
[113.02496338 260.12979126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[29 94]
[30 93]
[31 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[45 53]
[46 52]
[47 51]
[95 121]
[96 120]
[97 119]
[98 118]
[102 112]
[103 111]
[104 110]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
