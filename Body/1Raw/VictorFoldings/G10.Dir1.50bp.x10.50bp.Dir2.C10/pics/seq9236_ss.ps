%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUxxxxxxxxxxUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[37.43527985 246.52127075]
[26.44182968 241.32241821]
[15.87694168 235.30018616]
[7.36585140 247.65174866]
[5.90673923 263.40554810]
[-7.68597984 269.49545288]
[-16.19706917 281.84704590]
[-17.65618324 297.60083008]
[-31.24890137 303.69073486]
[-39.75999069 316.04232788]
[-48.27108002 328.39389038]
[-56.78217316 340.74545288]
[-57.54859924 357.12667847]
[-72.24057770 364.41213989]
[-85.74426270 355.10717773]
[-84.16822052 338.78393555]
[-69.13374329 332.23437500]
[-60.62265396 319.88281250]
[-52.11156464 307.53121948]
[-43.60047531 295.17965698]
[-42.75013351 280.30935669]
[-28.54864311 273.33593750]
[-20.03755188 260.98437500]
[-19.18721008 246.11405945]
[-4.98572111 239.14067078]
[3.52536917 226.78909302]
[-10.88537216 214.39958191]
[-23.71833611 200.38227844]
[-34.79092789 184.93664551]
[-43.94559097 168.28247070]
[-51.05206680 150.65670776]
[-56.00923920 132.31015015]
[-58.74657059 113.50385284]
[-59.22511673 94.50541687]
[-57.43806458 75.58516693]
[-53.41084290 57.01230621]
[-47.20075226 39.05111313]
[-38.89616013 21.95715714]
[-28.61522675 5.97366333]
[-16.50424004 -8.67193890]
[-2.73552895 -21.77125931]
[12.49499607 -33.13790894]
[28.97062111 -42.61015320]
[46.45691681 -50.05321121]
[64.70507050 -55.36117935]
[83.45542908 -58.45853043]
[102.44120026 -59.30118942]
[103.37683105 -74.27198029]
[104.31246185 -89.24277496]
[105.24808502 -104.21356201]
[106.18371582 -119.18435669]
[96.43750763 -107.78210449]
[82.55697632 -102.09608459]
[67.61236572 -103.38398743]
[54.90929031 -111.36095428]
[47.25755310 -124.26253510]
[46.34964752 -139.23503113]
[52.38639450 -152.96667480]
[64.03251648 -162.42012024]
[78.71200562 -165.50437927]
[93.17788696 -161.53724670]
[104.23044586 -151.39619446]
[109.42518616 -137.32237244]
[113.73277283 -151.69055176]
[118.04035950 -166.05873108]
[122.34793854 -180.42692566]
[126.35568237 -194.88160706]
[130.06184387 -209.41654968]
[133.76800537 -223.95147705]
[137.47416687 -238.48641968]
[124.31133270 -245.86221313]
[113.50668335 -256.39416504]
[105.79690552 -269.36419678]
[101.70764923 -283.88796997]
[101.51773834 -298.97528076]
[105.24011993 -313.59738159]
[112.62098694 -326.75735474]
[123.15711212 -337.55795288]
[136.13011169 -345.26272583]
[150.65548706 -349.34637451]
[165.74284363 -349.53045654]
[180.36352539 -345.80242920]
[193.52066040 -338.41647339]
[204.31716919 -327.87619019]
[212.01693726 -314.90020752]
[216.09497070 -300.37326050]
[216.27322388 -285.28582764]
[212.53956604 -270.66659546]
[205.14852905 -257.51229858]
[194.60406494 -246.71987915]
[181.62512207 -239.02511597]
[167.09660339 -234.95269775]
[152.00909424 -234.78025818]
[148.30293274 -220.24531555]
[144.59678650 -205.71038818]
[140.89062500 -191.17544556]
[142.55049133 -186.63447571]
[141.32913208 -181.00068665]
[136.71612549 -176.11933899]
[132.40853882 -161.75114441]
[128.10095215 -147.38296509]
[123.79337311 -133.01478577]
[121.15451050 -118.24872589]
[120.21887970 -103.27793884]
[119.28324890 -88.30714417]
[118.34762573 -73.33634949]
[117.41199493 -58.36556244]
[129.44038391 -56.57615662]
[141.29724121 -53.87451172]
[152.91351318 -50.27637482]
[164.22148132 -45.80270767]
[175.15530396 -40.47956848]
[185.65124512 -34.33797455]
[195.64817810 -27.41370964]
[205.08786011 -19.74711418]
[213.91526794 -11.38285255]
[222.07899475 -2.36965895]
[229.53147888 7.23995543]
[236.22927856 17.39000320]
[242.13339233 28.02135086]
[247.20942688 39.07205582]
[251.42778015 50.47773361]
[254.76390076 62.17193985]
[257.19833374 74.08653259]
[258.71691895 86.15210724]
[259.31079102 98.29835510]
[258.97650146 110.45452118]
[257.71600342 122.54977417]
[255.53660583 134.51365662]
[252.45103455 146.27644348]
[248.47726440 157.76963806]
[243.63844299 168.92623901]
[237.96275330 179.68127441]
[231.48329163 189.97207642]
[224.23777771 199.73867798]
[216.26843262 208.92419434]
[207.62168884 217.47509766]
[198.34793091 225.34158325]
[188.50119019 232.47779846]
[178.13880920 238.84219360]
[167.32119751 244.39765930]
[156.11135864 249.11184692]
[144.57460022 252.95729065]
[132.77815247 255.91157532]
[120.79072571 257.95751953]
[108.68217468 259.08316040]
[96.52304077 259.28195190]
[84.38416290 258.55273438]
[72.33626556 256.89981079]
[60.44953918 254.33271790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[6 23]
[7 22]
[9 20]
[10 19]
[11 18]
[12 17]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 96]
[68 95]
[69 94]
[70 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
