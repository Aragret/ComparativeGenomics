%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUxxxxxxxxxxGCAUUAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[114.19671631 363.22070312]
[101.06911469 352.49212646]
[107.74433136 336.90759277]
[108.34447479 321.91961670]
[108.94461823 306.93161011]
[109.54476166 291.94363403]
[110.14490509 276.95562744]
[110.74504852 261.96765137]
[111.34519196 246.97966003]
[111.94533539 231.99166870]
[112.54547882 217.00367737]
[113.14562225 202.01568604]
[111.79676819 187.07646179]
[101.46728516 176.34561157]
[106.00479889 161.18904114]
[102.72972107 146.55094910]
[85.38307953 146.97271729]
[68.18731689 140.82690430]
[53.65019226 128.32865906]
[40.86451340 136.17253113]
[28.07883263 144.01641846]
[15.29315186 151.86029053]
[11.85560226 167.28619385]
[-1.52750647 175.69262695]
[-16.91621399 172.09217834]
[-25.18067169 158.62094116]
[-21.41772461 143.27114868]
[-7.85986233 135.14958191]
[7.44927692 139.07460022]
[20.23495674 131.23072815]
[33.02063751 123.38685608]
[45.80631638 115.54298401]
[45.73128128 108.04335785]
[30.75023651 108.79722595]
[17.60626793 116.02468109]
[4.65677977 108.45429230]
[4.50674152 93.45503998]
[17.30220032 85.62712860]
[30.58807755 92.59014130]
[45.58120728 93.04410553]
[45.50616837 85.54447937]
[32.56610107 77.95800018]
[19.62603569 70.37152100]
[6.68596888 62.78504562]
[-6.47594547 55.59032440]
[-19.84785080 48.79384232]
[-33.21975327 41.99736023]
[-47.53628159 48.28791428]
[-62.53229523 43.85467911]
[-71.12713623 30.79088402]
[-69.26258087 15.26485825]
[-57.81902313 4.60751629]
[-42.19975281 3.85092783]
[-29.77971649 13.35233116]
[-26.42327309 28.62545586]
[-13.05136776 35.42193604]
[0.32053667 42.21841812]
[3.81462669 41.44406128]
[7.86068583 42.35917664]
[11.64396191 45.20569992]
[14.27244759 49.84497833]
[27.21251488 57.43145752]
[40.15258026 65.01793671]
[53.09264755 72.60441589]
[60.90618134 64.15476990]
[70.12751770 57.73278809]
[80.26153564 53.54317474]
[90.79181671 51.67505646]
[101.20664215 52.10253143]
[111.02375793 54.69085312]
[116.86783600 40.87612152]
[122.71191406 27.06139374]
[128.55598450 13.24666405]
[115.96339417 21.39691353]
[101.16175079 23.82824898]
[86.62365723 20.13451958]
[74.77766418 10.93275356]
[67.60263062 -2.23990536]
[66.29714203 -17.18298721]
[71.07926941 -31.40027428]
[81.15017700 -42.51679230]
[94.82752228 -48.67554092]
[109.82653046 -48.84771347]
[123.64164734 -43.00455093]
[133.96507263 -32.12214279]
[139.07231140 -18.01837730]
[138.11039734 -3.05004454]
[147.31111145 -14.89684868]
[156.51182556 -26.74365234]
[165.71255493 -38.59045792]
[174.91326904 -50.43725967]
[171.44119263 -65.68450928]
[178.62811279 -79.57270813]
[193.08061218 -85.54427338]
[207.97463989 -80.77961731]
[216.27769470 -67.52845764]
[214.06933594 -52.04759216]
[202.39227295 -41.64661407]
[186.76007080 -41.23654175]
[177.55935669 -29.38973808]
[168.35864258 -17.54293442]
[159.15791321 -5.69612932]
[149.95719910 6.15067482]
[142.37071228 19.09074211]
[136.52664185 32.90547180]
[130.68255615 46.72019958]
[124.83848572 60.53493118]
[138.99749756 74.43367004]
[146.09655762 92.96083832]
[161.09580994 93.11091614]
[176.09504700 93.26098633]
[191.09429932 93.41105652]
[206.09355164 93.56113434]
[214.47750854 80.61074066]
[228.54147339 74.26970673]
[243.79766846 76.56143951]
[255.37789917 86.75465393]
[259.58697510 101.59673309]
[255.08177185 116.35162354]
[243.29989624 126.31108856]
[228.00090027 128.29710388]
[214.06663513 121.67594147]
[205.94348145 108.56038666]
[190.94422913 108.41030884]
[175.94497681 108.26023865]
[160.94572449 108.11016083]
[145.94648743 107.96009064]
[140.67991638 122.79444885]
[130.77754211 135.03120422]
[117.36782074 143.27586365]
[120.64289856 157.91397095]
[131.20663452 169.69183350]
[126.43486023 183.80139160]
[131.94372559 169.84959412]
[142.57444763 159.26716614]
[156.55117798 153.82186890]
[171.53910828 154.42333984]
[185.03454590 160.97109985]
[194.78309631 172.37135315]
[199.15628052 186.71969604]
[197.42356873 201.61929321]
[189.87438965 214.58116150]
[177.76985168 223.44004822]
[163.13197327 226.71609497]
[148.40599060 223.86204529]
[136.05186462 215.35466003]
[128.13362122 202.61582947]
[127.53347015 217.60382080]
[126.93332672 232.59181213]
[126.33318329 247.57980347]
[125.73303986 262.56777954]
[125.13289642 277.55578613]
[124.53275299 292.54376221]
[123.93260956 307.53176880]
[123.33245850 322.51974487]
[122.73231506 337.50775146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[6 153]
[7 152]
[8 151]
[9 150]
[10 149]
[11 148]
[12 147]
[13 133]
[15 131]
[16 130]
[19 32]
[20 31]
[21 30]
[22 29]
[41 64]
[42 63]
[43 62]
[44 61]
[45 57]
[46 56]
[47 55]
[70 107]
[71 106]
[72 105]
[73 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[109 127]
[110 126]
[111 125]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
