%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUxxxxxxxxxxCACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.93457031 301.56594849]
[97.93457031 286.56594849]
[97.93457031 271.56594849]
[97.93457031 256.56594849]
[97.93457031 241.56596375]
[97.93457031 226.56596375]
[97.93457031 211.56596375]
[97.93457031 196.56596375]
[97.93457031 181.56596375]
[97.93457031 166.56596375]
[84.79293823 159.33425903]
[72.12142944 167.36125183]
[59.44990921 175.38825989]
[46.77839279 183.41525269]
[46.47392654 195.37333679]
[40.47081375 205.58059692]
[30.37512016 211.53616333]
[18.77811623 211.84677124]
[8.59154224 206.55104065]
[-4.39883900 214.05104065]
[-17.38921928 221.55104065]
[-18.87720680 236.99661255]
[-29.18487930 248.59538269]
[-44.34872818 251.88739014]
[-58.53794098 245.60679626]
[-66.29647827 232.16860962]
[-64.64102173 216.74009705]
[-54.20813370 205.25382996]
[-39.00946808 202.12651062]
[-24.88921928 208.56065369]
[-11.89883900 201.06065369]
[1.09154201 193.56065369]
[4.70671320 175.66072083]
[20.49477005 165.86691284]
[38.75139618 170.74372864]
[51.42291260 162.71673584]
[64.09442902 154.68974304]
[76.76594543 146.66275024]
[60.07279587 123.86846161]
[59.11185837 98.72311401]
[44.45913696 95.51411438]
[29.00424004 100.99847412]
[16.70448494 90.15190887]
[20.21280479 74.13243103]
[35.92013931 69.41950226]
[47.66813278 80.86138916]
[62.32085800 84.07038879]
[67.73289490 74.85433960]
[75.34738159 67.35465240]
[84.64456940 62.08323288]
[94.98987579 59.39988708]
[95.91329193 44.42833710]
[96.83670807 29.45678902]
[97.76011658 14.48523808]
[98.68353271 -0.48631164]
[99.60694885 -15.45786190]
[97.00006866 -24.27829361]
[100.70613098 -30.72634125]
[90.76167297 -42.71573257]
[92.22264862 -57.85905457]
[103.71398926 -67.26568604]
[104.94460297 -82.21512604]
[106.17521667 -97.16455841]
[107.40582275 -112.11399078]
[92.98336792 -116.43677521]
[79.77502441 -123.66404724]
[68.35820770 -133.47984314]
[59.23200989 -145.45507812]
[52.79538727 -159.06623840]
[49.32972336 -173.71829224]
[48.98652267 -188.77073669]
[51.78078842 -203.56552124]
[57.59036636 -217.45590210]
[66.16128540 -229.83462524]
[77.11886597 -240.16056824]
[89.98408508 -247.98233032]
[104.19452667 -252.95794678]
[119.12898254 -254.86994934]
[134.13458252 -253.63470459]
[148.55532837 -249.30624390]
[161.76083374 -242.07379150]
[173.17378235 -232.25349426]
[182.29527283 -220.27467346]
[188.72654724 -206.66098022]
[192.18644714 -192.00756836]
[192.52372742 -176.95498657]
[189.72363281 -162.16130066]
[183.90859985 -148.27320862]
[175.33280945 -135.89785767]
[164.37117004 -125.57621765]
[151.50286865 -117.75952911]
[137.29046631 -112.78948975]
[122.35526276 -110.88337708]
[121.12464905 -95.93394470]
[119.89403534 -80.98451233]
[118.66342163 -66.03507996]
[128.46182251 -54.87590790]
[127.42676544 -39.69752502]
[115.65556335 -29.49572945]
[114.57849121 -14.53444767]
[113.65508270 0.43710193]
[112.73166656 15.40865231]
[111.80825043 30.38020134]
[110.88484192 45.35175323]
[109.96142578 60.32330322]
[126.11883545 65.65046692]
[139.47283936 77.57985687]
[147.33877563 94.65581512]
[147.77578735 114.34627533]
[140.00801086 133.41543579]
[154.59176636 136.92460632]
[169.17550659 140.43377686]
[183.75926208 143.94294739]
[198.34301758 147.45211792]
[212.96202087 150.81137085]
[227.61474609 154.02037048]
[242.26747131 157.22937012]
[256.92019653 160.43835449]
[273.68612671 157.92051697]
[280.74685669 173.33422852]
[267.89010620 184.38595581]
[253.71119690 175.09107971]
[239.05847168 171.88208008]
[224.40574646 168.67309570]
[209.75302124 165.46409607]
[202.50148010 167.11553955]
[194.83384705 162.03585815]
[180.25009155 158.52668762]
[165.66635132 155.01753235]
[151.08259583 151.50836182]
[136.49884033 147.99919128]
[130.60777283 152.64088440]
[141.72383118 162.71229553]
[152.83990479 172.78369141]
[166.33277893 179.33673096]
[170.90628052 193.62249756]
[163.72787476 206.79331970]
[149.24340820 210.69204712]
[136.42359924 202.90406799]
[133.20840454 188.25173950]
[126.01702118 175.08801270]
[118.82564545 161.92427063]
[112.93457031 166.56596375]
[112.93457031 181.56596375]
[112.93457031 196.56596375]
[112.93457031 211.56596375]
[112.93457031 226.56596375]
[112.93457031 241.56596375]
[112.93457031 256.56594849]
[112.93457031 271.56594849]
[112.93457031 286.56594849]
[112.93457031 301.56594849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[11 38]
[12 37]
[13 36]
[14 35]
[19 32]
[20 31]
[21 30]
[40 47]
[41 46]
[51 105]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[58 99]
[61 96]
[62 95]
[63 94]
[64 93]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
