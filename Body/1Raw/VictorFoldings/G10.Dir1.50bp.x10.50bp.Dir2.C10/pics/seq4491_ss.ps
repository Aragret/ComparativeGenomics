%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[113.37808228 324.10855103]
[113.37808228 309.10855103]
[113.37808228 294.10855103]
[113.37808228 279.10855103]
[113.37808228 264.10855103]
[113.37808228 249.10856628]
[113.37808228 234.10856628]
[113.37808228 219.10856628]
[113.37808228 204.10856628]
[113.37808228 189.10856628]
[111.35575104 174.24551392]
[106.50647736 168.60368347]
[107.41834259 159.44833374]
[103.71218109 144.91340637]
[100.00601959 130.37846375]
[96.29985809 115.84352875]
[86.63309479 109.27546692]
[83.86345673 97.92139435]
[89.42005157 87.63985443]
[86.01707458 73.03096008]
[82.61409760 58.42206573]
[79.21112061 43.81317520]
[70.95394135 56.33591461]
[56.63011169 60.78877258]
[42.72846985 55.15456009]
[35.54659271 41.98563385]
[38.33794022 27.24764252]
[49.83800888 17.61704254]
[64.83715057 17.45658875]
[76.54081726 26.83931351]
[75.29394531 11.89122677]
[74.04707336 -3.05686045]
[70.19357300 -11.41164398]
[72.93305969 -18.32835579]
[71.99742889 -33.29914856]
[71.06179810 -48.26993942]
[59.49403000 -58.70183563]
[58.75843430 -73.89767456]
[68.77494049 -84.86148834]
[67.83930969 -99.83227539]
[66.90368652 -114.80307007]
[65.96805573 -129.77386475]
[65.03242493 -144.74465942]
[64.09680176 -159.71543884]
[49.09567261 -160.32395935]
[34.23662949 -162.47171021]
[19.67717743 -166.13591003]
[5.57165813 -171.27774048]
[-7.93040276 -177.84266663]
[-20.68587494 -185.76112366]
[-32.55954742 -194.94915771]
[-43.42554474 -205.30938721]
[-53.16868973 -216.73194885]
[-61.68569183 -229.09579468]
[-68.88627625 -242.26985168]
[-74.69409943 -256.11447144]
[-79.04760742 -270.48287964]
[-81.90064240 -285.22274780]
[-83.22296143 -300.17785645]
[-83.00054932 -315.18966675]
[-81.23577118 -330.09906006]
[-77.94731903 -344.74795532]
[-73.17006683 -358.98107910]
[-66.95464325 -372.64755249]
[-59.36694336 -385.60250854]
[-50.48740387 -397.70861816]
[-40.41014481 -408.83752441]
[-29.24199677 -418.87130737]
[-17.10134315 -427.70355225]
[-4.11688662 -435.24066162]
[9.57373238 -441.40270996]
[23.82538605 -446.12442017]
[38.48699951 -449.35568237]
[53.40314865 -451.06228638]
[68.41571808 -451.22613525]
[83.36556244 -449.84548950]
[98.09420013 -446.93496704]
[112.44551086 -442.52545166]
[126.26735687 -436.66366577]
[139.41322327 -429.41174316]
[151.74374390 -420.84655762]
[163.12821960 -411.05892944]
[173.44596863 -400.15261841]
[182.58761597 -388.24319458]
[190.45625305 -375.45690918]
[196.96847534 -361.92935181]
[202.05522156 -347.80386353]
[205.66261292 -333.23025513]
[207.75236511 -318.36294556]
[208.30236816 -303.35955811]
[207.30676270 -288.37911987]
[204.77610779 -273.58050537]
[200.73722839 -259.12048340]
[195.23294067 -245.15242004]
[188.32160950 -231.82435608]
[180.07647705 -219.27757263]
[170.58496094 -207.64506531]
[159.94766235 -197.05017090]
[148.27734375 -187.60517883]
[135.69773865 -179.41021729]
[122.34217072 -172.55215454]
[108.35223389 -167.10369873]
[93.87622070 -163.12260437]
[79.06758881 -160.65107727]
[80.00321960 -145.68028259]
[80.93884277 -130.70948792]
[81.87447357 -115.73870087]
[82.81010437 -100.76790619]
[83.74573517 -85.79711151]
[95.04937744 -76.16574860]
[96.21150208 -60.99656296]
[86.03259277 -49.20556641]
[86.96821594 -34.23477554]
[87.90384674 -19.26398468]
[88.99515533 -4.30373526]
[90.24203491 10.64435196]
[91.48890686 25.59243965]
[93.82001495 40.41019821]
[97.22299194 55.01908875]
[100.62596893 69.62798309]
[104.02894592 84.23687744]
[115.80639648 96.14430237]
[110.83479309 112.13736725]
[114.54095459 126.67230988]
[118.24711609 141.20724487]
[121.95327759 155.74217224]
[125.81044006 170.23777771]
[130.70959473 156.06039429]
[140.86866760 145.02439880]
[154.59289551 138.97084045]
[169.59277344 138.90959167]
[183.36598206 144.85087585]
[193.61483765 155.80355835]
[198.62959290 169.94046021]
[197.57369995 184.90324402]
[190.62329102 198.19578552]
[178.93783569 207.60060120]
[164.46675110 211.54872131]
[149.62413025 209.38154602]
[136.88606262 201.46058655]
[128.37808228 189.10856628]
[128.37808228 204.10856628]
[128.37808228 219.10856628]
[128.37808228 234.10856628]
[128.37808228 249.10856628]
[128.37808228 264.10855103]
[128.37808228 279.10855103]
[128.37808228 294.10855103]
[128.37808228 309.10855103]
[128.37808228 324.10855103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 127]
[13 126]
[14 125]
[15 124]
[16 123]
[19 121]
[20 120]
[21 119]
[22 118]
[30 117]
[31 116]
[32 115]
[34 114]
[35 113]
[36 112]
[39 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
