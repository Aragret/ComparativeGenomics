%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCxxxxxxxxxxAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[104.28218842 278.84735107]
[92.08658600 288.89935303]
[76.36338806 287.30047607]
[66.44087982 274.99926758]
[68.20591736 259.29385376]
[80.61133575 249.50195312]
[82.12886047 234.57891846]
[83.64638519 219.65586853]
[85.16390991 204.73283386]
[86.68143463 189.80979919]
[88.19895935 174.88674927]
[89.71648407 159.96371460]
[91.23400879 145.04067993]
[92.75153351 130.11763000]
[94.26905823 115.19459534]
[88.82936096 120.99582672]
[81.86943817 125.54554749]
[69.30319977 133.73637390]
[56.73695755 141.92718506]
[44.17071533 150.11801147]
[43.51931000 165.62141418]
[33.85328674 177.76008606]
[18.88942337 181.86648560]
[4.38163662 176.36160278]
[-4.09153652 163.36218262]
[-3.27198792 147.86676025]
[6.52514935 135.83366394]
[21.53267670 131.88983154]
[35.97989273 137.55177307]
[48.54613495 129.36094666]
[61.11237717 121.17012787]
[73.67861938 112.97930908]
[72.76710510 98.00702667]
[59.30003738 91.40111542]
[45.83296967 84.79520416]
[32.36590195 78.18929291]
[18.89883232 71.58338165]
[3.10151362 72.45244598]
[-4.91762733 59.90084839]
[-16.62051010 67.24592590]
[-30.31658745 67.82928467]
[-42.40880585 61.60516357]
[-49.77449036 50.30160904]
[-50.57153320 36.94218445]
[-63.90195465 30.06469345]
[-79.71363831 30.61342049]
[-87.47675323 17.90187454]
[-100.80717468 11.02438354]
[-117.15348816 12.33971405]
[-126.24176025 -1.31075418]
[-118.72276306 -15.88458920]
[-102.33139038 -16.38947868]
[-93.92967987 -2.30603671]
[-80.59925842 4.57145500]
[-65.74105072 3.53080463]
[-57.02445984 16.73427391]
[-43.69404221 23.61176491]
[-29.30347252 15.76923943]
[-12.90687752 18.05137825]
[-0.96804172 29.75771904]
[1.68828523 46.43377686]
[16.52235031 45.09221268]
[25.50474548 58.11631012]
[38.97181320 64.72222137]
[52.43888092 71.32813263]
[65.90595245 77.93404388]
[79.37301636 84.53996277]
[92.02162170 76.47690582]
[91.71761322 61.47998428]
[77.44654846 56.31267929]
[66.00839233 46.33605576]
[58.95005798 32.89937592]
[57.22613525 17.81983566]
[61.06976700 3.13682151]
[69.96113586 -9.16391087]
[82.69775391 -17.41878891]
[97.55709839 -20.51140594]
[112.52957153 -18.02351189]
[125.59025574 -10.29157543]
[134.97280884 1.63872421]
[139.40832520 16.15391159]
[138.29692078 31.29092598]
[131.78892517 45.00261307]
[120.76447296 55.43457794]
[106.71453094 61.17597961]
[107.01853943 76.17289734]
[119.15379333 84.98967743]
[133.51065063 80.64450073]
[147.86750793 76.29932404]
[162.22438049 71.95414734]
[176.58123779 67.60897064]
[174.71736145 52.68804169]
[175.40213013 37.66675568]
[178.61581421 22.97729492]
[184.26596069 9.04230881]
[192.19000244 -3.73726535]
[202.15995789 -14.99373436]
[213.88896179 -24.40322685]
[227.03953552 -31.69501495]
[241.23333740 -36.65929413]
[256.06198120 -39.15324020]
[271.09878540 -39.10509109]
[285.91113281 -36.51623154]
[300.07284546 -31.46115303]
[313.17648315 -24.08529663]
[324.84497070 -14.60088253]
[334.74261475 -3.28079534]
[342.58465576 9.54926395]
[348.14544678 23.52014732]
[351.26501465 38.22988892]
[351.85354614 53.25525284]
[349.89416504 68.16393280]
[345.44323730 82.52698517]
[338.62878418 95.93113708]
[329.64691162 107.99074554]
[318.75604248 118.35881805]
[306.26953125 126.73704529]
[292.54660034 132.88436890]
[277.98214722 136.62393188]
[262.99517822 137.84811401]
[248.01689148 136.52171326]
[233.47827148 132.68289185]
[219.79760742 126.44209290]
[207.36853027 117.97888184]
[196.54864502 107.53675842]
[187.64924622 95.41616058]
[180.92640686 81.96582794]
[166.56954956 86.31100464]
[152.21269226 90.65618134]
[137.85583496 95.00135803]
[123.49897003 99.34654236]
[138.18148804 102.41632843]
[153.07786560 100.65623474]
[167.34132385 105.29885101]
[178.34767151 115.49003601]
[184.07197571 129.35482788]
[183.46109009 144.34237671]
[176.62739563 157.69531250]
[164.82814026 166.95693970]
[150.23417664 170.42332458]
[135.53045654 167.45674133]
[123.42217255 158.60295105]
[116.13700104 145.49089050]
[115.01483154 130.53585815]
[109.19210052 116.71212006]
[107.67457581 131.63516235]
[106.15705109 146.55819702]
[104.63952637 161.48124695]
[103.12200165 176.40428162]
[101.60447693 191.32731628]
[100.08695221 206.25036621]
[98.56942749 221.17340088]
[97.05190277 236.09643555]
[95.53437805 251.01948547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 154]
[7 153]
[8 152]
[9 151]
[10 150]
[11 149]
[12 148]
[13 147]
[14 146]
[15 145]
[17 32]
[18 31]
[19 30]
[20 29]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[39 61]
[44 57]
[45 56]
[47 54]
[48 53]
[68 86]
[69 85]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
