%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAUAUAAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAxxxxxxxxxxUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-11.93989468 275.66888428]
[-20.45098495 288.02044678]
[-21.91009712 303.77423096]
[-35.50281525 309.86416626]
[-44.01390457 322.21572876]
[-52.52499771 334.56732178]
[-61.03608704 346.91888428]
[-69.54718018 359.27044678]
[-78.05826569 371.62203979]
[-71.39054871 385.45809937]
[-72.55017853 400.77316284]
[-81.22521973 413.44750977]
[-95.08213043 420.07183838]
[-110.39347839 418.86419678]
[-123.04057312 410.14947510]
[-129.62142944 396.27185059]
[-128.36579895 380.96438599]
[-119.61148071 368.34466553]
[-105.71331024 361.80734253]
[-90.40983582 363.11093140]
[-81.89875031 350.75936890]
[-73.38765717 338.40780640]
[-64.87657166 326.05621338]
[-56.36547852 313.70465088]
[-47.85438919 301.35308838]
[-47.00404739 286.48275757]
[-32.80255890 279.50936890]
[-24.29146767 267.15780640]
[-38.67591095 255.43194580]
[-51.95961380 242.47235107]
[-64.03714752 228.38189697]
[-74.81263733 213.27241516]
[-84.20055389 197.26382446]
[-92.12638855 180.48321533]
[-98.52722168 163.06376648]
[-103.35224915 145.14376831]
[-106.56317902 126.86542511]
[-108.13451385 108.37384033]
[-108.05378723 89.81578827]
[-106.32164001 71.33857727]
[-102.95182037 53.08885956]
[-97.97107697 35.21150208]
[-91.41894531 17.84840202]
[-83.34742737 1.13737643]
[-96.28548431 -6.45253181]
[-109.22354126 -14.04244041]
[-123.38806915 -7.70637083]
[-138.56468201 -10.93901920]
[-148.91766357 -22.49736595]
[-150.46607971 -37.93699265]
[-142.61453247 -51.32104492]
[-128.38211060 -57.50308228]
[-113.24145508 -54.10598755]
[-103.01446533 -42.43600845]
[-101.63362885 -26.98049545]
[-88.69557190 -19.39058876]
[-75.75751495 -11.80067921]
[-68.54515839 -22.40353775]
[-60.69405746 -32.54251480]
[-52.23395538 -42.17918396]
[-43.19692230 -51.27702713]
[-33.61720657 -59.80156326]
[-23.53111267 -67.72048950]
[-12.97686195 -75.00379181]
[-1.99445426 -81.62386322]
[9.37448883 -87.55562592]
[21.08688354 -92.77659607]
[33.09833908 -97.26699066]
[45.36333847 -101.00978088]
[57.83539581 -103.99079132]
[70.46725464 -106.19872284]
[83.21102905 -107.62520599]
[96.01843262 -108.26483917]
[108.84091949 -108.11519623]
[121.62990570 -107.17684174]
[134.33692932 -105.45333862]
[146.91380310 -102.95120239]
[159.31289673 -99.67993927]
[171.48721313 -95.65192413]
[183.39059448 -90.88243866]
[194.97795105 -85.38954926]
[206.20536804 -79.19407654]
[217.03028870 -72.31949615]
[227.41168213 -64.79186249]
[237.31022644 -56.63970947]
[246.68838501 -47.89392853]
[255.51063538 -38.58765793]
[263.74353027 -28.75617409]
[271.35586548 -18.43673134]
[278.31881714 -7.66844177]
[284.60598755 3.50788736]
[290.19354248 15.04990005]
[295.06027222 26.91385460]
[309.28704834 22.16003990]
[316.49063110 16.43636513]
[323.85952759 17.45865631]
[338.18212891 13.00184155]
[352.50469971 8.54502583]
[366.82730103 4.08820963]
[381.14990234 -0.36860585]
[383.85208130 -15.43369484]
[393.25497437 -27.51029015]
[407.19787598 -33.82328033]
[422.47683716 -32.92198181]
[435.58081055 -25.01351166]
[443.49865723 -11.91517639]
[444.41088867 3.36312270]
[438.10787964 17.31054497]
[426.03799438 26.72207260]
[410.97485352 29.43500900]
[396.37982178 24.82593727]
[385.60671997 13.95399189]
[371.28411865 18.41080666]
[356.96151733 22.86762238]
[342.63894653 27.32443810]
[328.31634521 31.78125381]
[314.04086304 36.38681793]
[299.81408691 41.14063263]
[303.50006104 55.52727509]
[306.15158081 70.13998413]
[307.75518799 84.90447235]
[308.30273438 99.74570465]
[307.79144287 114.58821869]
[306.22387695 129.35658264]
[303.60803223 143.97572327]
[299.95721436 158.37132263]
[295.28994751 172.47019958]
[289.63000488 186.20071411]
[283.00610352 199.49302673]
[275.45196533 212.27960205]
[267.00592041 224.49543762]
[257.71099854 236.07844543]
[247.61436462 246.96971130]
[236.76737976 257.11392212]
[225.22517395 266.45947266]
[213.04641724 274.95886230]
[200.29302979 282.56890869]
[187.02981567 289.25091553]
[173.32421875 294.97091675]
[159.24589539 299.69982910]
[144.86642456 303.41363525]
[130.25886536 306.09341431]
[115.49750519 307.72558594]
[100.65737152 308.30184937]
[85.81388855 307.81927490]
[71.04251862 306.28030396]
[56.41834641 303.69274902]
[42.01570892 300.06979370]
[27.90781975 295.42980957]
[14.16639233 289.79644775]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[44 57]
[45 56]
[46 55]
[93 118]
[94 117]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
