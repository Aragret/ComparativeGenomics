%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACxxxxxxxxxxUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.39151764 278.38787842]
[95.07946014 263.39111328]
[94.76740265 248.39436340]
[94.45535278 233.39759827]
[94.14329529 218.40084839]
[93.83123779 203.40409851]
[93.51918030 188.40734863]
[93.20712280 173.41058350]
[92.89506531 158.41383362]
[79.37088013 151.92567444]
[67.47850037 161.06741333]
[55.58612061 170.20913696]
[43.78947830 179.47409058]
[32.08985519 188.86125183]
[20.39023209 198.24841309]
[8.69060898 207.63557434]
[-3.00901484 217.02273560]
[-14.70863819 226.40989685]
[-16.18211555 242.14535522]
[-28.40380669 252.16561890]
[-44.12279892 250.52586365]
[-54.01329422 238.19891357]
[-52.20743561 222.49813843]
[-39.77660751 212.73852539]
[-24.09580040 214.71028137]
[-12.39617634 205.32312012]
[-0.69655311 195.93594360]
[11.00307083 186.54878235]
[22.70269394 177.16162109]
[34.40231705 167.77445984]
[37.67234039 161.09220886]
[46.44438553 158.31675720]
[58.33676529 149.17503357]
[70.22914124 140.03329468]
[57.82624054 120.54528809]
[56.07900620 98.91374207]
[64.11161804 80.26454926]
[78.87068939 68.44087219]
[96.09066010 65.21728516]
[97.64823914 50.29837036]
[99.20581818 35.37945938]
[86.28192139 29.18705559]
[76.05706024 19.20549965]
[69.59312439 6.50879860]
[67.54937744 -7.54911089]
[70.11531830 -21.47872543]
[57.02216721 -28.79783058]
[43.92901230 -36.11693573]
[27.15314484 -38.56777954]
[24.86418343 -55.36649704]
[40.37275696 -62.21635437]
[51.24811554 -49.21009064]
[64.34127045 -41.89098740]
[77.43442535 -34.57188034]
[89.14064789 -47.24744797]
[105.58695984 -54.85605621]
[102.48863983 -69.53258514]
[99.39031982 -84.20910645]
[96.29199982 -98.88563538]
[91.53818512 -113.11241150]
[85.19105530 -126.70336151]
[78.84392548 -140.29431152]
[72.49679565 -153.88526917]
[60.31622696 -165.67807007]
[68.27623749 -180.64718628]
[84.86391449 -177.14212036]
[86.08774567 -160.23239136]
[92.43487549 -146.64144897]
[98.78200531 -133.05049133]
[105.12913513 -119.45954132]
[108.22560120 -134.13645935]
[117.68873596 -145.77471924]
[131.42538452 -151.80004883]
[146.39712524 -150.87968445]
[159.29234314 -143.21722412]
[167.25874329 -130.50752258]
[168.53421021 -115.56185150]
[162.83665466 -101.68605042]
[151.42630005 -91.94932556]
[136.82702637 -88.50534058]
[122.26803589 -92.11589050]
[110.96852112 -101.98395538]
[114.06684875 -87.30743408]
[117.16516876 -72.63090515]
[120.26348877 -57.95438004]
[134.49026489 -53.20056534]
[145.78927612 -63.06628799]
[157.08827209 -72.93200684]
[168.38728333 -82.79773712]
[170.92297363 -89.01688385]
[175.54679871 -92.45948029]
[180.36764526 -92.82688141]
[192.06727600 -102.21404266]
[203.76689148 -111.60120392]
[206.93801880 -127.32772827]
[221.27589417 -134.52528381]
[235.78173828 -127.67253113]
[239.32789612 -112.02630615]
[229.19406128 -99.58905792]
[213.15405273 -99.90158081]
[201.45443726 -90.51441956]
[189.75480652 -81.12725830]
[178.25300598 -71.49872589]
[166.95399475 -61.63300705]
[155.65499878 -51.76728439]
[144.35598755 -41.90155792]
[151.73872375 -32.09747696]
[156.34075928 -20.84047508]
[157.91148376 -8.89348221]
[156.40365601 2.94915700]
[151.97285461 13.91449261]
[144.96359253 23.30141258]
[135.88305664 30.52544403]
[125.36480713 35.15502548]
[114.12473297 36.93704224]
[112.56715393 51.85595322]
[111.00957489 66.77486420]
[132.38795471 76.58701324]
[144.92692566 99.95375061]
[140.49166870 129.14434814]
[153.73425293 136.18948364]
[166.97683716 143.23461914]
[182.67829895 139.94163513]
[194.95025635 150.27500916]
[194.37869263 166.30787659]
[181.40208435 175.74119568]
[165.97497559 171.33850098]
[159.93170166 156.47720337]
[146.68911743 149.43206787]
[133.44653320 142.38693237]
[127.05786133 146.31564331]
[135.30169678 158.84716797]
[143.54554749 171.37867737]
[156.39129639 179.12379456]
[156.45674133 194.12365723]
[143.67909241 201.98059082]
[130.32299805 195.15307617]
[129.20787048 180.19563293]
[121.74418640 167.18435669]
[114.28050232 154.17306519]
[107.89182281 158.10177612]
[108.20388031 173.09854126]
[108.51593781 188.09529114]
[108.82798767 203.09204102]
[109.14004517 218.08879089]
[109.45210266 233.08555603]
[109.76416016 248.08230591]
[110.07621765 263.07907104]
[110.38827515 278.07580566]
[112.97927094 297.28353882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 34]
[11 33]
[12 32]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[39 117]
[40 116]
[41 115]
[46 54]
[47 53]
[48 52]
[56 85]
[57 84]
[58 83]
[59 82]
[60 70]
[61 69]
[62 68]
[63 67]
[86 106]
[87 105]
[88 104]
[89 103]
[92 102]
[93 101]
[94 100]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
