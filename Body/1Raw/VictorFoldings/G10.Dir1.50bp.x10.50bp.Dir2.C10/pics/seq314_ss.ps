%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.54036427 314.90350342]
[-19.90660286 327.97018433]
[-27.27284241 341.03689575]
[-34.63908386 354.10357666]
[-42.00532150 367.17028809]
[-49.37156296 380.23696899]
[-56.73780060 393.30364990]
[-64.10404205 406.37036133]
[-71.47028351 419.43704224]
[-78.83651733 432.50375366]
[-78.12718964 448.88754272]
[-92.10473633 457.46429443]
[-106.39024353 449.41094971]
[-106.28801727 433.01211548]
[-91.90321350 425.13751221]
[-84.53697205 412.07080078]
[-77.17073822 399.00411987]
[-69.80449677 385.93743896]
[-62.43825531 372.87072754]
[-55.07201767 359.80404663]
[-47.70577621 346.73733521]
[-40.33953857 333.67065430]
[-32.97329712 320.60394287]
[-25.60705948 307.53726196]
[-57.08769226 284.85751343]
[-84.54989624 257.44897461]
[-107.29116821 226.01277161]
[-124.72976685 191.35304260]
[-136.41958618 154.35644531]
[-151.13511658 157.26391602]
[-165.85063171 160.17138672]
[-177.83106995 171.36964417]
[-193.43833923 166.33522034]
[-196.61700439 150.24708557]
[-184.09713745 139.65533447]
[-168.75810242 145.45585632]
[-154.04258728 142.54838562]
[-139.32705688 139.64091492]
[-140.90238953 128.54617310]
[-141.96366882 117.39051819]
[-142.50862122 106.19774628]
[-142.53610229 94.99176025]
[-142.04605103 83.79645538]
[-141.03950500 72.63572693]
[-139.51861572 61.53338623]
[-137.48661804 50.51313400]
[-134.94787598 39.59847641]
[-131.90777588 28.81270599]
[-128.37281799 18.17884064]
[-124.35054779 7.71957016]
[-119.84954071 -2.54278731]
[-114.87941742 -12.58633327]
[-109.45075989 -22.38963509]
[-103.57517242 -31.93177605]
[-97.26518250 -41.19239426]
[-90.53425598 -50.15172577]
[-83.39675903 -58.79065704]
[-75.86791992 -67.09075165]
[-67.96380615 -75.03430176]
[-59.70127487 -82.60434723]
[-51.09796906 -89.78474426]
[-42.17224121 -96.56016541]
[-32.94313431 -102.91616058]
[-23.43034935 -108.83915710]
[-13.65418148 -114.31652069]
[-3.63549089 -119.33657074]
[6.60434246 -123.88858032]
[17.04346848 -127.96284485]
[27.65961266 -131.55067444]
[38.43012238 -134.64440918]
[49.33200836 -137.23742676]
[60.34201813 -139.32423401]
[71.43664551 -140.90036011]
[82.59223175 -141.96241760]
[93.78495789 -142.50817871]
[104.99095154 -142.53646851]
[116.18628693 -142.04721069]
[127.34708405 -141.04145813]
[138.44953918 -139.52134705]
[149.46994019 -137.49014282]
[160.38476562 -134.95217896]
[171.17076111 -131.91284180]
[181.80487061 -128.37864685]
[192.26443481 -124.35712433]
[202.52711487 -119.85685730]
[212.57101440 -114.88744354]
[222.37469482 -109.45948792]
[231.91726685 -103.58457947]
[241.17832947 -97.27525330]
[250.13813782 -90.54496765]
[258.77758789 -83.40808105]
[267.07821655 -75.87983704]
[275.02230835 -67.97628784]
[282.59295654 -59.71429825]
[289.77395630 -51.11149979]
[296.55001831 -42.18625641]
[302.90667725 -32.95760345]
[308.83035278 -23.44524002]
[314.30841064 -13.66946316]
[319.32919312 -3.65113068]
[323.88192749 6.58837843]
[327.95693970 17.02721405]
[331.54550171 27.64310265]
[334.64001465 38.41339111]
[337.23382568 49.31509399]
[339.32141113 60.32495117]
[340.89831543 71.41947174]
[341.96118164 82.57497406]
[342.50775146 93.76766968]
[342.53680420 104.97365570]
[342.04837036 116.16902924]
[341.04339600 127.32990265]
[339.52410889 138.43244934]
[337.49368286 149.45300293]
[334.95648193 160.36801147]
[331.91790771 171.15422058]
[328.38449097 181.78858948]
[324.36370850 192.24842834]
[319.86416626 202.51142883]
[314.89547729 212.55569458]
[309.46820068 222.35977173]
[303.59399414 231.90274048]
[297.28530884 241.16426086]
[290.55566406 250.12455750]
[283.41940308 258.76449585]
[275.89175415 267.06567383]
[267.98876953 275.01034546]
[259.72732544 282.58157349]
[251.12503052 289.76318359]
[242.20027161 296.53988647]
[232.97207642 302.89718628]
[223.46012878 308.82156372]
[213.68473816 314.30032349]
[203.66676331 319.32177734]
[193.42758179 323.87524414]
[182.98904419 327.95101929]
[172.37341309 331.54034424]
[161.60334778 334.63562012]
[150.70182800 337.23019409]
[139.69210815 339.31857300]
[128.59770203 340.89627075]
[117.44227600 341.95993042]
[106.24962616 342.50729370]
[95.04364014 342.53717041]
[83.84822845 342.04949951]
[72.68728638 341.04534912]
[61.58462524 339.52682495]
[50.56393433 337.49719238]
[39.64873505 334.96078491]
[28.86231804 331.92300415]
[18.22769547 328.39031982]
[7.76756477 324.37026978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[4 21]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[10 15]
[29 38]
[30 37]
[31 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
