%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[216.45977783 435.46316528]
[215.52415466 420.49237061]
[214.58853149 405.52157593]
[213.65289307 390.55078125]
[212.71726990 375.57998657]
[211.78164673 360.60922241]
[210.84600830 345.63842773]
[207.13984680 331.10348511]
[200.79272461 317.51254272]
[194.44558716 303.92156982]
[188.09846497 290.33062744]
[171.79164124 292.10290527]
[155.83300781 288.20230103]
[142.13969421 279.07949829]
[132.36279297 265.81350708]
[127.68828583 249.98423767]
[128.69323730 233.48420715]
[135.27455139 218.29235840]
[146.65934753 206.23666382]
[139.75234985 192.92150879]
[132.84535217 179.60635376]
[125.93834686 166.29119873]
[119.03134918 152.97604370]
[112.12435150 139.66087341]
[105.21735382 126.34572601]
[90.95387268 130.10220337]
[74.69354248 125.61387634]
[61.27934647 112.14772797]
[46.46158981 114.47882843]
[31.64383125 116.80993652]
[16.82607460 119.14103699]
[2.00831604 121.47214508]
[-12.69873619 129.90653992]
[-24.87482452 118.10910797]
[-16.90912628 103.14301300]
[-0.32278794 106.65438080]
[14.49497032 104.32328033]
[29.31272888 101.99217224]
[44.13048553 99.66107178]
[58.94824600 97.32997131]
[60.35054779 82.39566040]
[46.22574615 77.34690094]
[32.10094070 72.29814911]
[17.04359055 77.83490753]
[3.40195131 69.39184570]
[1.64072359 53.44576263]
[13.11097050 42.22912216]
[29.01369858 44.34637451]
[37.14970016 58.17334366]
[51.27450180 63.22210312]
[65.39930725 68.27085876]
[77.75087738 59.75976562]
[78.06293488 44.76301193]
[70.61440277 30.80486298]
[78.61480713 18.24131012]
[78.92685699 3.24455690]
[64.54595184 -1.34559906]
[52.05376434 -9.79352474]
[42.45789719 -21.40749931]
[36.52943802 -35.24085236]
[34.74098587 -50.16912842]
[37.22899628 -64.98148346]
[43.78340530 -78.47890472]
[53.86533737 -89.57126617]
[66.65139771 -97.36536407]
[81.10093689 -101.23683167]
[81.41299438 -116.23358917]
[81.72504425 -131.23034668]
[82.03710175 -146.22709656]
[68.23876190 -152.67112732]
[58.25927353 -164.17459106]
[53.82765198 -178.74444580]
[55.71169662 -193.85636902]
[63.58499146 -206.89213562]
[76.08343506 -215.59321594]
[91.04160309 -218.45208740]
[105.86789703 -214.97344971]
[117.99356842 -205.75999451]
[125.31777954 -192.40798950]
[126.57156372 -177.23077393]
[121.53769684 -162.85787964]
[111.08831787 -151.77951050]
[97.03385925 -145.91503906]
[96.72180176 -130.91828918]
[96.40974426 -115.92153168]
[96.09768677 -100.92477417]
[110.37366486 -96.45557404]
[122.82444000 -88.13635254]
[132.43621826 -76.63420105]
[138.42347717 -62.87580490]
[140.29316711 -47.97277069]
[137.88526917 -33.13181305]
[131.38650513 -19.55705070]
[121.31581116 -8.35230255]
[108.48301697 -0.43134558]
[93.92361450 3.55661321]
[93.61155701 18.55336761]
[101.08240509 31.43884850]
[93.05968475 45.07506943]
[92.74762726 60.07182312]
[122.46024323 71.85706329]
[131.40167236 98.61791992]
[118.53250885 119.43872833]
[125.43950653 132.75387573]
[132.34651184 146.06903076]
[139.25350952 159.38420105]
[146.16050720 172.69935608]
[153.06750488 186.01451111]
[159.97450256 199.32966614]
[173.45458984 196.96322632]
[187.03689575 198.50355530]
[199.61366272 203.81539917]
[210.16184998 212.45634460]
[217.82640076 223.71356201]
[221.98948669 236.66270447]
[222.32031250 250.24369812]
[218.80142212 263.34759521]
[211.72929382 274.90710449]
[201.68940735 283.98348999]
[208.03654480 297.57446289]
[214.38366699 311.16540527]
[220.73080444 324.75634766]
[222.47933960 309.85861206]
[228.66659546 296.19412231]
[238.70895386 285.05181885]
[251.65916443 277.48266602]
[266.29568481 274.20062256]
[281.23797607 275.51528931]
[295.07656860 281.30264282]
[306.50613403 291.01681519]
[314.44860840 303.74148560]
[318.15478516 318.27639771]
[317.27511597 333.25057983]
[311.89254761 347.25158691]
[302.51480103 358.95877075]
[290.02642822 367.26782227]
[275.60540771 371.39505005]
[260.61196899 370.95111084]
[246.46040344 365.97787476]
[234.48553467 356.94445801]
[225.81680298 344.70278931]
[226.75242615 359.67358398]
[227.68806458 374.64437866]
[228.62368774 389.61517334]
[229.55931091 404.58596802]
[230.49494934 419.55673218]
[231.43057251 434.52752686]
[240.94590759 447.88381958]
[233.89146423 462.68811035]
[217.52424622 463.71099854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[6 142]
[7 141]
[8 122]
[9 121]
[10 120]
[11 119]
[19 109]
[20 108]
[21 107]
[22 106]
[23 105]
[24 104]
[25 103]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[41 51]
[42 50]
[43 49]
[52 100]
[53 99]
[55 97]
[56 96]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
