%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCxxxxxxxxxxUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.82839966 405.18521118]
[73.51634216 390.18844604]
[73.20428467 375.19171143]
[72.89222717 360.19494629]
[72.58016968 345.19818115]
[72.26811981 330.20144653]
[71.95606232 315.20468140]
[71.64400482 300.20791626]
[71.33194733 285.21118164]
[57.42939377 279.57922363]
[46.76776505 290.13052368]
[42.40151215 305.33731079]
[27.91271973 308.79043579]
[17.25109291 319.34170532]
[20.55248260 334.41171265]
[15.16092300 348.86627197]
[2.79684353 358.09301758]
[-12.59442329 359.14776611]
[-26.10158157 351.69387817]
[-33.41454315 338.10992432]
[-32.19977188 322.73043823]
[-22.84489632 310.46301270]
[-8.33502197 305.22210693]
[6.69980288 308.68008423]
[17.36142921 298.12881470]
[20.96508980 283.67669678]
[36.21647644 279.46887207]
[46.87810135 268.91760254]
[36.13876343 250.93334961]
[33.34685516 230.43629456]
[38.74741364 210.73725891]
[51.27852249 194.93791199]
[68.77283478 185.44255066]
[88.33026886 183.59304810]
[91.73324585 168.98416138]
[95.13623047 154.37525940]
[93.38224792 149.86981201]
[94.48612976 144.21183777]
[98.99658966 139.23556519]
[103.00433350 124.78087616]
[84.90107727 117.70620728]
[78.43812561 100.81921387]
[85.98652649 85.89202118]
[80.21025848 72.04879761]
[74.43398285 58.20558167]
[68.65770721 44.36236572]
[62.88143921 30.51914597]
[53.41966629 32.02231979]
[43.20326996 29.52617836]
[33.96295166 22.74975204]
[27.49976921 12.16174984]
[25.36493683 -1.02055991]
[14.70331001 -11.57184982]
[4.04168367 -22.12314034]
[-11.94922447 -25.75946808]
[-16.53637314 -41.50399399]
[-5.00089455 -53.16009903]
[10.79049778 -48.73698425]
[14.59297371 -32.78476715]
[25.25460052 -22.23347664]
[35.91622543 -11.68218613]
[42.71170044 -14.85575104]
[56.30265427 -21.20288086]
[63.09812927 -24.37644577]
[61.85125351 -39.32453156]
[60.60437775 -54.27261734]
[46.11497879 -58.86889648]
[34.49066162 -68.66397858]
[27.50404549 -82.16419220]
[26.22054291 -97.31083679]
[30.83587646 -111.79418182]
[40.64624023 -123.40560150]
[54.15563202 -130.37445068]
[69.30395508 -131.63803101]
[83.78121185 -127.00364685]
[95.37972260 -117.17801666]
[102.33079529 -103.65947723]
[103.57444763 -88.50949860]
[98.92102051 -74.03835297]
[89.08013916 -62.45277786]
[75.55246735 -55.51949310]
[76.79933929 -40.57140732]
[78.04621124 -25.62331963]
[91.11655426 3.34235930]
[76.72465515 24.74287415]
[82.50093079 38.58609009]
[88.27719879 52.42930984]
[94.05347443 66.27252960]
[99.82974243 80.11574554]
[111.61677551 81.81659698]
[121.19768524 90.40076447]
[124.67506409 103.77610016]
[139.24777222 100.22134399]
[153.82048035 96.66658020]
[168.39317322 93.11181641]
[182.80538940 88.95392609]
[197.03216553 84.20011139]
[211.25895691 79.44629669]
[225.48573303 74.69248199]
[232.68930054 68.96881104]
[240.05818176 69.99110413]
[254.38078308 65.53428650]
[268.70336914 61.07747269]
[283.02597046 56.62065506]
[296.35333252 46.14123154]
[310.11257935 56.04673767]
[304.40313721 72.01039886]
[287.48278809 70.94325256]
[273.16018677 75.40007019]
[258.83761597 79.85688019]
[244.51499939 84.31369781]
[230.23954773 88.91926575]
[216.01277161 93.67308044]
[201.78598022 98.42689514]
[187.55920410 103.18070984]
[186.19100952 105.69773102]
[183.71102905 107.80572510]
[180.27690125 109.06614685]
[176.20637512 109.10832977]
[171.94793701 107.68451691]
[157.37522888 111.23928070]
[142.80253601 114.79404449]
[128.22982788 118.34880829]
[117.45902252 128.78862000]
[113.45127869 143.24330139]
[109.74511719 157.77824402]
[106.34214020 172.38713074]
[102.93916321 186.99603271]
[112.12939453 191.53727722]
[120.22055054 197.93347168]
[126.84091949 205.92414856]
[131.67950439 215.17504883]
[134.50048828 225.29194641]
[135.15469360 235.83746338]
[133.58723450 246.34997559]
[129.84101868 256.36389160]
[124.05603027 265.43008423]
[116.46426392 273.13632202]
[107.38050842 279.12561035]
[97.18929291 283.11306763]
[86.32870483 284.89910889]
[86.64075470 299.89587402]
[86.95281219 314.89263916]
[87.26486969 329.88937378]
[87.57692719 344.88613892]
[87.88898468 359.88287354]
[88.20104218 374.87963867]
[88.51309204 389.87640381]
[88.82514954 404.87313843]
[91.41615295 424.08087158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 28]
[11 27]
[13 25]
[14 24]
[34 128]
[35 127]
[36 126]
[39 125]
[40 124]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[52 61]
[53 60]
[54 59]
[64 83]
[65 82]
[66 81]
[92 123]
[93 122]
[94 121]
[95 120]
[96 115]
[97 114]
[98 113]
[99 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
