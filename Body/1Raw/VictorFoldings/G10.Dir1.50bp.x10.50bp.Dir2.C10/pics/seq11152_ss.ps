%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUxxxxxxxxxxCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[15.89409637 209.48579407]
[6.12350941 220.86717224]
[3.00519657 236.37803650]
[-11.15573788 240.99508667]
[-20.92632484 252.37644958]
[-30.58107185 263.85626221]
[-40.11898804 275.43331909]
[-49.65690231 287.01037598]
[-59.19481659 298.58743286]
[-68.73272705 310.16448975]
[-61.89604950 323.77255249]
[-61.19181824 338.98516846]
[-66.74205017 353.16665649]
[-77.58513641 363.86001587]
[-91.84243774 369.21249390]
[-107.04380035 368.29678345]
[-120.55548859 361.27154541]
[-130.03652954 349.35391235]
[-133.84426880 334.60873413]
[-131.31898499 319.59063721]
[-122.89822388 306.90164185]
[-110.04090881 298.74017334]
[-94.97465515 296.52029419]
[-80.30978394 300.62655640]
[-70.77187347 289.04949951]
[-61.23395538 277.47244263]
[-51.69604111 265.89538574]
[-42.15812683 254.31834412]
[-40.32144928 247.11373901]
[-32.30769730 242.60586548]
[-22.53710938 231.22450256]
[-20.11765480 216.52770996]
[-5.25786209 211.09658813]
[4.51272488 199.71520996]
[-7.78534794 186.27433777]
[-18.20660400 171.33120728]
[-26.56958008 155.14602661]
[-32.72866058 138.00061035]
[-36.57659149 120.19350433]
[-38.04637909 102.03477478]
[-37.11242676 83.84062195]
[-33.79099655 65.92784119]
[-28.13992691 48.60834122]
[-41.73810959 42.27672195]
[-55.33629608 35.94510651]
[-68.93447876 29.61348534]
[-82.53266144 23.28186607]
[-98.81224060 25.25856018]
[-108.44624329 11.98761368]
[-101.52403259 -2.87896109]
[-85.16658783 -4.04770613]
[-76.20104218 9.68368244]
[-62.60285950 16.01530266]
[-49.00467682 22.34692001]
[-35.40649033 28.67853928]
[-21.80830765 35.01015854]
[-8.72673798 14.91510296]
[7.63437700 -2.61352253]
[26.78153419 -17.04699707]
[48.13719177 -27.94996071]
[71.05719757 -34.99354553]
[94.85021210 -37.96529770]
[118.79856110 -36.77557373]
[142.17988586 -31.46026421]
[147.53173828 -45.47303009]
[152.88359070 -59.48579407]
[158.23545837 -73.49855804]
[163.58731079 -87.51132965]
[168.93917847 -101.52409363]
[156.03352356 -109.24519348]
[144.66482544 -119.09017944]
[135.17855835 -130.75987244]
[127.86298370 -143.89964294]
[122.94042969 -158.11018372]
[120.56048584 -172.95967102]
[120.79547119 -187.99681091]
[123.63824463 -202.76467896]
[129.00242615 -216.81446838]
[136.72499084 -229.71923828]
[146.57125854 -241.08682251]
[158.24203491 -250.57177734]
[171.38262939 -257.88586426]
[185.59373474 -262.80679321]
[200.44348145 -265.18505859]
[215.48060608 -264.94836426]
[230.24813843 -262.10391235]
[244.29733276 -256.73815918]
[257.20123291 -249.01412964]
[268.56768799 -239.16656494]
[278.05133057 -227.49472046]
[285.36392212 -214.35328674]
[290.28323364 -200.14163208]
[292.65982056 -185.29161072]
[292.42141724 -170.25451660]
[289.57528687 -155.48728943]
[284.20794678 -141.43872070]
[276.48245239 -128.53570557]
[266.63357544 -117.17034912]
[254.96066284 -107.68804932]
[241.81840515 -100.37694550]
[227.60618591 -95.45922852]
[212.75590515 -93.08433533]
[197.71884155 -93.32443237]
[182.95193481 -96.17223358]
[177.60008240 -82.15946960]
[172.24822998 -68.14670563]
[166.89636230 -54.13393784]
[161.54450989 -40.12117004]
[156.19264221 -26.10840416]
[165.10206604 -21.74836540]
[173.67544556 -16.75989342]
[181.86853027 -11.16873741]
[189.63902283 -5.00375700]
[196.94682312 1.70322561]
[203.75422668 8.91759109]
[210.02606201 16.60210037]
[215.72996521 24.71708679]
[220.83651733 33.22066498]
[225.31933594 42.06893921]
[229.15528870 51.21623993]
[232.32456970 60.61535263]
[234.81083679 70.21775818]
[236.60124207 79.97388458]
[237.68653870 89.83338928]
[238.06114197 99.74536896]
[237.72309875 109.65866089]
[236.67417908 119.52209473]
[234.91976929 129.28475952]
[232.46894836 138.89627075]
[229.33435059 148.30700684]
[225.53216553 157.46839905]
[221.08203125 166.33314514]
[216.00688171 174.85551453]
[210.33294678 182.99148560]
[204.08949280 190.69906616]
[197.30876160 197.93849182]
[190.02574158 204.67239380]
[182.27803040 210.86599731]
[174.10563660 216.48733521]
[165.55072021 221.50740051]
[156.65744019 225.90026855]
[147.47171021 229.64328003]
[138.04095459 232.71710205]
[128.41383362 235.10588074]
[118.64005280 236.79727173]
[108.77005768 237.78254700]
[98.85478973 238.05662537]
[88.94543457 237.61808777]
[79.09313965 236.46920776]
[69.34876251 234.61592102]
[59.76259232 232.06776428]
[50.38412094 228.83792114]
[41.26175690 224.94303894]
[32.44258118 220.40322876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[4 31]
[5 30]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
