%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACxxxxxxxxxxGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 313.76876831]
[92.50000000 298.76876831]
[92.50000000 283.76876831]
[92.50000000 268.76876831]
[92.50000000 253.76875305]
[92.50000000 238.76875305]
[92.50000000 223.76875305]
[92.50000000 208.76875305]
[92.50000000 193.76875305]
[92.50000000 178.76875305]
[85.18929291 177.72651672]
[78.00759125 176.00724792]
[71.01744843 173.62594604]
[64.27975464 170.60333252]
[57.85318375 166.96575928]
[51.79372787 162.74490356]
[46.15415573 157.97752380]
[40.98359680 152.70513916]
[36.32707977 146.97367859]
[32.22517014 140.83306885]
[18.70098114 147.32124329]
[5.17679119 153.80940247]
[-8.34739876 160.29757690]
[-21.87158775 166.78573608]
[-35.39577866 173.27389526]
[-47.06122971 185.57649231]
[-62.11234283 177.77261353]
[-58.78001785 161.14938354]
[-41.88394547 159.74971008]
[-28.35975456 153.26155090]
[-14.83556366 146.77337646]
[-1.31137395 140.28521729]
[12.21281624 133.79705811]
[25.73700523 127.30888367]
[22.15161324 114.15613556]
[20.87713623 100.58316803]
[21.95140839 86.99288940]
[7.45581245 83.13572693]
[-7.03978443 79.27857208]
[-21.53538132 75.42140961]
[-36.03097916 71.56424713]
[-50.52657318 67.70709229]
[-67.38786316 69.47717285]
[-73.75643921 53.76483536]
[-60.42114639 43.29553604]
[-46.66941452 53.21149445]
[-32.17381668 57.06865311]
[-17.67822075 60.92581177]
[-3.18262482 64.78297424]
[11.31297207 68.64012909]
[25.80856895 72.49729156]
[34.42527008 55.71995544]
[46.76781845 41.45853806]
[62.13493347 30.52335358]
[79.65348053 23.53571701]
[98.32807922 20.89265442]
[117.09767914 22.74434090]
[134.89581299 28.98556709]
[150.71122742 39.26171875]
[161.37284851 28.71042633]
[172.03448486 18.15913582]
[157.38288879 21.37329674]
[142.38696289 21.72307587]
[127.60144806 19.19553185]
[113.57328033 13.88416958]
[100.82140350 5.98546314]
[89.81752777 -4.20839453]
[80.96871185 -16.32031059]
[74.60230255 -29.90223885]
[70.95379639 -44.45175552]
[70.15816498 -59.43064117]
[72.24483490 -74.28479004]
[77.13662720 -88.46472168]
[84.65257263 -101.44588470]
[94.51464081 -112.74807739]
[106.35801697 -121.95320129]
[119.74459076 -128.72074890]
[134.17915344 -132.80038452]
[149.12774658 -134.04115295]
[164.03738403 -132.39720154]
[178.35653687 -127.92931366]
[191.55549622 -120.80278015]
[203.14601135 -111.28121948]
[212.69931030 -99.71686554]
[219.86201477 -86.53749847]
[224.36914062 -72.23065186]
[226.05397034 -57.32557678]
[224.85418701 -42.37363434]
[220.81416321 -27.92793846]
[214.08334351 -14.52286148]
[204.91072083 -2.65428877]
[193.64094543 7.23488998]
[208.45870972 4.90378618]
[223.27647400 2.57268214]
[238.09422302 0.24157819]
[252.10359192 -11.66293335]
[268.22546387 -4.80103159]
[282.99151611 -7.43989563]
[291.02499390 -17.58469009]
[303.42419434 -19.44984818]
[313.42419434 -12.57179165]
[328.24194336 -14.90289497]
[343.05969238 -17.23399925]
[357.87744141 -19.56510353]
[372.69522095 -21.89620590]
[387.51296997 -24.22731018]
[396.61199951 -37.14950180]
[412.19744873 -39.77052307]
[425.02270508 -30.53536797]
[427.47882080 -14.92309284]
[418.10858154 -2.19618201]
[402.47122192 0.09471415]
[389.84408569 -9.40955257]
[375.02630615 -7.07844877]
[360.20855713 -4.74734497]
[345.39080811 -2.41624093]
[330.57302856 -0.08513699]
[315.75527954 2.24596691]
[302.76071167 13.99931717]
[285.63037109 7.32615995]
[270.86431885 9.96502399]
[263.66082764 19.73319626]
[251.33282471 22.02211761]
[240.42532349 15.05933666]
[225.60757446 17.39043999]
[210.78981018 19.72154427]
[195.97206116 22.05264854]
[182.58576965 28.82076263]
[171.92414856 39.37205124]
[161.26251221 49.92334366]
[169.85920715 62.84546661]
[175.76803589 77.19712067]
[178.76168823 92.42611694]
[178.72496033 107.94651794]
[175.65928650 123.16117859]
[169.68260193 137.48471069]
[161.02485657 150.36601257]
[150.01916504 161.30946350]
[137.08898926 169.89402771]
[122.73179626 175.78939819]
[107.50000000 178.76875305]
[107.50000000 193.76875305]
[107.50000000 208.76875305]
[107.50000000 223.76875305]
[107.50000000 238.76875305]
[107.50000000 253.76875305]
[107.50000000 268.76876831]
[107.50000000 283.76876831]
[107.50000000 298.76876831]
[107.50000000 313.76876831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[59 130]
[60 129]
[61 128]
[92 127]
[93 126]
[94 125]
[95 124]
[97 121]
[98 120]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
