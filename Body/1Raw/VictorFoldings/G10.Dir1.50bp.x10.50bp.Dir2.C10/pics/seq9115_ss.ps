%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUAxxxxxxxxxxACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[126.00814056 293.81661987]
[126.00814056 278.81661987]
[126.00814056 263.81661987]
[126.00814056 248.81663513]
[126.00814056 233.81663513]
[126.00814056 218.81663513]
[126.00814056 203.81663513]
[126.00814056 188.81663513]
[126.00814056 173.81663513]
[126.00814056 158.81663513]
[121.55132294 144.49403381]
[106.90196991 142.05845642]
[98.09456635 129.65344238]
[100.74855042 114.30437469]
[88.20511627 108.12749481]
[86.89987183 94.20671844]
[78.38878632 81.85514832]
[69.87769318 69.50357056]
[61.36660385 57.15200043]
[52.85551453 44.80042648]
[44.34442520 32.44885635]
[35.83333206 20.09728241]
[29.94438362 16.86807823]
[27.05224228 11.88141251]
[27.23768806 7.05014706]
[19.24777031 -5.64478302]
[6.82891369 -9.28151703]
[0.44476661 -20.07325554]
[3.06497359 -31.92407227]
[-4.65911150 -44.78247452]
[-12.38319588 -57.64087677]
[-12.77034760 -42.64587402]
[-18.17316818 -28.65267754]
[-27.96347809 -17.28826714]
[-41.00296402 -9.87397194]
[-55.77553940 -7.27184439]
[-70.56360626 -9.78443336]
[-83.64776611 -17.11960220]
[-93.50674438 -28.42449760]
[-98.99423218 -42.38470459]
[-99.47221375 -57.37709045]
[-94.88510895 -71.65849304]
[-85.76626587 -83.56842804]
[-73.17591095 -91.72214508]
[-58.57792664 -95.17160797]
[-43.66960144 -93.51576233]
[-30.18431664 -86.94711304]
[-19.68835068 -76.22702789]
[-22.78667259 -90.90355682]
[-25.88499451 -105.58007812]
[-28.98331642 -120.25660706]
[-32.08163834 -134.93313599]
[-47.10276794 -134.28851318]
[-62.02511215 -136.12522888]
[-76.44157410 -140.39317322]
[-89.95886993 -146.97592163]
[-102.20823669 -155.69389343]
[-112.85549164 -166.30924988]
[-121.61018372 -178.53239441]
[-128.23347473 -192.02987671]
[-132.54466248 -206.43345642]
[-134.42616272 -221.35021973]
[-133.82662964 -236.37322998]
[-130.76240540 -251.09262085]
[-125.31711578 -265.10684204]
[-117.63928986 -278.03359985]
[-107.93838501 -289.52020264]
[-96.47905731 -299.25332642]
[-83.57392120 -306.96743774]
[-69.57504272 -312.45205688]
[-54.86431885 -315.55761719]
[-39.84306335 -316.19934082]
[-24.92107582 -314.35974121]
[-10.50543404 -310.08901978]
[3.01059270 -303.50366211]
[15.25827599 -294.78332520]
[25.90349007 -284.16592407]
[34.65582657 -271.94110107]
[41.27651596 -258.44235229]
[45.58493805 -244.03791809]
[47.46355820 -229.12080383]
[46.86112595 -214.09791565]
[43.79407501 -199.37911987]
[38.34607697 -185.36593628]
[30.66576004 -172.44067383]
[20.96264648 -160.95591736]
[9.50144482 -151.22500610]
[-3.40517569 -143.51339722]
[-17.40511322 -138.03144836]
[-14.30679035 -123.35492706]
[-11.20846939 -108.67840576]
[-8.11014748 -94.00187683]
[-5.01182556 -79.32535553]
[0.47520608 -65.36495972]
[8.19929123 -52.50656128]
[15.92337608 -39.64815903]
[31.69580460 -32.01726913]
[31.94270134 -13.63469887]
[39.93261719 -0.93976945]
[48.18490601 11.58619213]
[56.69599533 23.93776512]
[65.20708466 36.28933716]
[73.71817780 48.64091110]
[82.22926331 60.99248123]
[90.74035645 73.34405518]
[99.25144958 85.69562531]
[111.79488373 91.87250519]
[113.10012817 105.79328156]
[128.38812256 108.77908325]
[136.84362793 121.42658234]
[133.90289307 135.98294067]
[133.25297546 120.99703217]
[135.57617188 106.17803192]
[140.78089905 92.10995483]
[148.66206360 79.34722137]
[158.90905762 68.39281464]
[171.11804199 59.67843246]
[184.80789185 53.54751587]
[199.43907166 50.24168015]
[214.43498230 49.89120865]
[229.20462036 52.50991440]
[243.16593933 57.99459076]
[255.76870728 66.12908936]
[266.51626587 76.59283447]
[274.98507690 88.97344971]
[280.84133911 102.78301239]
[283.85427856 117.47730255]
[283.90515137 132.47721863]
[280.99197388 147.19161987]
[275.22955322 161.04060364]
[266.84494019 173.47839355]
[256.16864014 184.01481628]
[243.62133789 192.23463440]
[229.69755554 197.81390381]
[214.94602966 200.53276062]
[199.94808960 200.28404236]
[185.29481506 197.07754517]
[171.56369019 191.03965759]
[159.29583740 182.40832520]
[148.97476196 171.52368164]
[141.00814819 158.81663513]
[141.00814819 173.81663513]
[141.00814819 188.81663513]
[141.00814819 203.81663513]
[141.00814819 218.81663513]
[141.00814819 233.81663513]
[141.00814819 248.81663513]
[141.00814819 263.81661987]
[141.00814819 278.81661987]
[141.00814819 293.81661987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 111]
[14 108]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[25 99]
[26 98]
[29 96]
[30 95]
[31 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
