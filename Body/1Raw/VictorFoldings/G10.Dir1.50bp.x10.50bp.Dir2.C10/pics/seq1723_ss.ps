%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUxxxxxxxxxxUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[76.55554199 284.92816162]
[79.14653778 265.72042847]
[79.45859528 250.72367859]
[79.77065277 235.72692871]
[80.08271027 220.73017883]
[80.39476776 205.73342896]
[80.70681763 190.73666382]
[81.01887512 175.73991394]
[81.33093262 160.74316406]
[81.64299011 145.74641418]
[81.95504761 130.74964905]
[75.12692261 127.64694977]
[62.92494583 136.37115479]
[61.47068405 121.44154358]
[54.64256287 118.33883667]
[43.55124664 128.43748474]
[32.45993042 138.53613281]
[30.27592850 154.42984009]
[16.41492081 162.50770569]
[1.50988770 156.57310486]
[-3.00530386 141.17854309]
[6.33301401 128.13340759]
[22.36128235 127.44482422]
[33.45259857 117.34617615]
[44.54391479 107.24752808]
[52.21715164 93.24287415]
[62.78996277 83.78680420]
[74.43073273 79.26593018]
[85.34918213 79.43504333]
[93.99516296 83.47668457]
[99.22631073 90.11904144]
[96.43398285 75.38123322]
[93.64166260 60.64342880]
[90.84933472 45.90562057]
[88.05701447 31.16781425]
[84.95868683 16.49128914]
[81.55570984 1.88239694]
[78.15273285 -12.72649574]
[74.74975586 -27.33538818]
[71.34677887 -41.94428253]
[57.20647812 -48.05641174]
[49.46701813 -61.16954041]
[50.91593933 -76.14834595]
[60.78897476 -87.26864624]
[57.38599396 -101.87754059]
[53.98301697 -116.48643494]
[50.58003998 -131.09532166]
[47.17706299 -145.70422363]
[43.77408218 -160.31311035]
[40.37110519 -174.92201233]
[33.32596970 -188.16459656]
[23.11249161 -199.15025330]
[8.04934692 -203.98887634]
[5.04998970 -218.57836914]
[-5.16348982 -229.56402588]
[-20.98929024 -233.86241150]
[-24.91751862 -249.78411865]
[-12.90715027 -260.95028687]
[2.68657804 -255.87409973]
[5.82217455 -239.77751160]
[16.03565407 -228.79183960]
[30.36826324 -224.73898315]
[34.09815598 -209.36373901]
[44.31163406 -198.37806702]
[41.31108475 -213.07489014]
[41.71496582 -228.06945801]
[45.50231171 -242.58345032]
[52.47653961 -255.86351013]
[62.27564621 -267.22033691]
[74.39100647 -276.06445312]
[88.19375610 -281.93676758]
[102.96745300 -284.53250122]
[117.94525909 -283.71688843]
[132.34974670 -279.53231812]
[145.43324280 -272.19592285]
[156.51661682 -262.08856201]
[165.02459717 -249.73486328]
[170.51556396 -235.77601624]
[172.70451355 -220.93658447]
[171.47781372 -205.98683167]
[166.89913940 -191.70272827]
[159.20616150 -178.82568359]
[148.79817200 -168.02412415]
[136.21542358 -159.85868835]
[122.11102295 -154.75320435]
[107.21707153 -152.97270203]
[92.30664825 -154.60957336]
[78.15369415 -159.57887268]
[65.49282837 -167.62265015]
[54.97999954 -178.32498169]
[58.38297653 -163.71609497]
[61.78595352 -149.10719299]
[65.18893433 -134.49830627]
[68.59191132 -119.88941193]
[71.99488831 -105.28051758]
[75.39786530 -90.67163086]
[89.16867828 -85.05889130]
[97.08758545 -72.26221466]
[95.93947601 -57.07883072]
[85.95567322 -45.34725952]
[89.35865021 -30.73836517]
[92.76162720 -16.12947273]
[96.16460419 -1.52058101]
[99.56758118 13.08831120]
[103.13197327 16.35490799]
[104.64198303 21.91828537]
[102.79481506 28.37549019]
[105.58714294 43.11329651]
[108.37946320 57.85110092]
[111.17179108 72.58890533]
[113.96411896 87.32671356]
[124.29132080 98.20553589]
[138.86402893 101.76029968]
[153.43672180 105.31506348]
[164.54434204 94.60877991]
[179.68133545 91.62972260]
[194.01756287 97.32849884]
[202.97837830 109.88665771]
[203.70442200 125.29692078]
[195.96401978 138.64195251]
[182.22709656 145.66337585]
[166.87705994 144.12069702]
[154.81204224 134.50617981]
[149.88195801 119.88776398]
[135.30926514 116.33300781]
[120.73655701 112.77824402]
[114.79036713 117.34910583]
[125.87487793 127.45523071]
[136.95938110 137.56135559]
[148.04388428 147.66748047]
[161.60762024 154.07257080]
[168.10415649 167.59274292]
[164.62969971 182.18479919]
[152.73725891 191.32644653]
[137.74246216 190.93157959]
[126.34761810 181.17671204]
[123.64590454 166.42233276]
[116.72993469 153.11183167]
[109.81395721 139.80134583]
[102.89798737 126.49084473]
[96.95179749 131.06170654]
[96.63973999 146.05847168]
[96.32769012 161.05522156]
[96.01563263 176.05197144]
[95.70357513 191.04872131]
[95.39151764 206.04548645]
[95.07946014 221.04223633]
[94.76740265 236.03898621]
[94.45535278 251.03573608]
[94.14329529 266.03250122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[15 25]
[16 24]
[17 23]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[36 104]
[37 103]
[38 102]
[39 101]
[40 100]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[50 90]
[51 64]
[52 63]
[54 61]
[55 60]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
