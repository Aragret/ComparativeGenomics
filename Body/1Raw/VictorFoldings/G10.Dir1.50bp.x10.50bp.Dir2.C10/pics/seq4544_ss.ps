%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCxxxxxxxxxxAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[166.42089844 116.93386078]
[151.60313416 119.26496124]
[136.78538513 121.59606934]
[121.96762085 123.92716980]
[108.87446594 131.24627686]
[99.12681580 142.64729309]
[89.37916565 154.04832458]
[79.87080383 165.64965820]
[70.60585785 177.44630432]
[61.34090805 189.24293518]
[52.07595825 201.03958130]
[57.22798538 215.58125305]
[53.67808151 230.59463501]
[42.55901337 241.28901672]
[27.41883087 244.25186157]
[13.08871365 238.53773499]
[4.14134884 225.96998596]
[3.43180847 210.55894470]
[11.18650436 197.22222900]
[24.93094063 190.21551514]
[40.27931976 191.77462769]
[49.54426575 179.97799683]
[58.80921555 168.18135071]
[68.07416534 156.38470459]
[68.39139557 151.56030273]
[71.78571320 146.90090942]
[77.97814178 144.30065918]
[87.72579956 132.89964294]
[97.47344971 121.49862671]
[86.00576019 124.04486084]
[72.60374451 120.12709808]
[57.62403107 119.34725189]
[42.64431763 118.56740570]
[27.66460419 117.78756714]
[12.68488884 117.00772095]
[-2.29482532 116.22787476]
[-15.12794209 125.85547638]
[-30.61959267 121.68554688]
[-36.88591003 106.91690063]
[-29.11991119 92.87878418]
[-13.27900505 90.34003448]
[-1.51498020 101.24816132]
[13.46473408 102.02800751]
[28.44444847 102.80784607]
[43.42416382 103.58769226]
[58.40387726 104.36753845]
[73.38359070 105.14738464]
[76.27172852 98.22577667]
[84.93613434 77.46095276]
[73.84481812 67.36229706]
[62.75350571 57.26364899]
[47.58568954 60.53733063]
[33.40407944 54.23959351]
[25.66178894 40.79204178]
[27.33589172 25.36553955]
[37.78265762 13.89188862]
[52.98509598 10.78294182]
[67.09755707 17.23415375]
[74.69350433 30.76490021]
[72.85215759 46.17233658]
[83.94347382 56.27098465]
[95.03478241 66.36963654]
[122.28975677 83.35185242]
[119.63652039 109.10941315]
[134.45428467 106.77830505]
[149.27203369 104.44720459]
[164.08979797 102.11609650]
[163.42903137 91.31488800]
[163.66389465 80.49256134]
[164.79333496 69.72329712]
[166.81018066 59.08092117]
[169.70118713 48.63845825]
[173.44708252 38.46760941]
[178.02275085 28.63825607]
[183.39736938 19.21797752]
[189.53460693 10.27160263]
[196.39286804 1.86074853]
[203.92564392 -5.95659876]
[212.08172607 -13.12648201]
[220.80560303 -19.59934998]
[230.03785706 -25.33039284]
[239.71553040 -30.27986145]
[249.77256775 -34.41333389]
[260.14031982 -37.70196152]
[270.74789429 -40.12266922]
[281.52276611 -41.65830994]
[292.39117432 -42.29779816]
[303.27871704 -42.03618240]
[314.11074829 -40.87467575]
[324.81301880 -38.82067108]
[335.31210327 -35.88768005]
[345.53591919 -32.09524155]
[355.41418457 -27.46880531]
[364.87902832 -22.03954506]
[373.86526489 -15.84416485]
[382.31103516 -8.92463684]
[390.15811157 -1.32792687]
[397.35232544 6.89433050]
[403.84399414 15.68617916]
[409.58810425 24.98772430]
[414.54486084 34.73554230]
[418.67980957 44.86310196]
[421.96405029 55.30123901]
[424.37457275 65.97860718]
[425.89428711 76.82218933]
[426.51220703 87.75775909]
[441.44650269 86.35545349]
[456.38079834 84.95314789]
[471.31512451 83.55084229]
[486.51962280 76.05023193]
[497.93612671 88.58416748]
[489.05242920 103.02426147]
[472.71740723 98.48515320]
[457.78311157 99.88745880]
[442.84881592 101.28975677]
[427.91448975 102.69206238]
[425.58340454 117.50981903]
[439.36578369 123.42978668]
[455.09936523 121.76699066]
[463.73986816 133.89921570]
[479.11325073 129.31243896]
[492.20169067 138.58996582]
[492.96484375 154.61485291]
[480.81729126 165.09419250]
[465.07760620 161.98913574]
[457.81991577 147.68159485]
[443.07211304 149.76782227]
[433.44580078 137.21217346]
[419.66342163 131.29220581]
[414.04324341 145.17489624]
[406.89398193 158.32641602]
[398.30880737 170.57914734]
[388.39923096 181.77709961]
[377.29357910 191.77803040]
[365.13534546 200.45510864]
[352.08142090 207.69865417]
[338.29989624 213.41743469]
[323.96807861 217.53985596]
[309.27014160 220.01481628]
[294.39465332 220.81242371]
[279.53234863 219.92424011]
[264.87353516 217.36349487]
[250.60577393 213.16474915]
[236.91131592 207.38357544]
[223.96495056 200.09570312]
[211.93167114 191.39610291]
[200.96459961 181.39772034]
[191.20304871 170.23001099]
[182.77070618 158.03724670]
[175.77413940 144.97669983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 29]
[6 28]
[7 27]
[8 24]
[9 23]
[10 22]
[11 21]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[49 62]
[50 61]
[51 60]
[106 116]
[107 115]
[108 114]
[109 113]
[117 129]
[118 128]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
