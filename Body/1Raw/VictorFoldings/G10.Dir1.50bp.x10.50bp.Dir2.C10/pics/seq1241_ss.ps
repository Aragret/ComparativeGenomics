%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUAxxxxxxxxxxCCCCAAACCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[122.82836151 466.05224609]
[122.82836151 451.05224609]
[122.82836151 436.05224609]
[122.82836151 421.05224609]
[122.82836151 406.05224609]
[122.82836151 391.05224609]
[122.82836151 376.05224609]
[122.82836151 361.05224609]
[122.82836151 346.05224609]
[122.82836151 331.05224609]
[105.45817566 324.75033569]
[91.75589752 312.30517578]
[83.78885651 295.56121826]
[82.77165985 277.01394653]
[88.88109589 259.43798828]
[101.22597504 245.47198486]
[117.97707367 237.22248840]
[116.43978119 222.30148315]
[114.90248871 207.38046265]
[113.36519623 192.45944214]
[110.76047516 177.68733215]
[107.10176849 163.14036560]
[103.44306183 148.59341431]
[99.78435516 134.04646301]
[96.12564850 119.49951172]
[83.29199219 111.73437500]
[68.70824432 115.24354553]
[54.12449646 118.75270844]
[39.54074478 122.26187897]
[24.95699692 125.77104187]
[13.44640541 137.45172119]
[-2.35438442 133.06230164]
[-6.19087458 117.11822510]
[5.88358736 106.02140808]
[21.44783020 111.18729401]
[36.03157806 107.67813110]
[50.61532974 104.16896057]
[65.19908142 100.65979004]
[79.78282928 97.15062714]
[79.78282928 82.15062714]
[65.19908142 78.64145660]
[50.82023621 85.75682831]
[36.35386276 78.82115173]
[32.89731979 63.15488815]
[43.10217285 50.77585220]
[59.14012909 51.18017960]
[68.70824432 64.05770874]
[83.29199219 67.56687927]
[71.93405151 57.76906204]
[73.34336090 42.83541489]
[86.33372498 35.33538055]
[99.97132874 41.58163834]
[102.77756500 56.31687546]
[107.03041077 41.93239594]
[111.28325653 27.54791451]
[115.53610229 13.16343307]
[101.70317078 7.32135201]
[88.61133575 -0.03282104]
[76.42524719 -8.80659866]
[65.29814911 -18.88964272]
[55.36998367 -30.15514565]
[46.76560974 -42.46143341]
[39.59323120 -55.65374374]
[33.94305420 -69.56616974]
[29.88613129 -84.02373505]
[27.47348213 -98.84464264]
[26.73545074 -113.84248352]
[27.68131638 -128.82865906]
[30.29918671 -143.61468506]
[34.55613708 -158.01463318]
[40.39863205 -171.84739685]
[47.75319672 -184.93901062]
[56.52733994 -197.12483215]
[66.61071777 -208.25163269]
[77.87651825 -218.17945862]
[90.18305969 -226.78346252]
[103.37558746 -233.95544434]
[117.28817749 -239.60520935]
[131.74586487 -243.66169739]
[146.56684875 -246.07391357]
[161.56471252 -246.81149292]
[176.55085754 -245.86517334]
[191.33680725 -243.24687195]
[205.73661804 -238.98948669]
[219.56921387 -233.14657593]
[232.66059875 -225.79162598]
[244.84617615 -217.01710510]
[255.97267151 -206.93341064]
[265.90014648 -195.66731262]
[274.50378418 -183.36050415]
[281.67538452 -170.16777039]
[287.32473755 -156.25500488]
[291.38079834 -141.79719543]
[293.79254150 -126.97614288]
[294.52969360 -111.97825623]
[293.58291626 -96.99214172]
[290.96417236 -82.20626068]
[286.70635986 -67.80657196]
[280.86303711 -53.97416306]
[273.50769043 -40.88298798]
[264.73281860 -28.69768333]
[254.64877319 -17.57149315]
[243.38238525 -7.64434004]
[231.07531738 0.95893097]
[217.88237000 8.13012409]
[203.96943665 13.77905464]
[189.51150513 17.83468246]
[174.69038391 20.24600029]
[159.69247437 20.98268700]
[144.70639038 20.03547668]
[129.92059326 17.41628075]
[125.66773987 31.80076027]
[121.41489410 46.18524170]
[117.16204834 60.56972504]
[130.92298889 97.17254639]
[110.67259979 115.84080505]
[114.33130646 130.38775635]
[117.99001312 144.93470764]
[121.64871979 159.48167419]
[125.30742645 174.02862549]
[133.32505798 161.35118103]
[147.56242371 156.62913513]
[161.56690979 162.00259399]
[168.99150085 175.03622437]
[166.47125244 189.82298279]
[155.14839172 199.66130066]
[140.15457153 200.09230042]
[128.28620911 190.92214966]
[129.82350159 205.84317017]
[131.36079407 220.76419067]
[132.89808655 235.68519592]
[144.47131348 237.78456116]
[155.18264771 242.61509705]
[164.39881897 249.88490295]
[171.57641602 259.15802002]
[176.29403687 269.88061523]
[178.27696228 281.41403198]
[177.41317749 293.07281494]
[173.75970459 304.16549683]
[167.53880310 314.03555298]
[159.12451172 322.10034180]
[149.02020264 327.88534546]
[137.82835388 331.05224609]
[137.82835388 346.05224609]
[137.82835388 361.05224609]
[137.82835388 376.05224609]
[137.82835388 391.05224609]
[137.82835388 406.05224609]
[137.82835388 421.05224609]
[137.82835388 436.05224609]
[137.82835388 451.05224609]
[137.82835388 466.05224609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[17 131]
[18 130]
[19 129]
[20 128]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 48]
[41 47]
[53 114]
[54 113]
[55 112]
[56 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
