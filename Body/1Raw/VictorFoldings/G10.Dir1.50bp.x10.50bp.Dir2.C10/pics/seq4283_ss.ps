%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUxxxxxxxxxxAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[4.77850103 225.82556152]
[-6.75422096 216.20129395]
[-11.12047291 231.40808105]
[-25.60926819 234.86120605]
[-36.27089310 245.41250610]
[-46.48437500 256.39816284]
[-56.23202515 267.79919434]
[-65.97967529 279.20019531]
[-75.72733307 290.60122681]
[-85.47498322 302.00225830]
[-95.22263336 313.40325928]
[-89.48496246 327.59262085]
[-91.01016998 342.82196045]
[-99.44776917 355.59164429]
[-112.85887146 362.96737671]
[-128.16168213 363.25418091]
[-141.83975220 356.38623047]
[-150.74995422 343.94165039]
[-152.84477234 328.78018188]
[-147.64285278 314.38580322]
[-136.33955383 304.06619263]
[-121.53228760 300.19277954]
[-106.62365723 303.65560913]
[-96.87599945 292.25460815]
[-87.12834930 280.85357666]
[-77.38069916 269.45254517]
[-67.63304901 258.05154419]
[-57.88539505 246.65051270]
[-58.00865555 243.78833008]
[-56.96823883 240.70425415]
[-54.67345428 237.85542297]
[-51.20580292 235.72317505]
[-46.82218552 234.75086975]
[-36.16055679 224.19958496]
[-32.55689621 209.74749756]
[-17.30551147 205.53967285]
[-29.77632523 189.76252747]
[-40.13917160 172.52735901]
[-48.22572708 154.11412048]
[-53.90464401 134.82191467]
[-57.08367538 114.96408081]
[-57.71118546 94.86318970]
[-55.77698135 74.84573364]
[-51.31248093 55.23686600]
[-44.39019775 36.35508728]
[-35.12257767 18.50709534]
[-23.66015053 1.98280013]
[-34.95915604 -7.88292313]
[-46.25815964 -17.74864578]
[-57.55716705 -27.61436844]
[-68.85617065 -37.48009109]
[-84.27761841 -34.88915634]
[-97.73027039 -42.86161423]
[-102.86219788 -57.63312149]
[-97.25025940 -72.22901917]
[-83.54424286 -79.75756836]
[-68.21570587 -76.66402435]
[-58.50232315 -64.40905762]
[-58.99044800 -48.77909851]
[-47.69144440 -38.91337204]
[-36.39243698 -29.04765129]
[-25.09343338 -19.18192673]
[-13.79442883 -9.31620502]
[-5.42334509 -17.41006279]
[3.52180815 -24.86457825]
[12.99232197 -31.63916016]
[22.93662453 -37.69691467]
[33.30056763 -43.00485992]
[44.02771378 -47.53408813]
[55.05965042 -51.25994110]
[66.33630371 -54.16212082]
[77.79626465 -56.22483444]
[89.37714386 -57.43684387]
[101.01586151 -57.79154968]
[112.64904785 -57.28701782]
[124.21335602 -55.92600250]
[135.64581299 -53.71590805]
[146.88415527 -50.66877747]
[157.86721802 -46.80119324]
[168.53515625 -42.13422394]
[178.82989502 -36.69327927]
[188.69537354 -30.50798798]
[198.07788086 -23.61203003]
[206.92631531 -16.04296112]
[215.19248962 -7.84199190]
[222.83140564 0.94621718]
[229.80145264 10.27381134]
[236.06468201 20.08999825]
[241.58697510 30.34132576]
[246.33828735 40.97196960]
[250.29273987 51.92404556]
[253.42878723 63.13791275]
[255.72935486 74.55250549]
[270.63125610 72.83982086]
[285.53314209 71.12712860]
[300.43505859 69.41443634]
[315.29809570 67.39210510]
[330.11584473 65.06099701]
[344.93362427 62.72989655]
[352.05831909 49.07175446]
[365.69976807 42.30683517]
[380.53347778 44.84168243]
[390.90600586 55.49760056]
[405.72375488 53.16649628]
[420.54150391 50.83539200]
[435.35928345 48.50429153]
[450.17703247 46.17318726]
[462.58526611 35.45088577]
[477.98422241 41.09043121]
[480.53274536 57.29033661]
[467.60916138 67.38552856]
[452.50811768 60.99094391]
[437.69036865 63.32204819]
[422.87261963 65.65315247]
[408.05487061 67.98425293]
[393.23709106 70.31536102]
[386.63735962 83.64132690]
[373.29846191 90.60823822]
[358.23883057 88.35852051]
[347.26470947 77.54765320]
[332.44696045 79.87876129]
[317.62921143 82.20986176]
[314.11193848 85.52714539]
[308.45346069 86.62839508]
[302.14773560 84.31633759]
[287.24584961 86.02902985]
[272.34393311 87.74172211]
[257.44204712 89.45440674]
[257.73141479 104.47261047]
[256.59149170 119.45027924]
[254.03254700 134.25169373]
[250.07781982 148.74273682]
[244.76310730 162.79208374]
[238.13661194 176.27241516]
[230.25834656 189.06159973]
[221.19970703 201.04371643]
[211.04280090 212.11021423]
[199.87965393 222.16079712]
[187.81141663 231.10438538]
[174.94746399 238.85993958]
[161.40434265 245.35717773]
[147.30479431 250.53724670]
[132.77659607 254.35316467]
[117.95137024 256.77038574]
[102.96347809 257.76699829]
[87.94873810 257.33395386]
[73.04319763 255.47518921]
[58.38193130 252.20756531]
[44.09779739 247.56065369]
[30.32023621 241.57659912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[4 34]
[5 33]
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[93 128]
[94 127]
[95 126]
[96 125]
[97 122]
[98 121]
[99 120]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
