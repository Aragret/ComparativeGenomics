%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAxxxxxxxxxxGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.42258453 268.78448486]
[80.11460114 253.78764343]
[79.80662537 238.79080200]
[79.49864960 223.79396057]
[79.19067383 208.79713440]
[78.88269043 193.80029297]
[78.57471466 178.80345154]
[78.26673889 163.80661011]
[77.95876312 148.80976868]
[65.28724670 140.78277588]
[51.59661865 146.91195679]
[37.90599442 153.04112244]
[24.21536827 159.17030334]
[10.58838844 165.43971252]
[-2.97350788 171.84867859]
[-16.53540421 178.25765991]
[-30.09729958 184.66662598]
[-31.86896896 196.49665833]
[-39.08093262 205.88883972]
[-49.83197784 210.55863953]
[-61.37924957 209.44174194]
[-70.83782959 202.93434143]
[-84.65141296 208.78112793]
[-98.46499634 214.62791443]
[-101.83979034 229.77355957]
[-113.49468231 240.01773071]
[-128.94815063 241.42132568]
[-142.25801086 233.44465637]
[-148.30633545 219.15489197]
[-144.76745605 204.04675293]
[-133.00210571 193.92962646]
[-117.53432465 192.69374084]
[-104.31178284 200.81433105]
[-90.49820709 194.96754456]
[-76.68462372 189.12075806]
[-70.89715576 171.80076599]
[-54.02522278 164.02134705]
[-36.50627518 171.10473633]
[-22.94437981 164.69575500]
[-9.38248348 158.28678894]
[4.17941284 151.87780762]
[8.91240215 146.14099121]
[18.08619308 145.47967529]
[31.77681923 139.35049438]
[45.46744537 133.22132874]
[59.15806961 127.09215546]
[53.15450287 112.47135162]
[52.15861511 96.87052155]
[56.16493607 81.93886566]
[64.64498138 69.21955872]
[76.61408234 59.99030304]
[90.74465179 55.13520813]
[105.51305389 55.06092834]
[119.36376190 59.66476440]
[128.03036499 47.42181015]
[129.27516174 29.07838821]
[145.44067383 22.31668854]
[153.85408020 9.89837360]
[162.26748657 -2.51994085]
[163.60231018 -18.28473854]
[177.14657593 -24.48168373]
[185.55998230 -36.89999771]
[183.89881897 -49.73137283]
[191.21243286 -59.91382980]
[203.11473083 -62.27973175]
[211.78134155 -74.52268982]
[220.44793701 -86.76564026]
[229.11454773 -99.00859833]
[215.12489319 -93.59663391]
[200.12693787 -93.84475708]
[186.32395935 -99.71652985]
[175.74365234 -110.34936523]
[169.94030762 -124.18125153]
[169.76644897 -139.18023682]
[175.24761963 -153.14292908]
[185.57861328 -164.01815796]
[199.24177551 -170.20829773]
[214.22994995 -170.80400085]
[228.34129333 -165.71777344]
[239.50282288 -155.69677734]
[246.07485962 -142.21315002]
[247.09194946 -127.24766541]
[242.40501404 -112.99943542]
[254.18716431 -122.28282166]
[265.96929932 -131.56620789]
[277.75143433 -140.84959412]
[279.72509766 -145.81547546]
[283.09280396 -149.15673828]
[286.98492432 -150.61312866]
[290.55679321 -150.31489563]
[302.88806152 -158.85534668]
[315.21936035 -167.39581299]
[311.64007568 -182.14549255]
[313.63461304 -197.19163513]
[320.93313599 -210.49935913]
[332.54867554 -220.26892090]
[346.91024780 -225.17904663]
[362.07562256 -224.56568909]
[375.99377441 -218.51181030]
[386.78237915 -207.83613586]
[392.98242188 -193.98246765]
[393.75534058 -178.82440186]
[388.99661255 -164.41194153]
[379.34985352 -152.69424438]
[366.11968994 -145.25604248]
[351.09536743 -143.10330200]
[336.30880737 -146.52714539]
[323.75982666 -155.06452942]
[311.42852783 -146.52406311]
[299.09725952 -137.98361206]
[287.03482056 -129.06745911]
[275.25268555 -119.78407288]
[263.47055054 -110.50068665]
[251.68840027 -101.21730042]
[241.35749817 -90.34198761]
[232.69090271 -78.09903717]
[224.02429199 -65.85607910]
[215.35768127 -53.61312485]
[214.71243286 -36.10232544]
[197.97830200 -28.48658752]
[189.56489563 -16.06827354]
[188.83184814 -1.19171703]
[174.68580627 5.89346933]
[166.27239990 18.31178284]
[157.85899353 30.73009872]
[159.82962036 42.70418549]
[152.86932373 53.13134766]
[140.27333069 56.08841705]
[131.60671997 68.33137512]
[136.98208618 74.27866364]
[141.24185181 81.13385773]
[144.23361206 88.68827820]
[145.84388733 96.70782471]
[146.00230408 104.94028473]
[144.68449402 113.12319946]
[141.91345215 120.99226379]
[137.75941467 128.28985596]
[132.33818054 134.77345276]
[125.80798340 140.22369385]
[118.36489105 144.45179749]
[110.23692322 147.30598450]
[101.67710876 148.67694092]
[92.95559692 148.50180054]
[93.26357269 163.49864197]
[93.57155609 178.49546814]
[93.87953186 193.49230957]
[94.18750763 208.48915100]
[94.49548340 223.48599243]
[94.80346680 238.48281860]
[95.11144257 253.47966003]
[95.41941833 268.47650146]
[98.00519562 287.68493652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 46]
[11 45]
[12 44]
[13 43]
[14 41]
[15 40]
[16 39]
[17 38]
[22 35]
[23 34]
[24 33]
[54 129]
[55 128]
[57 125]
[58 124]
[59 123]
[61 121]
[62 120]
[65 118]
[66 117]
[67 116]
[68 115]
[83 114]
[84 113]
[85 112]
[86 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
