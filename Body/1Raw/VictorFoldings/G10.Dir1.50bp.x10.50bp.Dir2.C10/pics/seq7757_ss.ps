%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACxxxxxxxxxxUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.36725616 147.99945068]
[75.95384216 160.41775513]
[67.54043579 172.83607483]
[59.12702179 185.25437927]
[50.71361160 197.67269897]
[43.34737396 210.73939514]
[37.07796860 224.36637878]
[30.80856323 237.99334717]
[32.85963821 254.26373291]
[19.63286018 263.95828247]
[4.73480463 257.10409546]
[3.49131322 240.75215149]
[17.18158340 231.72395325]
[23.45098877 218.09696960]
[29.72039413 204.46998596]
[15.82903194 210.12950134]
[1.22704315 206.69702148]
[-8.68807411 195.44132996]
[-10.25128269 180.52301025]
[-2.88475585 167.45648193]
[10.68853283 161.07167053]
[25.45133591 163.72866821]
[35.94671249 174.44534302]
[38.29529953 189.25929260]
[46.70870972 176.84097290]
[55.12211990 164.42266846]
[63.53553009 152.00434875]
[71.94893646 139.58602905]
[69.82251740 132.39379883]
[56.48539734 139.25828552]
[43.14827728 146.12277222]
[29.81115913 152.98727417]
[18.75482559 163.12420654]
[3.78838801 164.12707520]
[-8.52153683 155.55586243]
[-12.77389145 141.17123413]
[-7.10293007 127.28453827]
[6.00317812 119.98865509]
[20.79269218 122.48394775]
[35.71834946 120.99240112]
[50.64400864 119.50085449]
[65.56967163 118.00931549]
[63.44324493 110.81707001]
[49.62966156 104.97028351]
[35.81607819 99.12349701]
[22.00249672 93.27671051]
[5.05937481 92.67094421]
[0.95114112 76.22227478]
[15.61971855 67.72114563]
[27.84928513 79.46312714]
[41.66286850 85.30991364]
[55.47645187 91.15670013]
[69.29003143 97.00348663]
[78.32955170 85.03323364]
[68.92569733 73.34702301]
[54.24605942 67.44627380]
[52.29500961 52.68000412]
[36.56397629 49.53133774]
[29.34595108 35.20375443]
[36.17798996 20.68814659]
[51.81913376 17.11965179]
[64.27083588 27.23571014]
[63.98122025 43.27614975]
[77.98822784 48.34102249]
[80.61190796 63.94316483]
[90.01576233 75.62937164]
[87.36576843 60.86531067]
[84.71577454 46.10124969]
[82.06578064 31.33718681]
[75.05475616 18.07650757]
[73.76361084 3.13218021]
[78.39633942 -11.13448715]
[88.22095490 -22.46925926]
[101.68508148 -29.08116341]
[116.66130066 -29.92546844]
[130.78326416 -24.86877251]
[141.81959534 -14.71006680]
[148.02648926 -1.05449915]
[148.42320251 13.94025421]
[142.94705200 27.90491486]
[132.46536255 38.63157272]
[125.73815918 52.03845978]
[119.01094818 65.44535065]
[112.28374481 78.85224152]
[124.61502838 70.31178284]
[136.94631958 61.77132416]
[149.27760315 53.23086548]
[161.60888672 44.69040680]
[173.94017029 36.14994812]
[186.27145386 27.60948944]
[172.33201599 22.06944847]
[167.77134705 7.77957916]
[175.92424011 -4.81130743]
[190.82925415 -6.49670410]
[201.58778381 3.95575786]
[200.33346558 18.90265846]
[213.47509766 11.67095566]
[226.61672974 4.43925333]
[228.42152405 -10.97250557]
[238.96516418 -22.35719681]
[254.19340515 -25.33717537]
[268.25067139 -18.76657486]
[275.73165894 -5.17192984]
[273.75979614 10.21934414]
[263.09326172 21.48898697]
[247.83358765 24.30359077]
[233.84843445 17.58088493]
[220.70680237 24.81258774]
[207.56517029 32.04428864]
[194.81190491 39.94077301]
[182.48062134 48.48123169]
[170.14933777 57.02169037]
[157.81805420 65.56214905]
[145.48677063 74.10260773]
[133.15548706 82.64306641]
[120.82420349 91.18352509]
[122.82025909 106.05012512]
[136.96757507 111.03544617]
[151.11489868 116.02076721]
[165.26220703 121.00608826]
[180.29457092 115.40181732]
[193.97395325 123.78357697]
[195.80671692 139.72160339]
[184.38691711 150.98959351]
[168.47485352 148.94372559]
[160.27688599 135.15341187]
[146.12957764 130.16809082]
[131.98225403 125.18276215]
[117.83493805 120.19744110]
[127.86029053 131.35505676]
[137.88563538 142.51268005]
[147.91098022 153.67028809]
[157.93632507 164.82791138]
[170.78204346 172.57308960]
[181.17366028 183.39039612]
[188.39714050 196.53654480]
[191.95613098 211.10821533]
[191.60607910 226.10414124]
[187.37104797 240.49386597]
[179.54202271 253.28865051]
[168.65698242 263.60931396]
[155.46386719 270.74664307]
[140.86923218 274.21026611]
[125.87592316 273.76214600]
[111.51419830 269.43310547]
[98.77088928 261.52056885]
[88.52164459 250.56825256]
[81.47073364 237.32875061]
[78.10263824 222.71177673]
[78.64803314 207.72624207]
[80.07783508 192.79454041]
[81.50764465 177.86283875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 15]
[7 14]
[8 13]
[43 53]
[44 52]
[45 51]
[46 50]
[54 66]
[55 65]
[57 63]
[84 116]
[85 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[96 109]
[97 108]
[98 107]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
