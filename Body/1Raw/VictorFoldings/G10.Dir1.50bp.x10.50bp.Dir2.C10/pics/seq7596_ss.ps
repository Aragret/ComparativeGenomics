%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGxxxxxxxxxxUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[352.86038208 373.41629028]
[342.52947998 362.54095459]
[332.19857788 351.66564941]
[321.86767578 340.79034424]
[311.53677368 329.91500854]
[300.98474121 319.25411987]
[290.21606445 308.81210327]
[279.44738770 298.37008667]
[268.67871094 287.92810059]
[257.91003418 277.48608398]
[247.14135742 267.04406738]
[236.37268066 256.60205078]
[225.60400391 246.16004944]
[214.83532715 235.71804810]
[204.03073120 242.42945862]
[191.98291016 246.53485107]
[179.31100464 247.81909180]
[166.66717529 246.21211243]
[154.70304871 241.79278564]
[144.03605652 234.78498840]
[135.21771240 225.54632568]
[128.70494080 214.54980469]
[124.83652496 202.35974121]
[123.81542969 189.60266113]
[125.69815063 176.93521118]
[130.39163208 165.01029968]
[137.65782166 154.44343567]
[127.78211212 143.15315247]
[117.90641022 131.86286926]
[108.03070068 120.57259369]
[93.75667572 121.18359375]
[82.09559631 112.92888641]
[77.92782593 99.26320648]
[63.99711227 93.70127106]
[50.06639481 88.13933563]
[36.13567734 82.57739258]
[22.20496178 77.01545715]
[8.27424526 71.45352173]
[-5.65647030 65.89158630]
[-15.73451042 77.21452332]
[-29.07891655 84.40497589]
[-44.07828522 86.59466553]
[-58.92136765 83.51918030]
[-71.81579590 75.54988861]
[-81.20449829 63.64913559]
[-85.95375061 49.25398254]
[-85.49005127 34.10271835]
[-79.86939240 20.02493286]
[-69.77050781 8.72058582]
[-56.41287231 1.55473471]
[-41.40949249 -0.60731131]
[-26.57209969 2.49552584]
[-13.69238186 10.48856354]
[-4.32562494 22.40660286]
[0.39708793 36.81048584]
[-0.09453321 51.96086884]
[13.83618259 57.52280426]
[27.76689911 63.08474350]
[41.69761658 68.64668274]
[55.62833023 74.20861816]
[69.55905151 79.77055359]
[83.48976135 85.33248901]
[87.05578613 82.10667419]
[91.23548889 79.72915649]
[90.31207275 64.75760651]
[89.38865662 49.78606033]
[74.78601074 45.78089142]
[62.27645493 37.24919891]
[53.21693802 25.11643791]
[48.59016418 10.69868183]
[48.89801407 -4.44014025]
[54.10709381 -18.65788269]
[63.65236282 -30.41231155]
[76.49842072 -38.42839432]
[91.25181580 -41.83660507]
[106.31222534 -40.26724625]
[120.04599762 -33.89055252]
[130.96339417 -23.39821815]
[137.88018799 -9.92837334]
[140.04609680 5.05787373]
[137.22616577 19.93492699]
[129.72628784 33.08903503]
[118.35998535 43.09333801]
[104.36020660 48.86264420]
[105.28362274 63.83419418]
[106.20703888 78.80574799]
[120.42501068 91.60103607]
[119.32098389 110.69688416]
[129.19668579 121.98716736]
[139.07238770 133.27745056]
[148.94810486 144.56771851]
[164.83729553 137.33168030]
[182.15998840 135.29386902]
[199.26097107 138.63845825]
[214.50946045 147.03581238]
[226.45460510 159.67500305]
[233.96347046 175.34204102]
[236.32856750 192.53648376]
[233.33445740 209.61521912]
[225.27732849 224.94935608]
[236.04600525 235.39137268]
[246.81468201 245.83337402]
[257.58337402 256.27539062]
[268.35205078 266.71740723]
[279.12072754 277.15939331]
[289.88940430 287.60140991]
[300.65808105 298.04342651]
[311.42675781 308.48544312]
[317.83013916 310.49526978]
[321.64328003 314.81356812]
[322.41207886 319.58410645]
[332.74298096 330.45944214]
[343.07388306 341.33474731]
[353.40478516 352.21005249]
[363.73568726 363.08538818]
[376.11785889 354.56314087]
[389.68078613 348.08291626]
[404.09051514 343.80432129]
[418.99215698 341.83270264]
[434.01876831 342.21661377]
[448.80029297 344.94659424]
[462.97274780 349.95541382]
[476.18710327 357.11975098]
[488.11791992 366.26315308]
[498.47143555 377.16046143]
[506.99264526 389.54330444]
[513.47174072 403.10678101]
[517.74914551 417.51687622]
[519.71954346 432.41867065]
[519.33441162 447.44525146]
[516.60321045 462.22656250]
[511.59320068 476.39859009]
[504.42779541 489.61233521]
[495.28341675 501.54241943]
[484.38522339 511.89501953]
[472.00167847 520.41522217]
[458.43765259 526.89318848]
[444.02725220 531.16943359]
[429.12527466 533.13861084]
[414.09872437 532.75219727]
[399.31762695 530.01977539]
[385.14602661 525.00860596]
[371.93286133 517.84210205]
[360.00354004 508.69674683]
[349.65182495 497.79772949]
[341.13265991 485.41345215]
[334.65579224 471.84890747]
[330.38076782 457.43814087]
[328.41281128 442.53598022]
[328.80044556 427.50946045]
[331.53408813 412.72860718]
[336.54641724 398.55740356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 108]
[7 107]
[8 106]
[9 105]
[10 104]
[11 103]
[12 102]
[13 101]
[14 100]
[27 91]
[28 90]
[29 89]
[30 88]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[64 86]
[65 85]
[66 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
