%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUAxxxxxxxxxxCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.82566833 320.21957397]
[129.82566833 305.21957397]
[129.82566833 290.21957397]
[129.82566833 275.21957397]
[129.82566833 260.21957397]
[129.82566833 245.21958923]
[129.82566833 230.21958923]
[129.82566833 215.21958923]
[129.82566833 200.21958923]
[129.82566833 185.21958923]
[126.42269897 170.61068726]
[119.79419708 157.15472412]
[107.22916412 149.15666199]
[108.07172394 133.35791016]
[101.44322205 119.90193939]
[93.77175903 120.13899994]
[86.17116547 117.37438965]
[79.82461548 111.71882629]
[75.83126831 103.74909210]
[75.02420044 94.45613861]
[60.06394958 95.54744720]
[45.10370255 96.63876343]
[30.14345360 97.73007202]
[27.75162697 112.60877991]
[21.99244690 126.53459930]
[13.17650318 138.75654602]
[1.77922440 148.61547852]
[-11.58474636 155.57975769]
[-26.19470787 159.27375793]
[-41.26276398 159.49830627]
[-55.97631073 156.24128723]
[-69.54187012 149.67832947]
[-81.22785950 140.16337585]
[-90.40408325 128.20956421]
[-96.57566071 114.46153259]
[-99.40978241 99.66070557]
[-98.75360107 84.60527039]
[-94.64250183 70.10714722]
[-87.29818726 56.94820404]
[-77.11673737 45.83808136]
[-64.64722443 37.37593842]
[-50.56210709 32.01812363]
[-35.62097931 30.05358124]
[-20.62959862 31.58825493]
[-6.39643049 36.53938293]
[6.31094694 44.63995361]
[16.80724144 55.45312119]
[24.52640152 68.39573669]
[29.05214310 82.76982117]
[44.01239014 81.67851257]
[58.97264099 80.58720398]
[73.93289185 79.49588776]
[85.63251495 70.10872650]
[89.94009399 55.74054337]
[94.24768066 41.37236023]
[98.55526733 27.00417709]
[87.31130219 36.93258667]
[74.27815247 44.35801697]
[60.00414276 48.96807098]
[45.08979797 50.56879425]
[30.16258812 49.09284592]
[15.85052490 44.60231781]
[2.75573754 37.28613663]
[-8.57085705 27.45210075]
[-17.65273285 15.51394463]
[-24.10779953 1.97392595]
[-27.66448402 -12.59830761]
[-28.17315102 -27.58967972]
[-25.61240005 -42.36948395]
[-20.08996582 -56.31590652]
[-11.83818531 -68.84220123]
[-1.20422399 -79.42137146]
[11.36453247 -87.60833740]
[25.33929634 -93.05865479]
[40.13212967 -95.54302216]
[55.12067413 -94.95692444]
[69.67433929 -91.32501221]
[83.18083191 -84.80008698]
[95.07191467 -75.65666962]
[104.84731293 -64.27942657]
[112.09575653 -51.14701843]
[116.51229095 -36.81195068]
[117.91110992 -21.87731552]
[116.23336792 -6.97143841]
[111.54721069 7.28399563]
[123.04901886 -2.34453082]
[122.12339020 -17.72144127]
[130.33369446 -30.54502678]
[144.35482788 -36.01053619]
[158.73358154 -32.21721649]
[170.23538208 -41.84574509]
[181.73718262 -51.47426987]
[193.23899841 -61.10279846]
[204.74079895 -70.73132324]
[209.85614014 -86.31224823]
[225.96055603 -89.40740204]
[236.48719788 -76.83274841]
[230.60716248 -61.52402115]
[214.36932373 -59.22951889]
[202.86752319 -49.60099411]
[191.36572266 -39.97246552]
[179.86390686 -30.34394073]
[168.36210632 -20.71541405]
[169.56669617 -5.89357376]
[161.71977234 6.94736719]
[147.65179443 12.77363777]
[132.67753601 9.15727234]
[121.17573547 18.78579903]
[112.92344666 31.31175995]
[108.61586761 45.67994690]
[104.30828094 60.04813004]
[100.00069427 74.41631317]
[120.77605438 90.68441010]
[114.89919281 113.27343750]
[121.52768707 126.72940826]
[134.56683350 135.68994141]
[133.25016785 150.52622986]
[139.87866211 163.98219299]
[141.18041992 149.03878784]
[146.23620605 134.91650391]
[154.71418762 122.54218292]
[166.05796814 112.72798157]
[179.52305603 106.11800385]
[194.22569275 103.14607239]
[209.20094299 104.00723267]
[223.46598816 108.64497375]
[236.08457947 116.75491333]
[246.22856140 127.80477905]
[253.23217773 141.06938171]
[256.63574219 155.67813110]
[256.21594238 170.67225647]
[252.00025940 185.06767273]
[244.26541138 197.91960144]
[233.51902771 208.38456726]
[220.46641541 215.77572632]
[205.96423340 219.60801697]
[190.96424866 219.62989807]
[176.45092773 215.83993530]
[163.37681580 208.48689270]
[152.59994507 198.05332947]
[144.82566833 185.21958923]
[144.82566833 200.21958923]
[144.82566833 215.21958923]
[144.82566833 230.21958923]
[144.82566833 245.21958923]
[144.82566833 260.21957397]
[144.82566833 275.21957397]
[144.82566833 290.21957397]
[144.82566833 305.21957397]
[144.82566833 320.21957397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 118]
[12 117]
[14 115]
[15 114]
[20 52]
[21 51]
[22 50]
[23 49]
[53 112]
[54 111]
[55 110]
[56 109]
[85 108]
[86 107]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
