%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAxxxxxxxxxxGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 282.84884644]
[92.50000000 267.84884644]
[92.50000000 252.84886169]
[92.50000000 237.84886169]
[92.50000000 222.84886169]
[92.50000000 207.84886169]
[92.50000000 192.84886169]
[92.50000000 177.84886169]
[92.50000000 162.84886169]
[92.50000000 147.84886169]
[63.85030365 132.23294067]
[51.60771942 101.98760223]
[36.70581436 100.27490997]
[21.80391312 98.56222534]
[6.90201139 96.84953308]
[-8.09474277 96.53747559]
[-23.05499077 97.62878418]
[-38.01523972 98.72010040]
[-42.77650833 113.46212769]
[-58.02994156 123.48880005]
[-78.99832916 121.72962952]
[-93.01503754 127.07114410]
[-107.03175354 132.41265869]
[-121.04846191 137.75416565]
[-124.12008667 152.87265015]
[-134.89413452 163.91455078]
[-149.93264771 167.35641479]
[-164.43690491 162.09997559]
[-173.77864075 149.82254028]
[-174.97694397 134.44178772]
[-167.64942932 120.86565399]
[-154.13429260 113.42625427]
[-138.74417114 114.49745941]
[-126.38997650 123.73745728]
[-112.37326050 118.39594269]
[-98.35655212 113.05442810]
[-84.33983612 107.71292114]
[-84.33983612 100.21292114]
[-97.33023071 92.71294403]
[-84.33983612 85.21292114]
[-84.33983612 77.71292114]
[-99.99063110 80.02876282]
[-109.12834167 68.26647186]
[-123.14505768 62.92496109]
[-139.24127197 66.06245422]
[-149.80094910 53.51553726]
[-143.96119690 38.19139481]
[-127.72945404 35.85419464]
[-117.80354309 48.90824509]
[-103.78682709 54.24975967]
[-89.13860321 51.55184937]
[-78.99832916 63.69620514]
[-51.23703384 65.23648071]
[-39.10655212 83.75984955]
[-24.14630127 82.66854095]
[-9.18605328 81.57722473]
[-21.24903679 72.66182709]
[-26.71537209 58.69331741]
[-23.90750885 43.95846176]
[-13.68714714 32.97920227]
[0.80921733 29.12492752]
[15.13283348 33.57846832]
[24.88796616 44.97308731]
[27.08089066 59.81192780]
[21.03862381 73.54113007]
[8.61470127 81.94763184]
[23.51660347 83.66031647]
[38.41850662 85.37300873]
[53.32040787 87.08570099]
[56.76718903 78.16682434]
[61.89897537 70.09890747]
[68.51575470 63.19638824]
[76.35964203 57.72829819]
[85.12491608 53.90775299]
[94.46994019 51.88366318]
[104.03050995 51.73491287]
[113.43399048 53.46730804]
[122.31387329 57.01332092]
[130.32406616 62.23474884]
[137.15237427 68.92807770]
[142.53266907 76.83245087]
[156.65747070 71.78369141]
[170.78227234 66.73493958]
[184.90707397 61.68618011]
[197.43304443 53.43389130]
[207.64651489 42.44822693]
[217.86000061 31.46256065]
[221.52458191 13.44727135]
[238.44184875 8.88588524]
[248.42457581 -2.30988073]
[248.94639587 -18.34444427]
[261.89367676 -27.81795883]
[277.33438110 -23.46315193]
[283.42370605 -8.62066078]
[275.49044800 5.32362652]
[259.62033081 7.67284584]
[249.63761902 18.86861229]
[250.00593567 31.00004387]
[241.72444153 40.41470718]
[228.84567261 41.67604065]
[218.63218689 52.66170502]
[208.41870117 63.64736938]
[214.90687561 77.17156219]
[229.86712646 76.08025360]
[244.82736206 74.98893738]
[259.78762817 73.89762878]
[266.40667725 60.03820801]
[279.07775879 51.35836411]
[294.39236450 50.19293594]
[308.23095703 56.85541153]
[316.87106323 69.55361938]
[317.98846436 84.87181091]
[311.28265381 98.68946075]
[298.55743408 107.28970337]
[283.23580933 108.35910034]
[269.43923950 101.61000061]
[260.87893677 88.85787964]
[245.91868591 89.94918823]
[230.95843506 91.04049683]
[215.99818420 92.13181305]
[209.41284180 91.93234253]
[203.44807434 90.35990906]
[198.36869812 87.65890503]
[194.36642456 84.12038422]
[191.55258179 80.06264496]
[189.95584106 75.81098175]
[175.83103943 80.85974121]
[161.70622253 85.90849304]
[147.58142090 90.95725250]
[148.36192322 97.37551880]
[148.28057861 103.84056091]
[147.33882141 110.23715973]
[145.55345154 116.45131683]
[142.95629883 122.37230682]
[139.59361267 127.89459991]
[135.52536011 132.91979980]
[130.82398987 137.35832214]
[125.57333374 141.13110352]
[119.86693573 144.17089844]
[113.80648804 146.42353821]
[107.50000000 147.84886169]
[107.50000000 162.84886169]
[107.50000000 177.84886169]
[107.50000000 192.84886169]
[107.50000000 207.84886169]
[107.50000000 222.84886169]
[107.50000000 237.84886169]
[107.50000000 252.84886169]
[107.50000000 267.84884644]
[107.50000000 282.84884644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[12 69]
[13 68]
[14 67]
[15 66]
[16 56]
[17 55]
[18 54]
[21 37]
[22 36]
[23 35]
[24 34]
[41 52]
[43 50]
[44 49]
[81 129]
[82 128]
[83 127]
[84 126]
[85 102]
[86 101]
[87 100]
[89 97]
[90 96]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
