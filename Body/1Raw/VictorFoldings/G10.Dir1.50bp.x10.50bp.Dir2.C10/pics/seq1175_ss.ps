%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAxxxxxxxxxxAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUCAAGCCAACCCCAUGGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[88.06157684 435.73135376]
[88.06157684 420.73135376]
[88.06157684 405.73135376]
[88.06157684 390.73135376]
[88.06157684 375.73135376]
[88.06157684 360.73135376]
[88.06157684 345.73135376]
[88.06157684 330.73135376]
[88.06157684 315.73135376]
[88.06157684 300.73135376]
[71.91510773 295.34207153]
[58.54378510 284.76879883]
[49.55117035 270.25830078]
[46.02292633 253.53076172]
[48.39574432 236.57594299]
[56.40338898 221.41635132]
[69.10643768 209.86611938]
[85.00247192 203.31379700]
[84.06684113 188.34300232]
[75.55074310 176.12312317]
[82.41218567 161.86720276]
[81.47655487 146.89642334]
[80.54093170 131.92562866]
[80.98298645 146.91911316]
[73.58570099 159.96826172]
[60.49381638 167.28962708]
[45.50315094 166.76051331]
[32.96005249 158.53428650]
[26.50122070 144.99606323]
[27.99931145 130.07106018]
[37.01997375 118.08658600]
[50.94778442 112.51737976]
[65.74234772 114.97711945]
[51.03438187 112.03163910]
[36.32641983 109.08615112]
[21.58861542 106.29383087]
[6.82255983 103.65496826]
[-2.24218225 105.23049927]
[-8.22186470 100.80455017]
[-22.92982674 97.85906219]
[-38.28379440 103.61993408]
[-50.77624893 92.99588013]
[-47.55602264 76.91600800]
[-31.93580818 71.92192078]
[-19.98434258 83.15110016]
[-5.27638197 86.09658813]
[9.46142387 88.88890839]
[24.22747993 91.52777100]
[31.41174889 89.59595490]
[39.27190399 94.37819672]
[53.97986603 97.32367706]
[68.68782806 100.26915741]
[80.75242615 75.98709106]
[106.83488464 70.54634857]
[109.32000732 55.75363922]
[111.80512238 40.96092987]
[114.29024506 26.16822433]
[116.77536011 11.37551594]
[102.46157837 6.80424833]
[88.94409180 0.24237023]
[76.49809265 -8.17652702]
[65.37696075 -18.28104401]
[55.80712128 -29.86546898]
[47.98339462 -42.69395447]
[42.06506348 -56.50532913]
[38.17261505 -71.01841736]
[36.38529968 -85.93773651]
[36.73950195 -100.95956421]
[39.22801208 -115.77807617]
[43.80016708 -130.09156799]
[50.36288071 -143.60865784]
[58.78254700 -156.05413818]
[68.88775635 -167.17463684]
[80.47277069 -176.74375916]
[93.30174255 -184.56669617]
[107.11347961 -190.48417664]
[121.62680817 -194.37571716]
[136.54624939 -196.16210938]
[151.56805420 -195.80697632]
[166.38639832 -193.31755066]
[180.69961548 -188.74450684]
[194.21629333 -182.18095398]
[206.66125488 -173.76052856]
[217.78112793 -163.65463257]
[227.34953308 -152.06901550]
[235.17167664 -139.23956299]
[241.08830261 -125.42745972]
[244.97894287 -110.91389465]
[246.76441956 -95.99434662]
[246.40835571 -80.97256470]
[243.91801453 -66.15436554]
[239.34408569 -51.84143448]
[232.77969360 -38.32516479]
[224.35848999 -25.88072777]
[214.25190735 -14.76147652]
[202.66571045 -5.19378471]
[189.83576965 2.62756109]
[176.02330017 8.54332829]
[161.50949097 12.43308067]
[146.58982849 14.21762657]
[131.56806946 13.86063480]
[129.08294678 28.65334129]
[126.59783173 43.44604874]
[124.11270905 58.23875809]
[121.62759399 73.03146362]
[131.01475525 84.73108673]
[145.99447632 85.51093292]
[160.97418213 86.29077911]
[175.95390320 87.07062531]
[184.24705505 74.14317322]
[197.90023804 67.10851288]
[213.24078369 67.85893250]
[226.14218140 76.19258118]
[233.13400269 89.86773682]
[232.33549500 105.20585632]
[223.96145630 118.08106232]
[210.26445007 125.02999115]
[194.92890930 124.18341827]
[182.08001709 115.76905823]
[175.17405701 102.05033875]
[160.19433594 101.27049255]
[145.21463013 100.49064636]
[130.23490906 99.71080017]
[120.25228119 123.17183685]
[95.51171875 130.99000549]
[96.44734955 145.96078491]
[97.38298035 160.93157959]
[105.96600342 174.22225952]
[99.03763580 187.40736389]
[99.97325897 202.37815857]
[112.74211121 205.29196167]
[124.29836273 211.42643738]
[133.84663391 220.35137939]
[140.73185730 231.44476318]
[144.48417664 243.93620300]
[144.85102844 256.96032715]
[141.81411743 269.61679077]
[135.59020996 281.03253174]
[126.61566162 290.42193604]
[115.51585388 297.14099121]
[103.06157684 300.73135376]
[103.06157684 315.73135376]
[103.06157684 330.73135376]
[103.06157684 345.73135376]
[103.06157684 360.73135376]
[103.06157684 375.73135376]
[103.06157684 390.73135376]
[103.06157684 405.73135376]
[103.06157684 420.73135376]
[103.06157684 435.73135376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[18 130]
[19 129]
[21 127]
[22 126]
[23 125]
[33 52]
[34 51]
[35 50]
[36 48]
[37 47]
[39 46]
[40 45]
[54 105]
[55 104]
[56 103]
[57 102]
[58 101]
[106 123]
[107 122]
[108 121]
[109 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
