%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUxxxxxxxxxxACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[158.85116577 57.50133896]
[147.66285706 67.49243164]
[136.47456360 77.48352814]
[125.28627014 87.47462463]
[114.09797668 97.46572876]
[109.54079437 110.68403625]
[95.89312744 113.72257233]
[84.70482635 123.71366882]
[73.51653290 133.70475769]
[62.32823563 143.69586182]
[51.13993835 153.68696594]
[40.58792114 164.34786987]
[30.71221542 175.63815308]
[20.83650970 186.92842102]
[22.14034081 202.67884827]
[11.86145496 214.68385315]
[-3.90186429 215.82107544]
[-15.79752064 205.41584778]
[-16.76803207 189.64138794]
[-6.23761177 177.85639954]
[9.54622936 177.05271912]
[19.42193604 165.76243591]
[29.29764175 154.47216797]
[14.30572701 153.97972107]
[3.91522765 143.16134644]
[4.02787113 128.16175842]
[14.57967663 117.50064850]
[29.57729530 117.23342896]
[40.50219345 127.51187897]
[41.14884186 142.49865723]
[52.33713531 132.50756836]
[63.52543259 122.51647186]
[74.71372986 112.52537537]
[85.90202332 102.53427124]
[90.45920563 89.31596375]
[104.10687256 86.27742767]
[115.29517365 76.28633118]
[126.48346710 66.29523468]
[137.67176819 56.30413818]
[148.86006165 46.31304169]
[131.89004517 22.99484253]
[118.10643005 -2.33568764]
[107.74423218 -29.24576759]
[100.97998810 -57.27569199]
[97.92879486 -85.94668579]
[98.64233398 -114.76907349]
[103.10797882 -143.25067139]
[111.24904633 -170.90515137]
[122.92607880 -197.26039124]
[137.93928528 -221.86647034]
[125.96902466 -230.90599060]
[109.94511414 -230.12254333]
[99.45040131 -242.25680542]
[102.53553772 -258.00042725]
[116.83386230 -265.27624512]
[131.37693787 -258.50286865]
[135.00854492 -242.87625122]
[146.97880554 -233.83673096]
[154.19113159 -242.29779053]
[161.82069397 -250.38471985]
[169.84811401 -258.07696533]
[178.25300598 -265.35501099]
[187.01399231 -272.20031738]
[196.10885620 -278.59548950]
[205.51446533 -284.52429199]
[215.20692444 -289.97164917]
[225.16163635 -294.92373657]
[235.35328674 -299.36791992]
[245.75599670 -303.29293823]
[256.34332275 -306.68881226]
[267.08840942 -309.54687500]
[277.96389771 -311.85989380]
[288.94219971 -313.62197876]
[299.99542236 -314.82864380]
[311.09548950 -315.47680664]
[322.21414185 -315.56478882]
[333.32318115 -315.09243774]
[344.39437866 -314.06088257]
[355.39959717 -312.47274780]
[366.31088257 -310.33206177]
[377.10049438 -307.64425659]
[387.74102783 -304.41619873]
[398.20547485 -300.65600586]
[408.46716309 -296.37329102]
[418.50012207 -291.57888794]
[428.27877808 -286.28500366]
[437.77832031 -280.50506592]
[446.97457886 -274.25375366]
[455.84423828 -267.54693604]
[464.36468506 -260.40164185]
[472.51434326 -252.83605957]
[480.27246094 -244.86938477]
[487.61932373 -236.52185059]
[494.53628540 -227.81465149]
[501.00573730 -218.76992798]
[507.01123047 -209.41062927]
[512.53753662 -199.76055908]
[517.57055664 -189.84422302]
[522.09753418 -179.68679810]
[526.10699463 -169.31411743]
[529.58868408 -158.75250244]
[532.53375244 -148.02879333]
[534.93475342 -137.17025757]
[536.78558350 -126.20445251]
[538.08148193 -115.15925598]
[538.81915283 -104.06272125]
[538.99676514 -92.94304657]
[538.61383057 -81.82848358]
[537.67132568 -70.74726868]
[536.17156982 -59.72755432]
[534.11846924 -48.79734421]
[531.51721191 -37.98440933]
[528.37438965 -27.31622505]
[524.69793701 -16.81989670]
[520.49725342 -6.52209568]
[515.78289795 3.55101252]
[510.56701660 13.37383175]
[504.86270142 22.92140198]
[498.68450928 32.16946030]
[492.04812622 41.09450531]
[484.97039795 49.67386246]
[477.46932983 57.88572311]
[469.56390381 65.70922852]
[461.27429199 73.12448120]
[452.62145996 80.11264801]
[443.62747192 86.65596008]
[434.31512451 92.73779297]
[424.70809937 98.34269714]
[414.83078003 103.45640564]
[404.70825195 108.06593323]
[394.36627197 112.15956116]
[383.83108521 115.72688293]
[373.12945557 118.75882721]
[362.28860474 121.24768066]
[351.33602905 123.18711853]
[340.29956055 124.57220459]
[329.20724487 125.39941406]
[318.08731079 125.66663361]
[306.96792603 125.37318420]
[295.87741089 124.51979828]
[284.84393311 123.10864258]
[273.89547729 121.14329529]
[263.05993652 118.62873840]
[252.36477661 115.57135773]
[241.83720398 111.97891998]
[231.50398254 107.86053467]
[221.39134216 103.22666931]
[211.52497864 98.08908844]
[201.92997742 92.46083069]
[192.63072205 86.35620117]
[183.65081787 79.79070282]
[175.01312256 72.78101349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[5 36]
[7 34]
[8 33]
[9 32]
[10 31]
[11 30]
[12 23]
[13 22]
[14 21]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
