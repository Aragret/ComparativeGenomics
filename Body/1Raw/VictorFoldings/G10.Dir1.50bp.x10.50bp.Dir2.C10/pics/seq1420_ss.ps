%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAxxxxxxxxxxCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[313.03363037 198.56320190]
[300.95364380 189.67085266]
[288.87365723 180.77850342]
[276.79367065 171.88615417]
[264.71368408 162.99380493]
[252.63369751 154.10145569]
[240.55371094 145.20910645]
[228.47372437 136.31675720]
[216.39372253 127.42440033]
[204.31373596 118.53205109]
[190.18893433 113.48329163]
[175.20922852 112.70345306]
[165.97750854 120.58271027]
[153.45166016 120.01515198]
[144.40817261 110.75938416]
[129.44792175 109.66807556]
[123.10377502 122.59377289]
[111.20260620 131.71536255]
[95.90306854 134.71549988]
[80.28691864 130.45359802]
[67.73847198 119.30765533]
[53.61367035 124.35641479]
[39.48886490 129.40516663]
[25.36406326 134.45393372]
[22.68862534 149.57800293]
[12.79730797 161.32778931]
[-1.64917171 166.54264832]
[-16.76478386 163.81980896]
[-28.48350716 153.89172363]
[-33.65306091 139.42895508]
[-30.88286209 124.32196045]
[-20.91807938 112.63441467]
[-6.43919230 107.51021576]
[8.65905476 110.32775879]
[20.31530762 120.32912445]
[34.44010925 115.28036499]
[48.56491470 110.23161316]
[62.68971634 105.18285370]
[63.62534332 90.21206665]
[50.23905945 83.44394684]
[36.85277557 76.67583466]
[23.46648979 69.90772247]
[10.08020496 63.13960266]
[-2.43826914 66.41705322]
[-13.46801853 60.45352936]
[-17.32435417 48.94544601]
[-30.56694031 41.90031052]
[-46.92854691 43.00929260]
[-55.84387207 29.24524498]
[-48.14159012 14.76743793]
[-31.74515152 14.46939850]
[-23.52180481 28.65772438]
[-10.27921963 35.70286179]
[7.17077112 34.12242126]
[16.84832001 49.75331879]
[30.23460388 56.52143478]
[43.62088776 63.28954697]
[57.00717545 70.05766296]
[70.39345551 76.82577515]
[88.34487915 65.99501038]
[108.36099243 66.73869324]
[123.92935944 77.79421234]
[130.53923035 94.70782471]
[145.49948120 95.79914093]
[161.84429932 87.38326263]
[175.98907471 97.72373962]
[190.96878052 98.50357819]
[178.65855408 89.93279266]
[168.35600281 79.03062439]
[160.49455261 66.25573730]
[155.40496826 52.14559555]
[153.30136108 37.29383469]
[154.27223206 22.32528687]
[158.27674866 7.86970472]
[165.14642334 -5.46474552]
[174.59223938 -17.11706352]
[186.21681213 -26.59701729]
[199.53105164 -33.50577164]
[213.97482300 -37.55266571]
[228.94046021 -38.56744003]
[243.79833984 -36.50740433]
[257.92333984 -31.45922089]
[270.72122192 -23.63527870]
[281.65356445 -13.36474323]
[290.26043701 -1.07970929]
[296.17968750 12.70297146]
[299.16232300 27.40344238]
[299.08285522 42.40323257]
[295.94464111 57.07127762]
[289.87966919 70.79046631]
[281.14315796 82.98362732]
[270.10260010 93.13775635]
[257.22253418 100.82566071]
[243.04484558 105.72390747]
[228.16598511 107.62641144]
[213.20608521 106.45206451]
[225.28607178 115.34441376]
[237.36607361 124.23676300]
[249.44606018 133.12911987]
[261.52603149 142.02146912]
[273.60601807 150.91381836]
[285.68603516 159.80616760]
[297.76602173 168.69851685]
[309.84600830 177.59086609]
[321.92599487 186.48321533]
[330.44961548 187.24681091]
[336.12957764 192.40985107]
[350.94732666 194.74095154]
[365.76507568 197.07205200]
[380.58285522 199.40316772]
[395.42404175 201.58000183]
[410.28707886 203.60232544]
[425.15014648 205.62466431]
[437.57681274 195.85977173]
[453.25845337 197.82484436]
[462.89141846 210.35406494]
[460.76065063 226.01406860]
[448.13031006 235.51403809]
[432.49371338 233.21781921]
[423.12780762 220.48771667]
[408.26477051 218.46537781]
[393.40170288 216.44303894]
[386.30401611 218.67204285]
[378.25173950 214.22091675]
[363.43399048 211.88981628]
[348.61621094 209.55871582]
[333.79846191 207.22760010]
[345.34655762 216.80056763]
[354.32345581 228.81785583]
[360.22708130 242.60723877]
[362.72717285 257.39743042]
[361.68389893 272.36111450]
[357.15560913 286.66125488]
[349.39562988 299.49801636]
[338.83795166 310.15335083]
[326.07318115 318.03121948]
[311.81533813 322.69097900]
[296.86190796 323.87197876]
[282.04931641 321.50814819]
[268.20614624 315.73175049]
[256.10675049 306.86587524]
[246.42785645 295.40640259]
[239.71089172 281.99438477]
[236.33157349 267.38000488]
[236.47894287 252.38072205]
[240.14472961 237.83554077]
[247.12390137 224.55807495]
[257.02606201 213.29100037]
[269.29733276 204.66453552]
[283.25131226 199.16122437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 67]
[12 66]
[15 64]
[16 63]
[21 38]
[22 37]
[23 36]
[24 35]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[46 53]
[47 52]
[107 127]
[108 126]
[109 125]
[110 124]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
