%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCUCCUCUCCCUAGGAxxxxxxxxxxUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[71.25997162 265.09249878]
[71.25997162 250.09248352]
[71.25997162 235.09248352]
[71.25997162 220.09248352]
[71.25997162 205.09248352]
[71.25997162 190.09248352]
[71.25997162 175.09248352]
[71.25997162 160.09248352]
[71.25997162 145.09248352]
[71.25997162 130.09248352]
[69.45786285 116.62364960]
[72.56053925 105.23472595]
[79.05978394 97.44469452]
[87.04920197 94.03908539]
[94.52855682 94.99100494]
[89.33313751 80.91947937]
[84.13772583 66.84796143]
[78.94230652 52.77644348]
[74.22645569 67.01585388]
[63.11468887 77.09199524]
[48.48325348 80.39669037]
[34.11944580 76.07453156]
[23.74129868 65.24429321]
[20.03516388 50.70934677]
[23.96036339 36.23202515]
[34.50086975 25.55973816]
[48.92830276 21.45497131]
[63.50817108 24.98023224]
[74.46646118 35.22292709]
[72.28961945 20.38172340]
[70.11278534 5.54051781]
[63.68868256 19.09525490]
[52.63840103 29.23878860]
[38.58450699 34.48169708]
[23.59060287 34.05413818]
[9.85831165 28.01889038]
[-0.59598666 17.26214218]
[-6.23723793 3.36335492]
[-6.23711061 -11.63664532]
[-0.59562367 -25.53533745]
[9.85885715 -36.29190826]
[23.59124947 -42.32692337]
[38.58516312 -42.75422668]
[52.63896561 -37.51108170]
[63.68907547 -27.36735916]
[70.11278534 -13.81315613]
[72.28961945 -28.65436172]
[74.46646118 -43.49556732]
[60.17993927 -49.99915695]
[48.30679321 -60.24488449]
[39.79800415 -73.40135956]
[35.33207321 -88.40448761]
[35.26089478 -104.04353333]
[39.58206177 -119.05883789]
[47.93970490 -132.24325562]
[59.65379333 -142.53924561]
[73.77545166 -149.12361145]
[89.16383362 -151.47341919]
[91.03144836 -166.35670471]
[92.89906311 -181.23997498]
[94.76667023 -196.12326050]
[88.80780792 -210.77940369]
[98.06954193 -222.44429016]
[99.93715668 -237.32756042]
[101.80476379 -252.21084595]
[102.74039459 -267.18164062]
[102.74039459 -282.18164062]
[102.74039459 -297.18164062]
[102.74039459 -312.18164062]
[102.74039459 -327.18164062]
[89.39926910 -334.79150391]
[81.66429901 -348.06048584]
[81.61615753 -363.41928101]
[89.26779175 -376.73651123]
[102.56095123 -384.42984009]
[117.91983795 -384.42984009]
[131.21299744 -376.73651123]
[138.86463928 -363.41928101]
[138.81649780 -348.06048584]
[131.08152771 -334.79150391]
[117.74039459 -327.18164062]
[117.74039459 -312.18164062]
[117.74039459 -297.18164062]
[117.74039459 -282.18164062]
[117.74039459 -267.18164062]
[129.36123657 -276.66616821]
[144.30313110 -275.34719849]
[154.08276367 -263.97360229]
[153.14772034 -249.00279236]
[142.02885437 -238.93447876]
[127.03897095 -239.48500061]
[116.68804932 -250.34323120]
[114.82043457 -235.45996094]
[112.95281982 -220.57667542]
[119.04527283 -206.98509216]
[109.64995575 -194.25564575]
[107.78234100 -179.37237549]
[105.91472626 -164.48908997]
[104.04711151 -149.60580444]
[117.33245087 -144.14195251]
[128.75311279 -135.40856934]
[137.52188110 -123.99972534]
[143.03225708 -110.69412994]
[144.90043640 -96.40205383]
[142.99201965 -82.10303497]
[137.43164062 -68.77872467]
[128.59489441 -57.34553146]
[117.08291626 -48.59155273]
[103.68155670 -43.12228394]
[89.30766296 -41.31872940]
[87.13082886 -26.47752571]
[84.95399475 -11.63631916]
[84.95399475 3.36368060]
[87.13082886 18.20488548]
[89.30766296 33.04609299]
[93.01382446 47.58102798]
[98.20924377 61.65254593]
[103.40465546 75.72406769]
[108.60007477 89.79558563]
[118.58280182 100.99134827]
[131.96908569 107.75946808]
[145.35536194 114.52758026]
[161.69036865 113.07845306]
[170.89010620 126.65405273]
[163.49067688 141.28897095]
[147.10398865 141.92803955]
[138.58724976 127.91386414]
[125.20096588 121.14575195]
[111.81468201 114.37763977]
[105.42600250 118.30635071]
[113.92877197 130.66365051]
[122.43153381 143.02096558]
[130.93429565 155.37826538]
[140.96665955 166.52958679]
[134.63960266 180.12988281]
[119.64761353 179.63951111]
[114.22280121 165.65498352]
[107.03141785 152.49125671]
[99.84003448 139.32751465]
[92.64865112 126.16377258]
[86.25997162 130.09248352]
[86.25997162 145.09248352]
[86.25997162 160.09248352]
[86.25997162 175.09248352]
[86.25997162 190.09248352]
[86.25997162 205.09248352]
[86.25997162 220.09248352]
[86.25997162 235.09248352]
[86.25997162 250.09248352]
[86.25997162 265.09249878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[15 119]
[16 118]
[17 117]
[18 116]
[29 115]
[30 114]
[31 113]
[46 112]
[47 111]
[48 110]
[58 99]
[59 98]
[60 97]
[61 96]
[63 94]
[64 93]
[65 92]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
