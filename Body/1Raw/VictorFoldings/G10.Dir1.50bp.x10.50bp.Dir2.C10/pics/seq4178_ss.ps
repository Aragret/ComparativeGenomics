%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUxxxxxxxxxxAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[121.25106049 275.87509155]
[120.94308472 260.87823486]
[120.63510895 245.88140869]
[120.32713318 230.88456726]
[120.01914978 215.88772583]
[119.71117401 200.89089966]
[119.40319824 185.89405823]
[119.09522247 170.89721680]
[118.78723907 155.90037537]
[114.68229675 141.47299194]
[107.04932404 128.56030273]
[99.41635895 115.64759827]
[86.05825806 108.82402039]
[71.12224579 110.20804596]
[56.18623352 111.59207153]
[41.25022125 112.97609711]
[28.22282410 121.95371246]
[14.83593655 115.42374420]
[-0.10007603 116.80776978]
[-15.03608894 118.19179535]
[-29.97210121 119.57582092]
[-44.90811539 120.95984650]
[-46.76866150 135.90483093]
[-51.79887009 150.10028076]
[-59.76345825 162.88227844]
[-70.28991699 173.65296936]
[-82.88590240 181.90858459]
[-96.96227264 187.26301575]
[-111.86065674 189.46580505]
[-126.88422394 188.41392517]
[-141.33030701 184.15658569]
[-154.52320862 176.89289856]
[-165.84591675 166.96260071]
[-174.76879883 154.83016968]
[-180.87455750 141.06303406]
[-183.87759399 126.30513000]
[-183.63745117 111.24669647]
[-180.16535950 96.59204865]
[-173.62371826 83.02661133]
[-164.31851196 71.18486786]
[-152.68492126 61.62067032]
[-139.26710510 54.78136063]
[-124.69261932 50.98682022]
[-109.64315033 50.41452789]
[-94.82258606 53.09125519]
[-80.92410278 58.89180374]
[-68.59777069 67.54486847]
[-58.42010880 78.64573669]
[-50.86714172 91.67519379]
[-46.29214096 106.02383423]
[-31.35612679 104.63980865]
[-16.42011452 103.25578308]
[-1.48410141 101.87175751]
[13.45191097 100.48773193]
[25.41098213 91.60911560]
[39.86619568 98.04008484]
[54.80220795 96.65605927]
[69.73822021 95.27203369]
[84.67423248 93.88800812]
[70.48794556 89.01470184]
[63.23174286 75.88658142]
[66.65202332 61.28172684]
[78.98288727 52.74066162]
[93.85787964 54.67315292]
[103.59701538 66.08145142]
[103.17115784 81.07732391]
[109.71902466 67.58193970]
[116.26689911 54.08655548]
[122.81476593 40.59117126]
[129.36264038 27.09578705]
[124.69614410 22.14234161]
[121.22773743 16.30514717]
[119.11798859 9.86760139]
[118.46169281 3.14055467]
[119.28362274 -3.55269885]
[121.53768921 -9.89195824]
[125.10943604 -15.57543373]
[129.82186890 -20.33411598]
[135.44418335 -23.94450188]
[141.70307922 -26.23909378]
[148.29606628 -27.11415100]
[154.90603638 -26.53437614]
[161.21655273 -24.53427696]
[170.37849426 -36.41110229]
[179.54042053 -48.28792572]
[188.57994080 -60.25818253]
[197.49609375 -72.32061768]
[206.41224670 -84.38304901]
[215.32839966 -96.44548035]
[214.38047791 -112.46050262]
[226.40637207 -123.07923889]
[242.18083191 -120.15589905]
[249.60304260 -105.93302155]
[242.97932434 -91.32117462]
[227.39082336 -87.52932739]
[218.47467041 -75.46689606]
[209.55853271 -63.40446472]
[200.64237976 -51.34203339]
[199.18659973 -44.04868317]
[191.41725159 -39.12598801]
[182.25531006 -27.24916649]
[173.09338379 -15.37234211]
[179.44235229 7.79899931]
[166.82839966 28.53063202]
[142.85801697 33.64365768]
[136.31015015 47.13904190]
[129.76228333 60.63442612]
[123.21440887 74.12980652]
[116.66654205 87.62519073]
[130.84606934 82.73221588]
[143.91668701 90.09148407]
[147.08642578 104.75274658]
[138.22314453 116.85408020]
[123.28874969 118.25547791]
[112.32905579 108.01462555]
[119.96202850 120.92733002]
[127.59499359 133.84002686]
[127.73963165 118.84072113]
[131.27638245 104.26364136]
[138.02159119 90.86579895]
[147.62496948 79.34297943]
[159.58776855 70.29359436]
[173.28874207 64.18759155]
[188.01637268 61.34206772]
[203.00581360 61.90480804]
[217.47862244 65.84658051]
[230.68321228 72.96268463]
[241.93382263 82.88356018]
[250.64617920 95.09399414]
[256.36785889 108.95987701]
[258.80166626 123.76110840]
[257.82125854 138.72903442]
[253.47753906 153.08633423]
[245.99607849 166.08740234]
[235.76539612 177.05705261]
[223.31681824 185.42561340]
[209.29682922 190.75849915]
[194.43348694 192.77873230]
[179.49871826 191.38142395]
[165.26809692 186.63911438]
[152.48065186 178.79811096]
[141.80047607 168.26559448]
[133.78407288 155.59240723]
[134.09205627 170.58923340]
[134.40003967 185.58607483]
[134.70800781 200.58291626]
[135.01599121 215.57975769]
[135.32397461 230.57659912]
[135.63194275 245.57342529]
[135.93992615 260.57028198]
[136.24789429 275.56710815]
[138.83367920 294.77554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 117]
[11 116]
[12 115]
[13 59]
[14 58]
[15 57]
[16 56]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[83 102]
[84 101]
[85 100]
[86 98]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
