%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUAACCCCAUACCCCGxxxxxxxxxxGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACAACCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[14.56788349 243.30804443]
[6.31559467 255.83401489]
[-1.93669450 268.35995483]
[-3.06775331 284.14068604]
[-16.53083801 290.51208496]
[-24.78312683 303.03805542]
[-33.03541565 315.56402588]
[-41.28770447 328.08996582]
[-49.53999329 340.61593628]
[-43.19702148 354.67901611]
[-45.48665237 369.93551636]
[-55.67826843 381.51718140]
[-70.51976776 385.72830200]
[-85.27527618 381.22512817]
[-95.23636627 369.44461060]
[-97.22449493 354.14590454]
[-90.60525513 340.21072388]
[-77.49081421 332.08575439]
[-62.06595612 332.36364746]
[-53.81366730 319.83767700]
[-45.56137848 307.31170654]
[-37.30908966 294.78576660]
[-29.05679893 282.25979614]
[-28.51599884 267.37500000]
[-14.46265602 260.10766602]
[-6.21036720 247.58172607]
[2.04192185 235.05575562]
[-15.04260826 220.83476257]
[-30.08500290 204.46882629]
[-42.81824112 186.24844360]
[-53.01629257 166.49703979]
[-60.49813080 145.56526184]
[-65.13094330 123.82463074]
[-66.83250427 101.66109467]
[-65.57258606 79.46806335]
[-61.37357712 57.63950729]
[-75.69617462 53.18268967]
[-90.01876831 48.72587585]
[-104.34136963 44.26905823]
[-115.11445618 55.14100647]
[-129.70948792 59.75007629]
[-144.77264404 57.03713989]
[-156.84251404 47.62561417]
[-163.14552307 33.67819214]
[-162.23330688 18.39989090]
[-154.31546021 5.30155611]
[-141.21147156 -2.60691452]
[-125.93251801 -3.50821090]
[-111.98960876 2.80477810]
[-102.58671570 14.88137341]
[-99.88455200 29.94646263]
[-85.56195831 34.40327835]
[-71.23935699 38.86009216]
[-56.91675949 43.31690979]
[-53.69807816 35.09434891]
[-50.04887390 27.05359268]
[-45.97937012 19.21716690]
[-41.50096512 11.60701847]
[-36.62620544 4.24446726]
[-31.36874771 -2.84986544]
[-25.74331284 -9.65610695]
[-19.76566124 -16.15519333]
[-13.45253563 -22.32892036]
[-6.82162142 -28.15999222]
[0.10850941 -33.63208008]
[7.31844425 -38.72985077]
[14.78798771 -43.43902969]
[22.49621582 -47.74642563]
[30.42153931 -51.63996887]
[38.54175949 -55.10875702]
[46.83412552 -58.14307404]
[55.27541351 -60.73442078]
[63.84197998 -62.87553406]
[72.50982666 -64.56042480]
[81.25467682 -65.78436279]
[90.05204010 -66.54393005]
[98.87725830 -66.83699036]
[107.70562744 -66.66272736]
[116.51241302 -66.02163696]
[125.27294159 -64.91549683]
[133.96267700 -63.34741592]
[142.55729675 -61.32178879]
[151.03268433 -58.84428406]
[159.36514282 -55.92184448]
[167.53131104 -52.56265640]
[175.50831604 -48.77612686]
[183.27381897 -44.57286453]
[190.80606079 -39.96464157]
[198.08395386 -34.96436691]
[205.08709717 -29.58604431]
[211.79589844 -23.84474182]
[218.19154358 -17.75654030]
[229.28285217 -27.85519028]
[233.74562073 -43.63542175]
[249.70735168 -47.39781189]
[260.74795532 -35.27193832]
[255.50984192 -19.73185730]
[239.38150024 -16.76387405]
[228.29019165 -6.66522455]
[249.66691589 26.27307892]
[262.75320435 63.29529953]
[274.97695923 53.25088882]
[288.86691284 58.62847900]
[303.63296509 55.98961258]
[318.39904785 53.35074997]
[326.02908325 39.70096970]
[340.66619873 34.19749069]
[355.39923096 39.43888092]
[363.27166748 52.95032120]
[360.56637573 68.35211945]
[348.56069946 78.37201691]
[332.92340088 78.27893066]
[321.03790283 68.11680603]
[306.27185059 70.75566864]
[291.50579834 73.39453125]
[280.33819580 83.25019836]
[265.39208984 78.06135559]
[266.45666504 88.68533325]
[266.83953857 99.35565186]
[266.53909302 110.02861023]
[265.55661011 120.66049957]
[263.89605713 131.20776367]
[261.56427002 141.62722778]
[258.57080078 151.87620544]
[254.92791748 161.91270447]
[250.65051270 171.69566345]
[245.75610352 181.18498230]
[240.26475525 190.34179688]
[234.19895935 199.12861633]
[227.58352661 207.50946045]
[220.44558716 215.44999695]
[212.81436157 222.91770935]
[204.72109985 229.88200378]
[196.19894409 236.31436157]
[187.28282166 242.18844604]
[178.00921631 247.48017883]
[168.41612244 252.16792297]
[158.54283142 256.23245239]
[148.42977905 259.65713501]
[138.11837769 262.42791748]
[127.65086365 264.53350830]
[117.07009888 265.96520996]
[106.41943359 266.71722412]
[95.74246979 266.78643799]
[85.08294678 266.17257690]
[74.48451233 264.87814331]
[63.99058151 262.90844727]
[53.64412689 260.27157593]
[43.48752594 256.97830200]
[33.56237030 253.04209900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[36 54]
[37 53]
[38 52]
[39 51]
[92 99]
[93 98]
[101 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
