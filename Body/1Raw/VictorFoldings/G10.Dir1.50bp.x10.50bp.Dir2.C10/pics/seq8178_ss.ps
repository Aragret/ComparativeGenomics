%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAxxxxxxxxxxAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[198.93138123 95.60338593]
[187.17077637 104.74327850]
[172.57742310 98.63227081]
[157.67552185 100.34496307]
[142.77362061 102.05765533]
[127.87171173 103.77033997]
[112.96981049 105.48303223]
[100.19245911 113.34045410]
[91.94016266 125.86641693]
[83.68787384 138.39237976]
[75.43558502 150.91835022]
[77.24626923 166.85888672]
[65.81087494 178.11105347]
[49.90165329 176.04313660]
[41.72280121 162.24147034]
[47.54843521 147.29351807]
[62.90962601 142.66604614]
[71.16191864 130.14009094]
[79.41420746 117.61412811]
[87.66649628 105.08816528]
[85.14211273 98.02576447]
[71.89478302 105.06197357]
[58.97336578 112.68017578]
[46.94865799 103.71321106]
[50.56411362 89.15544891]
[65.38738251 86.85636139]
[80.09336090 83.90096283]
[77.56897736 76.83856201]
[63.24638367 72.38174438]
[48.92378616 67.92492676]
[34.51156998 63.76704407]
[20.01597404 59.90988541]
[5.52037716 56.05272293]
[-8.97521973 52.19556427]
[-23.47081566 48.33840561]
[-37.96641159 44.48124695]
[-52.50135040 40.77508545]
[-67.07405090 37.22032166]
[-81.64675140 33.66556168]
[-96.21945953 30.11079979]
[-109.59293365 38.53254318]
[-124.98574829 34.94971848]
[-133.26562500 21.48795319]
[-129.52026367 6.13387299]
[-115.97171021 -2.00321865]
[-100.65808868 1.90427029]
[-92.66469574 15.53809643]
[-78.09199524 19.09285736]
[-63.51929092 22.64761925]
[-48.94658661 26.20238113]
[-41.65581131 24.72244263]
[-34.10925293 29.98564911]
[-19.61365700 33.84280777]
[-5.11806011 37.69996643]
[9.37753677 41.55712891]
[23.87313271 45.41428757]
[38.36872864 49.27144623]
[42.92671585 47.65890503]
[48.54749680 48.93879318]
[53.38060379 53.60233307]
[67.70320129 58.05915070]
[82.02579498 62.51596451]
[111.25712585 90.58113098]
[126.15902710 88.86843872]
[141.06092834 87.15574646]
[155.96282959 85.44306183]
[170.86473083 83.73036957]
[183.69120789 74.46797943]
[197.21868896 80.70148468]
[196.62387085 65.70620728]
[197.15132141 50.70840454]
[198.79809570 35.79195786]
[201.55496216 21.04028702]
[205.40653992 6.53588581]
[210.33125305 -7.64012718]
[216.30158997 -21.40847397]
[223.28413391 -34.69215393]
[231.23985291 -47.41688156]
[240.12426758 -59.51149368]
[249.88764954 -70.90834808]
[260.47543335 -81.54371643]
[271.82839966 -91.35810852]
[283.88305664 -100.29664612]
[296.57199097 -108.30934143]
[309.82424927 -115.35137939]
[323.56567383 -121.38337708]
[337.71948242 -126.37160492]
[352.20645142 -130.28816223]
[366.94561768 -133.11114502]
[381.85452271 -134.82478333]
[396.84982300 -135.41946411]
[411.84762573 -134.89187622]
[426.76403809 -133.24497986]
[441.51568604 -130.48797607]
[456.02005005 -126.63628387]
[470.19604492 -121.71143341]
[483.96432495 -115.74098206]
[497.24795532 -108.75831604]
[509.97259521 -100.80248260]
[522.06713867 -91.91797638]
[533.46392822 -82.15447998]
[544.09918213 -71.56659698]
[553.91345215 -60.21354294]
[562.85192871 -48.15880585]
[570.86450195 -35.46980667]
[577.90643311 -22.21750069]
[583.93829346 -8.47600746]
[588.92639160 5.67782784]
[592.84283447 20.16484833]
[595.66564941 34.90403748]
[597.37915039 49.81296539]
[597.97375488 64.80825806]
[597.44598389 79.80604553]
[595.79901123 94.72246552]
[593.04187012 109.47409058]
[589.19000244 123.97841644]
[584.26507568 138.15434265]
[578.29449463 151.92259216]
[571.31170654 165.20614624]
[563.35577393 177.93074036]
[554.47113037 190.02519226]
[544.70751953 201.42187500]
[534.11956787 212.05705261]
[522.76641846 221.87124634]
[510.71160889 230.80957031]
[498.02252197 238.82203674]
[484.77017212 245.86384583]
[471.02862549 251.89559937]
[456.87472534 256.88357544]
[442.38769531 260.79986572]
[427.64846802 263.62261963]
[412.73953247 265.33596802]
[397.74423218 265.93038940]
[382.74645996 265.40255737]
[367.83004761 263.75540161]
[353.07843018 260.99810791]
[338.57415771 257.14617920]
[324.39825439 252.22106934]
[310.63006592 246.25038147]
[297.34658813 239.26747131]
[284.62207031 231.31141663]
[272.52767944 222.42669678]
[261.13107300 212.66299438]
[250.49600220 202.07493591]
[240.68190002 190.72171021]
[231.74368286 178.66680908]
[223.73132324 165.97766113]
[216.68965149 152.72523499]
[210.65800476 138.98364258]
[205.67015076 124.82971954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 20]
[9 19]
[10 18]
[11 17]
[28 62]
[29 61]
[30 60]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
