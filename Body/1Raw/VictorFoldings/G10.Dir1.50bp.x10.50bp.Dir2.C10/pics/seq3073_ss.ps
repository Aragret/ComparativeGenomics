%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAxxxxxxxxxxCAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[86.16667175 298.97790527]
[88.75767517 279.77017212]
[89.06973267 264.77343750]
[89.38178253 249.77667236]
[89.69384003 234.77992249]
[90.00589752 219.78317261]
[90.31795502 204.78640747]
[90.63001251 189.78965759]
[90.94207001 174.79290771]
[91.25411987 159.79615784]
[91.56617737 144.79939270]
[84.59715271 142.90533447]
[78.01469421 139.93446350]
[71.98400879 135.96136475]
[66.65644073 131.08572388]
[62.16570282 125.42992401]
[48.50946045 131.63533020]
[34.85321808 137.84074402]
[21.19697762 144.04614258]
[7.54073715 150.25155640]
[-6.05021381 156.59867859]
[-19.57440376 163.08685303]
[-21.37866783 178.40834045]
[-31.19757271 190.30761719]
[-45.89794159 194.98765564]
[-60.78893661 190.95506287]
[-71.11890411 179.49664307]
[-73.59157562 164.26873779]
[-67.41794586 150.13049316]
[-54.56798553 141.59338379]
[-39.14207840 141.38159180]
[-26.06256866 149.56266785]
[-12.53837872 143.07449341]
[-7.83764505 137.30831909]
[1.33533001 136.59532166]
[14.99157143 130.38990784]
[28.64781189 124.18450165]
[42.30405426 117.97909546]
[55.96029282 111.77368927]
[56.06379700 87.84576416]
[68.27246857 67.26654053]
[89.22261810 55.70594406]
[113.14211273 56.34910965]
[119.77061462 42.89314651]
[126.39911652 29.43717957]
[118.86238861 19.18880081]
[116.25524139 6.81942081]
[118.97960663 -5.44258356]
[126.48300934 -15.41609383]
[137.36900330 -21.35520172]
[136.74502563 -36.34222031]
[136.12104797 -51.32923508]
[135.49707031 -66.31625366]
[122.79160309 -69.49506378]
[111.36547089 -75.86862946]
[102.00493622 -84.99027252]
[95.35198212 -96.22450256]
[91.86034393 -108.79129028]
[91.76453400 -121.82022095]
[95.06408691 -134.41076660]
[101.52413940 -145.69454956]
[110.69207764 -154.89523315]
[121.92926788 -161.38191223]
[134.45553589 -164.71240234]
[134.76759338 -179.70915222]
[135.07965088 -194.70590210]
[135.39170837 -209.70265198]
[135.70376587 -224.69941711]
[136.01582336 -239.69616699]
[122.21747589 -246.14019775]
[112.23799133 -257.64367676]
[107.80637360 -272.21353149]
[109.69041443 -287.32543945]
[117.56371307 -300.36120605]
[130.06216431 -309.06228638]
[145.02032471 -311.92117310]
[159.84661865 -308.44253540]
[171.97229004 -299.22906494]
[179.29649353 -285.87707520]
[180.55027771 -270.69985962]
[175.51641846 -256.32696533]
[165.06703186 -245.24858093]
[151.01257324 -239.38410950]
[150.70051575 -224.38735962]
[150.38845825 -209.39060974]
[150.07640076 -194.39384460]
[149.76435852 -179.39709473]
[149.45230103 -164.40034485]
[165.48315430 -158.67633057]
[178.63162231 -147.82716370]
[187.32040405 -133.13272095]
[190.49989319 -116.33541870]
[187.77487183 -99.43362427]
[179.45358276 -84.44390869]
[166.51300049 -73.16043854]
[150.48408508 -66.94023132]
[151.10806274 -51.95321274]
[151.73204041 -36.96619797]
[152.35601807 -21.97917938]
[162.35897827 -17.68605995]
[170.09599304 -10.02911758]
[174.49293518 -0.07135620]
[189.48562622 0.39668593]
[204.47833252 0.86472803]
[219.47102356 1.33277023]
[224.81225586 -12.83585739]
[234.46653748 -24.50090599]
[247.38667297 -32.39703751]
[262.17117310 -35.66773987]
[277.21630859 -33.95823288]
[290.89010620 -27.45394516]
[301.70935059 -16.86042023]
[308.50042725 -3.32676148]
[310.52670288 11.67900181]
[307.56838989 26.52915573]
[299.94638062 39.61286545]
[288.48742676 49.51091003]
[274.43453979 55.14962387]
[259.31207275 55.91735840]
[244.76037598 51.73083878]
[232.35792542 43.04418564]
[223.45004272 30.79966545]
[219.00297546 16.32546616]
[204.01028442 15.85742378]
[189.01759338 15.38938236]
[174.02488708 14.92133999]
[161.21859741 32.05710983]
[139.85507202 36.06567764]
[133.22657776 49.52164459]
[126.59808350 62.97760773]
[133.90963745 69.53277588]
[139.64772034 77.50168610]
[143.54605103 86.51457214]
[145.42375183 96.15321350]
[145.19369507 105.97034454]
[142.86654663 115.51044464]
[138.55030823 124.33082581]
[132.44523621 132.02220154]
[124.83464813 138.22767639]
[116.07167053 142.65931702]
[106.56293488 145.11145020]
[106.25087738 160.10820007]
[105.93881989 175.10496521]
[105.62676239 190.10171509]
[105.31470490 205.09846497]
[105.00265503 220.09521484]
[104.69059753 235.09197998]
[104.37854004 250.08872986]
[104.06648254 265.08547974]
[103.75442505 280.08224487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 144]
[9 143]
[10 142]
[11 141]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[21 33]
[22 32]
[43 130]
[44 129]
[45 128]
[50 99]
[51 98]
[52 97]
[53 96]
[64 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[102 126]
[103 125]
[104 124]
[105 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
