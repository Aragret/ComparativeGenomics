%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUCAUGAUUUGAGAAGCCUUCGCUUCGAAGCGxxxxxxxxxxCCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.10047150 233.32495117]
[94.80779266 218.32780457]
[94.51512146 203.33067322]
[94.22244263 188.33352661]
[93.92976379 173.33638000]
[93.63709259 158.33923340]
[93.34441376 143.34208679]
[93.05173492 128.34494019]
[92.75906372 113.34780121]
[78.52982330 108.60134125]
[69.29234314 120.41949463]
[60.05485535 132.23765564]
[65.24069214 146.76730347]
[61.72572327 161.78890991]
[50.63156128 172.50912476]
[35.49831009 175.50717163]
[21.15493965 169.82640076]
[12.17836666 157.27949524]
[11.43298149 141.87014771]
[19.15663338 128.51542664]
[32.88473511 121.47676086]
[48.23669815 123.00017548]
[57.47418213 111.18201447]
[66.71166992 99.36385345]
[79.28684998 91.22212219]
[91.70470428 91.75148010]
[90.53511047 76.79714966]
[89.36551666 61.84281540]
[76.75244904 59.65699387]
[64.96339417 54.69086075]
[54.60221481 47.20304108]
[46.19867325 37.58123398]
[40.18134308 26.32210922]
[36.85576630 14.00568581]
[36.38892365 1.26545238]
[38.80086899 -11.24421883]
[43.96389389 -22.88168335]
[51.60928345 -33.05093384]
[61.34129715 -41.23212433]
[72.65766144 -47.00814056]
[84.97547913 -50.08587265]
[84.97547913 -65.08587646]
[84.97547913 -80.08587646]
[84.97547913 -95.08587646]
[84.97547913 -110.08587646]
[82.60270691 -113.85935974]
[81.67974854 -117.79567719]
[82.07522583 -121.40943146]
[83.51086426 -124.31042480]
[85.60638428 -126.24404144]
[86.77597809 -141.19837952]
[87.94556427 -156.15270996]
[89.11515808 -171.10704041]
[80.18306732 -179.12515259]
[76.84207153 -190.40835571]
[79.84611511 -201.54211426]
[70.15456390 -212.99085999]
[60.46301270 -224.43960571]
[50.77146149 -235.88835144]
[41.07991409 -247.33711243]
[25.47112846 -252.36680603]
[22.28757668 -268.45397949]
[34.80422592 -279.04953003]
[50.14501953 -273.25363159]
[52.52866364 -257.02865601]
[62.22021484 -245.57991028]
[71.91176605 -234.13116455]
[81.60330963 -222.68240356]
[91.29486084 -211.23365784]
[94.96664429 -212.15744019]
[98.74467468 -212.40614319]
[104.45111084 -226.27828979]
[110.15753937 -240.15045166]
[97.45239258 -248.19720459]
[86.33769989 -258.32809448]
[77.15121460 -270.23519897]
[70.17211914 -283.55676270]
[65.61248779 -297.88787842]
[63.61088943 -312.79306030]
[64.22814941 -327.81936646]
[67.44551086 -342.51016235]
[73.16519928 -356.41903687]
[81.21339417 -369.12326050]
[91.34553528 -380.23681641]
[103.25370026 -389.42193604]
[116.57602692 -396.39953613]
[130.90766907 -400.95751953]
[145.81307983 -402.95742798]
[160.83932495 -402.33847046]
[175.52976990 -399.11944580]
[189.43797302 -393.39819336]
[202.14129639 -385.34854126]
[213.25369263 -375.21514893]
[222.43746948 -363.30593872]
[229.41354370 -349.98281860]
[233.96992493 -335.65066528]
[235.96813965 -320.74502563]
[235.34747314 -305.71884155]
[232.12678528 -291.02877808]
[226.40394592 -277.12121582]
[218.35285950 -264.41882324]
[208.21820068 -253.30755615]
[196.30795288 -244.12513733]
[182.98403931 -237.15057373]
[168.65138245 -232.59580994]
[153.74549866 -230.59928894]
[138.71940613 -231.22166443]
[124.02969360 -234.44401550]
[118.32325745 -220.57186890]
[112.61682892 -206.69970703]
[119.20791626 -186.18365479]
[104.06948853 -169.93745422]
[102.89990234 -154.98310852]
[101.73030853 -140.02877808]
[100.56071472 -125.07444763]
[99.97547913 -110.08587646]
[99.97547913 -95.08587646]
[99.97547913 -80.08587646]
[99.97547913 -65.08587646]
[99.97547913 -50.08587265]
[116.60853577 -45.18597031]
[130.96154785 -35.42611313]
[141.65432739 -21.73211861]
[147.65473938 -5.40871477]
[148.37838745 11.98475838]
[143.74548340 28.78331566]
[134.18949890 43.37570190]
[120.61662292 54.35894394]
[104.31985474 60.67322540]
[105.48944092 75.62755585]
[106.65903473 90.58189392]
[111.34040070 76.33110809]
[119.92774200 64.03242493]
[131.69332886 54.72807312]
[145.64010620 49.20653152]
[160.58618164 47.93572235]
[175.26495361 51.02333450]
[188.43252563 58.20771027]
[198.97299194 68.88002777]
[205.99316406 82.13587189]
[208.89808655 96.85189819]
[207.44158936 111.78102112]
[201.74713135 125.65808868]
[192.29725647 137.30711365]
[179.89279175 145.74092102]
[165.58491516 150.24479675]
[150.58615112 150.43707275]
[136.16752625 146.30145264]
[123.55094910 138.18838501]
[113.80556488 126.78543091]
[107.75620270 113.05512238]
[108.04888153 128.05226135]
[108.34156036 143.04940796]
[108.63423157 158.04655457]
[108.92691040 173.04370117]
[109.21958923 188.04084778]
[109.51226044 203.03799438]
[109.80493927 218.03514099]
[110.09761810 233.03227234]
[112.66379547 252.24333191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[5 155]
[6 154]
[7 153]
[8 152]
[9 151]
[10 24]
[11 23]
[12 22]
[26 131]
[27 130]
[28 129]
[41 120]
[42 119]
[43 118]
[44 117]
[45 116]
[50 115]
[51 114]
[52 113]
[53 112]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[71 110]
[72 109]
[73 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
