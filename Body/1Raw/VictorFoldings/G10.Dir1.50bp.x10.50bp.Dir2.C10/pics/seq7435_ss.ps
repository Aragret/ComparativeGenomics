%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGxxxxxxxxxxUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCCAAACAUCACUUUGCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[129.49322510 554.20257568]
[129.18116760 539.20581055]
[128.86911011 524.20904541]
[128.55706787 509.21231079]
[128.24501038 494.21554565]
[127.93294525 479.21881104]
[127.62089539 464.22204590]
[127.30883789 449.22528076]
[126.99678040 434.22854614]
[110.74169159 429.17633057]
[97.15329742 418.88351440]
[87.86075592 404.56323242]
[83.98528290 387.91271973]
[86.00485992 370.91220093]
[93.69539642 355.58932495]
[106.15540314 343.77731323]
[121.91168976 336.89569092]
[120.66481018 321.94763184]
[119.41793823 306.99954224]
[118.17106628 292.05145264]
[102.41749573 280.68502808]
[99.96321869 261.10968018]
[112.81112671 245.74160767]
[110.63429260 230.90040588]
[108.45745850 216.05920410]
[106.28061676 201.21798706]
[104.10378265 186.37678528]
[94.60137939 174.90710449]
[100.25405121 160.13017273]
[98.07721710 145.28897095]
[95.90037537 130.44775391]
[93.72354126 115.60655212]
[83.17224884 104.94493103]
[68.35449219 102.61382294]
[53.53673553 100.28272247]
[38.71897888 97.95161438]
[23.90122032 95.62051392]
[9.08346176 93.28941345]
[-3.54367042 102.79367828]
[-19.18103981 100.50277710]
[-28.55127525 87.77587128]
[-26.09517860 72.16359711]
[-13.26991081 62.92844009]
[2.31552458 65.54946136]
[11.41456509 78.47164917]
[26.23232269 80.80275726]
[41.05008316 83.13385773]
[55.86783981 85.46496582]
[70.68560028 87.79606628]
[85.50335693 90.12717438]
[73.78005219 80.76959991]
[74.61885834 65.79307556]
[87.31376648 57.80312729]
[101.17964172 63.52479172]
[104.54575348 78.14229584]
[108.85333252 63.77411270]
[113.16091919 49.40592957]
[108.48733521 31.62567329]
[121.64752960 20.05808067]
[125.65527344 5.60339212]
[129.66300964 -8.85129642]
[133.67074585 -23.30598450]
[126.14683533 -36.94520950]
[130.41717529 -51.54722977]
[143.46646118 -58.63607407]
[147.47419739 -73.09076691]
[151.02896118 -87.66346741]
[154.12727356 -102.33999634]
[157.22560120 -117.01651764]
[160.32392883 -131.69303894]
[147.01535034 -138.83856201]
[136.25994873 -149.44508362]
[128.92964172 -162.65277100]
[125.61863708 -177.39096069]
[126.59535217 -192.46485901]
[131.78062439 -206.65252686]
[140.75407410 -218.80381775]
[152.78828430 -227.93367004]
[166.90769958 -233.30198669]
[181.96772766 -234.47357178]
[196.74748230 -231.35345459]
[210.04887390 -224.19456482]
[220.79360962 -213.57725525]
[228.11065674 -200.36219788]
[231.40684509 -185.62069702]
[230.41499329 -170.54777527]
[225.21546936 -156.36534119]
[216.22981262 -144.22306824]
[204.18643188 -135.10530090]
[190.06163025 -129.75117493]
[175.00044250 -128.59472656]
[171.90213013 -113.91819763]
[168.80380249 -99.24166870]
[165.70547485 -84.56514740]
[167.36624146 -81.38562012]
[167.53067017 -77.22933960]
[165.75045776 -72.82670593]
[161.92887878 -69.08302307]
[157.92114258 -54.62833405]
[165.45701599 -41.83200073]
[161.59851074 -27.11579895]
[148.12544250 -19.29824448]
[144.11770630 -4.84355593]
[140.10995483 9.61113262]
[136.10221863 24.06582069]
[141.79350281 34.78573608]
[138.52481079 46.89088440]
[127.52910614 53.71351242]
[123.22151947 68.08169556]
[118.91393280 82.44988251]
[120.69571686 102.65383148]
[108.56475067 113.42971802]
[110.74158478 128.27091980]
[112.91841888 143.11213684]
[115.09526062 157.95333862]
[124.75336456 170.48455811]
[118.94498444 184.19995117]
[121.12182617 199.04115295]
[123.29866028 213.88237000]
[125.47549438 228.72357178]
[127.65233612 243.56477356]
[137.63146973 247.64614868]
[144.93495178 255.46646118]
[148.27453613 265.54693604]
[147.10285950 276.01971436]
[141.70193481 284.97402954]
[133.11915588 290.80456543]
[134.36602783 305.75265503]
[135.61289978 320.70074463]
[136.85977173 335.64883423]
[149.68647766 338.29635620]
[161.36784363 344.18908691]
[171.09973145 352.91345215]
[178.21424866 363.86120605]
[182.22563171 376.27188110]
[182.86334229 389.28555298]
[180.09039307 402.00244141]
[174.10531616 413.54519653]
[165.32804871 423.11929321]
[154.37042236 430.06781006]
[141.99353027 433.91647339]
[142.30558777 448.91323853]
[142.61764526 463.90997314]
[142.92970276 478.90673828]
[143.24176025 493.90350342]
[143.55381775 508.90023804]
[143.86587524 523.89697266]
[144.17793274 538.89373779]
[144.48999023 553.89050293]
[147.08097839 573.09820557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[17 130]
[18 129]
[19 128]
[20 127]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[29 115]
[30 114]
[31 113]
[32 112]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[55 110]
[56 109]
[57 108]
[59 105]
[60 104]
[61 103]
[62 102]
[65 99]
[66 98]
[67 94]
[68 93]
[69 92]
[70 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
