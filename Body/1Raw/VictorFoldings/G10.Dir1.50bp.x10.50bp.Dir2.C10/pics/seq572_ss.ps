%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUCCCACUCCCAUACUACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACAxxxxxxxxxxAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-57.01119232 175.60380554]
[-70.79357910 181.52377319]
[-84.57595825 187.44372559]
[-94.20227051 199.99938965]
[-108.95005035 197.91316223]
[-122.73242950 203.83312988]
[-136.51481628 209.75309753]
[-150.29719543 215.67304993]
[-164.07957458 221.59301758]
[-160.43663025 236.17811584]
[-159.18060303 251.15872192]
[-160.34403992 266.14678955]
[-163.89680481 280.75411987]
[-169.74685669 294.60235596]
[-177.74269104 307.33273315]
[-187.67718506 318.61557007]
[-199.29299927 328.15856934]
[-212.28927612 335.71456909]
[-226.32936096 341.08782959]
[-241.04959106 344.13919067]
[-256.06869507 344.78961182]
[-270.99761963 343.02224731]
[-285.44964600 338.88287354]
[-299.05050659 332.47869873]
[-311.44781494 323.97561646]
[-322.32052612 313.59387207]
[-331.38696289 301.60241699]
[-338.41232300 288.31176758]
[-343.21459961 274.06628418]
[-345.66940308 259.23489380]
[-345.71316528 244.20178223]
[-343.34475708 229.35635376]
[-338.62551880 215.08312988]
[-331.67767334 201.75183105]
[-322.68118286 189.70776367]
[-311.86911011 179.26289368]
[-299.52151489 170.68777466]
[-285.95819092 164.20452881]
[-271.53048706 159.98106384]
[-256.61212158 158.12681580]
[-241.58949280 158.68977356]
[-226.85173035 161.65538025]
[-212.78059387 166.94680786]
[-199.74055481 174.42701721]
[-188.06936646 183.90222168]
[-178.06935120 195.12701416]
[-169.99954224 207.81063843]
[-156.21714783 201.89067078]
[-142.43476868 195.97070312]
[-128.65238953 190.05075073]
[-114.87001038 184.13078308]
[-106.22950745 171.99855042]
[-90.49591827 173.66134644]
[-76.71353912 167.74139404]
[-62.93115616 161.82142639]
[-67.67263031 147.47988892]
[-71.15435791 132.78163147]
[-73.35018921 117.83708191]
[-74.24362183 102.75852203]
[-73.82794952 87.65924072]
[-72.10628510 72.65267181]
[-69.09157562 57.85157013]
[-64.80645752 43.36713028]
[-59.28313446 29.30818176]
[-52.56310272 15.78034592]
[-44.69684601 2.88526058]
[-35.74347305 -9.28019142]
[-25.77024078 -20.62461090]
[-14.85208607 -31.06276512]
[-3.07103658 -40.51623154]
[9.48439598 -48.91398621]
[22.71988106 -56.19293594]
[36.53598022 -62.29839325]
[50.82889175 -67.18448639]
[65.49122620 -70.81450653]
[80.41283417 -73.16117859]
[95.48159790 -74.20687103]
[110.58431244 -73.94373322]
[125.60750580 -72.37374115]
[140.43830872 -69.50868225]
[154.96528625 -65.37009430]
[169.07931519 -59.98905945]
[182.67433167 -53.40601349]
[195.64822388 -45.67041016]
[207.90348816 -36.84037399]
[219.34806824 -26.98224068]
[229.89596558 -16.17007828]
[239.46795654 -4.48511744]
[247.99209595 7.98484993]
[255.40437317 21.14613533]
[269.06060791 14.94072914]
[282.71685791 8.73532200]
[296.37310791 2.52991486]
[310.02932739 -3.67549229]
[323.55352783 -10.16365719]
[336.93981934 -16.93177223]
[350.32608032 -23.69988632]
[351.81121826 -39.05559921]
[361.38046265 -51.15656662]
[375.98028564 -56.14141083]
[390.95193481 -52.41949081]
[401.51806641 -41.17845154]
[404.30700684 -26.00527191]
[398.42883301 -11.74165821]
[385.75924683 -2.93907690]
[370.34109497 -2.40639973]
[357.09420776 -10.31360245]
[343.70791626 -3.54548717]
[330.32165527 3.22262740]
[327.99279785 7.45961046]
[322.94573975 10.24503803]
[316.23474121 9.98074913]
[302.57849121 16.18615532]
[288.92227173 22.39156342]
[275.26602173 28.59696960]
[261.60977173 34.80237579]
[266.58462524 48.83345795]
[270.34378052 63.23793793]
[272.85980225 77.91069794]
[274.11434937 92.74465942]
[274.09826660 107.63156891]
[272.81167603 122.46278381]
[270.26394653 137.13006592]
[266.47366333 151.52639771]
[261.46850586 165.54669189]
[255.28501892 179.08865356]
[247.96829224 192.05343628]
[239.57173157 204.34645081]
[230.15661621 215.87797546]
[219.79167175 226.56384277]
[208.55250549 236.32609558]
[196.52114868 245.09347534]
[183.78543091 252.80200195]
[170.43824768 259.39541626]
[156.57704163 264.82562256]
[142.30294800 269.05297852]
[127.72013855 272.04663086]
[112.93503571 273.78472900]
[98.05553436 274.25460815]
[83.19022369 273.45281982]
[68.44758606 271.38522339]
[53.93521118 268.06689453]
[39.75900269 263.52209473]
[26.02241707 257.78393555]
[12.82569695 250.89430237]
[0.26515135 242.90350342]
[-11.56755829 233.86982727]
[-22.58608055 223.85920715]
[-32.71000290 212.94470215]
[-41.86544800 201.20596313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[5 51]
[6 50]
[7 49]
[8 48]
[9 47]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
