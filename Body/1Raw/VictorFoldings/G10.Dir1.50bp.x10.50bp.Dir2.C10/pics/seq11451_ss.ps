%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCxxxxxxxxxxCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.17594910 449.95819092]
[169.17594910 434.95819092]
[169.17594910 419.95819092]
[169.17594910 404.95819092]
[169.17594910 389.95819092]
[169.17594910 374.95819092]
[169.17594910 359.95819092]
[169.17594910 344.95819092]
[169.17594910 329.95819092]
[169.17594910 314.95819092]
[166.53707886 300.19213867]
[161.34165955 286.12063599]
[156.14625549 272.04910278]
[150.95083618 257.97760010]
[145.75541687 243.90606689]
[130.83403015 244.96881104]
[116.20299530 241.78068542]
[103.04987335 234.59172058]
[92.44471741 223.97703552]
[85.25305939 210.79083252]
[82.06521606 196.09764099]
[83.14789581 181.08644104]
[88.42189026 166.97439575]
[97.46778107 154.90815735]
[109.55930328 145.87072754]
[104.36389160 131.79920959]
[99.16847229 117.72769165]
[85.45539856 114.64569855]
[76.49966431 101.26548767]
[62.71728134 95.34552765]
[48.93489838 89.42556000]
[35.15251541 83.50559998]
[29.84095573 84.14349365]
[25.29293060 82.77680206]
[22.15404701 80.04750061]
[20.71341515 76.76237488]
[7.32712984 69.99425507]
[-6.05915499 63.22614288]
[-19.44544029 56.45802689]
[-29.92763519 67.34908295]
[-43.15513611 74.66513062]
[-57.95175934 77.75565338]
[-73.00180054 76.34582520]
[-86.96702576 70.56101990]
[-98.60565186 60.91561508]
[-106.88277435 48.26727295]
[-111.06240845 33.74067307]
[-110.77289581 18.62751389]
[-106.03997803 4.27164507]
[-97.28451538 -8.05041695]
[-85.28502655 -17.24300385]
[-71.10849762 -22.48871803]
[-56.01550293 -23.32111168]
[-41.34809494 -19.66617203]
[-28.41049385 -11.84889030]
[-18.35310173 -0.56437719]
[-12.07021141 13.18395805]
[-10.12049770 28.17362213]
[-12.67732525 43.07174301]
[0.70895970 49.83985901]
[14.09524441 56.60797501]
[27.48152924 63.37608719]
[41.07247925 69.72322083]
[54.85486221 75.64318085]
[68.63724518 81.56314087]
[82.41962433 87.48310852]
[73.16262817 75.68022156]
[63.90563202 63.87734222]
[51.09827042 56.06892014]
[42.18830872 44.00191498]
[38.49542236 29.46360016]
[40.56657410 14.60727787]
[48.09499741 1.63334858]
[59.96564102 -7.53658915]
[74.42032623 -11.54435539]
[89.31812286 -9.79635239]
[102.45249939 -2.55147934]
[111.87808990 9.11720943]
[116.19884491 23.48143768]
[114.77481079 38.41368866]
[107.81681824 51.70242691]
[105.95923615 66.58695984]
[104.10165405 81.47149658]
[112.86786652 69.29965973]
[121.63407135 57.12782288]
[123.42060852 41.40780640]
[137.13706970 35.60197449]
[145.90328979 23.43013763]
[147.01033020 7.06839991]
[161.85069275 0.09017523]
[175.15788269 9.67406368]
[173.24259949 25.96098137]
[158.07511902 32.19634628]
[149.30891418 44.36818314]
[148.14939880 59.21758652]
[133.80590820 65.89402771]
[125.03970337 78.06586456]
[116.27349091 90.23770142]
[127.93106079 80.79836273]
[142.87820435 79.54024506]
[155.94960022 86.89811707]
[162.62815857 100.32931519]
[160.60592651 115.19237518]
[150.58174133 126.35103607]
[136.01968384 129.94917297]
[121.95200348 124.74337006]
[113.23999023 112.53227234]
[118.43540955 126.60379028]
[123.63082123 140.67530823]
[138.69412231 139.68676758]
[153.41078186 142.97952271]
[166.58999634 150.27838135]
[177.16783142 160.98432922]
[184.29313660 174.22375488]
[187.39595032 188.91961670]
[186.23320007 203.87919617]
[180.90762329 217.89076233]
[171.85882568 229.82183838]
[159.82693481 238.71066284]
[165.02235413 252.78218079]
[170.21777344 266.85369873]
[175.41319275 280.92520142]
[180.60859680 294.99673462]
[183.67190552 280.31286621]
[191.25828552 267.37274170]
[202.57540894 257.52780151]
[216.44134521 251.80628967]
[231.40794373 250.80574036]
[245.91209412 254.63063049]
[258.43896484 262.88150024]
[267.68032837 274.69665527]
[272.67092896 288.84210205]
[272.88964844 303.84051514]
[268.31356812 318.12545776]
[259.42062378 330.20501709]
[247.13963318 338.81762695]
[232.75317383 343.06375122]
[217.76376343 342.50000000]
[203.73690796 337.18518066]
[192.13754272 327.67440796]
[184.17594910 314.95819092]
[184.17594910 329.95819092]
[184.17594910 344.95819092]
[184.17594910 359.95819092]
[184.17594910 374.95819092]
[184.17594910 389.95819092]
[184.17594910 404.95819092]
[184.17594910 419.95819092]
[184.17594910 434.95819092]
[184.17594910 449.95819092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[25 109]
[26 108]
[27 107]
[29 66]
[30 65]
[31 64]
[32 63]
[36 62]
[37 61]
[38 60]
[39 59]
[83 98]
[84 97]
[85 96]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
