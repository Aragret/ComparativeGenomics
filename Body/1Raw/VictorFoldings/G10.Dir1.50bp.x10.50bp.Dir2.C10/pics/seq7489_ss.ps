%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGxxxxxxxxxxACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 299.63793945]
[92.50000000 284.63793945]
[92.50000000 269.63793945]
[92.50000000 254.63792419]
[92.50000000 239.63792419]
[92.50000000 224.63792419]
[92.50000000 209.63792419]
[92.50000000 194.63792419]
[92.50000000 179.63792419]
[92.50000000 164.63792419]
[86.30083466 163.61323547]
[80.22939301 161.99543762]
[74.34229279 159.79960632]
[68.69441223 157.04621887]
[63.33842087 153.76095581]
[58.32425308 149.97442627]
[53.69865799 145.72195435]
[49.50476837 141.04318237]
[45.78167725 135.98173523]
[42.56410980 130.58479309]
[39.88205719 124.90270233]
[25.45467377 129.00764465]
[11.02728844 133.11259460]
[-3.40009642 137.21752930]
[-17.82748032 141.32247925]
[-20.38301277 156.37013245]
[-29.22140503 168.81382751]
[-42.58778381 176.18286133]
[-57.82825089 177.01409912]
[-71.91679382 171.14250183]
[-82.05612946 159.73388672]
[-86.23307800 145.05342102]
[-83.61830902 130.01594543]
[-74.73098755 117.60715485]
[-61.33568954 110.29081726]
[-46.09206772 109.51959991]
[-32.02675247 115.44663239]
[-21.93242645 126.89509583]
[-7.50504112 122.79015350]
[6.92234325 118.68520355]
[21.34972763 114.58026123]
[35.77711105 110.47531891]
[36.14113998 87.49570465]
[44.47102737 66.07589722]
[59.72769165 48.88784409]
[80.00798798 38.07560349]
[102.78212738 34.98791504]
[125.20921326 40.00994110]
[132.57545471 26.94324875]
[139.94169617 13.87655354]
[147.30793762 0.80985820]
[154.67417908 -12.25683689]
[160.52096558 -26.07041931]
[164.77380371 -40.45489883]
[161.26667786 -55.88249207]
[172.29495239 -65.89379883]
[176.54780579 -80.27828217]
[180.80064392 -94.66276550]
[185.05349731 -109.04724121]
[189.30633545 -123.43172455]
[193.55918884 -137.81620789]
[197.81202698 -152.20068359]
[200.26495361 -166.99876404]
[200.88078308 -181.98611450]
[201.49661255 -196.97348022]
[202.11244202 -211.96083069]
[202.72825623 -226.94818115]
[203.34408569 -241.93553162]
[189.15426636 -247.17996216]
[177.28080750 -256.55419922]
[168.88696289 -269.13983154]
[164.79507446 -283.70388794]
[165.40602112 -298.81951904]
[170.65995789 -313.00582886]
[180.04214478 -324.87298584]
[192.63342285 -333.25839233]
[207.20021057 -337.34051514]
[222.31541443 -336.71945190]
[236.49819946 -331.45602417]
[248.35908508 -322.06588745]
[256.73605347 -309.46899414]
[260.80841064 -294.89947510]
[260.17721558 -279.78466797]
[254.90426636 -265.60540771]
[245.50619507 -253.75083923]
[232.90368652 -245.38230896]
[218.33143616 -241.31970215]
[217.71562195 -226.33235168]
[217.09979248 -211.34500122]
[216.48396301 -196.35765076]
[215.86813354 -181.37030029]
[215.25231934 -166.38293457]
[224.45602417 -178.22741699]
[237.83407593 -185.01179504]
[252.82800293 -185.43861389]
[266.57031250 -179.42623901]
[276.43292236 -168.12449646]
[280.52963257 -153.69477844]
[278.07699585 -138.89665222]
[269.54406738 -126.56015778]
[256.56271362 -119.04456329]
[241.61549377 -117.78717804]
[227.56098938 -123.02846527]
[217.08702087 -133.76606750]
[212.19651794 -147.94784546]
[207.94366455 -133.56335449]
[203.69082642 -119.17887878]
[199.43797302 -104.79439545]
[195.18511963 -90.40991974]
[190.93228149 -76.02543640]
[186.67942810 -61.64095688]
[190.49075317 -47.24223709]
[179.15829468 -36.20205307]
[174.90544128 -21.81757355]
[186.93151855 -30.78270531]
[201.72596741 -33.25737000]
[216.01496887 -28.69395065]
[226.63647461 -18.10228348]
[231.24008179 -3.82619214]
[228.80706787 10.97517204]
[219.87580872 23.02642441]
[206.42271423 29.66074753]
[191.42480469 29.41003609]
[178.20097351 22.32976913]
[169.67750549 9.98673630]
[167.74087524 -4.89059734]
[160.37463379 8.17609787]
[153.00839233 21.24279213]
[145.64215088 34.30948639]
[138.27590942 47.37618256]
[147.27603149 55.28660583]
[154.67312622 64.71317291]
[160.21636963 75.33624268]
[163.71777344 86.79560852]
[165.05865479 98.70271301]
[164.19351196 110.65380859]
[161.15170288 122.24365234]
[156.03636169 133.07925415]
[149.02093506 142.79321289]
[140.34330750 151.05613708]
[130.29772949 157.58784485]
[119.22480011 162.16685486]
[107.50000000 164.63792419]
[107.50000000 179.63792419]
[107.50000000 194.63792419]
[107.50000000 209.63792419]
[107.50000000 224.63792419]
[107.50000000 239.63792419]
[107.50000000 254.63792419]
[107.50000000 269.63793945]
[107.50000000 284.63793945]
[107.50000000 299.63793945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[48 130]
[49 129]
[50 128]
[51 127]
[52 126]
[53 114]
[54 113]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
[62 105]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
