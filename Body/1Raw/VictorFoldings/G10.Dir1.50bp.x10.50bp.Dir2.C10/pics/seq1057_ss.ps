%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAxxxxxxxxxxGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[164.79753113 58.47234344]
[151.56979370 48.91035080]
[142.06143188 60.51169205]
[132.55307007 72.11302948]
[123.04471588 83.71437073]
[113.53635406 95.31571198]
[111.07846832 109.07981110]
[98.06498718 114.19264221]
[95.30139160 129.77061462]
[81.24948883 134.70957947]
[71.74113464 146.31091309]
[62.23277283 157.91226196]
[52.72441483 169.51359558]
[54.53294754 185.21406555]
[44.64455032 197.54269409]
[28.92583656 199.18513489]
[16.70244026 189.16694641]
[15.22628403 173.43174744]
[25.37314606 161.31494141]
[41.12307358 160.00523376]
[50.63143158 148.40390015]
[60.13978958 136.80255127]
[69.64814758 125.20121002]
[71.73164368 110.45304871]
[86.46364594 104.68428802]
[88.92153168 90.92018890]
[101.93501282 85.80735779]
[111.44337463 74.20601654]
[120.95172882 62.60467529]
[130.46008301 51.00333405]
[139.96844482 39.40199280]
[129.59353638 29.87416458]
[119.75216675 19.79629135]
[110.47348022 9.19820595]
[101.78491974 -1.88871849]
[93.71219635 -13.43166447]
[86.27919006 -25.39646530]
[79.50789642 -37.74770355]
[73.41834259 -50.44881821]
[68.02854919 -63.46221924]
[63.35444641 -76.74938965]
[59.40987015 -90.27099609]
[56.20647812 -103.98702240]
[53.75374603 -117.85687256]
[52.05892181 -131.83949280]
[51.12701416 -145.89349365]
[50.96076965 -159.97731018]
[51.56066895 -174.04922485]
[52.92493057 -188.06759644]
[55.04950333 -201.99095154]
[57.92809296 -215.77807617]
[61.55217361 -229.38818359]
[65.91100311 -242.78097534]
[70.99167633 -255.91682434]
[76.77914429 -268.75686646]
[83.25627136 -281.26306152]
[90.40388489 -293.39846802]
[98.20082092 -305.12713623]
[106.62398529 -316.41436768]
[115.64845276 -327.22677612]
[125.24750519 -337.53231812]
[135.39273071 -347.30056763]
[146.05407715 -356.50256348]
[157.20001221 -365.11111450]
[168.79751587 -373.10073853]
[180.81228638 -380.44781494]
[193.20874023 -387.13055420]
[205.95019531 -393.12927246]
[218.99893188 -398.42614746]
[232.31632996 -403.00555420]
[245.86297607 -406.85391235]
[259.59875488 -409.95986938]
[273.48306274 -412.31427002]
[287.47473145 -413.91009521]
[301.53240967 -414.74267578]
[315.61450195 -414.80950928]
[329.67926025 -414.11047363]
[343.68511963 -412.64761353]
[357.59060669 -410.42523193]
[371.35458374 -407.44998169]
[384.93630981 -403.73065186]
[398.29559326 -399.27822876]
[411.39288330 -394.10592651]
[424.18942261 -388.22909546]
[436.64736938 -381.66506958]
[448.72985840 -374.43331909]
[460.40109253 -366.55526733]
[471.62655640 -358.05419922]
[482.37304688 -348.95532227]
[492.60876465 -339.28555298]
[502.30343628 -329.07351685]
[511.42831421 -318.34945679]
[519.95648193 -307.14508057]
[527.86260986 -295.49362183]
[535.12341309 -283.42950439]
[541.71734619 -270.98846436]
[547.62487793 -258.20730591]
[552.82861328 -245.12390137]
[567.05541992 -249.87771606]
[581.28222656 -254.63153076]
[595.50897217 -259.38534546]
[600.05242920 -274.22235107]
[612.46936035 -283.52822876]
[627.98522949 -283.72470093]
[640.63378906 -274.73620605]
[645.55145264 -260.01898193]
[640.84729004 -245.23216248]
[628.33013916 -236.06152344]
[612.81311035 -236.03338623]
[600.26281738 -245.15856934]
[586.03601074 -240.40475464]
[571.80920410 -235.65093994]
[557.58245850 -230.89712524]
[561.81054688 -215.13926697]
[565.03741455 -199.14614868]
[567.25030518 -182.98132324]
[568.44030762 -166.70903015]
[568.60266113 -150.39390564]
[567.73675537 -134.10081482]
[565.84600830 -117.89447021]
[562.93786621 -101.83928680]
[559.02392578 -85.99906158]
[554.11962891 -70.43675232]
[548.24456787 -55.21419525]
[541.42199707 -40.39189148]
[533.67895508 -26.02875137]
[525.04626465 -12.18185711]
[515.55822754 1.09375751]
[505.25247192 13.74532604]
[494.16995239 25.72256279]
[482.35467529 36.97785950]
[469.85363770 47.46647263]
[456.71643066 57.14670944]
[442.99526978 65.98008728]
[428.74465942 73.93148804]
[414.02124023 80.96929932]
[398.88348389 87.06552887]
[383.39157104 92.19593048]
[367.60699463 96.34010315]
[351.59249878 99.48155975]
[335.41174316 101.60778809]
[319.12899780 102.71032715]
[302.80895996 102.78477478]
[286.51651001 101.83080292]
[270.31634521 99.85218811]
[254.27285767 96.85677338]
[238.44981384 92.85643005]
[222.91009521 87.86704254]
[207.71543884 81.90841675]
[192.92625427 75.00420380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[8 25]
[10 23]
[11 22]
[12 21]
[13 20]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
