%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCACAGGUCUAUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGxxxxxxxxxxUUCAACCUCCCUCACCAUUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 298.47314453]
[92.50000000 283.47314453]
[92.50000000 268.47314453]
[92.50000000 253.47312927]
[92.50000000 238.47312927]
[92.50000000 223.47312927]
[92.50000000 208.47312927]
[92.50000000 193.47312927]
[92.50000000 178.47312927]
[92.50000000 163.47312927]
[83.86206818 161.84379578]
[75.52938080 159.04470825]
[67.65955353 155.12879944]
[60.40143967 150.17013550]
[53.89231873 144.26251221]
[48.25531769 137.51768494]
[35.16216278 144.83679199]
[22.06900978 152.15589905]
[23.87866020 167.24871826]
[19.76996803 181.88385010]
[10.36947918 193.82954407]
[-2.88929844 201.26412964]
[-17.98449898 203.05392456]
[-32.61421204 198.92599487]
[-44.54751587 189.50979614]
[-51.96466827 176.24124146]
[-53.73460388 161.14370728]
[-49.58742142 146.51943970]
[-40.15553665 134.59852600]
[-26.87724495 127.19883728]
[-11.77738857 125.44876099]
[2.84141541 129.61517334]
[14.74990463 139.06274414]
[27.84305954 131.74363708]
[40.93621445 124.42453003]
[36.43222046 106.65024567]
[37.15998459 88.32862854]
[43.05960846 70.96759796]
[53.64554596 55.99599075]
[68.04654694 44.64599991]
[85.07738495 37.85175705]
[103.33638000 36.17244339]
[121.32078552 39.74626541]
[127.94928741 26.29030037]
[134.57778931 12.83433533]
[139.62654114 -1.29046738]
[143.02952576 -15.89935970]
[146.43249512 -30.50825310]
[134.03833008 -39.85783005]
[127.11813354 -54.17785645]
[127.51114655 -70.45694733]
[135.47627258 -85.09319305]
[149.55928040 -94.69108582]
[166.84741211 -96.84703064]
[168.71502686 -111.73030853]
[170.58264160 -126.61358643]
[159.43460083 -137.24504089]
[156.71607971 -152.22712708]
[163.26339722 -165.77691650]
[176.37693787 -172.78924561]
[178.24455261 -187.67253113]
[180.11216736 -202.55581665]
[181.97978210 -217.43908691]
[167.69845581 -222.18568420]
[154.61772156 -229.62748718]
[143.24034119 -239.47843933]
[134.00364685 -251.35992432]
[127.26265717 -264.81524658]
[123.27649689 -279.32717896]
[122.19837189 -294.33798218]
[124.06972504 -309.27062988]
[128.81863403 -323.55117798]
[136.26254272 -336.63073730]
[146.11534119 -348.00650024]
[157.99832153 -357.24130249]
[171.45472717 -363.98010254]
[185.96733093 -367.96389771]
[200.97828674 -369.03961182]
[215.91064453 -367.16583252]
[230.19042969 -362.41461182]
[243.26876831 -354.96859741]
[254.64295959 -345.11392212]
[263.87579346 -333.22946167]
[270.61242676 -319.77197266]
[274.59390259 -305.25872803]
[275.66714478 -290.24758911]
[273.79098511 -275.31555176]
[269.03744507 -261.03652954]
[261.58929443 -247.95939636]
[251.73280334 -236.58680725]
[239.84684753 -227.35588074]
[226.38825989 -220.62142944]
[211.87437439 -216.64231873]
[196.86306763 -215.57147217]
[194.99545288 -200.68820190]
[193.12783813 -185.80491638]
[191.26022339 -170.92163086]
[202.23460388 -160.88665771]
[205.23106384 -146.13926697]
[198.89509583 -132.29338074]
[185.46591187 -124.74597931]
[183.59829712 -109.86269379]
[181.73068237 -94.97941589]
[193.02969360 -85.11369324]
[207.52528381 -88.97085571]
[221.27702332 -98.88681030]
[234.61231995 -88.41751099]
[228.24374390 -72.70516968]
[211.38244629 -74.47525787]
[196.88685608 -70.61809540]
[196.73307800 -53.55187607]
[189.15966797 -38.88373184]
[176.23878479 -29.53377914]
[161.04139709 -27.10527420]
[157.63841248 -12.49638176]
[154.23542786 2.11251068]
[161.41793823 15.28109264]
[175.54273987 20.32984924]
[189.66754150 25.37860489]
[205.69500732 21.90692520]
[216.51342773 34.23144913]
[210.99374390 49.67376709]
[194.81413269 52.34814072]
[184.61878967 39.50341034]
[170.49398804 34.45465088]
[156.36918640 29.40589523]
[151.41508484 24.82319260]
[148.03375244 19.46283340]
[141.40525818 32.91880035]
[134.77674866 46.37476349]
[145.75753784 55.37560272]
[154.48023987 66.57858276]
[160.51445007 79.43085480]
[163.56236267 93.29818726]
[163.47357178 107.49623871]
[160.25247192 121.32436371]
[154.05799866 134.10015869]
[145.19586182 145.19317627]
[134.10336304 154.05598450]
[121.32793427 160.25120544]
[107.50000000 163.47312927]
[107.50000000 178.47312927]
[107.50000000 193.47312927]
[107.50000000 208.47312927]
[107.50000000 223.47312927]
[107.50000000 238.47312927]
[107.50000000 253.47312927]
[107.50000000 268.47314453]
[107.50000000 283.47314453]
[107.50000000 298.47314453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 35]
[17 34]
[18 33]
[43 130]
[44 129]
[45 128]
[46 116]
[47 115]
[48 114]
[54 103]
[55 102]
[56 101]
[60 97]
[61 96]
[62 95]
[63 94]
[104 110]
[105 109]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
