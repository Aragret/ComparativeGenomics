%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUxxxxxxxxxxCAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[109.55507660 290.20147705]
[109.24301910 275.20471191]
[108.93096924 260.20797729]
[108.61891174 245.21121216]
[108.30685425 230.21446228]
[107.99479675 215.21771240]
[107.68273926 200.22094727]
[107.37068176 185.22419739]
[107.05863190 170.22744751]
[105.19101715 155.34416199]
[101.78804016 140.73527527]
[98.38505554 126.12638092]
[84.04691315 120.75318909]
[75.16744232 108.27887726]
[60.17474365 108.74691772]
[45.18204880 109.21495819]
[30.18935204 109.68300629]
[21.41955185 122.34778595]
[7.04196358 127.36160278]
[-7.36069870 122.99957275]
[-16.32577515 111.13511658]
[-31.31847191 111.60315704]
[-46.31116867 112.07119751]
[-61.30386353 112.53923798]
[-72.09162903 123.77587128]
[-87.30302429 124.03695679]
[-97.94895172 113.68322754]
[-112.94165039 114.15126801]
[-127.93434143 114.61930847]
[-142.90513611 115.55493927]
[-157.83944702 116.95724487]
[-172.77375793 118.35954285]
[-182.66110229 130.68902588]
[-198.37966919 132.33279419]
[-210.60392761 122.31564331]
[-212.08142090 106.58056641]
[-201.93557739 94.46290588]
[-186.18576050 93.15185547]
[-174.17605591 103.42523956]
[-159.24174500 102.02293396]
[-144.30743408 100.62062836]
[-141.76493835 98.09017181]
[-137.84523010 96.69824219]
[-133.11247253 97.08995056]
[-128.40238953 99.62661743]
[-113.40969086 99.15856934]
[-98.41699219 98.69052887]
[-88.43760681 87.69291687]
[-73.23954773 87.00467682]
[-61.77190781 97.54654694]
[-46.77920914 97.07849884]
[-31.78651428 96.61045837]
[-16.79381752 96.14241791]
[-8.58624649 83.74185944]
[5.51628780 78.48995209]
[20.17861748 82.59719849]
[29.72130966 94.69030762]
[44.71400452 94.22226715]
[59.70670319 93.75421906]
[74.69939423 93.28617859]
[82.84747314 80.22661591]
[96.92696381 74.00476074]
[112.06912231 76.77217102]
[122.50893402 66.00135803]
[132.94874573 55.23055267]
[143.38856506 44.45974350]
[153.82836914 33.68893433]
[144.30659485 22.07714844]
[136.17056274 9.45563030]
[129.52633667 -4.01106977]
[124.46054077 -18.14738655]
[121.03921509 -32.76902390]
[119.30696869 -47.68535995]
[119.28637695 -62.70193100]
[120.97771454 -77.62296295]
[124.35893250 -92.25392151]
[129.38595581 -106.40408325]
[135.99322510 -119.88894653]
[144.09461975 -132.53273010]
[153.58451843 -144.17057800]
[164.33920288 -154.65078735]
[176.21844482 -163.83670044]
[189.06739807 -171.60858154]
[202.71853638 -177.86511230]
[216.99391174 -182.52470398]
[231.70738220 -185.52662659]
[246.66714478 -186.83174133]
[261.67816162 -186.42301941]
[276.54473877 -184.30580139]
[291.07305908 -180.50769043]
[305.07373047 -175.07820129]
[318.36419678 -168.08811951]
[330.77117920 -159.62858582]
[342.13299561 -149.80986023]
[352.30145264 -138.75996399]
[361.14401245 -126.62295532]
[368.54537964 -113.55707550]
[374.40908813 -99.73265076]
[378.65869141 -85.32991028]
[381.23873901 -70.53663635]
[382.11563110 -55.54567719]
[381.27795410 -40.55247879]
[378.73660278 -25.75250244]
[374.52471924 -11.33869934]
[368.69717407 2.50101709]
[361.33001709 15.58621788]
[352.51922607 27.74631119]
[342.37969971 38.82276535]
[331.04364014 48.67117691]
[318.65878296 57.16314697]
[305.38665771 64.18797302]
[291.40023804 69.65406036]
[276.88189697 73.49015808]
[262.02090454 75.64625549]
[247.01101685 76.09423828]
[232.04789734 74.82826233]
[217.32661438 71.86483765]
[203.03912354 67.24259949]
[189.37165833 61.02180862]
[176.50242615 53.28356552]
[164.59918213 44.12874603]
[154.15936279 54.89955521]
[143.71955872 65.67036438]
[133.27973938 76.44116974]
[122.83992767 87.21198273]
[126.17488861 100.26634979]
[122.57497406 113.25015259]
[112.99394989 122.72340393]
[116.39692688 137.33229065]
[119.79990387 151.94119263]
[126.25197601 138.39973450]
[138.53182983 129.78550720]
[153.46087646 128.32824707]
[167.17477417 134.40518188]
[176.12371826 146.44329834]
[177.99130249 161.32658386]
[172.29411316 175.20252991]
[160.50685120 184.47940063]
[145.68060303 186.75590515]
[131.65310669 181.44277954]
[122.05538177 169.91539001]
[122.36743927 184.91213989]
[122.67949677 199.90890503]
[122.99155426 214.90565491]
[123.30360413 229.90240479]
[123.61566162 244.89915466]
[123.92771912 259.89590454]
[124.23977661 274.89266968]
[124.55183411 289.88943481]
[127.14282990 309.09713745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 130]
[11 129]
[12 128]
[14 60]
[15 59]
[16 58]
[17 57]
[21 53]
[22 52]
[23 51]
[24 50]
[27 47]
[28 46]
[29 45]
[30 41]
[31 40]
[32 39]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
