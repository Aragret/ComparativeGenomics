%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:36:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUxxxxxxxxxxCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-12.65704155 212.71737671]
[-23.74835587 222.81602478]
[-34.83967209 232.91467285]
[-45.93098831 243.01332092]
[-57.02230453 253.11196899]
[-62.01735306 268.12396240]
[-76.63725281 270.97140503]
[-87.62291718 281.18487549]
[-98.50173950 291.51208496]
[-108.71522522 302.49774170]
[-118.22357941 314.09909058]
[-127.73194122 325.70043945]
[-137.24029541 337.30175781]
[-135.43176270 353.00222778]
[-145.32015991 365.33087158]
[-161.03887939 366.97329712]
[-173.26226807 356.95510864]
[-174.73843384 341.21990967]
[-164.59156799 329.10311890]
[-148.84164429 327.79342651]
[-139.33328247 316.19207764]
[-129.82492065 304.59072876]
[-120.31656647 292.98937988]
[-135.31652832 292.95858765]
[-146.03686523 282.46694946]
[-146.39105225 267.47113037]
[-136.17799377 256.48507690]
[-121.19620514 255.74615479]
[-109.95165253 265.67388916]
[-108.82894897 280.63327026]
[-97.95011902 270.30606079]
[-95.24687958 263.37509155]
[-86.73590088 259.88009644]
[-82.53417206 245.59040833]
[-67.12094879 242.02066040]
[-56.02963638 231.92201233]
[-44.93832016 221.82336426]
[-33.84700775 211.72471619]
[-22.75569153 201.62606812]
[-34.71547318 185.13845825]
[-44.47456741 167.26005554]
[-51.87355804 148.28289795]
[-56.79156876 128.51701355]
[-59.14826584 108.28527069]
[-58.90514755 87.91818237]
[-56.06618500 67.74846649]
[-50.67775726 48.10559845]
[-42.82788849 29.31046867]
[-32.64481354 11.67010880]
[-44.72480011 2.77775908]
[-60.73792648 3.75724983]
[-71.38034821 -8.24767971]
[-68.48812103 -24.02787399]
[-54.27990341 -31.47812080]
[-39.65502930 -24.88322449]
[-35.83245087 -9.30222893]
[-23.75246239 -0.40987951]
[-16.73849106 -8.48474884]
[-9.19867325 -16.07095146]
[-1.16697240 -23.13431549]
[7.32043219 -29.64302444]
[16.22530937 -35.56776047]
[25.50754738 -40.88183212]
[35.12533569 -45.56130600]
[45.03535080 -49.58510208]
[55.19295120 -52.93509674]
[65.55238342 -55.59619904]
[76.06698608 -57.55642319]
[86.68939209 -58.80693817]
[97.37175751 -59.34210968]
[108.06596375 -59.15953064]
[118.72383118 -58.26002121]
[129.29736328 -56.64763260]
[139.73892212 -54.32962799]
[150.00148010 -51.31645203]
[160.03880310 -47.62166977]
[169.80569458 -43.26193237]
[179.25813293 -38.25687790]
[188.35356140 -32.62904739]
[197.05101013 -26.40378952]
[205.31127930 -19.60915184]
[213.09719849 -12.27573681]
[220.37365723 -4.43657827]
[227.10789490 3.87301183]
[233.26959229 12.61560345]
[238.83096313 21.75181580]
[243.76698303 31.24049568]
[248.05540466 41.03890228]
[251.67692566 51.10289383]
[254.61520386 61.38714600]
[269.32318115 58.44166183]
[284.03112793 55.49617767]
[298.73910522 52.55069733]
[313.44705200 49.60521317]
[327.57186890 44.55645752]
[340.81445312 37.51132202]
[354.05703735 30.46618843]
[367.29962158 23.42105293]
[380.54220581 16.37591934]
[388.76556396 2.18759203]
[405.16198730 2.48563123]
[412.86425781 16.96343803]
[403.94894409 30.72748756]
[387.58734131 29.61850357]
[374.34475708 36.66363907]
[361.10217285 43.70877457]
[347.85958862 50.75391006]
[334.61700439 57.79904556]
[338.01995850 72.40793610]
[353.01266479 72.87597656]
[363.29760742 61.09658051]
[378.75585938 58.73514938]
[392.08853149 66.90668488]
[397.00033569 81.75283813]
[391.17205811 96.26371002]
[377.35565186 103.58770752]
[362.07479858 100.26666260]
[352.54461670 87.86867523]
[337.55194092 87.40063477]
[328.03179932 83.90926361]
[321.12072754 78.11435699]
[317.24478149 71.18424988]
[316.39254761 64.31317902]
[301.68457031 67.25865936]
[286.97662354 70.20413971]
[272.26864624 73.14962006]
[257.56069946 76.09510803]
[259.16213989 91.98571777]
[259.16503906 107.95681763]
[257.56930542 123.84800720]
[254.39103699 139.49967957]
[249.66210938 154.75462341]
[243.43003845 169.45964050]
[235.75740051 183.46702576]
[226.72126770 196.63609314]
[216.41239929 208.83459473]
[204.93432617 219.94000244]
[192.40232849 229.84075928]
[178.94229126 238.43746948]
[164.68937683 245.64375305]
[149.78674316 251.38723755]
[134.38406372 255.61026001]
[118.63605499 258.27038574]
[102.70086670 259.34088135]
[86.73855591 258.81106567]
[70.90943909 256.68615723]
[55.37249374 252.98757935]
[40.28377151 247.75245667]
[25.79481506 241.03335571]
[12.05114937 232.89776611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[7 33]
[8 31]
[9 30]
[10 23]
[11 22]
[12 21]
[13 20]
[49 57]
[50 56]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
