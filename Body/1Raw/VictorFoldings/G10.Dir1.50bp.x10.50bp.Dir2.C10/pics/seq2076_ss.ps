%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAAGGACUAACCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGxxxxxxxxxxAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 249.81301880]
[92.50000000 234.81301880]
[92.50000000 219.81301880]
[92.50000000 204.81301880]
[92.50000000 189.81301880]
[92.50000000 174.81301880]
[92.50000000 159.81301880]
[92.50000000 144.81301880]
[92.50000000 129.81301880]
[92.50000000 114.81301880]
[85.57839203 111.92488098]
[71.73517609 106.14861298]
[64.81356812 103.26047516]
[54.15193939 113.81176758]
[43.49031067 124.36305237]
[44.95240784 139.93212891]
[36.02234268 152.76910400]
[20.91661644 156.81275940]
[6.76769161 150.15377808]
[0.25625917 135.93634033]
[4.45681810 120.87350464]
[17.38599205 112.07745361]
[32.93902206 113.70143127]
[43.60064697 103.15013885]
[54.26227570 92.59884644]
[58.86783981 78.32338715]
[56.38272095 63.53068161]
[44.33312225 49.64590454]
[51.02694702 33.45353699]
[48.23461914 18.71573257]
[37.68333054 8.05410671]
[22.97536850 5.10862398]
[8.26740742 2.16314173]
[-6.44055414 -0.78234082]
[-21.14851570 -3.72782326]
[-34.20420074 4.76845980]
[-49.07820511 1.57180107]
[-57.09765625 -10.92715931]
[-71.80561829 -13.87264252]
[-86.51358032 -16.81812477]
[-101.86754608 -11.05725193]
[-114.36000061 -21.68131065]
[-111.13977814 -37.76118088]
[-95.51956177 -42.75526810]
[-83.56809998 -31.52608681]
[-68.86013794 -28.58060455]
[-54.15217209 -25.63512039]
[-41.93801498 -34.08200836]
[-26.98009109 -31.30439186]
[-18.20303345 -18.43578529]
[-3.49507165 -15.49030209]
[11.21288967 -12.54481983]
[25.92085075 -9.59933758]
[40.62881470 -6.65385485]
[27.96732521 -14.69666100]
[25.36549950 -29.46928787]
[34.51726532 -41.35395050]
[49.46432495 -42.61307907]
[60.47532654 -32.42691803]
[60.38168716 -17.42761803]
[65.86872101 -31.38800812]
[71.35575104 -45.34839630]
[76.84278107 -59.30878830]
[82.32981110 -73.26918030]
[87.81684113 -87.22956848]
[93.30387878 -101.18995667]
[98.79090881 -115.15034485]
[87.08328247 -123.06417847]
[77.30023193 -133.25288391]
[69.87500000 -145.26141357]
[65.13561249 -158.55419922]
[63.29039383 -172.53904724]
[64.41877747 -186.59353638]
[68.46791840 -200.09271240]
[75.25515747 -212.43684387]
[84.47625732 -223.07815552]
[95.71901703 -231.54499817]
[108.48174286 -237.46289062]
[122.19560242 -240.57101440]
[136.24998474 -240.73370361]
[150.01968384 -237.94636536]
[156.08268738 -251.66642761]
[162.14570618 -265.38647461]
[159.84928894 -281.62405396]
[172.92823792 -291.51712036]
[187.92805481 -284.88858032]
[189.41821289 -268.55728149]
[175.86576843 -259.32345581]
[169.80274963 -245.60340881]
[163.73973083 -231.88336182]
[176.44760132 -222.29147339]
[186.52168274 -209.95150757]
[193.38337708 -195.56590271]
[196.63713074 -179.95472717]
[196.09315491 -164.00895691]
[191.77857971 -148.63964844]
[183.93601990 -134.72587585]
[173.01004028 -123.06441498]
[159.62187195 -114.32416534]
[144.53416443 -109.00775146]
[128.60749817 -107.42263031]
[112.75129700 -109.66331482]
[107.26426697 -95.70292664]
[101.77723694 -81.74253845]
[96.29019928 -67.78214264]
[90.80316925 -53.82175446]
[85.31613922 -39.86136627]
[79.82910919 -25.90097618]
[74.34207916 -11.94058704]
[75.29650116 -0.43236816]
[70.97863770 9.56138039]
[62.97242737 15.92340851]
[65.76474762 30.66121483]
[75.60733032 37.76269150]
[78.02436829 50.06622314]
[71.17543030 61.04556274]
[73.66054535 75.83827209]
[139.37802124 85.30899811]
[152.90222168 91.79716492]
[166.42640686 98.28532410]
[179.95059204 104.77349091]
[193.47477722 111.26165771]
[210.37084961 112.66133118]
[213.70318604 129.28456116]
[198.65206909 137.08842468]
[186.98661804 124.78585052]
[173.46243286 118.29768372]
[159.93823242 111.80951691]
[146.41404724 105.32135010]
[132.88986206 98.83318329]
[126.54239655 102.82814789]
[135.30039978 115.00588989]
[144.05839539 127.18363190]
[156.61117554 135.39506531]
[156.47952271 150.39448547]
[143.78453064 158.38432312]
[130.20401001 152.01492310]
[128.23022461 137.14553833]
[121.03884888 123.98179626]
[113.84746552 110.81806183]
[107.50000000 114.81301880]
[107.50000000 129.81301880]
[107.50000000 144.81301880]
[107.50000000 159.81301880]
[107.50000000 174.81301880]
[107.50000000 189.81301880]
[107.50000000 204.81301880]
[107.50000000 219.81301880]
[107.50000000 234.81301880]
[107.50000000 249.81301880]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 25]
[14 24]
[15 23]
[26 117]
[27 116]
[29 113]
[30 112]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[38 47]
[39 46]
[40 45]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[81 90]
[82 89]
[83 88]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
