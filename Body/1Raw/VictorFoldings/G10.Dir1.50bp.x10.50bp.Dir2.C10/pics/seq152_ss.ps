%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 282.27117920]
[92.50000000 267.27117920]
[92.50000000 252.27119446]
[92.50000000 237.27119446]
[92.50000000 222.27119446]
[92.50000000 207.27119446]
[92.50000000 192.27119446]
[92.50000000 177.27119446]
[92.50000000 162.27119446]
[92.50000000 147.27119446]
[84.29903412 146.87643433]
[76.03629303 145.03019714]
[67.97254944 141.70405579]
[57.53273773 152.47486877]
[47.09292603 163.24568176]
[36.65311050 174.01649475]
[33.18332291 190.04435730]
[17.48736763 194.79504395]
[5.71189594 183.38143921]
[9.97050571 167.54489136]
[25.88230324 163.57667542]
[36.32211685 152.80586243]
[46.76192856 142.03506470]
[57.20174026 131.26425171]
[50.15660477 118.02166748]
[35.39054871 120.66053009]
[20.62449455 123.29939270]
[5.85843945 125.93825531]
[-8.90761566 128.57711792]
[-23.67367172 131.21598816]
[-38.43972778 133.85484314]
[-50.62221527 144.83296204]
[-66.13515472 139.51499939]
[-69.02016449 123.37162018]
[-56.30939102 113.00975037]
[-41.07859039 119.08879089]
[-26.31253624 116.44992828]
[-11.54648018 113.81106567]
[3.21957517 111.17220306]
[17.98563004 108.53334045]
[32.75168610 105.89447021]
[47.51774216 103.25560760]
[53.42608261 78.24832153]
[70.20965576 59.56653214]
[93.34590912 51.41087341]
[116.98534393 55.25278091]
[124.44025421 42.23646927]
[131.89517212 29.22015953]
[139.35008240 16.20385170]
[146.80499268 3.18754148]
[134.43249512 -5.30800581]
[122.79364777 -14.78376484]
[111.96589661 -25.17667389]
[102.02130127 -36.41757202]
[93.02603149 -48.43164444]
[85.03996277 -61.13894653]
[78.11624146 -74.45491028]
[72.30094147 -88.29091644]
[67.63275909 -102.55488586]
[64.14276886 -117.15190125]
[61.85418701 -131.98480225]
[60.78224945 -146.95491028]
[60.93409348 -161.96255493]
[62.30870056 -176.90789795]
[64.89692688 -191.69146729]
[68.68154907 -206.21487427]
[73.63738251 -220.38148499]
[79.73143768 -234.09698486]
[86.92316437 -247.27014160]
[95.16470337 -259.81326294]
[104.40121460 -271.64288330]
[114.57121277 -282.68026733]
[125.60703278 -292.85195923]
[137.43522644 -302.09030151]
[149.97706604 -310.33377075]
[163.14910889 -317.52752686]
[176.86367798 -323.62368774]
[191.02951050 -328.58169556]
[205.55233765 -332.36856079]
[220.33551025 -334.95907593]
[235.28063965 -336.33599854]
[250.28826904 -336.49014282]
[265.25854492 -335.42050171]
[280.09179688 -333.13421631]
[294.68933105 -329.64648438]
[308.95404053 -324.98049927]
[322.79092407 -319.16732788]
[336.10797119 -312.24566650]
[348.81649780 -304.26153564]
[360.83197021 -295.26812744]
[372.07440186 -285.32525635]
[382.46896362 -274.49911499]
[391.94653320 -262.86172485]
[400.44396973 -250.49055481]
[407.90478516 -237.46791077]
[414.27929688 -223.88047791]
[419.52508545 -209.81866455]
[423.60723877 -195.37605286]
[426.49859619 -180.64877319]
[428.17990112 -165.73481750]
[428.63998413 -150.73344421]
[427.87579346 -135.74449158]
[425.89236450 -120.86770630]
[422.70297241 -106.20207977]
[418.32876587 -91.84523010]
[412.79888916 -77.89269257]
[406.15017700 -64.43731689]
[398.42681885 -51.56864929]
[389.68023682 -39.37233353]
[379.96862793 -27.92953300]
[369.35665894 -17.31639862]
[357.91488647 -7.60356236]
[345.71954346 1.14433992]
[332.85168457 8.86909103]
[319.39703369 15.51928329]
[305.44509888 21.05065918]
[291.08871460 25.42640877]
[276.42346191 28.61741257]
[261.54687500 30.60243416]
[246.55799866 31.36826134]
[231.55657959 30.90979958]
[216.64244080 29.23009872]
[201.91485596 26.34033775]
[187.47180176 22.25974846]
[173.40942383 17.01548576]
[159.82128906 10.64245129]
[152.36637878 23.65876198]
[144.91146851 36.67507172]
[137.45655823 49.69137955]
[130.00164795 62.70769119]
[137.10762024 69.77020264]
[142.58767700 78.15724945]
[146.20172119 87.50135803]
[147.79141235 97.39309692]
[147.28709412 107.39906311]
[144.71086121 117.08083344]
[140.17558289 126.01419830]
[133.87997437 133.80772400]
[126.09990692 140.11994934]
[117.17624664 144.67428589]
[107.50000000 147.27119446]
[107.50000000 162.27119446]
[107.50000000 177.27119446]
[107.50000000 192.27119446]
[107.50000000 207.27119446]
[107.50000000 222.27119446]
[107.50000000 237.27119446]
[107.50000000 252.27119446]
[107.50000000 267.27117920]
[107.50000000 282.27117920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[13 24]
[14 23]
[15 22]
[16 21]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[46 130]
[47 129]
[48 128]
[49 127]
[50 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
