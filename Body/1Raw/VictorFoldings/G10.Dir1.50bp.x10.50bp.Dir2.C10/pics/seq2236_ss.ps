%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACxxxxxxxxxxGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[78.39443207 480.95700073]
[78.39443207 465.95700073]
[78.39443207 450.95700073]
[78.39443207 435.95700073]
[78.39443207 420.95700073]
[78.39443207 405.95700073]
[78.39443207 390.95700073]
[78.39443207 375.95700073]
[78.39443207 360.95700073]
[78.39443207 345.95700073]
[63.66461945 343.22332764]
[49.68424606 337.82806396]
[36.92996597 329.95358276]
[25.83691978 319.86679077]
[16.78388977 307.91015625]
[10.08036232 294.48999023]
[5.95595026 280.06268311]
[4.55252743 265.11920166]
[5.91934919 250.16831970]
[10.01132584 235.71934509]
[16.69050598 222.26478577]
[25.73073196 210.26350403]
[36.82529068 200.12510681]
[49.59732819 192.19595337]
[63.61263657 186.74734497]
[78.39443207 183.96618652]
[78.39443207 168.96618652]
[69.37841034 180.95416260]
[55.87957764 187.49491882]
[40.88373566 187.14169312]
[27.70783424 179.97261047]
[19.26625824 167.57342529]
[17.42620659 152.68672180]
[22.59468269 138.60528564]
[33.62846756 128.44380188]
[48.08698654 124.44991302]
[62.77215195 127.50701904]
[74.43574524 136.93891907]
[80.49822235 150.66131592]
[83.90120697 136.05241394]
[87.30418396 121.44352722]
[71.26354218 102.31412506]
[79.02764893 74.86042786]
[67.93633270 64.76177979]
[56.84502029 54.66313171]
[45.75370407 44.56448364]
[34.66239166 34.46583176]
[23.57107544 24.36718369]
[12.47975922 14.26853371]
[1.38844383 4.16988420]
[-9.70287132 -5.92876530]
[-20.79418755 -16.02741432]
[-36.56744766 -15.03759193]
[-48.36531448 -25.55357742]
[-49.18831635 -41.33642197]
[-38.54818344 -53.02244568]
[-22.75751877 -53.67853928]
[-11.18464279 -42.91544724]
[-10.69553757 -27.11873055]
[0.39577803 -17.02008057]
[11.48709297 -6.92143106]
[22.57840919 3.17721844]
[33.66972351 13.27586842]
[44.76103973 23.37451744]
[55.85235596 33.47316742]
[66.94367218 43.57181549]
[78.03498840 53.67046738]
[89.12630463 63.76911545]
[84.23430634 49.58925629]
[79.34231567 35.40939713]
[71.14256287 22.84897804]
[69.66796875 7.92163563]
[75.25164795 -6.00038004]
[86.63219452 -15.77193260]
[101.23860931 -19.18552208]
[115.77114868 -15.46997929]
[126.94675446 -5.46468878]
[132.24073792 8.57004642]
[130.45712280 23.46362686]
[121.99694061 35.85313416]
[116.81101227 49.92815399]
[111.62508392 64.00317383]
[122.92408752 54.13744736]
[134.22309875 44.27172470]
[145.52209473 34.40600204]
[156.82110596 24.54027748]
[142.35414124 20.57709312]
[136.23736572 6.88092279]
[142.94165039 -6.53744173]
[157.56671143 -9.87026119]
[169.42280579 -0.68151408]
[169.84434509 14.31196594]
[182.10671997 5.67284966]
[194.36907959 -2.96626663]
[206.63145447 -11.60538292]
[218.89382935 -20.24449921]
[225.28662109 -35.34629059]
[241.59259033 -37.09204865]
[251.03753662 -23.68589020]
[243.90530396 -8.91891956]
[227.53294373 -7.98213053]
[215.27056885 0.65698552]
[203.00820923 9.29610157]
[190.74583435 17.93521690]
[178.48345947 26.57433319]
[166.68682861 35.83928299]
[155.38781738 45.70500565]
[144.08882141 55.57072830]
[132.78981018 65.43645477]
[121.49080658 75.30217743]
[124.82460022 85.34127045]
[124.36172485 94.75453186]
[139.29603577 96.15682983]
[153.96879578 88.83276367]
[167.49691772 98.10219574]
[165.96380615 114.42951965]
[150.94660950 121.01859283]
[137.89372253 111.09114075]
[122.95941925 109.68883514]
[114.56362152 120.22151184]
[101.91307068 124.84650421]
[98.51009369 139.45539856]
[95.10711670 154.06428528]
[93.39443207 168.96618652]
[93.39443207 183.96618652]
[108.17622375 186.74734497]
[122.19152832 192.19595337]
[134.96356201 200.12510681]
[146.05812073 210.26350403]
[155.09834290 222.26478577]
[161.77752686 235.71934509]
[165.86950684 250.16831970]
[167.23632812 265.11920166]
[165.83290100 280.06268311]
[161.70849609 294.48999023]
[155.00497437 307.91015625]
[145.95193481 319.86679077]
[134.85888672 329.95358276]
[122.10461426 337.82806396]
[108.12423706 343.22332764]
[93.39443207 345.95700073]
[93.39443207 360.95700073]
[93.39443207 375.95700073]
[93.39443207 390.95700073]
[93.39443207 405.95700073]
[93.39443207 420.95700073]
[93.39443207 435.95700073]
[93.39443207 450.95700073]
[93.39443207 465.95700073]
[93.39443207 480.95700073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[26 125]
[27 124]
[39 123]
[40 122]
[41 121]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[82 110]
[83 109]
[84 108]
[85 107]
[86 106]
[92 105]
[93 104]
[94 103]
[95 102]
[96 101]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
