%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAAxxxxxxxxxxAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[-20.13260841 197.74522400]
[-32.21259689 206.63757324]
[-44.29258347 215.52992249]
[-56.37257385 224.42227173]
[-68.35940552 233.43980408]
[-80.25178528 242.58154297]
[-92.14416504 251.72326660]
[-104.03654480 260.86499023]
[-115.92892456 270.00674438]
[-127.82130432 279.14846802]
[-128.02685547 292.65460205]
[-135.87612915 303.40713501]
[-148.30773926 307.59393311]
[-160.68894958 303.89221191]
[-172.76893616 312.78457642]
[-184.84892273 321.67691040]
[-181.97927856 336.66784668]
[-185.90644836 351.41708374]
[-195.85067749 362.99615479]
[-209.83753967 369.10604858]
[-225.08992004 368.53359985]
[-238.57945251 361.39251709]
[-247.62777710 349.10061646]
[-250.43835449 334.09851074]
[-246.45314026 319.36486816]
[-236.46339417 307.82501221]
[-222.45257568 301.77026367]
[-207.20257568 302.40277100]
[-193.74127197 309.59692383]
[-181.66128540 300.70455933]
[-169.58129883 291.81222534]
[-167.78916931 275.11953735]
[-154.23101807 264.65719604]
[-136.96304321 267.25610352]
[-125.07065582 258.11434937]
[-113.17827606 248.97262573]
[-101.28589630 239.83088684]
[-89.39351654 230.68916321]
[-77.50113678 221.54742432]
[-74.09280396 214.93463135]
[-65.26492310 212.34228516]
[-53.18493271 203.44993591]
[-41.10494614 194.55758667]
[-29.02495766 185.66523743]
[-41.32640839 163.34680176]
[-49.80134583 139.31321716]
[-54.22029877 114.21519470]
[-54.46362305 88.73228455]
[-50.52473068 63.55445862]
[-42.51027298 39.36342239]
[-30.63724136 16.81416321]
[-15.22711086 -3.48277664]
[-25.88873672 -14.03406715]
[-36.55036163 -24.58535767]
[-52.54127121 -28.22168541]
[-57.12841797 -43.96621323]
[-45.59294128 -55.62231827]
[-29.80154991 -51.19919968]
[-25.99907303 -35.24698257]
[-15.33744621 -24.69569397]
[-4.67582035 -14.14440250]
[3.45409417 -21.09855652]
[12.04470444 -27.47485352]
[21.05501747 -33.24286652]
[30.44203949 -38.37507629]
[40.16097641 -42.84699249]
[50.16545105 -46.63727188]
[60.40772629 -49.72783279]
[70.83892822 -52.10392380]
[81.40927887 -53.75421143]
[92.06833649 -54.67081451]
[102.76524353 -54.84936523]
[113.44895935 -54.28900528]
[124.06849670 -52.99241638]
[134.57319641 -50.96577835]
[144.91290283 -48.21876907]
[155.03829956 -44.76448822]
[164.90107727 -40.61942673]
[174.45414734 -35.80335999]
[183.65194702 -30.33926773]
[192.45057678 -24.25322533]
[200.80804443 -17.57427597]
[208.68447876 -10.33428764]
[216.04231262 -2.56780767]
[222.84640503 5.68810272]
[229.06430054 14.39404869]
[234.66633606 23.50848770]
[248.05261230 16.74037170]
[261.43890381 9.97225761]
[274.82519531 3.20414281]
[288.21145630 -3.56397200]
[297.03588867 -16.69562912]
[311.88507080 -15.53335762]
[325.27136230 -22.30147171]
[338.65762329 -29.06958771]
[341.37380981 -42.30136490]
[351.08752441 -51.40475464]
[364.08123779 -53.20417786]
[375.55691528 -47.26234055]
[389.08111572 -53.75050735]
[397.88757324 -67.58447266]
[414.25741577 -66.60462189]
[421.35076904 -51.81894684]
[411.87060547 -38.43767548]
[395.56927490 -40.22631454]
[382.04510498 -33.73815155]
[377.17687988 -17.67084503]
[361.90808105 -9.91530132]
[345.42575073 -15.68330288]
[332.03945923 -8.91518784]
[318.65316772 -2.14707279]
[310.78625488 10.50048351]
[294.97958374 9.82231331]
[281.59329224 16.59042740]
[268.20700073 23.35854340]
[254.82072449 30.12665749]
[241.43444824 36.89477158]
[246.14015198 48.72593307]
[249.85809326 60.90365219]
[252.56315613 73.34561920]
[254.23704529 85.96774292]
[254.86846924 98.68471527]
[254.45314026 111.41056824]
[252.99386597 124.05930328]
[250.50051880 136.54542542]
[246.98992920 148.78453064]
[242.48587036 160.69390869]
[237.01873779 172.19305420]
[230.62550354 183.20426941]
[223.34938049 193.65309143]
[215.23954773 203.46891785]
[206.35081482 212.58541870]
[196.74327087 220.94094849]
[186.48182678 228.47904968]
[175.63587952 235.14875793]
[164.27868652 240.90501404]
[152.48706055 245.70889282]
[140.34066772 249.52793884]
[127.92160797 252.33631897]
[115.31383514 254.11508179]
[102.60255432 254.85218811]
[89.87368774 254.54264832]
[77.21325684 253.18856812]
[64.70684814 250.79908752]
[52.43897629 247.39036560]
[40.49257278 242.98544312]
[28.94837379 237.61408997]
[17.88441086 231.31260681]
[7.37546206 224.12359619]
[-2.50744224 216.09564209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[14 31]
[15 30]
[16 29]
[52 61]
[53 60]
[54 59]
[87 117]
[88 116]
[89 115]
[90 114]
[91 113]
[93 111]
[94 110]
[95 109]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
