%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACxxxxxxxxxxCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCAAGCCUACGUCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[128.26020813 341.22134399]
[128.26020813 326.22134399]
[128.26020813 311.22134399]
[128.26020813 296.22134399]
[128.26020813 281.22134399]
[128.26020813 266.22134399]
[128.26020813 251.22134399]
[128.26020813 236.22134399]
[128.26020813 221.22134399]
[128.26020813 206.22134399]
[125.92910767 191.40359497]
[121.32354736 177.12812805]
[116.71797943 162.85266113]
[113.69664764 160.91900635]
[111.48831177 157.39410400]
[110.84502411 152.68894958]
[112.30061340 147.54104614]
[108.59445190 133.00611877]
[104.88829803 118.47117615]
[91.43232727 111.84267426]
[77.64994812 117.76264191]
[63.86756516 123.68260193]
[50.08518600 129.60256958]
[47.64513016 144.83573914]
[37.33973312 156.31626892]
[22.45740891 160.38073730]
[7.74705029 155.73219299]
[-2.09731960 143.85398865]
[-3.93439770 128.53639221]
[2.82202077 114.66720581]
[16.01598740 106.67203522]
[31.43735504 107.10210419]
[44.16522217 115.82018280]
[57.94760132 109.90022278]
[71.72998810 103.98026276]
[85.51236725 98.06029510]
[70.93045807 101.57710266]
[56.31916428 98.18444824]
[44.77878571 88.60218811]
[38.75800705 74.86354828]
[39.53435898 59.88365173]
[46.94309998 46.84101105]
[59.41221237 38.50307083]
[74.29593658 36.63902283]
[88.43618011 41.64438629]
[98.83258057 52.45709991]
[103.27919769 66.78286743]
[100.83258820 81.58180237]
[105.73413849 67.40524292]
[110.63568878 53.22868347]
[115.53723907 39.05212402]
[120.43878937 24.87556648]
[106.79958344 18.60349464]
[93.84083557 11.02473164]
[81.68734741 2.21226835]
[70.45616913 -7.74902487]
[60.25545883 -18.76321220]
[51.18346405 -30.72422028]
[43.32754898 -43.51685333]
[36.76338196 -57.01790619]
[31.55417252 -71.09735870]
[27.75009346 -85.61960602]
[25.38778114 -100.44480133]
[24.48998451 -115.43015289]
[25.06535149 -130.43133545]
[27.10833931 -145.30389404]
[30.59927368 -159.90458679]
[35.50453568 -174.09280396]
[41.77687836 -187.73187256]
[49.35589981 -200.69047546]
[58.16860962 -212.84378052]
[68.13012695 -224.07476807]
[79.14451599 -234.27525330]
[91.10570526 -243.34701538]
[103.89849854 -251.20266724]
[117.39968109 -257.76657104]
[131.47923279 -262.97549438]
[146.00155640 -266.77929688]
[160.82679749 -269.14129639]
[175.81216431 -270.03878784]
[190.81335449 -269.46313477]
[205.68586731 -267.41983032]
[220.28648376 -263.92861938]
[234.47459412 -259.02307129]
[248.11355591 -252.75045776]
[261.07199097 -245.17117310]
[273.22512817 -236.35823059]
[284.45590210 -226.39648438]
[294.65618896 -215.38188171]
[303.72769165 -203.42051697]
[311.58309937 -190.62756348]
[318.14672852 -177.12625122]
[323.35537720 -163.04660034]
[327.15887451 -148.52418518]
[329.52059937 -133.69889832]
[330.41778564 -118.71351624]
[329.84182739 -103.71234894]
[327.79824829 -88.83987427]
[324.30673218 -74.23931885]
[319.40087891 -60.05131149]
[313.12799072 -46.41248322]
[305.54846191 -33.45418930]
[296.73526001 -21.30123138]
[286.77331543 -10.07064724]
[275.75851440 0.12940104]
[263.79696655 9.20067883]
[251.00384521 17.05582237]
[237.50239563 23.61918259]
[223.42263794 28.82754517]
[208.90016174 32.63075256]
[194.07482910 34.99217606]
[179.08941650 35.88907623]
[164.08825684 35.31280899]
[149.21583557 33.26892853]
[134.61534119 29.77711678]
[129.71379089 43.95367432]
[124.81224823 58.13023376]
[119.91069794 72.30679321]
[115.00914001 86.48335266]
[119.42323303 114.76501465]
[123.12939453 129.29995728]
[126.83555603 143.83488464]
[130.99343872 158.24710083]
[135.59899902 172.52256775]
[140.20457458 186.79801941]
[144.12112427 172.31835938]
[152.92213440 160.17166138]
[165.46148682 151.93974304]
[180.10624695 148.69459534]
[194.94929504 150.85882568]
[208.05770874 158.15060425]
[217.72441101 169.62033081]
[222.69056702 183.77438354]
[222.30947876 198.76954651]
[216.63073730 212.65306091]
[206.39389038 223.61694336]
[192.93202209 230.23344421]
[177.99819946 231.64089966]
[163.53718567 227.65603638]
[151.43217468 218.79779053]
[143.26020813 206.22134399]
[143.26020813 221.22134399]
[143.26020813 236.22134399]
[143.26020813 251.22134399]
[143.26020813 266.22134399]
[143.26020813 281.22134399]
[143.26020813 296.22134399]
[143.26020813 311.22134399]
[143.26020813 326.22134399]
[143.26020813 341.22134399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 125]
[12 124]
[13 123]
[17 122]
[18 121]
[19 120]
[20 36]
[21 35]
[22 34]
[23 33]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
