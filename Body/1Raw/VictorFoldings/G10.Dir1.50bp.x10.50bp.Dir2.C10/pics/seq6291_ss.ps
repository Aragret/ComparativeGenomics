%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCxxxxxxxxxxUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 405.30920410]
[92.50000000 390.30920410]
[92.50000000 375.30920410]
[92.50000000 360.30920410]
[92.50000000 345.30920410]
[92.50000000 330.30920410]
[92.50000000 315.30920410]
[92.50000000 300.30920410]
[92.50000000 285.30920410]
[92.50000000 270.30920410]
[78.03514099 266.47290039]
[65.04627991 259.01727295]
[54.42181396 248.44535828]
[46.89020538 235.47357178]
[42.97005844 220.98312378]
[42.93439102 205.96022034]
[46.79164505 191.42890930]
[54.28468323 178.38125610]
[64.90794373 167.70970154]
[77.94152832 160.14588928]
[92.50000000 156.21064758]
[92.50000000 141.21064758]
[83.05895996 139.25053406]
[74.13318634 135.11459351]
[66.22637177 128.93930054]
[59.80587387 120.97797394]
[55.27552032 111.59120178]
[52.95107269 101.23072815]
[37.99082184 100.13941956]
[23.03057480 99.04811096]
[8.07032585 97.95680237]
[-6.88992262 96.86548615]
[-21.85017204 95.77417755]
[-32.14113998 103.61954498]
[-44.61674881 102.36331177]
[-52.60727692 93.22773743]
[-67.54158783 91.82543182]
[-80.76408386 100.91085815]
[-96.06886292 96.10011292]
[-101.71540833 81.08358765]
[-93.37216187 67.38066864]
[-77.43936157 65.50307465]
[-66.13928223 76.89112854]
[-51.20497513 78.29342651]
[-35.70930862 70.11514282]
[-20.75885963 80.81392670]
[-5.79861164 81.90524292]
[9.16163731 82.99655151]
[24.12188530 84.08786011]
[39.08213425 85.17916870]
[54.04238129 86.27048492]
[60.53054810 72.74629211]
[50.31707001 61.76062775]
[40.10358810 50.77496338]
[29.89010811 39.78929901]
[14.06430721 35.49092102]
[10.13607883 19.56920242]
[22.14644814 8.40304565]
[37.74017715 13.47923279]
[40.87577438 29.57581902]
[51.08925247 40.56148148]
[61.30273438 51.54714584]
[71.51621246 62.53281403]
[88.21684265 54.80138016]
[106.46721649 54.09980392]
[106.15515900 39.10305023]
[105.84310150 24.10629654]
[91.56925964 18.94665337]
[80.12574768 8.97617531]
[73.06020355 -4.45671463]
[71.32818604 -19.53532600]
[75.16393280 -34.22040176]
[84.04869843 -46.52590942]
[96.78088379 -54.78762436]
[111.63856506 -57.88821793]
[126.61236572 -55.40836334]
[139.67720032 -47.68344116]
[149.06616211 -35.75817871]
[153.50947571 -21.24537659]
[152.40620422 -6.10776615]
[145.90556335 7.60741186]
[134.88670349 18.04529381]
[120.83985901 23.79424095]
[121.15191650 38.79099274]
[121.46396637 53.78774643]
[133.98992920 62.04003525]
[147.89248657 56.40808105]
[161.79504395 50.77612305]
[153.42396545 40.61867523]
[151.27906799 25.11239243]
[157.73977661 7.66681814]
[168.83110046 -2.43183136]
[179.92240906 -12.53048134]
[184.38519287 -28.31071281]
[200.34690857 -32.07310486]
[211.38752747 -19.94722939]
[206.14939880 -4.40714884]
[190.02105713 -1.43916547]
[178.92974854 8.65948391]
[167.83843994 18.75813293]
[174.04412842 32.41497803]
[180.24925232 46.07061768]
[195.15115356 44.35792542]
[210.05305481 42.64523697]
[215.01332092 28.21060753]
[225.75141907 17.36367416]
[240.13529968 12.25810432]
[255.30902100 13.90761185]
[268.25982666 21.98468399]
[276.41635132 34.88561630]
[278.15908813 50.04891586]
[273.14199829 64.46389771]
[262.36126709 75.26846313]
[247.95741272 80.31734467]
[232.79029846 78.60810089]
[219.87138367 70.48008728]
[211.76574707 57.54713821]
[196.86384583 59.25983047]
[181.96192932 60.97251892]
[167.42700195 64.67868042]
[153.52444458 70.31063843]
[139.62188721 75.94259644]
[144.07098389 87.84842682]
[145.07626343 100.34231567]
[142.65655518 112.46167755]
[137.09092712 123.29892731]
[128.89025879 132.06939697]
[118.75167847 138.16802979]
[107.50000000 141.21064758]
[107.50000000 156.21064758]
[122.05847168 160.14588928]
[135.09205627 167.70970154]
[145.71531677 178.38125610]
[153.20835876 191.42890930]
[157.06561279 205.96022034]
[157.02993774 220.98312378]
[153.10978699 235.47357178]
[145.57818604 248.44535828]
[134.95372009 259.01727295]
[121.96485901 266.47290039]
[107.50000000 270.30920410]
[107.50000000 285.30920410]
[107.50000000 300.30920410]
[107.50000000 315.30920410]
[107.50000000 330.30920410]
[107.50000000 345.30920410]
[107.50000000 360.30920410]
[107.50000000 375.30920410]
[107.50000000 390.30920410]
[107.50000000 405.30920410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 130]
[22 129]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[36 44]
[37 43]
[52 63]
[53 62]
[54 61]
[55 60]
[65 85]
[66 84]
[67 83]
[86 122]
[87 121]
[88 120]
[91 100]
[92 99]
[93 98]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
