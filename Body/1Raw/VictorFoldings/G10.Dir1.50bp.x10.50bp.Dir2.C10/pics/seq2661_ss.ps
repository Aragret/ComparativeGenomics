%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUAxxxxxxxxxxUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.05113983 298.79220581]
[94.73908234 283.79547119]
[94.42702484 268.79870605]
[94.11496735 253.80195618]
[93.80290985 238.80520630]
[93.49085236 223.80845642]
[93.17880249 208.81169128]
[92.86674500 193.81494141]
[92.55468750 178.81819153]
[78.42988586 173.76943970]
[68.68222809 185.17045593]
[58.93457794 196.57147217]
[63.47723389 211.31488037]
[59.30587006 226.16758728]
[47.75155640 236.39018250]
[32.50122833 238.72065735]
[18.42121506 232.41535950]
[10.00439453 219.48629761]
[9.93654442 204.05908203]
[18.23931503 191.05648804]
[32.26332474 184.62757874]
[47.53355789 186.82382202]
[57.28121185 175.42280579]
[67.02886200 164.02177429]
[58.38974762 151.75941467]
[44.37303162 157.10092163]
[36.52644730 171.09416199]
[20.67120743 173.54179382]
[8.97009468 162.56620789]
[10.39920330 146.58692932]
[23.86224174 137.86190796]
[39.03152084 143.08421326]
[53.04823303 137.74270630]
[45.63959503 102.28820801]
[59.71617508 72.85504913]
[85.63198090 59.74362564]
[83.14686584 44.95092010]
[80.66174316 30.15821266]
[78.17662811 15.36550617]
[75.69151306 0.57279867]
[73.20639038 -14.21990871]
[70.72127533 -29.01261520]
[67.01511383 -43.54755020]
[55.19307709 -54.06182861]
[58.34673691 -68.61874390]
[53.44518661 -82.79530334]
[48.54363632 -96.97185516]
[45.04090881 -99.78119659]
[42.87243652 -103.22631073]
[42.07276535 -106.79595947]
[42.50229645 -110.02233124]
[43.87767410 -112.53543091]
[40.17151260 -127.07036591]
[36.46535110 -141.60530090]
[32.75918961 -156.14024353]
[29.05302811 -170.67517090]
[13.99322319 -170.28785706]
[-0.77508616 -173.26187134]
[-14.51112747 -179.44805908]
[-26.52590752 -188.53611755]
[-36.21676636 -200.07019043]
[-43.09762192 -213.47174072]
[-46.82332611 -228.06855774]
[-47.20700455 -243.12844849]
[-44.22940826 -257.89602661]
[-38.03989029 -271.63058472]
[-28.94892120 -283.64315796]
[-17.41249657 -293.33123779]
[-4.00927782 -300.20883179]
[10.58843517 -303.93099976]
[25.64842606 -304.31103516]
[40.41529083 -301.32986450]
[54.14833450 -295.13702393]
[66.15870667 -286.04312134]
[75.84397888 -274.50436401]
[82.71833801 -261.09948730]
[86.43696594 -246.50085449]
[86.81334686 -231.44078064]
[83.82859039 -216.67463684]
[77.63242340 -202.94309998]
[68.53562927 -190.93492126]
[56.99451447 -181.25244141]
[43.58796310 -174.38133240]
[47.29412460 -159.84640503]
[51.00028610 -145.31146240]
[54.70644760 -130.77653503]
[58.41260910 -116.24159241]
[62.72019196 -101.87340546]
[67.62174225 -87.69685364]
[72.52329254 -73.52029419]
[83.99473572 -64.02001953]
[81.19166565 -48.44910431]
[87.32825470 -62.13640594]
[100.25742340 -69.74144745]
[115.20209503 -68.45432281]
[126.64051819 -58.75058365]
[130.34642029 -44.21558380]
[124.95054626 -30.21970749]
[112.44656372 -21.93415642]
[97.45444489 -22.42027473]
[85.51397705 -31.49773407]
[87.99909973 -16.70502663]
[90.48421478 -1.91231990]
[92.96933746 12.88038731]
[95.45445251 27.67309380]
[97.93957520 42.46580124]
[100.42469025 57.25851059]
[116.00466919 57.68214798]
[131.23657227 63.89380264]
[143.94795227 75.65076447]
[152.11546326 91.89379883]
[154.16969299 110.83034515]
[149.25700378 130.12997437]
[137.41769409 147.21118164]
[151.43440247 152.55270386]
[165.45111084 157.89421082]
[179.46783447 163.23573303]
[193.48454285 168.57723999]
[207.50125122 173.91874695]
[221.51795959 179.26026917]
[238.47190857 179.25061035]
[243.17451477 195.53930664]
[228.82418823 204.56729126]
[216.17645264 193.27697754]
[202.15974426 187.93547058]
[188.14303589 182.59394836]
[174.12631226 177.25244141]
[160.10960388 171.91091919]
[146.09289551 166.56941223]
[132.07617188 161.22790527]
[125.94499207 165.54745483]
[135.68495178 176.95504761]
[145.42492676 188.36264038]
[158.02220154 196.50564575]
[158.32148743 211.50267029]
[146.05912781 220.14178467]
[132.03785706 214.81222534]
[128.60998535 200.20913696]
[121.14630890 187.19786072]
[113.68262482 174.18656921]
[107.55143738 178.50613403]
[107.86349487 193.50288391]
[108.17555237 208.49963379]
[108.48760986 223.49639893]
[108.79966736 238.49314880]
[109.11172485 253.48989868]
[109.42377472 268.48666382]
[109.73583221 283.48339844]
[110.04788971 298.48016357]
[112.63888550 317.68789673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 24]
[11 23]
[12 22]
[25 33]
[26 32]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[42 101]
[43 92]
[45 90]
[46 89]
[47 88]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
