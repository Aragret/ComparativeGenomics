%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUAUCxxxxxxxxxxCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 247.47959900]
[92.50000000 232.47959900]
[92.50000000 217.47959900]
[92.50000000 202.47959900]
[92.50000000 187.47959900]
[92.50000000 172.47959900]
[92.50000000 157.47959900]
[92.50000000 142.47959900]
[92.50000000 127.47960663]
[92.50000000 112.47960663]
[84.91009521 99.54154968]
[71.81694031 92.22244263]
[58.72378159 84.90333557]
[50.33007050 97.34568787]
[40.92464447 109.04203033]
[30.57346725 119.91032410]
[19.34915352 129.87432861]
[7.33043242 138.86415100]
[-5.39839125 146.81672668]
[-18.74803352 153.67630005]
[-32.62485123 159.39471436]
[-46.93151474 163.93190002]
[-61.56766129 167.25601196]
[-76.43063354 169.34373474]
[-91.41617584 170.18041992]
[-106.41917419 169.76019287]
[-121.33439636 168.08602905]
[-136.05720520 165.16964722]
[-150.48434448 161.03150940]
[-164.51461792 155.70063782]
[-178.04959106 149.21444702]
[-190.99435425 141.61839294]
[-203.25808716 132.96580505]
[-214.75477600 123.31734467]
[-225.40376282 112.74069214]
[-235.13037109 101.31005096]
[-243.86636353 89.10558319]
[-251.55047607 76.21291351]
[-258.12878418 62.72245789]
[-263.55517578 48.72885513]
[-267.79156494 34.33026123]
[-270.80822754 19.62767029]
[-272.58404541 4.72421169]
[-273.10653687 -10.27557373]
[-272.37200928 -25.26647186]
[-270.38565063 -40.14332962]
[-267.16140747 -54.80179977]
[-262.72186279 -69.13906097]
[-257.09814453 -83.05453491]
[-250.32975769 -96.45063019]
[-242.46412659 -109.23336792]
[-233.55644226 -121.31308746]
[-223.66918945 -132.60507202]
[-212.87170410 -143.03009033]
[-201.23976135 -152.51502991]
[-188.85490417 -160.99336243]
[-175.80404663 -168.40562439]
[-162.17871094 -174.69979858]
[-148.07446289 -179.83175659]
[-133.59025574 -183.76548767]
[-118.82768250 -186.47341919]
[-103.89028168 -187.93652344]
[-88.88284302 -188.14457703]
[-73.91062927 -187.09608459]
[-59.07865906 -184.79843140]
[-44.49097443 -181.26771545]
[-30.24989700 -176.52870178]
[-16.45531654 -170.61463928]
[-3.20399880 -163.56700134]
[9.41110992 -155.43524170]
[21.30152130 -146.27638245]
[32.38383102 -136.15467834]
[42.58030319 -125.14111328]
[51.81941605 -113.31295776]
[60.03636169 -100.75316620]
[67.17350769 -87.54984283]
[73.18078613 -73.79560089]
[78.01605988 -59.58692169]
[81.64541626 -45.02346420]
[84.04339600 -30.20738220]
[85.19317627 -15.24260521]
[85.08669281 -0.23410122]
[83.72470093 14.71285534]
[81.11673737 29.49341965]
[77.28111267 44.00391769]
[72.24472046 58.14256287]
[66.04288483 71.81018066]
[79.13603973 79.12928772]
[92.22919464 86.44839478]
[118.81705475 80.36962891]
[133.52502441 77.42414856]
[148.23297119 74.47866821]
[161.73501587 62.00168991]
[178.12835693 68.18700409]
[192.77186584 64.93618011]
[207.41535950 61.68535614]
[222.05886841 58.43452835]
[236.70236206 55.18370438]
[251.34587097 51.93287659]
[265.98937988 48.68205261]
[268.24566650 33.67293549]
[275.77490234 20.49436188]
[287.55883789 10.92862320]
[302.00378418 6.26940632]
[317.15615845 7.14683294]
[330.96673584 13.44223881]
[341.56777954 24.30422020]
[347.52554321 38.26378632]
[348.03430176 53.43301773]
[343.02526855 67.76039886]
[333.17584229 79.30828094]
[319.81811523 86.51489258]
[304.75857544 88.40560150]
[290.03390503 84.72470856]
[277.63552856 75.97003174]
[269.24020386 63.32555389]
[254.59669495 66.57637787]
[239.95318604 69.82720184]
[225.30969238 73.07803345]
[210.66618347 76.32885742]
[196.02268982 79.57968140]
[181.37918091 82.83050537]
[174.58828735 92.88987732]
[162.36616516 95.68964386]
[151.17846680 89.18663025]
[136.47050476 92.13211060]
[121.76253510 95.07759094]
[136.08212280 99.54405975]
[150.90496826 97.24551392]
[165.30171204 101.45665741]
[176.54928589 111.38098145]
[182.52024841 125.14134979]
[182.08522034 140.13504028]
[175.32649231 153.52606201]
[163.52244568 162.78158569]
[148.90576172 166.15093994]
[134.24113464 162.99685669]
[122.30227661 153.91589355]
[115.34739685 140.62568665]
[114.69138336 125.64334106]
[107.50000000 112.47960663]
[107.50000000 127.47960663]
[107.50000000 142.47959900]
[107.50000000 157.47959900]
[107.50000000 172.47959900]
[107.50000000 187.47959900]
[107.50000000 202.47959900]
[107.50000000 217.47959900]
[107.50000000 232.47959900]
[107.50000000 247.47959900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[11 89]
[12 88]
[13 87]
[90 127]
[91 126]
[92 125]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
