%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAAxxxxxxxxxxGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[56.15049744 520.46368408]
[56.15049744 505.46365356]
[56.15049744 490.46365356]
[56.15049744 475.46365356]
[56.15049744 460.46365356]
[56.15049744 445.46365356]
[56.15049744 430.46365356]
[56.15049744 415.46365356]
[56.15049744 400.46365356]
[56.15049744 385.46365356]
[41.94557190 382.40847778]
[28.68638611 376.45156860]
[16.95874023 367.85333252]
[7.28134775 356.99090576]
[0.08290044 344.34164429]
[-4.31692791 330.46215820]
[-5.72167492 315.96380615]
[-4.06685972 301.48571777]
[0.57706016 287.66674805]
[8.00768566 275.11712646]
[17.89949799 264.39160156]
[29.81811142 255.96492004]
[43.23936081 250.21078491]
[57.57233429 247.38531494]
[47.10555649 236.85050964]
[47.20425415 221.63719177]
[58.32509232 210.73010254]
[58.63307190 195.73326111]
[50.45138931 208.30546570]
[38.68661499 217.61083984]
[24.56807137 222.67707825]
[9.57102585 222.97479248]
[-4.73745680 218.47285461]
[-16.86226082 209.64170837]
[-25.53644753 197.40412903]
[-29.85363579 183.03883362]
[-29.36271667 168.04685974]
[-24.11498833 153.99476624]
[-14.65879250 142.35087585]
[-1.98222280 134.33186340]
[12.59012699 130.77565002]
[27.53556824 132.05383301]
[41.29243088 138.03286743]
[52.42323685 148.08796692]
[59.76491165 161.16848755]
[62.55029678 175.90710449]
[67.96892548 161.92001343]
[73.38755035 147.93293762]
[61.86018753 139.38455200]
[52.94614029 128.13757324]
[47.25619888 114.96261597]
[45.18022919 100.76243591]
[46.86047745 86.51000977]
[52.18181610 73.18190765]
[60.77962875 61.69137192]
[72.06479645 52.82571793]
[85.26406860 47.19241714]
[99.47303772 45.17745972]
[113.71810913 46.91891098]
[119.42277527 33.04603195]
[125.12744141 19.17315102]
[123.21988678 3.46736145]
[135.21611023 -5.36098719]
[140.92077637 -19.23386765]
[139.01322937 -34.93965530]
[151.00946045 -43.76800537]
[156.71411133 -57.64088440]
[162.41877747 -71.51376343]
[168.12344360 -85.38665009]
[157.26551819 -93.34781647]
[148.48197937 -103.54102325]
[142.22016907 -115.44142151]
[138.79772949 -128.43736267]
[138.38648987 -141.86181641]
[141.00378418 -155.02667236]
[146.51182556 -167.25790405]
[154.62495422 -177.93016052]
[164.92436218 -186.49873352]
[176.87982178 -192.52732849]
[189.87692261 -195.71026611]
[203.24864197 -195.88804626]
[216.30960083 -193.05526733]
[222.85746765 -206.55065918]
[229.40534973 -220.04603577]
[235.95321655 -233.54141235]
[234.23663330 -249.85047913]
[247.65966797 -259.27142334]
[262.41384888 -252.11279297]
[263.32135010 -235.73876953]
[249.44859314 -226.99354553]
[242.90072632 -213.49816895]
[236.35285950 -200.00277710]
[229.80499268 -186.50740051]
[242.33341980 -175.57124329]
[251.32226562 -161.56387329]
[256.05209351 -145.59266663]
[256.14041138 -128.92266846]
[251.57281494 -112.87649536]
[242.70451355 -98.72933960]
[230.23281860 -87.60763550]
[215.14230347 -80.39936829]
[198.62709045 -77.68319702]
[181.99632263 -79.68198395]
[176.29165649 -65.80910492]
[170.58700562 -51.93622208]
[164.88233948 -38.06334305]
[167.19792175 -23.34983444]
[154.79365540 -13.52920437]
[149.08898926 0.34367612]
[151.40458679 15.05718422]
[139.00032043 24.87781334]
[133.29565430 38.75069427]
[127.59099579 52.62357330]
[139.78543091 62.27854919]
[148.77772522 74.96956635]
[153.84410095 89.67517090]
[154.57678223 105.21177673]
[150.91683960 120.32891083]
[143.15879822 133.80986023]
[131.92710876 144.56959534]
[118.12573242 151.74211121]
[102.86550140 154.75013733]
[87.37463379 153.35156250]
[81.95600891 167.33863831]
[76.53738403 181.32572937]
[73.62990570 196.04124451]
[73.32192993 211.03808594]
[83.98560333 222.39254761]
[83.45963287 237.59709167]
[72.56917572 247.69329834]
[87.62567139 251.41365051]
[101.47743225 258.37442017]
[113.43730927 268.22677612]
[122.91275024 280.47866821]
[129.43518066 294.51913452]
[132.68318176 309.64898682]
[132.49830627 325.11550903]
[128.89283752 340.14987183]
[122.04898071 354.00549316]
[112.30970001 365.99502563]
[100.16150665 375.52438354]
[86.21016693 382.12231445]
[71.15049744 385.46365356]
[71.15049744 400.46365356]
[71.15049744 415.46365356]
[71.15049744 430.46365356]
[71.15049744 445.46365356]
[71.15049744 460.46365356]
[71.15049744 475.46365356]
[71.15049744 490.46365356]
[71.15049744 505.46365356]
[71.15049744 520.46368408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 143]
[24 130]
[27 127]
[28 126]
[46 125]
[47 124]
[48 123]
[59 113]
[60 112]
[61 111]
[63 109]
[64 108]
[66 106]
[67 105]
[68 104]
[69 103]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
