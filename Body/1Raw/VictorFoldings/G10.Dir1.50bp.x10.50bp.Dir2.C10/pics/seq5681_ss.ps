%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:34:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGxxxxxxxxxxAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACCCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[102.05712128 276.01400757]
[102.05712128 261.01400757]
[102.05712128 246.01399231]
[102.05712128 231.01399231]
[102.05712128 216.01399231]
[102.05712128 201.01399231]
[102.05712128 186.01399231]
[102.05712128 171.01399231]
[102.05712128 156.01399231]
[102.05712128 141.01399231]
[86.76985168 137.22540283]
[74.60693359 128.19944763]
[67.17283630 115.70044708]
[65.22219849 101.89797974]
[68.60173798 88.99642181]
[76.34136200 78.88385773]
[67.83026886 66.53228760]
[59.31917953 54.18071365]
[42.52624893 46.69891739]
[41.73960876 29.19516945]
[32.97340012 17.02333260]
[14.90219021 17.51771545]
[0.25088194 7.19678688]
[-5.27075291 -9.68847847]
[0.35195023 -26.37538910]
[-8.91299915 -38.17202759]
[-18.17794800 -49.96866989]
[-27.44289780 -61.76530838]
[-36.70784760 -73.56195068]
[-49.39194870 -65.53047180]
[-62.82350922 -58.82345200]
[-76.86470795 -53.50970840]
[-91.37144470 -49.64377594]
[-106.19487000 -47.26531982]
[-121.18286896 -46.39875031]
[-136.18164062 -47.05295944]
[-151.03726196 -49.22122955]
[-165.59730530 -52.88131714]
[-179.71234131 -57.99566269]
[-193.23754883 -64.51177979]
[-206.03413391 -72.36280823]
[-217.97076416 -81.46817780]
[-228.92497253 -91.73445892]
[-238.78433228 -103.05629730]
[-247.44767761 -115.31751251]
[-254.82611084 -128.39228821]
[-260.84390259 -142.14645386]
[-265.43933105 -156.43887329]
[-268.56521606 -171.12286377]
[-270.18948364 -186.04777527]
[-270.29547119 -201.06042480]
[-268.88208008 -216.00677490]
[-265.96383667 -230.73344421]
[-261.57067871 -245.08932495]
[-255.74766541 -258.92706299]
[-248.55456543 -272.10473633]
[-240.06520081 -284.48703003]
[-230.36666870 -295.94696045]
[-219.55851746 -306.36688232]
[-207.75163269 -315.63986206]
[-195.06716919 -323.67077637]
[-181.63531494 -330.37722778]
[-167.59388733 -335.69033813]
[-153.08697510 -339.55563354]
[-138.26344299 -341.93344116]
[-123.27540588 -342.79934692]
[-108.27667236 -342.14447021]
[-93.42114258 -339.97555542]
[-78.86125946 -336.31481934]
[-64.74644470 -331.19985962]
[-51.22152328 -324.68313599]
[-38.42528915 -316.83154297]
[-26.48905754 -307.72564697]
[-15.53530693 -297.45889282]
[-5.67644501 -286.13662720]
[2.98636198 -273.87503052]
[10.36421871 -260.79992676]
[16.38141823 -247.04550171]
[20.97620964 -232.75288391]
[24.10144806 -218.06874084]
[25.72506142 -203.14376831]
[25.83038712 -188.13110352]
[24.41634560 -173.18481445]
[21.49744797 -158.45828247]
[17.10364723 -144.10260010]
[11.28002834 -130.26509094]
[4.08635378 -117.08776855]
[-4.40355873 -104.70582581]
[-14.10258865 -93.24633789]
[-24.91120720 -82.82689667]
[-15.64625740 -71.03025818]
[-6.38130856 -59.23361969]
[2.88364100 -47.43697739]
[12.14859009 -35.64033890]
[24.15144730 -37.89244843]
[36.03656769 -34.78461075]
[45.51168442 -26.85229492]
[50.72212219 -15.56752682]
[50.61366272 -3.06598449]
[45.14523697 8.25712490]
[53.91144562 20.42896271]
[65.83438110 22.69854164]
[73.23050690 32.82357025]
[71.67075348 45.66962433]
[80.18184662 58.02119446]
[88.69293213 70.37276459]
[111.23538971 67.03238678]
[132.36508179 80.18791962]
[140.64205933 105.88238525]
[155.57637024 107.28469086]
[170.51068115 108.68699646]
[185.44497681 110.08929443]
[200.37928772 111.49160004]
[215.05206299 104.16753387]
[228.58016968 113.43695831]
[227.04705811 129.76428223]
[212.02986145 136.35336304]
[198.97698975 126.42591095]
[184.04267883 125.02360535]
[169.10836792 123.62129974]
[154.17405701 122.21899414]
[139.23976135 120.81669617]
[133.69409180 125.86602020]
[146.12788391 134.25654602]
[158.56167603 142.64706421]
[170.99545288 151.03759766]
[183.42924500 159.42811584]
[197.54545593 164.50083923]
[207.33787537 175.86344910]
[210.27099609 190.57388306]
[205.58538818 204.82325745]
[194.49424744 214.92210388]
[179.86933899 218.25556946]
[165.49739075 213.96055603]
[155.09963989 203.14913940]
[151.36831665 188.61962891]
[144.17692566 175.45588684]
[136.98554993 162.29214478]
[129.79415894 149.12840271]
[122.60278320 135.96466064]
[117.05712128 141.01399231]
[117.05712128 156.01399231]
[117.05712128 171.01399231]
[117.05712128 186.01399231]
[117.05712128 201.01399231]
[117.05712128 216.01399231]
[117.05712128 231.01399231]
[117.05712128 246.01399231]
[117.05712128 261.01400757]
[117.05712128 276.01400757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[16 106]
[17 105]
[18 104]
[20 101]
[21 100]
[25 94]
[26 93]
[27 92]
[28 91]
[29 90]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
