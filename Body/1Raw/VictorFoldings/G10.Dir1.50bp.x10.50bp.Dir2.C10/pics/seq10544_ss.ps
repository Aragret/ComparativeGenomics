%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:35:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGGGGGGAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACACCCCCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.10144043 290.31353760]
[80.10144043 275.31353760]
[80.10144043 260.31353760]
[80.10144043 245.31353760]
[80.10144043 230.31353760]
[80.10144043 215.31353760]
[80.10144043 200.31353760]
[80.10144043 185.31353760]
[80.10144043 170.31353760]
[80.10144043 155.31353760]
[73.92565918 151.05798340]
[66.73427582 164.22172546]
[59.54289246 177.38546753]
[56.04219055 191.97125244]
[42.03551483 197.33901978]
[29.68359756 188.82843018]
[29.71049500 173.82846069]
[42.09415436 165.36207581]
[51.83411789 153.95448303]
[61.57408524 142.54689026]
[55.39830017 138.29135132]
[41.38158417 143.63285828]
[27.36487198 148.97438049]
[13.34815979 154.31588745]
[-0.66855335 159.65739441]
[-14.68526649 164.99891663]
[-28.70197868 170.34042358]
[-41.34971237 181.63073730]
[-55.70003891 172.60275269]
[-50.99743652 156.31405640]
[-34.04349136 156.32371521]
[-20.02677917 150.98220825]
[-6.01006603 145.64068604]
[8.00664711 140.29917908]
[22.02335930 134.95765686]
[36.04007339 129.61614990]
[50.05678558 124.27463531]
[45.78491592 103.52366638]
[49.61202240 83.15557861]
[60.62401962 66.14606476]
[76.88395691 54.84513474]
[95.76435089 50.65416336]
[114.36885834 53.85880280]
[113.52629852 38.06004715]
[126.09133148 30.06197739]
[132.71983337 16.60601234]
[139.34832764 3.15004683]
[145.97682190 -10.30591869]
[133.09065247 -17.99960899]
[120.86535645 -26.70526505]
[109.38022614 -36.36642456]
[98.70973969 -46.92043304]
[88.92311096 -58.29883957]
[80.08380127 -70.42784882]
[72.24913788 -83.22880554]
[65.46994019 -96.61868286]
[59.79017258 -110.51064301]
[55.24666977 -124.81459045]
[51.86889648 -139.43775940]
[49.67876053 -154.28530884]
[48.69046402 -169.26094055]
[48.91041946 -184.26753235]
[50.33720016 -199.20776367]
[52.96155167 -213.98474121]
[56.76645279 -228.50262451]
[61.72723007 -242.66726685]
[67.81171417 -256.38681030]
[74.98043060 -269.57223511]
[83.18689728 -282.13806152]
[92.37789154 -294.00280762]
[102.49379730 -305.08950806]
[113.46901703 -315.32623291]
[125.23237610 -324.64663696]
[137.70756531 -332.99026489]
[150.81369019 -340.30297852]
[164.46574402 -346.53735352]
[178.57519531 -351.65298462]
[193.05053711 -355.61666870]
[207.79788208 -358.40274048]
[222.72160339 -359.99307251]
[237.72488403 -360.37738037]
[252.71044922 -359.55319214]
[267.58108521 -357.52581787]
[282.24038696 -354.30841064]
[296.59323120 -349.92187500]
[310.54656982 -344.39459229]
[324.00988770 -337.76248169]
[336.89590454 -330.06848145]
[349.12100220 -321.36257935]
[360.60592651 -311.70117188]
[371.27618408 -301.14691162]
[381.06256104 -289.76828003]
[389.90161133 -277.63909912]
[397.73599243 -264.83795166]
[404.51489258 -251.44793701]
[410.19433594 -237.55584717]
[414.73754883 -223.25180054]
[418.11499023 -208.62855530]
[420.30480957 -193.78096008]
[421.29275513 -178.80531311]
[421.07247925 -163.79872131]
[419.64535522 -148.85852051]
[417.02069092 -134.08158875]
[413.21545410 -119.56378937]
[408.25436401 -105.39926147]
[402.16958618 -91.67987061]
[395.00057983 -78.49459076]
[386.79385376 -65.92893219]
[377.60260010 -54.06439972]
[367.48641968 -42.97793198]
[356.51098633 -32.74143600]
[344.74743652 -23.42129326]
[332.27206421 -15.07795525]
[319.16577148 -7.76552916]
[305.51358032 -1.53144133]
[291.40399170 3.58387828]
[276.92858887 7.54725361]
[262.18118286 10.33298111]
[247.25741577 11.92299366]
[232.25413513 12.30697823]
[217.26858521 11.48244667]
[202.39797974 9.45474434]
[187.73876953 6.23702383]
[173.38601685 1.85015166]
[159.43280029 -3.67741990]
[152.80429077 9.77854538]
[146.17579651 23.23451042]
[139.54730225 36.69047546]
[140.86396790 51.52677155]
[127.82482147 60.48730087]
[136.84387207 67.72422791]
[143.99165344 77.01065063]
[148.80528259 87.86505127]
[150.94525146 99.70220184]
[150.21839905 111.86470032]
[146.59291077 123.65943909]
[140.20416260 134.39710999]
[131.35099792 143.43243408]
[120.48231506 150.20277405]
[108.17459869 154.26287842]
[95.10144043 155.31353760]
[95.10144043 170.31353760]
[95.10144043 185.31353760]
[95.10144043 200.31353760]
[95.10144043 215.31353760]
[95.10144043 230.31353760]
[95.10144043 245.31353760]
[95.10144043 260.31353760]
[95.10144043 275.31353760]
[95.10144043 290.31353760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[10 141]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[43 130]
[45 128]
[46 127]
[47 126]
[48 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
